import Exercice from '../ClasseExercice.js';
import {liste_de_question_to_contenu_sans_numero,randint,choice,combinaison_listes,image_point_par_transformation,tex_fraction_reduite,calcul,tex_nombrec,tex_nombre} from "/modules/outils.js"
/**
 * Trouver les coordonnées d'un point transformé d'un autre par une des transformations du plan
 * @Auteur Jean-Claude Lhote
 * 3G10-1
 */
export default function Transformations_du_plan_et_coordonnees() {
	'use strict';
	Exercice.call(this); // Héritage de la classe Exercice()
	this.titre = "Trouver les coordonnées de l'image d'un point par une transformation du plan";
	this.consigne = "";
	this.pas_de_version_LaTeX = true;
	this.nb_questions = 1;
	this.nb_questions_modifiable = false;
	this.nb_cols = 1;
	this.nb_cols_corr = 1;
	this.type_exercice = 'MG32';
	this.sup = 1; // 1 calcul de l'hypoténuse 2 calcul d'un côté de l'angle droit 
	sortie_html ? this.spacing_corr = 2.5 : this.spacing_corr = 1.5;
	this.liste_packages = 'tkz-euclide';
	this.nouvelle_version = function (numero_de_l_exercice) {

		this.MG32editable = false;
		this.taille_div_MG32 = [700, 700];
		this.MG32codeBase64 = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAAAEAACAEwAAgBIAAIAaAACBDAAAAAAFHAAAAtIAAAEBAAAAAAAAAAEAAAB9#####wAAAAEACkNDYWxjQ29uc3QA#####wACcGkAFjMuMTQxNTkyNjUzNTg5NzkzMjM4NDb#####AAAAAQAKQ0NvbnN0YW50ZUAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAADgABTwDAKAAAAAAAAAAAAAAAAAAABQABQHXYAAAAAABAdjhR64UeuP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAAQAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAEOAAFJAMAYAAAAAAAAAAAAAAAAAAAFAAFAOQAAAAAAAAAAAAL#####AAAAAQAJQ0Ryb2l0ZUFCAP####8AAAAAABAAAAEAAQAAAAEAAAAD#####wAAAAEAFkNEcm9pdGVQZXJwZW5kaWN1bGFpcmUA#####wAAAAAAEAAAAQABAAAAAQAAAAT#####AAAAAQAJQ0NlcmNsZU9BAP####8BAAAAAAEAAAABAAAAA#####8AAAABABBDSW50RHJvaXRlQ2VyY2xlAP####8AAAAFAAAABv####8AAAABABBDUG9pbnRMaWVCaXBvaW50AP####8BAAAAABAAAAEFAAEAAAAHAAAACQD#####AAAAAAEOAAFKAMAoAAAAAAAAwBAAAAAAAAAFAAIAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAADAAAACQEBAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAE#8AAAAAAAAAAAAAE#8AAAAAAAAP####8AAAABAApDVW5pdGV4UmVwAP####8ABHVuaXQAAAAK#####wAAAAEAC0NIb21vdGhldGllAP####8AAAAB#####wAAAAEACkNPcGVyYXRpb24DAAAAAT#wAAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAv#####AAAAAQALQ1BvaW50SW1hZ2UA#####wEAAAAAEAACVyIBAQAAAAADAAAADP####8AAAABAAlDTG9uZ3VldXIA#####wAAAAEAAAAN#####wAAAAEAB0NDYWxjdWwA#####wAHbmJncmFkeAACMjAAAAABQDQAAAAAAAAAAAARAP####8AB25iZ3JhZHkAAjIwAAAAAUA0AAAAAAAA#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AFEdyYWR1YXRpb25BeGVzUmVwZXJlAAAAGwAAAAgAAAADAAAACgAAAA8AAAAQ#####wAAAAEAE0NBYnNjaXNzZU9yaWdpbmVSZXAAAAAAEQAFYWJzb3IAAAAK#####wAAAAEAE0NPcmRvbm5lZU9yaWdpbmVSZXAAAAAAEQAFb3Jkb3IAAAAKAAAACwAAAAARAAZ1bml0ZXgAAAAK#####wAAAAEACkNVbml0ZXlSZXAAAAAAEQAGdW5pdGV5AAAACv####8AAAABABBDUG9pbnREYW5zUmVwZXJlAAAAABEAAAAAABAAAAEFAAAAAAoAAAAOAAAAEgAAAA4AAAATAAAAFgAAAAARAAAAAAAQAAABBQAAAAAKAAAADQAAAAAOAAAAEgAAAA4AAAAUAAAADgAAABMAAAAWAAAAABEAAAAAABAAAAEFAAAAAAoAAAAOAAAAEgAAAA0AAAAADgAAABMAAAAOAAAAFQAAAAwAAAAAEQAAABYAAAAOAAAADwAAAA8AAAAAEQAAAAAAEAAAAQUAAAAAFwAAABkAAAAMAAAAABEAAAAWAAAADgAAABAAAAAPAAAAABEAAAAAABAAAAEFAAAAABgAAAAb#####wAAAAEACENTZWdtZW50AAAAABEBAAAAABAAAAEAAQAAABcAAAAaAAAAFwAAAAARAQAAAAAQAAABAAEAAAAYAAAAHAAAAAQAAAAAEQEAAAAACwABVwDAFAAAAAAAAMA0AAAAAAAABQABP9xWeJq83w4AAAAd#####wAAAAIACENNZXN1cmVYAAAAABEABnhDb29yZAAAAAoAAAAfAAAAEQAAAAARAAVhYnN3MQAGeENvb3JkAAAADgAAACD#####AAAAAgASQ0xpZXVPYmpldFBhclB0TGllAQAAABEAZmZmAAAAHwAAAA4AAAAPAAAAHwAAAAIAAAAfAAAAHwAAABEAAAAAEQAFYWJzdzIADTIqYWJzb3ItYWJzdzEAAAANAQAAAA0CAAAAAUAAAAAAAAAAAAAADgAAABIAAAAOAAAAIQAAABYAAAAAEQEAAAAAEAAAAQUAAAAACgAAAA4AAAAjAAAADgAAABMAAAAZAQAAABEAZmZmAAAAJAAAAA4AAAAPAAAAHwAAAAUAAAAfAAAAIAAAACEAAAAjAAAAJAAAAAQAAAAAEQEAAAAACwABUgBAIAAAAAAAAMAgAAAAAAAABQABP9EbToG06B8AAAAe#####wAAAAIACENNZXN1cmVZAAAAABEABnlDb29yZAAAAAoAAAAmAAAAEQAAAAARAAVvcmRyMQAGeUNvb3JkAAAADgAAACcAAAAZAQAAABEAZmZmAAAAJgAAAA4AAAAQAAAAJgAAAAIAAAAmAAAAJgAAABEAAAAAEQAFb3JkcjIADTIqb3Jkb3Itb3JkcjEAAAANAQAAAA0CAAAAAUAAAAAAAAAAAAAADgAAABMAAAAOAAAAKAAAABYAAAAAEQEAAAAAEAAAAQUAAAAACgAAAA4AAAASAAAADgAAACoAAAAZAQAAABEAZmZmAAAAKwAAAA4AAAAQAAAAJgAAAAUAAAAmAAAAJwAAACgAAAAqAAAAK#####8AAAACAAxDQ29tbWVudGFpcmUAAAAAEQFmZmYAAAAAAAAAAABAGAAAAAAAAAAAAB8LAAH###8AAAABAAAAAAAAAAEAAAAAAAAAAAALI1ZhbChhYnN3MSkAAAAZAQAAABEAZmZmAAAALQAAAA4AAAAPAAAAHwAAAAQAAAAfAAAAIAAAACEAAAAtAAAAGwAAAAARAWZmZgAAAAAAAAAAAEAYAAAAAAAAAAAAJAsAAf###wAAAAEAAAAAAAAAAQAAAAAAAAAAAAsjVmFsKGFic3cyKQAAABkBAAAAEQBmZmYAAAAvAAAADgAAAA8AAAAfAAAABgAAAB8AAAAgAAAAIQAAACMAAAAkAAAALwAAABsAAAAAEQFmZmYAwCAAAAAAAAA#8AAAAAAAAAAAACYLAAH###8AAAACAAAAAQAAAAEAAAAAAAAAAAALI1ZhbChvcmRyMSkAAAAZAQAAABEAZmZmAAAAMQAAAA4AAAAQAAAAJgAAAAQAAAAmAAAAJwAAACgAAAAxAAAAGwAAAAARAWZmZgDAHAAAAAAAAAAAAAAAAAAAAAAAKwsAAf###wAAAAIAAAABAAAAAQAAAAAAAAAAAAsjVmFsKG9yZHIyKQAAABkBAAAAEQBmZmYAAAAzAAAADgAAABAAAAAmAAAABgAAACYAAAAnAAAAKAAAACoAAAArAAAAMwAAABEA#####wABeAABMwAAAAFACAAAAAAAAAAAABEA#####wABeQABMgAAAAFAAAAAAAAAAAAAABYA#####wAAAAAAEAABQQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAADgAAADUAAAAOAAAANgAAABEA#####wACeDEAAi0z#####wAAAAEADENNb2luc1VuYWlyZQAAAAFACAAAAAAAAAAAABEA#####wACeTEAATIAAAABQAAAAAAAAAAAAAARAP####8AAngyAAEyAAAAAUAAAAAAAAAAAAAAEQD#####AAJ5MgABMQAAAAE#8AAAAAAAAAAAABYA#####wEAAAAAEAACTyIAwDEAAAAAAADAQQAAAAAAAAYAAAAACgAAAA4AAAA6AAAADgAAADv#####AAAAAQAJQ0Ryb2l0ZU9tAP####8BAAAAABAAAAEAAQAAAAoAAAA8AAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAUAIKPXCj1wmAAAAPQAAABEA#####wAEYmlzMQABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAADwAAAAOAAAAPwAAAA8A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAD4AAABAAAAABQD#####AAAAAAEQAAJkMQEAAT#szMzMzMzNAAAAPAAAAEEAAAADAP####8BAAAAARAAAAEAAQAAADwBP#AAAAAAAAAAAAAEAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABQFkAAAAAAAAAAABDAAAAEQD#####AAN4eCcAATEAAAABP#AAAAAAAAAAAAAMAP####8AAAA8AAAADgAAAEUAAAAPAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABEAAAARgAAAAUA#####wAAAAABEAABZADAEvfO2RaIAD#wAAAAAAAAAAE#7ChslIjsKgAAADwAAABHAAAAAwD#####AQAAAAEQAAABAAEAAAA8AD#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAcBYv######+AAAASQAAABEA#####wADeXknAAExAAAAAT#wAAAAAAAAAAAADAD#####AAAAPAAAAA4AAABLAAAADwD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAAAASgAAAEwAAAAFAP####8AAAAAARAAAmQnAQABP+zMzMzMzM0AAAA8AAAATQAAAB0A#####wEAAAAAEAAAAQABAAAACgAAADwAAAAcAAAAAT#wAAAAAAAAAAAABAD#####AQAAAAAQAAAAAAAAAAAAAABACAAAAAAAAAUAAUARrhR64UeuAAAATwAAABEA#####wAEYmlzMgABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAADwAAAAOAAAAUQAAAA8A#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAFAAAABSAAAABQD#####AAAAAAEQAAJkMgEAAT#szMzMzMzNAAAAPAAAAFMAAAARAP####8ACUFmZmljaGVPJwABMQAAAAE#8AAAAAAAAAAAAAwA#####wAAAAEAAAABP#AAAAAAAAAAAAAPAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQAAAAA8AAAAVgAAAAwA#####wAAAAEAAAANAwAAAAE#8AAAAAAAAAAAAA4AAABVAAAADwD#####AAAAAAAOAAJPJwAAAAAAAAAAAEAIAAAAAAAACQAAAAA8AAAAWP####8AAAABAAhDVmVjdGV1cgD#####Af8AAAAQAAABAAIAAAABAAAAVwAAAAARAP####8ACkFmZmljaGVPTycAATEAAAABP#AAAAAAAAD#####AAAAAQARQ1BvaW50UGFyTXVsdFZlY3QA#####wEAAAAADgACTzMAQDkAAAAAAABACAAAAAAAAAMAAAAAAQAAAFoAAAANAwAAAAE#8AAAAAAAAAAAAA4AAABbAAAAHgD#####AP8AAAAQAAABAAIAAAABAAAAXAAAAAAfAP####8B#wAAABAAAAEFAAAAAAEAAABdAAAAAT#gAAAAAAAAAAAABgD#####Af8AAAAQAAABAAIAAABeAAAAXf####8AAAACAAlDQ2VyY2xlT1IA#####wH#AAAAAgAAAF4AAAABP8mZmZmZmZoAAAAACAD#####AAAAXwAAAGAAAAAJAP####8B#wAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAYQAAAAkA#####wH#AAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAABh#####wAAAAIABkNMYXRleAD#####AP8AAADAMgAAAAAAAMAxAAAAAAAAAAAAYxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABNcb3ZlcnJpZ2h0YXJyb3cge3Z9#####wAAAAEAEUNQb2ludFBhckFic2Npc3NlAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAABAAAAAwAAAAFAJAAAAAAAAAAAAAcA#####wEAAAAAAQAAAAEAAABlAAAACAD#####AAAAVAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAZwAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAIAAABnAAAACAD#####AAAATgAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAagAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABqAAAACAD#####AAAAQgAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAbQAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABtAAAACAD#####AAAASAAAAGYAAAAJAP####8BAAAAABAAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAcAAAAAkA#####wEAAAAAEAAAAAAAAAAAAAAAQAgAAAAAAAAFAAEAAABwAAAAGwD#####AAAAAAEAAAByEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAyhkKQAAABsA#####wAAAAAAQAAAAAAAAADAGAAAAAAAAAAAAGwQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAEKGQnKQAAABsA#####wAAAAABAAAAbxAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAgoZCNMKDEpKQAAABsA#####wAAAAAAwDUAAAAAAABAFAAAAAAAAAAAAGkQAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAIKGQjTCgyKSkAAAARAP####8AAnhCAAExAAAAAT#wAAAAAAAAAAAAEQD#####AAJ5QgABMQAAAAE#8AAAAAAAAAAAABEA#####wACeEMAATEAAAABP#AAAAAAAAAAAAARAP####8AAnlDAAExAAAAAT#wAAAAAAAAAAAAFgD#####AAAAAAAQAAFCAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAOAAAAdwAAAA4AAAB4AAAAFgD#####AAAAAAAQAAFDAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAOAAAAeQAAAA4AAAB6AAAADv##########";
		this.MG32codeBase64corr = "TWF0aEdyYXBoSmF2YTEuMAAAABI+TMzNAAJmcv###wEA#wAAAADEAACIuAAAgIkAAICKAAB9FwAAgCoAAH0TAAB9EgAAgCcAAIAoAAB9FAAAgK4AAIB8AACAhAAAgAsAAIAlAACAIAAAgA0AAIAOAACBWQAAgAwAAIDxAACBJwAAgHkAAIB7AACAegAAgCQAAIFxAACAbQAAgGoAAIC7AACAvAAAfR0AAH0eAACAgAAAgYMAAIAPAACAEwAAgBIAAIAXAACAFgAAgF4AAIBfAACAZQAAfRAAAIDrAACAEAAAgEgAAIAUAAB9KAAAgBoAAIAdAACA6QAAgVAAAIFRAACBDAAAgQ0AAIFSAACBUwAAgB4AAIAcAACAGwAAgBkAAIBgAACBIAAAgN4AAIDfAACBCgAAgOAAAIFDAACASQAAgEoAAIEXAACBGAAAgDMAAIB2AACA7AAAgO0AAIDYAACA2QAAgNoAAIDbAACAcgAAgXkAAIFiAACBZAAAgE0AAIAfAACAIgAAgCMAAIAhAACAxwAAgT0AAIELAACBBAAAgC0AAIFMAACAMAAAgSoAAIErAACALgAAgDEAAIDyAACBaQAAgWcAAIGlAACBdQAAgC8AAIA1AACAWQAAgFwAAH0KAAB9CwAAgUkAAIFLAAB9DgAAfQ8AAH0RAAB9FQAAfSQAAIBuAACAawAAgLAAAIFXAACAsQAAgVYAAICyAACBVAAAgLcAAIC4AACAswAAgPcAAIC0AACAtQAAgQYAAIEfAACBAgAAgY4AAIGPAACBAwAAgOMAAID2AACBBwAAgQkAAIEpAACBKAAAgOgAAIBvAACAcAAAgHQAAIBQAACA3QAAfRkAAH0YAACBbAAAgHEAAIFtAACBbgAAgXIAAIGGAAB9IwAAgQgAAIDkAACA5wAAgOUAAIDuAAB9KwAAfS0AAH0qAAB9LAAAgW8AAIFwAACBeAAAgXcAAH0mAACA8AAAfSUAAIEiAAB9KQAAfScAAIGjAACBpAAAfR8AAH0gAAB9IQAAfSIAAIBiAACAYwAAgGcAAIBoAACAaQAAgMkAAIBLAACArwAAgSwAAIDhAACA4gAAAAAFHAAAAtIAAAEBAAAAAQAAAAYAEHN5bcOpdHJpZSBheGlhbGUADFBvaW50CmRyb2l0ZQAAAAIAAAAGAAAAABr#####AAAAAQARQ0VsZW1lbnRHZW5lcmlxdWUAAAAAAAH#####AAAAAAAAAAAACf##########AAAAAQAHQ0NhbGN1bAD#####AAJ4MgABMv####8AAAABAApDQ29uc3RhbnRlQAAAAAAAAAAAAAABAP####8AAnkyAAExAAAAAj#wAAAAAAAAAAAAAQD#####AARiaXMxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0MQABMQAAAAI#8AAAAAAAAAAAAAEA#####wADeFAxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDEAAi0x#####wAAAAEADENNb2luc1VuYWlyZQAAAAI#8AAAAAAAAP####8AAAABAA9DU3ltZXRyaWVBeGlhbGUA#####wAAAAH#####AAAAAQALQ1BvaW50SW1hZ2UB#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAAAAAAI#####wAAAAEAB0NNaWxpZXUA#####wEAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAAAAAAAAAAJ#####wAAAAEACENTZWdtZW50Af####8AAAD#ABAAAAEAAQAAAAAAAAAKAAAABwH#####AAAA#wAQAAABAAEAAAAKAAAACf####8AAAACAAlDQ2VyY2xlT1IA#####wEAAP8AAQAAAAoAAAACP8mZmZmZmZoA#####wAAAAEAEENJbnREcm9pdGVDZXJjbGUA#####wAAAAsAAAAN#####wAAAAEAEENQb2ludExpZUJpcG9pbnQA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAAOAAAABwD#####AQAAAAAQAAABAAEAAAAKAAAAD#####8AAAABABZDRHJvaXRlUGVycGVuZGljdWxhaXJlAP####8AAAAAAA0AAAEBAQAAAAoAAAAQ#####wAAAAEACUNDZXJjbGVPQQD#####AAAAAAEBAAAACgAAAA8AAAAJAP####8AAAARAAAAEgAAAAoA#####wAAAP8AEgAAAQcAAgAAABP#####AAAAAQAMQ1RyYW5zbGF0aW9uAP####8AAAAKAAAADwAAAAUA#####wAAAP8AEgAAAQcAAAAAFAAAABX#####AAAAAQAJQ1BvbHlnb25lAf####8AAAD#AAEAAAAFAAAACgAAAA8AAAAWAAAAFAAAAAr#####AAAAAQAOQ01hcnF1ZVNlZ21lbnQB#####wD#AAAAAQAAAAALAAAADwH#####AP8AAAABAAAAAAwAAAABAAABoP####8AAAABAApDQ2FsY0NvbnN0AP####8AAnBpABYzLjE0MTU5MjY1MzU4OTc5MzIzODQ2AAAAAkAJIftURC0Y#####wAAAAEACkNQb2ludEJhc2UA#####wAAAAAADgABTwDAKAAAAAAAAAAAAAAAAAAABQABQHXYAAAAAABAdjhR64UeuP####8AAAABABRDRHJvaXRlRGlyZWN0aW9uRml4ZQD#####AQAAAAASAAABAAEAAAABAT#wAAAAAAAA#####wAAAAEAD0NQb2ludExpZURyb2l0ZQD#####AAAAAAEOAAFJAMAYAAAAAAAAAAAAAAAAAAAFAAFAOQAAAAAAAAAAAAL#####AAAAAQAJQ0Ryb2l0ZUFCAP####8AAAAAABAAAAEAAQAAAAEAAAADAAAACwD#####AAAAAAASAAABAAEAAAABAAAABAAAAAwA#####wEAAAAAAQAAAAEAAAADAAAACQD#####AAAABQAAAAYAAAAKAP####8BAAAAABIAAAEFAAEAAAAHAAAACgD#####AAAAAAEOAAFKAMAoAAAAAAAAwBAAAAAAAAAFAAIAAAAH#####wAAAAIAB0NSZXBlcmUA#####wDm5uYAAQAAAAEAAAADAAAACQEBAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAI#8AAAAAAAAAAAAAI#8AAAAAAAAP####8AAAABAApDVW5pdGV4UmVwAP####8ABHVuaXQAAAAK#####wAAAAEAC0NIb21vdGhldGllAP####8AAAAB#####wAAAAEACkNPcGVyYXRpb24DAAAAAj#wAAAAAAAA#####wAAAAEAD0NSZXN1bHRhdFZhbGV1cgAAAAsAAAAFAP####8BAAAAABAAAlciAQEAAAAAAwAAAAz#####AAAAAQAJQ0xvbmd1ZXVyAP####8AAAABAAAADQAAAAEA#####wAHbmJncmFkeAACMjAAAAACQDQAAAAAAAAAAAABAP####8AB25iZ3JhZHkAAjIwAAAAAkA0AAAAAAAA#####wAAAAEAFENJbXBsZW1lbnRhdGlvblByb3RvAP####8AFEdyYWR1YXRpb25BeGVzUmVwZXJlAAAAGwAAAAgAAAADAAAACgAAAA8AAAAQ#####wAAAAEAE0NBYnNjaXNzZU9yaWdpbmVSZXAAAAAAEQAFYWJzb3IAAAAK#####wAAAAEAE0NPcmRvbm5lZU9yaWdpbmVSZXAAAAAAEQAFb3Jkb3IAAAAKAAAAFgAAAAARAAZ1bml0ZXgAAAAK#####wAAAAEACkNVbml0ZXlSZXAAAAAAEQAGdW5pdGV5AAAACv####8AAAABABBDUG9pbnREYW5zUmVwZXJlAAAAABEAAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABkAAAATAAAAHwAAAAARAAAAAAASAAABBQAAAAAKAAAAGAAAAAAZAAAAEgAAABkAAAAUAAAAGQAAABMAAAAfAAAAABEAAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABgAAAAAGQAAABMAAAAZAAAAFQAAABcAAAAAEQAAABYAAAAZAAAADwAAAAUAAAAAEQAAAAAAEgAAAQUAAAAAFwAAABkAAAAXAAAAABEAAAAWAAAAGQAAABAAAAAFAAAAABEAAAAAABIAAAEFAAAAABgAAAAbAAAABwAAAAARAQAAAAAQAAABAAEAAAAXAAAAGgAAAAcAAAAAEQEAAAAAEAAAAQABAAAAGAAAABwAAAATAAAAABEBAAAAAAsAAVcAwBQAAAAAAADANAAAAAAAAAUAAT#cVniavN8OAAAAHf####8AAAACAAhDTWVzdXJlWAAAAAARAAZ4Q29vcmQAAAAKAAAAHwAAAAEAAAAAEQAFYWJzdzEABnhDb29yZAAAABkAAAAg#####wAAAAIAEkNMaWV1T2JqZXRQYXJQdExpZQEAAAARAGZmZgAAAB8AAAAZAAAADwAAAB8AAAACAAAAHwAAAB8AAAABAAAAABEABWFic3cyAA0yKmFic29yLWFic3cxAAAAGAEAAAAYAgAAAAJAAAAAAAAAAAAAABkAAAASAAAAGQAAACEAAAAfAAAAABEBAAAAABIAAAEFAAAAAAoAAAAZAAAAIwAAABkAAAATAAAAIQEAAAARAGZmZgAAACQAAAAZAAAADwAAAB8AAAAFAAAAHwAAACAAAAAhAAAAIwAAACQAAAATAAAAABEBAAAAAAsAAVIAQCAAAAAAAADAIAAAAAAAAAUAAT#RG06BtOgfAAAAHv####8AAAACAAhDTWVzdXJlWQAAAAARAAZ5Q29vcmQAAAAKAAAAJgAAAAEAAAAAEQAFb3JkcjEABnlDb29yZAAAABkAAAAnAAAAIQEAAAARAGZmZgAAACYAAAAZAAAAEAAAACYAAAACAAAAJgAAACYAAAABAAAAABEABW9yZHIyAA0yKm9yZG9yLW9yZHIxAAAAGAEAAAAYAgAAAAJAAAAAAAAAAAAAABkAAAATAAAAGQAAACgAAAAfAAAAABEBAAAAABIAAAEFAAAAAAoAAAAZAAAAEgAAABkAAAAqAAAAIQEAAAARAGZmZgAAACsAAAAZAAAAEAAAACYAAAAFAAAAJgAAACcAAAAoAAAAKgAAACv#####AAAAAgAMQ0NvbW1lbnRhaXJlAAAAABEBZmZmAAAAAAAAAAAAQBgAAAAAAAAAAAAfCwAB####AAAAAQAAAAAAAAACAAAAAAAAAAAACyNWYWwoYWJzdzEpAAAAIQEAAAARAGZmZgAAAC0AAAAZAAAADwAAAB8AAAAEAAAAHwAAACAAAAAhAAAALQAAACMAAAAAEQFmZmYAAAAAAAAAAABAGAAAAAAAAAAAACQLAAH###8AAAABAAAAAAAAAAIAAAAAAAAAAAALI1ZhbChhYnN3MikAAAAhAQAAABEAZmZmAAAALwAAABkAAAAPAAAAHwAAAAYAAAAfAAAAIAAAACEAAAAjAAAAJAAAAC8AAAAjAAAAABEBZmZmAMAgAAAAAAAAP#AAAAAAAAAAAAAmCwAB####AAAAAgAAAAEAAAACAAAAAAAAAAAACyNWYWwob3JkcjEpAAAAIQEAAAARAGZmZgAAADEAAAAZAAAAEAAAACYAAAAEAAAAJgAAACcAAAAoAAAAMQAAACMAAAAAEQFmZmYAwBwAAAAAAAAAAAAAAAAAAAAAACsLAAH###8AAAACAAAAAQAAAAIAAAAAAAAAAAALI1ZhbChvcmRyMikAAAAhAQAAABEAZmZmAAAAMwAAABkAAAAQAAAAJgAAAAYAAAAmAAAAJwAAACgAAAAqAAAAKwAAADMAAAABAP####8AAXgAATMAAAACQAgAAAAAAAAAAAABAP####8AAXkAATIAAAACQAAAAAAAAAAAAAAfAP####8AAAAAABAAAUEAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAA1AAAAGQAAADYAAAABAP####8AAngxAAItMwAAAAMAAAACQAgAAAAAAAAAAAABAP####8AAnkxAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAJ4MgABMgAAAAJAAAAAAAAAAAAAAAEA#####wACeTIAATEAAAACP#AAAAAAAAAAAAAfAP####8BAAAAABAAAk8iAMAxAAAAAAAAwEEAAAAAAAAGAAAAAAoAAAAZAAAAOgAAABkAAAA7#####wAAAAEACUNEcm9pdGVPbQD#####AQAAAAASAAABAAEAAAAKAAAAPAAAAAI#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAFACCj1wo9cJgAAAD0AAAABAP####8ABGJpczEAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAA8AAAAGQAAAD8AAAAFAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAA+AAAAQAAAABQA#####wAAAAABEAACZDEBAAI#7MzMzMzMzQAAADwAAABBAAAAEgD#####AQAAAAESAAABAAEAAAA8AT#wAAAAAAAAAAAAEwD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAUBZAAAAAAAAAAAAQwAAAAEA#####wADeHgnAAExAAAAAj#wAAAAAAAAAAAAFwD#####AAAAPAAAABkAAABFAAAABQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAAAARAAAAEYAAAAUAP####8AAAAAARAAAWQAwBL3ztkWiAA#8AAAAAAAAAADP+wobJSI7CoAAAA8AAAARwAAABIA#####wEAAAABEgAAAQABAAAAPAA#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAHAWL#######gAAAEkAAAABAP####8AA3l5JwABMQAAAAI#8AAAAAAAAAAAABcA#####wAAADwAAAAZAAAASwAAAAUA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAAAAEoAAABMAAAAFAD#####AAAAAAEQAAJkJwEAAz#szMzMzMzNAAAAPAAAAE0AAAAkAP####8BAAAAABIAAAEAAQAAAAoAAAA8AAAAAwAAAAI#8AAAAAAAAAAAABMA#####wEAAAAAEgAAAAAAAAAAAAAAQAgAAAAAAAAFAAFAEa4UeuFHrgAAAE8AAAABAP####8ABGJpczIAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAA8AAAAGQAAAFEAAAAFAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQAAAABQAAAAUgAAABQA#####wAAAAABEAACZDIBAAI#7MzMzMzMzQAAADwAAABTAAAAAQD#####AAlBZmZpY2hlTycAATEAAAACP#AAAAAAAAAAAAAXAP####8AAAABAAAAAj#wAAAAAAAAAAAABQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAAAAPAAAAFYAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAVQAAAAUA#####wAAAAAADgACTycAAAAAAAAAAABACAAAAAAAAAkAAAAAPAAAAFj#####AAAAAQAIQ1ZlY3RldXIA#####wH#AAAAEAAAAQACAAAAAQAAAFcAAAAAAQD#####AApBZmZpY2hlT08nAAExAAAAAj#wAAAAAAAA#####wAAAAEAEUNQb2ludFBhck11bHRWZWN0AP####8BAAAAAA4AAk8zAEA5AAAAAAAAQAgAAAAAAAADAAAAAAEAAABaAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAWwAAACUA#####wD#AAAAEAAAAQACAAAAAQAAAFwAAAAAJgD#####Af8AAAASAAABBQAAAAABAAAAXQAAAAI#4AAAAAAAAAAAAAsA#####wH#AAAAEgAAAQACAAAAXgAAAF0AAAAIAP####8B#wAAAAIAAABeAAAAAj#JmZmZmZmaAAAAAAkA#####wAAAF8AAABgAAAACgD#####Af8AAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGEAAAAKAP####8B#wAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAYf####8AAAACAAZDTGF0ZXgA#####wD#AAAAwDIAAAAAAADAMQAAAAAAAAAAAGMQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAATXG92ZXJyaWdodGFycm93IHt2ff####8AAAABABFDUG9pbnRQYXJBYnNjaXNzZQD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAAQAAAAMAAAACQCoAAAAAAAAAAAAMAP####8BAAAAAAEAAAABAAAAZQAAAAkA#####wAAAFQAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAQAAAGcAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQACAAAAZwAAAAkA#####wAAAE4AAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAGoAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAagAAAAkA#####wAAAEIAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAG0AAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAbQAAAAkA#####wAAAEgAAABmAAAACgD#####AQAAAAASAAAAAAAAAAAAAABACAAAAAAAAAUAAgAAAHAAAAAKAP####8BAAAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABAAAAcAAAACMA#####wAAAAAAwCIAAAAAAADAPQAAAAAAAAAAAHIQAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAIKGQjTCgzKSkAAAAjAP####8AAAAAAEAQAAAAAAAAwC########wAAABsEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAABChkJykAAAAjAP####8AAAAAAEBHgAAAAAAAwEqAAAAAAAAAAABvEAAAAAAAAAAAAAAAAAACAAAAAAAAAAAACChkI0woMSkpAAAAIwD#####AAAAAADATgAAAAAAAMBDf#######AAAAaRAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAgoZCNMKDIpKQAAAAEA#####wACeEIAATEAAAACP#AAAAAAAAAAAAABAP####8AAnlCAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ4QwABMQAAAAI#8AAAAAAAAAAAAAEA#####wACeUMAATEAAAACP#AAAAAAAAAAAAAfAP####8AAAAAABAAAUIAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAB3AAAAGQAAAHgAAAAfAP####8AAAAAABAAAUMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAAB5AAAAGQAAAHoAAAABAP####8AA3hBJwABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeUEnAAEyAAAAAkAAAAAAAAAAAAAAAQD#####AAN4QicAATUAAAACQBQAAAAAAAAAAAABAP####8AA3lCJwABMwAAAAJACAAAAAAAAAAAAAEA#####wADeEMnAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN5QycAATQAAAACQBAAAAAAAAAAAAABAP####8AAnQxAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0MgABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDMAATEAAAACP#AAAAAAAAAAAAABAP####8AAnQ0AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0NQABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDYAATEAAAACP#AAAAAAAAAAAAABAP####8AAnQ3AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAJ0OAABMQAAAAI#8AAAAAAAAAAAAAEA#####wACdDkAATEAAAACP#AAAAAAAAAAAAABAP####8AA3QxMAABMQAAAAI#8AAAAAAAAAAAAAEA#####wADdDExAAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN0MTIAATEAAAACP#AAAAAAAAAAAAABAP####8AA3QxMwABMQAAAAI#8AAAAAAAAAAAAAEA#####wADdDE0AAExAAAAAj#wAAAAAAAAAAAAAQD#####AAN4UDEAATEAAAACP#AAAAAAAAAAAAABAP####8AA3hQMgABMgAAAAJAAAAAAAAAAAAAAAEA#####wADeFAzAAEzAAAAAkAIAAAAAAAAAAAAAQD#####AAN4UDQAATQAAAACQBAAAAAAAAAAAAABAP####8AA3hQNQABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeFA2AAE2AAAAAkAYAAAAAAAAAAAAAQD#####AAN4UDcAATcAAAACQBwAAAAAAAAAAAABAP####8AA3hQOAABOAAAAAJAIAAAAAAAAAAAAAEA#####wADeFA5AAE5AAAAAkAiAAAAAAAAAAAAAQD#####AAR4UDEwAAIxMAAAAAJAJAAAAAAAAAAAAAEA#####wAEeFAxMQACMTEAAAACQCYAAAAAAAAAAAABAP####8ABHhQMTIAAjEyAAAAAkAoAAAAAAAAAAAAAQD#####AAR4UDEzAAIxMwAAAAJAKgAAAAAAAAAAAAEA#####wAEeFAxNAACMTQAAAACQCwAAAAAAAAAAAABAP####8AA3lQMQACLTQAAAADAAAAAkAQAAAAAAAAAAAAAQD#####AAN5UDIAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wADeVAzAAItNQAAAAMAAAACQBQAAAAAAAAAAAABAP####8AA3lQNAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDUAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wADeVA2AAItMQAAAAMAAAACP#AAAAAAAAAAAAABAP####8AA3lQOAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAN5UDkAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wAEeVAxMAACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAR5UDExAAItMQAAAAMAAAACP#AAAAAAAAAAAAABAP####8ABHlQMTIAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAEA#####wAEeVAxMwACLTEAAAADAAAAAj#wAAAAAAAAAAAAAQD#####AAR5UDE0AAItMQAAAAMAAAACP#AAAAAAAAAAAAAfAP####8B#wAAABIAAlAxAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAkQAAABkAAACfAAAAHwD#####Af8AAAASAAJQMgAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJIAAAAZAAAAoAAAAB8A#####wH#AAAAEgACUDMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACTAAAAGQAAAKEAAAAfAP####8B#wAAABIAAlA0AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAlAAAABkAAACiAAAAHwD#####Af8AAAASAAJQNQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJUAAAAZAAAAowAAAB8A#####wH#AAAAEgACUDYAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACWAAAAGQAAAKQAAAABAP####8AA3lQNwACLTEAAAADAAAAAj#wAAAAAAAAAAAAHwD#####Af8AAAASAAJQNwAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJcAAAAZAAAAsgAAAB8A#####wH#AAAAEgACUDgAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACYAAAAGQAAAKUAAAAfAP####8B#wAAABIAAlA5AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAmQAAABkAAACmAAAAHwD#####Af8AAAASAANQMTAAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACaAAAAGQAAAKcAAAAfAP####8B#wAAABIAA1AxMQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJsAAAAZAAAAqAAAAB8A#####wH#AAAAEgADUDEyAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAAnAAAABkAAACpAAAAHwD#####Af8AAAASAANQMTMAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAACdAAAAGQAAAKoAAAAfAP####8B#wAAABIAA1AxNAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAJ4AAAAZAAAAqwAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACDAAAABQD#####AAAA#wESAANQJzEAAAAAAAAAAABACAAAAAAAAAkAAAAArAAAALsAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAhAAAAAUA#####wAAAP8BEgADUCcyAAAAAAAAAAAAQAgAAAAAAAAJAAAAAK0AAAC9AAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIUAAAAFAP####8AAAD#ARIAA1AnMwAAAAAAAAAAAEAIAAAAAAAACQAAAACuAAAAvwAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACGAAAABQD#####AAAA#wESAANQJzQAAAAAAAAAAABACAAAAAAAAAkAAAAArwAAAMEAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAhwAAAAUA#####wAAAP8BEgADUCc1AAAAAAAAAAAAQAgAAAAAAAAJAAAAALAAAADDAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIgAAAAFAP####8AAAD#ARIAA1AnNgAAAAAAAAAAAEAIAAAAAAAACQAAAACxAAAAxQAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACJAAAABQD#####AAAA#wESAANQJzcAAAAAAAAAAABACAAAAAAAAAkAAAAAswAAAMcAAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAigAAAAUA#####wAAAP8BEgADUCc4AAAAAAAAAAAAQAgAAAAAAAAJAAAAALQAAADJAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAIsAAAAFAP####8AAAD#ARIAA1AnOQAAAAAAAAAAAEAIAAAAAAAACQAAAAC1AAAAywAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACMAAAABQD#####AAAA#wESAARQJzEwAAAAAAAAAAAAQAgAAAAAAAAJAAAAALYAAADNAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAI0AAAAFAP####8AAAD#ARIABFAnMTEAAAAAAAAAAABACAAAAAAAAAkAAAAAtwAAAM8AAAAXAP####8AAAABAAAAGAMAAAACP#AAAAAAAAAAAAAZAAAAjgAAAAUA#####wAAAP8BEgAEUCcxMgAAAAAAAAAAAEAIAAAAAAAACQAAAAC4AAAA0QAAABcA#####wAAAAEAAAAYAwAAAAI#8AAAAAAAAAAAABkAAACPAAAABQD#####AAAA#wESAARQJzEzAAAAAAAAAAAAQAgAAAAAAAAJAAAAALkAAADTAAAAFwD#####AAAAAQAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAJAAAAAFAP####8AAAD#ARIABFAnMTQAAAAAAAAAAABACAAAAAAAAAkAAAAAugAAANUAAAABAP####8AA3hPNQABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeE82AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN4TzcAATUAAAACQBQAAAAAAAAAAAABAP####8AA3hPOAABNQAAAAJAFAAAAAAAAAAAAAEA#####wADeE85AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEwAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzExAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEyAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzEzAAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAR4TzE0AAE1AAAAAkAUAAAAAAAAAAAAAQD#####AAN5TzUAATUAAAACQBQAAAAAAAAAAAABAP####8AA3lPNgABNgAAAAJAGAAAAAAAAAAAAAEA#####wADeU83AAE3AAAAAkAcAAAAAAAAAAAAAQD#####AAN5TzgAATgAAAACQCAAAAAAAAAAAAABAP####8AA3lPOQABOQAAAAJAIgAAAAAAAAAAAAEA#####wAEeU8xMAACMTAAAAACQCQAAAAAAAAAAAABAP####8ABHlPMTEAAjExAAAAAkAmAAAAAAAAAAAAAQD#####AAR5TzEyAAIxMgAAAAJAKAAAAAAAAAAAAAEA#####wAEeU8xMwACMTMAAAACQCoAAAAAAAAAAAABAP####8ABHlPMTQAAjE0AAAAAkAsAAAAAAAAAAAAHwD#####Af8AAAASAAJPNQAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANcAAAAZAAAA4QAAAB8A#####wH#AAAAEgACTzYAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADYAAAAGQAAAOIAAAAfAP####8B#wAAABIAAk83AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA2QAAABkAAADjAAAAHwD#####Af8AAAASAAJPOAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANoAAAAZAAAA5AAAAB8A#####wEAAP8AEgACTzkAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADbAAAAGQAAAOUAAAAfAP####8B#wAAABIAA08xMAAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAANwAAAAZAAAA5gAAAB8A#####wH#AAAAEgADTzExAAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA3QAAABkAAADnAAAAHwD#####Af8AAAASAANPMTIAAAAAAAAAAABACAAAAAAAAAkAAAAACgAAABkAAADeAAAAGQAAAOgAAAAfAP####8B#wAAABIAA08xMwAAAAAAAAAAAEAIAAAAAAAACQAAAAAKAAAAGQAAAN8AAAAZAAAA6QAAAB8A#####wH#AAAAEgADTzE0AAAAAAAAAAAAQAgAAAAAAAAJAAAAAAoAAAAZAAAA4AAAABkAAADqAAAABAD#####AAAAQgAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAALwAAAD1AAAABgD#####AQAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAAAAvAAAAPYAAAAHAP####8AAAD#ABAAAAEAAQAAALwAAAD3AAAABwD#####AAAA#wAQAAABAAEAAAD3AAAA9gAAAAgA#####wEAAP8AAQAAAPcAAAACP8mZmZmZmZoAAAAACQD#####AAAA+AAAAPoAAAAKAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwABAAAA+wAAAAoA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAD7AAAAGwD#####AA1DYXJyw6kgZGlyZWN0AAAABQAAAAIAAAACAAAA9wAAAP0AAAAHAAAAAP4BAAAAABAAAAEAAQAAAPcAAAD9AAAACwAAAAD+AAAAAAASAAABAQEAAAD3AAAA#wAAAAwAAAAA#gAAAAABAQAAAPcAAAD9AAAACQAAAAD+AAABAAAAAQEAAAAKAQAAAP4AAAD#ABIAAAEHAAIAAAECAAAADQAAAAD+AAAA9wAAAP0AAAAFAQAAAP4AAAD#ABIAAAEHAAAAAQMAAAEEAAAABwD#####AAAA#wAQAAABAAEAAAD3AAAA#QAAAAcA#####wAAAP8AEAAAAQABAAAA#QAAAQUAAAAHAP####8AAAD#ABAAAAEAAQAAAQUAAAEDAAAABwD#####AAAA#wAQAAABAAEAAAEDAAAA9wAAAA4A#####wAAAP8AAQAAAAUAAAD3AAAA#QAAAQUAAAEDAAAA9wAAAA8A#####wD#AAAAAQAAAAD4AAAADwD#####AP8AAAABAAAAAPkAAAAbAP####8AEHN5bcOpdHJpZSBheGlhbGUAAAASAAAABgAAAAIAAAC+AAAAVAAAAAEAAAABDQACeDMAATIAAAACQAAAAAAAAAAAAAABAAAAAQ0AAnkzAAExAAAAAj#wAAAAAAAAAAAAAQAAAAENAANiaXMAATEAAAACP#AAAAAAAAAAAAABAAAAAQ0AAXQAATEAAAACP#AAAAAAAAAAAAABAAAAAQ0AAnhQAAExAAAAAj#wAAAAAAAAAAAAAQAAAAENAAJ5UAACLTEAAAADAAAAAj#wAAAAAAAAAAAABAAAAAENAAAAVAAAAAUBAAABDQAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAL4AAAEUAAAABgAAAAENAQAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAAAAvgAAARUAAAAHAQAAAQ0AAAD#ABAAAAEAAQAAAL4AAAEWAAAABwEAAAENAAAA#wAQAAABAAEAAAEWAAABFQAAAAgAAAABDQEAAP8AAQAAARYAAAACP8mZmZmZmZoAAAAACQAAAAENAAABFwAAARkAAAAKAAAAAQ0AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwACAAABGgAAAAcAAAABDQEAAAAAEAAAAQABAAABFgAAARsAAAALAAAAAQ0AAAAAABIAAAEBAQAAARYAAAEcAAAADAAAAAENAAAAAAEBAAABFgAAARsAAAAJAAAAAQ0AAAEdAAABHgAAAAoAAAABDQAAAP8AEgAAAQcAAgAAAR8AAAANAAAAAQ0AAAEWAAABGwAAAAUAAAABDQAAAP8AEgAAAQcAAAABIAAAASEAAAAOAQAAAQ0AAAD#AAEAAAAFAAABFgAAARsAAAEiAAABIAAAARYAAAAPAQAAAQ0A#wAAAAEBAAABFwAAAA8BAAABDQD#AAAAAQEAAAEYAAAAGwD#####ABBzeW3DqXRyaWUgYXhpYWxlAAAAEgAAAAYAAAACAAAAwAAAAEgAAAABAAAAASYAAngzAAEyAAAAAkAAAAAAAAAAAAAAAQAAAAEmAAJ5MwABMQAAAAI#8AAAAAAAAAAAAAEAAAABJgADYmlzAAExAAAAAj#wAAAAAAAAAAAAAQAAAAEmAAF0AAExAAAAAj#wAAAAAAAAAAAAAQAAAAEmAAJ4UAABMQAAAAI#8AAAAAAAAAAAAAEAAAABJgACeVAAAi0xAAAAAwAAAAI#8AAAAAAAAAAAAAQAAAABJgAAAEgAAAAFAQAAASYAAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADAAAABLQAAAAYAAAABJgEAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAAAAMAAAAEuAAAABwEAAAEmAAAA#wAQAAABAAEAAADAAAABLwAAAAcBAAABJgAAAP8AEAAAAQABAAABLwAAAS4AAAAIAAAAASYBAAD#AAEAAAEvAAAAAj#JmZmZmZmaAAAAAAkAAAABJgAAATAAAAEyAAAACgAAAAEmAAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAcAAgAAATMAAAAHAAAAASYBAAAAABAAAAEAAQAAAS8AAAE0AAAACwAAAAEmAAAAAAASAAABAQEAAAEvAAABNQAAAAwAAAABJgAAAAABAQAAAS8AAAE0AAAACQAAAAEmAAABNgAAATcAAAAKAAAAASYAAAD#ABIAAAEHAAIAAAE4AAAADQAAAAEmAAABLwAAATQAAAAFAAAAASYAAAD#ABIAAAEHAAAAATkAAAE6AAAADgEAAAEmAAAA#wABAAAABQAAAS8AAAE0AAABOwAAATkAAAEvAAAADwEAAAEmAP8AAAABAwAAATAAAAAPAQAAASYA#wAAAAEDAAABMQAAABsA#####wAQc3ltw6l0cmllIGF4aWFsZQAAABIAAAAGAAAAAgAAAMIAAABOAAAAAQAAAAE#AAJ4MwABMgAAAAJAAAAAAAAAAAAAAAEAAAABPwACeTMAATEAAAACP#AAAAAAAAAAAAABAAAAAT8AA2JpcwABMQAAAAI#8AAAAAAAAAAAAAEAAAABPwABdAABMQAAAAI#8AAAAAAAAAAAAAEAAAABPwACeFAAATEAAAACP#AAAAAAAAAAAAABAAAAAT8AAnlQAAItMQAAAAMAAAACP#AAAAAAAAAAAAAEAAAAAT8AAABOAAAABQEAAAE#AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAwgAAAUYAAAAGAAAAAT8BAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAABwAAAADCAAABRwAAAAcBAAABPwAAAP8AEAAAAQABAAAAwgAAAUgAAAAHAQAAAT8AAAD#ABAAAAEAAQAAAUgAAAFHAAAACAAAAAE#AQAA#wABAAABSAAAAAI#yZmZmZmZmgAAAAAJAAAAAT8AAAFJAAABSwAAAAoAAAABPwAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAHAAIAAAFMAAAABwAAAAE#AQAAAAAQAAABAAEAAAFIAAABTQAAAAsAAAABPwAAAAAAEgAAAQEBAAABSAAAAU4AAAAMAAAAAT8AAAAAAQEAAAFIAAABTQAAAAkAAAABPwAAAU8AAAFQAAAACgAAAAE#AAAA#wASAAABBwACAAABUQAAAA0AAAABPwAAAUgAAAFNAAAABQAAAAE#AAAA#wASAAABBwAAAAFSAAABUwAAAA4BAAABPwAAAP8AAQAAAAUAAAFIAAABTQAAAVQAAAFSAAABSAAAAA8BAAABPwD#AAAAAQIAAAFJAAAADwEAAAE#AP8AAAABAgAAAUr#####AAAAAQAJQ1JvdGF0aW9uAP####8AAADrAAAAAkBWgAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAAxAAAAVgAAAAHAP####8AAAD#ABAAAAEBAQAAAMQAAADr#####wAAAAIAGkNNYXJxdWVBbmdsZU9yaWVudGVEaXJlY3RlAP####8AAAD#AQEAAAABQDAAAAAAAAAAAADEAAAA6wAAAVkAAAAABwD#####AAAA#wAQAAABAQEAAADrAAABWf####8AAAABABJDQXJjRGVDZXJjbGVEaXJlY3QA#####wD#AAAAAQAAAOsAAADEAAABWQAAAA8A#####wD#AAAAAQEAAAFcAAAADwD#####AP8AAAABAQAAAVoAAAApAP####8AAADsAAAAAwAAAAJAVoAAAAAAAAAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMYAAAFgAAAABwD#####AAAA#wAQAAABAQEAAADGAAAA7AAAAAcA#####wAAAP8AEAAAAQEBAAAA7AAAAWEAAAAPAP####8A#wAAAAECAAABYwAAAA8A#####wD#AAAAAQIAAAFi#####wAAAAIAHENNYXJxdWVBbmdsZU9yaWVudGVJbmRpcmVjdGUA#####wAAAP8AAQAAAAFAMAAAAAAAAAAAAMYAAADsAAABYQH#####AAAAAQAUQ0FyY0RlQ2VyY2xlSW5kaXJlY3QA#####wD#AAAAAQAAAOwAAADGAAABYf####8AAAABABFDU3ltZXRyaWVDZW50cmFsZQD#####AAAA7QAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAAMgAAAFoAAAABwD#####AAAA#wAQAAABAQEAAADIAAAA7QAAAAcA#####wAAAP8AEAAAAQEBAAAA7QAAAWkAAAAPAP####8A#wAAAAEBAAABawAAAA8A#####wD#AAAAAQEAAAFqAAAADQD#####AAAAAQAAAO4AAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADKAAABbgAAACUA#####wAAAP8AEAAAAQABAAAAygAAAW8BAAAAJQD#####AQAA#wAQAAABAAEAAAABAAAA7gEAAAAHAP####8A#wAAABAAAAEBAQAAAO4AAAFvAAAABwD#####AP8AAAAQAAABAQEAAAABAAAAygAAAAEA#####wACazEAATIAAAACQAAAAAAAAAAAAAABAP####8AAmsyAAItNAAAAAMAAAACQBAAAAAAAAAAAAAXAP####8AAADvAAAAGQAAAXQAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADMAAABdgAAAAcA#####wAAAP8AEAAAAQEBAAAA7wAAAXcAAAATAP####8B#wAAABIAAAAAAAAAAAAAAEAIAAAAAAAABQABP+TbfTXiMrkAAAF4AAAAIQD#####AP8AAAAAAXkAAAAYAP####8AAAACAAlDRm9uY3Rpb24AAAAAGQAAAXQAAAACP#AAAAAAAAAAAAF5AAAAAgAAAXkAAAF5AAAAFwD#####AAAA8AAAABgDAAAAAj#wAAAAAAAAAAAAGQAAAXUAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADOAAABewAAAAcA#####wAAAP8AEAAAAQEBAAABfAAAAPAAAAAHAP####8AAAD#ABAAAAEBAQAAAPAAAADOAAAAEwD#####Af8AAAASAAFMAAAAAAAAAAAAQAgAAAAAAAAFAAE#5DMPSjR2ZQAAAX4AAAAhAP####8A#wAAAAABfwAAABgAAAAALwAAAAAZAAABdQAAAAI#8AAAAAAAAAAAAX8AAAACAAABfwAAAX8AAAApAP####8AAADxAAAAAkBOAAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAA0AAAAYEAAAAHAP####8AAAD#ABAAAAEBAQAAANAAAADxAAAABwD#####AAAA#wAQAAABAQEAAADxAAABggAAACsA#####wD#AAAAAQAAAPEAAADQAAABggAAACoA#####wAAAP8BAQAAAAFAMAAAAAAAAAAAANAAAADxAAABggEAAAAPAP####8A#wAAAAEDAAABhAAAAA8A#####wD#AAAAAQMAAAGDAAAAKQD#####AAAA8gAAAAMAAAACQE4AAAAAAAAAAAAFAP####8AAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAADSAAABiQAAAAcA#####wAAAP8AEAAAAQEBAAAA0gAAAPIAAAAHAP####8AAAD#ABAAAAEBAQAAAPIAAAGKAAAALQD#####AP8AAAABAAAA8gAAANIAAAGKAAAADwD#####AP8AAAABAgAAAYsAAAAPAP####8A#wAAAAECAAABjAAAACwA#####wAAAP8AAQAAAAFAMAAAAAAAAAAAANIAAADyAAABigEAAAApAP####8AAADzAAAAAkBeAAAAAAAAAAAABQD#####AAAA#wASAAAAAAAAAAAAAABACAAAAAAAAAkAAAAA1AAAAZEAAAAHAP####8AAAD#ABAAAAEBAQAAANQAAADzAAAABwD#####AAAA#wAQAAABAQEAAAGSAAAA8wAAACoA#####wAAAP8BAQAAAAFAMAAAAAAAAAAAANQAAADzAAABkgEAAAArAP####8A#wAAAAEAAADzAAAA1AAAAZIAAAApAP####8AAAD0AAAAAwAAAAJAXgAAAAAAAAAAAAUA#####wAAAP8AEgAAAAAAAAAAAAAAQAgAAAAAAAAJAAAAANYAAAGXAAAABwD#####AAAA#wAQAAABAQEAAADWAAAA9AAAAAcA#####wAAAP8AEAAAAQEBAAAA9AAAAZgAAAAsAP####8AAAD#AAEAAAABQDAAAAAAAAAAAADWAAAA9AAAAZgBAAAALQD#####AP8AAAABAAAA9AAAANYAAAGY#####wAAAAEADUNUcmFuc1BhclZlY3QA#####wAAAXAAAAAFAP####8BAAD#ABIAAAAAAAAAAAAAAEAIAAAAAAAACQAAAAABAAABnQAAACUA#####wAAAP8AEAAAAQABAAAAAQAAAZ4BAAAADv##########";

		this.liste_questions = [];
		this.liste_corrections = []; // Liste de questions corrigées
		let xA, yA, xB, yB, xC, yC, k = [], xO, yO, k1, k2;
		let xP = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]; // ces nombres sont juste là pour compter combien il y en a... ils seront remplacés plus tard par les coordonnées utiles ou pas.
		let yP = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]; // comme pour t, je n'utiliserai pas le premier élément pour coller aux index.
		let xO5, xO6, xO7, xO8, xO9, xO10, xO11, xO12, xO13, xO14;
		let yO5, yO6, yO7, yO8, yO9, yO10, yO11, yO12, yO13, yO14;
		let bis1 = 0, bis2 = 0, xx = 0, yy = 0, AfficheO = 0, AfficheOO = 0, t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // il y a 14 transformations mais je n'utilise pas t[0] pour coller avec les index.
		let texte = ``, texte_corr = ``, lettre1 = [`A`, `B`, `C`], lettre2 = [`O\'`, `A`, `B`]; // si t[i]=0 alors la transformation concernée n'existe pas, si t[i]=1, on la dessine.
		let point = [[]];
		let transformation = parseInt(this.sup) - 1;
		let liste_type_de_questions = [[1, 2, 3, 4], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]];
		let choix_transformation = combinaison_listes(liste_type_de_questions[transformation], 3);
		for (let j = 0; j < 3; j++)
			if (choix_transformation[j] == 10)
				k[j] = choice([2, 2, 2, 2, 4, 4, 4, 4, 5, 10]) * randint(-1, 1, [0]); // rapport d'homothétie < 1 (plus ou moins  0.5, 0.25, 0.2 ou 0,1 ) avec une fréquence divisée par 4 pour 0.2 et 0.1.
			else
				k[j] = choice([1, 2, 2, 3, 3, 4, 4, 5, 5, 2.5]) * randint(-1, 1, [0]); // rapport d'homothétie >=1 (plus ou - 1,2,2.5, 3, 4 ou 5 avec des fréquences divisées par 2 pour 1 et 2.5) 

		xA = randint(-10, 10); // Point A
		yA = randint(-10, 10);
		xB = randint(-10, 10, [xA]); // Point B
		yB = randint(-10, 10);
		xC = randint(-10, 10); // Point C
		yC = randint(-10, 10, [yA, yB]);
		xO = randint(-3, 3, [0]); // Point O' (origine du repère dans lequel les transformations sont simples (centre des rotations et point d'intersection des axes))
		yO = randint(-3, 3, [0]);

		point[0] = image_point_par_transformation(choix_transformation[0], [xA, yA], [xO, yO], [xO, yO], k[0]);
		while (point[0][0] < -13 || point[0][0] > 13 || point[0][1] < -13 || point[0][1] > 14) { // on teste si A est dans la fenêtre sinon on en choisit un autre
			xA = randint(-10, 10); // Point A
			yA = randint(-10, 10);
			point[0] = image_point_par_transformation(choix_transformation[0], [xA, yA], [xO, yO], [xO, yO], k[0]);
		}

		if (choix_transformation[1] > 4)
			point[1] = image_point_par_transformation(choix_transformation[1], [xB, yB], [xA, yA], [xA, yA], k[1]);
		else
			point[1] = image_point_par_transformation(choix_transformation[1], [xB, yB], [xO, yO]); // si c'est une symétrie, l'axe passe par O'
		while (point[1][0] < -13 || point[1][0] > 13 || point[1][1] < -13 || point[1][1] > 14) { // on teste si on est dans les clous, sinon on choisit un autre point B
			xB = randint(-10, 10, [xA]); // Point B
			yB = randint(-10, 10);
			if (choix_transformation[1] > 4)
				point[1] = image_point_par_transformation(choix_transformation[1], [xB, yB], [xA, yA], [xA, yA], k[1]);
			else
				point[1] = image_point_par_transformation(choix_transformation[1], [xB, yB], [xO, yO]); // si c'est une symétrie, l'axe passe par O'
		}
		if (choix_transformation[2] > 4)
			point[2] = image_point_par_transformation(choix_transformation[2], [xC, yC], [xB, yB], [xB, yB], k[2]);
		else
			point[2] = image_point_par_transformation(choix_transformation[2], [xC, yC], [xO, yO]); // si c'est une symétrie, l'axe passe par O'
		while (point[2][0] < -13 || point[2][0] > 13 || point[2][1] < -13 || point[2][1] > 14) { // on vérifie que C est dans le repère sinon on change le point C.
			xC = randint(-10, 10); // Point C
			yC = randint(-10, 10, [yA, yB]);
			if (choix_transformation[2] > 4)
				point[2] = image_point_par_transformation(choix_transformation[2], [xC, yC], [xB, yB], [xB, yB], k[2]);
			else
				point[2] = image_point_par_transformation(choix_transformation[2], [xC, yC], [xO, yO]); // si c'est une symétrie, l'axe passe par O'
		}
		// les points sont choisis, on écrit l'énoncé	
		for (let i = 0; i < 3; i++) {
			switch (choix_transformation[i]) {
				case 1:
					bis1 = 1;
					t[1] = 1;
					if (i == 0) {
						xP[1] = xA;
						yP[1] = yA;
					}
					else if (i == 1) {
						xP[1] = xB;
						yP[1] = yB;
					}
					else {
						xP[1] = xC;
						yP[1] = yC;
					}
					texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_1)$.<br>`;
					texte_corr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d_1)$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 2:
					bis2 = 1;
					t[2] = 1;
					if (i == 0) {
						xP[2] = xA;
						yP[2] = yA;
					}
					else if (i == 1) {
						xP[2] = xB;
						yP[2] = yB;
					}
					else {
						xP[2] = xC;
						yP[2] = yC;
					}
					texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_2)$.<br>`;
					texte_corr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d_2)$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 3:
					xx = 1;
					t[3] = 1;
					if (i == 0) {
						xP[3] = xA;
						yP[3] = yA;
					}
					else if (i == 1) {
						xP[3] = xB;
						yP[3] = yB;
					}
					else {
						xP[3] = xC;
						yP[3] = yC;
					}
					texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d)$.<br>`;
					texte_corr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d)$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 4:
					yy = 1;
					t[4] = 1;
					if (i == 0) {
						xP[4] = xA;
						yP[4] = yA;
					}
					else if (i == 1) {
						xP[4] = xB;
						yP[4] = yB;
					}
					else {
						xP[4] = xC;
						yP[4] = yC;
					}
					texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d\')$.<br>`;
					texte_corr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d\')$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 5:
					AfficheO = 1;
					t[5] = 1;
					if (i == 0) {
						xP[5] = xA;
						yP[5] = yA;
						xO5 = xO;
						yO5 = yO;
					}
					else if (i == 1) {
						xP[5] = xB;
						yP[5] = yB;
						xO5 = xA;
						yO5 = yA;
					}
					else {
						xP[5] = xC;
						yP[5] = yC;
						xO5 = xB;
						yO5 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens anti-horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens anti-horaire a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 6:
					AfficheO = 1;
					t[6] = 1;
					if (i == 0) {
						xP[6] = xA;
						yP[6] = yA;
						xO6 = xO;
						yO6 = yO;
					}
					else if (i == 1) {
						xP[6] = xB;
						yP[6] = yB;
						xO6 = xA;
						yO6 = yA;
					}
					else {
						xP[6] = xC;
						yP[6] = yC;
						xO6 = xB;
						yO6 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens horaire a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 7:
					AfficheO = 1;
					t[7] = 1;
					if (i == 0) {
						xP[7] = xA;
						yP[7] = yA;
						xO7 = xO;
						yO7 = yO;
					}
					else if (i == 1) {
						xP[7] = xB;
						yP[7] = yB;
						xO7 = xA;
						yO7 = yA;
					}
					else {
						xP[7] = xC;
						yP[7] = yC;
						xO7 = xB;
						yO7 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la symétrie de centre $${lettre2[i]}$.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la symétrie de centre $${lettre2[i]}$ a pour coordonnées ($${tex_nombrec(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 11:
					AfficheO = 1;
					t[11] = 1;
					if (i == 0) {
						xP[11] = xA;
						yP[11] = yA;
						xO11 = xO;
						yO11 = yO;
					}
					else if (i == 1) {
						xP[11] = xB;
						yP[11] = yB;
						xO11 = xA;
						yO11 = yA;
					}
					else {
						xP[11] = xC;
						yP[11] = yC;
						xO11 = xB;
						yO11 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens anti-horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens anti-horaire a pour coordonnées ($${tex_nombre(calcul(point[i][0], 2))};${tex_nombre(calcul(point[i][1], 2))}$).<br>`;
					break;

				case 12:
					AfficheO = 1;
					t[12] = 1;
					if (i == 0) {
						xP[12] = xA;
						yP[12] = yA;
						xO12 = xO;
						yO12 = yO;
					}
					else if (i == 1) {
						xP[12] = xB;
						yP[12] = yB;
						xO12 = xA;
						yO12 = yA;
					}
					else {
						xP[12] = xC;
						yP[12] = yC;
						xO12 = xB;
						yO12 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens horaire a pour coordonnées ($${tex_nombre(calcul(point[i][0], 2))};${tex_nombre(calcul(point[i][1], 2))}$).<br>`;
					break;

				case 13:
					AfficheO = 1;

				case 12:
					AfficheO = 1;
					t[13] = 1;
					if (i == 0) {
						xP[13] = xA;
						yP[13] = yA;
						xO13 = xO;
						yO13 = yO;
					}
					else if (i == 1) {
						xP[13] = xB;
						yP[13] = yB;
						xO13 = xA;
						yO13 = yA;
					}
					else {
						xP[13] = xC;
						yP[13] = yC;
						xO13 = xB;
						yO13 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens anti-horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens anti-horaire a pour coordonnées ($${tex_nombre(calcul(point[i][0], 2))};${tex_nombre(calcul(point[i][1], 2))}$).<br>`;
					break;

				case 14:
					AfficheO = 1;
					t[14] = 1;
					if (i == 0) {
						xP[14] = xA;
						yP[14] = yA;
						xO14 = xO;
						yO14 = yO;
					}
					else if (i == 1) {
						xP[14] = xB;
						yP[14] = yB;
						xO14 = xA;
						yO14 = yA;
					}
					else {
						xP[14] = xC;
						yP[14] = yC;
						xO14 = xB;
						yO14 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens horaire.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens horaire a pour coordonnées ($${tex_nombre(calcul(point[i][0], 2))};${tex_nombre(calcul(point[i][1], 2))}$).<br>`;
					break;

				case 8:
					AfficheO = 1;
					t[8] = 1;
					if (i == 0) {
						xP[8] = xA;
						yP[8] = yA;
						xO8 = xO;
						yO8 = yO;
					}
					else if (i == 1) {
						xP[8] = xB;
						yP[8] = yB;
						xO8 = xA;
						yO8 = yA;
					}
					else {
						xP[8] = xC;
						yP[8] = yC;
						xO8 = xB;
						yO8 = yB;
					}
					// AfficheOO=1
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]}.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]} a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 9:
					AfficheO = 1;
					t[9] = 1;
					k1 = k[i];
					if (i == 0) {
						xP[9] = xA;
						yP[9] = yA;
						xO9 = xO;
						yO9 = yO;
					}
					else if (i == 1) {
						xP[9] = xB;
						yP[9] = yB;
						xO9 = xA;
						yO9 = yA;
					}
					else {
						xP[9] = xC;
						yP[9] = yC;
						xO9 = xB;
						yO9 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${tex_nombre(k[i])}$.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${tex_nombre(k[i])}$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;

				case 10:
					AfficheO = 1;
					t[10] = 1;
					k2 = k[i];
					if (i == 0) {
						xP[10] = xA;
						yP[10] = yA;
						xO10 = xO;
						yO10 = yO;
					}
					else if (i == 1) {
						xP[10] = xB;
						yP[10] = yB;
						xO10 = xA;
						yO10 = yA;
					}
					else {
						xP[10] = xC;
						yP[10] = yC;
						xO10 = xB;
						yO10 = yB;
					}
					texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${tex_fraction_reduite(1, k[i])}$.<br>`;
					texte_corr += `L'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${tex_fraction_reduite(1, k[i])}$ a pour coordonnées ($${tex_nombre(point[i][0])};${tex_nombre(point[i][1])}$).<br>`;
					break;
			}
		}
		if (sortie_html) {
			this.type_exercice = 'MG32'; // on pilote les figures ci-dessous











			/*
			booléens permettant l'affichage des éléments si =1 et le masquage si =0
		bis1 affiche la droite de coefficient directeur 1 passant par O'
			bis2 affiche la droite de coefficient directeur -1 passant par O'
			xx' affiche la droite horizontale passant par O'
			yy' affiche la droite verticale passant par O'
			AfficheO' affiche O' comme son nom l'indique.
			AfficheOO' affiche le vecteur OO' vecteur de translation
		    
			*/
			this.MG32code_pour_modifier_la_figure = `
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y", "${yA}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x", "${xA}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yB", "${yB}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xB", "${xB}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yC", "${yC}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xC", "${xC}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "y2", "${yO}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "x2", "${xO}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "yy'", "${yy}"); mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "xx'", "${xx}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis1", "${bis1}");	mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheO\'", "${AfficheO}"); mtg32App.giveFormula2("MG32svg${numero_de_l_exercice}", "AfficheOO\'", "${AfficheOO}");
			
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "x", "${xA}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "y", "${yA}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xB", "${xB}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yB", "${yB}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xC", "${xC}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yC", "${yC}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP1", "${xP[1]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP1", "${yP[1]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP2", "${xP[2]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP2", "${yP[2]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP3", "${xP[3]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP3", "${yP[3]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP4", "${xP[4]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP4", "${yP[4]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP5", "${xP[5]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP5", "${yP[5]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP6", "${xP[6]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP6", "${yP[6]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP7", "${xP[7]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP7", "${yP[7]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP8", "${xP[8]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP8", "${yP[8]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP9", "${xP[9]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP9", "${yP[9]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP10", "${xP[10]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP10", "${yP[10]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP11", "${xP[11]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP11", "${yP[11]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP12", "${xP[12]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP12", "${yP[12]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP13", "${xP[13]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP13", "${yP[13]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xP14", "${xP[14]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yP14", "${yP[14]}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO5", "${xO5}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO5", "${yO5}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO6", "${xO6}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO6", "${yO6}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO7", "${xO7}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO7", "${yO7}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO8", "${xO8}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO8", "${yO8}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO9", "${xO9}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO9", "${yO9}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO10", "${xO10}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO10", "${yO10}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO11", "${xO11}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO11", "${yO11}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO12", "${xO12}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO12", "${yO12}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO13", "${xO13}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO13", "${yO13}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xO14", "${xO14}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yO14", "${yO14}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t1", "${t[1]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t2", "${t[2]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t3", "${t[3]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t4", "${t[4]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t5", "${t[5]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t6", "${t[6]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t7", "${t[7]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t8", "${t[8]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t9", "${t[9]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t10", "${t[10]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t11", "${t[11]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t12", "${t[12]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t13", "${t[13]}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "t14", "${t[14]}");	
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k1", "${k1}"); mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "k2", "${k2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "y2", "${yO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "x2", "${xO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "yy'", "${yy}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "xx'", "${xx}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis1", "${bis1}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "bis2", "${bis2}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheO\'", "${AfficheO}");
			mtg32App.giveFormula2("MG32svgcorr${numero_de_l_exercice}", "AfficheOO\'", "${AfficheOO}");			
			mtg32App.calculate("MG32svg${numero_de_l_exercice}");
			mtg32App.display("MG32svg${numero_de_l_exercice}");
			mtg32App.calculate("MG32svgcorr${numero_de_l_exercice}");
			mtg32App.display("MG32svgcorr${numero_de_l_exercice}");
			`;
			this.liste_questions.push(texte);
			this.liste_corrections.push(texte_corr);
			liste_de_question_to_contenu_sans_numero(this);

		}
		else {
			texte = ``;
			texte_corr = ``;
			this.liste_questions.push(texte); // on envoie la question
			this.liste_corrections.push(texte_corr);
			liste_de_question_to_contenu_sans_numero(this);
		}



	};
	this.besoin_formulaire_numerique = ['Transformations', 5, '1 : Symétries axiales (6ème)\n 2 : Symétries axiales et centrales (5ème)\n 3 : Symétries et translations (4ème)\n 4 : Symétries, translations, rotations et homothéties\n 5 : Les mêmes plus des rotations compliquées\n'];

}
