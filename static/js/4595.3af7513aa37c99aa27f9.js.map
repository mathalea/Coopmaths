{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","CriteresDeDivisibilite","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","qcmDisponible","modeQcm","nouvelleVersion","tabrep","tabicone","listeExercicesDisponibles","parseInt","qcm","ordered","lastChoices","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","n","u","texte","texteCorr","sommeString","i","cpt","randint","texNombre","choice","toString","sommeDesChiffres","calcul","mathalea","sortieAMC","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","indexOf","push","listeQuestionsToContenu","gestionQcmInteractif","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","autoCorrection","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","a","b","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length","elimineDoublons","reponses","statuts","reponsesEpurees","slice","statutsEpures","j","console","log","splice"],"mappings":"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","file":"js/4595.3af7513aa37c99aa27f9.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, sommeDesChiffres, calcul, texNombre } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Critères de divisibilité'\n\n/**\n * Un nombre est-il divisible par :\n *\n * * 2, 5, 10 ?\n * * 3, 9 ?\n * * 2, 3, 5, 9, 10 ?\n * * 2, 3, 5, 9, 10  et un autre nombre qui peut être 7, 13, 17, ou 19 ?\n * @Auteur Rémi Angot\n * 6N43\n */\nexport default function CriteresDeDivisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4 // Correspond au facteur commun\n  this.titre = titre\n  this.consigne = 'Répondre aux questions suivantes en justifiant.'\n  this.spacing = 2\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.qcm = ['6N43', [], 'Critères de divisibilité', 1, { ordered: true, lastChoices: 2 }]\n    let tabrep, tabicone\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeExercicesDisponibles\n    if (this.sup === 1) {\n      listeExercicesDisponibles = [2, 5, 10]\n    }\n    if (this.sup === 2) {\n      listeExercicesDisponibles = [3, 9]\n    }\n    if (this.sup === 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10]\n    }\n    if (this.sup > 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10, 'autre']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      listeExercicesDisponibles,\n      this.nbQuestions\n    )\n    for (\n      let i = 0, n, u, texte, texteCorr, sommeString, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      switch (listeTypeDeQuestions[i]) {\n        case 2:\n          u = randint(1, 2)\n          n = randint(10, 999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $2$ ?`\n          if (u % 2 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $2$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $2$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 3:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $3$ ?`\n          if (calcul(sommeString) % 3 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${calcul(sommeString) / 3\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $3$ donc $${texNombre(\n              n\n            )}$ est divisible par $3$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${(calcul(sommeString) - (calcul(sommeString) % 3)) / 3\n              }+${calcul(sommeString) % 3}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 9:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $9$ ?`\n          if (calcul(sommeString) % 9 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${calcul(sommeString) / 9\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $9$ donc $${texNombre(\n              n\n            )}$ est divisible par $9$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${(calcul(sommeString) - (calcul(sommeString) % 9)) / 9\n              }+${calcul(sommeString) % 9}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 5:\n          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]) // 1 fois sur 2 ça sera divisible par 5\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $5$ ?`\n          if (u % 5 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $5$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $5$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 10:\n          u = choice([randint(1, 9), 0]) // 1 fois sur 2 ça sera divisible par 10\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $10$ ?`\n          if (u === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $10$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $10$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 'autre':\n          n = randint(100, 999)\n          u = choice([7, 7, 7, 7, 13, 17, 19])\n          if (u === 7) {\n            n = choice(\n              [randint(10, 99) * 10 + 7],\n              7 * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par 7, un divisible par 7, un au hasard\n          } else {\n            n = choice(\n              [randint(10, 99) * 100 + u],\n              u * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par u, un divisible par u, un au hasard\n          }\n          texte = `$${texNombre(n)}$ est-il divisible par $${u}$ ?`\n          texteCorr = `On ne connait pas de critère de divisibilité par $${u}$, on calcule donc la division euclidienne de $${texNombre(\n            n\n          )}$ par $${u}$.<br>`\n          if (n % u === 0) {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${texNombre(\n              n / u\n            )}$<br>`\n            texteCorr += `Le reste de la division euclidienne est nul donc $${texNombre(\n              n\n            )}$ est divisible par $${u}$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${(n - (n % u)) / u}+${n % u\n              }$<br>`\n            texteCorr += `Le reste de la division euclidienne n'est pas nul donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $${u}$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n\n          break\n      }\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        this.tableauSolutionsDuQcm[i] = tabicone\n        texte += '<br><br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n        // texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n        this.qcm[1].push([`${texte}. \\n `,\n          tabrep,\n          tabicone])\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  gestionQcmInteractif(this)\n  this.besoinFormulaireNumerique = ['Choix des questions', 4, '1 : Critères de divisibilité par 2, 5, 10\\n2 : Critères de divisibilité par 3,9\\n3 : Critères de divisibilité par 2, 3, 5, 9, 10\\n4 : Avec ou sans critère de divisibilité']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un objet {reponse=[a,b,c,d,e],statuts=[1,0,0,0,0]}\n * élimine les doublons de réponses et les statuts associés avant de retourner l'objet épuré.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (reponses, statuts) { // fonction qui va éliminer les doublons si il y en a\n  const reponsesEpurees = reponses.slice()\n  const statutsEpures = statuts.slice()\n  for (let i = 0; i < reponsesEpurees.length - 1; i++) {\n    for (let j = i + 1; j < reponsesEpurees.length;) {\n      if (reponsesEpurees[i] === reponsesEpurees[j]) {\n        console.log('doublon trouvé', reponsesEpurees[i], reponsesEpurees[j]) // les réponses i et j sont les mêmes\n\n        if (statutsEpures[i] === 1) { // si la réponse i est bonne, on vire la j\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        } else if (statutsEpures[j] === 1) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n          statutsEpures[i] = 1\n        } else { // Les deux réponses sont mauvaises\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return [reponsesEpurees, statutsEpures]\n}\n"],"sourceRoot":""}