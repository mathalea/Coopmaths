{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5L12-1.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Reduire_dinstinction_somme_produit","type_de_questions_disponibles","Exercice","this","debug","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","choice","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","isUn","n","sliceUn","variables","enonces","randint","p","inc","length","push","enonce","questtion","correction_produit","correction_somme","texte_en_couleur","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/3974.2fd056955f13c1b8c214.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListesSansChangerOrdre,texte_en_couleur} from '../../modules/outils.js'\nexport const titre = 'Réduire un produit et une somme à partir des mêmes éléments algébriques pour distinguer la différence'\n\n/**\n * 5L12-1\n * Distinction entre la réduction d'un produit et la réduction d'une somme, on garde les même coeffs\n * @author Sébastien Lozano \n */\nexport default function Reduire_dinstinction_somme_produit() {\n\t'use strict'\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.debug = false;\n\tif (this.debug) {\n\t\tthis.nbQuestions = 4;\n\t} else {\n\t\tthis.nbQuestions = 2;\n\t};\n\tthis.consigne = \"\";\n\t//this.nbQuestions = 4;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\t//this.sup2=false; // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n\tthis.titre = titre;\n\tlet type_de_questions_disponibles\n\tthis.nouvelleVersion = function () {\n\t\t//let type_de_questions_disponibles\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tif (this.debug) {\n\t\t\ttype_de_questions_disponibles = [0, 1, 2, 3];\n\t\t} else {\n\t\t\ttype_de_questions_disponibles = [choice([0, 2]), choice([1, 3])];\n\t\t}\n\n\t\t//let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles,this.nbQuestions) \n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions)\n\n\t\t//if (this.sup2) decimal=10;\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\t// deux fonctions pour gérer la chaine de sortie et supprimer le coeff 1 !\n\t\t\tfunction isUn(n) {\n\t\t\t\tif (n == 1) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t};\n\t\t\tfunction sliceUn(n) {\n\t\t\t\tif (n == 1) {\n\t\t\t\t\treturn ``;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${n}`;\n\t\t\t\t};\n\t\t\t};\n\t\t\tlet variables = ['x', 'y', 'z', 't'];\n\t\t\tlet enonces = [];\n\t\t\tlet n = randint(1, 6);\n\t\t\tlet p = randint(1, 6);\n\t\t\tlet inc = variables[randint(0, variables.length - 1)];\n\t\t\t//===== 0 le produit puis la somme\n\t\t\tenonces.push({\n\t\t\t\tenonce: `Simplifier le plus possible le produit puis la somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$`,\n\t\t\t\tquesttion: ``,\n\t\t\t\tcorrection_produit: `Le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc} = ${n}\\\\times ${inc}\\\\times ${p}\\\\times ${inc} = ${n}\\\\times ${p}\\\\times ${inc}\\\\times ${inc}=$ `,\n\t\t\t\tcorrection_somme: `La somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\\\times ${inc}+${p}\\\\times ${inc} = (${n}+${p})\\\\times ${inc}=$ `\n\t\t\t});\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[0].correction_produit += `${texte_en_couleur(`$${n * p}${inc}^2=${inc}^2$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[0].correction_produit += `${texte_en_couleur(` $${n * p}${inc}^2$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[0].correction_somme += `${texte_en_couleur(` $${n + p}${inc}=${inc}$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[0].correction_somme += `${texte_en_couleur(` $${n + p}${inc}$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n) && isUn(p)) {\n\t\t\t\tenonces[0].correction_produit = `$${inc}\\\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;\n\t\t\t}\n\t\t\t//===== 1 le produit puis la somme\n\t\t\tenonces.push({\n\t\t\t\tenonce: `Simplifier le plus possible l'expression $${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc}$ puis l'expression $${sliceUn(n)}${inc}+${sliceUn(p)}${inc}$`,\n\t\t\t\tquesttion: ``,\n\t\t\t\tcorrection_produit: `$${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc} = ${n}\\\\times ${inc}\\\\times ${p}\\\\times ${inc} = ${n}\\\\times ${p}\\\\times ${inc}\\\\times ${inc}=$ `,\n\t\t\t\tcorrection_somme: `$${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\\\times ${inc}+${p}\\\\times ${inc} = (${n}+${p})\\\\times ${inc}=$ `\n\t\t\t});\n\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[1].correction_produit += `${texte_en_couleur(`$${n * p}${inc}^2=${inc}^2$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[1].correction_produit += `${texte_en_couleur(` $${n * p}${inc}^2$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[1].correction_somme += `${texte_en_couleur(` $${n + p}${inc}=${inc}$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[1].correction_somme += `${texte_en_couleur(` $${n + p}${inc}$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n) && isUn(p)) {\n\t\t\t\tenonces[1].correction_produit = `$${inc}\\\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;\n\t\t\t}\n\t\t\t//===== 2 la somme puis le produit \n\t\t\tenonces.push({\n\t\t\t\tenonce: `Simplifier le plus possible la somme puis le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$`,\n\t\t\t\tquesttion: ``,\n\t\t\t\tcorrection_produit: `Le produit de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc} = ${n}\\\\times ${inc}\\\\times ${p}\\\\times ${inc} = ${n}\\\\times ${p}\\\\times ${inc}\\\\times ${inc}=$ `,\n\t\t\t\tcorrection_somme: `La somme de $${sliceUn(n)}${inc}$ et de $${sliceUn(p)}${inc}$ vaut : $${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\\\times ${inc}+${p}\\\\times ${inc} = (${n}+${p})\\\\times ${inc}=$ `\n\t\t\t});\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[2].correction_produit += `${texte_en_couleur(`$${n * p}${inc}^2=${inc}^2$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[2].correction_produit += `${texte_en_couleur(` $${n * p}${inc}^2$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[2].correction_somme += `${texte_en_couleur(` $${inc}$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[2].correction_somme += `${texte_en_couleur(` $${n + p}${inc}$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n) && isUn(p)) {\n\t\t\t\tenonces[2].correction_produit = `$${inc}\\\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;\n\t\t\t}\n\t\t\t//===== 3 la somme puis le produit \n\t\t\tenonces.push({\n\t\t\t\tenonce: `Simplifier le plus possible l'expression $${sliceUn(n)}${inc}+${sliceUn(p)}${inc}$ puis l'expression $${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc}$`,\n\t\t\t\tquesttion: ``,\n\t\t\t\tcorrection_produit: `$${sliceUn(n)}${inc}\\\\times ${sliceUn(p)}${inc} = ${n}\\\\times ${inc}\\\\times ${p}\\\\times ${inc} = ${n}\\\\times ${p}\\\\times ${inc}\\\\times ${inc}=$ `,\n\t\t\t\tcorrection_somme: `$${sliceUn(n)}${inc}+${sliceUn(p)}${inc} = ${n}\\\\times ${inc}+${p}\\\\times ${inc} = (${n}+${p})\\\\times ${inc}=$ `\n\t\t\t});\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[3].correction_produit += `${texte_en_couleur(`$${inc}^2$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[3].correction_produit += `${texte_en_couleur(` $${n * p}${inc}^2$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n * p)) {\n\t\t\t\tenonces[3].correction_somme += `${texte_en_couleur(` $${inc}$`)}`;\n\t\t\t} else {\n\t\t\t\tenonces[3].correction_somme += `${texte_en_couleur(` $${n + p}${inc}$`)}`;\n\t\t\t};\n\t\t\tif (isUn(n) && isUn(p)) {\n\t\t\t\tenonces[3].correction_produit = `$${inc}\\\\times ${inc} =$ ${texte_en_couleur(` $${inc}^2$`)} `;\n\t\t\t};\n\n\t\t\tswitch (listeTypeDeQuestions[i]) {\n\t\t\t\tcase 0:\t// produit puis somme \t\t\t\t\n\t\t\t\t\ttexte = `${enonces[0].enonce}.`;\n\t\t\t\t\tif (this.debug) {\n\t\t\t\t\t\ttexte += `<br><br>=====CORRECTION======<br>`;\n\t\t\t\t\t\ttexte += enonces[0].correction_produit;\n\t\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\t\ttexte += enonces[0].correction_somme;\n\t\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr = enonces[0].correction_produit;\n\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\ttexteCorr += enonces[0].correction_somme;\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\t// x puis +\t\t\t\t\n\t\t\t\t\ttexte = `${enonces[1].enonce}.`;\n\t\t\t\t\tif (this.debug) {\n\t\t\t\t\t\ttexte += `<br><br>=====CORRECTION======<br>`;\n\t\t\t\t\t\ttexte += enonces[1].correction_produit;\n\t\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\t\ttexte += enonces[1].correction_somme;\n\t\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr = enonces[1].correction_produit;\n\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\ttexteCorr += enonces[1].correction_somme;\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\t// somme puis produit\t\t\t\t\n\t\t\t\t\ttexte = `${enonces[2].enonce}.`;\n\t\t\t\t\tif (this.debug) {\n\t\t\t\t\t\ttexte += `<br><br>=====CORRECTION======<br>`;\n\t\t\t\t\t\ttexte += enonces[2].correction_somme;\n\t\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\t\ttexte += enonces[2].correction_produit;\n\t\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr = enonces[2].correction_somme;\n\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\ttexteCorr += enonces[2].correction_produit;\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\t// + puis x\t\t\t\t\n\t\t\t\t\ttexte = `${enonces[3].enonce}.`;\n\t\t\t\t\tif (this.debug) {\n\t\t\t\t\t\ttexte += `<br><br>=====CORRECTION======<br>`;\n\t\t\t\t\t\ttexte += enonces[3].correction_somme;\n\t\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\t\ttexte += enonces[3].correction_produit;\n\t\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr = enonces[3].correction_somme;\n\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\ttexteCorr += enonces[3].correction_produit;\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\n\t\t\t}\n\t\t\tif (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\t\tlisteQuestionsToContenu(this);\n\t}\n\t//this.besoinFormulaire2CaseACocher = [\"Avec décimaux.\",false]\n\n}\n\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}