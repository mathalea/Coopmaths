{"version":3,"file":"js/72071.0659ff1457812d597524.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Transformations.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { mathalea2d, point, droiteParPointEtPente, droiteHorizontaleParPoint, droiteVerticaleParPoint, tracePoint, labelPoint, segment, vecteur, latexParCoordonnees, codeSegments, afficheMesureAngle, milieu, translation, texteParPositionEchelle } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, choice, combinaisonListes, imagePointParTransformation, texFractionReduite, numAlpha, rangeMinMax, contraindreValeur } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Transformations : trouver un point numéroté par une des transformations du plan. Fonction générale utilisée sur tous les niveaux\n * @author Jean-Claude Lhote\n *\n * Relecture : Novembre 2021 par EE\n */\nexport default function Transformations () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.can = false\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  const listeTypeDeQuestions = [\n    [1, 2, 3, 4],\n    [1, 2, 7, 7, 7, 7],\n    [1, 2, 7, 7, 8, 8, 8, 8, 8],\n    [1, 2, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]\n  ]\n\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function (numeroExercice) {\n    let choixTransformation, nbImages\n    if (!this.sup) { // Si aucune liste n'est saisie\n      choixTransformation = rangeMinMax(1, 3)\n    } else {\n      if (typeof this.sup === 'number') {\n        choixTransformation = combinaisonListes(listeTypeDeQuestions[contraindreValeur(1, 10, this.sup, 10) - 1], 3)\n      } else {\n        choixTransformation = combinaisonListes(this.sup.split('-'), 3) // Sinon on créé un tableau à partir des valeurs séparées par des -\n        for (let i = 0; i < 3; i++) {\n          choixTransformation[i] = contraindreValeur(1, 10, parseInt(choixTransformation[i]), 10) // parseInt en fait un tableau d'entiers\n        }\n      }\n    }\n\n    if (this.can) {\n      nbImages = 1\n    } else nbImages = 3\n\n    const M = []; const N = []; let pointM; let pointN\n    const O = point(0, 0, 'O', 'below')\n    const d1 = droiteParPointEtPente(O, 1)\n    const d3 = droiteHorizontaleParPoint(O)\n    const d2 = droiteParPointEtPente(O, -1)\n    const d4 = droiteVerticaleParPoint(O)\n    d1.isVisible = true\n    d2.isVisible = true\n    d3.isVisible = true\n    d4.isVisible = true\n    d1.epaisseur = 2\n    d2.epaisseur = 2\n    d3.epaisseur = 2\n    d4.epaisseur = 2\n    d1.color = context.isHtml ? 'green' : 'black'\n    d2.color = context.isHtml ? 'green' : 'black'\n    d3.color = context.isHtml ? 'green' : 'black'\n    d4.color = context.isHtml ? 'green' : 'black'\n    d1.opacite = 0.5\n    d2.opacite = 0.5\n    d3.opacite = 0.5\n    d4.opacite = 0.5\n    const objetsEnonce = []\n    const objetsCorrection = []\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        objetsEnonce.push(tracePoint(point(j - 4, i - 4)))\n        objetsCorrection.push(tracePoint(point(j - 4, i - 4)))\n        objetsEnonce.push(texteParPositionEchelle(Number(j + 10 * i).toString(), j - 4.2, i - 4.2, 'milieu', 'black', 0.8, 'middle', false, 0.8))\n        objetsCorrection.push(texteParPositionEchelle(Number(j + 10 * i).toString(), j - 4.2, i - 4.2, 'milieu', 'black', 0.8, 'middle', false, 0.8))\n      }\n    }\n    this.listeQuestions = []\n    this.listeCorrections = [] // Liste de questions corrigées\n    const antecedents = [0, 0, 0]\n    const images = [0, 0, 0]\n    const k = [1, 1, 1]\n    let k1\n    let k2\n    const xO = 4\n    const yO = 4\n    let yu\n    let puntoReseau // k : rapports d'homothéties, (xO,yO) point de rencontre des droites et centre, les composantes du vecteur de translation : (xu,yu)\n    const n = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n    let texte = ''\n    let texteCorr = ''\n    const punto = [[]]\n\n    const xu = randint(-3, 3)\n    if (xu === 0) {\n      yu = randint(-3, 3, [0])\n    } else {\n      yu = randint(-3, 3)\n    }\n    for (let j = 0; j < nbImages; j++) {\n      if (choixTransformation[j] === 10) {\n        k[j] = choice([2, 4]) * randint(-1, 1, [0]) // rapport d'homothétie < 1 ( 0.5 ou 0.25 )\n        k2 = k[j]\n      } else if (choixTransformation[j] === 9) {\n        k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]) // rapport d'homothétie >=1 (1,2 ou 3)\n        k1 = k[j]\n      }\n      antecedents[j] = randint(0, 99)\n      punto[j] = imagePointParTransformation(\n        choixTransformation[j],\n        [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],\n        [xO, yO],\n        [xu, yu],\n        k[j]\n      )\n      images[j] = punto[j][0] + punto[j][1] * 10\n      // Limitation des points invariants\n      if (choixTransformation[j] === 1 && images[j] % 11 === 0) { punto[j][0] = -1 } // Point impossible sur (d1) pour sa symétrie\n      if (choixTransformation[j] === 3 && Math.floor(images[j] / 10 === 4)) { punto[j][0] = -1 } // Point impossible sur (d3) pour sa symétrie\n      if (choixTransformation[j] === 4 && images[j] % 10 === 4) { punto[j][0] = -1 } // Point impossible sur  (d4) pour sa symétrie\n      if ((choixTransformation[j] === 5 || choixTransformation[j] === 5) &&\n        antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible pour rotation\n      if (choixTransformation[j] === 10 && antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible par homothétie de rapport 1/k2\n\n      // pour éviter les points en dehors des clous dans homothétie de rapport 1/k2\n      if (punto[j][0] - Math.floor(punto[j][0]) === 0 &&\n        punto[j][1] - Math.floor(punto[j][1]) === 0) { puntoReseau = true } else { puntoReseau = false }\n      // On vérifie que l'image est bien un point du réseau sinon, on change.\n      while (punto[j][0] < 0 ||\n        punto[j][0] > 9 ||\n        punto[j][1] < 0 ||\n        punto[j][1] > 9 ||\n        puntoReseau === false) {\n        if (choixTransformation[j] === 10) {\n          k[j] = choice([2, 4]) * randint(-1, 1, [0]) // rapport d'homothétie < 1 ( 0.5 ou 0.25 )\n          k2 = k[j]\n        } else if (choixTransformation[j] === 9) {\n          k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]) // rapport d'homothétie >=1 (1,2 ou 3)\n          k1 = k[j]\n        }\n        antecedents[j] = randint(0, 99)\n        punto[j] = imagePointParTransformation(\n          choixTransformation[j],\n          [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],\n          [xO, yO],\n          [xu, yu],\n          k[j]\n        )\n        images[j] = punto[j][0] + punto[j][1] * 10\n        // Limitation des points invariants\n        if (choixTransformation[j] === 1 && images[j] % 11 === 0) { punto[j][0] = -1 } // Point impossible sur (d1) pour sa symétrie\n        if (choixTransformation[j] === 3 && Math.floor(images[j] / 10 === 4)) { punto[j][0] = -1 } // Point impossible sur (d3) pour sa symétrie\n        if (choixTransformation[j] === 4 && images[j] % 10 === 4) { punto[j][0] = -1 } // Point impossible sur  (d4) pour sa symétrie\n        if ((choixTransformation[j] === 5 || choixTransformation[j] === 5) &&\n          antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible pour rotation\n        if (choixTransformation[j] === 10 && antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible par homothétie de rapport 1/k2\n\n        // pour éviter les points en dehors des clous dans homothétie de rapport 1/k2\n        if (punto[j][0] - Math.floor(punto[j][0]) === 0 &&\n          punto[j][1] - Math.floor(punto[j][1]) === 0) { puntoReseau = true } else { puntoReseau = false }\n      }\n      N[j] = point(punto[j][0] - 4, punto[j][1] - 4)\n      M[j] = point(antecedents[j] % 10 - 4, Math.floor(antecedents[j] / 10 - 4))\n    }\n    // n[i] est un tableau contenant -1 pour la transformation d'indice i si elle n'est pas utilisée, et contenant le numéro du point concerné si la transformation i est utilisée pour ce point.\n    // Je l'utilise pour faire apparaître la correction liée au point et à la transformation.\n    for (let j = 0; j < nbImages; j++) {\n      n[choixTransformation[j] - 1] = antecedents[j]\n    }\n    for (let i = 0; i < nbImages; i++) {\n      switch (choixTransformation[i]) {\n        case 1:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_1)$.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_1)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d1, tracePoint(M[i]), latexParCoordonnees('(d_1)', 4.8, 4.5, 'green', 20, 10, ''))\n          objetsCorrection.push(d1, tracePoint(M[i], N[i]), latexParCoordonnees('(d_1)', 3.5, 3, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'purple'), codeSegments('X', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 2:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_2)$.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_2)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d2, tracePoint(M[i]), latexParCoordonnees('(d_2)', 4.3, -3.7, 'green', 20, 10, ''))\n          objetsCorrection.push(d2, tracePoint(M[i], N[i]), latexParCoordonnees('(d_2)', 4.3, -3.7, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'cyan'), codeSegments('|||', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 3:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_3)$.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_3)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d3, tracePoint(M[i]), latexParCoordonnees('(d_3)', -4.2, 0.5, 'green', 20, 10, ''))\n          objetsCorrection.push(d3, tracePoint(M[i], N[i]), latexParCoordonnees('(d_3)', -4.2, 0.5, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'brown'), codeSegments('/', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 4:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_4)$.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_4)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d4, tracePoint(M[i]), latexParCoordonnees('(d_4)', 0.2, 4.5, 'green', 15, 1, ''))\n          objetsCorrection.push(d4, tracePoint(M[i], N[i]), latexParCoordonnees('(d_4)', 0.2, 4.5, 'green', 20, 10, ''),\n            segment(M[i], N[i], 'yellow'), codeSegments('||', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 5:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens anti-horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 6:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 7:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la symétrie de centre O.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la symétrie de centre O est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('O', 'red', M[i], O, O, N[i]))\n          break\n\n        case 11:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens anti-horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 12:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 13:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens anti-horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 14:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens horaire.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 8:\n          pointM = point(randint(-1, 2, [M[i].x, 0]), randint(-1, 2, [M[i].y, 0]), 'M', 'below')\n          pointN = translation(pointM, vecteur(xu, yu), 'N', 'below')\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la translation qui transforme M en N.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par la translation qui transforme M en N est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], pointM, pointN), labelPoint(pointM, pointN))\n          objetsCorrection.push(tracePoint(M[i], N[i], pointM, pointN), labelPoint(pointM, pointN), vecteur(M[i], N[i]).representant(M[i]), vecteur(M[i], N[i]).representant(pointM))\n          break\n\n        case 9:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport ${k1}.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport ${k1} est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'orange'))\n          break\n\n        case 10:\n          texte +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport $${texFractionReduite(\n              1,\n              k2\n            )}$.<br>`\n          texteCorr +=\n          (i === 0 ? numAlpha(i) : '<br>' + numAlpha(i)) +\n            ` L'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport $${texFractionReduite(\n              1,\n              k2\n            )}$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'orange'))\n          break\n      }\n\n      setReponse(this, i, images[i])\n      texte += ajouteChampTexteMathLive(this, i, 'largeur10 inline')\n    }\n    /* if (context.isAmc) {\n      enonceAMC += '\\\\\\\\' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsEnonce)\n    } */\n    texte += '<br>' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsEnonce)\n    texteCorr += '<br>' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsCorrection)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n    if (context.isAmc) {\n      if (this.can) {\n        this.autoCorrection[0] = {\n          enonce: texte,\n          options: { multicols: true },\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: 'a)',\n                  valeur: images[0],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            }]\n\n        }\n      } else {\n        this.autoCorrection[0] = {\n          enonce: texte,\n          options: { multicols: true },\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: 'a)',\n                  valeur: images[0],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: 'b)',\n                  valeur: images[1],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: 'c)',\n                  valeur: images[2],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            }]\n        }\n      }\n    }\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des transformations',\n    'Choisir 3 nombres maximum, séparés par des tirets : \\n 1 & 2 : Symétries obliques\\n 3 & 4 : Symétries horizontales ou verticales\\n 5 & 6 : Rotations de 90°\\n 7 : Symétrie centrale\\n 8 : Translation\\n 9 : Homothéties k>1\\n 10 : Homothéties k<1'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","Transformations","Exercice","this","can","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","sup","listeTypeDeQuestions","context","spacingCorr","nouvelleVersion","numeroExercice","choixTransformation","nbImages","combinaisonListes","contraindreValeur","split","i","parseInt","rangeMinMax","M","N","pointM","pointN","O","point","d1","droiteParPointEtPente","d3","droiteHorizontaleParPoint","d2","d4","droiteVerticaleParPoint","isVisible","epaisseur","color","opacite","objetsEnonce","objetsCorrection","j","push","tracePoint","texteParPositionEchelle","Number","toString","listeQuestions","listeCorrections","antecedents","images","k","k1","k2","yu","puntoReseau","n","texte","texteCorr","punto","xu","randint","choice","imagePointParTransformation","Math","floor","numAlpha","latexParCoordonnees","segment","codeSegments","milieu","labelPoint","afficheMesureAngle","x","y","translation","vecteur","representant","texFractionReduite","setReponse","ajouteChampTexteMathLive","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","optionsTikz","mainlevee","listeQuestionsToContenuSansNumero","autoCorrection","enonce","options","multicols","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","besoinFormulaireTexte","titre","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","indexOf"],"sourceRoot":""}