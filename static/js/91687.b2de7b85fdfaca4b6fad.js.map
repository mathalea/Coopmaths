{"version":3,"file":"js/91687.b2de7b85fdfaca4b6fad.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6M30.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, arrondi, calcul, texNombrec, texNombre, texFraction } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, propositionsQcm, setReponse } from '../../modules/gestionInteractif.js'\nimport Grandeur from '../../modules/Grandeur.js'\n\nexport const titre = 'Calculer le volume de solides donnés'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = ['qcm', 'mathLive']\n/**\n * Calcul de volumes (cube et pavé droit).\n * @author Jean-Claude Lhote // modifié par Mireille Gain pour y ajouter les décimaux\n * référence 6M30\n */\n\nexport default function CalculDeVolumes () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Calculer, en détaillant, le volume des solides donnés. Arrondir à l'unité.\"\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.classe = 6\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.sup3 = 2\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.interactifType = parseInt(this.sup3) === 2 ? 'mathLive' : 'qcm'\n    this.autoCorrection = []\n    if (this.classe === 6) { // sixième : cube et pavé droit\n      typesDeQuestionsDisponibles = [1, 2]\n    } else if (this.classe === 5) { // cinquième : on ajoute les prismes et le cylindre\n      typesDeQuestionsDisponibles = [1, 2, 3, 4]\n    } else if (this.classe === 4) { // Quatrième : on ajoute pyramides et cones\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6]\n    } else {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7] // Troisième : on ajoute les boules.\n    }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const listeUnites = [\n      ['~\\\\text{m}', '~\\\\text{m}^3', 'm^3'],\n      ['~\\\\text{dm}', '~\\\\text{dm}^3', 'dm^3'],\n      ['~\\\\text{cm}', '~\\\\text{cm}^3', 'cm^3'],\n      ['~\\\\text{mm}', '~\\\\text{mm}^3', 'mm^3']\n    ]\n    let partieDecimale1, partieDecimale2, partieDecimale3\n    if (this.sup2) {\n      partieDecimale1 = calcul(randint(1, 9) / 10 * randint(0, 1))\n      partieDecimale2 = calcul(randint(1, 9) / 10 * randint(0, 1))\n      partieDecimale3 = calcul(randint(1, 9) / 10 * randint(0, 1))\n    } else {\n      partieDecimale1 = 0\n      partieDecimale2 = 0\n      partieDecimale3 = 0\n    }\n    for (let i = 0, texte, texteCorr, L, l, h, c, r, j, resultat, resultat2, resultat3, resultat4, volume, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // cube\n          c = calcul(randint(2, 10) + partieDecimale1)\n          volume = c * c * c\n          j = randint(0, 3) // pour le choix de l'unité\n          texte = `Un cube de $${texNombre(c)} ${listeUnites[j][0]}$ d'arête en $${listeUnites[j][1]}$.`\n          texteCorr = `$\\\\mathcal{V}= c^3 =c \\\\times c \\\\times c = ${texNombre(c)}${listeUnites[j][0]}\\\\times${texNombre(c)}${listeUnites[j][0]}\\\\times${texNombre(c)}${listeUnites[j][0]}=${texNombrec(volume)}${listeUnites[j][1]}`\n          if (volume !== Math.round(volume)) {\n            texteCorr += `\\\\approx ${Math.round(volume)}${listeUnites[j][1]}$`\n          } else {\n            texteCorr += '$'\n          }\n          resultat = Math.round(volume)\n          if (c !== 6) resultat2 = Math.round(6 * c * c)\n          else resultat2 = Math.round(24 * c)\n          if (c !== 2) resultat3 = Math.round(4 * c)\n          else resultat3 = 24\n          resultat4 = Math.round(6 * c)\n          break\n        case 2: // pavé droit\n          if (this.sup === 1) { // sans conversion\n            j = randint(0, 3) // pour le choix de l'unité\n            l = calcul(randint(2, 5) + partieDecimale1)\n            h = calcul(randint(3, 6) + partieDecimale2)\n            L = calcul(randint(6, 10) + partieDecimale3)\n            volume = l * L * h\n            texte = `Un pavé droit de $${texNombre(l)}${listeUnites[j][0]}$ de largeur, de $${texNombre(L)}${listeUnites[j][0]}$ de longueur et de $${texNombre(h)}${listeUnites[j][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}= l \\\\times L \\\\times h = ${texNombre(l)}${listeUnites[j][0]}\\\\times${texNombre(L)}${listeUnites[j][0]}\\\\times${texNombre(h)}${listeUnites[j][0]}=${texNombrec(volume)}${listeUnites[j][1]}`\n            if (volume !== Math.round(volume)) {\n              texteCorr += `\\\\approx ${Math.round(volume)}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += '$'\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(6 * (l + L + h))\n            resultat3 = Math.round(2 * l * L + 2 * L * h + 2 * l * h)\n            resultat4 = Math.round(2 * (l + L + h))\n          } else {\n            // avec conversion\n            j = randint(1, 2) // pour le choix de l'unité  centrale\n            l = calcul(randint(2, 5) + partieDecimale1)\n            h = calcul(randint(3, 6) * 10 + partieDecimale2)\n            L = arrondi(randint(6, 10) / 10, 1)\n            volume = l * L * h\n            texte = `Un pavé droit de $${texNombre(l)}${listeUnites[j][0]}$ de largeur, de $${texNombre(L)}${listeUnites[j - 1][0]}$ de longueur et de $${texNombre(h)}${listeUnites[j + 1][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}= l \\\\times L \\\\times h = ${texNombre(l)}${listeUnites[j][0]}\\\\times${texNombre(L)}${listeUnites[j - 1][0]}\\\\times${texNombre(h)}${listeUnites[j + 1][0]}=${l}${listeUnites[j][0]}\\\\times${texNombrec(L * 10)}${listeUnites[j][0]}\\\\times${texNombrec(h / 10)}${listeUnites[j][0]}=${texNombrec(volume)}${listeUnites[j][1]}`\n            if (volume !== Math.round(volume)) {\n              texteCorr += `\\\\approx ${Math.round(volume)}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += '$'\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(6 * (l + L + h))\n            resultat3 = Math.round(2 * l * L + 2 * L * h + 2 * l * h)\n            resultat4 = Math.round(2 * (l + L + h))\n          }\n          break\n        case 3: // Cylindre\n          if (this.sup === 1) {\n            // sans conversion\n            j = randint(0, 3) // pour le choix de l'unité\n            r = randint(2, 10)\n            h = randint(2, 15)\n            volume = r * r * h * Math.PI\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round(volume / 2)\n            resultat4 = Math.round(2 * volume)\n            texte = `Un cylindre de $${r}${listeUnites[j][0]}$ de rayon et de $${texNombre(h)}${listeUnites[j][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\pi \\\\times R ^2 \\\\times h =\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^2\\\\times${h}${listeUnites[j][0]}=${texNombrec(\n              r * r * h\n            )}\\\\pi${listeUnites[j][1]}\\\\approx${texNombrec(\n              arrondi(volume, 0)\n            )}${listeUnites[j][1]}$`\n          } else {\n            j = randint(2, 3) // pour le choix de l'unité\n            r = randint(2, 10)\n            h = randint(20, 150)\n            texte = `Un cylindre de $${r}${listeUnites[j][0]}$ de rayon et de $${texNombrec(h / 10)}${listeUnites[j - 1][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\pi \\\\times R ^2 \\\\times h =\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^2\\\\times${texNombrec(h / 10)}${listeUnites[j - 1][0]}=\\\\pi\\\\times${r * r}${listeUnites[j][0]}^2\\\\times${h}${listeUnites[j][0]}=${texNombrec(r * r * h)}\\\\pi${listeUnites[j][1]}\\\\approx${Math.round(volume)}${listeUnites[j][1]}$`\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round(volume / 2)\n            resultat4 = Math.round(2 * volume)\n          }\n          break\n        case 4: // prisme droit\n          if (this.sup === 1) {\n            // sans conversion\n            j = randint(0, 3) // pour le choix de l'unité\n            c = calcul(randint(2, 10) + partieDecimale3)\n            h = randint(2, 5)\n            l = randint(6, 10)\n            volume = (c * h * l) / 2\n            texte = `Un prisme droit de hauteur $${texNombre(l)}${listeUnites[j][0]}$ et dont les bases sont des triangles de base $${texNombre(c)}${listeUnites[j][0]}$ et de hauteur correspondante $${h}${listeUnites[j][0]}$ en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\mathcal{B} \\\\times h=\\\\dfrac{${texNombre(c)}${listeUnites[j][0]}\\\\times${texNombre(h)}${listeUnites[j][0]}}{2}\\\\times${texNombre(l)}${listeUnites[j][0]}=${texNombre(volume)}${listeUnites[j][1]}`\n            if (volume !== Math.round(volume)) {\n              texteCorr += `\\\\approx ${Math.round(volume)}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += '$'\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round((c + h) * l)\n            resultat4 = Math.round(2 * volume)\n          } else {\n            j = randint(1, 2) // pour le choix de l'unité\n            c = calcul(randint(2, 10) + partieDecimale3)\n            h = randint(30, 50)\n            l = arrondi(randint(5, 15) / 10, 1)\n            texte = `Un prisme droit de hauteur $${texNombre(l)}${listeUnites[j - 1][0]}$ et dont les bases sont des triangles de base $${texNombre(c)}${listeUnites[j][0]}$ et de hauteur correspondante $${h}${listeUnites[j + 1][0]}$ en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\mathcal{B} \\\\times h=\\\\dfrac{${c}${listeUnites[j][0]}\\\\times${h}${listeUnites[j + 1][0]}}{2}\\\\times${texNombrec(l)}${listeUnites[j - 1][0]}=\\\\dfrac{${c}${listeUnites[j][0]}\\\\times${texNombrec(\n              calcul(h / 10)\n            )}${listeUnites[j][0]}}{2}\\\\times${l * 10}${listeUnites[j][0]}=${texNombre(volume)}${listeUnites[j][1]}`\n            if (volume !== Math.round(volume)) {\n              texteCorr += `\\\\approx ${Math.round(volume)}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += '$'\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round((c + h) * l)\n            resultat4 = Math.round(2 * volume)\n          }\n          break\n        case 5: // cone\n          if (this.sup === 1) {\n            // sans conversion\n            j = randint(0, 3) // pour le choix de l'unité\n            r = randint(2, 10)\n            h = randint(2, 15)\n            volume = (r * r * h * Math.PI) / 3\n            texte = `Un cône de $${r}${listeUnites[j][0]}$ de rayon et de $${texNombre(h)}${listeUnites[j][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\dfrac{1}{3} \\\\times \\\\mathcal{B} \\\\times h=\\\\dfrac{1}{3}\\\\times\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^2\\\\times${h}${listeUnites[j][0]}=${texFraction(\n              r * r * h,\n              3\n            )}\\\\pi${listeUnites[j][1]}\\\\approx${texNombrec(Math.round(volume))}${listeUnites[j][1]}$`\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round(volume / 2)\n            resultat4 = Math.round(2 * volume)\n          } else {\n            j = randint(2, 3) // pour le choix de l'unité\n            r = randint(2, 10)\n            h = randint(20, 150)\n            volume = (r * r * h * Math.PI) / 3\n            texte = `Un cône de $${texNombre(r)}${listeUnites[j][0]}$ de rayon et de $${texNombrec(h / 10)}${listeUnites[j - 1][0]}$ de hauteur en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\dfrac{1}{3} \\\\times \\\\mathcal{B} \\\\times h=\\\\dfrac{1}{3}\\\\times\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^2\\\\times${texNombrec(calcul(h / 10))}${listeUnites[j - 1][0]}=\\\\dfrac{1}{3}\\\\times\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^2\\\\times${texNombrec(h)}${listeUnites[j][0]}=${texFraction(r * r * h, 3)}\\\\pi\\\\approx${texNombre(Math.round(volume))}${listeUnites[j][1]}$`\n            resultat = Math.round(volume)\n            resultat2 = Math.round(4 * volume)\n            resultat3 = Math.round(volume / 2)\n            resultat4 = Math.round(2 * volume)\n          }\n          break\n        case 6: // pyramide\n          if (this.sup === 1) {\n            // sans conversion\n            j = randint(0, 3) // pour le choix de l'unité\n            c = calcul(randint(2, 10) + partieDecimale2)\n            h = randint(2, 5)\n            l = randint(6, 10)\n            volume = (c * c * h) / 3\n            texte = `Une pyramide de hauteur $${h}${listeUnites[j][0]}$ et dont la base  est un carré de $${texNombre(c)}${listeUnites[j][0]}$ de côté en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\dfrac{1}{3} \\\\times \\\\mathcal{B} \\\\times h=\\\\dfrac{1}{3}\\\\times\\\\left(${texNombre(c)}${listeUnites[j][0]}\\\\right)^2\\\\times${h}${listeUnites[j][0]}`\n            if (calcul((c * c * h) / 3, false) === arrondi((c * c * h) / 3, 1)) {\n              texteCorr += `=${texNombrec(\n                arrondi(calcul((c * c * h) / 3), 1)\n              )}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += `\\\\approx${texNombre(Math.round(volume))}${listeUnites[j][1]}$`\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(3 * volume)\n            resultat3 = Math.round(3 * volume / 4)\n            resultat4 = Math.round(volume / 2)\n          } else {\n            j = randint(1, 2) // pour le choix de l'unité\n            c = calcul(randint(2, 10) + partieDecimale2)\n            h = randint(30, 50)\n            l = arrondi(randint(5, 15) / 10, 1)\n            volume = (c * c * h) / 3\n            texte = `Une pyramide de hauteur $${texNombrec(h / 10)}${listeUnites[j - 1][0]}$ et dont la base  est un carré de $${texNombre(c)}${listeUnites[j][0]}$ et de hauteur correspondante $${h}${listeUnites[j + 1][0]}$ en $${listeUnites[j][1]}$.`\n            texteCorr = `$\\\\mathcal{V}=\\\\dfrac{1}{3} \\\\times \\\\mathcal{B} \\\\times h=\\\\dfrac{1}{3}\\\\times\\\\left(${texNombre(c)}${listeUnites[j][0]}\\\\right)^2\\\\times${texNombrec(h / 10)}${listeUnites[j - 1][0]}=\\\\dfrac{1}{3}\\\\times${c * c}${listeUnites[j][0]}^2\\\\times${texNombrec(h)}${listeUnites[j][0]}`\n            if (volume === Math.round(volume)) {\n              texteCorr += `=${texNombre(Math.round(volume))}${listeUnites[j][1]}$`\n            } else {\n              texteCorr += `\\\\approx${texNombre(Math.round(volume))}${listeUnites[j][1]}$`\n            }\n            resultat = Math.round(volume)\n            resultat2 = Math.round(3 * volume)\n            resultat3 = Math.round(3 * volume / 4)\n            resultat4 = Math.round(volume / 2)\n          }\n          break\n        case 7: // boule\n          j = randint(0, 3) // pour le choix de l'unité\n          r = randint(2, 10)\n          volume = (4 * Math.PI * r * r * r) / 3\n          texte = `Une boule de $${r}${listeUnites[j][0]}$ de rayon en $${listeUnites[j][1]}$.`\n          texteCorr = `$\\\\mathcal{V}=\\\\dfrac{4}{3} \\\\times \\\\pi \\\\times R^3=\\\\dfrac{4}{3}\\\\times\\\\pi\\\\times\\\\left(${r}${listeUnites[j][0]}\\\\right)^3=${texFraction(calcul(4 * r * r * r), 3)}\\\\pi${listeUnites[j][1]}\\\\approx${texNombre(Math.round(volume))}${listeUnites[j][1]}$`\n          resultat = Math.round(volume)\n          resultat2 = Math.round(3 * volume)\n          resultat3 = Math.round(4 * r * r * r / 3)\n          resultat4 = Math.round(3 * volume / 4)\n          break\n      }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [{\n        texte: `$${texNombre(resultat)}$`,\n        statut: true\n      },\n      {\n        texte: `$${texNombre(resultat2)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat3)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat4)}$`,\n        statut: false\n      }\n      ]\n      this.autoCorrection[i].options = {}\n      if (this.interactif && this.interactifType === 'qcm') {\n        texte += propositionsQcm(this, i).texte\n      } else {\n        setReponse(this, i, new Grandeur(Math.round(volume), listeUnites[j][2]), { formatInteractif: 'longueur' })\n        texte += ajouteChampTexteMathLive(this, i, 'longueur')\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    2,\n    '1 : Sans conversion\\n2 : Avec des conversions'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des décimaux', false]\n  if (context.isHtml && !context.isDiaporama) this.besoinFormulaire3Numerique = ['Exercice interactif', 2, '1 : QCM\\n2 : Numérique'] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","CalculDeVolumes","typesDeQuestionsDisponibles","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","classe","sup3","nouvelleVersion","numeroExercice","parseInt","autoCorrection","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","listeUnites","partieDecimale1","partieDecimale2","partieDecimale3","sup2","calcul","randint","texte","texteCorr","L","l","h","c","r","j","resultat","resultat2","resultat3","resultat4","volume","i","cpt","texNombre","texNombrec","Math","round","arrondi","PI","texFraction","enonce","propositions","statut","options","interactif","propositionsQcm","setReponse","Grandeur","formatInteractif","ajouteChampTexteMathLive","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","context","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}