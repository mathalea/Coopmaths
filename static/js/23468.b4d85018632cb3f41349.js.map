{"version":3,"file":"js/23468.b4d85018632cb3f41349.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2G22-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice } from '../../modules/outils.js'\nimport { repere2, mathalea2d, point, labelPoint, segment, nomVecteurParPosition, texteParPosition, vecteur, homothetie, longueur, latexParPoint } from '../../modules/2d.js'\n\nexport const titre = 'Représenter un vecteur dans un repère, à partir de ses coordonnées.'\n\n/**\n * Tracer un vecteur dont on connais les coordonnées dans un repère.\n * @author Stéphane Guyon légèrement modifié par Jean-Claude Lhote\n * référence 2G22-1\n */\nexport default function RepresenterUnVecteur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.nbQuestions = 2\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1 //\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (let i = 0, r, posLabelA, posLabelB, labelA, labelB, A, B, H, h1, h2, O, I, J, j, t, k, l, s, o, ux, uy, xA, yA, xB, yB, AB, nomi, nomj, nomAB, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      xA = randint(2, 8) * choice([-1, 1])\n      yA = randint(2, 8) * choice([-1, 1])\n      ux = randint(3, 8) * choice([-1, 1])\n      uy = randint(3, 8) * choice([-1, 1])\n      xB = xA + ux\n      yB = yA + uy\n      while (Math.abs(xB) < 2 || Math.abs(xB) > 8) { // On s'assure de choisir des points bien placés dans le repère.\n        xA = randint(3, 8) * choice([-1, 1])\n        ux = randint(3, 8) * choice([-1, 1])\n        xB = xA + ux\n      }\n      while (Math.abs(yB) < 2 || Math.abs(yB) > 8) { // Idem pour les ordonnées\n        yA = randint(3, 8) * choice([-1, 1])\n        uy = randint(3, 8) * choice([-1, 1])\n        yB = yA + uy\n      }\n      A = point(xA, yA)\n      B = point(xB, yB)\n      AB = vecteur(A, B)\n      r = repere2()// On définit le repère\n      posLabelA = homothetie(B, A, -0.7 / longueur(A, B), '', 'center') // pour positionner les noms des points aux extrémités proprement\n      posLabelB = homothetie(A, B, -0.7 / longueur(A, B), '', 'center')\n      labelA = latexParPoint('A', posLabelA, 'red', 10, 12, '')\n      labelB = latexParPoint('B', posLabelB, 'red', 10, 12, '')\n\n      H = point(xA + ux, yA)\n      s = AB.representant(A) // On trace en rouge [AB]\n      h1 = segment(A, H, 'blue')\n      h2 = segment(B, H, 'green')\n      O = point(0, 0)// On définit et on trace le point O\n      o = texteParPosition('O', -0.5, -0.5, 'milieu', 'black', 1)\n      I = point(1, 0)// On définit sans tracer le point I\n      J = point(0, 1)// On définit sans tracer le point J\n      k = vecteur(O, I).representant(O) // Variable qui trace [OI] en rouge\n      j = vecteur(O, J).representant(O)// Variable qui trace [OJ] en rouge\n      s.epaisseur = 2// Variable qui grossit le tracé du vecteur AB\n      s.color = 'red'\n      k.epaisseur = 2// Variable qui grossit le tracé du vecteur OI\n      j.epaisseur = 2// Variable qui grossit le tracé du vecteur OJ\n      h1.epaisseur = 2// Variable qui grossit le tracé bleu\n      h2.epaisseur = 2// Variable qui grossit le tracé bleu\n      nomi = nomVecteurParPosition('i', 0.5, -0.7, 1.5, 0)\n      nomj = nomVecteurParPosition('j', -0.7, 0.5, 1.5, 0)\n      nomAB = AB.representantNomme(A, 'u', 2, 'red')\n      if (parseInt(this.sup) === 1) {\n        l = labelPoint(A, 'red')// Variable qui trace les nom s A et B\n        //  t = tracePoint(A, 'red') // Variable qui trace les points avec une croix\n\n        texte = ` Dans un repère orthonormé $(O,\\\\vec i,\\\\vec j)$, représenter le vecteur $\\\\vec{u}\\\\begin{pmatrix}${ux} \\\\\\\\${uy}\\\\end{pmatrix}~$, `\n        texte += `  ayant pour origine le point $A\\\\left(${xA};${yA}\\\\right)$`\n\n        texteCorr = 'On sait qu\\'un vecteur mesure un déplacement.'\n        texteCorr += `<br> A partir du point $A$,  on trace donc le déplacement correspondant à $${ux}$ unités horizontalement (en bleu) puis $${uy}$ unités verticalement (en vert) pour arriver au point $B$ extrémité du vecteur $\\\\vec{u}$.`\n        texteCorr += '<br> Voir les déplacements dans le repère et le tracé en rouge du vecteur $\\\\vec{u}$'\n      }\n      if (parseInt(this.sup) === 2) {\n        texte = ` Dans un repère orthonormé $(O,\\\\vec i,\\\\vec j)$, représenter le vecteur $\\\\vec{u}\\\\begin{pmatrix}${ux} \\\\\\\\${uy}\\\\end{pmatrix}~$, `\n        texte += `  ayant pour extrémité le point $B\\\\left(${xB};${yB}\\\\right)$`\n\n        texteCorr = 'On sait qu\\'un vecteur mesure un déplacement.'\n        texteCorr += `<br> On cherche donc un point $A$,  à partir duquel en traçant le déplacement correspondant à $${ux}$ unités horizontalement (en bleu)  puis $${uy}$ unités verticalement (en vert), on arrive au point $B$.`\n        texteCorr += '<br> Voir le déplacement en bleu dans le repère et le tracé en rouge du vecteur $\\\\vec{u}$'\n        //  t = tracePoint(A, 'red') // Variable qui trace les points avec une croix\n        l = labelPoint(A, B, 'red')// Variable qui trace les nom s A et B\n      }\n      texteCorr += mathalea2d({\n        xmin: -9,\n        ymin: -9,\n        xmax: 9,\n        ymax: 9\n      }, r, t, l, k, j, s, o, nomi, nomj, nomAB, h1, h2, labelA, labelB)// On trace le graphique\n\n      if (this.questionJamaisPosee(i, xA, yA, xB, yB)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Situations différentes ', 2, '1 :Avec un point origine\\n 2 : Avec un point extrémité']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","RepresenterUnVecteur","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","listeQuestions","listeCorrections","r","posLabelA","posLabelB","labelA","labelB","A","B","H","h1","h2","O","I","J","j","t","k","l","s","o","ux","uy","xA","yA","xB","yB","AB","nomi","nomj","nomAB","texte","texteCorr","i","cpt","randint","choice","Math","abs","point","vecteur","repere2","homothetie","longueur","latexParPoint","representant","segment","texteParPosition","epaisseur","color","nomVecteurParPosition","representantNomme","parseInt","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}