{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G32-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","SymetrieAxialeConservation1","Exercice","this","consigne","spacing","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","parseInt","points","traces","nom","alternance","i","push","lettreDepuisChiffre","noms","shuffle","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","texteGras","d","nonchoisi","axe","coords","x","y","objetsEnonce","objetsCorrection","nomd","labelPos","randint","droite","texteParPosition","j","point","tracePoint","index","sup2","length","lenght","texte","texteCorr","s1","s2","choix","cpt","segment","texcolors","epaisseur","demiDroite","polygone","codeAngle","indexOf","isVisible","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","style","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/8172.608ec3ad6c9013b66609.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenuSansNumero, randint, shuffle, combinaisonListes, lettreDepuisChiffre, texcolors, texteGras } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, droite, segment, demiDroite, polygone, codeAngle, texteParPosition, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Propriétés de conservation de la symétrie axiale'\n\n/**\n * Ref 6G32-1\n * Publié le 26/10/2020\n * @author Jean-Claude Lhote\n */\nexport default function SymetrieAxialeConservation1 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Dans la symétrie d\\'axe (d)...'\n  this.spacing = 2\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    const typesDeQuestionsDisponibles = ['Segment', 'Droite', '1/2droite', 'Triangle', 'Angle']\n    const points = []; const traces = []; const nom = []; let alternance\n    for (let i = 0; i < 25; i++) nom.push(lettreDepuisChiffre(i + 1))\n    const noms = shuffle(nom)\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.listeQuestions.push(' ')\n    this.listeCorrections.push(`${texteGras('Dans la symétrie d\\'axe (d)...')}`)\n    // On prépare la figure...\n    let axe = parseInt(this.sup)\n    let d; let nonchoisi; const coords = []; let x; let y; const objetsEnonce = []; const objetsCorrection = []; let nomd; let labelPos\n    if (axe === 5) axe = randint(1, 4) // choix de l'axe et des coordonnées\n    switch (axe) {\n      case 1: d = droite(1, 0, 0)\n        nomd = texteParPosition('(d)', 0.3, 5.6)\n        labelPos = 'above left'\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 0), randint(-5, 5)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([-coords[j][0], coords[j][1]]) // on stocke les 12 images\n        break\n      case 2: d = droite(0, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', 5.6, 0.3)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 5), randint(-5, 0)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([coords[j][0], -coords[j][1]]) // on stocke les 12 images\n        break\n      case 3: d = droite(1, -1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, -5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            x = randint(-5, 5)\n            y = randint(x, 5)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([coords[j][1], coords[j][0]]) // on stocke les 12 images\n        break\n      case 4: d = droite(1, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, 5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ? Si oui, on recommence.\n            x = randint(-5, 5)\n            y = randint(-5, -x)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) {\n              if (coords[j][0] === x && coords[j][1] === y) { nonchoisi = false }\n            }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) { coords.push([-coords[j][1], -coords[j][0]]) } // on stocke les 12 images\n        break\n    }\n    for (let i = 0; i < 24; i++) {\n      if (i < 12) points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      else if (coords[i][0] === coords[i - 12][0] && coords[i][1] === coords[i - 12][1]) {\n        points.push(point(coords[i][0], coords[i][1], noms[i - 12], labelPos))\n        noms[i] = noms[i - 12]\n      } else points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      traces.push(tracePoint(points[i]))\n    }\n    // On rédige les questions et les réponses\n    if (this.sup2 === true) alternance = 2\n    else alternance = 1\n    function index (i) {\n      return (i + 12 * (i % alternance)) % 24\n    }\n    objetsEnonce.length = 0\n    objetsCorrection.lenght = 0\n    for (let i = 0, texte, texteCorr, s1, s2, choix, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 'Segment':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quel est le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ ?`\n          texteCorr = `Le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ est le segment $[${noms[index(choix + 12)]}${noms[index(choix + 13)]}]$.`\n          s1 = segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2))\n          s2 = segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2))\n          s1.epaisseur = 2\n          s2.epaisseur = 2\n          objetsCorrection.push(s1, s2)\n          break\n        case 'Droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quelle est la symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = `La symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ est la droite $(${noms[index(choix + 12)]}${noms[index(choix + 13)]})$.`\n          objetsCorrection.push(droite(points[index(choix)], points[index(choix + 1)], '', texcolors(i * 3 + 2)))\n          objetsCorrection.push(droite(points[index(choix + 12)], points[index(choix + 13)], '', texcolors(i * 3 + 2)))\n          break\n        case '1/2droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quelle est la symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = `La symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ est la demi-droite $[${noms[index(choix + 12)]}${noms[index(choix + 13)]})$`\n          objetsCorrection.push(demiDroite(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(demiDroite(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          break\n        case 'Triangle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          texte = `Quel est le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ ?`\n          texteCorr = `Le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ est le triangle $${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}$.`\n          objetsCorrection.push(polygone([points[index(choix)], points[index(choix + 1)], points[index(choix + 2)]], texcolors(i * 3 + 2)))\n          objetsCorrection.push(polygone([points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)]], texcolors(i * 3 + 2)))\n          break\n        case 'Angle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          texte = `Quel est le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ ?`\n          texteCorr = `Le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ est l'angle $\\\\widehat{${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}}$.`\n          objetsCorrection.push(codeAngle(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(codeAngle(points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 1)], points[index(choix + 2)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 13)], points[index(choix + 14)], texcolors(i * 3 + 2)))\n\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    d.isVisible = true\n    objetsEnonce.push(nomd, d)\n    objetsCorrection.push(nomd, d)\n    for (let i = 0; i < 24; i++) {\n      objetsEnonce.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n      objetsCorrection.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n    }\n    this.listeQuestions.push('<br>' + mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1, style: 'margin-top: 40px' }, objetsEnonce))\n    this.listeCorrections.push(mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1 }, objetsCorrection))\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'axe', 5, '1 : Axe vertical\\n2 : Axe horizontal\\n3 : Axe oblique 1\\n4 : Axe oblique 2\\n5 : Axe aléatoire']\n  this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}