{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G21.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","ConstruireUnTriangle","Exercice","this","nbQuestions","nbCols","nbColsCorr","classe","typeExercice","nouvelleVersion","IEP","typesDeQuestionsDisponibles","A","B","C","CC","lAB","lBC","lAC","cA","cB","T","TT","dBC","dAB","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","nom","sommets","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","Alea2iep","creerNomDePolygone","push","shuffle","point","randint","calcul","pointAdistance","positionLabel","cercle","pointIntersectionCC","x","y","afficheLongueurSegment","traceCompas","triangle3longueurs","droite","droiteParPointEtPerpendiculaire","pointIntersectionLC","codageAngleDroit","triangleRectangleCoteHypotenuse","polygoneAvecNom","xmin","Math","min","ymin","xmax","max","ymax","pixelsParCm","scale","mainlevee","amplitude","mathalea2d","htmlBouton","numeroExercice","indexOf","listeQuestionsToContenu","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","listePackages"],"mappings":"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","file":"js/27986.52f81ef28b880394f8f0.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListes, calcul, creerNomDePolygone } from '../../modules/outils.js'\nimport { point, pointAdistance, droite, droiteParPointEtPerpendiculaire, polygoneAvecNom, cercle, pointIntersectionLC, pointIntersectionCC, traceCompas, codageAngleDroit, afficheLongueurSegment, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Construire un triangle aux instruments'\n\n/**\n * Publié le 30/08/202\n * @author Jean-Claude Lhote (exercice) et Rémi Angot (animation Instrumenpoche)\n * Réfrence 6G21 et ... (exercice en 5e ? pas encore fait)\n * Modifié 2021/04/02\n */\nexport default function ConstruireUnTriangle () {\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 2\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.classe = 6\n  this.typeExercice = 'IEP'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let IEP\n    let typesDeQuestionsDisponibles, A, B, C, CC, lAB, lBC, lAC, cA, cB, T, TT, dBC, dAB, objetsEnonce, objetsCorrection, paramsEnonce, paramsCorrection, nom, sommets\n    if (this.classe === 6) typesDeQuestionsDisponibles = [1, 2]\n    // else typesDeQuestionsDisponibles = [1, 2, 3]\n    else typesDeQuestionsDisponibles = [1]\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      IEP = new Alea2iep()\n      objetsEnonce = []\n      objetsCorrection = []\n      texte = 'Le triangle ci-dessous a été réalisé à main levée.<br>Construire ce triangle avec les instruments de géométrie en respectant les mesures indiquées.<br>'\n      texteCorr = 'Voici la construction que tu devais réaliser.<br>'\n      nom = creerNomDePolygone(3, 'PQ')\n      sommets = []\n      for (let i = 0; i < 3; i++) sommets.push(nom[i])\n      sommets = shuffle(sommets)\n      A = point(0, 0, sommets[0], 'left')\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // triangle donné par trois longueurs\n          lAC = randint(35, 45)\n          lBC = calcul(randint(35, 45, lAC) / 10)\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = calcul(lAC / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          cB = cercle(B, lBC)\n          C = pointIntersectionCC(cA, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])\n\n          objetsEnonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))\n          objetsCorrection.push(traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé le compas et la règle graduée.<br>'\n\n          IEP.triangle3longueurs(sommets, lAB, lAC, lBC)\n          break\n\n        case 2: // triangle rectangle donné par longueur hypoténuse et un côté de l'angle droit.\n          lAC = randint(70, 80) / 10\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          cA = cercle(A, lAC)\n          dAB = droite(A, B)\n          dBC = droiteParPointEtPerpendiculaire(B, dAB)\n          C = pointIntersectionLC(dBC, cA, sommets[2], 1)\n          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])\n\n          objetsEnonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, A), codageAngleDroit(A, B, C))\n          objetsCorrection.push(traceCompas(A, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(C, A))\n          texteCorr += 'Pour cette construction, nous avons utilisé la règle graduée, l\\'équerre et le compas.<br>'\n\n          IEP.triangleRectangleCoteHypotenuse(sommets, lAB, lAC)\n          break\n\n        case 3:\n\n          break\n      }\n      T = polygoneAvecNom(A, B, C)\n      TT = polygoneAvecNom(A, B, CC)\n      objetsEnonce.push(TT[0], TT[1])\n      objetsCorrection.push(T[0], T[1])\n      paramsEnonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 0.3 }\n      paramsCorrection = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 2), ymin: Math.min(A.y - 1, B.y - 1, C.y - 2), xmax: Math.max(A.x + 1, B.x + 1, C.x + 2), ymax: Math.max(A.y + 1, B.y + 1, C.y + 2), pixelsParCm: 30, scale: 1 }\n      texte += mathalea2d(paramsEnonce, objetsEnonce)\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n\n      texteCorr += IEP.htmlBouton(this.numeroExercice, i)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}