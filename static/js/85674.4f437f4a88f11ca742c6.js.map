{"version":3,"file":"js/85674.4f437f4a88f11ca742c6.js","mappings":"8QAIO,MAAMA,GAAW,EACXC,EAAU,SACVC,GAAkB,EAClBC,EAAiB,YAEjBC,EAAQ,4DAcN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,YAChBD,KAAKE,IAAM,EACXF,KAAKG,MAAO,EACZH,KAAKI,QAAU,EACfJ,KAAKK,YAAc,EACnBL,KAAKM,YAAc,EAEnBN,KAAKO,gBAAkB,WACrBP,KAAKE,IAAMM,SAASR,KAAKE,KACzBF,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GACxB,IAA0CC,EAStCC,EATAC,EAA8B,GACjB,IAAbb,KAAKE,KAAcF,KAAKG,OAAMU,EAA8B,CAAC,EAAG,IACnD,IAAbb,KAAKE,KAAaF,KAAKG,OAAQU,EAA8B,CAAC,EAAG,EAAG,EAAG,IAC1D,IAAbb,KAAKE,KAAcF,KAAKG,OAAMU,EAA8B,CAAC,EAAG,IACnD,IAAbb,KAAKE,KAAaF,KAAKG,OAAQU,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACtE,IAAbb,KAAKE,KAAcF,KAAKG,OAAQU,EAA8B,CAAC,EAAG,EAAG,EAAG,IAC3D,IAAbb,KAAKE,KAAaF,KAAKG,OAAQU,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAEzFb,KAAKG,OAAMH,KAAKC,SAAW,0BAE/B,MAAMa,GAAuBC,EAAAA,EAAAA,KAC3BF,EACAb,KAAKM,aAEDU,GAAWD,EAAAA,EAAAA,KACf,CAAC,GAAI,IAAK,KACVf,KAAKM,aAGP,IACE,IAAWW,EAAOC,EAAoBC,EAAGC,EAAGC,EAAxCC,EAAI,EAAqBC,EAAM,EACnCD,EAAItB,KAAKM,aAAeiB,EAAM,IAE9B,CAEA,OADAZ,EAAmBG,EAAqBQ,GAChCX,GACN,KAAK,EACHQ,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,OAC1CN,GAAIO,EAAAA,EAAAA,KAAOP,GAAIK,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,IAAM,OACtCJ,EAAIJ,EAASM,GACbL,EAAS,KAAGU,EAAAA,EAAAA,KAAUR,aAAYQ,EAAAA,EAAAA,KAAUP,cAC5CF,EAAa,KAAGS,EAAAA,EAAAA,KAAUR,eAAcQ,EAAAA,EAAAA,KACtCP,SACKQ,EAAAA,EAAAA,KAAWT,EAAIC,MACtBR,GAAUc,EAAAA,EAAAA,KAAOP,EAAIC,GACrB,MACF,KAAK,EACHD,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,OAC1CN,GAAIO,EAAAA,EAAAA,KAAOP,GAAIK,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,IAAM,OACtCJ,EAAIJ,EAASM,GACbL,EAAS,KAAGU,EAAAA,EAAAA,KAAUP,aAAYO,EAAAA,EAAAA,KAAUR,cAC5CD,EAAa,KAAGS,EAAAA,EAAAA,KAAUP,eAAcO,EAAAA,EAAAA,KACtCR,SACKS,EAAAA,EAAAA,KAAWT,EAAIC,MACtBR,GAAUc,EAAAA,EAAAA,KAAOP,EAAIC,GACrB,MACF,KAAK,EACHD,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,KAAGY,EAAAA,EAAAA,KAAYV,EAAGE,aAAcM,EAAAA,EAAAA,KAAUP,cACnDF,EAAa,KAAGW,EAAAA,EAAAA,KAAYV,EAAGE,eAAgBM,EAAAA,EAAAA,KAC7CP,SACKS,EAAAA,EAAAA,KAAYV,EAAIC,EAAGC,SAAUO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC3DR,GAAUc,EAAAA,EAAAA,KAAOP,EAAIC,EAAIC,GACzB,MACF,KAAK,EACHF,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,KAAGU,EAAAA,EAAAA,KAAUP,aAAYS,EAAAA,EAAAA,KAAYV,EAAGE,cACjDH,EAAa,KAAGS,EAAAA,EAAAA,KAAUP,eAAcS,EAAAA,EAAAA,KACtCV,EACAE,SACKQ,EAAAA,EAAAA,KAAYV,EAAIC,EAAGC,SAAUO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC3DR,GAAUc,EAAAA,EAAAA,KAAOP,EAAIC,EAAIC,GACzB,MACF,KAAK,EACHF,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,OAC1CN,GAAIO,EAAAA,EAAAA,KAAOP,GAAIK,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,IAAM,OACtCJ,EAAIJ,EAASM,GACbL,EAAS,oBAAkBU,EAAAA,EAAAA,KAAUP,SAAQQ,EAAAA,EAAAA,KAAWT,EAAIC,MAC5DF,EAAa,KAAGY,EAAAA,EAAAA,KACdH,EAAAA,EAAAA,KAAUR,gBACCQ,EAAAA,EAAAA,KAAUP,SAAQQ,EAAAA,EAAAA,KAAWT,EAAIC,MAC9CR,EAAUO,EACV,MACF,KAAK,EACHA,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,OAC1CN,GAAIO,EAAAA,EAAAA,KAAOP,GAAIK,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,IAAM,OACtCJ,EAAIJ,EAASM,GACbL,EAAS,KAAGU,EAAAA,EAAAA,KAAUP,yBAAwBQ,EAAAA,EAAAA,KAAWT,EAAIC,MAC7DF,EAAa,KAAGS,EAAAA,EAAAA,KAAUP,eAAcU,EAAAA,EAAAA,KACtCH,EAAAA,EAAAA,KAAUR,WACJS,EAAAA,EAAAA,KAAWT,EAAIC,MACvBR,EAAUQ,EACV,MACF,KAAK,EACHD,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,KAAGY,EAAAA,EAAAA,KAAYV,EAAGE,wBAAyBO,EAAAA,EAAAA,KACjDT,EAAIE,EAAOD,MAEdF,EAAa,KAAGW,EAAAA,EAAAA,KAAYV,EAAGE,eAAgBS,EAAAA,EAAAA,KAC7CH,EAAAA,EAAAA,KAAUP,UACLS,EAAAA,EAAAA,KAAYV,EAAIC,EAAGC,SAAUO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC3DR,EAAUQ,EACV,MACF,KAAK,EACHD,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,qBAAmBY,EAAAA,EAAAA,KAAYV,EAAGE,QAASO,EAAAA,EAAAA,KACjDT,EAAIE,EAAOD,MAEdF,EAAa,KAAGY,EAAAA,EAAAA,KACdH,EAAAA,EAAAA,KAAUP,gBACCS,EAAAA,EAAAA,KAAYV,EAAGE,SAAUQ,EAAAA,EAAAA,KACpCV,EAAIC,EACJC,SACKO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC9BR,EAAUQ,EACV,MACF,KAAK,EACHD,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,KAAGY,EAAAA,EAAAA,KAAYV,EAAG,qBAAoBQ,EAAAA,EAAAA,KAC7CP,SACKQ,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC9BF,EAAa,KAAGW,EAAAA,EAAAA,KACdV,GACAW,EAAAA,EAAAA,KAAeH,EAAAA,EAAAA,KAAUN,iBACdM,EAAAA,EAAAA,KAAUP,SAAQS,EAAAA,EAAAA,KAC7BV,EAAIC,EACJC,SACKO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC9BR,EAAUS,EACV,MACF,KAAK,GACHF,GAAIK,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,KAAQ,GAAI,KAAKA,EAAAA,EAAAA,KAAQ,IAAK,MAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAC3DJ,GAAMG,EAAAA,EAAAA,KAAO,CAAC,GAAI,IAAK,MACvBJ,EAAIJ,EAASM,GACbL,EAAS,KAAGU,EAAAA,EAAAA,KAAUP,aAAYS,EAAAA,EAAAA,KAChCV,EACA,iBACKS,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC9BF,EAAa,KAAGS,EAAAA,EAAAA,KAAUP,eAAcS,EAAAA,EAAAA,KACtCV,GACAW,EAAAA,EAAAA,KAAeH,EAAAA,EAAAA,KAAUN,WACpBQ,EAAAA,EAAAA,KAAYV,EAAIC,EAAGC,SAAUO,EAAAA,EAAAA,KAAYT,EAAIE,EAAOD,MAC3DR,EAAUS,EAGVU,EAAAA,GAAAA,QAAkB/B,KAAKgC,aAAYf,GAAS,QAASgB,EAAAA,EAAAA,IAAiBjC,KAAMsB,KAChFY,EAAAA,EAAAA,IAAWlC,KAAMsB,EAAGV,GAChBmB,EAAAA,GAAAA,QACF/B,KAAKmC,eAAeb,GAAGc,OAASnB,EAChCjB,KAAKmC,eAAeb,GAAGe,aAAe,CAAC,CAAEpB,MAAOC,EAAWoB,OAAQ,KACnEtC,KAAKmC,eAAeb,GAAGV,QAAU,CAAE2B,OAAQ3B,EAAS4B,MAAO,CAAEC,QAAQC,EAAAA,EAAAA,KAAoC9B,IAAW+B,EAAAA,EAAAA,KAAqC/B,GAAW,EAAGgC,UAAUD,EAAAA,EAAAA,KAAqC/B,GAAW,EAAGiC,OAAO,EAAOC,mBAAoB,MAE5N,IAAxC9C,KAAKS,eAAesC,QAAQ9B,KAE9BjB,KAAKS,eAAeuC,KAAK/B,GACzBjB,KAAKU,iBAAiBsC,KAAK9B,GAC3BI,KAEFC,KAEF0B,EAAAA,EAAAA,KAAwBjD,OAE1BA,KAAKkD,0BAA4B,CAC/B,mBACA,EACA,gGAEFlD,KAAKmD,6BAA+B,CAAC,8B,gBCtMxB,SAASpD,IAItBC,KAAKH,MAAQ,GACbG,KAAKoD,YAAa,EAclBpD,KAAKC,SAAW,GAChBD,KAAKqD,mBAAqB,GAC1BrD,KAAKsD,aAAe,GACpBtD,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GACxBV,KAAKuD,QAAU,GACfvD,KAAKwD,kBAAoB,GACzBxD,KAAKmC,eAAiB,GACtBnC,KAAKyD,sBAAwB,GAK7BzD,KAAKI,QAAU,EACfJ,KAAKK,YAAc,EAKnBL,KAAK0D,mBAAoB,EACzB1D,KAAK2D,cAAgB,GACrB3D,KAAK4D,oBAAqB,EAC1B5D,KAAK6D,uBAAwB,EAC7B7D,KAAK8D,OAAS,EACd9D,KAAK+D,WAAa,EAClB/D,KAAKgE,kBAAmB,EACxBhE,KAAKiE,sBAAuB,EAC5BjE,KAAKkE,mBAAoB,EACzBlE,KAAKmE,uBAAwB,EAM7BnE,KAAKoE,QAAS,EACdpE,KAAKqE,gBAAkB,GAKvBrE,KAAKM,YAAc,GACnBN,KAAKsE,+BAAgC,EACrCtE,KAAKuE,qBAAsB,EAC3BvE,KAAKwE,MAAQ,GAEbxE,KAAKgC,YAAa,EAClBhC,KAAKyE,uBAAwB,EAE7BzE,KAAKkD,2BAA4B,EACjClD,KAAK0E,uBAAwB,EAC7B1E,KAAK2E,6BAA8B,EAEnC3E,KAAK4E,4BAA6B,EAClC5E,KAAK6E,wBAAyB,EAC9B7E,KAAKmD,8BAA+B,EAEpCnD,KAAK8E,4BAA6B,EAClC9E,KAAK+E,wBAAyB,EAC9B/E,KAAKgF,8BAA+B,EAMpChF,KAAKiF,cAAe,EAMpBjF,KAAKkF,eAAiB,GAEtBlF,KAAKO,gBAAkB,SAAU4E,KAQjCnF,KAAKoF,oBAAsB,SAAU9D,KAAM+D,GAC/B,IAAN/D,IAAStB,KAAKkF,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIzF,KAAKkF,eAAenC,QAAQuC,IAAmB,KAGjDtF,KAAKkF,eAAelC,KAAKsC,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/6e/6C30-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec, texNombre, miseEnEvidence, texFraction, nombreDeChiffresDansLaPartieEntiere, nombreDeChiffresDansLaPartieDecimale } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'AMCNum' // Question numérique\nexport const interactifReady = true\nexport const interactifType = 'numerique'\n\nexport const titre = 'Multiplications d’un nombre décimal par 10, 100 ou 1 000.'\n\n/**\n * Multiplication d'un nombre décimal dans différentes écritures par 10, 100, 1000\n *\n *  * Type 1 : écriture décimale\n *  * Type 2 : écriture fractionnaire\n *  * Type 3 : écritures fractionnaires et décimales\n *\n *  * Sup2 : avec ou sans calculs à trous\n * @author Rémi Angot\n* Référence 6C30-1\n  *\n */\nexport default function MultiplierDecimauxPar101001000 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Calculer.'\n  this.sup = 3\n  this.sup2 = false\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 8\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles = []; let typesDeQuestions\n    if (this.sup === 1 && !this.sup2) typesDeQuestionsDisponibles = [1, 2]\n    if (this.sup === 1 && this.sup2) { typesDeQuestionsDisponibles = [1, 2, 5, 6] }\n    if (this.sup === 2 && !this.sup2) typesDeQuestionsDisponibles = [3, 4]\n    if (this.sup === 2 && this.sup2) { typesDeQuestionsDisponibles = [3, 4, 3, 4, 7, 8, 9, 10] }\n    if (this.sup === 3 && !this.sup2) { typesDeQuestionsDisponibles = [1, 2, 3, 4] }\n    if (this.sup === 3 && this.sup2) { typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }\n\n    if (this.sup2) this.consigne = 'Calculer et compléter.'\n    let reponse\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const facteurs = combinaisonListes(\n      [10, 100, 1000],\n      this.nbQuestions\n    )\n\n    for (\n      let i = 0, texte, texteCorr, cpt = 0, a, b, den;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // a,abcd × 10\n          a = choice([randint(11, 99), randint(100, 999)])\n          a = calcul(a / choice([10, 100, 1000, 10000]))\n          b = facteurs[i]\n          texte = `$${texNombre(a)}\\\\times${texNombre(b)}=\\\\ldots$`\n          texteCorr = `$${texNombre(a)} \\\\times ${texNombre(\n            b\n          )} = ${texNombrec(a * b)}$`\n          reponse = calcul(a * b)\n          break\n        case 2: // 10 × a,abcd\n          a = choice([randint(11, 99), randint(100, 999)])\n          a = calcul(a / choice([10, 100, 1000, 10000]))\n          b = facteurs[i]\n          texte = `$${texNombre(b)}\\\\times${texNombre(a)}=\\\\ldots$`\n          texteCorr = `$${texNombre(b)} \\\\times ${texNombre(\n            a\n          )} = ${texNombrec(a * b)}$`\n          reponse = calcul(a * b)\n          break\n        case 3: // abcd/10 × 10\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$${texFraction(a, den)}\\\\times${texNombre(b)}=\\\\ldots$`\n          texteCorr = `$${texFraction(a, den)} \\\\times ${texNombre(\n            b\n          )} = ${texFraction(a * b, den)} = ${texNombrec((a / den) * b)}$`\n          reponse = calcul(a * b / den)\n          break\n        case 4: // 10 × abcd/10\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$${texNombre(b)}\\\\times${texFraction(a, den)}=\\\\ldots$`\n          texteCorr = `$${texNombre(b)} \\\\times ${texFraction(\n            a,\n            den\n          )} = ${texFraction(a * b, den)} = ${texNombrec((a / den) * b)}$`\n          reponse = calcul(a * b / den)\n          break\n        case 5: // .... × 10 = a,abcd\n          a = choice([randint(11, 99), randint(100, 999)])\n          a = calcul(a / choice([10, 100, 1000, 10000]))\n          b = facteurs[i]\n          texte = `$\\\\ldots \\\\times${texNombre(b)} = ${texNombrec(a * b)}$`\n          texteCorr = `$${miseEnEvidence(\n            texNombre(a)\n          )} \\\\times ${texNombre(b)} = ${texNombrec(a * b)}$`\n          reponse = a\n          break\n        case 6: // 10 × .... = a,abcd\n          a = choice([randint(11, 99), randint(100, 999)])\n          a = calcul(a / choice([10, 100, 1000, 10000]))\n          b = facteurs[i]\n          texte = `$${texNombre(b)} \\\\times \\\\ldots = ${texNombrec(a * b)}$`\n          texteCorr = `$${texNombre(b)} \\\\times ${miseEnEvidence(\n            texNombre(a)\n          )}  = ${texNombrec(a * b)}$`\n          reponse = b\n          break\n        case 7: // case 3 avec un trou sur l'entier\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$${texFraction(a, den)}\\\\times \\\\ldots = ${texNombrec(\n            (a / den) * b\n          )}$`\n          texteCorr = `$${texFraction(a, den)} \\\\times ${miseEnEvidence(\n            texNombre(b)\n          )} = ${texFraction(a * b, den)} = ${texNombrec((a / den) * b)}$`\n          reponse = b\n          break\n        case 8: // case 4 avec un trou sur l'entier\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$ \\\\ldots \\\\times${texFraction(a, den)}= ${texNombrec(\n            (a / den) * b\n          )}$`\n          texteCorr = `$${miseEnEvidence(\n            texNombre(b)\n          )} \\\\times ${texFraction(a, den)} = ${texFraction(\n            a * b,\n            den\n          )} = ${texNombrec((a / den) * b)}$`\n          reponse = b\n          break\n        case 9: // case 3 avec trou sur la fraction\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$${texFraction(a, '\\\\ldots')}\\\\times${texNombre(\n            b\n          )} = ${texNombrec((a / den) * b)}$`\n          texteCorr = `$${texFraction(\n            a,\n            miseEnEvidence(texNombre(den))\n          )} \\\\times ${texNombre(b)} = ${texFraction(\n            a * b,\n            den\n          )} = ${texNombrec((a / den) * b)}$`\n          reponse = den\n          break\n        case 10: // case 4 avec trou sur la fraction\n          a = choice([randint(11, 99), randint(100, 999), randint(2, 9)])\n          den = choice([10, 100, 1000])\n          b = facteurs[i]\n          texte = `$${texNombre(b)}\\\\times${texFraction(\n            a,\n            '\\\\ldots'\n          )} = ${texNombrec((a / den) * b)}$`\n          texteCorr = `$${texNombre(b)} \\\\times ${texFraction(\n            a,\n            miseEnEvidence(texNombre(den))\n          )} = ${texFraction(a * b, den)} = ${texNombrec((a / den) * b)}$`\n          reponse = den\n          break\n      }\n      if (context.isHtml && this.interactif) texte += '$~=$' + ajouteChampTexte(this, i)\n      setReponse(this, i, reponse)\n      if (context.isAmc) {\n        this.autoCorrection[i].enonce = texte\n        this.autoCorrection[i].propositions = [{ texte: texteCorr, statut: '' }]\n        this.autoCorrection[i].reponse = { valeur: reponse, param: { digits: nombreDeChiffresDansLaPartieEntiere(reponse) + nombreDeChiffresDansLaPartieDecimale(reponse) + 2, decimals: nombreDeChiffresDansLaPartieDecimale(reponse) + 1, signe: false, exposantNbChiffres: 0 } }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Types de calculs',\n    3,\n    '1 : Écriture décimale\\n2 : Écriture fractionnaire\\n3 : Écritures décimales et fractionnaires'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des calculs à trous']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","MultiplierDecimauxPar101001000","Exercice","this","consigne","sup","sup2","spacing","spacingCorr","nbQuestions","nouvelleVersion","parseInt","listeQuestions","listeCorrections","typesDeQuestions","reponse","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","facteurs","texte","texteCorr","a","b","den","i","cpt","choice","randint","calcul","texNombre","texNombrec","texFraction","miseEnEvidence","context","interactif","ajouteChampTexte","setReponse","autoCorrection","enonce","propositions","statut","valeur","param","digits","nombreDeChiffresDansLaPartieEntiere","nombreDeChiffresDansLaPartieDecimale","decimals","signe","exposantNbChiffres","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}