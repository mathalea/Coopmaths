{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5N14-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","amcReady","amcType","interactifType","interactifReady","description","Eq_resolvantes_Thales","Exercice","this","debug","nbQuestions","sup","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","tailleDiaporama","video","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","equalOrNot","f","fEqOrNot","num","den","k","egalite","justification","fracEqualOrNot","bool","n","d","f1","f2","fraction","calcul","frac","showFracNumDenDec","texNombre2","justifyEq","strOut","texteEnCouleur","Number","isInteger","texFraction","randint","choice","numLowInt","denLowInt","fLowInt","fEqOrNotLowInt","numBigInt","denBigInt","fBigInt","fEqOrNotBigInt","numDec","denDec","fDec","fEqOrNotDec","masterChoice","enonces","push","enonce","question","correction","autoCorrection","propositions","statut","options","ordered","interactif","propositionsQcm","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/46433.00da636740d772ff264e.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { fraction } from '../../modules/fractions.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListesSansChangerOrdre, calcul, texNombre2, texteEnCouleur } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Fractions égales et égalité des produits en croix'\n\nexport const amcReady = true\nexport const amcType = 1\nexport const interactifType = 'qcm'\nexport const interactifReady = true\n\nexport const description = 'Déterminer si une égalité de deux fractions est vraie en utilisant les produits en croix.<br> 4 niveaux : petits entiers, grands entiers, décimaux, mélange.'\n\n/**\n * * Fractions et égalité des produits en croix\n * * 5N14-3\n * * publication initiale le 23/05/2021\n * * modification le jj/mm/aaaa pour ....\n * @author Sébastien Lozano\n */\nexport default function Eq_resolvantes_Thales () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.titre = titre\n  this.debug = false\n  if (this.debug) {\n    this.nbQuestions = 4\n  } else {\n    this.nbQuestions = 4\n  };\n  this.sup = 1 // Niveau de difficulté\n  \tthis.consigne = 'Les égalités suivantes sont-elles vraies ? Justifier.'\n\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestionsDisponibles = []\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [0, 1, 2, 3]\n    } else {\n      typesDeQuestionsDisponibles = [0, 1, 2, 3]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // const listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // On a besoin d'un booléen pour que tout ne soit pas vrai ou faux\n      let equalOrNot\n      // On a besoin de variables opur les fractions\n      let f, fEqOrNot\n      // On a besoin d'un numerateur d'un dénominateur et d'un coefficient pour les fractions égales\n      let num, den, k\n      // On a besoin d'un string pour stocker l'égalité et un autre pour la justification\n      let egalite, justification\n      /**\n\t\t\t * Une fonction pour rendre deux fractions égales ou pas\n\t\t\t * @param {boolean} bool\n\t\t\t * @returns deux fractions egales ou non\n\t\t\t */\n      function fracEqualOrNot (bool, n, d) {\n        // On a besoin de deux fractions\n        let f1, f2\n        f1 = fraction(n, d)\n        if (bool) {\n          f2 = fraction(calcul(n * k), calcul(d * k))\n        } else {\n          f2 = fraction(calcul(n + k), calcul(d + k))\n        }\n        return { frac: f1, fracEqualOrNot: f2 }\n      }\n      /**\n\t\t\t * Une fonction pour afficher des fraction avec num et/ou den décimaux\n\t\t\t * @param num le numerateur de type number\n\t\t\t * @param den le dénominateur de type number\n\t\t\t */\n      function showFracNumDenDec (num, den) {\n        const f = fraction(num, den)\n        return `\\\\dfrac{${texNombre2(f.num)}}{${texNombre2(f.den)}}`\n      }\n\n      /**\n\t\t\t * Une fonction pour la correction\n\t\t\t * @param bool le booléen pour savoir si il y a égalité ou pas\n\t\t\t * @param f une fraction\n\t\t\t * @param fEqOrNot l'autre fraction égale ou pas\n\t\t\t */\n      function justifyEq (bool, f, fEqOrNot) {\n        let strOut\n        if (bool) {\n          strOut = `Les produits en croix sont égaux :<br>\n\t\t\t\t\t${texNombre2(f.num)}$\\\\times$${texNombre2(fEqOrNot.den)} ${texteEnCouleur('$=$')} ${texNombre2(f.den)}$\\\\times$${texNombre2(fEqOrNot.num)}<br>\t\t\t\t\t\n\t\t\t\t\t`\n          if (Number.isInteger(f.num)) {\n            strOut += `Les fractions $${f.texFraction}$ et $${fEqOrNot.texFraction}$ sont donc égales.`\n          } else {\n            strOut += `Les fractions $${showFracNumDenDec(f.num, f.den)}$ et $${showFracNumDenDec(fEqOrNot.num, fEqOrNot.den)}$ sont donc égales.`\n          }\n        } else {\n          strOut = `Les produits en croix ne sont pas égaux :<br>\n\t\t\t\t\t${texNombre2(f.num)}$\\\\times$${texNombre2(fEqOrNot.den)} ${texteEnCouleur('$\\\\neq$')} ${texNombre2(f.den)}$\\\\times$${texNombre2(fEqOrNot.num)}<br>\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t`\n          if (Number.isInteger(f.num)) {\n            strOut += `Les fractions $${f.texFraction}$ et $${fEqOrNot.texFraction}$ ne sont donc pas égales.`\n          } else {\n            strOut += `Les fractions $${showFracNumDenDec(f.num, f.den)}$ et $${showFracNumDenDec(fEqOrNot.num, fEqOrNot.den)}$ ne sont donc pas égales.`\n          }\n        }\n        return strOut\n      }\n      k = randint(2, 9)\n      // On prépare tous les contenus selon le type de questions\n      this.sup = Number(this.sup) // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !\n      switch (this.sup) {\n        case 1: // petits entiers égalité\n          equalOrNot = choice([true, false])\n          num = randint(1, 9)\n          den = randint(2, 9, num)\n          egalite = `\n\t\t\t\t\t$${fracEqualOrNot(equalOrNot, num, den).frac.texFraction}\\\\overset{?}{=}${fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot.texFraction}$`\n          justification = justifyEq(equalOrNot, fracEqualOrNot(equalOrNot, num, den).frac, fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot)\n          break\n        case 2: // grands entiers\n          equalOrNot = choice([true, false])\n          num = randint(11, 99)\n          den = randint(11, 99, num)\n          egalite = `\n\t\t\t\t\t$${fracEqualOrNot(equalOrNot, num, den).frac.texFraction}=${fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot.texFraction}$`\n          justification = justifyEq(equalOrNot, fracEqualOrNot(equalOrNot, num, den).frac, fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot)\n          break\n        case 3: // décimaux\n          equalOrNot = choice([true, false])\n          num = calcul(randint(11, 99) * 0.1)\n          den = calcul(randint(11, 99, num) * 0.1)\n          f = fracEqualOrNot(equalOrNot, num, den).frac\n          fEqOrNot = fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot\n          egalite = `\n\t\t\t\t\t$${showFracNumDenDec(f.num, f.den)}=${showFracNumDenDec(fEqOrNot.num, fEqOrNot.den)}$`\n          justification = justifyEq(equalOrNot, fracEqualOrNot(equalOrNot, num, den).frac, fracEqualOrNot(equalOrNot, num, den).fracEqualOrNot)\n          break\n        case 4: // mélange\n          equalOrNot = choice([true, false])\n          const numLowInt = randint(2, 9)\n          const denLowInt = randint(2, 9, numLowInt)\n          const fLowInt = fracEqualOrNot(equalOrNot, numLowInt, denLowInt).frac\n          const fEqOrNotLowInt = fracEqualOrNot(equalOrNot, numLowInt, denLowInt).fracEqualOrNot\n          const numBigInt = randint(11, 99)\n          const denBigInt = randint(11, 99, numBigInt)\n          const fBigInt = fracEqualOrNot(equalOrNot, numBigInt, denBigInt).frac\n          const fEqOrNotBigInt = fracEqualOrNot(equalOrNot, numBigInt, denBigInt).fracEqualOrNot\n          const numDec = calcul(randint(11, 99) * 0.1)\n          const denDec = calcul(randint(11, 99, numDec) * 0.1)\n          const fDec = fracEqualOrNot(equalOrNot, numDec, denDec).frac\n          const fEqOrNotDec = fracEqualOrNot(equalOrNot, numDec, denDec).fracEqualOrNot\n          const masterChoice = choice([\n            { equalOrNot: equalOrNot, num: numLowInt, den: denLowInt, k: k, f: fLowInt, fEqOrNot: fEqOrNotLowInt },\n            { equalOrNot: equalOrNot, num: numBigInt, den: denBigInt, k: k, f: fBigInt, fEqOrNot: fEqOrNotBigInt },\n            { equalOrNot: equalOrNot, num: numDec, den: denDec, k: k, f: fDec, fEqOrNot: fEqOrNotDec }\n          ])\n          egalite = ''\n          if (Number.isInteger(masterChoice.num)) {\n            egalite += `$${masterChoice.f.texFraction}=${masterChoice.fEqOrNot.texFraction}$`\n          } else {\n            egalite += `$${showFracNumDenDec(masterChoice.f.num, masterChoice.f.den)}=${showFracNumDenDec(masterChoice.fEqOrNot.num, masterChoice.fEqOrNot.den)}$`\n          }\n          justification = justifyEq(equalOrNot, masterChoice.f, masterChoice.fEqOrNot)\n          break\n      };\n\n      const enonces = []\n      for (let k = 0; k < 4; k++) {\n        enonces.push({\n          enonce: egalite,\n          question: '',\n          correction: justification\n        })\n      };\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 1:\n          texte = `${enonces[1].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[2].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[2].correction}`\n          };\n          break\n        case 3:\n          texte = `${enonces[3].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[3].correction}`\n          };\n          break\n      };\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n\t\t\t  {\n          texte: 'L\\'égalité est vraie',\n          statut: equalOrNot\n\t\t\t  },\n\t\t\t  {\n          texte: 'L\\'égalité est fausse',\n          statut: !equalOrNot\n\t\t\t  },\n\t\t\t  {\n          texte: 'Je ne sais pas',\n          statut: false\n\t\t\t  }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de nombres', 4, '1 : Petits entiers\\n2 : Grands entiers\\n3 : Décimaux\\n4 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}