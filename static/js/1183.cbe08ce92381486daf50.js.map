{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43-3.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ExerciceVraiFauxDivisibleMultipleDiviseur","justification","N","a","booleen","result","sommeDesChiffres","toString","calcul","texNombre","Math","floor","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","qcmDisponible","modeQcm","nouvelleVersion","parseInt","sup2","qcm","ordered","lastChoices","listeQuestions","listeCorrections","typeDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","listeDeNDisponibles","listeDeN","texte","texteCorr","i","cpt","randint","autoCorrection","enonce","propositions","statut","options","replace","interactif","propositionsQcm","indexOf","push","tabrep","tabicone","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","interactifObligatoire","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","feedback","type","querySelectorAll","uicheck","classList","add","espace","context","undefined","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"uPAKO,MAAMA,GAAW,EACXC,EAAS,EACTC,GAAkB,EAClBC,EAAQ,+CAON,SAASC,IAgBtB,SAASC,EAAeC,EAAGC,EAAGC,GAC5B,IAAIC,EAuBJ,OAtBgB,IAAZD,IAEAC,EADQ,IAANH,EACO,8DACM,IAANA,EACA,gDACM,IAANA,GAAiB,IAANA,EACV,wCAAsCI,SAAiBH,EAAEI,gBAAeC,UAAOF,SAAiBH,EAAEI,wCAAwCL,MAE1I,WAASO,SAAUN,QAAQD,aAAYM,SAAOL,EAAID,SAGhD,IAAZE,IAEAC,EADQ,IAANH,EACO,oEACM,IAANA,EACA,sDACM,IAANA,GAAiB,IAANA,EACV,wCAAsCI,SAAiBH,EAAEI,gBAAeC,UAAOF,SAAiBH,EAAEI,8CAA8CL,MAEhJ,WAASO,SAAUN,QAAQD,YAAYQ,KAAKC,MAAMR,EAAID,OAAOC,EAAID,OAGxEG,EAvCTO,eAAcC,MACdA,KAAKd,MAAQA,EACbc,KAAKjB,SAAWA,EAChBiB,KAAKhB,QAAUA,EACfgB,KAAKf,gBAAkBA,EACvBe,KAAKC,SAAW,iEAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,IAAM,EACXL,KAAKM,gBAAkB,IACvBN,KAAKO,MAAQ,GACbP,KAAKQ,eAAgB,EACrBR,KAAKS,SAAU,EA6BfT,KAAKU,gBAAkB,WACrBV,KAAKK,IAAMM,SAASX,KAAKK,KACzBL,KAAKY,KAAOD,SAASX,KAAKY,MAC1BZ,KAAKa,IAAM,CAAC,SAAU,GAAI,+CAAgD,EAAG,CAAEC,SAAS,EAAMC,YAAa,IAE3Gf,KAAKgB,eAAiB,GACtBhB,KAAKiB,iBAAmB,GAExB,IAAIC,EAA6B,CAAC,YAAa,gBAAiB,cAAe,aAAc,iBAAkB,eAAgB,kBAAmB,sBAAuB,qBACrKlB,KAAKE,YAAc,IACrBgB,EAA6B,EAACC,SAAO,CAAC,YAAa,kBAAmB,eAAeA,SAAO,CAAC,aAAc,mBAAoB,gBAAgBA,SAAO,CAAC,kBAAmB,sBAAuB,wBAEnM,MAAMC,GAAuBC,SAAkBH,EAA4BlB,KAAKE,aAChF,IAAIoB,EACa,IAAbtB,KAAKK,MACPiB,EAAsB,CAAC,EAAG,IAEX,IAAbtB,KAAKK,MACPiB,EAAsB,CAAC,EAAG,EAAG,EAAG,IAEjB,IAAbtB,KAAKK,MACPiB,EAAsB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KAE5C,MAAMC,GAAWF,SAAkBC,EAAqBtB,KAAKE,aAC7D,IAAK,IAAWsB,EAAOC,EAAWpC,EAAGC,EAA5BoC,EAAI,EAA2BC,EAAM,EAAGD,EAAI1B,KAAKE,aAAeyB,EAAM,IAAK,CAqBlF,OAnBAtC,EAAIkC,EAASG,GACbpC,GAAIsC,SAAQ,IAAK,KAAOvC,EACxBW,KAAK6B,eAAeH,GAAK,GACzB1B,KAAK6B,eAAeH,GAAGI,OAAU,GAAEN,MACnCxB,KAAK6B,eAAeH,GAAGK,aAAe,CACpC,CACEP,MAAO,MACPQ,QAAQ,GAEV,CACER,MAAO,MACPQ,QAAQ,GAEV,CACER,MAAO,iBACPQ,QAAQ,IAGZhC,KAAK6B,eAAeH,GAAGO,QAAU,CAAEnB,SAAS,GACpCM,EAAqBM,IAC3B,IAAK,YACHF,EAAS,IAAGnC,2BAA0BO,SAAUN,OAChDmC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,gBACHR,EAAS,KAAG5B,SAAUN,0BAA0BD,MAChDoC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,cACHR,EAAS,KAAG5B,SAAUN,2BAA2BD,MACjDoC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,aACH1C,IAAKsC,SAAQ,EAAGvC,EAAI,GACpBmC,EAAS,IAAGnC,2BAA0BO,SAAUN,OAChDmC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,iBACH1C,IAAKsC,SAAQ,EAAGvC,EAAI,GACpBmC,EAAS,KAAG5B,SAAUN,0BAA0BD,MAChDoC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,eACH1C,IAAKsC,SAAQ,EAAGvC,EAAI,GACpBmC,EAAS,KAAG5B,SAAUN,2BAA2BD,MACjDoC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,kBACHR,EAAS,KAAG5B,SAAUN,2BAA2BD,MACjDoC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAc,8BAA6BpC,2BAA0BO,SAAUN,MAC/EmC,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,sBACHR,EAAS,IAAGnC,0BAAyBO,SAAUN,OAC/CmC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAc,+BAA6B7B,SAAUN,0BAA0BD,KAC/EoC,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAChD,MACF,IAAK,oBACHR,EAAS,IAAGnC,2BAA0BO,SAAUN,OAChDmC,EAAYD,EAAMU,QAAQ,IAAK,KAAO,UACtCT,GAAc,8BAA6BnC,0BAA0BD,KACrEoC,GAAarC,EAAcC,EAAGC,GAAG,GACjCU,KAAK6B,eAAeH,GAAGK,aAAa,GAAGC,QAAS,EAGhDhC,KAAKmC,aACPX,GAAS,QAASY,QAAgBpC,KAAM0B,GAAGF,QAED,IAAxCxB,KAAKgB,eAAeqB,QAAQb,KAE9BxB,KAAKgB,eAAesB,KAAKd,GACzBxB,KAAKiB,iBAAiBqB,KAAKb,GAC3BzB,KAAKa,IAAI,GAAGyB,KAAK,CAAE,GAAEd,aA9GrBe,UAAQC,YAiHRd,KAEFC,KAEFc,SAAwBzC,OAG1BA,KAAK0C,0BAA4B,CAAC,uBAAwB,EAAG,+H,6BChLhD,SAAS3C,IAEtBC,KAAKd,MAAQ,GACbc,KAAKC,SAAW,GAChBD,KAAK2C,mBAAqB,GAC1B3C,KAAKgB,eAAiB,GACtBhB,KAAKiB,iBAAmB,GACxBjB,KAAK4C,aAAe,GACpB5C,KAAK6C,QAAU,GACf7C,KAAK8C,kBAAoB,GACzB9C,KAAKE,YAAc,GACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAK+C,QAAU,EACf/C,KAAKgD,YAAc,EACnBhD,KAAKiD,QAAS,EAEdjD,KAAK0C,2BAA4B,EACjC1C,KAAKkD,uBAAwB,EAC7BlD,KAAKmD,6BAA8B,EACnCnD,KAAKoD,oBAAqB,EAC1BpD,KAAKqD,uBAAwB,EAC7BrD,KAAKsD,kBAAmB,EACxBtD,KAAKuD,sBAAuB,EAC5BvD,KAAKwD,mBAAoB,EACzBxD,KAAKyD,uBAAwB,EAC7BzD,KAAK0D,+BAAgC,EACrC1D,KAAK2D,qBAAsB,EAC3B3D,KAAKO,MAAQ,GACbP,KAAK4D,YAAa,EAClB5D,KAAKM,gBAAkB,GAMvBN,KAAK6D,mBAAoB,EACzB7D,KAAKmC,YAAa,EAClBnC,KAAK8D,uBAAwB,EAC7B9D,KAAKa,KAAM,EACXb,KAAKQ,eAAgB,EACrBR,KAAKS,SAAU,EACfT,KAAK6B,eAAiB,GACtB7B,KAAK+D,sBAAwB,GAC7B/D,KAAKgE,cAAe,EACpBhE,KAAKU,gBAAkB,SAAUuD,KACjCjE,KAAKkE,cAAgB,G,6ICzChB,SAASC,EAAaC,GAC3BC,SAASC,iBAAiB,qBAAqB,KAE7CC,EAAE,gBAAgBC,WAElB,MAEMC,EAASJ,SAASK,cAAe,YAAWN,EAASH,kBACvDQ,GACFA,EAAOH,iBAAiB,SAASK,IAC/B,IAAK,IAAIjD,EAAI,EAAGA,EAAI0C,EAASlE,YAAawB,IAAK,CAE7C,IAGIkD,EAHAC,EAAmB,EACnBC,EAAsB,EACtBC,EAA4B,EAGhC,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAASvC,eAAeH,GAAGK,aAAakD,OAAQD,IAC9DZ,EAASvC,eAAeH,GAAGK,aAAaiD,GAAGhD,QAAQ+C,IAEzD,MAAMG,EAAmBb,SAASK,cAAe,mBAAkBN,EAASH,kBAAkBvC,KAC9F0C,EAASvC,eAAeH,GAAGK,aAAaoD,SAAQ,CAACC,EAAaC,KAC5D,MAAMC,EAAQjB,SAASK,cAAe,WAAUN,EAASH,kBAAkBvC,KAAK2D,KAC1EE,EAAQlB,SAASK,cAAe,WAAUN,EAASH,kBAAkBvC,KAAK2D,KAC5ED,EAAYpD,QACdsD,EAAME,MAAMC,gBAnBN,2BAoBFF,EAAMG,UACRb,IACAD,EAAiBS,KAEQ,IAAlBE,EAAMG,UACfJ,EAAME,MAAMC,gBA1BL,yBA2BPX,IACAF,EAAiBS,MAGrB,IAAIM,EAAe,WACS,IAAxBb,GAA6BD,IAAqBE,EACpDG,EAAiBU,UAAY,MAE7BV,EAAiBU,UAAY,KAC7BD,EAAe,SAEjBT,EAAiBM,MAAMK,SAAW,QAC9BjB,GAAkB,IACpBkB,OAAgB,CACdC,GAAK,aAAY3B,EAASH,kBAAkBvC,IAC5CF,MAAO4C,EAASvC,eAAeH,GAAGK,aAAa6C,GAAgBoB,SAC/DC,KAAMN,IAIKtB,SAAS6B,iBAAkB,kBAAiB9B,EAASH,kBAC7DkB,SAAQ,SAAUgB,GACzBA,EAAQC,UAAUC,IAAI,gBAExB5B,EAAO2B,UAAUC,IAAI,kBAatB,SAASjE,EAAiBgC,EAAU1C,GACzC0C,EAASlF,MAAQ,aACjB,IAAIsC,EAAQ,GACRC,EAAY,GACZ6E,EAAS,GAeb,GAbEA,EADEC,YACO,SAEA,eAGgCC,IAAvCpC,EAASvC,eAAeH,GAAGO,QACxBmC,EAASvC,eAAeH,GAAGO,QAAQnB,UACtCsD,EAASvC,eAAeH,GAAGK,cAAe0E,SAAcrC,EAASvC,eAAeH,GAAGK,aAAcqC,EAASvC,eAAeH,GAAGO,QAAQyE,aAGtItC,EAASvC,eAAeH,GAAGK,cAAe0E,SAAcrC,EAASvC,eAAeH,GAAGK,cAqChF,SAA0BA,GAC/B,IAAI4E,GAAkB,EACtB,IAAK,IAAIjF,EAAI,EAAGA,EAAIK,EAAakD,OAAS,EAAGvD,IAC3C,IAAK,IAAIkF,EAAIlF,EAAI,EAAGkF,EAAI7E,EAAakD,QAC/BlD,EAAaL,GAAGF,QAAUO,EAAa6E,GAAGpF,OAE5CmF,GAAkB,EACd5E,EAAaL,GAAGM,OAClBD,EAAa8E,OAAOD,EAAG,GACd7E,EAAa6E,GAAG5E,QAEzBD,EAAa8E,OAAOD,EAAG,GACvB7E,EAAaL,GAAGM,QAAS,GAEzBD,EAAa8E,OAAOD,EAAG,IAGzBA,IApDNE,CAAgB1C,EAASvC,eAAeH,GAAGK,eACtCwE,WAAe,CACdA,YACF/E,GAAU,yBAAwB4C,EAASH,kBAAkBvC,MAE7DF,GAAS,OAEX,IAAK,IAAIuF,EAAM,EAAGA,EAAM3C,EAASvC,eAAeH,GAAGK,aAAakD,OAAQ8B,IAClER,YACF/E,GAAU,6BAA4B4C,EAASH,sGACqBG,EAASH,kBAAkBvC,KAAKqF,sCAC5E3C,EAASH,kBAAkBvC,KAAKqF,MAAQ3C,EAASvC,eAAeH,GAAGK,aAAagF,GAAKvF,MAAQ8E,8BAGrH9E,GAAU,iBAAgB4C,EAASvC,eAAeH,GAAGK,aAAagF,GAAKvF,QAAU8E,EAE/ElC,EAASvC,eAAeH,GAAGK,aAAagF,GAAK/E,OAC/CP,GAAc,sBAAqB2C,EAASvC,eAAeH,GAAGK,aAAagF,GAAKvF,QAAU8E,EAE1F7E,GAAc,iBAAgB2C,EAASvC,eAAeH,GAAGK,aAAagF,GAAKvF,QAAU8E,EAGrFC,cACF/E,GAAU,4BAA2B4C,EAASH,kBAAkBvC,aAChEF,GAAU,wBAAuB4C,EAASH,kBAAkBvC,qBAGhE,MAAO,CAAEF,MAAOA,EAAOC,UAAWA,GA+D7B,SAASuF,EAAkB5C,EAAU1C,GAAG,MAAEF,EAAQ,GAAV,WAAcyF,EAAa,GAA3B,OAA+BC,GAAS,EAAxC,QAA8CC,GAAU,GAAS,IAC9G,OAAIZ,YACM,uBAAsBW,EAAS,SAAW,uDAEzC1F,uCACc2F,EAAU,6DAA+D,uBAAuB/C,EAASH,kBAAkBvC,qBACxIuF,4CACmB7C,EAASH,kBAAkBvC,qCAIjD,GAUJ,SAAS0F,EAAYhD,EAAU1C,EAAGpC,GAAG,OAAC+H,EAAS,EAAV,SAAaC,EAAW,EAAxB,MAA2BC,GAAQ,EAAnC,qBAA0CC,EAAuB,EAAjE,eAAoEC,GAAiB,EAArF,OAA4FC,EAAS,GAAK,SACjHlB,IAA/BpC,EAASvC,eAAeH,KAC1B0C,EAASvC,eAAeH,GAAK,SAEY8E,IAAvCpC,EAASvC,eAAeH,GAAGiG,UAC7BvD,EAASvC,eAAeH,GAAGiG,QAAU,IAEvCvD,EAASvC,eAAeH,GAAGiG,QAAQC,OAAStI,EAC5C8E,EAASvC,eAAeH,GAAGiG,QAAQC,OAAS,CAAEP,SAAQC,WAAUC,QAAOC,uBAAsBC,iBAAgBC,UAGxG,SAASG,EAAoBzD,GACT,IAArBA,EAASpF,SA1DR,SAA4BoF,GACjCC,SAASC,iBAAiB,qBAAqB,KAC7C,MAAMG,EAASJ,SAASK,cAAe,YAAWN,EAASH,kBACvDQ,GACFA,EAAOH,iBAAiB,SAASK,IAGGP,EAASlE,YAC3C,IAAK,MAAMwB,KAAK0C,EAASvC,eAAgB,CACvC,MAAMqD,EAAmBb,SAASK,cAAe,mBAAkBN,EAASH,kBAAkBvC,KAE1F2C,SAASyD,eAAgB,eAAc1D,EAASH,kBAAkBvC,KAAKqG,MAAMC,WAAW,IAAK,MAAQ5D,EAASvC,eAAeH,GAAGiG,QAAQC,OAAOlI,WAAWsI,WAAW,IAAK,IAC5K9C,EAAiBU,UAAY,KAG7BV,EAAiBU,UAAY,KAG/BV,EAAiBM,MAAMK,SAAW,eAwCdoC,CAAkB7D,GACrB,IAArBA,EAASpF,SAAemF,EAAYC,GACf,IAArBA,EAASpF,SAAemF,EAAYC,K,4BC7N1C,SAAS8D,EAAYC,GAEnB,MAAsB,WAAlBA,EAAOC,OACD,8KAE+BD,EAAOjJ,4BAE1CiJ,EAAOE,oBAGS,YAAlBF,EAAOC,OACD,2KAE0BD,EAAOjJ,4BAErCiJ,EAAOE,oBAGS,SAAlBF,EAAOC,OACD,uKAE8BD,EAAOjJ,4BAEzCiJ,EAAOE,yBALb,EAeK,SAASC,EAAoBH,GAClC,IAAII,EAAY,GACI,wBAAhBJ,EAAOK,KACTD,EAAYL,EAAW,CACrBhJ,MAAO,yCACPmJ,QAAU,iBAAgBF,EAAO/D,iHACjCgE,OAAQ,WAEe,aAAhBD,EAAOK,KAChBD,EAAYL,EAAW,CACrBhJ,MAAO,sCACPmJ,QAAU,sPAEVD,OAAQ,YAEe,gBAAhBD,EAAOK,OAChBD,EAAYL,EAAW,CACrBhJ,MAAO,yCACPmJ,QAAU,sPAEVD,OAAQ,aAGZ/D,SAASyD,eAAe,mBAAmBlC,UAAY2C,EACvDlE,SAASyD,eAAe,uBAAuBxD,iBAAiB,SAAS,WACvED,SAASyD,eAAe,mBAAmBW,YASxC,SAAS3C,GAAiB,GAAEC,EAAF,MAAMvE,EAAQ,GAAd,KAAkByE,EAAO,SAAY,IAEpE,GAAIF,GAAMvE,EAAO,CACf,MAAMkH,EAAQ,2BAA0B3C,gBAFtBE,GAAQ,6DAEgGF,uCACpHvE,cAEN6C,SAASyD,eAAe/B,GAAIH,UAAY8C,EACxCrE,SAASyD,eAAgB,iBAAgB/B,KAAMzB,iBAAiB,SAAS,WACvED,SAASyD,eAAgB,kBAAiB/B,KAAM0C,a","file":"js/1183.cbe08ce92381486daf50.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, sommeDesChiffres, calcul, texNombre, randint, choice } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\nexport const titre = 'Diviseur, multiple, divisible - Vrai ou faux'\n\n/**\n * Vrai ou faux sur les notions de diviseur ou multiple\n * @Auteur Rémi Angot\n * Référence 6N43-3\n*/\nexport default function ExerciceVraiFauxDivisibleMultipleDiviseur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = 'Pour chaque affirmation, indiquer si elle est vraie ou fausse.'\n  this.nbQuestions = 5\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté \n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  function justification (N, a, booleen) {\n    let result\n    if (booleen === true) {\n      if (N === 2) {\n        result = ', car son chiffre des unités est $0$, $2$, $4$, $6$ ou $8$.'\n      } else if (N === 5) {\n        result = ', car son chiffre des unités est $0$, ou $5$.'\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui est divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${calcul(a / N)}$.`\n      }\n    }\n    if (booleen === false) {\n      if (N === 2) {\n        result = \", car son chiffre des unités n'est pas $0$, $2$, $4$, $6$ ou $8$.\"\n      } else if (N === 5) {\n        result = \", car son chiffre des unités n'est pas $0$, ou $5$.\"\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui n'est pas divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${Math.floor(a / N)}+ ${a % N}$.`\n      }\n    }\n    return result\n  }\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.qcm = ['6N43-3', [], 'Diviseur, multiple, divisible - Vrai ou faux', 1, { ordered: true, lastChoices: 2 }]\n    let tabrep, tabicone\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let typeDeQuestionsDisponibles = ['Ndiviseur', 'divisibleParN', 'multipleDeN', 'NdiviseurF', 'divisibleParNF', 'multipleDeNF', 'NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers']\n    if (this.nbQuestions < 8) {\n      typeDeQuestionsDisponibles = [choice(['Ndiviseur', 'divisibleParN']), 'multipleDeN', choice(['NdiviseurF', 'divisibleParNF']), 'multipleDeNF', choice(['NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers'])]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let listeDeNDisponibles\n    if (this.sup === 1) {\n      listeDeNDisponibles = [2, 5]\n    }\n    if (this.sup === 2) {\n      listeDeNDisponibles = [2, 3, 5, 9]\n    }\n    if (this.sup === 3) {\n      listeDeNDisponibles = [7, 11, 13, 20, 30, 25]\n    }\n    const listeDeN = combinaisonListes(listeDeNDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, N, a, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      N = listeDeN[i]\n      a = randint(199, 999) * N\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'Ndiviseur':\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'divisibleParN':\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'multipleDeN':\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'NdiviseurF':\n          a += randint(1, N - 1)\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'NdiviseurEnvers':\n          texte = `$${texNombre(a)}$ est un diviseur de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${N}$ est un diviseur de $${texNombre(a)}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNEnvers':\n          texte = `$${N}$ est divisible par $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${texNombre(a)}$ est divisible par $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNEnvers':\n          texte = `$${N}$ est un multiple de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${a}$ est un multiple de $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        this.qcm[1].push([`${texte}.\\\\\\\\ \\n `,\n          tabrep,\n          tabicone])\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    \n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, '1 : Critères de divisibilité par 2 et 5\\n2 : Critères de divisibilité par 2, 3, 5 et 9\\n3 : Sans critères de divisibilité']\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}