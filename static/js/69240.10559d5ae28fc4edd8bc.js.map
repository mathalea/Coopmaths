{"version":3,"file":"js/69240.10559d5ae28fc4edd8bc.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, choice, shuffle } from '../../modules/outils.js'\nimport { point, segment, polygone, codageAngleDroit, codeSegments, mathalea2d } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'qcmMult' // QCM\nexport const interactifReady = true\nexport const interactifType = 'qcm'\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @author Rémi Angot\n * Référence 6G33\n*/\nexport default function ReconnaitreQuadrilatereParticulier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true\n  context.isHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (this.interactif) this.consigne = 'Cocher toutes les réponses possibles.'\n\n    const listeDeQuestions = shuffle([choice(['losange1', 'losange2']), choice(['rectangle1', 'rectangle2']), choice(['carre1', 'carre2', 'carre3'])])\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = ''\n      texteCorr = ''\n      let A, B, C, D, O, ABCD, codage, codage1, codage2, codage3, sAC, sBD, marquesDemiDiagonales, marquesDemiDiagonales1, marquesDemiDiagonales2, marquesCotes\n      switch (listeDeQuestions[i]) {\n        case 'losange1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\"\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          // codage = codageAngleDroit(C, O, B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'losange2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\"\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, B)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales1 = codeSegments('|', 'blue', O, A, O, C)\n          marquesDemiDiagonales2 = codeSegments('|||', 'blue', O, B, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, codage, sAC, sBD, marquesDemiDiagonales1, marquesDemiDiagonales2) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'rectangle1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\"\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'rectangle2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\"\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          // codage1 = codageAngleDroit(A,B,C);\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'carre1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\"\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\"\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, D)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre3':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\"\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(A, B, C)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n      }\n      // if (this.modeQcm && !context.isAmc) {\n      //   if (texteCorr.lastIndexOf('\\n') > 0) {\n      //     texteCorr = texteCorr.substring(0, texteCorr.lastIndexOf('\\n'))\n      //   }\n      //   this.tableauSolutionsDuQcm[i] = tabicone\n      //   texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n      //   texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      // }\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Losange',\n          statut: false,\n          feedback: 'Tous les losanges ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n        },\n        {\n          texte: 'Rectangle',\n          statut: false,\n          feedback: 'Tous les rectangles ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n\n        },\n        {\n          texte: 'Carré',\n          statut: false,\n          feedback: 'Tous les carrés ont 4 angles droits, ce sont donc aussi des rectangles. Tous les carrés ont 4 côtés de même longueur, ce sont donc aussi des losanges.'\n\n        },\n        {\n          texte: 'Trapèze',\n          statut: false\n        },\n        {\n          texte: 'Parallélogramme',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: true,\n        lastChoice: 5\n      }\n      if (listeDeQuestions[i] === 'losange1' || listeDeQuestions[i] === 'losange2') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'rectangle1' || listeDeQuestions[i] === 'rectangle2') {\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'carre1' || listeDeQuestions[i] === 'carre2' || listeDeQuestions[i] === 'carre3') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[2].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n// function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n// }\n\n// Référence 6C23\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","ReconnaitreQuadrilatereParticulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","context","correctionDetaillee","nouvelleVersion","listeQuestions","listeCorrections","interactif","listeDeQuestions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","codageAngleDroit","segment","pointilles","autoCorrection","enonce","propositions","statut","feedback","options","ordered","lastChoice","propositionsQcm","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}