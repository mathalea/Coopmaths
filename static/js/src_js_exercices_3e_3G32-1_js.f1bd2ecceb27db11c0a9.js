/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_3e_3G32-1_js"],{

/***/ "./src/js/exercices/3e/3G32-1.js":
/*!***************************************!*\
  !*** ./src/js/exercices/3e/3G32-1.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"amcReady\": () => (/* binding */ amcReady),\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Calculs_trigonometriques1)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n/* harmony import */ var _modules_3d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../modules/3d.js */ \"./src/js/modules/3d.js\");\n\n\n\n\n\nconst amcReady = true\n\nconst titre = 'Calcul d’un parallèle terrestre'\n\n/**\n * propose de calculer la longueur d'un parallèle terrestre à partir de la latitde\n * @Auteur Jean-Claude Lhote\n * Référence 3G32-1 \n*/\nfunction Calculs_trigonometriques1() {\n    _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n    this.titre = titre;\n    this.consigne = \"\";\n    this.nb_questions = 1;\n    this.nb_cols = 1; // Uniquement pour la sortie LaTeX\n    this.nb_cols_corr = 1; // Uniquement pour la sortie LaTeX\n    this.tailleDiaporama = 100; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n    this.video = \"\" // Id YouTube ou url\n    this.spacing_corr = 2\n    this.spacing = 2\n    this.QCM_disponible=false\n\tthis.ModeQCM=false;\n\n    this.nouvelle_version = function () {\n        this.QCM=['3G32-1',[],\"Calcul d'un parallèle terrestre\",3,{}]\n        this.liste_questions = []; // Liste de questions\n        this.liste_corrections = []; // Liste de questions corrigées\n        let alfa, baita, alpha, O, H, M, R, R2, Axe, normalV, normalH, P, HP, Sph, OP, PoleNord, PoleSud, objets = []\n        if (sortie_html) {\n            alfa = 'α'\n            baita = 'β'\n        }\n        else {\n            alfa = '\\\\alpha'\n            baita = '\\\\beta'\n        }\n\n        for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {\n            // Boucle principale où i+1 correspond au numéro de la question\n\n            objets = []\n            alpha = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(30, 60)\n            O = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.point3d)(0, 0, 0, false, 'O')\n            M = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.point3d)(5, 0, 0, true, 'M')\n            PoleNord = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.point3d)(0, 0, 5, false, 'N')\n            PoleSud = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.point3d)(0, 0, -5, false, 'S')\n            R = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.vecteur3d)(O, M)\n            Axe = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.arete3d)(PoleSud, PoleNord)\n            normalV = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.vecteur3d)(0, 0, 1)\n            M = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.rotationV3d)(M, normalV, mathalea.anglePerspective)\n            M.p2d.nom = 'M'\n            normalH = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.rotationV3d)(R, normalV, 90)\n            P = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.rotationV3d)(M, normalH, -alpha)\n            P.p2d.nom = 'P'\n            H = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.point3d)(0, 0, P.z3d, false)\n            R2 = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.vecteur3d)(H, P)\n            H.p2d.nom = 'H'\n            Sph = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.sphere3d)(O, 5, 1, 3)\n            HP = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.arete3d)(H, P)\n            OP = (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.arete3d)(O, P)\n            objets.push(Sph, Axe.p2d, HP.p2d, OP.p2d, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codageAngleDroit)(P.p2d, H.p2d, O.p2d), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.tracePoint)(H.p2d, P.p2d, O.p2d, M.p2d), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.labelPoint)(H.p2d, P.p2d, O.p2d, M.p2d))\n            objets.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.demicercle3d)(H, normalV, R2, 'caché', 'red', 0), (0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.demicercle3d)(H, normalV, R2, 'visible', 'red', 0))\n            objets.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.arete3d)(O, M).p2d)\n            objets.push((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.afficheMesureAngle)(M.p2d, O.p2d, P.p2d, 'black', 1.5, `${alpha}`))\n            texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: -8, ymin: -6, xmax: 8, ymax: 6, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n            texte += `Quelle est la longueur du $${alpha}$e parallèle Nord ?`\n            texte_corr = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: -8, ymin: -6, xmax: 8, ymax: 6, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n            texte_corr += `Considérons que le $${alpha}$e parallèle Nord est un cercle. Soit $H$ le centre de ce cercle situé sur l'axe de rotation de la terre.<br>`\n            texte_corr += `Les segments $[HP]$ et $[OM]$ sont parallèles, donc les angles alternes-internes $\\\\widehat{MOP}$ et $\\\\widehat{OPH}$ sont égaux.<br>`\n            texte_corr += `Dans le triangle $OPH$ rectangle en $H$, $\\\\cos(\\\\widehat{OPH})=\\\\dfrac{HP}{OP}$ d'où $HP=OP\\\\times \\\\cos(\\\\widehat{OPH})$.<br>`\n            texte_corr += `Le rayon de la terre étant approximativement de $6400$ km, nous pouvons calculer $HP$ :<br>`\n            texte_corr += `$HP=6400\\\\times \\\\cos(${alpha})\\\\approx ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(6400 * Math.cos(alpha * Math.PI / 180))}$ km.<br>`\n            texte_corr += `Calculons maintenant la longueur $L$ du $${alpha}$e parallèle : $L\\\\approx 2\\\\times \\\\pi\\\\times ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(6400 * Math.cos(alpha * Math.PI / 180))}\\\\approx ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(2 * Math.PI * 6400 * Math.cos(alpha * Math.PI / 180))}$ km.<br>`\n\n            if (this.liste_questions.indexOf(texte) == -1) {\n                // Si la question n'a jamais été posée, on en crée une autre\n                this.liste_questions.push(texte);\n                this.liste_corrections.push(texte_corr);\n                i++;\n                this.QCM[1].push([texte,[texte_corr],[3]])\n            }\n            cpt++;\n        }\n        (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n    };\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/3e/3G32-1.js?");

/***/ })

}]);