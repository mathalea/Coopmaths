{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G20.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","NommerEtCoderDesPolygones","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","Xmin","Xmax","Ymin","Ymax","sc","g","carreaux","listeQuestions","listeCorrections","params","context","liste","combinaisonListes","texte","texteCorr","i","cpt","pol","polcode","polsom","polnom","choisirPolygone","n","A","B","C","D","nom","creerNomDePolygone","pnom","q","p","pcode","enonce","point","randint","rotation","polygone","barycentre","listePoints","nommePolygone","codeSegments","codeAngle","similitude","codageAngleDroit","carre","translation","vecteur","homothetie","length","Math","floor","min","x","y","ceil","max","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","parseInt","seyes","epaisseur","mathalea2d","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/37888.427d6ce1f66c697a3eab.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, creerNomDePolygone } from '../../modules/outils.js'\nimport { point, barycentre, vecteur, polygone, carre, nommePolygone, translation, rotation, homothetie, similitude, codageAngleDroit, codeSegments, codeAngle, grille, seyes, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Nommer et coder des polygones'\n\n/**\n * @author Jean-Claude Lhote\n * Placer les sommets et les égalités de longueur...\n * Référence 6G20\n */\nexport default function NommerEtCoderDesPolygones () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Nommer les figures en fonction de l'énoncé puis ajouter le codage.\"\n  this.nbQuestions = 4\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 3\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, sc, g, carreaux\n    const ppc = 40\n    if (context.isHtml) {\n      sc = 0.5\n    } else {\n      sc = 0.4\n    }\n\n    let params\n\n    const liste = combinaisonListes([1, 2, 3, 4, 5, 6, 7, 8], this.nbQuestions)\n\n    for (\n      let i = 0, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      context.pixelsParCm = 40\n      let pol, polcode, polsom, polnom\n      function choisirPolygone (n) { // n compris entre 1 et 8 (1 à 4 pour un triangle, 5 à 8 pour une quadrilatère)\n        let A, B, C, D\n        const nom = creerNomDePolygone(4, 'PQ'); let pnom; let q; let p; let pcode; let enonce\n        switch (n) {\n          case 1: // triangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, randint(25, 80), nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est isocèle en $${nom[0]}$.<br>`\n            break\n          case 2: // triangle équilatéral\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 60, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C, B, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est équilatéral.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 3: // triangle rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = similitude(B, A, 90, randint(30, 100) / 100, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = codageAngleDroit(B, A, C)\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle en $${nom[0]}$.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 4: // triangle rectangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 90, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codageAngleDroit(B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle et isocèle en $${nom[0]}$.`\n            break\n          // on choisit un quadrilatère\n          case 5: // carré\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            q = carre(A, B)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, B, C, C, D, D, A), codageAngleDroit(B, A, D), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un carré.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 6: // rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = similitude(A, B, -90, randint(30, 80) / 100, nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, C, D), codeSegments('|', 'red', C, B, A, D), codageAngleDroit(B, A, C), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un rectangle et $${nom[0] + nom[1]}$ est sa longueur.`\n            break\n          case 7: // losange\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = rotation(A, B, randint(100, 150), nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('O', 'blue', A, B, B, C, C, D, D, A), codeAngle(C, D, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(C, B, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(B, C, D, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(D, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un losange et [$${nom[0] + nom[2]}$] est sa plus grande diagonale.`\n            break\n          case 8: // trapèze rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            D = similitude(B, A, 90, randint(30, 80) / 100, nom[3])\n            C = translation(D, homothetie(vecteur(A, B), A, randint(30, 80) / 100), nom[2])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codageAngleDroit(B, A, D), codageAngleDroit(C, D, A)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un trapèze rectangle de grande base $${nom[0] + nom[1]}$ de hauteur $${nom[0] + nom[3]}$.`\n            break\n        }\n        return [p, nom, pcode, pnom, enonce]\n      }\n      [pol, polnom, polcode, polsom, texte] = choisirPolygone(liste[i])\n      if (pol.listePoints.length === 4) {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) + 1)\n      } else {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) + 1)\n      }\n      params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: ppc,\n        scale: sc\n      }\n      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (parseInt(this.sup === 2)) {\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        carreaux = ''\n      }\n\n      pol.epaisseur = 2\n      texte += '<br>' + mathalea2d(params, pol, polnom, g, carreaux)\n      texteCorr = mathalea2d(params, pol, polnom, polcode, polsom, g, carreaux)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    context.pixelsParCm = 20\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de cahier',\n    3,\n    '1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}