{"version":3,"file":"js/10210.32d29211bf7843d9cf53.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/beta/beta3G41.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint } from '../../modules/outils.js'\nimport { mathalea2d } from '../../modules/2d.js'\nimport { cube } from '../../modules/3d.js'\n\nexport const titre = 'Représentation de solides'\n\n/**\n* Vue de dessus, face et côté\n* @author Erwan DUPLESSY\n* 3G41\n* mars 2021\n* Source : http://cache.media.education.gouv.fr/file/Geometrie_et_espace/47/1/RA16_C4_MATH_geo_espace_flash_567471.pdf\n* Dessiner vue de face, côté, dessus d'un empilement de cubes\n*/\n\nexport default function VuesEmpilementCubes () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 1 // Ici le nombre de questions\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.sup = 1 // A décommenter : valeur par défaut d'un premier paramètre\n  this.sup2 = 1 // A décommenter : valeur par défaut d'un deuxième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const typesDeQuestionsDisponibles = [parseInt(this.sup)] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let objetsEnonce, objetsCorrection, paramsEnonce, paramsCorrection\n\n    function empilementCubes (long, larg, hmax) {\n      const tabHauteurs = new Array(larg)\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i] = new Array(long)\n      }\n      // premiere ligne\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][0] = randint(0, 1)\n      }\n      // deuxième ligne et suivantes\n      for (let i = 0; i < larg; i++) {\n        for (let j = 1; j < long; j++) {\n          tabHauteurs[i][j] = Math.min(tabHauteurs[i][j - 1] + randint(0, 2), hmax)\n        }\n      }\n      // Vérification Dernière Ligne : ne pas être vide.\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][long - 1] = Math.max(1, tabHauteurs[i][long - 1])\n      }\n      // Ajoute les cubes dans un tableau une dimension\n      // il faut trier les cubes : x décroissant puis y décroissant, puis z croissant\n      const lstCoordonneesCubes = []\n      for (let i = larg - 1; i > -1; i = i - 1) {\n        for (let j = long - 1; j > -1; j = j - 1) {\n          for (let k = 0; k < tabHauteurs[i][j]; k++) { lstCoordonneesCubes.push([i, j, k]) }\n        }\n      }\n      return lstCoordonneesCubes\n    }\n\n    const longueur = 2 + parseInt(this.sup2) // longueur de l'empilement\n    const largeur = longueur // largeur de l'empilement\n    const hauteur = longueur // hauteur de l'empilement\n\n    for (let q = 0, texte, texteCorr, cpt = 0; q < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objetsCorrection = [] // Idem pour la correction\n\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n\n      let L, alpha, beta, cosa, cosb, sina, sinb\n\n      // ...cube(x,y,z,0,-90) : vue de haut\n      // ...cube(x,y,z,90,0) : vue de gauche\n      // ...cube(x,y,z,0,0) : vue de droite\n      // ...cube(x,y,z,45,-35) : vue isométrique\n\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          // GAUCHE\n          alpha = 15\n          beta = -30\n          texte += 'Solide 1 : dessiner la vue de gauche (les faces grises) de cet empilement de cubes. <br>'\n          L = empilementCubes(longueur, largeur, hauteur)\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          // correction :\n          texteCorr += 'Solide 1 : vue de gauche (les faces grises) : '\n          alpha = 90\n          beta = 0\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n\n          // FACE\n          texte += 'Solide 2 : dessiner la vue de face (les faces vertes) de cet empilement de cubes. <br>'\n          L = empilementCubes(longueur, largeur, hauteur)\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          alpha = 15\n          beta = -30\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          // correction :\n          texteCorr += 'Solide 2 : vue de face (les faces vertes) : '\n          alpha = 0\n          beta = 0\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n\n          // HAUT\n          texte += 'Solide 3 : dessiner la vue de haut (les faces blanches) de cet empilement de cubes. <br>'\n          L = empilementCubes(longueur, largeur)\n          alpha = 15\n          beta = -30\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          alpha = 15\n          beta = -30\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          // correction :\n          texteCorr += 'Solide 3 : vue de haut (les faces blanches) : '\n          alpha = 0\n          beta = -90\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n          break\n\n        case 2:\n          texte += 'Dessiner les vues de haut (les faces blanches), de face (les faces vertes), et de gauche (les faces grises) de cet empilement de cubes. <br>'\n          L = empilementCubes(longueur, largeur)\n          alpha = 15\n          beta = -30\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          alpha = 30\n          beta = -25\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n\n          // correction :\n          texteCorr += 'Vue de haut (les faces blanches) : '\n          alpha = 0\n          beta = -90\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n\n          texteCorr += 'Vue de droite (les faces vertes) : '\n          alpha = 0\n          beta = 0\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n\n          texteCorr += 'Vue de gauche (les faces grises) : '\n          alpha = 90\n          beta = 0\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(...cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}).c2d)\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        q++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  this.besoinFormulaireNumerique = ['Type de questions', 2, '1 : un solide et ses trois vues\\n 2 : on demande une vue par solide']\n  this.besoinFormulaire2Numerique = [\"Taille de l'empilement\", 5, '3 \\n4 \\n5 \\n6 \\n7']\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n"],"names":["titre","VuesEmpilementCubes","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","parseInt","listeTypeDeQuestions","combinaisonListes","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","empilementCubes","long","larg","hmax","tabHauteurs","Array","i","randint","j","Math","min","max","lstCoordonneesCubes","k","push","longueur","largeur","hauteur","texte","texteCorr","q","cpt","L","alpha","beta","cosa","cosb","sina","sinb","length","cube","c2d","cos","PI","sin","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique"],"sourceRoot":""}