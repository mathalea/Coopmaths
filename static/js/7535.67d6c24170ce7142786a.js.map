{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N22-1.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Rapports_sur_un_segment","type_de_questions_disponibles","Exercice","this","beta","nbQuestions","consigne","nbCols","nbColsCorr","sortieHtml","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","sing_plur","nombre","singulier","pluriel","rayon","entier_max","m","randint","n","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","y_enonce","noms_choix","noms","length","situations","Math","min","max","rapport","rapport_inverse","fig","mathalea2d","fraction","representation","segment_corr1","longueur_corr1","m_color_corr","n_color_corr","fig_corr1","segment_corr2","longueur_corr2","fig_corr2","enonces","k","push","enonce","question","correction","texFractionSimplifiee","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/7535.67d6c24170ce7142786a.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,combinaisonListesSansChangerOrdre} from '../../modules/outils.js'\nimport {mathalea2d} from '../../modules/2d.js'\nimport{fraction} from '../../modules/Fractions.js'\nexport const titre = 'Rapport de deux longueurs sur un segment'\n\n/** \n * * Exprimer un rapport de longueurs sur un segment\n * * 6N22-1\n * @author Sébastien Lozano\n */\n\nexport default function Rapports_sur_un_segment() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.beta = false;\n  if (this.beta) {\n    this.nbQuestions = 2;\n  } else {\n    this.nbQuestions = 2;\n  };\n\n  this.titre = titre;\n  this.consigne = `Sur tous les axes, les graduations sont régulières.`;\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  sortieHtml ? this.spacing = 3 : this.spacing = 2;\n  sortieHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5;\n\n  let type_de_questions_disponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      type_de_questions_disponibles = [0, 1];\n    } else {\n      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);      \t\t\t\n      type_de_questions_disponibles = [0, 1];\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    //let listeTypeDeQuestions  = combinaisonListes(type_de_questions_disponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour le singulier pluriel\n      function sing_plur(nombre, singulier, pluriel) {\n        if (nombre > 1) {\n          return pluriel\n        } else {\n          return singulier\n        };\n      };\n\n      // on choisit deux entiers pour former les fractions\n      let entier_max = 9;\n      let m = randint(1, entier_max);\n      let n = randint(1, entier_max, m); // on évite l'autre pour éviter la fraction 1\n      let params = {\n        xmin: -0.4,\n        ymin: -2,\n        xmax: 15 * entier_max,// pour éviter un cadrage trop large\n        ymax: 1,\n        pixelsParCm: 20,\n        scale: 1,\n      }\n      // on colle la figure à l'énoncé\n      let y_enonce = -1.2;\n\n      // on a parfois des figure trop petites ou trop grandes\n      //\n      let rayon;\n      rayon = 5;\n      // if (m<n) {\n      //   rayon = 15\n      // } else {\n      //   rayon = 15/Math.ceil(m/n)\n      // };\n\n      //on choisit de façon aléatoire un triplet de noms pour les points\n      let noms_choix = [['A', 'B', 'C'], ['D', 'E', 'F'], ['I', 'J', 'K'], ['L', 'M', 'N']]\n      let noms = noms_choix[randint(0, noms_choix.length - 1)];\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      let situations = [\n        {//case 0 --> m < n\n          m: Math.min(m, n),\n          n: Math.max(m, n),\n          rapport: `\\\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,\n          rapport_inverse: `\\\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,\n          fig: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, 0, rayon, 0, 'segment', '', noms[0], noms[1], 1, noms[2]),\n          ),\n          segment_corr1: `\\\\textcolor{red}{[${noms[0] + noms[2]}]}`,\n          longueur_corr1: `\\\\textcolor{red}{${noms[0] + noms[2]}}`,\n          m_color_corr: `\\\\textcolor{red}{${Math.min(m, n)}}`,\n          n_color_corr: `\\\\textcolor{blue}{${Math.max(m, n)}}`,\n          fig_corr1: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, y_enonce, rayon, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2]),\n          ),\n          segment_corr2: `\\\\textcolor{blue}{[${noms[0] + noms[1]}]}`,\n          longueur_corr2: `\\\\textcolor{blue}{${noms[0] + noms[1]}}`,\n          fig_corr2: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, y_enonce, (Math.min(m, n) / Math.max(m, n)) * rayon, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1]),\n          )\n        },\n        {//case 1 --> m > n\n          m: Math.max(m, n),\n          n: Math.min(m, n),\n          rapport: `\\\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,\n          rapport_inverse: `\\\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,\n          fig: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, 0, 5, 0, 'segment', '', noms[0], noms[1], 1, noms[2]),\n          ),\n          segment_corr1: `\\\\textcolor{red}{[${noms[0] + noms[2]}]}`,\n          longueur_corr1: `\\\\textcolor{red}{${noms[0] + noms[2]}}`,\n          m_color_corr: `\\\\textcolor{red}{${Math.max(m, n)}}`,\n          n_color_corr: `\\\\textcolor{blue}{${Math.min(m, n)}}`,\n          fig_corr1: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, y_enonce, 5, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2]),\n          ),\n          segment_corr2: `\\\\textcolor{blue}{[${noms[0] + noms[1]}]}`,\n          longueur_corr2: `\\\\textcolor{blue}{${noms[0] + noms[1]}}`,\n          fig_corr2: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, y_enonce, (Math.max(m, n) / Math.min(m, n)) * 5, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1]),\n          )\n        },\n\n      ];\n\n      let enonces = [];\n      for (let k = 0; k < situations.length; k++) {\n        enonces.push({\n          enonce: `\n          Exprimer les rapports suivants $${situations[k].rapport}$ et $${situations[k].rapport_inverse}$.\n          <br>\n          ${situations[k].fig}     \t\t\t\n\t\t\t\t\t`,\n          question: ``,\n          correction: `\n          Les graduations étant régulières, comptons le nombre de graduations pour chaque segment :<br>\n          ${situations[k].fig_corr1}<br>\n          Le segment $${situations[k].segment_corr1}$ compte $${situations[k].m_color_corr}$ ${sing_plur(situations[k].m, 'graduation', 'graduations')}.<br>\n          ${situations[k].fig_corr2}<br>\n          Le segment $${situations[k].segment_corr2}$ compte $${situations[k].n_color_corr}$ ${sing_plur(situations[k].n, 'graduation', 'graduations')}.<br><br>\n          Donc $\\\\dfrac{${situations[k].longueur_corr2}}{${situations[k].longueur_corr1}}=\\\\dfrac{${situations[k].n_color_corr}}{${situations[k].m_color_corr}}$\n          et $\\\\dfrac{${situations[k].longueur_corr1}}{${situations[k].longueur_corr2}}=\\\\dfrac{${situations[k].m_color_corr}}{${situations[k].n_color_corr}}$<br><br>\n          $\\\\textbf{D'où $\\\\mathbf{${situations[k].rapport}=}${fraction(situations[k].n, situations[k].m).texFractionSimplifiee}$ et $\\\\mathbf{${situations[k].rapport_inverse}=}${fraction(situations[k].m, situations[k].n).texFractionSimplifiee}$}$<br>\n\n\t\t\t\t\t`\n        });\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texte += `             `\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n        case 1:\n          texte = `${enonces[1].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[1].correction}`;\n          };\n          break;\n        case 2:\n          texte = `${enonces[2].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[2].correction}`;\n          };\n          break;\n        case 3:\n          texte = `${enonces[3].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[3].correction}`;\n          };\n          break;\n        case 4:\n          texte = `${enonces[4].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[4].correction}`;\n          };\n          break;\n      };\n\n      if (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n\n  }\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  //this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\t\n};\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}