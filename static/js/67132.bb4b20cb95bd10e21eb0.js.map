{"version":3,"file":"js/67132.bb4b20cb95bd10e21eb0.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6D13.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/can/6e/can6D04.js"],"sourcesContent":["import { context } from '../../modules/context'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif'\nimport { calcul, contraindreValeur, listeQuestionsToContenu, randint, sp, texteEnCouleur } from '../../modules/outils'\nimport Exercice from '../Exercice'\nexport const titre = 'Convertir en min vers h et min ou en s vers min et s'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\nexport default function ConversionHeuresMinutesOuMinutesEtSecondes (can = false) {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = false\n  this.sup = 1\n  this.nouvelleVersion = function () {\n    this.sup = contraindreValeur(1, 2, this.sup, 1)\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n    for (let i = 0, cpt = 0, a, b, d, texte, texteCorr; i < this.nbQuestions && cpt < 50;) {\n      a = randint(2, 4)\n      b = randint(10, 59)\n      d = calcul(a * 60 + b)\n      if (this.sup === 1) {\n        texte = `Convertir $${d}$ minutes en heures(h) et minutes(min) :` + ajouteChampTexteMathLive(this, 2 * i, 'largeur10 inline', { texte: sp(5), texteApres: ' h ' }) +\n        ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur10 inline', { texte: sp(5), texteApres: ' min ' })\n      } else {\n        texte = `Convertir $${d}$ secondes en minutes(min) et secondes(s) :` + ajouteChampTexteMathLive(this, 2 * i, 'largeur10 inline', { texte: sp(5), texteApres: ' min ' }) +\n        ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur10 inline', { texte: sp(5), texteApres: ' s ' })\n      }\n      if (can) {\n        if (this.sup === 1) {\n          texteCorr = texteEnCouleur(`\n    <br> Mentalement : <br>\nOn cherche le multiple de $60$ inférieur à $${d}$ le plus grand possible. C'est $${Math.floor(d / 60)}\\\\times 60 = ${Math.floor(d / 60) * 60}$.<br>\nAinsi $${d} = ${Math.floor(d / 60) * 60} + ${d % 60}$ donc $${d}$min $= ${Math.floor(d / 60)}$h$${d % 60}$min.`) + '<br>'\n        } else {\n          texteCorr = texteEnCouleur(`\n          <br> Mentalement : <br>\n      On cherche le multiple de $60$ inférieur à $${d}$ le plus grand possible. C'est $${Math.floor(d / 60)}\\\\times 60 = ${Math.floor(d / 60) * 60}$.<br>\n      Ainsi $${d} = ${Math.floor(d / 60) * 60} + ${d % 60}$ donc $${d}$s $= ${Math.floor(d / 60)}$min$${d % 60}$s.`) + '<br>'\n        }\n      } else {\n        if (this.correctionDetaillee) {\n          texteCorr = `On doit effectuer la division euclidienne de ${d} par 60 car il y a 60 minutes dans une heure.<br>Le quotient entier donne le nombre d'heures et le reste enter donne le nombre de minutes.<br>`\n        } else {\n          texteCorr = ''\n        }\n      }\n      if (this.sup === 1) {\n        texteCorr += `$${d} = ${a} \\\\times 60 + ${b}$ donc $${d}$ minutes = ${a}h ${b}min.`\n      } else {\n        texteCorr += `$${d} = ${a} \\\\times 60 + ${b}$ donc $${d}$ s = ${a}min ${b}s.`\n      }\n      if (this.questionJamaisPosee(i, a, b, d)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        if (context.isAmc) {\n          if (this.sup === 1) {\n            this.autoCorrection[i] = {\n              enonce: texte,\n              options: { multicols: true },\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    texte: texteCorr,\n                    statut: '',\n                    reponse: {\n                      texte: 'Heure(s)',\n                      valeur: a,\n                      param: {\n                        digits: 1,\n                        decimals: 0,\n                        signe: false,\n                        approx: 0\n                      }\n                    }\n                  }]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    texte: '',\n                    statut: '',\n                    reponse: {\n                      texte: 'Minute(min)',\n                      valeur: b,\n                      param: {\n                        digits: 2,\n                        decimals: 0,\n                        signe: false,\n                        approx: 0\n                      }\n                    }\n                  }]\n                }\n              ]\n            }\n          } else {\n            this.autoCorrection[i] = {\n              enonce: texte,\n              options: { multicols: true },\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    texte: texteCorr,\n                    statut: '',\n                    reponse: {\n                      texte: 'Minutes(min)',\n                      valeur: a,\n                      param: {\n                        digits: 1,\n                        decimals: 0,\n                        signe: false,\n                        approx: 0\n                      }\n                    }\n                  }]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    texte: '',\n                    statut: '',\n                    reponse: {\n                      texte: 'Secondes(s)',\n                      valeur: b,\n                      param: {\n                        digits: 2,\n                        decimals: 0,\n                        signe: false,\n                        approx: 0\n                      }\n                    }\n                  }]\n                }\n              ]\n            }\n          }\n        } else {\n          setReponse(this, 2 * i, a)\n          setReponse(this, 2 * i + 1, b)\n        }\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'unité de départ', 2, '1 : Minutes\\n2 : Secondes']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import ConversionHeuresMinutesOuMinutesEtSecondes from '../../6e/6D13.js'\nexport const titre = 'Convertir minutes<->heures ou secondes<->minutes'\nexport { interactifReady, interactifType, amcReady, amcType } from '../../6e/6D13.js'\n\n/*!\n * Alias de 6D13.js\n * @author Jean-Claude Lhote\n * Créé pendant l'été 2021\n * Référence can6D04\n */\nexport default function ConvertirMinutesHeures () {\n  ConversionHeuresMinutesOuMinutesEtSecondes.call(this, true)\n  this.nbQuestions = 1\n  this.tailleDiaporama = 2\n  this.correctionDetaillee = true\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","ConversionHeuresMinutesOuMinutesEtSecondes","can","Exercice","this","nbQuestions","correctionDetailleeDisponible","correctionDetaillee","sup","nouvelleVersion","contraindreValeur","listeQuestions","listeCorrections","autoCorrection","a","b","d","texte","texteCorr","i","cpt","randint","calcul","ajouteChampTexteMathLive","sp","texteApres","texteEnCouleur","Math","floor","questionJamaisPosee","push","context","enonce","options","multicols","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","setReponse","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf","ConvertirMinutesHeures"],"sourceRoot":""}