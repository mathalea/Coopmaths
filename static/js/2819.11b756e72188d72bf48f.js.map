{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5G40.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Constructions_parallelogrammes","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","sup","correctionDetaillee","correctionDetailleeDisponible","typeExercice","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","celluleAlea","rang","lettreDepuisChiffre","randint","Number","toString","noms","choisitLettresDifferentes","type_de_question","parseInt","nom","objets_enonce","objets_correction","O","point","A","rotation","pointAdistance","calcul","choice","C","B","similitude","D","p","polygoneAvecNom","d1","segment","d2","d3","d4","c1","c4","dd1","droite","dd2","dd3","dd4","cellule","cellule2","cellule3","result","dansLaCibleCarree","x","y","result2","result3","cible","cibleCarree","num","taille","color","opacite","cible2","cible3","xMin","Math","min","yMin","xMax","max","yMax","P","animIEP","Alea2iep","recadre","styleExtremites","push","traceCompas","codeSegments","parallelogramme3sommetsConsecutifs","pointCreer","regleSegment","regleMasquer","crayonMasquer","tracePoint","parallelogramme2sommetsConsecutifsCentre","labelPoint","regleZoom","equerreZoom","parallelogrammeAngleCentre","texteParPoint","pointIntersectionCC","cercleCentrePoint","cercle","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","htmlBouton","umeroExercice","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/2819.11b756e72188d72bf48f.js","sourcesContent":["import Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, randint, calcul, choisitLettresDifferentes, lettreDepuisChiffre, choice } from '../../modules/outils.js'\nimport { cercleCentrePoint, cercle, codeSegments, pointAdistance, pointIntersectionLC, texteParPosition, pointIntersectionCC, point, labelPoint, similitude, polygoneAvecNom, tracePoint, texteParPoint, homothetie, droite, segment, traceCompas, dansLaCibleCarree, cibleCarree, rotation, longueur, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Construire des parallélogrammes avec dispositif d’auto-correction'\n\n/**\n * Terminer la construction d'un parallélogramme\n * Ref 5G40\n * @Auteur Jean-Claude Lhote (exercice) et Rémi Angot (animations)\n * Publié le 30/11/2020\n */\nexport default function Constructions_parallelogrammes () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 5\n  this.correctionDetaillee = false\n  this.correctionDetailleeDisponible = true\n  this.typeExercice = 'IEP'\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let texte = ''\n    let texteCorr = ''\n    const celluleAlea = function (rang) {\n      const lettre = lettreDepuisChiffre(randint(1, rang))\n      const chiffre = Number(randint(1, rang)).toString()\n      return lettre + chiffre\n    }\n    // On prépare la figure...\n    const noms = choisitLettresDifferentes(5, 'QO', true) // on choisit 5 lettres, les 4 premières sont les sommets, la 5e est le centre\n    let type_de_question\n    if (this.sup < 5) type_de_question = parseInt(this.sup)\n    else type_de_question = randint(1, 4)\n    const nom = `${noms[0] + noms[1] + noms[2] + noms[3]}`\n    const objets_enonce = []\n    const objets_correction = []\n    // Préparation de la figure aléatoire et des objets 2d utiles\n    const O = point(0, 0, noms[4])\n    const A = rotation(pointAdistance(O, calcul(randint(50, 70) / 10)), O, randint(0, 179) * choice([-1, 1]), noms[0])\n    const C = rotation(A, O, 180, noms[2])\n    const B = similitude(A, O, randint(40, 80) * choice([-1, 1]), randint(4, 7, 5) * choice([-1, 1]) / 5, noms[1])\n    const D = rotation(B, O, 180, noms[3])\n    const p = polygoneAvecNom(A, B, C, D)\n    const d1 = segment(O, A)\n    const d2 = segment(O, B)\n    const d3 = segment(O, C)\n    const d4 = segment(O, D)\n    const c1 = segment(A, B)\n    const c2 = segment(B, C)\n    const c3 = segment(C, D)\n    const c4 = segment(D, A)\n    const dd1 = droite(A, B)\n    const dd2 = droite(A, D)\n    const dd3 = droite(C, D)\n    const dd4 = droite(C, B)\n    const cellule = celluleAlea(5)\n    const cellule2 = celluleAlea(5)\n    const cellule3 = celluleAlea(5)\n\n    const result = dansLaCibleCarree(C.x, C.y, 5, 0.5, cellule)\n    const result2 = dansLaCibleCarree(D.x, D.y, 5, 0.5, cellule2)\n    const result3 = dansLaCibleCarree(B.x, B.y, 5, 0.5, cellule3)\n\n    const cible = cibleCarree({ x: result[0], y: result[1], rang: 5, num: 1, taille: 0.5 })\n    cible.color = 'gray'\n    cible.opacite = 0.7\n    const cible2 = cibleCarree({ x: result2[0], y: result2[1], rang: 5, num: 2, taille: 0.5 })\n    cible2.color = 'gray'\n    cible2.opacite = 0.7\n    const cible3 = cibleCarree({ x: result3[0], y: result3[1], rang: 5, num: 3, taille: 0.5 })\n    cible3.color = 'gray'\n    cible3.opacite = 0.7\n    const xMin = Math.min(A.x, B.x, C.x, D.x) - 3\n    const yMin = Math.min(A.y, B.y, C.y, D.y) - 3\n    const xMax = Math.max(A.x, B.x, C.x, D.x) + 3\n    const yMax = Math.max(A.y, B.y, C.y, D.y) + 3\n\n    let P\n    const animIEP = new Alea2iep()\n    animIEP.recadre(xMin, yMax) // Il faut recadrer en première étape pour bien calculer les coordonnées des points\n\n    switch (type_de_question) {\n      case 1: // deux côtés consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texteCorr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correctionDetaillee) {\n          texteCorr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texteCorr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texteCorr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texteCorr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texteCorr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n\n        c1.styleExtremites = '-|'\n        c4.styleExtremites = '|-'\n        P = polygoneAvecNom(D, A, B)\n        objets_enonce.push(c1, c4, P[1], cible)\n        objets_correction.push(p[0], p[1], cible, traceCompas(D, C, 30), traceCompas(B, C, 30), codeSegments('||', 'red', A, B, D, C), codeSegments('///', 'blue', A, D, B, C))\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        break\n      case 2: // trois sommets consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texteCorr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correctionDetaillee) {\n          texteCorr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texteCorr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texteCorr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texteCorr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texteCorr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n        P = polygoneAvecNom(D, A, B)\n        animIEP.pointCreer(D, D.nom, 0)\n        animIEP.pointCreer(A, A.nom, 0)\n        animIEP.pointCreer(B, B.nom, 0)\n        animIEP.regleSegment(D, A)\n        animIEP.regleSegment(A, B)\n        animIEP.regleMasquer(0)\n        animIEP.crayonMasquer(0)\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        objets_enonce.push(tracePoint(A, B, D), P[1], cible)\n        objets_correction.push(p[0], p[1], cible, traceCompas(D, C, 30), traceCompas(B, C, 30), codeSegments('||', 'red', A, B, D, C), codeSegments('///', 'blue', A, D, B, C))\n\n        break\n      case 3: // deux sommmets consécutifs plus le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre $${noms[4]}$.`\n        texteCorr += `O est le centre de symétrie du parallélogramme $${nom}$.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Le point $${noms[3]}$ est le symétrique du point $${noms[1]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texteCorr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        P = polygoneAvecNom(O, A, B)\n        animIEP.parallelogramme2sommetsConsecutifsCentre(A, B, O)\n        objets_enonce.push(tracePoint(A, B, O), P[1], cible, cible2)\n        objets_correction.push(p[0], p[1], labelPoint(O), cible, cible2, d1, d2, d3, d4, codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D))\n\n        break\n      case 4: // Un angle formé par deux demi-droites et le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre ${noms[4]}.`\n        texte += `Le point $${noms[3]}$ est sur la demi-droite $[${noms[0]}x)$ et le point $${noms[1]}$ est sur la demi-droite $[${noms[0]}y)$.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `La symétrique de la droite $(${noms[0] + noms[1]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[1]})$.<br>`\n          texteCorr += `La symétrique de la droite $(${noms[0] + noms[3]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[3]})$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texteCorr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        animIEP.regleZoom(200)\n        animIEP.equerreZoom(200)\n        animIEP.parallelogrammeAngleCentre(D, A, B, O)\n        objets_enonce.push(dd1, dd2, tracePoint(O), labelPoint(O, A), texteParPoint('x', pointIntersectionCC(cercleCentrePoint(A, D), cercle(D, 0.5), 1)), texteParPoint('y', similitude(B, A, 4, 1.3)), cible, cible2, cible3)\n        objets_correction.push(dd1, dd2, dd3, dd4, p[0], p[1], tracePoint(O), labelPoint(O), cible, cible2, cible3, d1, d3, codeSegments('||', 'red', A, O, O, C))\n\n        break\n    }\n    texte += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objets_enonce)\n    texteCorr += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objets_correction)\n    texteCorr += animIEP.htmlBouton(this.umeroExercice)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 5, '1 : Deux côtés consécutifs\\n2 : Trois sommets consécutifs\\n3 : Deux sommets consécutifs et le centre\\n4 : Un angle et le centre\\n5 : Une des configuration au hasard']\n  // this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}