{"version":3,"file":"js/74213.46cbcda89859347ef424.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G23-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, calcul, creerNomDePolygone, texNombre } from '../../modules/outils.js'\nimport { point, pointSurSegment, pointIntersectionDD, droite, segment, rotation, longueur } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Tracer un triangle dont on connait une longueur et 2 angles'\n\n/**\n * Un nombre à 2 chiffres (non multiple de 10) + 9\n * @author Rémi Angot\n * Références 6G23-2 et 5G20-2\n */\nexport default function TracerTriangle2Angles () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.typeExercice = 'IEP'\n  this.sup = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (\n      let i = 0, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      const c = calcul(randint(30, 70) / 10)\n      const angle1 = randint(20, 70)\n      const angle2 = randint(20, 70)\n      const p = creerNomDePolygone(3)\n      texte = `Tracer un triangle $${p}$ tel que $${p[0] + p[1]}=${texNombre(\n        c\n      )}$ cm, $\\\\widehat{${p[1] + p[0] + p[2]\n        }}=${angle1}\\\\degree$ et $\\\\widehat{${p[0] + p[1] + p[2]\n        }}=${angle2}\\\\degree$.`\n      texte += `<br> Mesurer $${p[0] + p[2]}$ et $${p[1] + p[2]}$.`\n      // const A0 = point(0, 0, p[0], 'left')\n      const B0 = point(c, 0, p[1], 'right')\n      // const s0 = segmentAvecExtremites(A0, B0)\n      // const t1 = afficheLongueurSegment(B0, A0)\n\n      const A1 = point(B0.x + 4, 0, p[0], 'left')\n      const B1 = point(A1.x + c, 0, p[1], 'right')\n      const s1 = segment(A1, B1)\n      s1.styleExtremites = '-|'\n      // const c1 = rotation(B1, A1, angle1)\n      // const C1 = pointSurSegment(c1, A1, -3)\n      // const s2 = segment(A1, C1)\n      // const t2 = afficheMesureAngle(B1, A1, C1)\n\n      const A2 = point(B1.x + 4, 0, p[0], 'left')\n      const B2 = point(A2.x + c, 0, p[1], 'right')\n      // const s3 = segment(A2, B2)\n      const c2 = rotation(B2, A2, angle1)\n      const C2 = pointSurSegment(c2, A2, -3)\n      // const s4 = segment(A2, C2)\n      const c3 = rotation(A2, B2, -angle2)\n      const C3 = pointSurSegment(c3, B2, -3)\n      // const t3 = afficheMesureAngle(A2, B2, C3)\n      // const s5 = segment(B2, C3)\n      const d1 = droite(A2, C2)\n      d1.isVisible = false\n      const d2 = droite(B2, C3)\n      d2.isVisible = false\n      const C = pointIntersectionDD(d1, d2, p[2])\n      // const l = labelPoint(A0, B0, A1, B1, A2, B2, C)\n\n      // if (context.isHtml) {\n      //   texteCorr = mathalea2d(\n      //     { xmin: -1, xmax: 3 * c + 10, ymin: -1, ymax: 10 }, s0, s1, s2, s3, s4, s5, t1, t2, t3, l)\n      //   texteCorr += '<br><br>'\n      // } else {\n      //   texteCorr = ''\n      // }\n      if (this.sup) {\n        texteCorr = ''\n      } else {\n        texteCorr = `$${p[0] + p[2]}\\\\approx${texNombre(longueur(A2, C, 1))}$ cm et $${p[1] + p[2]}\\\\approx${texNombre(longueur(B2, C, 1))}$ cm.`\n      }\n      const anim = new Alea2iep()\n      anim.triangle1longueur2angles(p, c, angle1, angle2, true, true) // description et longueur\n      texteCorr += anim.htmlBouton(this.numeroExercice, i)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = [\"Longueurs données qu'à la fin de l'animation\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TracerTriangle2Angles","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","typeExercice","sup","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","i","cpt","c","calcul","randint","angle1","angle2","p","creerNomDePolygone","texNombre","B0","point","A1","x","B1","segment","styleExtremites","A2","B2","c2","rotation","C2","pointSurSegment","c3","C3","d1","droite","isVisible","d2","C","pointIntersectionDD","longueur","anim","Alea2iep","triangle1longueur2angles","htmlBouton","numeroExercice","indexOf","push","listeQuestionsToContenu","besoinFormulaireCaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}