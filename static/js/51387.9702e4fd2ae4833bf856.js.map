{"version":3,"file":"js/51387.9702e4fd2ae4833bf856.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Transformations.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { mathalea2d, point, droiteParPointEtPente, droiteHorizontaleParPoint, droiteVerticaleParPoint, tracePoint, labelPoint, segment, vecteur, texteParPosition, latexParCoordonnees, codeSegments, afficheMesureAngle, milieu, translation } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, choice, combinaisonListes, imagePointParTransformation, texFractionReduite, numAlpha } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Transformations : trouvers un point numéroté par une des transformations du plan. Fonction générale utilisée sur tous les niveaux\n * @author Jean-Claude Lhote\n * Pas de version LaTeX\n */\nexport default function Transformations () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n\n  // this.titre = \"Trouver l'image d'un point par une transformation du plan\";\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.interactif = true\n  this.sup = 1\n  const listeTypeDeQuestions = [\n    [1, 2, 3, 4],\n    [1, 2, 7, 7, 7, 7],\n    [1, 2, 7, 7, 8, 8, 8, 8, 8],\n    [1, 2, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]\n  ]\n\n  // this.sup = 1; // 1 pour les 6ème, 2 pour les 5èmes, 3 pour les 4èmes, et 4 pour les 3èmes.\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function (numeroExercice) {\n    let choixTransformation\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est pour le niveau 1=6e, 4=3e\n      choixTransformation = combinaisonListes(listeTypeDeQuestions[this.sup - 1], 3)\n    } else {\n      choixTransformation = combinaisonListes(this.sup.split('-'), 3) // Sinon on créé un tableau à partir des valeurs séparées par des -\n      for (let i = 0; i < 3; i++) {\n        choixTransformation[i] = parseInt(choixTransformation[i])\n      }\n    }\n\n    console.log(choixTransformation)\n    const M = []; const N = []; let pointM; let pointN\n    const O = point(0, 0, 'O', 'below')\n    const d1 = droiteParPointEtPente(O, 1)\n    const d3 = droiteHorizontaleParPoint(O)\n    const d2 = droiteParPointEtPente(O, -1)\n    const d4 = droiteVerticaleParPoint(O)\n    d1.isVisible = true\n    d2.isVisible = true\n    d3.isVisible = true\n    d4.isVisible = true\n    d1.epaisseur = 2\n    d2.epaisseur = 2\n    d3.epaisseur = 2\n    d4.epaisseur = 2\n    d1.color = 'green'\n    d2.color = 'green'\n    d3.color = 'green'\n    d4.color = 'green'\n    d1.opacite = 0.5\n    d2.opacite = 0.5\n    d3.opacite = 0.5\n    d4.opacite = 0.5\n    const objetsEnonce = []\n    const objetsCorrection = []\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        objetsEnonce.push(tracePoint(point(j - 4, i - 4)))\n        objetsCorrection.push(tracePoint(point(j - 4, i - 4)))\n        objetsEnonce.push(texteParPosition(j + 10 * i, j - 4.2, i - 4.2, 'milieu', 'gray', 0.8, 'middle', false))\n        objetsCorrection.push(texteParPosition(j + 10 * i, j - 4.2, i - 4.2, 'milieu', 'gray', 0.8, 'middle', false))\n      }\n    }\n    this.listeQuestions = []\n    this.listeCorrections = [] // Liste de questions corrigées\n    const antecedents = [0, 0, 0]\n    const images = [0, 0, 0]\n    const k = [1, 1, 1]\n    let k1\n    let k2\n    const xO = 4\n    const yO = 4\n    let yu\n    let puntoReseau // k : rapports d'homothéties, (xO,yO) point de rencontre des droites et centre, les composantes du vecteur de translation : (xu,yu)\n    const n = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n    let texte = ''\n    let texteCorr = ''\n    const punto = [[]]\n\n    const xu = randint(-3, 3)\n    if (xu === 0) {\n      yu = randint(-3, 3, [0])\n    } else {\n      yu = randint(-3, 3)\n    }\n    for (let j = 0; j < 3; j++) {\n      if (choixTransformation[j] === 10) {\n        k[j] = choice([2, 4]) * randint(-1, 1, [0]) // rapport d'homothétie < 1 ( 0.5 ou 0.25 )\n        k2 = k[j]\n      } else if (choixTransformation[j] === 9) {\n        k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]) // rapport d'homothétie >=1 (1,2 ou 3)\n        k1 = k[j]\n      }\n      antecedents[j] = randint(0, 99)\n      punto[j] = imagePointParTransformation(\n        choixTransformation[j],\n        [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],\n        [xO, yO],\n        [xu, yu],\n        k[j]\n      )\n      images[j] = punto[j][0] + punto[j][1] * 10\n      // Limitation des points invariants\n      if (choixTransformation[j] === 1 && images[j] % 11 === 0) { punto[j][0] = -1 } // Point impossible sur (d1) pour sa symétrie\n      if (choixTransformation[j] === 3 && Math.floor(images[j] / 10 === 4)) { punto[j][0] = -1 } // Point impossible sur (d3) pour sa symétrie\n      if (choixTransformation[j] === 4 && images[j] % 10 === 4) { punto[j][0] = -1 } // Point impossible sur  (d4) pour sa symétrie\n      if ((choixTransformation[j] === 5 || choixTransformation[j] === 5) &&\n        antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible pour rotation\n      if (choixTransformation[j] === 10 && antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible par homothétie de rapport 1/k2\n\n      // pour éviter les points en dehors des clous dans homothétie de rapport 1/k2\n      if (punto[j][0] - Math.floor(punto[j][0]) === 0 &&\n        punto[j][1] - Math.floor(punto[j][1]) === 0) { puntoReseau = true } else { puntoReseau = false }\n      // On vérifie que l'image est bien un point du réseau sinon, on change.\n      while (punto[j][0] < 0 ||\n        punto[j][0] > 9 ||\n        punto[j][1] < 0 ||\n        punto[j][1] > 9 ||\n        puntoReseau === false) {\n        if (choixTransformation[j] === 10) {\n          k[j] = choice([2, 4]) * randint(-1, 1, [0]) // rapport d'homothétie < 1 ( 0.5 ou 0.25 )\n          k2 = k[j]\n        } else if (choixTransformation[j] === 9) {\n          k[j] = choice([1, 2, 3]) * randint(-1, 1, [0]) // rapport d'homothétie >=1 (1,2 ou 3)\n          k1 = k[j]\n        }\n        antecedents[j] = randint(0, 99)\n        punto[j] = imagePointParTransformation(\n          choixTransformation[j],\n          [antecedents[j] % 10, Math.floor(antecedents[j] / 10)],\n          [xO, yO],\n          [xu, yu],\n          k[j]\n        )\n        images[j] = punto[j][0] + punto[j][1] * 10\n        // Limitation des points invariants\n        if (choixTransformation[j] === 1 && images[j] % 11 === 0) { punto[j][0] = -1 } // Point impossible sur (d1) pour sa symétrie\n        if (choixTransformation[j] === 3 && Math.floor(images[j] / 10 === 4)) { punto[j][0] = -1 } // Point impossible sur (d3) pour sa symétrie\n        if (choixTransformation[j] === 4 && images[j] % 10 === 4) { punto[j][0] = -1 } // Point impossible sur  (d4) pour sa symétrie\n        if ((choixTransformation[j] === 5 || choixTransformation[j] === 5) &&\n          antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible pour rotation\n        if (choixTransformation[j] === 10 && antecedents[j] === 44) { punto[j][0] = -1 } // point O impossible par homothétie de rapport 1/k2\n\n        // pour éviter les points en dehors des clous dans homothétie de rapport 1/k2\n        if (punto[j][0] - Math.floor(punto[j][0]) === 0 &&\n          punto[j][1] - Math.floor(punto[j][1]) === 0) { puntoReseau = true } else { puntoReseau = false }\n      }\n      N[j] = point(punto[j][0] - 4, punto[j][1] - 4)\n      M[j] = point(antecedents[j] % 10 - 4, Math.floor(antecedents[j] / 10 - 4))\n    }\n    // n[i] est un tableau contenant -1 pour la transformation d'indice i si elle n'est pas utilisée, et contenant le numéro du point concerné si la transformation i est utilisée pour ce point.\n    // Je l'utilise pour faire apparaître la correction liée au point et à la transformation.\n    for (let j = 0; j < 3; j++) {\n      n[choixTransformation[j] - 1] = antecedents[j]\n    }\n    for (let i = 0; i < 3; i++) {\n      switch (choixTransformation[i]) {\n        case 1:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_1)$.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_1)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d1, tracePoint(M[i]), latexParCoordonnees('(d_1)', 4.5, 4.2, 'green', 15, 1, ''))\n          objetsCorrection.push(d1, tracePoint(M[i], N[i]), latexParCoordonnees('(d_1)', 3.5, 3, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'purple'), codeSegments('X', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 2:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_2)$.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_2)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d2, tracePoint(M[i]), latexParCoordonnees('(d_2)', 4.3, -3.7, 'green', 15, 1, ''))\n          objetsCorrection.push(d2, tracePoint(M[i], N[i]), latexParCoordonnees('(d_2)', 4.3, -3.7, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'cyan'), codeSegments('|||', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 3:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_3)$.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_3)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d3, tracePoint(M[i]), latexParCoordonnees('(d_3)', -4.2, 0.5, 'green', 15, 1, ''))\n          objetsCorrection.push(d3, tracePoint(M[i], N[i]), latexParCoordonnees('(d_3)', -4.2, 0.5, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'brown'), codeSegments('/', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 4:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro du symétrique du point ${antecedents[i]} par rapport à la droite $(d_4)$.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` Le symétrique du point ${antecedents[i]} par rapport à $(d_4)$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(d4, tracePoint(M[i]), latexParCoordonnees('(d_4)', 0.2, 4.5, 'green', 15, 1, ''))\n          objetsCorrection.push(d4, tracePoint(M[i], N[i]), latexParCoordonnees('(d_4)', 0.2, 4.5, 'green', 15, 1, ''),\n            segment(M[i], N[i], 'yellow'), codeSegments('||', 'red', M[i], milieu(M[i], N[i]), milieu(M[i], N[i]), N[i]))\n          break\n\n        case 5:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens anti-horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 6:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de  l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 90° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 7:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la symétrie de centre O.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la symétrie de centre O est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('O', 'red', M[i], O, O, N[i]))\n          break\n\n        case 11:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens anti-horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 12:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 60° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 13:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens anti-horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens anti-horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 14:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens horaire.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la rotation de centre O et d'angle 120° dans le sens horaire est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'blue'), codeSegments('||', 'red', M[i], O, O, N[i]), afficheMesureAngle(M[i], O, N[i]))\n          break\n\n        case 8:\n          pointM = point(randint(-1, 2, [M[i].x, 0]), randint(-1, 2, [M[i].y, 0]), 'M', 'below')\n          pointN = translation(pointM, vecteur(xu, yu), 'N', 'below')\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par la translation qui transforme M en N.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par la translation qui transforme M en N est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], pointM, pointN), labelPoint(pointM, pointN))\n          objetsCorrection.push(tracePoint(M[i], N[i], pointM, pointN), labelPoint(pointM, pointN), vecteur(M[i], N[i]).representant(M[i]), vecteur(M[i], N[i]).representant(pointM))\n          break\n\n        case 9:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport ${k1}.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport ${k1} est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'orange'))\n          break\n\n        case 10:\n          texte +=\n            numAlpha(i) +\n            ` Donner le numéro de l'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport $${texFractionReduite(\n              1,\n              k2\n            )}$.<br>`\n          texteCorr +=\n            numAlpha(i) +\n            ` L'image du point ${antecedents[i]} par l'homothétie de centre O et de rapport $${texFractionReduite(\n              1,\n              k2\n            )}$ est le point ${images[i]}.<br>`\n          objetsEnonce.push(tracePoint(M[i], O), labelPoint(O))\n          objetsCorrection.push(tracePoint(M[i], N[i], O), labelPoint(O), segment(M[i], O, 'blue'), segment(N[i], O, 'orange'))\n          break\n      }\n\n      texte += ajouteChampTexteMathLive(this, i, 'largeur10')\n      setReponse(this, i, images[i])\n    }\n    /* if (context.isAmc) {\n      enonceAMC += '\\\\\\\\' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsEnonce)\n    } */\n    texte += '<br>' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsEnonce)\n    texteCorr += '<br>' + mathalea2d({ xmin: -4.5, ymin: -4.5, xmax: 5.3, ymax: 5.3, pixelsParCm: 40, scale: 0.8, optionsTikz: ['every node/.style={scale=0.6}'], mainlevee: false }, objetsCorrection)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: texte,\n        options: { multicols: true },\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: texteCorr,\n              statut: '',\n              reponse: {\n                texte: 'a)',\n                valeur: images[0],\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'b)',\n                valeur: images[1],\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'c)',\n                valeur: images[2],\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }]\n      }\n    }\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des transformations',\n    '3 nombres séparés par des tirets\\n 1&2 : symétries obliques\\n 3&4 : symétries horizontales ou verticales\\n 5&6 : rotations de 90°\\n 7 : symétrie centrale\\n 8 : translation\\n 9 : homothétie k>1\\n 10 : homothétie k<1'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","Transformations","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","interactif","sup","listeTypeDeQuestions","context","spacingCorr","nouvelleVersion","numeroExercice","choixTransformation","combinaisonListes","split","i","parseInt","console","log","M","N","pointM","pointN","O","point","d1","droiteParPointEtPente","d3","droiteHorizontaleParPoint","d2","d4","droiteVerticaleParPoint","isVisible","epaisseur","color","opacite","objetsEnonce","objetsCorrection","j","push","tracePoint","texteParPosition","listeQuestions","listeCorrections","antecedents","images","k","k1","k2","yu","puntoReseau","n","texte","texteCorr","punto","xu","randint","choice","imagePointParTransformation","Math","floor","numAlpha","latexParCoordonnees","segment","codeSegments","milieu","labelPoint","afficheMesureAngle","x","y","translation","vecteur","representant","texFractionReduite","ajouteChampTexteMathLive","setReponse","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","optionsTikz","mainlevee","listeQuestionsToContenuSansNumero","autoCorrection","enonce","options","multicols","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","besoinFormulaireTexte","titre","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}