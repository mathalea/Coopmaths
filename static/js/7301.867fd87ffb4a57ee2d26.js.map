{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4L10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Exercice_developper","difficulte","Exercice","this","sup","consigne","spacing","nbQuestions","nbColsCorr","sup2","nouvelleVersion","listeQuestions","listeCorrections","lettre","typesDeQuestions","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","k","randint","choice","a","b","inconnue","lettreDepuisChiffre","ecritureAlgebrique","ecritureParentheseSiNegatif","signe","abs","c","ecritureParentheseSiMoins","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/7301.867fd87ffb4a57ee2d26.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,ecritureAlgebrique,ecritureParentheseSiNegatif,ecritureParentheseSiMoins,signe,abs,lettreDepuisChiffre} from '../../modules/outils.js'\n\nexport const titre = 'Utiliser la simple distributivité'\n\n/**\n * Développer en utilisant la distributivité simple\n *\n * * La lettre peut être x, y, z, t, a, b ou c\n * # À partir du niveau 2 \n * * 3 fois sur 6 c'est une distributivité simple :  k(ax+b)\n * * 1 fois sur 6 c'est une distributivité simple : (ax+b)×k\n * * 1 fois sur 6, la variable est en facteur : kx(ax+b)\n * * 1 fois sur 6 il faut ensuite réduire : k(ax+b)+c\n *\n * Niveau de difficulté :\n * * 1 : Multiplication par un facteur positif\n * * 2: Multiplication par un facteur relatif\n * @author Rémi Angot\n * 4L10 et 3L11\n */\nexport default function Exercice_developper(difficulte = 1) {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = difficulte;\n  this.titre = titre;\n  this.consigne = \"Développer.\";\n  this.spacing = 1;\n  this.nbQuestions = 5;\n  this.nbColsCorr = 1;\n  this.sup2 = true;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let lettre = [\"x\", \"y\", \"z\", \"t\", \"a\", \"b\", \"c\"];\n    if (this.sup2){\n      lettre = [\"x\"]\n    }\n    let typesDeQuestionsDisponibles = [\n      \"simple\",\n      \"simple\",\n      \"simple2\",\n      \"x_en_facteur\",\n      \"developper_et_reduire\",\n    ];\n    if (this.sup < 4) {\n      typesDeQuestionsDisponibles = [\"simple\"]\n    }\n    let typesDeQuestions\n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i];\n      let k = randint(2, 11);\n      if (this.sup > 2) {\n        // si difficulté 2, k peut être négatif\n        k = k * choice([-1, 1]);\n      }\n      let a = randint(1, 9);\n      let b = randint(1, 9) * choice([-1, 1]);\n      if (this.sup == 1){\n        b = randint(1, 9)\n      }\n      let inconnue = choice(lettre);\n      switch (typesDeQuestions) {\n        case \"simple\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})=${k}\n\t\t\t\t\t\t\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})=${k}\n\t\t\t\t\t\t\\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          }\n          break;\n        case \"simple2\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\n\t\t\t\t\t\t\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\n\t\t\t\t\t\t\\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          }\n          break;\n        case \"x_en_facteur\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(b)})$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(b)})$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(\n              b\n            )})=${k}${inconnue}\\\\times ${inconnue} ${signe(\n              k * b\n            )}${k}${inconnue}\\\\times ${abs(b)}=${k * a}${inconnue}^2${ecritureAlgebrique(k * b)}${inconnue}$`;\n          } else {\n            if (k > 0) {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + ${k}${inconnue}\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`;\n            } else {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + (${k}${inconnue})\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`;\n            }\n          }\n          break;\n        case \"developper_et_reduire\":\n          let c = randint(2, 9);\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})+${c}$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})+${c}$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n\t\t\t\t\t\t=${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times${ecritureParentheseSiMoins(\n              a + inconnue\n            )}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n\t\t\t\t\t\t=${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`;\n          }\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\"Niveau de difficulté\",4,\"1 : Multiplication par un entier positif, tous les termes sont positifs\\n2 : Multiplication par un entier positif\\n3 : Multiplication par un entier relatif\\n4: Multiplication par un facteur relatif et expressions sous des formes différentes \",\n  ];\n  this.besoinFormulaire2CaseACocher = [\"$x$ est la seule lettre utilisée\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}