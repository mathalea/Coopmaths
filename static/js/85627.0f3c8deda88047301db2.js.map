{"version":3,"file":"js/85627.0f3c8deda88047301db2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4AI1-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["// on importe les fonctions nécessaires.\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, choice, calcul, shuffle, arrondi } from '../../modules/outils.js'\n// Ici ce sont les fonctions de la librairie maison 2d.js qui gèrent tout ce qui est graphique (SVG/tikz) et en particulier ce qui est lié à l'objet lutin\nimport { angleScratchTo2d, orienter, mathalea2d, scratchblock, creerLutin, avance, tournerD, baisseCrayon, allerA, leveCrayon, tracePoint, point, segment, tournerG, texteParPoint } from '../../modules/2d.js'\nexport const interactifReady = true\n// il y avait un fonctionnement avec amcType cf commit 3ae7c43\nexport const interactifType = 'cliqueFigure' // La correction doit être gérée dans l'exercice avec la méthode this.correctionInteractive()\nexport const amcReady = true\nexport const amcType = 'qcmMono'\nexport const titre = 'Tortue Scratch avec répétitions'\n\n/**\n * Référence : 4I1-1\n * Publié le : 29/06/2021\n * @author Jean-Claude Lhote\n * Géné\n */\nexport default function AlgoTortue () { // ça c'est la classe qui permet de créer cet exercice\n  'use strict'\n  Exercice.call(this) // la classe parente qui définit les attributs commun à tous les exercices\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.typeExercice = 'Scratch'\n  this.listePackages = 'scratch3'\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n\n    this.figures = []\n    const objetsCorrection = []\n    const paramsCorrection = {}\n    const paramsEnonces = {}\n    /*  const typeDeQuestions = [\n      'polygonesReguliers',\n      'spirales',\n      'frises',\n      'rosaces'\n    ]\n    */\n\n    const choix = choice([\n      'polygonesReguliers',\n      'spirales',\n      'rosaces1',\n      'roueDentee',\n      'frise1'\n    ])\n    let val1, val2, val3, n, n2\n    const sens = choice(['turnright', 'turnleft'])\n    let sequenceFrise1\n    let sensOppose\n    if (sens === 'turnright') {\n      sensOppose = 'turnleft'\n    } else {\n      sensOppose = 'turnright'\n    }\n    const lutins = []\n    const bonneReponse = randint(0, 3)\n    const angleDepart = 90 // On choisit l'orientation de départ\n    const xDepart = 0 // Le départ est en (0,0) pour avoir la même marge dans toutes les directions\n    const yDepart = 0 // Mais on pourrait envisager de changer ça et de recadrer...\n    context.unitesLutinParCm = 10 // avancer de 10 pour le lutin lui fait parcourir 1cm (en fait 0,5cm car j'ai ajouté un scale=0.5 pour la sortie latex)\n    context.pixelsParCm = 20 // 20 pixels d'écran représentent 1cm (enfin ça dépend du zoom, donc c'est juste un réglage par défaut)\n\n    let texte = '' // la chaine qui va contenir l'énoncé\n    let texteCorr = '' // la chaine qui va contenir la correction\n\n    for (let i = 0; i < 4; i++) { // Ici on crée 4 instance de l'objet Lutin.\n      lutins[i] = creerLutin()\n      lutins.color = 'green' // la couleur de la trace\n      lutins.epaisseur = 3 // son epaisseur\n      lutins.pointilles = false // le type de pointillés (on peut mettre false pour avoir un trait plein)\n      allerA(xDepart, yDepart, lutins[i]) // ça c'est pour faire bouger le lutin (écrire le programme ne le fait pas exécuter !)\n      baisseCrayon(lutins[i]) // à partir de là, le lutin laissera une trace (ses positions successives sont enregistrées dans lutin.listeTraces)\n      orienter(angleScratchTo2d(angleDepart), lutins[i]) // l'angle 2d est l'angle trigonométrique... Scratch est décallé de 90°, il faut donc convertir pour utiliser Orienter()\n    }\n    // On écrit le début du programme dans l'attribut codeScratch du lutin... cet attribut de type chaine contient le code du programme du lutin en Scratch Latex\n    // A chaque instruction ajoutée dans le programme correspond une action à effectuée sur l'objet lutin..\n    lutins[0].codeScratch = '\\\\begin{scratch}[print,fill,blocks,scale=0.75]\\n \\\\blockinit{quand \\\\greenflag est cliqué}\\n '\n    lutins[0].codeScratch += `\\\\blockmove{aller à x: \\\\ovalnum{${xDepart}} y: \\\\ovalnum{${yDepart}}}\\n ` // ça c'est pour ajouter la brique scratch\n    lutins[0].codeScratch += `\\\\blockmove{s'orienter à \\\\ovalnum{${angleDepart}}}\\n `\n    lutins[0].codeScratch += '\\\\blockpen{stylo en position d\\'écriture}\\n '\n    switch (choix) {\n      case 'polygonesReguliers':\n        n = choice([3, 5, 6, 7, 8]) // Nombre de côtés\n        val1 = arrondi(360 / n, 1)\n        val2 = (10 - n) * 10\n        if (bonneReponse !== 3) {\n          lutins[0].codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${n}} fois}\n{\n\\\\blockmove{avancer de \\\\ovalnum{${val2}} pas}\\n`\n        } else {\n          lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val1}} degrés}\n\\\\blockrepeat{répéter \\\\ovalnum{${n - 1}} fois}\n{\n\\\\blockmove{avancer de \\\\ovalnum{${val2}} pas}\n\\n`\n        }\n        if (bonneReponse === 0 || bonneReponse === 3) {\n          lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val1}} degrés}\n}\\n`\n        } else {\n          if (bonneReponse === 1) {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${val1}} degrés}\n}\\n`\n          } else {\n            if (val1 !== 90) {\n              lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${180 - val1}} degrés}\n}\\n`\n            } else {\n              lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val1}} degrés}\n              \\\\blockmove{avancer de \\\\ovalnum{${val2}} pas}\\n\n              \\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val1}} degrés}\n}\\n`\n            }\n          }\n        }\n        orienter(-90, lutins[2])\n        for (let i = 0; i < n; i++) {\n          avance(val2, lutins[0])\n          avance(val2, lutins[1])\n          avance(val2, lutins[2])\n          if (i !== 0) avance(val2, lutins[3])\n\n          if (sens === 'turnright') {\n            tournerD(val1, lutins[0])\n            tournerD(val1, lutins[3])\n            tournerG(val1, lutins[1])\n            if (val1 !== 90) {\n              tournerD(180 - val1, lutins[2])\n            } else {\n              tournerD(val1, lutins[2])\n              avance(val2, lutins[2])\n              tournerD(val1, lutins[2])\n            }\n          } else {\n            tournerG(val1, lutins[0])\n            tournerG(val1, lutins[3])\n            tournerD(val1, lutins[1])\n            if (val1 !== 90) {\n              tournerG(180 - val1, lutins[2])\n            } else {\n              tournerG(val1, lutins[2])\n              avance(val2, lutins[2])\n              tournerG(val1, lutins[2])\n            }\n          }\n        }\n        break\n      case 'rosaces1':\n        n = choice([3, 4, 5, 6, 8]) // Nombre branches\n        n2 = randint(3, 6, 5)\n        val1 = randint(2, 4) * 10\n        val2 = (10 - n) * 5\n        val3 = (8 - n2) * 4\n        lutins[0].codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${n}} fois} \\n{`\n        if (bonneReponse < 2) {\n          lutins[0].codeScratch += '\\\\blockmove{aller à x: \\\\ovalnum{0} y: \\\\ovalnum{0}}\\n'\n        }\n        if (bonneReponse % 2 === 0) {\n          lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalnum{${val1}} pas}\\n`\n        } else {\n          if (bonneReponse === 1) {\n            lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalnum{${calcul(val1 / 2)}} pas}\\n`\n          } else {\n            lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalnum{${calcul(val1 + 2)}} pas}\\n`\n          }\n        }\n        switch (bonneReponse) {\n          case 0:\n            lutins[0].codeScratch += `\\n\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{${calcul(90 - 180 / n2)}} degrés}\\n`\n            break\n          case 1:\n            lutins[0].codeScratch += '\\n\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{90} degrés}\\n'\n            break\n          case 2:\n            lutins[0].codeScratch += '\\n\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{90} degrés}\\n'\n            break\n          case 3:\n            lutins[0].codeScratch += '\\n'\n            break\n        }\n        lutins[0].codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${n2}} fois}\\n\n        {\n          \\\\blockmove{avancer de \\\\ovalnum{${val3}} pas}\\n\n          \\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{${calcul(360 / n2)}} degrés}\\n\n        }\\n`\n        switch (bonneReponse) {\n          case 0:\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{${calcul(90 - 180 / n2)}} degrés}\\n`\n            break\n          case 1:\n            lutins[0].codeScratch += '\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{90} degrés}\\n'\n            break\n          case 2:\n            lutins[0].codeScratch += '\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{90} degrés}\\n'\n            break\n          case 3:\n            lutins[0].codeScratch += '\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{180} degrés}\\n'\n            break\n        }\n        lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${calcul(360 / n)}} degrés}\\n}\\n`\n\n        for (let i = 0; i < n; i++) {\n          allerA(0, 0, lutins[0])\n          allerA(0, 0, lutins[1])\n          //  allerA(0, 0, lutins[2])\n          // allerA(0, 0, lutins[3])\n          avance(val1, lutins[0])\n          avance(val1 / 2, lutins[1])\n          avance(val1, lutins[2])\n          avance(val1 + 2, lutins[3])\n          tournerD(90 - 180 / n2, lutins[0])\n          tournerD(90, lutins[1])\n          tournerG(90, lutins[2])\n          for (let j = 0; j < n2; j++) {\n            avance(val3, lutins[0])\n            avance(val3, lutins[1])\n            avance(val3, lutins[2])\n            avance(val3, lutins[3])\n            tournerG(360 / n2, lutins[0])\n            tournerG(360 / n2, lutins[1])\n            tournerG(360 / n2, lutins[2])\n            tournerG(360 / n2, lutins[3])\n          }\n          tournerG(90 - 180 / n2, lutins[0])\n          tournerG(90, lutins[1])\n          tournerD(90, lutins[2])\n          tournerD(180, lutins[3])\n          if (sens === 'turnright') {\n            tournerD(360 / n, lutins[0])\n            tournerD(360 / n, lutins[1])\n            tournerD(360 / n, lutins[2])\n            tournerD(360 / n, lutins[3])\n          } else {\n            tournerG(360 / n, lutins[0])\n            tournerG(360 / n, lutins[1])\n            tournerG(360 / n, lutins[2])\n            tournerG(360 / n, lutins[3])\n          }\n        }\n        break\n      case 'spirales':\n        n = choice([3, 4, 5, 6, 8]) // Nombre de côtés\n        n2 = randint(1, 4) + Math.floor((9 - n) / 2)\n        val1 = randint(1, 4) * 5\n        val2 = 60 + randint(0, 4) * 5\n        val3 = calcul(360 / n)\n\n        if (bonneReponse !== 2) {\n          lutins[0].codeScratch += `\\\\blockvariable{mettre \\\\ovalvariable*{longueur} à \\\\ovalnum{${val1}}}\n          \\\\blockrepeat{répéter jusqu'à ce que \\\\booloperator{\\\\ovalvariable{longueur}>\\\\ovalnum{${val2}}}}\n          {\n          \\\\blockmove{avancer de \\\\ovalvariable{longueur} pas}\\n`\n        } else {\n          lutins[0].codeScratch += `\\\\blockvariable{mettre \\\\ovalvariable*{longueur} à \\\\ovalnum{${val2}}}\n          \\\\blockrepeat{répéter jusqu'à ce que \\\\booloperator{\\\\ovalvariable{longueur}<\\\\ovalnum{${val1}}}}\n          {\n          \\\\blockmove{avancer de \\\\ovalvariable{longueur} pas}\\n`\n        }\n        if (bonneReponse % 2 === 0) { // les lutins 0 et 2 tournent normalement\n          lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val3}} degrés}\\n`\n        } else {\n          if (bonneReponse === 1) {\n            if (sens === 'turnright') { // Le lutin 1 tourne dans le mauvais sens\n              lutins[0].codeScratch += `\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{${val3}} degrés}\\n`\n            } else {\n              lutins[0].codeScratch += `\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{${val3}} degrés}\\n`\n            }\n          } else { // le lutin 3 ne tourne pas assez\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val3 - 10}} degrés}\\n`\n          }\n        }\n        if (bonneReponse === 2) {\n          lutins[0].codeScratch += `\\\\blockvariable{ajouter \\\\ovalnum{${-n2}} à \\\\ovalvariable{longueur}}\\n`\n          lutins[0].codeScratch += '}\\n'\n        } else {\n          lutins[0].codeScratch += `\\\\blockvariable{ajouter \\\\ovalnum{${n2}} à \\\\ovalvariable{longueur}}\\n`\n          lutins[0].codeScratch += '}\\n'\n        }\n        for (let i = val1; i < val2; i += n2) {\n          avance(i, lutins[0])\n          avance(i, lutins[1]) // Le lutin 1 tourne dans le mauvais sens\n          avance(i, lutins[3]) // le lutin2 ne tourne pas assez\n          if (sens === 'turnright') {\n            tournerD(val3, lutins[0])\n            tournerG(val3, lutins[1])\n            tournerD(val3 - 10, lutins[3])\n          } else {\n            tournerG(val3, lutins[0])\n            tournerD(val3, lutins[1])\n            tournerG(val3 - 10, lutins[3])\n          }\n        }\n        for (let i = val2; i > val1; i -= n2) {\n          avance(i, lutins[2]) // Le lutin2 diminue la logneur de ses déplacements\n          if (sens === 'turnright') {\n            tournerD(val3, lutins[2])\n          } else {\n            tournerG(val3, lutins[2])\n          }\n        }\n        break\n      case 'roueDentee':\n        n = choice([3, 4, 5, 6, 8]) // Nombre de côtés\n        val1 = randint(1, 2) * 10\n        val2 = calcul(720 / n)\n        val3 = calcul(360 / n)\n\n        if (bonneReponse < 5) {\n          lutins[0].codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${n}} fois}\n{\n\\\\blockmove{avancer de \\\\ovalvariable{${val1}} pas}\\n`\n          if (bonneReponse < 2) {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val3}} degrés}\\n`\n          } else {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${val3}} degrés}\\n`\n          }\n          lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalvariable{${val1 * 2}} pas}\\n`\n          if (bonneReponse === 0) {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val2}} degrés}\\n`\n          } else {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${val2}} degrés}\\n`\n          }\n          if (bonneReponse < 3) {\n            lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalvariable{${val1 * 2}} pas}\\n`\n          } else {\n            lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalvariable{${val1}} pas}\\n`\n          }\n          if (bonneReponse > 0) {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${val2}} degrés}\\n`\n          } else {\n            lutins[0].codeScratch += `\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${val2}} degrés}\\n`\n          }\n          lutins[0].codeScratch += '}\\n'\n        }\n        for (let i = 0; i < n; i++) {\n          avance(val1, lutins[0])\n          avance(val1, lutins[1])\n          avance(val1, lutins[2])\n          avance(val1, lutins[3])\n          if (sens === 'turnright') {\n            tournerD(val3, lutins[0])\n            tournerD(val3, lutins[1])\n            tournerG(val3, lutins[2])\n            tournerG(val3, lutins[3])\n          } else {\n            tournerG(val3, lutins[0])\n            tournerG(val3, lutins[1])\n            tournerD(val3, lutins[2])\n            tournerD(val3, lutins[3])\n          }\n          avance(val1 * 2, lutins[0])\n          avance(val1 * 2, lutins[1])\n          avance(val1 * 2, lutins[2])\n          avance(val1 * 2, lutins[3])\n          if (sens === 'turnright') {\n            tournerD(val2, lutins[0])\n            tournerG(val2, lutins[1])\n            tournerG(val2, lutins[2])\n            tournerG(val2, lutins[3])\n          } else {\n            tournerG(val2, lutins[0])\n            tournerD(val2, lutins[1])\n            tournerD(val2, lutins[2])\n            tournerD(val2, lutins[3])\n          }\n          avance(val1 * 2, lutins[0])\n          avance(val1 * 2, lutins[1])\n          avance(val1 * 2, lutins[2])\n          avance(val1, lutins[3])\n          if (sens === 'turnright') {\n            tournerG(val2, lutins[0])\n            tournerD(val2, lutins[1])\n            tournerD(val2, lutins[2])\n            tournerD(val2, lutins[3])\n          } else {\n            tournerD(val2, lutins[0])\n            tournerG(val2, lutins[1])\n            tournerG(val2, lutins[2])\n            tournerG(val2, lutins[3])\n          }\n        }\n        break\n      case 'frise1':\n        n = 3 // Nombre de répétitions\n        n2 = choice([45, 60, 90])\n        n2 = choice([45, 60, 90])\n        val1 = randint(1, 2) * 5\n        val2 = randint(1, 3) * 5\n        val3 = randint(2, 4) * 5\n        sequenceFrise1 = [\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val2}} pas}\\n`, val2],\n          [`\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${n2}} degrés}\\n`, sens, n2],\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val1}} pas}\\n`, val1],\n          [`\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${n2}} degrés}\\n`, sens, n2],\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val1}} pas}\\n`, val1],\n          [`\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${n2}} degrés}\\n`, sensOppose, n2],\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val1}} pas}\\n`, val1],\n          [`\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${n2}} degrés}\\n`, sensOppose, n2],\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val3}} pas}\\n`, val3],\n          [`\\\\blockmove{tourner \\\\${sensOppose}{} de \\\\ovalnum{${n2}} degrés}\\n`, sensOppose, n2],\n          [`\\\\blockmove{avancer de \\\\ovalvariable{${val2}} pas}\\n`, val2],\n          [`\\\\blockmove{tourner \\\\${sens}{} de \\\\ovalnum{${n2}} degrés}\\n`, sens, n2]\n        ]\n        lutins[0].codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${n}} fois}\n{\\n`\n        for (let i = 0; i < 6; i++) {\n          lutins[0].codeScratch += sequenceFrise1[(2 * (bonneReponse + i)) % 12][0]\n          lutins[0].codeScratch += sequenceFrise1[(2 * (bonneReponse + i) + 1) % 12][0]\n        }\n        lutins[0].codeScratch += '}\\n'\n        for (let k = 0; k < n; k++) {\n          for (let i = 0; i < 6; i++) {\n            for (let j = 0; j < 4; j++) {\n              avance(sequenceFrise1[(2 * (j + i)) % 12][1], lutins[j])\n              if (sequenceFrise1[(2 * (j + i) + 1) % 12][1] === 'turnright') {\n                tournerD(sequenceFrise1[(2 * (j + i) + 1) % 12][2], lutins[j])\n              } else {\n                tournerG(sequenceFrise1[(2 * (j + i) + 1) % 12][2], lutins[j])\n              }\n            }\n          }\n        }\n        break\n    }\n    lutins[0].codeScratch += '\\\\blockpen{relever le stylo}\\n'\n    lutins[0].codeScratch += '\\\\end{scratch}'\n    texte = 'Quelle figure est tracée par le stylo à l\\'éxécution du programme ci-dessous ?<br>Le tracé démarre à la croix bleue.<br>'\n    texte += \"S'orienter à 90° signifie s'orienter vers la droite de l'écran.<br>\"\n\n    let largeur = 1\n    let hauteur = 1\n    for (let i = 0; i < 4; i++) { // on calcule la largeur et la hauteur maximale des parcours.\n      leveCrayon(lutins[i])\n      largeur = Math.max(largeur, lutins[i].xMax - lutins[i].xMin)\n      hauteur = Math.max(hauteur, lutins[i].yMax - lutins[i].yMin)\n    }\n    largeur = Math.round(largeur + 1.5)\n\n    if (context.isHtml) { // On crée 2 colonnes selon le contexte html / Latex\n      texte += '<table style=\"width: 100%\"><tr><td>'\n    } else {\n      texte += '\\\\begin{minipage}[b]{.25\\\\textwidth}'\n    }\n    texte += scratchblock(lutins[0].codeScratch) // la fonction scratchblock va convertir le code Latex en code html si besoin.\n    if (context.isHtml) { // on change de colonne...\n      texte += '</td><td>'\n      texte += '    '\n      texte += '</td><td style=\"vertical-align: top; text-align: center\">'\n    } else {\n      texte += '\\\\end{minipage} '\n      texte += '\\\\hfill \\\\begin{minipage}[b]{.74\\\\textwidth}'\n    }\n\n    let ordreLutins = [0, 1, 2, 3]\n    ordreLutins = shuffle(ordreLutins) // On mélange les emplacements pour éviter d'avoir la bonne réponse au même endroit-\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < lutins[i].listeTraces.length; j++) { // On recadre les traces des lutins...\n        lutins[i].listeTraces[j][0] -= Math.floor(lutins[i].xMin)\n        lutins[i].listeTraces[j][2] -= Math.floor(lutins[i].xMin)\n        lutins[i].listeTraces[j][1] -= Math.floor(lutins[i].yMin)\n        lutins[i].listeTraces[j][3] -= Math.floor(lutins[i].yMin)\n      }\n    }\n    const depart = []\n    for (let i = 0; i < 4; i++) { // ajouter le point de départ de chaque tracé\n      depart[i] = tracePoint(point(lutins[i].listeTraces[0][0], lutins[i].listeTraces[0][1]))\n      depart[i].taille = 5\n      depart[i].color = 'blue'\n      depart[i].epaisseur = 2\n      if (i === bonneReponse) {\n        objetsCorrection.push(depart[i])\n      }\n    }\n    const echelle = segment(0, hauteur + 0.5, 1, hauteur + 0.5)\n    echelle.epaisseur = 2\n    echelle.styleExtremites = '|-|'\n    objetsCorrection.push(lutins[bonneReponse])\n    paramsEnonces.xmin = -0.5\n    paramsEnonces.ymin = -1.5\n    paramsEnonces.xmax = largeur\n    paramsEnonces.ymax = hauteur + 1\n    paramsEnonces.pixelsParCm = Math.round(400 / largeur)\n    paramsEnonces.scale = calcul(4 / largeur)\n    paramsEnonces.style = ''\n    paramsCorrection.xmin = -0.5\n    paramsCorrection.ymin = -0.5\n    paramsCorrection.xmax = largeur\n    paramsCorrection.ymax = hauteur + 1\n    paramsCorrection.pixelsParCm = Math.round(400 / largeur)\n    paramsCorrection.scale = calcul(4 / largeur)\n\n    // mathalea2d() est la fonction qui ajoute soit une figure SVG (en html), soit une figure tikz en Latex. Ici, juste la grille est le point de départ.\n    for (let i = 0; i < 4; i++) {\n      paramsEnonces.id = `figure${i}Ex${numeroExercice}Q0`\n      texte += mathalea2d(paramsEnonces,\n        lutins[ordreLutins[i]],\n        depart[ordreLutins[i]],\n        texteParPoint(`figure ${i + 1}`, point((lutins[ordreLutins[i]].xMax - lutins[ordreLutins[i]].xMin) / 2, -0.8), 'milieu', 'black', 1)\n      )\n      if (i === 1) texte += '<br>'\n    }\n    if (context.isHtml) {\n      texte += '</td></tr>'\n      texte += `<div id=\"resultatCheckEx${numeroExercice}Q0\"></div>`\n    } else {\n      texte += '\\\\end{minipage} '\n    }\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: texte,\n        propositions: [\n          {\n            texte: 'figure 1',\n            statut: false\n          },\n          {\n            texte: 'figure 2',\n            statut: false\n          },\n          {\n            texte: 'figure 3',\n            statut: false\n          },\n          {\n            texte: 'figure 4',\n            statut: false\n          }\n        ],\n        options: { ordered: true }\n      }\n      this.autoCorrection[0].propositions[ordreLutins.indexOf(bonneReponse)].statut = true\n    }\n    this.indiceBonneFigure = ordreLutins.indexOf(bonneReponse)\n    // Ici, la figure contient la grille, le point de départ et le lutin qui s'anime sur sa trace...\n    texteCorr += `La bonne figure est la figure ${this.indiceBonneFigure + 1}`\n    texte += `<span id=\"resultatCheckEx${this.numeroExercice}Q0\"></span>`\n    this.figures[0] = [{ id: `figure0Ex${this.numeroExercice}Q0`, solution: (ordreLutins.indexOf(bonneReponse) === 0) },\n      { id: `figure1Ex${numeroExercice}Q0`, solution: (ordreLutins.indexOf(bonneReponse) === 1) },\n      { id: `figure2Ex${numeroExercice}Q0`, solution: (ordreLutins.indexOf(bonneReponse) === 2) },\n      { id: `figure3Ex${numeroExercice}Q0`, solution: (ordreLutins.indexOf(bonneReponse) === 3) }\n    ]\n    texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n    this.listeQuestions.push(texte) // on met à jour la liste des questions\n    this.listeCorrections.push(texteCorr) // et la liste des corrections\n    listeQuestionsToContenuSansNumero(this) // on envoie tout à la fonction qui va mettre en forme.\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","titre","AlgoTortue","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","typeExercice","listePackages","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","autoCorrection","figures","objetsCorrection","paramsCorrection","paramsEnonces","choix","choice","val1","val2","val3","n","n2","sens","sequenceFrise1","sensOppose","lutins","bonneReponse","randint","context","texte","texteCorr","i","creerLutin","color","epaisseur","pointilles","allerA","baisseCrayon","orienter","angleScratchTo2d","codeScratch","arrondi","avance","tournerD","tournerG","calcul","j","Math","floor","k","largeur","hauteur","leveCrayon","max","xMax","xMin","yMax","yMin","round","scratchblock","ordreLutins","shuffle","listeTraces","length","depart","tracePoint","point","taille","push","echelle","segment","styleExtremites","xmin","ymin","xmax","ymax","pixelsParCm","scale","style","id","mathalea2d","texteParPoint","enonce","propositions","statut","options","ordered","indexOf","indiceBonneFigure","solution","listeQuestionsToContenuSansNumero","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}