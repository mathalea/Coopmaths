{"version":3,"file":"js/71284.f7b4845c0db832b2b3e3.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G13.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, arrondiVirgule, texNombre } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, mathalea2d, symetrieAxiale, translation, vecteur, triangle2points2longueurs, droite, pointAdistance, rotation, afficheLongueurSegment, segment, afficheMesureAngle, longueur, droiteParPointEtParallele, angle, polygoneAvecNom } from '../../modules/2d.js'\nexport const titre = 'Utiliser les propriétés de conservation du parallélisme, des longueurs et des angles.'\n\n/**\n * Compléter le symétrique d'une figure en utilisant les propriétés de conservation de la symétrie et en justifiant ses démarches\n * @author Guillaume Valmont\n * Référence 5G13\n * Date de publication 05/08/2021\n*/\nexport default function ConservationSymetrie () {\n  Exercice.call(this)\n  this.consigne = ''\n  this.nbQuestions = 2\n\n  this.besoinFormulaireNumerique = ['Transformation', 2, '1 : Symétrie Axiale\\n2 : Symétrie centrale']\n  this.besoinFormulaire2Numerique = ['Propriétés conservées', 3, '1 : Parallélisme\\n2 : Longueur et Angle\\n3 : Parallélisme, Longueur et Angle']\n  this.sup = 1\n  this.sup2 = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    let typesDeQuestionsDisponibles\n    switch (this.sup2) {\n      case 1:\n        typesDeQuestionsDisponibles = ['parallelisme']\n        break\n      case 2:\n        typesDeQuestionsDisponibles = ['longueurEtAngle']\n        break\n      case 3:\n        typesDeQuestionsDisponibles = ['parallelisme', 'longueurEtAngle']\n        break\n    }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let objetsEnonceEtCorr, objetsEnonceOnly, objetsCorrectionOnly, paramsEnonce, paramsCorrection\n    for (let i = 0, texte, texteCorr, d, d1, A, B, C, imageA, imageB, imageC, figureRetournee, O, poly, imPoly, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objetsEnonceOnly = []\n      objetsCorrectionOnly = []\n      objetsEnonceEtCorr = []\n      d1 = ''\n      A = point(0, 0, 'A', 'below')\n      B = pointAdistance(A, randint(30, 60) / 10, randint(0, 45), 'B')\n      C = triangle2points2longueurs(A, B, randint(40, 60) / 10, randint(30, 50) / 10).listePoints[2]\n      C.nom = 'C'\n      poly = polygoneAvecNom(A, B, C) // pour bien placer les labels\n      objetsEnonceEtCorr.push(segment(A, B), afficheLongueurSegment(B, A), poly[1])\n      switch (listeTypeDeQuestions[i]) {\n        case 'parallelisme':\n          objetsEnonceEtCorr.push(tracePoint(A, B, C))\n          d1 = droiteParPointEtParallele(C, droite(A, B), '(d_1)')\n          objetsEnonceEtCorr.push(d1)\n          texte = 'La droite $(d_1)$ est parallèle au segment [$AB$] et passe par le point $C$.<br>'\n          texteCorr = texte\n          texteCorr += 'Or, la symétrie conserve le parallélisme.<br>'\n          texteCorr += 'Donc la droite $(d_1\\')$ est parallèle au segment [$A\\'B\\'$] et passe par le point $C\\'$.<br>'\n          break\n        case 'longueurEtAngle':\n          objetsEnonceEtCorr.push(segment(A, C), segment(B, C))\n          objetsEnonceEtCorr.push(afficheLongueurSegment(C, B))\n          objetsEnonceEtCorr.push(afficheMesureAngle(A, B, C, 'black', 1, arrondiVirgule(angle(A, B, C), 0) + '°'))\n          texte = `L'angle $\\\\widehat{ABC}$ mesure $${texNombre(arrondiVirgule(angle(A, B, C), 0))}$ °.<br>`\n          texteCorr = texte\n          texteCorr += 'Or, la symétrie conserve les angles.<br>'\n          texteCorr += `Donc l'angle $\\\\widehat{A'B'C'}$ mesure lui aussi $${texNombre(arrondiVirgule(angle(A, B, C), 0))}$ °.<br>`\n          texteCorr += `Le segment [BC] mesure $${texNombre(longueur(B, C, 1))}$ cm.<br>`\n          texteCorr += 'Or, la symétrie conserve les longueurs.<br>'\n          texteCorr += `Donc le segment [B'C'] mesure lui aussi $${texNombre(longueur(B, C, 1))}$ cm.<br>`\n          break\n      }\n      texte += 'Compléter le symétrique de la figure en utilisant les propriétés de conservation de la symétrie et en justifiant ses démarches.<br>'\n      // On applique prépare la transformation\n      if (this.sup === 1) { // Symétrie axiale\n        d = droite(translation(A, vecteur(-randint(30, 40) / 10, 0)), translation(C, vecteur(-randint(30, 40) / 10, 0)), '(d)')\n        d.angleAvecHorizontale = d.angleAvecHorizontale + randint(-10, 10)\n        objetsEnonceEtCorr.push(d)\n        imageA = symetrieAxiale(A, d, 'A\\'')\n        imageB = symetrieAxiale(B, d, 'B\\'')\n        imageC = symetrieAxiale(C, d, 'C\\'')\n        objetsCorrectionOnly.push(droite(symetrieAxiale(point(d1.x1, d1.y1), d), symetrieAxiale(point(d1.x2, d1.y2), d), '(d_1\\')'))\n        figureRetournee = false\n      } else if (this.sup === 2) { // Symétrie centrale\n        O = point(randint(30, 40) / 10, randint(40, 60) / 10, 'O')\n        objetsEnonceEtCorr.push(tracePoint(O), labelPoint(O))\n        imageA = rotation(A, O, 180, 'A\\'')\n        imageB = rotation(B, O, 180, 'B\\'')\n        imageC = rotation(C, O, 180, 'C\\'')\n        objetsCorrectionOnly.push(droite(rotation(point(d1.x1, d1.y1), O, 180), rotation(point(d1.x2, d1.y2), O, 180)))\n        figureRetournee = true\n      }\n      // On applique la transformation\n      imPoly = polygoneAvecNom(imageA, imageB, imageC)\n      objetsCorrectionOnly.push(imPoly[1])\n      objetsEnonceEtCorr.push(segment(imageA, imageB))\n      objetsEnonceOnly.push(tracePoint(imageA, imageB), labelPoint(imageA, imageB))\n      if (figureRetournee) {\n        objetsEnonceOnly.push(afficheLongueurSegment(imageA, imageB))\n        objetsCorrectionOnly.push(afficheLongueurSegment(imageB, imageA))\n      } else {\n        objetsEnonceOnly.push(afficheLongueurSegment(imageB, imageA))\n        objetsCorrectionOnly.push(afficheLongueurSegment(imageA, imageB))\n      }\n      if (listeTypeDeQuestions[i] === 'longueurEtAngle') {\n        objetsCorrectionOnly.push(segment(imageA, imageC), segment(imageB, imageC))\n        objetsCorrectionOnly.push(afficheMesureAngle(imageA, imageB, imageC, 'black', 1, arrondiVirgule(angle(A, B, C), 0) + '°'))\n        if (figureRetournee) {\n          objetsCorrectionOnly.push(afficheLongueurSegment(imageC, imageB))\n        } else {\n          objetsCorrectionOnly.push(afficheLongueurSegment(imageB, imageC))\n        }\n      } else if (listeTypeDeQuestions[i] === 'parallelisme') {\n        objetsCorrectionOnly.push(tracePoint(imageA, imageB, imageC))\n      }\n      const xmin = Math.min(A.x, B.x, C.x, imageA.x, imageB.x, imageC.x) - 2\n      const xmax = Math.max(A.x, B.x, C.x, imageA.x, imageB.x, imageC.x) + 2\n      const ymin = Math.min(A.y, B.y, C.y, imageA.y, imageB.y, imageC.y) - 2\n      const ymax = Math.max(A.y, B.y, C.y, imageA.y, imageB.y, imageC.y) + 2\n      // paramètres de la fenêtre Mathalea2d pour l'énoncé normal\n      paramsEnonce = { xmin: xmin, ymin: ymin, xmax: xmax, ymax: ymax, pixelsParCm: 20, scale: 1 }\n      // paramètres de la fenêtre Mathalea2d pour la correction\n      paramsCorrection = paramsEnonce\n      // On ajoute au texte de l'énoncé, la figure à main levée et la figure de l'enoncé.\n      texte += mathalea2d(paramsEnonce, objetsEnonceOnly, objetsEnonceEtCorr)\n      // On ajoute au texte de la correction, la figure de la correction\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrectionOnly, objetsEnonceEtCorr)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConservationSymetrie","Exercice","this","consigne","nbQuestions","besoinFormulaireNumerique","besoinFormulaire2Numerique","sup","sup2","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","parseInt","listeTypeDeQuestions","combinaisonListes","objetsEnonceEtCorr","objetsEnonceOnly","objetsCorrectionOnly","paramsEnonce","paramsCorrection","texte","texteCorr","d","d1","A","B","C","imageA","imageB","imageC","figureRetournee","O","poly","imPoly","i","cpt","point","pointAdistance","randint","triangle2points2longueurs","listePoints","nom","polygoneAvecNom","push","segment","afficheLongueurSegment","tracePoint","droiteParPointEtParallele","droite","afficheMesureAngle","arrondiVirgule","angle","texNombre","longueur","translation","vecteur","angleAvecHorizontale","symetrieAxiale","x1","y1","x2","y2","labelPoint","rotation","xmin","Math","min","x","xmax","max","ymin","y","ymax","pixelsParCm","scale","mathalea2d","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}