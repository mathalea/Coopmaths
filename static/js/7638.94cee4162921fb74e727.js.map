{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C10-2.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","ExerciceTablesMultiplicationsEtMultiplesDe10","tablesParDefaut","Exercice","this","sup","consigne","spacing","tailleDiaporama","qcmDisponible","modeQcm","nouvelleVersion","qcm","listeQuestions","listeCorrections","tabrep","tabicone","tables","split","couples","creerCouples","nbQuestions","a","b","k1","k2","texte","texteCorr","melange","i","choice","randint","c","texNombre2","calcul","elimineDoublons","texNombre","push","shuffle2tableaux","mathalea","sortieAMC","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","listeQuestionsToContenu","gestionQcmInteractif","besoinFormulaireTexte","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","autoCorrection","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length","reponses","statuts","reponsesEpurees","slice","statutsEpures","j","console","log","splice"],"mappings":"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","file":"js/7638.94cee4162921fb74e727.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, creerCouples, randint, choice, texNombre, texNombre2, calcul, shuffle2tableaux } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm, elimineDoublons } from '../../modules/gestionQcm.js'\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Tables de multiplications et multiples de 10'\n\n/**\n * Les 2 facteurs peuvent terminer par aucun, 1, 2 ou 3 zéros\n * @Auteur Rémi Angot\n* Référence 6C10-2\n */\nexport default function ExerciceTablesMultiplicationsEtMultiplesDe10 (\n  tablesParDefaut = '2-3-4-5-6-7-8-9'\n) {\n  // Multiplier deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.titre = titre\n  this.consigne = 'Calculer'\n  this.spacing = 2\n  this.tailleDiaporama = 100\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function () {\n    this.qcm = ['6C10-2', [], 'tables et multiples de 10,100 et 1000', 1]\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    let tables = []; let tabrep; let tabicone\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des ;\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    for (\n      let i = 0, a, b, k1, k2, texte, texteCorr, melange;\n      i < this.nbQuestions;\n      i++\n    ) {\n      a = couples[i][0]\n      b = couples[i][1]\n      if (a > 1) {\n        k1 = choice([1, 10, 100, 1000])\n      } else {\n        k1 = choice([10, 100, 1000])\n      }\n      k2 = choice([1, 10, 100, 1000])\n      a = k1 * a\n      b = k2 * b\n      melange = randint(0, 1)\n      if (melange === 1) {\n        // échange a et b pour que les multiplications ne soient pas toujours dans le même ordre (surtout lorsque tables n'a qu'un seul élément)\n        const c = a\n        a = b\n        b = c\n      }\n      tabrep = [`$${texNombre2(a * b)}$`, `$${texNombre2(calcul(a * b / 10))}$`, `$${texNombre2(calcul(a * b * 10))}$`, `$${texNombre2(calcul(a * b / 100))}$`, `$${texNombre2(calcul(a * b * 100))}$`]\n      tabicone = [1, 0, 0, 0, 0];\n      [tabrep, tabicone] = elimineDoublons(tabrep, tabicone)\n       texte =\n        '$ ' + texNombre(a) + ' \\\\times ' + texNombre(b) + ' = \\\\dotfill $'\n      texteCorr =\n        '$ ' +\n        texNombre(a) +\n        ' \\\\times ' +\n        texNombre(b) +\n        ' = ' +\n        texNombre(a * b) +\n        ' $'\n      this.qcm[1].push([`${texte}\\n`,\n        tabrep,\n        tabicone])\n\n      shuffle2tableaux(tabrep, tabicone)\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        this.tableauSolutionsDuQcm[i] = tabicone\n        texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n        // texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n  }\n  gestionQcmInteractif(this)\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un objet {reponse=[a,b,c,d,e],statuts=[1,0,0,0,0]}\n * élimine les doublons de réponses et les statuts associés avant de retourner l'objet épuré.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (reponses, statuts) { // fonction qui va éliminer les doublons si il y en a\n  const reponsesEpurees = reponses.slice()\n  const statutsEpures = statuts.slice()\n  for (let i = 0; i < reponsesEpurees.length - 1; i++) {\n    for (let j = i + 1; j < reponsesEpurees.length;) {\n      if (reponsesEpurees[i] === reponsesEpurees[j]) {\n        console.log('doublon trouvé', reponsesEpurees[i], reponsesEpurees[j]) // les réponses i et j sont les mêmes\n\n        if (statutsEpures[i] === 1) { // si la réponse i est bonne, on vire la j\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        } else if (statutsEpures[j] === 1) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n          statutsEpures[i] = 1\n        } else { // Les deux réponses sont mauvaises\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return [reponsesEpurees, statutsEpures]\n}\n"],"sourceRoot":""}