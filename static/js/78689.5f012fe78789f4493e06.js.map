{"version":3,"file":"js/78689.5f012fe78789f4493e06.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N22-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre } from '../../modules/outils.js'\nimport { mathalea2d } from '../../modules/2d.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Rapport de deux longueurs sur un segment'\n\n/**\n * * Exprimer un rapport de longueurs sur un segment\n * * 6N22-1\n * @author Sébastien Lozano\n */\n\nexport default function RapportsSurUnSegment () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  if (this.beta) {\n    this.nbQuestions = 2\n  } else {\n    this.nbQuestions = 2\n  };\n\n  this.consigne = 'Sur tous les axes, les graduations sont régulières.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0, 1]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = [0, 1]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour le singulier pluriel\n      function singPlur (nombre, singulier, pluriel) {\n        if (nombre > 1) {\n          return pluriel\n        } else {\n          return singulier\n        };\n      };\n\n      // on choisit deux entiers pour former les fractions\n      const entierMax = 9\n      const m = randint(1, entierMax)\n      const n = randint(1, entierMax, m) // on évite l'autre pour éviter la fraction 1\n      const params = {\n        xmin: -0.4,\n        ymin: -2,\n        xmax: 15 * entierMax, // pour éviter un cadrage trop large\n        ymax: 1,\n        pixelsParCm: 20,\n        scale: 1\n      }\n      // on colle la figure à l'énoncé\n      const yEnonce = -1.2\n\n      // on a parfois des figure trop petites ou trop grandes\n      //\n      const rayon = 5\n      // if (m<n) {\n      //   rayon = 15\n      // } else {\n      //   rayon = 15/Math.ceil(m/n)\n      // };\n\n      // on choisit de façon aléatoire un triplet de noms pour les points\n      const nomsChoix = [['A', 'B', 'C'], ['D', 'E', 'F'], ['I', 'J', 'K'], ['L', 'M', 'N']]\n      const noms = nomsChoix[randint(0, nomsChoix.length - 1)]\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      const situations = [\n        { // case 0 --> m < n\n          m: Math.min(m, n),\n          n: Math.max(m, n),\n          rapport: `\\\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,\n          rapport_inverse: `\\\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,\n          fig: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, 0, rayon, 0, 'segment', '', noms[0], noms[1], 1, noms[2])\n          ),\n          segment_corr1: `\\\\textcolor{red}{[${noms[0] + noms[2]}]}`,\n          longueur_corr1: `\\\\textcolor{red}{${noms[0] + noms[2]}}`,\n          m_color_corr: `\\\\textcolor{red}{${Math.min(m, n)}}`,\n          n_color_corr: `\\\\textcolor{blue}{${Math.max(m, n)}}`,\n          fig_corr1: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, yEnonce, rayon, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2])\n          ),\n          segment_corr2: `\\\\textcolor{blue}{[${noms[0] + noms[1]}]}`,\n          longueur_corr2: `\\\\textcolor{blue}{${noms[0] + noms[1]}}`,\n          fig_corr2: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, yEnonce, (Math.min(m, n) / Math.max(m, n)) * rayon, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1])\n          )\n        },\n        { // case 1 --> m > n\n          m: Math.max(m, n),\n          n: Math.min(m, n),\n          rapport: `\\\\dfrac{${noms[0] + noms[1]}}{${noms[0] + noms[2]}}`,\n          rapport_inverse: `\\\\dfrac{${noms[0] + noms[2]}}{${noms[0] + noms[1]}}`,\n          fig: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, 0, 5, 0, 'segment', '', noms[0], noms[1], 1, noms[2])\n          ),\n          segment_corr1: `\\\\textcolor{red}{[${noms[0] + noms[2]}]}`,\n          longueur_corr1: `\\\\textcolor{red}{${noms[0] + noms[2]}}`,\n          m_color_corr: `\\\\textcolor{red}{${Math.max(m, n)}}`,\n          n_color_corr: `\\\\textcolor{blue}{${Math.min(m, n)}}`,\n          fig_corr1: mathalea2d(\n            params,\n            fraction(Math.max(m, n), Math.min(m, n)).representation(0, yEnonce, 5, 0, 'segment', 'red', noms[0], noms[1], 1, noms[2])\n          ),\n          segment_corr2: `\\\\textcolor{blue}{[${noms[0] + noms[1]}]}`,\n          longueur_corr2: `\\\\textcolor{blue}{${noms[0] + noms[1]}}`,\n          fig_corr2: mathalea2d(\n            params,\n            fraction(Math.min(m, n), Math.max(m, n)).representation(0, yEnonce, (Math.max(m, n) / Math.min(m, n)) * 5, 0, 'segment', 'blue', noms[0], noms[2], 1, noms[1])\n          )\n        }\n\n      ]\n\n      const enonces = []\n      for (let k = 0; k < situations.length; k++) {\n        enonces.push({\n          enonce: `\n          Exprimer les rapports suivants $${situations[k].rapport}$ et $${situations[k].rapport_inverse}$.\n          <br>\n          ${situations[k].fig}     \n`,\n          question: '',\n          correction: `\n          Les graduations étant régulières, comptons le nombre de graduations pour chaque segment :<br>\n          ${situations[k].fig_corr1}<br>\n          Le segment $${situations[k].segment_corr1}$ compte $${situations[k].m_color_corr}$ ${singPlur(situations[k].m, 'graduation', 'graduations')}.<br>\n          ${situations[k].fig_corr2}<br>\n          Le segment $${situations[k].segment_corr2}$ compte $${situations[k].n_color_corr}$ ${singPlur(situations[k].n, 'graduation', 'graduations')}.<br><br>\n          Donc $\\\\dfrac{${situations[k].longueur_corr2}}{${situations[k].longueur_corr1}}=\\\\dfrac{${situations[k].n_color_corr}}{${situations[k].m_color_corr}}$\n          et $\\\\dfrac{${situations[k].longueur_corr1}}{${situations[k].longueur_corr2}}=\\\\dfrac{${situations[k].m_color_corr}}{${situations[k].n_color_corr}}$<br><br>\n          $\\\\textbf{D'où $\\\\mathbf{${situations[k].rapport}=}${fraction(situations[k].n, situations[k].m).texFractionSimplifiee}$ et $\\\\mathbf{${situations[k].rapport_inverse}=}${fraction(situations[k].m, situations[k].n).texFractionSimplifiee}$}$<br>\n\n`\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 1:\n          texte = `${enonces[1].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[2].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[2].correction}`\n          };\n          break\n        case 3:\n          texte = `${enonces[3].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[3].correction}`\n          };\n          break\n        case 4:\n          texte = `${enonces[4].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[4].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  // this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\n};\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","RapportsSurUnSegment","typesDeQuestionsDisponibles","Exercice","this","beta","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","singPlur","nombre","singulier","pluriel","entierMax","m","randint","n","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","yEnonce","rayon","nomsChoix","noms","length","situations","Math","min","max","rapport","rapport_inverse","fig","mathalea2d","fraction","representation","segment_corr1","longueur_corr1","m_color_corr","n_color_corr","fig_corr1","segment_corr2","longueur_corr2","fig_corr2","enonces","k","push","enonce","question","correction","texFractionSimplifiee","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}