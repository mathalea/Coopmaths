{"version":3,"file":"js/7342.e00a06a003f76865cc37.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3G40.js"],"sourcesContent":["/* global mathalea */\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { numAlpha, combinaisonListes, randint, choisitLettresDifferentes, listeQuestionsToContenuSansNumero } from '../../modules/outils.js'\nimport { mathalea2d, tracePoint, labelPoint } from '../../modules/2d.js'\nimport { point3d, droite3d, vecteur3d, arete3d, sphere3d, rotation3d, rotationV3d, demicercle3d, sensDeRotation3d } from '../../modules/3d.js'\n\nexport const titre = 'Repérage sur la sphère'\n\nexport default function ReperageSurLaSphere () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 4\n  this.nbQuestionsModifiable = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.video = ''\n  this.sup = 3\n\n  //  this.sup = false; // A décommenter : valeur par défaut d'un premier paramètre\n  //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    let listeTypeDeQuestions = []\n    if (this.sup === 1) listeTypeDeQuestions = combinaisonListes([1], this.nbQuestions)\n    else if (this.sup === 2) listeTypeDeQuestions = combinaisonListes([2], this.nbQuestions)\n    else listeTypeDeQuestions = combinaisonListes([1, 2], this.nbQuestions)\n    let texte = ''\n    let texteCorrection = ''\n    const O = point3d(0, 0, 0, false, 'O')\n    let M = point3d(10, 0, 0, true, 'M')\n    const PoleNord = point3d(0, 0, 11, false, 'N')\n    const PoleSud = point3d(0, 0, -11, false, 'S')\n    PoleNord.p2d.positionLabel = 'above'\n    const Pn = labelPoint(PoleNord.p2d)\n    PoleSud.p2d.positionLabel = 'below'\n    const Ps = labelPoint(PoleSud.p2d)\n    Pn.taille = 3\n    Ps.taille = 3\n    Pn.color = 'brown'\n    Ps.color = 'brown'\n\n    const Axe = arete3d(PoleSud, PoleNord)\n    Axe.p2d.epaisseur = 2\n    Axe.p2d.color = 'blue'\n    const normalV = vecteur3d(0, 0, 1)\n    M = rotationV3d(M, normalV, context.anglePerspective)\n    const R = vecteur3d(O, M)\n    const origine = rotation3d(point3d(0, -10, 0), droite3d(O, normalV), context.anglePerspective)\n    const normalH = rotationV3d(vecteur3d(O, origine), normalV, 90)\n    const Sph = sphere3d(O, 10, 8, 9)\n    const equateur1 = demicercle3d(O, normalV, R, 'visible', 'red', 0)\n    const equateur2 = demicercle3d(O, normalV, R, 'caché', 'red', 0)\n    const greenwitch = demicercle3d(O, normalH, vecteur3d(0, 0, -10), 'visible', 'green', 0)\n    const rotationTerre = sensDeRotation3d(droite3d(O, normalV), vecteur3d(8, -8, 0), 60, 3, 'purple')\n    greenwitch.epaisseur = 4\n    greenwitch.opacite = 1\n    equateur1.epaisseur = 3\n    equateur2.epaisseur = 3\n    const objetsEnonce = []; let paramsEnonce; const objetsCorrection = []// on initialise les tableaux des objets Mathalea2d\n    const latitudes = []; const longitudes = []; const P = []; const EstouOuest = []; const NordouSud = []; let nom = []\n    const E = labelPoint(point3d(13.2, 0, 0, true, 'E').p2d)\n    E.taille = 3\n    E.color = 'brown'\n    const W = labelPoint(point3d(-12, 0, 0, true, 'O').p2d)\n    W.taille = 3\n    W.color = 'brown'\n    objetsEnonce.push(Sph, Axe.p2d, equateur1, equateur2, greenwitch, Pn, Ps, rotationTerre, E, W)\n    objetsCorrection.push(Sph, Axe.p2d, equateur1, equateur2, greenwitch, Pn, Ps, rotationTerre, E, W)\n    for (let i = 0; i < this.nbQuestions; i++) {\n      latitudes.push(0)\n      longitudes.push(0)\n      P.push(point3d(0, 0, 0))\n      EstouOuest.push('O')\n      NordouSud.push('N')\n    }\n    nom = choisitLettresDifferentes(this.nbQuestions, 'Q')\n    texte = ''\n    for (let i = 0, latitude, longitude, M, lab, croix; i < this.nbQuestions;) {\n      latitude = randint(-3, 6, 0) * 10\n      longitude = randint(-6, 4) * 10\n      while (latitudes.indexOf(latitude) != -1 && longitudes.indexOf(longitude) != -1) {\n        latitude = randint(-3, 6, 0) * 10\n        longitude = randint(-6, 4) * 10\n      }\n      latitudes[i] = latitude\n      longitudes[i] = longitude\n      if (longitudes[i] < 0) EstouOuest[i] = 'O'\n      else EstouOuest[i] = 'E'\n      if (latitudes[i] < 0) NordouSud[i] = 'S'\n      else NordouSud[i] = 'N'\n      M = rotation3d(origine, droite3d(O, normalH), -latitudes[i])\n      P[i] = rotation3d(M, droite3d(O, normalV), longitudes[i])\n      P[i].visible = true\n      P[i].p2d.nom = `${nom[i]}`\n      P[i].p2d.positionLabel = 'above left'\n      lab = labelPoint(P[i].p2d)\n      lab.color = 'blue'\n      lab.taille = 2\n      croix = tracePoint(P[i].p2d)\n      croix.taille = 2.5\n      croix.epaisseur = 2\n      croix.color = 'blue'\n      croix.style = 'o'\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte += `${numAlpha(i)} Donner les coordonnées GPS du point $${nom[i]}$.<br>`\n          texteCorrection += `${numAlpha(i)} Les coordonnées de $${nom[i]}$ sont $(${Math.abs(longitudes[i])}\\\\degree$${EstouOuest[i]} ; $${Math.abs(latitudes[i])}\\\\degree$${NordouSud[i]}) ou $(${longitudes[i]}\\\\degree$ ; $${latitudes[i]}\\\\degree )$.<br>`\n          objetsEnonce.push(croix, lab)\n          objetsCorrection.push(croix, lab)\n          break\n        case 2:\n          texte += `${numAlpha(i)} Placer le point $${nom[i]}$ de  coordonnées GPS $(${Math.abs(longitudes[i])}\\\\degree$${EstouOuest[i]} ; $${Math.abs(latitudes[i])}\\\\degree$${NordouSud[i]}) ou $(${longitudes[i]}\\\\degree$ ; $${latitudes[i]}\\\\degree )$.<br>`\n          texteCorrection += `${numAlpha(i)} Le point $${nom[i]}$ de coordonnées GPS $(${Math.abs(longitudes[i])}\\\\degree$${EstouOuest[i]} ; $${Math.abs(latitudes[i])}\\\\degree$${NordouSud[i]}) ou $(${longitudes[i]}\\\\degree$ ; $${latitudes[i]}\\\\degree )$ est placé sur cette sphère.<br>`\n          objetsCorrection.push(croix, lab)\n          break\n      }\n      i++\n    }\n\n    // paramètres pour la perspective\n    context.anglePerspective = 30\n    context.coeffPerspective = 0.5\n    paramsEnonce = { xmin: -13, ymin: -13, xmax: 14, ymax: 13, pixelsParCm: 20, scale: 0.3, mainlevee: false }\n\n    // texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n    texte += '<br>' + mathalea2d(paramsEnonce, objetsEnonce)\n    texteCorrection += '<br>' + mathalea2d(paramsEnonce, objetsCorrection)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorrection)\n    listeQuestionsToContenuSansNumero(this)\n  }\n\n  this.besoinFormulaireNumerique = ['Type de questions', 3, '1 : Lire des coordonnées\\n 2 : Placer des points\\n 3 : Mélange']\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n"],"names":["titre","ReperageSurLaSphere","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","video","sup","nouvelleVersion","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorrection","O","point3d","M","PoleNord","PoleSud","p2d","positionLabel","Pn","labelPoint","Ps","taille","color","Axe","arete3d","epaisseur","normalV","vecteur3d","rotationV3d","context","R","origine","rotation3d","droite3d","normalH","Sph","sphere3d","equateur1","demicercle3d","equateur2","greenwitch","rotationTerre","sensDeRotation3d","opacite","objetsEnonce","paramsEnonce","objetsCorrection","latitudes","longitudes","P","EstouOuest","NordouSud","nom","E","W","push","i","choisitLettresDifferentes","latitude","longitude","lab","croix","randint","indexOf","visible","tracePoint","style","numAlpha","Math","abs","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","mathalea2d","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique"],"sourceRoot":""}