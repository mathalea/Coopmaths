{"version":3,"file":"js/9982.92ff50c07b44ba034b14.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2G12-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, abs, ecritureParentheseSiNegatif, fractionSimplifiee, texNombre } from '../../modules/outils.js'\nimport { point, tracePoint, codeSegments, labelPoint, segment, axes, grille, mathalea2d } from '../../modules/2d.js'\n\nexport const titre = 'Déterminer les coordonnées milieu d’un segment dans un repère'\n\n/**\n * 2G12-2\n * @author Stéphane Guyon\n */\nexport default function Milieu () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.sup = parseInt(this.sup)\n  this.nbQuestions = 2\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1 //\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles = [1, 2, 3, 4]; let typesDeQuestions\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = [1]\n    }\n    if (this.sup === 2) {\n      typesDeQuestionsDisponibles = [2]\n    }\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, a, g, s, s1, s2, s3, xA, yA, xB, yB, xI0, xI1, yI0, yI1, xI, yI, A, B, T, L, M, I, J, O, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        // Cas par cas, on définit le type de nombres que l'on souhaite\n        // Combien de chiffres ? Quelles valeurs ?\n        case 1:\n          xA = 0\n          xB = 0\n          yA = 0\n          yB = 0\n          while (abs(xB - xA) < 3) {\n            xA = randint(0, 8) * choice([-1, 1])\n            xB = randint(0, 8) * choice([-1, 1])\n          }\n          while (abs(yB - yA) < 3) {\n            yA = randint(0, 8) * choice([-1, 1])\n            yB = randint(0, 8) * choice([-1, 1])\n          }\n\n          xI0 = fractionSimplifiee(xA + xB, 2)[0]\n          xI1 = fractionSimplifiee(xA + xB, 2)[1]\n          yI0 = fractionSimplifiee(yA + yB, 2)[0]\n          yI1 = fractionSimplifiee(yA + yB, 2)[1]\n\n          g = grille(-9, -9, 9, 9)\n          A = point(xA, yA, 'A')\n          B = point(xB, yB, 'B')\n          M = point((xA + xB) / 2, (yA + yB) / 2, 'M')\n          I = point(1, 0, 'I')\n          J = point(0, 1, 'J')\n          O = point(0, 0, 'O')\n          a = axes(-9, -9, 9, 9)\n          s = segment(A, B, 'blue')\n\n          s.epaisseur = 2\n          // s3 = codeSegments('X', 'red', s1, s2)\n          T = tracePoint(A, B, M, I, J, O) // Repère les points avec une croix\n          L = labelPoint(A, B, M, I, J, O)\n          texte = 'Dans un repère orthonormé $(O,I,J)$, on donne les points suivants :'\n          texte += ` $A\\\\left(${xA};${yA}\\\\right)$ et $B\\\\left(${xB};${yB}\\\\right)$`\n          texte += '<br>Déterminer les coordonnées du point $M$ milieu du segment $[AB]$ '\n\n          texteCorr = mathalea2d({\n            xmin: -9,\n            ymin: -9,\n            xmax: 9,\n            ymax: 9\n          }, a, g, T, L, s)\n\n          texteCorr += '<br>On sait d\\'après le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d\\'un repère orthonormé,'\n          texteCorr += '<br> alors les coordonnées du point $M$ milieu de $[AB]$ sont '\n          texteCorr += '$M\\\\left(\\\\dfrac{x_A+x_B}{2};\\\\dfrac{y_A+y_B}{2}\\\\right)$ <br>'\n          texteCorr += 'On applique la relation à l\\'énoncé : '\n          texteCorr += `$\\\\begin{cases}x_M=\\\\dfrac{${xA}+${ecritureParentheseSiNegatif(xB)}}{2} \\\\\\\\ y_M=\\\\dfrac{${yA}+${ecritureParentheseSiNegatif(yB)}}{2}\\\\end{cases}$`\n          texteCorr += `<br>On en déduit :  $\\\\begin{cases}x_M=\\\\dfrac{${texNombre(xA + xB)}}{2}\\\\\\\\y_M=\\\\dfrac{${texNombre(yA + yB)}}{2}\\\\end{cases}$`\n          if (xI1 !== 1 && yI1 !== 1) { texteCorr += `  <br>Ce qui donne au final : $ M\\\\left(\\\\dfrac{${xI0}}{${xI1}};\\\\dfrac{${yI0}}{${yI1}};\\\\right)$` }\n          if (xI1 === 1 && yI1 !== 1) { texteCorr += `  <br>Ce qui donne au final : $ M\\\\left(${xI0};\\\\dfrac{${yI0}}{${yI1}}\\\\right)$` }\n          if (xI1 !== 1 && yI1 === 1) { texteCorr += `  <br>Ce qui donne au final : $ M\\\\left(\\\\dfrac{${xI0}}{${xI1}};${yI0}\\\\right)$` }\n          if (xI1 === 1 && yI1 === 1) { texteCorr += `  <br>Ce qui donne au final : $ M\\\\left(${xI0};${yI0}\\\\right)$` }\n\n          ;\n          break\n        case 2:\n\n          xA = randint(0, 4) * choice([-1, 1])\n          yA = randint(0, 4) * choice([-1, 1])\n          xI = randint(0, 4) * choice([-1, 1])\n          yI = randint(0, 4) * choice([-1, 1])\n          while (abs(xI - xA) < 2 || abs(xI - xA) > 5) {\n            xI = randint(0, 4) * choice([-1, 1])\n            xA = randint(0, 4) * choice([-1, 1])\n          }\n          while (abs(yI - yA) < 2 || abs(yI - yA) > 5) {\n            yA = randint(0, 4) * choice([-1, 1])\n            yI = randint(0, 4) * choice([-1, 1])\n          }\n\n          xI0 = fractionSimplifiee(xA + xB, 2)[0]\n          xI1 = fractionSimplifiee(xA + xB, 2)[1]\n          yI0 = fractionSimplifiee(yA + yB, 2)[0]\n          yI1 = fractionSimplifiee(yA + yB, 2)[1]\n          g = grille(-9, -9, 9, 9)\n          A = point(xA, yA, 'A', 'red')\n          B = point(2 * xI - xA, 2 * yI - yA, 'B', 'red')\n          M = point(xI, yI, 'M')\n          O = point(0, 0, 'O')\n          I = point(1, 0, 'I')\n          J = point(0, 1, 'J')\n          a = axes(-9, -9, 9, 9)\n          s = segment(A, B, 'blue')\n          s.epaisseur = 2\n          T = tracePoint(A, B, M, O, I, J) // Repère les points avec une croix\n          L = labelPoint(A, B, M, O, I, J)\n          texte = 'Dans un repère orthonormé $(O,I,J)$, on donne les points suivants :'\n          texte += ` $A\\\\left(${xA};${yA}\\\\right)$ et $M\\\\left(${xI};${yI}\\\\right)$`\n          texte += '<br>Déterminer les coordonnées du point $B$ tel que $M$ soit le milieu du segment $[AB]$ '\n\n          texteCorr = mathalea2d({\n            xmin: -9,\n            ymin: -9,\n            xmax: 9,\n            ymax: 9\n          }, g, a, s, T, L)\n\n          texteCorr += '<br>On sait d\\'après le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d\\'un repère orthonormé,'\n          texteCorr += ' <br>alors les coordonnées du point $M$ milieu de $[AB]$ sont '\n          texteCorr += '$M\\\\left(\\\\dfrac{x_A+x_B}{2};\\\\dfrac{y_A+y_B}{2}\\\\right)$ <br>'\n          texteCorr += 'On applique la relation à l\\'énoncé : '\n          texteCorr += `$\\\\begin{cases}${xI}=\\\\dfrac{${xA}+x_B}{2} \\\\\\\\ ${yI}=\\\\dfrac{${yA}+y_B}{2}\\\\end{cases}$`\n          texteCorr += `$\\\\iff \\\\begin{cases}x_B=2\\\\times ${xI} -${ecritureParentheseSiNegatif(xA)} \\\\\\\\ y_B=2\\\\times ${yI}-${ecritureParentheseSiNegatif(yA)}\\\\end{cases}$`\n          texteCorr += `<br>On en déduit :  $\\\\begin{cases}x_B={${texNombre(2 * xI - xA)}}\\\\\\\\y_B=${texNombre(2 * yI - yA)}\\\\end{cases}$`\n          texteCorr += `<br>Au final : $B\\\\left( ${texNombre(2 * xI - xA)};${texNombre(2 * yI - yA)}\\\\right)$`\n          break\n      }\n      if (this.questionJamaisPosee(i, xA, yA, xB, yB, typesDeQuestions)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Application directe 2 : Application indirecte.']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Milieu","Exercice","this","sup","parseInt","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestions","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","a","g","s","xA","yA","xB","yB","xI0","xI1","yI0","yI1","xI","yI","A","B","T","L","M","I","J","O","texte","texteCorr","i","cpt","abs","randint","choice","fractionSimplifiee","grille","point","axes","segment","epaisseur","tracePoint","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","ecritureParentheseSiNegatif","texNombre","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}