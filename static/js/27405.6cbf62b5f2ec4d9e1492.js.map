{"version":3,"file":"js/27405.6cbf62b5f2ec4d9e1492.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N31-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, shuffle, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, tableauColonneLigne } from '../../modules/outils.js'\nexport const titre = 'Ordre de grandeur et opérations sur les décimaux'\n\n/**\n * * Ordre de grandeur d'une opération entre décimaux\n * * 6N31-2\n * @author Sébastien Lozano\n */\n\nexport default function OrdreDeGrandeurOperationsDecimaux () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  if (this.beta) {\n    this.nbQuestions = 1\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.consigne = 'Pour chaque opération proposée dans la première colonne, cocher la case correspondant à l\\'ordre de grandeur du résultat.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = shuffle([0])\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const ligneEntete = ['\\\\text{Opération}', '\\\\phantom{000}' + texNombre('1') + '\\\\phantom{000}', '\\\\phantom{00}' + texNombre('10') + '\\\\phantom{00}', '\\\\phantom{00}' + texNombre('100') + '\\\\phantom{00}', '\\\\phantom{0}' + texNombre('1000') + '\\\\phantom{0}', texNombre('10000'), texNombre('100000')]\n      const ligneEnteteCorr = ['\\\\text{Opération}', '\\\\phantom{000}' + texNombre('1') + '\\\\phantom{000}', '\\\\phantom{00}' + texNombre('10') + '\\\\phantom{00}', '\\\\phantom{00}' + texNombre('100') + '\\\\phantom{00}', '\\\\phantom{0}' + texNombre('1000') + '\\\\phantom{0}', texNombre('10000'), texNombre('100000')]\n\n      const m = randint(1, 9, [4, 5, 6])\n      const c1 = randint(1, 9)\n      const c2 = randint(1, 9)\n      const c3 = randint(1, 9, [4, 5, 6])\n      const c4 = randint(1, 4)\n      const d = randint(1, 9)\n      const d1 = randint(1, 9)\n      const d2 = randint(1, 9)\n      const d3 = randint(1, 9)\n      const u = randint(1, 9)\n      const u1 = randint(1, 9)\n      const u2 = randint(1, 9)\n      const u3 = randint(1, 9)\n\n      let cbis, d1bis\n      do {\n        cbis = randint(2, 9)\n        d1bis = randint(2, 9)\n      } while (cbis * d1bis > 3 && cbis * d1bis < 7)\n\n      const divAleatoireOpe3 = choice([10, 100])\n      const divAleatoireOpe5 = choice([1, 10, 100, 1000])\n      const multAleatoireOpe4 = choice([0.1, 0.01, 0.001])\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 1\n      function myOrdreOpe1 (c, d) {\n        if (c * d >= 60) {\n          return ['', '', '', '', '', miseEnEvidence('X')]\n        } else {\n          return ['', '', '', '', miseEnEvidence('X'), '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 2\n      function myOrdreOpe2 (c1, c2) {\n        if (c1 + c2 / 10 >= 600) {\n          return ['', '', '', miseEnEvidence('X'), '', '']\n        } else {\n          return ['', '', miseEnEvidence('X'), '', '', '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 3\n      function myOrdreOpe3 (n) {\n        if (n >= 7) {\n          return ['', '', '', miseEnEvidence('X'), '', '']\n        } else {\n          return ['', '', miseEnEvidence('X'), '', '', '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 4\n      function myOrdreOpe4 (d, n) {\n        let sortie\n        switch (d) {\n          case 0.1:\n            if (n >= 7) {\n              sortie = ['', '', '', miseEnEvidence('X'), '', '']\n            } else {\n              sortie = ['', '', miseEnEvidence('X'), '', '', '']\n            };\n            break\n          case 0.01:\n            if (n >= 7) {\n              sortie = ['', '', miseEnEvidence('X'), '', '', '']\n            } else {\n              sortie = ['', miseEnEvidence('X'), '', '', '', '']\n            };\n            break\n          case 0.001:\n            if (n >= 7) {\n              sortie = ['', miseEnEvidence('X'), '', '', '', '']\n            } else {\n              sortie = [miseEnEvidence('X'), '', '', '', '', '']\n            };\n            break\n        }\n        return sortie\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 5\n      function myOrdreOpe5 (mult) {\n        let sortie\n        switch (mult) {\n          case 1:\n            return ['', '', '', miseEnEvidence('X'), '', '']\n          case 10:\n            return ['', '', miseEnEvidence('X'), '', '', '']\n          case 100:\n            return ['', miseEnEvidence('X'), '', '', '', '']\n          case 1000:\n            return [miseEnEvidence('X'), '', '', '', '', '']\n        };\n        return sortie\n      };\n\n      let situations = [\n        {\n          operation: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1}`,\n          operation_corr: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1} \\\\simeq  ${(cbis * 100)}\\\\times ${(d1bis * 10)} \\\\text{ soit } ${texNombre((cbis * 100) * (d1bis * 10))}`,\n          operation_coche: myOrdreOpe1(cbis, d1bis)\n        },\n        {\n          operation: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1}`,\n          operation_corr: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1} \\\\simeq ${c2 * 100 / 10}+${c1 * 100} \\\\text{ soit } ${c2 * 100 / 10 + c1 * 100}`,\n          operation_coche: myOrdreOpe2(c1 * 100, c2 * 100)\n        },\n        {\n          operation: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / divAleatoireOpe3)}`,\n          operation_corr: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / divAleatoireOpe3)} \\\\simeq ${c3 * 100 + d3 * 10}-${texNombre((c2 * 100) / divAleatoireOpe3)} \\\\text{ soit } ${c3 * 100 + d3 * 10 - (c2 * 100) / divAleatoireOpe3}`,\n          operation_coche: myOrdreOpe3(c3)\n        },\n        {\n          operation: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(multAleatoireOpe4)}`,\n          operation_corr: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(multAleatoireOpe4)} \\\\simeq ${texNombre(m * 1000)}\\\\times ${texNombre(multAleatoireOpe4)} \\\\text{ soit } ${texNombre(m * 1000 * multAleatoireOpe4)}`,\n          operation_coche: myOrdreOpe4(multAleatoireOpe4, m)\n        },\n        {\n          operation: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / divAleatoireOpe5)}\\\\div ${m}`,\n          operation_corr: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / divAleatoireOpe5)}\\\\div ${m} \\\\simeq ${texNombre((m * 1000) / divAleatoireOpe5)}\\\\div ${m} \\\\text{ soit } ${texNombre((m * 1000) / divAleatoireOpe5 / m)}`,\n          operation_coche: myOrdreOpe5(divAleatoireOpe5)\n        }\n\n      ]\n\n      situations = shuffle(situations)\n\n      const enonces = []\n      for (let k = 0; k < 1; k++) {\n        enonces.push({\n          enonce: `\n          ${tableauColonneLigne(ligneEntete, [situations[0].operation, situations[1].operation, situations[2].operation, situations[3].operation, situations[4].operation],\n            [\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', ''\n            ]\n          )}\n          `,\n          question: '',\n          correction: `\n          Commençons par calculer un ordre de grandeur du résultat de chaque opération dans la première colonne du tableau.\n          <br>\n          ${tableauColonneLigne(ligneEnteteCorr, [situations[0].operation_corr, situations[1].operation_corr, situations[2].operation_corr, situations[3].operation_corr, situations[4].operation_corr],\n            [\n              situations[0].operation_coche[0], situations[0].operation_coche[1], situations[0].operation_coche[2], situations[0].operation_coche[3], situations[0].operation_coche[4], situations[0].operation_coche[5],\n              situations[1].operation_coche[0], situations[1].operation_coche[1], situations[1].operation_coche[2], situations[1].operation_coche[3], situations[1].operation_coche[4], situations[1].operation_coche[5],\n              situations[2].operation_coche[0], situations[2].operation_coche[1], situations[2].operation_coche[2], situations[2].operation_coche[3], situations[2].operation_coche[4], situations[2].operation_coche[5],\n              situations[3].operation_coche[0], situations[3].operation_coche[1], situations[3].operation_coche[2], situations[3].operation_coche[3], situations[3].operation_coche[4], situations[3].operation_coche[5],\n              situations[4].operation_coche[0], situations[4].operation_coche[1], situations[4].operation_coche[2], situations[4].operation_coche[3], situations[4].operation_coche[4], situations[4].operation_coche[5]\n            ]\n          )}`\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n};\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","OrdreDeGrandeurOperationsDecimaux","typesDeQuestionsDisponibles","Exercice","this","beta","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","shuffle","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","ligneEntete","texNombre","ligneEnteteCorr","m","randint","c1","c2","c3","c4","d","d1","d2","d3","u","u1","u2","u3","cbis","d1bis","divAleatoireOpe3","choice","divAleatoireOpe5","multAleatoireOpe4","myOrdreOpe1","c","miseEnEvidence","myOrdreOpe2","myOrdreOpe4","n","sortie","myOrdreOpe5","mult","situations","operation","operation_corr","operation_coche","enonces","k","push","enonce","tableauColonneLigne","question","correction","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}