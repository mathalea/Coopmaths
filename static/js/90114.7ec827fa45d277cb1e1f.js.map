{"version":3,"file":"js/90114.7ec827fa45d277cb1e1f.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3L11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { randint, choice, combinaisonListes, ecritureAlgebrique, ecritureParentheseSiNegatif, ecritureParentheseSiMoins, signe, abs, lettreDepuisChiffre, listeQuestionsToContenuSansNumero } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\n\nexport const titre = 'Utiliser la simple distributivité'\n\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Développer en utilisant la distributivité simple\n *\n * * La lettre peut être x, y, z, t, a, b ou c\n * * 3 fois sur 6 c'est une distributivité simple :  k(ax+b)\n * * 1 fois sur 6 c'est une distributivité simple : (ax+b)×k\n * * 1 fois sur 6, la variable est en facteur : kx(ax+b)\n * * 1 fois sur 6 il faut ensuite réduire : k(ax+b)+c\n *\n * Niveau de difficulté :\n * * 1 : Multiplication par un facteur positif\n * * 2: Multiplication par un facteur relatif\n * @author Rémi Angot\n * 4L10 et 3L11\n */\nexport default function ExerciceDevelopper (difficulte = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = difficulte\n  this.sup = parseInt(this.sup)\n  this.titre = titre\n  this.interactifType = interactifType\n  this.interactifReady = interactifReady\n  this.consigne = 'Développer.'\n  this.spacing = context.isHtml ? 3 : 2\n  this.spacingCorr = context.isHtml ? 3 : 2\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let lettre = ['x', 'y', 'z', 't', 'a', 'b', 'c']\n    if (this.interactif) lettre = ['x']\n    const typesDeQuestionsDisponibles = [\n      'simple',\n      'simple',\n      'simple2',\n      'x_en_facteur',\n      'developper_et_reduire'\n    ]\n    let typesDeQuestions\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, reponse, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      let k = randint(2, 11)\n      if (this.sup > 1) {\n        // si difficulté 2, k peut être négatif\n        k = k * choice([-1, 1])\n      }\n      const a = randint(1, 9)\n      const b = randint(1, 9) * choice([-1, 1])\n      const inconnue = choice(lettre)\n      const c = randint(2, 9)\n      switch (typesDeQuestions) {\n        case 'simple':\n          if (a === 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})$`\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})$`\n          }\n\n          if (a === 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(i + 1)}=${k}(${inconnue}${ecritureAlgebrique(b)})=${k}\\\\times ${inconnue}+${ecritureParentheseSiNegatif(k)}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})=${k}\n            \\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`\n          }\n          reponse = `${k * a}${inconnue}${ecritureAlgebrique(k * b)}`\n          break\n        case 'simple2':\n          if (a === 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`\n          }\n\n          if (a === 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(i + 1)}=(${inconnue}${ecritureAlgebrique(b)})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\\\\times ${inconnue}+${ecritureParentheseSiNegatif(k)}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(b)})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(k)}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`\n          }\n          reponse = `${k * a}${inconnue}${ecritureAlgebrique(k * b)}`\n          break\n        case 'x_en_facteur':\n          if (a === 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(b)})$`\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(b)})$`\n          }\n\n          if (a === 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(\n              b\n            )})=${k}${inconnue}\\\\times ${inconnue} ${signe(\n              k * b\n            )}${k}${inconnue}\\\\times ${abs(b)}=${k * a}${inconnue}^2${ecritureAlgebrique(k * b)}${inconnue}$`\n          } else {\n            if (k > 0) {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + ${k}${inconnue}\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`\n            } else {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + (${k}${inconnue})\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`\n            }\n          }\n          reponse = `${k * a}${inconnue}^2${ecritureAlgebrique(k * b)}${inconnue}`\n          break\n        case 'developper_et_reduire':\n          if (a === 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})+${c}$`\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})+${c}$`\n          }\n\n          if (a === 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n            =${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times${ecritureParentheseSiMoins(\n              a + inconnue\n            )}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n            =${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`\n          }\n          reponse = `${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}`\n          break\n      }\n      setReponse(this, i, reponse)\n      texte += ajouteChampTexteMathLive(this, i)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    2,\n    '1 : Multiplication par un facteur positif\\n2 : Multiplication par un facteur relatif'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","ExerciceDevelopper","difficulte","Exercice","this","sup","parseInt","consigne","spacing","context","spacingCorr","nbQuestions","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","lettre","interactif","typesDeQuestions","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","reponse","i","cpt","k","randint","choice","a","b","inconnue","c","lettreDepuisChiffre","ecritureAlgebrique","ecritureParentheseSiNegatif","signe","abs","ecritureParentheseSiMoins","setReponse","ajouteChampTexteMathLive","indexOf","push","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}