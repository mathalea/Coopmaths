{"version":3,"file":"js/18898.f437612342fdd032e668.js","mappings":"mRAMO,MAAMA,GAAW,EACXC,EAAU,SACVC,GAAkB,EAClBC,EAAiB,YAEjBC,EAAQ,gDAYN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,2CAChBD,KAAKE,QAAU,EACfF,KAAKG,YAAc,EACnBH,KAAKI,YAAc,EACnBJ,KAAKK,cAAgB,OAErBL,KAAKM,gBAAkB,WACrBN,KAAKO,eAAiB,GACtBP,KAAKQ,iBAAmB,GACxBR,KAAKS,eAAiB,GAEtB,MACMC,GAAuBC,EAAAA,EAAAA,KADO,CAAC,EAAG,EAAG,EAAG,GAG5CX,KAAKI,aAEP,IAAIQ,EAAkBC,EACtB,IAAK,IAAWC,EAAOC,EAAoBC,EAAGC,EAArCC,EAAI,EAAqBC,EAAM,EAASD,EAAIlB,KAAKI,aAAee,EAAM,IAAK,CAElF,OADAP,EAAmBF,EAAqBQ,GAChCN,GACN,KAAK,EACHI,EAAoB,KAAhBI,EAAAA,EAAAA,KAAQ,EAAG,GAA2B,IAAhBA,EAAAA,EAAAA,KAAQ,EAAG,IAAUA,EAAAA,EAAAA,KAAQ,EAAG,GAC1DH,GAAII,EAAAA,EAAAA,KAAuB,IAAhBD,EAAAA,EAAAA,KAAQ,EAAG,IAAUA,EAAAA,EAAAA,KAAQ,EAAG,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAChE,MACF,KAAK,EACHJ,GAAIK,EAAAA,EAAAA,KAAuB,IAAhBD,EAAAA,EAAAA,KAAQ,EAAG,IAAUA,EAAAA,EAAAA,KAAQ,EAAG,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAChEH,GAAII,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,KAAQ,EAAG,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAC3C,MACF,KAAK,EACHJ,GAAIK,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,KAAQ,EAAG,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,KAChEH,GAAII,EAAAA,EAAAA,KAAuB,KAAhBD,EAAAA,EAAAA,KAAQ,EAAG,IAAWA,EAAAA,EAAAA,KAAQ,EAAG,IAC5C,MACF,KAAK,EACHJ,GAAIK,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,KAChDH,GAAII,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,KAAQ,EAAG,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAI/CN,EAAS,KAAGQ,EAAAA,EAAAA,KAAUN,aAAYM,EAAAA,EAAAA,KAAUL,MAC5CJ,GAAUQ,EAAAA,EAAAA,KAAOL,EAAIC,GACrBF,GAAYQ,EAAAA,EAAAA,GAAU,CAAEC,UAAWR,EAAGS,UAAWR,EAAGS,KAAM,mBACtDC,EAAAA,GAAAA,QAAkB3B,KAAK4B,aAAYd,GAAS,QAASe,EAAAA,EAAAA,IAAiB7B,KAAMkB,KAChFY,EAAAA,EAAAA,IAAW9B,KAAMkB,EAAGL,GACpBb,KAAKS,eAAeS,GAAGa,QAAU,CAAEC,OAAQ,EAAGC,SAAU,EAAGC,OAAO,EAAOC,mBAAoB,EAAGC,eAAe,EAAOC,OAAQ,IAElF,IAAxCrC,KAAKO,eAAe+B,QAAQxB,KAE9Bd,KAAKO,eAAegC,KAAKzB,GACzBd,KAAKQ,iBAAiB+B,KAAKxB,GAC3BG,KAEFC,KAEFqB,EAAAA,EAAAA,KAAwBxC","sources":["webpack://mathalea/./src/js/exercices/6e/6C30.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, texNombre } from '../../modules/outils.js'\nimport Operation from '../../modules/operations.js'\nimport { setReponse, ajouteChampTexte } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'AMCNum' // Question numérique\nexport const interactifReady = true\nexport const interactifType = 'numerique'\n\nexport const titre = 'Poser des multiplications de nombres décimaux'\n\n/**\n * Multiplication de deux nombres décimaux\n *\n * * xxx * xx,x chiffres inférieurs à 5\n * * xx,x * x,x\n * * x,xx * x0x\n * * 0,xx * x,x\n * @author Rémi Angot\n * Référence 6C30\n */\nexport default function MultiplierDecimaux () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Poser et effectuer les calculs suivants.'\n  this.spacing = 2\n  this.spacingCorr = 1 // Important sinon le calcul posé ne fonctionne pas avec opmul et spacing\n  this.nbQuestions = 4\n  this.listePackages = 'xlop'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4]\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let typesDeQuestions, reponse\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // xxx * xx,x chiffres inférieurs à 5\n          a = randint(2, 5) * 100 + randint(2, 5) * 10 + randint(2, 5)\n          b = calcul(randint(2, 5) * 10 + randint(2, 5) + randint(2, 5) / 10)\n          break\n        case 2: // xx,x * x,x\n          a = calcul(randint(2, 9) * 10 + randint(2, 9) + randint(2, 9) / 10)\n          b = calcul(randint(6, 9) + randint(6, 9) / 10)\n          break\n        case 3: // x,xx * x0x\n          a = calcul(randint(2, 9) + randint(2, 9) / 10 + randint(2, 9) / 100)\n          b = calcul(randint(2, 9) * 100 + randint(2, 9))\n          break\n        case 4: // 0,xx * x,x\n          a = calcul(randint(2, 9) / 10 + randint(2, 9) / 100)\n          b = calcul(randint(2, 9) + randint(2, 9) / 10)\n          break\n      }\n\n      texte = `$${texNombre(a)}\\\\times${texNombre(b)}$`\n      reponse = calcul(a * b)\n      texteCorr = Operation({ operande1: a, operande2: b, type: 'multiplication' })\n      if (context.isHtml && this.interactif) texte += '$~=$' + ajouteChampTexte(this, i)\n      setReponse(this, i, reponse)\n      this.autoCorrection[i].options = { digits: 0, decimals: 0, signe: false, exposantNbChiffres: 0, exposantSigne: false, approx: 0 }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","MultiplierDecimaux","Exercice","this","consigne","spacing","spacingCorr","nbQuestions","listePackages","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","typesDeQuestions","reponse","texte","texteCorr","a","b","i","cpt","randint","calcul","texNombre","Operation","operande1","operande2","type","context","interactif","ajouteChampTexte","setReponse","options","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","indexOf","push","listeQuestionsToContenu"],"sourceRoot":""}