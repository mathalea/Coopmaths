{"version":3,"file":"js/50445.012f007c6c2ec856de66.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/can/6e/can6M04.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { calcul, choice, randint, texNombre, texteEnCouleur, texNombrec } from '../../../modules/outils'\nimport Exercice from '../../Exercice'\nexport const titre = 'Convertir en tous sens'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n\n/*!\n * @author Jean-Claude Lhote & Gilles Mora\n * Créé pendant l'été 2021\n * Référence can6M04\n */\nexport default function ConversionEnTousSens () {\n  Exercice.call(this)\n  this.typeExercice = 'simple'\n  this.nbQuestions = 1\n  this.tailleDiaporama = 2\n  this.nouvelleVersion = function () {\n    let a, resultat\n    switch (choice(['a', 'b', 'c', 'd'])) { //\n      case 'a':\n        if (choice([true, false])) {\n          a = randint(1, 13) * 50\n          resultat = calcul(a / 1000)\n          this.question = `$${texNombre(a)}$ g  =`\n          if (!this.interactif) {\n            this.question += ' .... kg'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' kg' }\n          this.correction = `$${texNombre(a)}$ g$=${texNombrec(a / 1000)}$ kg`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n  Comme $1$ kg $=1000$ g, alors $1$ g $=0,001$ kg.<br>\n  Ainsi pour passer des \"g\" au \"kg\", on divise par $1000$.<br>\n    Comme : $${texNombre(a)}\\\\div 1000 =${texNombrec(a / 1000)}$, alors $${texNombrec(a)}$ g$=${texNombrec(a / 1000)}$ kg.  `)\n        } else {\n          a = randint(1, 5) / 10\n          resultat = calcul(a * 1000)\n          this.question = `$${texNombre(a)}$ kg  = `\n          if (!this.interactif) {\n            this.question += ' ..... g'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' g' }\n          this.correction = `$${texNombre(a)}$ kg$=${texNombrec(a * 1000)}$ g`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ kg $=1000$ g,  pour passer des \"kg\" au \"g\", on multiplie par $1000$.<br>\n            Comme : $${texNombre(a)}\\\\times 1000 =${texNombrec(a * 1000)}$, alors $${texNombrec(a)}$ kg$=${resultat}$ g.  `)\n        }\n        break\n      case 'b':\n        if (choice([true, false])) {\n          a = randint(1, 13) * 5\n          resultat = calcul(a * 100)\n          this.question = `$${texNombre(a)}$ m  =`\n          if (!this.interactif) {\n            this.question += '..... cm'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' cm' }\n          this.correction = `$${texNombre(a)}$ m$=${texNombrec(a * 100)}$ cm`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ m $=100$ cm,  pour passer des \"m\" au \"cm\", on multiplie par $100$.<br>\n            Comme : $${texNombre(a)}\\\\times 100 =${texNombrec(a * 100)}$, alors $${texNombrec(a)}$ m$=${texNombrec(a * 100)}$ cm.  `)\n        } else {\n          a = randint(1, 12) * 10\n          resultat = calcul(a / 100)\n          this.question = `$${texNombre(a)}$ cm  =`\n          if (!this.interactif) {\n            this.question += '..... m'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' m' }\n          this.correction = `$${texNombre(a)}$ cm$=${texNombre(a / 100)}$ m.`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ m $=100$ cm, alors $1$ cm $=0,01$ m.<br>\n          Ainsi pour passer des \"cm\" au \"m\", on divise par $100$.<br>\n            Comme  $${texNombre(a)}\\\\div 100 =${texNombrec(a / 100)}$, alors $${texNombrec(a)}$ cm$=${texNombrec(a / 100)}$ m.  `)\n        }\n        break\n      case 'c':\n        if (choice([true, false])) {\n          a = randint(1, 13) / 10\n          resultat = calcul(a * 10)\n          this.question = `$${texNombre(a)}$ cL  =  `\n          if (!this.interactif) {\n            this.question += ' .... mL'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' mL' }\n          this.correction = `$${texNombre(a)}$ cL$=${texNombrec(a * 10)}$ mL`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ cL$ =10$ mL,  pour passer des \"cL\" au \"mL\", on multiplie par $10$.<br>\n            Comme  $${texNombre(a)}\\\\times 10 =${texNombrec(a * 10)}$, alors $${texNombrec(a)}$ cL$=${texNombrec(a * 10)}$ mL.  `)\n        } else {\n          a = randint(1, 12)\n          resultat = calcul(a / 10)\n          this.question = `$${texNombre(a)}$ mL  = `\n          if (!this.interactif) {\n            this.question += ' .... cL'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: '  cL' }\n          this.correction = `$${texNombre(a)}$ mL$=${texNombrec(a / 10)}$ cL`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ cL$ =10$ mL, alors $1$ mL $=0,1$ cL.<br>\n          Ainsi pour passer des \"mL\" au \"cL\", on divise par $10$.<br>\n            Comme  $${texNombre(a)}\\\\div 10 =${texNombrec(a / 10)}$, alors $${texNombrec(a)}$ mL$=${texNombrec(a / 10)}$ cL.  `)\n        }\n        break\n      case 'd':\n        if (choice([true, false])) {\n          a = randint(1, 20) * 10\n          resultat = calcul(a / 1000)\n          this.question = `$${texNombre(a)}$ m  $=$ `\n          if (!this.interactif) {\n            this.question += ' .... km'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' km' }\n          this.correction = `$${texNombre(a)}$ m$=${texNombrec(a / 1000)}$ km`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ km $=1000$ m, alors $1$ m $=0,001$ km.<br>\n          Ainsi pour passer des \"m\" au \"km\", on divise par $1000$.<br>\n            Comme  $${texNombre(a)}\\\\div 1000 =${texNombrec(a / 1000)}$, alors $${texNombrec(a)}$ m$=${texNombrec(a / 1000)}$ km.  `)\n        } else {\n          a = randint(1, 35) / 100\n          resultat = calcul(a * 1000)\n          this.question = `$${texNombre(a)}$ km $=$`\n          if (!this.interactif) {\n            this.question += ' .... m'\n          }\n          this.formatChampTexte = 'largeur15 inline'\n          this.optionsChampTexte = { texteApres: ' m' }\n          this.correction = `$${texNombre(a)}$ km$=${texNombrec(a * 1000)}$ m`\n          this.correction += texteEnCouleur(`<br> Mentalement : <br>\n          Comme $1$ km $=1000$ m,  pour passer des \"km\" au \"m\", on multiplie par $1000$.<br>\n            Comme  $${texNombre(a)}\\\\times 1000 =${texNombrec(a * 1000)}$, alors $${texNombrec(a)}$ km$=${texNombrec(a * 1000)}$ m.  `)\n        }\n        break\n    }\n    this.reponse = resultat\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","interactifReady","interactifType","amcReady","amcType","ConversionEnTousSens","typeExercice","a","resultat","choice","randint","calcul","question","texNombre","formatChampTexte","optionsChampTexte","texteApres","correction","texNombrec","texteEnCouleur","reponse"],"sourceRoot":""}