/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_5e_5G20-1_js"],{

/***/ "./src/js/exercices/5e/5G20-1.js":
/*!***************************************!*\
  !*** ./src/js/exercices/5e/5G20-1.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Vocabulaire_des_triangles)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\n\nconst titre = 'Vocabulaire des triangles'\n\n/**\n * Vocabulaire des triangles\n * 6G20-2 ; 5G20-1\n * @author Sébastien Lozano\n */\nfunction Vocabulaire_des_triangles() {\n  \"use strict\";\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n  this.consigne = \"Donner la nature des triangles en justifiant.\";\n  this.sup = 1;\n  this.sup2 = false;\n  this.titre = titre;\n  this.nb_cols = 1;\n  this.nb_cols_corr = 1;\n  this.nb_questions_modifiable = false;\n  this.classe = 5;\n\n  this.liste_packages = `bclogo`;\n\n  let type_de_questions_disponibles;\n\n  this.nouvelle_version = function (numero_de_l_exercice) {\n    if (this.classe == 6) {\n      if (this.sup == 1) {\n        this.nb_questions = 4;\n      } else {\n        //this.nb_questions = 9;\n        this.nb_questions = 5;\n      }\n    } else if (this.classe == 5) {\n      //this.nb_questions = 11;\n      this.nb_questions = 5;\n    }\n\n    let texte_intro = ``;\n    if (sortie_html) {\n      if (this.classe == 6) {\n        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle isocèle</b> est un triangle qui a deux côtés de même longueur.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle équilatéral</b> est un triangle qui a trois côtés de même longueur.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;\n      } else if (this.classe == 5) {\n        texte_intro += `- Un <b>triangle quelconque</b> est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle isocèle</b> est un triangle qui a deux côtés ou deux angles de même mesure.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle équilatéral</b> est un triangle qui a trois côtés ou trois angles de même mesure.`;\n        texte_intro += `<br>`;\n        texte_intro += `- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.`;\n      }\n      // this.introduction = lampe_message({\n      // \ttitre : `Quelques définitions`,\n      // \ttexte : texte_intro,\n      // \tcouleur : `nombres`\n      // });\n      this.bouton_aide = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.modal_texte_long)(\n        numero_de_l_exercice,\n        //`<i class=\"lightbulb outline icon\"></i> Quelques définitions`,\n        `<i class=\"info circle icon\"></i> Quelques définitions`,\n        texte_intro,\n        \"Aide\",\n        \"info circle\"\n      );\n    } else {\n      if (this.classe == 6) {\n        texte_intro = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_enumerate_sans_numero)(\n          [\n            `- Un \\\\textbf{triangle quelconque} est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.`,\n            `- Un \\\\textbf{triangle isocèle} est un triangle qui a deux côtés de même longueur.`,\n            `- Un \\\\textbf{triangle équilatéral} est un triangle qui a trois côtés de même longueur.`,\n            `- Un \\\\textbf{triangle rectangle} est un triangle qui a un angle droit.`,\n          ],\n          1\n        );\n      } else if (this.classe == 5) {\n        texte_intro = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_enumerate_sans_numero)(\n          [\n            `- Un \\\\textbf{triangle quelconque} est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.`,\n            `- Un \\\\textbf{triangle isocèle} est un triangle qui a deux côtés ou deux angles de même mesure.`,\n            `- Un \\\\textbf{triangle équilatéral} est un triangle qui a trois côtés ou trois angles de même mesure.`,\n            `- Un \\\\textbf{triangle rectangle} est un triangle qui a un angle droit.`,\n          ],\n          1\n        );\n      }\n\n      this.introduction = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.lampe_message)({\n        titre: `Quelques définitions`,\n        texte: texte_intro,\n        couleur: `nombres`,\n      });\n    }\n\n    if (this.classe == 6) {\n      if (this.sup == 1) {\n        type_de_questions_disponibles = [1, 3, 5, 7]; //6e facile isocèle, équilatéral et rectangle.\n      } else if (this.sup == 2) {\n        //type_de_questions_disponibles = [1,3,4,5,6,7,8,9]; //6e tout sauf par les angles\n        type_de_questions_disponibles = [1, 4, 6, 8, 9]; //6e les autres cas sauf par les angles\n      }\n    } else if (this.classe == 5) {\n      // type_de_questions_disponibles = [1,2,3,4,5,6,7,8,9,10,11]; // 5e : on ajoute la caractéisation par les angles\n      type_de_questions_disponibles = [\n        (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([1, 2]),\n        (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([3, 4, 10]),\n        (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([5, 6, 11]),\n        7,\n        (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([8, 9]),\n      ]; // 5e : tout sauf les basiques de 6e, on ajoute la caractéisation par les angles\n    }\n    let liste_type_de_questions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaison_listes)(\n      type_de_questions_disponibles,\n      this.nb_questions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n\n    //let liste_type_de_questions = type_de_questions_disponibles // Tous les types de questions sont posées --> à remettre comme ci dessus\n    this.liste_questions = []; // Liste de questions\n    this.liste_corrections = []; // Liste de questions corrigées\n\n    for (let i = 0, texte, texte_corr, l1, l2, l3, a1, a2, a3, cpt = 0; i < this.nb_questions && cpt < 50;) {\n      // on fixe longueur min et max en cm\n      let l_min = 2;\n      let l_max = 20;\n      // on fixe angle min et max en degré\n      let a_min = 30;\n      let a_max = 100;\n\n      // on crée les triangles\n      let triangle_quelconque = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n      let triangle_isocele = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n      let triangle_equilateral = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n      let triangle_rectangle = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n      let triangle_isocele_rectangle = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n      let partieDecimale1, partieDecimale2, partieDecimale3;\n      if (this.sup2) {\n        partieDecimale1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 9) / 10 * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 1));\n        partieDecimale2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 9) / 10 * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 1));\n        partieDecimale3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 9) / 10 * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 1));\n      }\n      else {\n        partieDecimale1 = 0;\n        partieDecimale2 = 0;\n        partieDecimale3 = 0;\n      }\n      switch (liste_type_de_questions[i]) {\n        case 1: // triangle quelconque par les longueurs sans conversion\n          while (!triangle_quelconque.isTrueTriangleLongueurs()) {\n            l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n            l2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max, l1);\n            l3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max, [l1, l2]);\n            triangle_quelconque.l1 = l1 + partieDecimale1;\n            triangle_quelconque.l2 = l2 + partieDecimale2;\n            triangle_quelconque.l3 = l3 + partieDecimale3;\n          }\n\n          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${triangle_quelconque.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_quelconque.l1)}$ cm ; `;\n          texte += `${triangle_quelconque.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_quelconque.l2)}$ cm et ${triangle_quelconque.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(\n            triangle_quelconque.l3)}$ cm.`;\n          texte_corr = `Les 3 côtés du triangle ${triangle_quelconque.getNom()} sont différents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;\n          break;\n        case 2: // triangle quelconque par les angles\n          while (!triangle_quelconque.isTrueTriangleAngles()) {\n            a1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n            a2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max, a1);\n            a3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max, [a1, a2]);\n            triangle_quelconque.a1 = a1;\n            triangle_quelconque.a2 = a2;\n            triangle_quelconque.a3 = a3;\n          }\n\n          texte = `${triangle_quelconque.getNom()} est un triangle tel que ${triangle_quelconque.getAngles()[0]} $= ${triangle_quelconque.a1}\\\\degree$ ; `;\n          texte += ` ${triangle_quelconque.getAngles()[1]} $= ${triangle_quelconque.a2}\\\\degree$ et  ${triangle_quelconque.getAngles()[2]} $= ${triangle_quelconque.a3}\\\\degree$ .`;\n          texte_corr = `Les 3 angles du triangle ${triangle_quelconque.getNom()} sont différents donc ${triangle_quelconque.getNom()} est un triangle quelconque.`;\n          break;\n\n        case 3: // triangle isocèle sans conversion\n          while (!triangle_isocele.isTrueTriangleLongueurs()) {\n            l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n            l2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max, l1);\n            triangle_isocele.l1 = l1 + partieDecimale1;\n            triangle_isocele.l2 = l1 + partieDecimale1;\n            triangle_isocele.l3 = l2 + partieDecimale2;\n          }\n          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l1)}$ cm ; `;\n          texte += `${triangle_isocele.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l2)}$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l3)}$ cm.`;\n          texte_corr = `Les longueurs des côtés ${triangle_isocele.getCotes()[0]} et ${triangle_isocele.getCotes()[1]} du triangle ${triangle_isocele.getNom()} valent toutes les deux $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l1)}$ cm donc ${triangle_isocele.getNom()} est un triangle isocèle en ${triangle_isocele.getSommets()[1]}.`;\n          break;\n        case 4: // triangle isocèle avec conversion\n          while (!triangle_isocele.isTrueTriangleLongueurs()) {\n            l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n            l2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max, l1);\n            triangle_isocele.l1 = l1 + partieDecimale1;\n            triangle_isocele.l2 = l1 + partieDecimale1;\n            triangle_isocele.l3 = l2 + partieDecimale2;\n          }\n          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getLongueurs()[0]} $= ${triangle_isocele.l1 * 10}$ mm ; `;\n          texte += `${triangle_isocele.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l2)}$ cm et ${triangle_isocele.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l3)}$ cm.`;\n          texte_corr = `${triangle_isocele.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l1 * 10)}$ mm $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele.l1)}$ cm = ${triangle_isocele.getLongueurs()[1]}, ${triangle_isocele.getNom()} a donc deux côtés égaux, c'est un triangle isocèle en ${triangle_isocele.getSommets()[1]}.`;\n          break;\n        case 5: // triangle équilatéral sans conversion\n          while (!triangle_equilateral.isTrueTriangleLongueurs()) {\n            l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n            triangle_equilateral.l1 = l1 + partieDecimale1;\n            triangle_equilateral.l2 = l1 + partieDecimale1;\n            triangle_equilateral.l3 = l1 + partieDecimale1;\n          }\n          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l1)}$ cm ; `;\n          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l2)}$ cm et ${triangle_equilateral.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l3)}$ cm.`;\n          texte_corr = `Les longeurs des trois côtés du triangle ${triangle_equilateral.getNom()} sont égales donc c'est un triangle équilatéral.`;\n          break;\n        case 6: // triangle équilatéral avec conversion\n          while (!triangle_equilateral.isTrueTriangleLongueurs()) {\n            l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n            triangle_equilateral.l1 = l1 + partieDecimale1;\n            triangle_equilateral.l2 = l1 + partieDecimale1;\n            triangle_equilateral.l3 = l1 + partieDecimale1;\n          }\n          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l1)}$ cm ; `;\n          texte += `${triangle_equilateral.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l2 * 10)}$ mm et ${triangle_equilateral.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(\n            triangle_equilateral.l3 / 10\n          )}$ dm.`;\n          texte_corr = `${triangle_equilateral.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l2 * 10)}$ mm $= ${triangle_equilateral.l2}$ cm.`;\n          texte_corr += `<br> ${triangle_equilateral.getLongueurs()[2]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l3 / 10)}$ dm $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l3)}$ cm.`;\n          texte_corr += `<br> ${triangle_equilateral.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_equilateral.l1)}$ cm.`;\n          texte_corr += `<br> Les longeurs des trois côtés du triangle ${triangle_equilateral.getNom()} sont égales donc c'est un triangle équilatéral.`;\n          break;\n        case 7: // triangle rectangle pas de conversion necessaire\n          l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n          triangle_rectangle.l1 = l1 + partieDecimale1;\n          triangle_rectangle.l2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max, l1) + partieDecimale2;\n          triangle_rectangle.a1 = 90;\n\n          texte = `${triangle_rectangle.getNom()} est un triangle tel que ${triangle_rectangle.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_rectangle.l1)}$ cm ; `;\n          texte += `${triangle_rectangle.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_rectangle.l2)}$ cm `;\n          texte += `et `;\n          if (this.classe == 6) {\n            texte += ` qui a un angle droit en ${triangle_rectangle.getSommets()[1]}.`;\n            texte_corr = `Le triangle ${triangle_rectangle.getNom()} a un angle droit en ${triangle_rectangle.getSommets()[1]} donc ${triangle_rectangle.getNom()} est rectangle en ${triangle_rectangle.getSommets()[1]}.`;\n          } else {\n            texte += `${triangle_rectangle.getAngles()[0]} $= ${triangle_rectangle.a1}\\\\degree$.`;\n            texte_corr = `L'angle ${triangle_rectangle.getAngles()[0]} du triangle ${triangle_rectangle.getNom()} est un angle droit donc ${triangle_rectangle.getNom()} est rectangle en ${triangle_rectangle.getSommets()[1]}.`;\n          }\n\n          break;\n        case 8: // triangle isocèle rectangle sans conversion\n          l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n          triangle_isocele_rectangle.l1 = l1 + partieDecimale1;\n          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;\n          triangle_isocele_rectangle.a1 = 90;\n\n          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${triangle_isocele_rectangle.getLongueurs()[0]}$= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1)}$ cm ; `;\n          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l2)}$ cm `;\n          texte += `et `;\n          if (this.classe == 6) {\n            texte += `qui a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]} donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]} $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1)}$ cm donc ${triangle_isocele_rectangle.getNom()} est isocèle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocèle et rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n          } else {\n            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${triangle_isocele_rectangle.a1}\\\\degree$.`;\n            texte_corr = `L'angle ${triangle_isocele_rectangle.getAngles()[0]} du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]} $=$ ${triangle_isocele_rectangle.getLongueurs()[1]} $= ${triangle_isocele_rectangle.l1}$ cm donc ${triangle_isocele_rectangle.getNom()} est isocèle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocèle et rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n          }\n          break;\n        case 9: // triangle isocèle rectangle avec conversion\n          triangle_isocele_rectangle.l1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max) + partieDecimale1;\n          triangle_isocele_rectangle.l2 = triangle_isocele_rectangle.l1;\n          triangle_isocele_rectangle.a1 = 90;\n\n          texte = `${triangle_isocele_rectangle.getNom()} est un triangle tel que ${triangle_isocele_rectangle.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1 * 10)}$ mm ; `;\n          texte += `${triangle_isocele_rectangle.getLongueurs()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l2)}$ cm`;\n          texte += ` et `;\n          if (this.classe == 6) {\n            texte += `qui a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr = `Le triangle ${triangle_isocele_rectangle.getNom()} a un angle droit en ${triangle_isocele_rectangle.getSommets()[1]} donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]} $= ${triangle_isocele_rectangle.l1 * 10}$ mm $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1)}$ cm =${triangle_isocele_rectangle.getLongueurs()[1]} donc ${triangle_isocele_rectangle.getNom()} est isocèle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocèle et rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n          } else {\n            texte += `${triangle_isocele_rectangle.getAngles()[0]} $= ${triangle_isocele_rectangle.a1}\\\\degree$.`;\n            texte_corr = `L'angle ${triangle_isocele_rectangle.getAngles()[0]} du triangle ${triangle_isocele_rectangle.getNom()} est un angle droit donc ${triangle_isocele_rectangle.getNom()} est rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> ${triangle_isocele_rectangle.getLongueurs()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1 * 10)}$ mm $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle_isocele_rectangle.l1)}$ cm =${triangle_isocele_rectangle.getLongueurs()[1]} donc ${triangle_isocele_rectangle.getNom()} est isocèle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n            texte_corr += `<br> Le triangle ${triangle_isocele_rectangle.getNom()} est donc isocèle et rectangle en ${triangle_isocele_rectangle.getSommets()[1]}.`;\n          }\n          break;\n        case 10: // triangle isocèle par les angles\n          a3 = -1;\n          while (a3 < 0) {\n            triangle_isocele.a1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n            triangle_isocele.a2 = triangle_isocele.a1;\n            a3 = 180 - 2 * triangle_isocele.a1;\n            triangle_isocele.a3 = a3;\n          }\n          texte = `${triangle_isocele.getNom()} est un triangle tel que ${triangle_isocele.getAngles()[0]} $= ${triangle_isocele.a1}\\\\degree$ ; `;\n          texte += ` ${triangle_isocele.getAngles()[1]} $= ${triangle_isocele.a2}\\\\degree$ et  ${triangle_isocele.getAngles()[2]} $= ${triangle_isocele.a3}\\\\degree$ .`;\n          texte_corr = `Le triangle ${triangle_isocele.getNom()} a deux angles égaux, ${triangle_isocele.getAngles()[0]} = ${triangle_isocele.getAngles()[1]} $= ${triangle_isocele.a1}\\\\degree$ donc ${triangle_isocele.getNom()} est un triangle isocèle en ${triangle_isocele.getSommets()[0]}.`;\n          break;\n        case 11: // triangle équilatéral par les angles\n          triangle_equilateral.a1 = 60;\n          triangle_equilateral.a2 = 60;\n          triangle_equilateral.a3 = 60;\n\n          texte = `${triangle_equilateral.getNom()} est un triangle tel que ${triangle_equilateral.getAngles()[0]} $= ${triangle_equilateral.a1}\\\\degree$ ; `;\n          texte += ` ${triangle_equilateral.getAngles()[1]} $= ${triangle_equilateral.a2}\\\\degree$ et  ${triangle_equilateral.getAngles()[2]} $= ${triangle_equilateral.a3}\\\\degree$.`;\n          texte_corr = `Le triangle ${triangle_equilateral.getNom()} a trois angles égaux, ${triangle_equilateral.getAngles()[0]} = ${triangle_equilateral.getAngles()[1]} = ${triangle_equilateral.getAngles()[2]} $= ${triangle_equilateral.a1}\\\\degree$ donc ${triangle_equilateral.getNom()} est un triangle équilateral.`;\n          break;\n      }\n      if (this.liste_questions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.liste_questions.push(texte);\n        this.liste_corrections.push(texte_corr);\n        i++;\n      }\n      cpt++;\n    }\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n  };\n\n  if (this.classe == 6) {\n    this.besoin_formulaire_numerique = [\n      \"Niveau de difficulté\",\n      2,\n      \"1 : sans conversions de longueurs\\n2 : avec conversions de longueurs\",\n    ];\n  }\n  this.besoin_formulaire2_case_a_cocher = [\"Avec des décimaux\", false];\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/5e/5G20-1.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);