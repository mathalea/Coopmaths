{"version":3,"file":"js/74088.0bd80e1cc84977a5ec7e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G32-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenuSansNumero, randint, shuffle, combinaisonListes, lettreDepuisChiffre, texcolors, texteGras, numAlpha } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, droite, segment, demiDroite, polygone, codeAngle, texteParPosition, mathalea2d, appartientDroite } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Appliquer les propriétés de conservation de la symétrie axiale'\n\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n// Gestion de la date de publication initiale\nexport const dateDePublication = '26/10/2020'\n\n/**\n * Ref 6G32-1\n * Publié le 26/10/2020\n * @author Jean-Claude Lhote\n * Relecture : Novembre 2021 par EE\n */\nexport default function SymetrieAxialeConservation1 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Dans la symétrie d\\'axe (d), répondre aux questions suivantes.'\n  this.spacing = 2\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    const typesDeQuestionsDisponibles = ['Segment', 'Droite', '1/2droite', 'Triangle', 'Angle']\n    const points = []; const traces = []; const nom = []; let alternance\n    for (let i = 0; i < 25; i++) nom.push(lettreDepuisChiffre(i + 1))\n    const noms = shuffle(nom)\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    this.listeQuestions.push(' ')\n    this.listeCorrections.push(`${texteGras('Dans la symétrie d\\'axe (d), on observe les choses suivantes.')}`)\n    // On prépare la figure...\n    let axe = parseInt(this.sup)\n    let d; let nonchoisi; const coords = []; let x; let y; const objetsEnonce = []; const objetsCorrection = []; let nomd; let labelPos\n    if (axe === 5) axe = randint(1, 4) // choix de l'axe et des coordonnées\n    switch (axe) {\n      case 1: d = droite(1, 0, 0)\n        nomd = texteParPosition('(d)', 0.3, 5.6)\n        labelPos = 'above left'\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 0), randint(-5, 5)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([-coords[j][0], coords[j][1]]) // on stocke les 12 images\n        break\n      case 2: d = droite(0, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', 5.6, 0.3)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 5), randint(-5, 0)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([coords[j][0], -coords[j][1]]) // on stocke les 12 images\n        break\n      case 3: d = droite(1, -1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, -5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            x = randint(-5, 5)\n            y = randint(x, 5)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        this.autoCorrection = []\n        for (let j = 0; j < 12; j++) coords.push([coords[j][1], coords[j][0]]) // on stocke les 12 images\n        break\n      case 4: d = droite(1, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, 5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ? Si oui, on recommence.\n            x = randint(-5, 5)\n            y = randint(-5, -x)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) {\n              if (coords[j][0] === x && coords[j][1] === y) { nonchoisi = false }\n            }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) { coords.push([-coords[j][1], -coords[j][0]]) } // on stocke les 12 images\n        break\n    }\n    for (let i = 0; i < 24; i++) {\n      if (i < 12) points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      else if (coords[i][0] === coords[i - 12][0] && coords[i][1] === coords[i - 12][1]) {\n        points.push(point(coords[i][0], coords[i][1], noms[i - 12], labelPos))\n        noms[i] = noms[i - 12]\n      } else points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      traces.push(tracePoint(points[i]))\n    }\n    // On rédige les questions et les réponses\n    if (this.sup2 === true) alternance = 2\n    else alternance = 1\n    function index (i) {\n      return (i + 12 * (i % alternance)) % 24\n    }\n    objetsEnonce.length = 0\n    objetsCorrection.lenght = 0\n    for (let i = 0, texte, texteCorr, s1, s2, choix, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 'Segment':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = numAlpha(i) + `Quel est le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ ?`\n          texteCorr = numAlpha(i) + `Le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ est le segment $[${noms[index(choix + 12)]}${noms[index(choix + 13)]}]$.`\n          s1 = segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2))\n          s2 = segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2))\n          s1.epaisseur = 2\n          s2.epaisseur = 2\n          objetsCorrection.push(s1, s2)\n          break\n        case 'Droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = numAlpha(i) + `Quel est le symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = numAlpha(i) + `Le symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ est la droite $(${noms[index(choix + 12)]}${noms[index(choix + 13)]})$.`\n          objetsCorrection.push(droite(points[index(choix)], points[index(choix + 1)], '', texcolors(i * 3 + 2)))\n          objetsCorrection.push(droite(points[index(choix + 12)], points[index(choix + 13)], '', texcolors(i * 3 + 2)))\n          break\n        case '1/2droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = numAlpha(i) + `Quel est le symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = numAlpha(i) + `Le symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ est la demi-droite $[${noms[index(choix + 12)]}${noms[index(choix + 13)]})$.`\n          objetsCorrection.push(demiDroite(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(demiDroite(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          break\n        case 'Triangle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          while (appartientDroite(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)])) {\n            choix = randint(0, 9) + randint(0, 1) * 12\n          }\n          texte = numAlpha(i) + `Quel est le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ ?`\n          texteCorr = numAlpha(i) + `Le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ est le triangle $${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}$.`\n          objetsCorrection.push(polygone([points[index(choix)], points[index(choix + 1)], points[index(choix + 2)]], texcolors(i * 3 + 2)))\n          objetsCorrection.push(polygone([points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)]], texcolors(i * 3 + 2)))\n          break\n        case 'Angle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          while (appartientDroite(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)])) {\n            choix = randint(0, 9) + randint(0, 1) * 12\n          }\n          texte = numAlpha(i) + `Quel est le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ ?`\n          texteCorr = numAlpha(i) + `Le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ est l'angle $\\\\widehat{${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}}$.`\n          objetsCorrection.push(codeAngle(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(codeAngle(points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 1)], points[index(choix + 2)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 13)], points[index(choix + 14)], texcolors(i * 3 + 2)))\n\n          break\n      }\n\n      if (context.isAmc) {\n        this.autoCorrection[i] =\n          {\n            enonce: 'Pour chaque question ci-dessous, placer sur la figure d\\'en bas, l\\'objet mathématique demandé puis tracer son symétrique. Répondre ensuite à la question.<br>',\n            enonceAvant: false,\n            enonceAvantUneFois: true,\n            propositions: [\n              {\n                type: 'AMCOpen',\n                propositions: [\n                  {\n                    texte: ' ',\n                    statut: 3, // (ici c'est le nombre de lignes du cadre pour la réponse de l'élève sur AMC)\n                    feedback: '',\n                    enonce: texte.substr(13), // EE : ce champ est facultatif et fonctionnel qu'en mode hybride (en mode normal, il n'y a pas d'intérêt)\n                    sanscadre: true // EE : ce champ est facultatif et permet (si true) de cacher le cadre et les lignes acceptant la réponse de l'élève\n                  }\n                ]\n              }\n            ]\n          }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n\n      cpt++\n    }\n    d.isVisible = true\n    objetsEnonce.push(nomd, d)\n    objetsCorrection.push(nomd, d)\n    for (let i = 0; i < 24; i++) {\n      objetsEnonce.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n      objetsCorrection.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n    }\n    if (context.isAmc) {\n      this.nbQuestions++\n      this.autoCorrection[this.nbQuestions - 1] =\n        {\n          enonce: 'Peu importe',\n          enonceAvant: false,\n          melange: false,\n          propositions: [\n            {\n              type: 'AMCOpen',\n              propositions: [\n                {\n                  texte: ' ',\n                  numQuestionVisible: false,\n                  statut: 3, // (ici c'est le nombre de lignes du cadre pour la réponse de l'élève sur AMC)\n                  feedback: '',\n                  enonce: mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1, style: 'margin-top: 40px' }, objetsEnonce) + '<br>', // EE : ce champ est facultatif et fonctionnel qu'en mode hybride (en mode normal, il n'y a pas d'intérêt)\n                  sanscadre: true // EE : ce champ est facultatif et permet (si true) de cacher le cadre et les lignes acceptant la réponse de l'élève\n                }\n              ]\n            }\n          ]\n        }\n    }\n    this.listeQuestions.push('<br>' + mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1, style: 'margin-top: 40px' }, objetsEnonce))\n    this.listeCorrections.push(mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1 }, objetsCorrection))\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'axe', 5, '1 : Axe vertical\\n2 : Axe horizontal\\n3 : Axe oblique 1\\n4 : Axe oblique 2\\n5 : Axe aléatoire']\n  this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","dateDePublication","SymetrieAxialeConservation1","Exercice","this","consigne","spacing","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","parseInt","points","traces","nom","alternance","i","push","lettreDepuisChiffre","noms","shuffle","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","autoCorrection","texteGras","d","nonchoisi","axe","coords","x","y","objetsEnonce","objetsCorrection","nomd","labelPos","randint","droite","texteParPosition","j","point","tracePoint","index","sup2","length","lenght","texte","texteCorr","s1","s2","choix","cpt","numAlpha","segment","texcolors","epaisseur","demiDroite","appartientDroite","polygone","codeAngle","context","enonce","enonceAvant","enonceAvantUneFois","propositions","type","statut","feedback","substr","sanscadre","indexOf","isVisible","labelPoint","melange","numQuestionVisible","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","style","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}