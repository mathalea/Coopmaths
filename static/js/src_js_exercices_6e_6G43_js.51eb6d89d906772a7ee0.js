/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_6e_6G43_js"],{

/***/ "./src/js/exercices/6e/6G43.js":
/*!*************************************!*\
  !*** ./src/js/exercices/6e/6G43.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ DenombrerCubes)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n/* harmony import */ var _modules_3d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../modules/3d.js */ \"./src/js/modules/3d.js\");\n\n\n\n\nconst titre = 'Représentation de solides';\n/**\n* Compter des cubes\n* @auteur Erwan DUPLESSY\n* 6G43\n* mars 2021\n* Source : http://cache.media.education.gouv.fr/file/Geometrie_et_espace/47/1/RA16_C4_MATH_geo_espace_flash_567471.pdf\n* Compter des cubes dans un empilement de cubes\n*/\n\nfunction DenombrerCubes() {\n  \"use strict\";\n\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this);\n  this.titre = titre;\n  this.nbQuestions = 3; // Ici le nombre de questions\n\n  this.nbQuestionsModifiable = true; // Active le formulaire nombre de questions\n\n  this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n\n  this.nbColsCorr = 1; // Le nombre de colonne pour la correction LaTeX\n\n  this.pasDeVersionLatex = false; // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n\n  this.pas_de_version_HMTL = false; // mettre à true si on ne veut pas de l'exercice en ligne\n\n  this.sup = 1; // A décommenter : valeur par défaut d'un premier paramètre\n\n  this.sup2 = 1; // A décommenter : valeur par défaut d'un deuxième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // tableau contenant la liste des questions \n\n    this.listeCorrections = [];\n    let type_de_questions_disponibles = []; // tableau à compléter par valeurs possibles des types de questions\n\n    switch (parseInt(this.sup)) {\n      case 1:\n        type_de_questions_disponibles = [1];\n\n      case 2:\n        type_de_questions_disponibles = [2];\n\n      case 3:\n        type_de_questions_disponibles = [1, 2];\n    }\n\n    function empilementCubes(long, larg, hmax) {\n      let tabHauteurs = new Array(larg);\n\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i] = new Array(long);\n      } //premiere ligne\n\n\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][0] = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 1);\n      } // deuxième ligne et suivantes\n\n\n      for (let i = 0; i < larg; i++) {\n        for (let j = 1; j < long; j++) {\n          tabHauteurs[i][j] = Math.min(tabHauteurs[i][j - 1] + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 2), hmax);\n        }\n      } //Vérification Dernière Ligne : ne pas être vide.\n\n\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][long - 1] = Math.max(1, tabHauteurs[i][long - 1]);\n      } // Ajoute les cubes dans un tableau une dimension\n      // il faut trier les cubes : x décroissant puis y décroissant, puis z croissant\n\n\n      let lstCoordonneesCubes = [];\n\n      for (let i = larg - 1; i > -1; i = i - 1) {\n        for (let j = long - 1; j > -1; j = j - 1) {\n          for (let k = 0; k < tabHauteurs[i][j]; k++) lstCoordonneesCubes.push([i, j, k]);\n        }\n      }\n\n      return lstCoordonneesCubes;\n    }\n\n    let listeTypeDeQuestions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaisonListes)(type_de_questions_disponibles, this.nbQuestions);\n    let objets_enonce, objets_correction, params_enonce, params_correction;\n    let longueur = 2 + parseInt(this.sup2); // longueur de l'empilement\n\n    let largeur = longueur; // largeur de l'empilement\n\n    let hauteur = longueur; // hauteur de l'empilement\n\n    for (let q = 0, texte, texteCorr, cpt = 0; q < this.nbQuestions && cpt < 50;) {\n      objets_enonce = []; // on initialise le tableau des objets Mathalea2d de l'enoncé\n\n      objets_correction = []; // Idem pour la correction\n\n      texte = `Un empilement de cubes est représenté ci-dessous. <br>`; // Nous utilisons souvent cette variable pour construire le texte de la question.\n\n      texteCorr = ``; // Idem pour le texte de la correction.      \n\n      let L, alpha, beta, cosa, cosb, sina, sinb; // début de l'exercice\n\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          texte += `Combien de petits cubes contient cet empilement de cubes ? <br>`;\n          L = empilementCubes(longueur, largeur, hauteur); // crée un empilement aléatoire\n          //dessin 1\n\n          alpha = 30; // choix de la projection\n\n          beta = -25; // choix de la projection\n\n          objets_enonce = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          cosa = Math.cos(alpha * Math.PI / 180);\n          sina = Math.sin(alpha * Math.PI / 180);\n          cosb = Math.cos(beta * Math.PI / 180);\n          sinb = Math.sin(beta * Math.PI / 180);\n          params_enonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          texte += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_enonce, objets_enonce) + \" \"; //dessin 2\n\n          alpha = 15;\n          beta = -30;\n          objets_enonce = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          params_enonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          texte += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_enonce, objets_enonce) + \" <br>\"; // correction :\n\n          texteCorr += \"On peut représenter l'empilement par tranches : <br>\";\n          alpha = 30;\n          beta = -25;\n          cosa = Math.cos(alpha * Math.PI / 180);\n          sina = Math.sin(alpha * Math.PI / 180);\n          cosb = Math.cos(beta * Math.PI / 180);\n          sinb = Math.sin(beta * Math.PI / 180);\n          params_correction = {\n            xmin: -3 * sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: 3 * cosa * longueur + 0.5,\n            ymax: -sina * sinb * 3 * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          objets_correction = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_correction.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(3 * L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          texteCorr += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_correction, objets_correction) + \"<br>\";\n          texteCorr += `Il y a au total ${L.length} cubes.`;\n          break;\n\n        case 2:\n          texte += `Combien de petits cubes manque-t-il pour reconstruire un grand cube de côté ${longueur} ? <br>`;\n          L = empilementCubes(longueur, largeur, hauteur); //dessin 1\n\n          alpha = 30;\n          beta = -25;\n          objets_enonce = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          cosa = Math.cos(alpha * Math.PI / 180);\n          sina = Math.sin(alpha * Math.PI / 180);\n          cosb = Math.cos(beta * Math.PI / 180);\n          sinb = Math.sin(beta * Math.PI / 180);\n          params_enonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          texte += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_enonce, objets_enonce) + \" \"; //dessin 2\n\n          alpha = 15;\n          beta = -30;\n          objets_enonce = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          cosa = Math.cos(alpha * Math.PI / 180);\n          sina = Math.sin(alpha * Math.PI / 180);\n          cosb = Math.cos(beta * Math.PI / 180);\n          sinb = Math.sin(beta * Math.PI / 180);\n          params_enonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          texte += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_enonce, objets_enonce) + \"<br>\"; // correction :\n\n          texteCorr += \"On peut, par exemple, représenter l'empilement par tranches : <br>\";\n          alpha = 30;\n          beta = -25;\n          cosa = Math.cos(alpha * Math.PI / 180);\n          sina = Math.sin(alpha * Math.PI / 180);\n          cosb = Math.cos(beta * Math.PI / 180);\n          sinb = Math.sin(beta * Math.PI / 180);\n          params_correction = {\n            xmin: -3 * sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: 3 * cosa * longueur + 0.5,\n            ymax: -sina * sinb * 3 * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          };\n          objets_correction = [];\n\n          for (let i = 0; i < L.length; i++) {\n            objets_correction.push((0,_modules_3d_js__WEBPACK_IMPORTED_MODULE_3__.cube)(3 * L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n\n          texteCorr += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_correction, objets_correction) + \"<br>\";\n          texteCorr += `Il y a au total $${L.length}$ cubes. On en veut $${longueur}\\\\times ${largeur} \\\\times ${hauteur} = ${longueur * largeur * hauteur}$. <br>`;\n          texteCorr += `Il manque $${longueur * largeur * hauteur - L.length}$ cubes.`;\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        q++;\n      }\n\n      cpt++;\n    }\n\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.listeQuestionsToContenu)(this); // On envoie l'exercice à la fonction de mise en page\n  }; // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n\n  this.besoinFormulaireNumerique = ['Type de questions', 3, `1 : compter les cubes\\n2 : compter les cubes manquants\\n3 un mélange des deux`];\n  this.besoin_formulaire2_numerique = [\"Taille de l'empilement\", 5, `3 \\n4 \\n5 \\n6 \\n7`]; // this.besoin_formulaire3_case_a_cocher =['figure à main levée',true]\n} // Fin de l'exercice.//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/exercices/6e/6G43.js\n");

/***/ })

}]);