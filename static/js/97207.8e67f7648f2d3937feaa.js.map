{"version":3,"file":"js/97207.8e67f7648f2d3937feaa.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N13.js","webpack://mathalea/./src/js/exercices/6e/_Exercice_conversions.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import ExerciceConversions from './_Exercice_conversions.js'\n\nexport const titre = 'Convertir des longueurs, masses, capacités, prix ou unités informatiques'\nexport { interactifReady, interactifType, amcReady, amcType } from './_Exercice_conversions.js'\n\n/**\n * @author Rémi Angot\n * référence 6N13\n * Relecture : Novembre 2021 par EE\n */\nexport default function Exercice6N13 () {\n  ExerciceConversions.call(this)\n  this.sup = 1\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, arrondi, texNombre, texNombrec, texFraction, texTexte, calcul, texNombre2 } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { format, evaluate } from 'mathjs'\n\nconst math = { format: format, evaluate: evaluate }\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n\n/**\n * Conversions  mètres, litres, grammes, octets (et euros pour la version LaTeX) en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * * 1 : De da, h, k vers l'unité de référence\n * * 2 : De d, c, m vers l'unité de référence\n * * 3 : Multiplications ou divisions vers l'unité de référence\n * * 4 : Conversions d'octets\n * * 5 : Un mélange de toutes les conversions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Relecture : Novembre 2021 par EE\n */\nexport default function ExerciceConversions (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.titre =\n    'Convertir des longueurs, masses, contenance, prix ou unités informatiques'\n  this.consigne = 'Compléter : '\n  this.spacing = 2\n  this.correction_avec_des_fractions = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const tabRep = []\n    const prefixeMulti = [\n      ['da', 10],\n      ['h', 100],\n      ['k', 1000]\n    ] // ['M',1000000],['G',1000000000],['T',1000000000000]];\n    const prefixeDiv = [\n      ['d', 10],\n      ['c', 100],\n      ['m', 1000]\n    ] // ['$\\\\mu{}$',1000000]];\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      unite,\n      typesDeQuestions,\n      texte,\n      texteCorr,\n      listeUniteInfo,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 4)\n      }\n      k = randint(0, 2) // Choix du préfixe\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else if (typesDeQuestions === 3) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions === 4) {\n        listeUniteInfo = ['o', 'ko', 'Mo', 'Go', 'To']\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        ])\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        if (k < 2) {\n          // Choix de l'unité\n          unite = choice(['m', 'L', 'g'])\n        } else if (k === 2) {\n          if (context.isHtml) {\n            unite = choice(['m', 'L', 'g']) // pas de signe € pour KaTeX\n          } else {\n            unite = choice(['m', 'L', 'g', '€'])\n          }\n        } else {\n          unite = 'o'\n        }\n        resultat = calcul(a * prefixeMulti[k][1]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte = '$ ' + texNombre(a) + texTexte(prefixeMulti[k][0] + unite) + ' = ' + (this.interactif && context.isHtml ? `$ ${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: '$' + texTexte(unite) + '$' })}` : `\\\\dotfill ${texTexte(unite)}$`)\n\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          texNombre(prefixeMulti[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombrec(resultat) +\n          texTexte(unite) +\n          '$'\n      } else if (div &&\n        typesDeQuestions < 4 &&\n        this.correction_avec_des_fractions) {\n        unite = choice(['m', 'L', 'g'])\n        resultat = math.evaluate(a / prefixeDiv[k][1])\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' = ' + (this.interactif && context.isHtml ? `$ ${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: ' $' + texTexte(unite) + '$' })}` : ` \\\\dotfill ${texTexte(unite)}$`)\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' =  ' +\n          texFraction(texNombre(a), texNombre(prefixeDiv[k][1])) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre2(resultat) +\n          texTexte(unite) +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        unite = choice(['m', 'L', 'g'])\n        resultat = math.evaluate(a / prefixeDiv[k][1])\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' = ' + (this.interactif && context.isHtml ? `$ ${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: ' $' + texTexte(unite) + '$' })}` : ` \\\\dotfill ${texTexte(unite)}$`)\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\div' +\n          texNombre(prefixeDiv[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre2(resultat) +\n          texTexte(unite) +\n          '$'\n      } else {\n        // pour type de question = 4\n        const unite1 = randint(0, 3)\n        let ecart = randint(1, 2) // nombre de multiplication par 1000 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1\n        }\n        const unite2 = unite1 + ecart\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, 3 * ecart))\n          unite = listeUniteInfo[unite1]\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUniteInfo[unite2]) +\n            ' = ' + (this.interactif && context.isHtml ? `$ ${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: ' $' + texTexte(unite) + '$' })}` : ` \\\\dotfill ${texTexte(unite)}$`)\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUniteInfo[unite2]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\times' +\n            texNombre(Math.pow(10, 3 * ecart)) +\n            texTexte(unite) +\n            ' = ' +\n            texNombrec(resultat) +\n            texTexte(unite) +\n            '$'\n        } else {\n          resultat = math.evaluate(a / Math.pow(10, 3 * ecart))\n          unite = listeUniteInfo[unite2]\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUniteInfo[unite1]) +\n            ' = ' + (this.interactif && context.isHtml ? `$ ${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: ' $' + texTexte(unite) + '$' })}` : ` \\\\dotfill ${texTexte(unite)}$`)\n          texteCorr =\n            '$ ' +\n          texNombre(a) +\n            texTexte(listeUniteInfo[unite1]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\div' +\n            texNombre(Math.pow(10, 3 * ecart)) +\n            texTexte(unite) +\n            ' = ' +\n            texNombre2(resultat) +\n            texTexte(unite) +\n            '$'\n        }\n      }\n\n      if (tabRep.indexOf(resultat) === -1) {\n        setReponse(this, i, resultat)\n        tabRep[i] = resultat\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 5, \"1 : De da, h, k vers l'unité de référence\\n2 : De d, c, m vers l'unité de référence\\n3 : Multiplications ou divisions vers l'unité de référence\\n4 : Conversions avec les octets\\n5 : Mélange\"]\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Exercice6N13","ExerciceConversions","this","sup","math","format","evaluate","interactifReady","interactifType","amcReady","amcType","niveau","Exercice","sup2","consigne","spacing","correction_avec_des_fractions","nouvelleVersion","listeQuestions","listeCorrections","tabRep","prefixeMulti","prefixeDiv","a","k","div","resultat","unite","typesDeQuestions","texte","texteCorr","listeUniteInfo","i","cpt","nbQuestions","randint","choice","arrondi","context","calcul","toString","texNombre","texTexte","interactif","ajouteChampTexteMathLive","texteApres","texNombrec","texFraction","texNombre2","unite1","ecart","unite2","Math","pow","indexOf","setReponse","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}