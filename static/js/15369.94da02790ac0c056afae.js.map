{"version":3,"file":"js/15369.94da02790ac0c056afae.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A11-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,shuffle,combinaisonListesSansChangerOrdre,obtenirListeFacteursPremiers,texNombre,miseEnEvidence,modalPdf,modalVideo,cribleEratostheneN,premiersEntreBornes,warnMessage} from '../../modules/outils.js'\nexport const titre = 'Décomposition en facteurs premiers d’un entier'\n\n/**\n * 3A11-2 - decompositionFacteursPremiers\n * Décomposer un nombre en facteurs premiers et compter son nombre de diviseurs à partir d'un tableau\n * plusieurs type de nombres à décomposer\n * type 1 : 3 à 5 facteurs premiers max, multiplicités 0,1,2 ou 3 max à préciser\n * type 2 : un produit de deux premiers entre 30 et 100, multiplicité 1 ... suffisamment de possibilités?\n * type 3 : un gros premiers au delà de 1000 et inférieur à 2 000\n * @author Sébastien Lozano\n */\nexport default function decompositionFacteursPremiers() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.sup = 1;\n\tthis.titre = titre;\n\t// pas de différence entre la version html et la version latex pour la consigne\n\tthis.consigne = `À l'aide de la calculatrice, décomposer pas à pas les nombres entiers en produit de facteurs premiers.`;\n\t//this.consigne += `<br>`;\n\tcontext.isHtml ? this.spacing = 3 : this.spacing = 2;\n\tcontext.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n\tthis.nbQuestions = 3;\n\t//this.correctionDetailleeDisponible = true;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\tthis.sup = 1;\n\tthis.listePackages = `bclogo`;\n\n\tthis.nouvelleVersion = function (numeroExercice) {\n\t\tlet typesDeQuestions;\n\t\tif (context.isHtml) { // les boutons d'aide uniquement pour la version html\n\t\t\t//this.boutonAide = '';\n\t\t\tthis.boutonAide = modalPdf(numeroExercice, \"assets/pdf/FicheArithmetique-3A11.pdf\", \"Aide mémoire sur les nombres premiers (Sébastien Lozano)\", \"Aide mémoire\");\n\t\t\tthis.boutonAide += modalVideo('conteMathsNombresPremiers', '/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo');\n\t\t} else { // sortie LaTeX\n\t\t};\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tthis.contenu = ''; // Liste de questions\n\t\tthis.contenuCorrection = ''; // Liste de questions corrigées\n\n\t\tlet typesDeQuestionsDisponibles = [1, 2, 3];\n\t\ttypesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles); // on mélange l'ordre des questions\n\n\t\t//let typesDeQuestionsDisponibles = [1];\n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions);\n\n\t\tlet string_rappel = `Cette liste des nombres premiers inférieurs à 100 pourra être utile : <br>` + cribleEratostheneN(100)[0];\n\t\tfor (let k = 1; k < cribleEratostheneN(100).length; k++) {\n\t\t\tstring_rappel += `, ` + cribleEratostheneN(100)[k];\n\t\t};\n\t\tstring_rappel += `.`;\n\n\t\tthis.introduction = warnMessage(string_rappel, `nombres`, `Coup de pouce`);\n\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\ttypesDeQuestions = listeTypeDeQuestions[i];\n\n\t\t\tswitch (typesDeQuestions) {\n\t\t\t\tcase 1: // 3 à 5 facteurs premiers max compris entre 0 et 30, de multiplicité 1,2 ou 3 max\n\t\t\t\t\t// on fixe le nombre de facteurs premier entre 3 et 5\n\t\t\t\t\tlet nb_de_premiers = randint(3, 5);\n\t\t\t\t\t// on fixe la limite pour le choix des premiers\n\t\t\t\t\tlet max_premier = 11;\n\t\t\t\t\t// on fixe le rang max pour le choix des premiers\n\t\t\t\t\tlet rg_max = cribleEratostheneN(max_premier).length - 1;\n\t\t\t\t\t// on choisit les rangs pour les nombres premiers\n\t\t\t\t\tlet tab_rangs = [];\n\t\t\t\t\tlet tab_rangs_exclus = [];\n\t\t\t\t\tfor (let k = 0; k < (nb_de_premiers); k++) {\n\t\t\t\t\t\tfor (let m = 0; m < k; m++) {\n\t\t\t\t\t\t\ttab_rangs_exclus.push(tab_rangs[m]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttab_rangs[k] = randint(0, rg_max, tab_rangs_exclus);\n\t\t\t\t\t};\n\t\t\t\t\t// on choisit les premiers\n\t\t\t\t\tlet tab_premiers = [];\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\ttab_premiers[k] = cribleEratostheneN(max_premier)[tab_rangs[k]];\n\t\t\t\t\t};\n\t\t\t\t\t// on range les facteurs premiers dans l'ordre croissant\n\t\t\t\t\ttab_premiers.sort(function (a, b) {\n\t\t\t\t\t\treturn a - b;\n\t\t\t\t\t});\n\t\t\t\t\t// on choisit les multiplicités\n\t\t\t\t\tlet tab_multiplicites = [];\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\ttab_multiplicites[k] = randint(1, 2);\n\t\t\t\t\t};\n\t\t\t\t\t// yapluka écrire le nombre dans l'énoncé et sa décomposition dans la correction\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer `;\n\t\t\t\t\tlet nombre_a_decomposer = 1;\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\tfor (let m = 0; m < tab_multiplicites[k]; m++) {\n\t\t\t\t\t\t\tnombre_a_decomposer = nombre_a_decomposer * tab_premiers[k];\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tlet racine_premier_1 = Math.trunc(Math.sqrt(nombre_a_decomposer));\n\t\t\t\t\ttexte += `$${texNombre(nombre_a_decomposer)}$ en produit de facteurs premiers.`;\n\t\t\t\t\t// correction\t\t\t\t\t\t\n\t\t\t\t\ttexteCorr = `Nous allons successivement tester la divisibilité de $${texNombre(nombre_a_decomposer)}$ par tous les nombres premiers inférieurs à `;\n\t\t\t\t\ttexteCorr += `$${texNombre(nombre_a_decomposer)}$ en commençant par 2, 3, 5, 7, ...<br>`;\n\t\t\t\t\ttexteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(nombre_a_decomposer)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(nombre_a_decomposer)}}$ c'est à dire inférieurs à $${texNombre(racine_premier_1)}$.<br>`;\n\t\t\t\t\ttexteCorr += `Ce sont les nombres de la liste : <br>`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier_1)[0] + ` ; `;\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_premier_1).length; k++) {\n\t\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier_1)[k];\n\t\t\t\t\t\tif (k != cribleEratostheneN(racine_premier_1).length - 1) {\n\t\t\t\t\t\t\ttexteCorr += ` ; `;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (k % 15 == 0) {\n\t\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tvar liste_facteurs_premiers = obtenirListeFacteursPremiers(nombre_a_decomposer);\n\t\t\t\t\tvar quotient_intermediaire = nombre_a_decomposer;\n\t\t\t\t\tfor (let k = 0; k < liste_facteurs_premiers.length; k++) {\n\t\t\t\t\t\ttexteCorr += `$${texNombre(quotient_intermediaire)}\\\\div${miseEnEvidence(liste_facteurs_premiers[k])} = ${texNombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;\n\t\t\t\t\t\tquotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `Finalement on obtient la décomposition suivante : $ ${texNombre(nombre_a_decomposer)} = `;\n\t\t\t\t\tif (tab_multiplicites[0] == 1) {\n\t\t\t\t\t\ttexteCorr += `${tab_premiers[0]}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `${tab_premiers[0]}^{${tab_multiplicites[0]}}`;\n\t\t\t\t\t};\n\t\t\t\t\tfor (let k = 1; k < tab_premiers.length; k++) {\n\t\t\t\t\t\tif (tab_multiplicites[k] == 1) {\n\t\t\t\t\t\t\ttexteCorr += `\\\\times ${tab_premiers[k]}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexteCorr += `\\\\times ${tab_premiers[k]}^{${tab_multiplicites[k]}}`;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `$`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // deux premiers compris entre 30 et 100 de multiplicité 1\n\t\t\t\t\t// on choisit un rang différent pour chaque premier entre 30 et 100\n\t\t\t\t\tlet r1 = randint(0, premiersEntreBornes(30, 100).length - 1);\n\t\t\t\t\tlet r2 = randint(0, premiersEntreBornes(30, 100).length - 1, r1);\n\t\t\t\t\tlet premier1 = premiersEntreBornes(30, 100)[r1];\n\t\t\t\t\tlet premier2 = premiersEntreBornes(30, 100)[r2];\n\t\t\t\t\tif (premier1 > premier2) { // on inverse p1 et p2 si p1 est supérieur à p2\n\t\t\t\t\t\tlet p = premier1;\n\t\t\t\t\t\tpremier1 = premier2;\n\t\t\t\t\t\tpremier2 = p;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer $${texNombre(premier1 * premier2)}$ en produit de facteurs premiers.`;\n\t\t\t\t\tlet racine_prem = Math.trunc(Math.sqrt(premier1 * premier2));\n\t\t\t\t\ttexteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(premier1 * premier2)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(premier1 * premier2)}}$ c'est à dire inférieurs à $${texNombre(racine_prem)}$.<br>`;\n\t\t\t\t\ttexteCorr += `Ce sont les nombres de la liste suivante : <br>$`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_prem)[0];\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_prem).length; k++) {\n\t\t\t\t\t\ttexteCorr += `; ` + cribleEratostheneN(racine_prem)[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.$<br>`;\n\t\t\t\t\tliste_facteurs_premiers = obtenirListeFacteursPremiers(premier1 * premier2);\n\t\t\t\t\tquotient_intermediaire = premier1 * premier2;\n\t\t\t\t\tfor (let k = 0; k < liste_facteurs_premiers.length; k++) {\n\t\t\t\t\t\ttexteCorr += `$${texNombre(quotient_intermediaire)}\\\\div${miseEnEvidence(liste_facteurs_premiers[k])} = ${texNombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;\n\t\t\t\t\t\tquotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += ` D'où $${texNombre(premier1 * premier2)} = ${texNombre(premier1)}\\\\times${texNombre(premier2)}$.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: // un gros premier entre 1000 et 2000\t\t\t\n\t\t\t\t\t// on choisit un rang pour le nombre premier entre 1000 et 2000\n\t\t\t\t\tlet r = randint(0, premiersEntreBornes(1000, 2000).length - 1);\n\t\t\t\t\tlet premier = premiersEntreBornes(1000, 2000)[r];\n\t\t\t\t\tlet racine_premier = Math.trunc(Math.sqrt(premier));\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer $${texNombre(premier)}$ en produit de facteurs premiers.`;\n\t\t\t\t\ttexteCorr = `En testant la divisibilité de $${texNombre(premier)}$ par tous les nombres premiers inférieurs ou égaux à $${racine_premier}$`;\n\t\t\t\t\ttexteCorr += ` c'est à dire les nombre de la liste $`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier)[0];\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_premier).length; k++) {\n\t\t\t\t\t\ttexteCorr += `; ` + cribleEratostheneN(racine_premier)[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `$, `;\n\t\t\t\t\ttexteCorr += `on se rend compte que $${texNombre(premier)}$ est un nombre premier donc `;\n\t\t\t\t\ttexteCorr += `$${texNombre(premier)} = ${texNombre(premier)}$.`;\n\t\t\t\t\tbreak;\n\t\t\t};\n\n\t\t\tif (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\t//this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"]; \n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","decompositionFacteursPremiers","Exercice","this","sup","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","listeQuestions","listeCorrections","contenu","contenuCorrection","typesDeQuestionsDisponibles","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","string_rappel","cribleEratostheneN","k","length","introduction","warnMessage","texte","texteCorr","i","cpt","nb_de_premiers","randint","max_premier","rg_max","tab_rangs","tab_rangs_exclus","m","push","tab_premiers","sort","a","b","tab_multiplicites","nombre_a_decomposer","racine_premier_1","Math","trunc","sqrt","texNombre","liste_facteurs_premiers","obtenirListeFacteursPremiers","quotient_intermediaire","miseEnEvidence","r1","premiersEntreBornes","r2","premier1","premier2","p","racine_prem","r","premier","racine_premier","indexOf","listeQuestionsToContenu","consigneCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}