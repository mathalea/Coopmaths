{"version":3,"file":"js/84219.e548e93293a46c125fe8.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, shuffle, shuffle2tableaux, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleur, modalPdf, listeDiviseurs } from '../../modules/outils.js'\n\nexport const titre = 'Division Euclidienne - Diviseurs - Multiples'\n\n/**\n * 3A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano\n */\nexport default function DivisionEuclidienneMultiplesDiviseursCriteres () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Divisions euclidiennes - Diviseurs - Multiples.'\n  // context.isHtml ? this.spacing = 3 : this.spacing = 2;\n  context.isHtml ? this.spacing = 1 : this.spacing = 2\n  // context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 2\n  this.nbQuestions = 5\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A10.pdf', 'Aide mémoire sur la division euclidienne (Sébastien Lozano)', 'Aide mémoire')\n      // this.boutonAide += modalVideo('conteMathsNombresPremiers','/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, N, n1, n2, p1, p2, rgDiviseur, multiplicateurs, tableauDeChoix, rangN, rangNb3Chiffres, tableauDeChoix3Chiffres, multiples, textes, textesCorr, candidatsDiviseurs, dividende, diviseur, quotient, reste, diviseurs, quotients, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      switch (typesDeQuestions) {\n        case 1: // plus grand reste dans une division euclidienne\n          diviseur = randint(2, 99)\n          texte = `Dire quel est le plus grand reste possible dans une division euclidienne par ${diviseur}.`\n          texteCorr = `Si on divise par ${diviseur}, il ne peut pas rester plus de ${diviseur - 1}, sinon c'est qu'on peut encore ajouter au moins 1 fois ${diviseur} dans le dividende et donc 1 au quotient.`\n          break\n        case 2: // quotient et reste d'une division euclidienne donnée\n          diviseur = randint(2, 99)\n          dividende = randint(1001, 99999)\n          quotient = Math.trunc(dividende / diviseur)\n          reste = dividende % diviseur\n\n          texte = `On a ${nombreAvecEspace(dividende)}=${nombreAvecEspace(diviseur)}$\\\\times$${nombreAvecEspace(quotient)} $+$ ${nombreAvecEspace(reste)}`\n          texte += '<br>'\n          texte += `Écrire le quotient et le reste de la division euclidienne de ${nombreAvecEspace(dividende)} par ${diviseur}.`\n          texteCorr = `Dans la division euclidienne de ${nombreAvecEspace(dividende)} par ${diviseur}, le quotient vaut ${nombreAvecEspace(quotient)} et le reste ${reste}.`\n          break\n        case 3: // caractérisation des multiples et diviseurs par le reste de la division euclidienne\n          dividende = randint(101, 9999)\n          if (listeDiviseurs(dividende).length % 2 === 0) { // si il y a un nombre pair de diviseurs on prend le (n/2+1) eme\n            rgDiviseur = listeDiviseurs(dividende).length / 2 + 1 // rang du diviseur choisi\n          } else { // il y a nbre impair de diviseurs on prend le ((n-1)/2 +1) eme\n            rgDiviseur = (listeDiviseurs(dividende).length - 1) / 2 + 1\n          }\n          diviseur = listeDiviseurs(dividende)[rgDiviseur - 1] // on choisit le diviseur central de dividende, ATTENTION rang des tableaux commence à 0\n          candidatsDiviseurs = [diviseur - 1, diviseur, diviseur + 1] // on prend l'entier précédent et le successeur de ce diviseur\n\n          // Faut-il que je conditionne pour éviter le diviseur 1 ?\n          candidatsDiviseurs = shuffle(candidatsDiviseurs) // on mélange le tableau\n          texte = 'Les trois divisions euclidiennes suivantes sont exactes : <br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[0])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[0]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[0])}`\n          texte += '<br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[1])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[1]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[1])}`\n          texte += '<br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[2])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[2]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[2])}`\n          texte += '<br>'\n          texte += `Sans calculer, dire si les nombres ${nombreAvecEspace(candidatsDiviseurs[0])}; ${nombreAvecEspace(candidatsDiviseurs[1])}; ${nombreAvecEspace(candidatsDiviseurs[2])} sont des diviseurs de ${nombreAvecEspace(dividende)}. Justifier.`\n          texteCorr = ''\n          if (egal(dividende % candidatsDiviseurs[0], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[0])} vaut 0 donc ${nombreAvecEspace(candidatsDiviseurs[0])} est un diviseur de ${nombreAvecEspace(dividende)}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[0])} ne vaut pas 0 donc ${nombreAvecEspace(candidatsDiviseurs[0])} n'est pas un diviseur de ${nombreAvecEspace(dividende)}`\n          }\n          texteCorr += '<br>'\n          if (egal(dividende % candidatsDiviseurs[1], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[1])} vaut 0 donc ${nombreAvecEspace(candidatsDiviseurs[1])} divise ${nombreAvecEspace(dividende)}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[1])} ne vaut pas 0 donc ${nombreAvecEspace(candidatsDiviseurs[1])} ne divise pas ${nombreAvecEspace(dividende)}`\n          }\n          texteCorr += '<br>'\n          if (egal(dividende % candidatsDiviseurs[2], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[2])} vaut 0 donc ${nombreAvecEspace(dividende)} est divisible par ${nombreAvecEspace(candidatsDiviseurs[2])}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[2])} ne vaut pas 0 donc ${nombreAvecEspace(dividende)} n'est pas divisible par ${nombreAvecEspace(candidatsDiviseurs[2])}`\n          }\n          texteCorr += '<br>'\n          break\n        case 4: // vocabulaire diviseurs et multiples\n          // on déclare des tableaux utiles\n          diviseurs = []\n          multiplicateurs = []\n          multiples = []\n          quotients = []\n          textes = []\n          textesCorr = []\n          // on tire au hasard 4 diviseurs différents entre 2 et 999 et 4 multiplicateurs différents entre 2 et 9\n          diviseurs = [randint(2, 999), randint(2, 999, [diviseurs[0]]), randint(2, 999, [diviseurs[0], diviseurs[1]]), randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2]])]\n          multiplicateurs = [randint(2, 9), randint(2, 9, [multiplicateurs[0]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1], multiplicateurs[2]])]\n          // on calcule les multiples\n          for (let j = 0; j < 4; j++) {\n            multiples[j] = diviseurs[j] * multiplicateurs[j]\n            quotients[j] = multiples[j] / diviseurs[j]\n            diviseurs[j] = nombreAvecEspace(diviseurs[j])\n            multiples[j] = nombreAvecEspace(multiples[j])\n            quotients[j] = nombreAvecEspace(quotients[j])\n          };\n          // on crée les phrases\n          textes[0] = `${diviseurs[0]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[0]}`\n          textesCorr[0] = `${diviseurs[0]} est un diviseur de ${multiples[0]} car ${multiples[0]}=${diviseurs[0]}$\\\\times$${quotients[0]}`\n          textes[1] = `${diviseurs[1]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[1]}`\n          textesCorr[1] = `${diviseurs[1]} est un diviseur de ${multiples[1]} car ${multiples[1]}=${diviseurs[1]}$\\\\times$${quotients[1]}`\n          textes[2] = `${multiples[2]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[2]}`\n          textesCorr[2] = `${multiples[2]} est un multiple de ${diviseurs[2]} car ${multiples[2]}=${diviseurs[2]}$\\\\times$${quotients[2]}`\n          textes[3] = `${multiples[3]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[3]}`\n          textesCorr[3] = `${multiples[3]} est un multiple de ${diviseurs[3]} car ${multiples[3]}=${diviseurs[3]}$\\\\times$${quotients[3]}`\n          // on ajoute deux cas ni multiple ni diviseur\n          // on choisit deux nombres\n          n1 = nombreAvecEspace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3]]))\n          p1 = nombreAvecEspace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3], n1]))\n          // on choisit un autre qui n'est pas dans la liste des diviseurs de n1\n          n2 = nombreAvecEspace(randint(2, 999, listeDiviseurs(n1)))\n          p2 = nombreAvecEspace(randint(2, 999, listeDiviseurs(p1)))\n          textes[4] = `${n1} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${n2}`\n          textesCorr[4] = `${n1} n'est ni un multiple ni un diviseur de ${n2} car ${n1}=${n2}$\\\\times$${Math.trunc(n1 / n2)}+${texteEnCouleur(n1 % n2)} et ${n2}=${n1}$\\\\times$${Math.trunc(n2 / n1)}+${texteEnCouleur(n2 % n1)}`\n          textes[5] = `${p2} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${p1}`\n          textesCorr[5] = `${p2} n'est ni un multiple ni un diviseur de ${p1} car ${p1}=${p2}$\\\\times$${Math.trunc(p1 / p2)}+${texteEnCouleur(p1 % p2)} et ${p2}=${p1}$\\\\times$${Math.trunc(p2 / p1)}+${texteEnCouleur(p2 % p1)}`\n          // on mélange pour que l'ordre change!\n          shuffle2tableaux(textes, textesCorr)\n          texte = 'Avec la calculatrice, compléter chaque phrase avec \"est un diviseur de\" ou \"est un multiple de\" ou \"n\\'est ni un diviseur ni un multiple de\".'\n          texte += '<br>'\n          texteCorr = ''\n          for (let j = 0; j < 5; j++) {\n            texte += textes[j]\n            texte += '<br>'\n            texteCorr += textesCorr[j]\n            texteCorr += '<br>'\n          };\n          texte += textes[5]\n          // texte +=`<br>`;\n          texteCorr += textesCorr[5]\n          texteCorr += '<br>'\n          break\n        case 5: // liste des diviseurs\n          // on définit un tableau pour les choix du nombre dont on veut les diviseurs\n          // 3 parmis 2,99 y compris les premiers et 1 parmis les entiers à 3 chiffres ayant au moins 8 diviseurs, il y en a 223 !\n          tableauDeChoix = []\n          for (let k = 0; k < 3; k++) {\n            tableauDeChoix.push(randint(2, 99, tableauDeChoix))\n          }\n          tableauDeChoix3Chiffres = []\n          for (let m = 101; m < 999; m++) {\n            if (listeDiviseurs(m).length > 8) {\n              tableauDeChoix3Chiffres.push(m)\n            };\n          };\n          // on ajoute un nombre à trois chiffre avec au moins 8 diviseurs dans les choix possibles\n          rangNb3Chiffres = randint(0, (tableauDeChoix3Chiffres.length - 1))\n          tableauDeChoix.push(tableauDeChoix3Chiffres[rangNb3Chiffres])\n          rangN = randint(0, (tableauDeChoix.length - 1)) // pour tirer le rang du nombre dans le tableau des choix\n          N = tableauDeChoix[rangN] // on déclare le nombre dont on va chercher les diviseurs\n          texte = `Écrire la liste de tous les diviseurs de ${N}.`\n          texteCorr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En écrivant toujours le plus petit facteur en premier.<br>`\n          texteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\\\times$${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N)) * Math.trunc(Math.sqrt(N))}<${N}`\n          texteCorr += ` et ${Math.trunc(Math.sqrt(N)) + 1}$\\\\times$${Math.trunc(Math.sqrt(N)) + 1} = ${(Math.trunc(Math.sqrt(N)) + 1) * (Math.trunc(Math.sqrt(N)) + 1)}>${N} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(N))}.`\n          texteCorr += ` En effet, si ${N} est le produit de deux entiers p$\\\\times$q avec p < q alors si p$\\\\times$p > ${N} c'est que q$\\\\times$q < ${N} mais dans ce cas p serait supérieur à q sinon p$\\\\times$q serait inférieur à ${N} ce qui ne doit pas être le cas.<br>`\n          if (listeDiviseurs(N).length % 2 === 0) { // si il y a un nombre pair de diviseurs\n            for (let m = 0; m < (listeDiviseurs(N).length / 2); m++) {\n              texteCorr += '' + listeDiviseurs(N)[m] + '$\\\\times$' + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + ` = ${N}<br>`\n            };\n          } else {\n            for (let m = 0; m < ((listeDiviseurs(N).length - 1) / 2); m++) {\n              texteCorr += '' + listeDiviseurs(N)[m] + '$\\\\times$' + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + '<br>'\n            };\n            texteCorr += '' + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + '$\\\\times$' + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + ` = ${N}<br>`\n          };\n          texteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`\n          texteCorr += `La liste des diviseurs de ${N} est donc `\n          texteCorr += '1'\n          for (let w = 1; w < listeDiviseurs(N).length; w++) {\n            texteCorr += ' ; ' + listeDiviseurs(N)[w]\n          };\n          texteCorr += '.'\n          break\n      };\n\n      if (this.questionJamaisPosee(i, typesDeQuestions, texte)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","DivisionEuclidienneMultiplesDiviseursCriteres","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","N","n1","n2","p1","p2","rgDiviseur","multiplicateurs","tableauDeChoix","rangN","rangNb3Chiffres","tableauDeChoix3Chiffres","multiples","textes","textesCorr","candidatsDiviseurs","dividende","diviseur","quotient","reste","diviseurs","quotients","texte","texteCorr","i","cpt","randint","Math","trunc","nombreAvecEspace","listeDiviseurs","length","shuffle","egal","j","texteEnCouleur","shuffle2tableaux","k","push","m","sqrt","w","questionJamaisPosee","listeQuestionsToContenu","consigneCorrection","introduction","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}