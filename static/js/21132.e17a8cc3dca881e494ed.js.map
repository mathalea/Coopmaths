{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N31-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","OrdreDeGrandeurOperationsDecimaux","typesDeQuestionsDisponibles","Exercice","this","beta","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","shuffle","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","ligneEntete","texNombre","ligneEnteteCorr","m","randint","c1","c2","c3","c4","d","d1","d2","d3","u","u1","u2","u3","cbis","d1bis","divAleatoireOpe3","choice","divAleatoireOpe5","multAleatoireOpe4","myOrdreOpe1","c","miseEnEvidence","myOrdreOpe2","myOrdreOpe4","n","sortie","myOrdreOpe5","mult","situations","operation","operation_corr","operation_coche","enonces","k","push","enonce","tableauColonneLigne","question","correction","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/21132.e17a8cc3dca881e494ed.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, shuffle, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, tableauColonneLigne } from '../../modules/outils.js'\nexport const titre = 'Ordre de grandeur et opérations sur les décimaux'\n\n/**\n * * Ordre de grandeur d'une opération entre décimaux\n * * 6N31-2\n * @author Sébastien Lozano\n */\n\nexport default function OrdreDeGrandeurOperationsDecimaux () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  if (this.beta) {\n    this.nbQuestions = 1\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.consigne = 'Pour chaque opération proposée dans la première colonne, cocher la case correspondant à l\\'ordre de grandeur du résultat.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = shuffle([0])\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const ligneEntete = ['\\\\text{Opération}', '\\\\phantom{000}' + texNombre('1') + '\\\\phantom{000}', '\\\\phantom{00}' + texNombre('10') + '\\\\phantom{00}', '\\\\phantom{00}' + texNombre('100') + '\\\\phantom{00}', '\\\\phantom{0}' + texNombre('1000') + '\\\\phantom{0}', texNombre('10000'), texNombre('100000')]\n      const ligneEnteteCorr = ['\\\\text{Opération}', '\\\\phantom{000}' + texNombre('1') + '\\\\phantom{000}', '\\\\phantom{00}' + texNombre('10') + '\\\\phantom{00}', '\\\\phantom{00}' + texNombre('100') + '\\\\phantom{00}', '\\\\phantom{0}' + texNombre('1000') + '\\\\phantom{0}', texNombre('10000'), texNombre('100000')]\n\n      const m = randint(1, 9, [4, 5, 6])\n      const c1 = randint(1, 9)\n      const c2 = randint(1, 9)\n      const c3 = randint(1, 9, [4, 5, 6])\n      const c4 = randint(1, 4)\n      const d = randint(1, 9)\n      const d1 = randint(1, 9)\n      const d2 = randint(1, 9)\n      const d3 = randint(1, 9)\n      const u = randint(1, 9)\n      const u1 = randint(1, 9)\n      const u2 = randint(1, 9)\n      const u3 = randint(1, 9)\n\n      let cbis, d1bis\n      do {\n        cbis = randint(2, 9)\n        d1bis = randint(2, 9)\n      } while (cbis * d1bis > 3 && cbis * d1bis < 7)\n\n      const divAleatoireOpe3 = choice([10, 100])\n      const divAleatoireOpe5 = choice([1, 10, 100, 1000])\n      const multAleatoireOpe4 = choice([0.1, 0.01, 0.001])\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 1\n      function myOrdreOpe1 (c, d) {\n        if (c * d >= 60) {\n          return ['', '', '', '', '', miseEnEvidence('X')]\n        } else {\n          return ['', '', '', '', miseEnEvidence('X'), '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 2\n      function myOrdreOpe2 (c1, c2) {\n        if (c1 + c2 / 10 >= 600) {\n          return ['', '', '', miseEnEvidence('X'), '', '']\n        } else {\n          return ['', '', miseEnEvidence('X'), '', '', '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 3\n      function myOrdreOpe3 (n) {\n        if (n >= 7) {\n          return ['', '', '', miseEnEvidence('X'), '', '']\n        } else {\n          return ['', '', miseEnEvidence('X'), '', '', '']\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 4\n      function myOrdreOpe4 (d, n) {\n        let sortie\n        switch (d) {\n          case 0.1:\n            if (n >= 7) {\n              sortie = ['', '', '', miseEnEvidence('X'), '', '']\n            } else {\n              sortie = ['', '', miseEnEvidence('X'), '', '', '']\n            };\n            break\n          case 0.01:\n            if (n >= 7) {\n              sortie = ['', '', miseEnEvidence('X'), '', '', '']\n            } else {\n              sortie = ['', miseEnEvidence('X'), '', '', '', '']\n            };\n            break\n          case 0.001:\n            if (n >= 7) {\n              sortie = ['', miseEnEvidence('X'), '', '', '', '']\n            } else {\n              sortie = [miseEnEvidence('X'), '', '', '', '', '']\n            };\n            break\n        }\n        return sortie\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 5\n      function myOrdreOpe5 (mult) {\n        let sortie\n        switch (mult) {\n          case 1:\n            return ['', '', '', miseEnEvidence('X'), '', '']\n          case 10:\n            return ['', '', miseEnEvidence('X'), '', '', '']\n          case 100:\n            return ['', miseEnEvidence('X'), '', '', '', '']\n          case 1000:\n            return [miseEnEvidence('X'), '', '', '', '', '']\n        };\n        return sortie\n      };\n\n      let situations = [\n        {\n          operation: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1}`,\n          operation_corr: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1} \\\\simeq  ${(cbis * 100)}\\\\times ${(d1bis * 10)} \\\\text{ soit } ${texNombre((cbis * 100) * (d1bis * 10))}`,\n          operation_coche: myOrdreOpe1(cbis, d1bis)\n        },\n        {\n          operation: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1}`,\n          operation_corr: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1} \\\\simeq ${c2 * 100 / 10}+${c1 * 100} \\\\text{ soit } ${c2 * 100 / 10 + c1 * 100}`,\n          operation_coche: myOrdreOpe2(c1 * 100, c2 * 100)\n        },\n        {\n          operation: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / divAleatoireOpe3)}`,\n          operation_corr: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / divAleatoireOpe3)} \\\\simeq ${c3 * 100 + d3 * 10}-${texNombre((c2 * 100) / divAleatoireOpe3)} \\\\text{ soit } ${c3 * 100 + d3 * 10 - (c2 * 100) / divAleatoireOpe3}`,\n          operation_coche: myOrdreOpe3(c3)\n        },\n        {\n          operation: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(multAleatoireOpe4)}`,\n          operation_corr: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(multAleatoireOpe4)} \\\\simeq ${texNombre(m * 1000)}\\\\times ${texNombre(multAleatoireOpe4)} \\\\text{ soit } ${texNombre(m * 1000 * multAleatoireOpe4)}`,\n          operation_coche: myOrdreOpe4(multAleatoireOpe4, m)\n        },\n        {\n          operation: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / divAleatoireOpe5)}\\\\div ${m}`,\n          operation_corr: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / divAleatoireOpe5)}\\\\div ${m} \\\\simeq ${texNombre((m * 1000) / divAleatoireOpe5)}\\\\div ${m} \\\\text{ soit } ${texNombre((m * 1000) / divAleatoireOpe5 / m)}`,\n          operation_coche: myOrdreOpe5(divAleatoireOpe5)\n        }\n\n      ]\n\n      situations = shuffle(situations)\n\n      const enonces = []\n      for (let k = 0; k < 1; k++) {\n        enonces.push({\n          enonce: `\n          ${tableauColonneLigne(ligneEntete, [situations[0].operation, situations[1].operation, situations[2].operation, situations[3].operation, situations[4].operation],\n            [\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', ''\n            ]\n          )}\n          `,\n          question: '',\n          correction: `\n          Commençons par calculer un ordre de grandeur du résultat de chaque opération dans la première colonne du tableau.\n          <br>\n          ${tableauColonneLigne(ligneEnteteCorr, [situations[0].operation_corr, situations[1].operation_corr, situations[2].operation_corr, situations[3].operation_corr, situations[4].operation_corr],\n            [\n              situations[0].operation_coche[0], situations[0].operation_coche[1], situations[0].operation_coche[2], situations[0].operation_coche[3], situations[0].operation_coche[4], situations[0].operation_coche[5],\n              situations[1].operation_coche[0], situations[1].operation_coche[1], situations[1].operation_coche[2], situations[1].operation_coche[3], situations[1].operation_coche[4], situations[1].operation_coche[5],\n              situations[2].operation_coche[0], situations[2].operation_coche[1], situations[2].operation_coche[2], situations[2].operation_coche[3], situations[2].operation_coche[4], situations[2].operation_coche[5],\n              situations[3].operation_coche[0], situations[3].operation_coche[1], situations[3].operation_coche[2], situations[3].operation_coche[3], situations[3].operation_coche[4], situations[3].operation_coche[5],\n              situations[4].operation_coche[0], situations[4].operation_coche[1], situations[4].operation_coche[2], situations[4].operation_coche[3], situations[4].operation_coche[4], situations[4].operation_coche[5]\n            ]\n          )}`\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n};\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}