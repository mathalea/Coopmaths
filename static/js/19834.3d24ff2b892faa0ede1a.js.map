{"version":3,"file":"js/19834.3d24ff2b892faa0ede1a.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/betaTracerParabole.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { courbe, repere, mathalea2d } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, texFractionReduite, ecritureAlgebrique, texRacineCarree, ecritureParentheseSiNegatif, calcul, lettreMinusculeDepuisChiffre, texNombre } from '../../modules/outils.js'\nimport { simplify, floor } from 'mathjs'\n\nconst EgalEnviron = (v, d = 3) => ((Math.abs(v) * 10 ** d) % 1 > 0 ? '\\\\approx' : '=') + texNombre(calcul(v, 3))\n\nexport const titre = 'Etude d’une parabole'\n\n/**\n * @author Eric Schrafstetter\n */\nexport default function TrouverEquationDeParabole () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Etude d’une parabole'\n  this.nbQuestions = 2\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  context.isHtml ? (this.spacingCorr = 3) : (this.spacingCorr = 1)\n  this.sup = 1\n  this.correctionDetailleeDisponible = true\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    if (this.sup < 4) typesDeQuestionsDisponibles = [parseInt(this.sup)]\n    else typesDeQuestionsDisponibles = [1]\n    const fName = []\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, a, b, c, P, xs, ys, x, Psimp, d, x1, x2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      fName.push(lettreMinusculeDepuisChiffre(i + 6))\n      texte = 'Faire l\\'étude et la représentation graphique de la parabole $P$ d\\'équation :'\n      switch (listeTypeDeQuestions[i]) {\n        case 1 : // passe par 3 points à coordonnées entières dont -x1, 0 et x1.\n          a = randint(-4, 4, 0)\n          b = randint(-4, 4)\n          c = randint(-5, 5)\n          d = b * b - 4 * a * c\n          xs = texFractionReduite(-b, 2 * a)\n          ys = texFractionReduite(-d, 4 * a)\n          P = `${a}*x^2${ecritureAlgebrique(b)}*x${ecritureAlgebrique(c)}`\n          Psimp = `${simplify(P).toString().replaceAll('*', '\\\\times ')}`\n          P = P.replaceAll('*', '\\\\times ')\n          texte = `$P : y = ${Psimp}$`\n\n          texteCorr = `Le coefficient $a=${a}$ devant le terme en $x^2$ est ${['négatif', 'positif'][1 * (a > 0)]}, la parabole $P$ a donc ses branches dirigées vers le ${['bas', 'haut'][1 * (a > 0)]}`\n\n          texteCorr += `<br>Regardons si la parabole $P$ coupe l'axe des abscisses, pour cela cherchons les $x$ tels que : $${Psimp}=0$`\n          if (d > 0) {\n            x1 = (-b - Math.sqrt(d)) / 2 / a\n            x2 = (-b + Math.sqrt(d)) / 2 / a\n            if (c === 0) {\n              texteCorr += `<br>On peut factoriser l'expression en : $x(${a}\\\\times x${ecritureAlgebrique(b)})=0$`\n              texteCorr += '<br>On en déduit que la parabole $P$ coupe l\\'axe des abscisses en '\n              texteCorr += `$x_1=0$ et $x_2=${texFractionReduite(-b, a)}$`\n            } else {\n              texteCorr += `<br>C'est une équation du second degré : $${P}=0$ avec $a=${a}$, $b=${b}$ et $c=${c}$`\n              texteCorr += `<br>Calculons le discriminant : $\\\\Delta=b^2-4ac=${d} > 0$`\n              texteCorr += '<br>On en déduit que la parabole $P$ coupe l\\'axe des abscisses en '\n              texteCorr += `$x=\\\\dfrac{${ecritureAlgebrique(-b)}-${texRacineCarree(d)}}{2\\\\times ${ecritureParentheseSiNegatif(a)}}${EgalEnviron(x1)}$`\n              texteCorr += ` et $x=\\\\dfrac{${ecritureAlgebrique(-b)}+${texRacineCarree(d)}}{2\\\\times ${ecritureParentheseSiNegatif(a)}}${EgalEnviron(x2)}$`\n            }\n          } else if (d === 0) {\n            texteCorr += `<br>Il n'y a qu'une solution donnée par $x=${texFractionReduite(-b, 2 * a)}$`\n          } else {\n            texteCorr += `<br>C'est une équation du second degré : $${P}=0$ avec $a=${a}$, $b=${b}$ et $c=${c}$`\n            texteCorr += `<br>Calculons le discriminant : $\\\\Delta=b^2-4ac=${d} < 0$`\n            texteCorr += '<br>Il n\\'y a pas de solution et donc la parabole $P$ ne coupe pas l\\'axe des abscisses'\n          }\n          texteCorr += '<br>$\\\\underline{\\\\text{Coordonnées } S(x_S,y_S) \\\\text{ du sommet de la parabole } P}$ :'\n          texteCorr += `<br>L'abscisse du sommet $S$ est donné par la formule $x_S=\\\\dfrac{-b}{2a}=${xs}$`\n          texteCorr += '<br>Et son ordonnée peut être calculé en utilisant la formule $y_S=\\\\dfrac{-\\\\Delta}{4a}$ (ou en remplaçant $x$ par $x_S$ dans l\\'équation de la parabole)'\n          texteCorr += `<br>$y_S=\\\\dfrac{-\\\\Delta}{4a}=\\\\dfrac{${-d}}{${ecritureParentheseSiNegatif(4 * a)}}=${ys}$`\n          texteCorr += `<br>Le sommet $S$ a donc pour coordonnées $\\\\left(${xs}, ${ys}\\\\right)$`\n      }\n      texteCorr += '<br>$\\\\underline{\\\\text{Recherche de points supplémentaires}}$ :'\n      let tableau = '<br>$\\\\begin{array}{c|c|c|c|c|c|c|c}'\n      const points = []\n      const g = x => a * x ** 2 + b * x + c\n      if (d <= 0) { // On n'a que le sommet, on cherche 3 points avant et 3 points après\n        texteCorr += '<br>Les coordonnées du sommet $S$ et le sens des branches de la parabole ne sont pas suffisants pour faire un tracé correct.'\n        texteCorr += '<br>Cherchons les images d\\'abscisses à gauche et à droite du sommet :'\n        for (let k = -3; k < 4; k++) {\n          x = floor(-b / 2 / a) + k\n          points.push([k === 0 ? `x_S${EgalEnviron(-b / 2 / a)}` : x, k === 0 ? `y_S${EgalEnviron(-d / 4 / a)}` : g(x)])\n        }\n      } else { // on a le sommet et les 2 racines x1 et x2. On ajoute 2 points avant x1 et 2 points après x2\n        const xmin = Math.min(x1, x2)\n        x2 = Math.max(x1, x2)\n        x1 = xmin\n        points.push([`x_1${EgalEnviron(x1)}`, '0'])\n        points.push([`x_S${EgalEnviron(-b / 2 / a)}`, `y_S${EgalEnviron(-d / 4 / a)}`])\n        points.push([`x_2${EgalEnviron(x2)}`, '0'])\n        for (let k = 1; k < 3; k++) {\n          x = Math.floor(x1 - k)\n          points.unshift([x, g(x)])\n          x = Math.floor(x2 + k)\n          points.push([x, g(x)])\n        }\n      }\n      points.unshift(['x', 'y'])\n      tableau += points.map(v => v[0]).join('&') + '\\\\\\\\ \\\\hline '\n      tableau += points.map(v => v[1]).join('&') + '\\\\end{array}$'\n      texteCorr += tableau\n      texteCorr += '<br>On obtient finalement le graphique suivant :<br>'\n\n      // Représentation graphique\n\n      const xmin = Math.min(-1, points[1][0]) // -1 pour être voir l'axe des y si le min est positif\n      const xmax = Math.max(1, points.slice(-1)[0][0]) // 1 pour être voir l'axe des y si le max est négatif\n      const ymin = 0 | Math.min(-1, -1 + (a > 0 ? -d / 4 / a : Math.min(g(xmin + 1), g(xmax - 1)))) // ymin pour parabole (valeur entière)\n      const ymax = 0 | Math.max(1, 1 + (a < 0 ? -d / 4 / a : Math.max(g(xmin + 1), g(xmax - 1)))) // ymax pour parabole\n\n      const r = repere({ xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax })\n\n      const cg = courbe(g, xmin, xmax)\n      texteCorr += mathalea2d({ xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax, pixelsParCm: 30, scale: 0.8 }, r, cg)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Type de questions ',4,\"1 : Passant par trois points à coordonnées entières 1\\n2 : Connaissant le sommet et un point de passage\\n3 : Connaissant les deux racines et un point de passage\\n4 : Mélange des trois type de questions\"];\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","EgalEnviron","v","d","Math","abs","texNombre","calcul","TrouverEquationDeParabole","context","sup","typesDeQuestionsDisponibles","parseInt","fName","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","P","xs","ys","x","Psimp","x1","x2","cpt","lettreMinusculeDepuisChiffre","randint","texFractionReduite","ecritureAlgebrique","simplify","replaceAll","sqrt","texRacineCarree","ecritureParentheseSiNegatif","tableau","points","g","k","floor","xmin","min","max","unshift","map","join","xmax","slice","ymin","ymax","r","repere","cg","courbe","mathalea2d","pixelsParCm","scale","listeQuestionsToContenu"],"sourceRoot":""}