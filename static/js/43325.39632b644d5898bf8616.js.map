{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6I12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["interactifReady","interactifType","amcReady","amcType","titre","AlgoTortue","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","typeExercice","listePackages","sup","sup2","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","objetsCorrection","paramsEnonces","paramsCorrection","erreursDeDeplacement","combinaisonListesSansChangerOrdre","parseInt","choix","randint","commandes","val","lutins","i","creerLutin","color","epaisseur","context","texte","texteCorr","codeScratch","allerA","baisseCrayon","orienter","angleScratchTo2d","avance","tournerD","tournerG","largeur","hauteur","leveCrayon","Math","max","xMax","xMin","yMax","yMin","scratchblock","ordreLutins","shuffle","j","listeTraces","length","depart","tracePoint","point","taille","push","echelle","segment","styleExtremites","grille","xmin","ymin","xmax","ymax","pixelsParCm","round","scale","calcul","style","id","mathalea2d","texteParPoint","autoCorrection","enonce","propositions","statut","options","ordered","indexOf","indiceBonneFigure","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","document","addEventListener","figSvg","getElementById","mouseOverSvgEffect","mouseOutSvgEffect","mouseSvgClick","etat","exercice","correctionInteractive","elt","nbBonnesReponses","nbMauvaisesReponses","nbFiguresCliquees","divFeedback","querySelector","figures","figure","removeEventListener","innerHTML","afficheScore","border","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable"],"mappings":"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","file":"js/43325.39632b644d5898bf8616.js","sourcesContent":["// on importe les fonctions nécessaires.\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, combinaisonListesSansChangerOrdre, shuffle, calcul } from '../../modules/outils.js'\n// Ici ce sont les fonctions de la librairie maison 2d.js qui gèrent tout ce qui est graphique (SVG/tikz) et en particulier ce qui est lié à l'objet lutin\nimport { angleScratchTo2d, orienter, mathalea2d, scratchblock, creerLutin, avance, tournerD, tournerG, baisseCrayon, allerA, leveCrayon, grille, tracePoint, point, segment, texteParPoint } from '../../modules/2d.js'\nimport { afficheScore } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\n// il y avait un fonctionnement avec amcType cf commit 3ae7c43\nexport const interactifType = 'custom' // La correction doit être gérée dans l'exercice avec la méthode this.correctionInteractive()\nexport const amcReady = true\nexport const amcType = 'qcmMono'\n\nexport const titre = 'Trouver le bon tracé avec scratch'\nexport default function AlgoTortue () { // ça c'est la classe qui permet de créer cet exercice\n  'use strict'\n  Exercice.call(this) // la classe parente qui définit les attributs commun à tous les exercices\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.typeExercice = 'Scratch'\n  this.listePackages = 'scratch3'\n  this.sup = 9 // 7 instructions par défaut, paramètre réglable.\n  this.sup2 = 1 // types d'instructionsde déplacement (ici seulement avancer et tourner)\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    const angleDepart = 90 // On choisit l'orientation de départ (On pourrait en faire un paramètre de l'exo)\n    const xDepart = 0 // Le départ est en (0,0) pour avoir la même marge dans toutes les directions\n    const yDepart = 0\n    const objetsCorrection = []\n    const paramsEnonces = {}\n    const paramsCorrection = {}\n    const sequences = [ // séquences d'intruction pré-établies, on en choisit une parmi celles-ci\n      ['tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer'],\n      ['tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer'],\n      ['tournerD', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer'],\n      ['tournerD', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer'],\n      ['avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD'],\n      ['avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerG'],\n      ['avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerD'],\n      ['avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG'],\n      ['tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer'],\n      ['tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer'],\n      ['tournerG', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer', 'tournerD', 'avancer'],\n      ['tournerG', 'avancer', 'tournerD', 'avancer', 'tournerG', 'avancer', 'tournerG', 'avancer', 'tournerD', 'avancer']\n    ]\n    let erreursDeDeplacement = [0, 1, 0]\n    erreursDeDeplacement = combinaisonListesSansChangerOrdre(erreursDeDeplacement, parseInt(this.sup))\n    const choix = randint(0, 11) // On va choisir une des 12 sequences\n    const commandes = combinaisonListesSansChangerOrdre(sequences[choix], parseInt(this.sup)) // on crée la succession de commandes en répétant la séquence choisie si le nombre d'instructions demandées dépasse la longueur de la séquence\n    const val = []\n    const lutins = []\n\n    // Ici on crée 5 instances de l'objet Lutin.\n    for (let i = 0; i < 5; i++) {\n      lutins[i] = creerLutin()\n      lutins[i].color = 'green' // la couleur de la trace\n      lutins[i].epaisseur = 3 // son epaisseur\n    }\n    context.unitesLutinParCm = 10 // avancer de 10 pour le lutin lui fait parcourir 1cm (en fait 0,5cm car j'ai ajouté un scale=0.5 pour la sortie latex)\n    context.pixelsParCm = 20 // 20 pixels d'écran représentent 1cm (enfin ça dépend du zoom, donc c'est juste un réglage par défaut)\n\n    let texte = '' // la chaine qui va contenir l'énoncé\n    let texteCorr = '' // la chaine qui va contenir la correction\n    // On écrit le début du programme dans l'attribut codeScratch du lutins[0][0]... cet attribut de type chaine contient le code du programme du lutin en Scratch Latex\n    // A chaque instruction ajoutée dans le programme correspond une action à effectuée sur l'objet lutins[0]..\n    lutins[0].codeScratch = '\\\\begin{scratch}[print,fill,blocks,scale=0.75]\\n \\\\blockinit{quand \\\\greenflag est cliqué}\\n '\n    lutins[0].codeScratch += `\\\\blockmove{aller à x: \\\\ovalnum{${xDepart}} y: \\\\ovalnum{${yDepart}}}\\n ` // ça c'est pour ajouter la brique scratch\n    lutins[0].codeScratch += `\\\\blockmove{s'orienter à \\\\ovalnum{${angleDepart}}}\\n`\n    lutins[0].codeScratch += '\\\\blockpen{stylo en position d\\'écriture}\\n'\n    for (let i = 0; i < 5; i++) {\n      allerA(0, 0, lutins[i]) // ça c'est pour faire bouger le lutin (écrire le programme ne le fait pas exécuter !)\n      baisseCrayon(lutins[i])\n      orienter(angleScratchTo2d(angleDepart), lutins[i])// l'angle 2d est l'angle trigonométrique... Scratch est décallé de 90°, il faut donc convertir pour utiliser Orienter()\n    }\n    for (let i = 0; i < parseInt(this.sup); i++) { // On va parcourir la listes des commandes de déplacement mais certains lutins font des erreurs\n      switch (commandes[i]) {\n        case 'avancer':\n          val[i] = randint(1, 4) * 5 // La longueur du déplacement est 10, 20, 30 ou 40\n          lutins[0].codeScratch += `\\\\blockmove{avancer de \\\\ovalnum{${val[i]}} pas}\\n`\n          avance(val[i], lutins[0])\n          avance(val[i], lutins[1])\n          avance(val[i], lutins[2])\n          avance(val[i], lutins[3])\n          avance(val[i] + 5 * erreursDeDeplacement[i], lutins[4]) // avance trop\n          break\n        case 'tournerD' : // On peut difficilement choisir autre chose que de tourner de 90°...\n          lutins[0].codeScratch += '\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{90} degrés}\\n'\n          tournerD(90, lutins[0])\n          tournerD(90, lutins[2])\n          orienter(90, lutins[4])\n          tournerG(90, lutins[1]) // tournent dans le mauvais sens\n          tournerG(90, lutins[3])\n          break\n        case 'tournerG' :\n          lutins[0].codeScratch += '\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{90} degrés}\\n'\n          tournerG(90, lutins[0])\n          tournerG(90, lutins[1])\n          tournerG(90, lutins[4])\n          tournerD(90, lutins[2]) // tournent dans le mauvais sens\n          tournerD(90, lutins[3])\n          break\n      }\n    }\n    lutins[0].codeScratch += '\\\\blockpen{relever le stylo}\\n'\n\n    let largeur = 1\n    let hauteur = 1\n    for (let i = 0; i < 5; i++) { // on calcule la largeur et la hauteur maximale des parcours.\n      leveCrayon(lutins[i])\n      largeur = Math.max(largeur, lutins[i].xMax - lutins[i].xMin)\n      hauteur = Math.max(hauteur, lutins[i].yMax - lutins[i].yMin)\n    }\n    largeur++\n    lutins[0].codeScratch += '\\\\end{scratch}'\n    texte = 'Quelle figure est tracée par le stylo à l\\'éxécution du programme ci-dessous ?<br>Un carreau représente 5 pas<br>Le tracé démarre à la croix bleue.<br>'\n    texte += \"S'orienter à 90° signifie s'orienter vers la droite de l'écran.<br>\"\n\n    if (context.isHtml) { // On crée 2 colonnes selon le contexte html / Latex\n      texte += '<table style=\"width: 100%\"><tr><td>'\n    } else {\n      texte += '\\\\begin{minipage}[b]{.25\\\\textwidth}'\n    }\n    texte += scratchblock(lutins[0].codeScratch) // la fonction scratchblock va convertir le code Latex en code html si besoin.\n    if (context.isHtml) { // on change de colonne...\n      texte += '</td><td style=\"vertical-align: top; text-align: center\">'\n    } else {\n      texte += '\\\\end{minipage} '\n      texte += '\\\\hfill \\\\begin{minipage}[b]{.74\\\\textwidth}'\n    }\n    let ordreLutins = [0, 1, 2, 3, 4]\n    ordreLutins = shuffle(ordreLutins) // On mélange les emplacements pour éviter d'avoir la bonne réponse au même endroit\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < lutins[i].listeTraces.length; j++) { // On recadre les traces des lutins...\n        lutins[i].listeTraces[j][0] -= lutins[i].xMin\n        lutins[i].listeTraces[j][2] -= lutins[i].xMin\n        lutins[i].listeTraces[j][1] -= lutins[i].yMin\n        lutins[i].listeTraces[j][3] -= lutins[i].yMin\n      }\n    }\n    const depart = []\n    for (let i = 0; i < 5; i++) { // ajouter le point de départ de chaque tracé\n      depart[i] = tracePoint(point(lutins[i].listeTraces[0][0], lutins[i].listeTraces[0][1]))\n      depart[i].taille = 5\n      depart[i].color = 'blue'\n      depart[i].epaisseur = 2\n      if (i === 0) {\n        objetsCorrection.push(depart[0])\n      }\n    }\n    const echelle = segment(0, hauteur + 0.5, 1, hauteur + 0.5)\n    echelle.epaisseur = 2\n    echelle.styleExtremites = '|-|'\n    objetsCorrection.push(grille(-1, -1, largeur + 1), hauteur + 1, 'gray', 0.5, 0.5)\n    objetsCorrection.push(lutins[0])\n    paramsEnonces.xmin = -0.5\n    paramsEnonces.ymin = -1.5\n    paramsEnonces.xmax = largeur\n    paramsEnonces.ymax = hauteur + 1\n    paramsEnonces.pixelsParCm = Math.round(200 / largeur)\n    paramsEnonces.scale = calcul(2 / largeur)\n    paramsEnonces.style = ''\n    paramsCorrection.xmin = -0.5\n    paramsCorrection.ymin = -0.5\n    paramsCorrection.xmax = largeur\n    paramsCorrection.ymax = hauteur + 1\n    paramsCorrection.pixelsParCm = Math.round(200 / largeur)\n    paramsCorrection.scale = calcul(2 / largeur)\n\n    // mathalea2d() est la fonction qui ajoute soit une figure SVG (en html), soit une figure tikz en Latex. Ici, juste la grille est le point de départ.\n    for (let i = 0; i < 5; i++) {\n      paramsEnonces.id = `figure${i}exo${numeroExercice}`\n      texte += mathalea2d(paramsEnonces,\n        lutins[ordreLutins[i]],\n        depart[ordreLutins[i]],\n        grille(-0.5, -0.5, largeur, hauteur + 1, 'gray', 0.5, 0.5),\n        texteParPoint('10 pas', point(0.5, hauteur + 0.2), 'milieu', 'black', 1),\n        texteParPoint(`figure ${i + 1}`, point((lutins[ordreLutins[i]].xMax - lutins[ordreLutins[i]].xMin) / 2, -0.8), 'milieu', 'black', 1),\n        echelle)\n    }\n    if (context.isHtml) {\n      texte += '</td></tr>'\n      texte += `<div id=\"resultatCheckEx${this.numeroExercice}Q${0}\"></div>`\n    } else {\n      texte += '\\\\end{minipage} '\n    }\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: texte,\n        propositions: [\n          {\n            texte: 'figure 1',\n            statut: false\n          },\n          {\n            texte: 'figure 2',\n            statut: false\n          },\n          {\n            texte: 'figure 3',\n            statut: false\n          },\n          {\n            texte: 'figure 4',\n            statut: false\n          },\n          {\n            texte: 'figure 5',\n            statut: false\n          }\n        ],\n        options: { ordered: true }\n      }\n      this.autoCorrection[0].propositions[ordreLutins.indexOf(0)].statut = true\n    }\n    this.indiceBonneFigure = ordreLutins.indexOf(0)\n    // Ici, la figure contient la grille, le point de départ et le lutin qui s'anime sur sa trace...\n    texteCorr += `La bonne figure est la figure ${this.indiceBonneFigure + 1}`\n\n    texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n    this.listeQuestions.push(texte) // on met à jour la liste des questions\n    this.listeCorrections.push(texteCorr) // et la liste des corrections\n\n    listeQuestionsToContenuSansNumero(this) // on envoie tout à la fonction qui va mettre en forme.\n  }\n  this.besoinFormulaireNumerique = [\"Nombre d'instructions\"] // gestion des paramètres supplémentaires\n  // Gestion de la souris\n  document.addEventListener('exercicesAffiches', () => {\n    // Dès que l'exercice est affiché, on rajoute des listenners sur chaque Svg.\n    for (let i = 0; i < 5; i++) {\n      const figSvg = document.getElementById(`figure${i}exo${this.numeroExercice}`)\n      figSvg.addEventListener('mouseover', mouseOverSvgEffect)\n      figSvg.addEventListener('mouseout', mouseOutSvgEffect)\n      figSvg.addEventListener('click', mouseSvgClick)\n      figSvg.etat = false\n    }\n  })\n  // Pour pouvoir récupérer this dans la correction interactive\n  const exercice = this\n  // Gestion de la correction\n  this.correctionInteractive = (elt) => {\n    let nbBonnesReponses = 0\n    let nbMauvaisesReponses = 0\n    let nbFiguresCliquees = 0\n    const divFeedback = document.querySelector(`#resultatCheckEx${this.numeroExercice}Q${0}`)\n    const figures = []\n    for (let i = 0; i < 5; i++) {\n      const figure = document.getElementById(`figure${i}exo${this.numeroExercice}`)\n      figures.push(figure)\n      figure.removeEventListener('mouseover', mouseOverSvgEffect)\n      figure.removeEventListener('mouseout', mouseOutSvgEffect)\n      figure.removeEventListener('click', mouseSvgClick)\n      if (figure.etat) nbFiguresCliquees++\n    }\n    if (nbFiguresCliquees === 1 && figures[exercice.indiceBonneFigure].etat) {\n      divFeedback.innerHTML = '😎'\n      nbBonnesReponses++\n    } else {\n      divFeedback.innerHTML = '☹️'\n      nbMauvaisesReponses++\n    }\n    afficheScore(this, nbBonnesReponses, nbMauvaisesReponses)\n  }\n}\n\nfunction mouseOverSvgEffect () {\n  this.style.border = 'inset'\n}\nfunction mouseOutSvgEffect () {\n  this.style.border = 'none'\n}\nfunction mouseSvgClick () {\n  if (this.etat) {\n    // Déja choisi, donc on le réinitialise\n    this.style.border = 'none'\n    this.addEventListener('mouseover', mouseOverSvgEffect)\n    this.addEventListener('mouseout', mouseOutSvgEffect)\n    this.addEventListener('click', mouseSvgClick)\n    this.etat = false\n  } else {\n    // Passe à l'état choisi donc on désactive les listenners pour over et pour out\n    this.removeEventListener('mouseover', mouseOverSvgEffect)\n    this.removeEventListener('mouseout', mouseOutSvgEffect)\n    this.style.border = 'solid #f15929'\n    this.etat = true\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}