{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4L13-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Mettre_en_equation_sans_resoudre","typesDeQuestionsDisponibles","Exercice","this","debug","sup","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","myPolyName","n","sortie","article","name","nameParSommets","randint","variables","inc","length","unites","unite","po","polygoneRegulierParCentreEtRayon","point","opacite","epaisseur","anglesDroitsIfIsCarre","s","segment","listePoints","styleExtremites","codageCarre","mesAppels","codeSegments","afficheCoteSegment","nommePolygone","polygone","nb_cotes","nom","let_cote","perimetre","fig","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","enonces","push","enonce","prenom","question","correction","texteEnCouleur","p","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/916.50d7ab993eb5146a68f9.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListes,prenom,texteEnCouleur} from '../../modules/outils.js'\nimport {point,segment,codageCarre,polygoneRegulierParCentreEtRayon,nommePolygone,afficheCoteSegment,codeSegments,mathalea2d} from '../../modules/2d.js'\nexport const titre = 'Mettre en équation un problème sans objectif de résolution'\n\n/**\n * Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue afin de mettre en équation un problème\n * à partir de figure géométriques élémentaires\n * * 4L13-0\n * @author Sébastien Lozano\n */\nexport default function Mettre_en_equation_sans_resoudre() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.debug = false;\n  this.sup = 1;\n  if (this.debug) {\n    this.nbQuestions = 9;\n  } else {\n    this.nbQuestions = 2;\n  };\n\n  this.titre = titre;\n  this.consigne = \"Donner une équation qui permet de résoudre le problème.<br>On ne demande pas de résoudre l'équation.\";\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  //context.isHtml? this.spacing = 3 : this.spacing = 2; \n  //context.isHtml? this.spacingCorr = 3 : this.spacingCorr = 2;\n\n  let typesDeQuestionsDisponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [1];\n    } else {\n      typesDeQuestionsDisponibles = [1, 2];\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    typesDeQuestionsDisponibles = [1];\n\n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    //let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\n      // une fonction pour dire le nom du polygone\n      function myPolyName(n) {\n        let sortie = {\n          article: ``,\n          name: ``,\n          nameParSommets: ``,\n        };\n        switch (n) {\n          case 3:\n            sortie.article = `du `;\n            sortie.name = `triangle équilatéral`;\n            sortie.nameParSommets = `ABC`;\n            break;\n          case 4:\n            sortie.article = `du `;\n            sortie.name = `carré`;\n            sortie.nameParSommets = `ABCD`;\n            break;\n          case 5:\n            sortie.article = `du `;\n            sortie.name = `pentagone régulier`;\n            sortie.nameParSommets = `ABCDE`;\n            break;\n          case 6:\n            sortie.article = `de l'`;\n            sortie.name = `hexagone régulier`;\n            sortie.nameParSommets = `ABCDEF`;\n            break;\n          case 7:\n            sortie.article = `de l'`;\n            sortie.name = `heptagone régulier`;\n            sortie.nameParSommets = `ABCDEFG`;\n            break;\n          case 8:\n            sortie.article = `de l'`;\n            sortie.name = `octogone régulier`;\n            sortie.nameParSommets = `ABCDEFGH`;\n            break;\n        }\n        return sortie;\n      }\n\n      // on choisit le nombre de côtés su polygone\n      let n = randint(3, 8);\n      //on choisit un nom pour la variable\n      let variables = ['t', 'u', 'v', 'w', 'y', 'z'];\n      let inc = variables[randint(0, variables.length - 1)];\n      //on choisit une unité\n      let unites = [\"mm\", \"cm\", \"dm\", \"m\", \"dam\", \"hm\", \"km\"];\n      let unite = unites[randint(0, unites.length - 1)];\n      //on prépare le polygone\n      let po = polygoneRegulierParCentreEtRayon(point(0, 0), 4, n);\n      po.opacite = 0.5;\n      po.epaisseur = 2;\n      //on pépare la côte\n      let s = segment(po.listePoints[0], po.listePoints[1]);\n      s.styleExtremites = `<->`;\n      // on fait un test pour coder les angles droits du carré\n      let anglesDroitsIfIsCarre;\n      if (n == 4) {\n        anglesDroitsIfIsCarre = codageCarre(po)\n      } else {\n        anglesDroitsIfIsCarre = {}\n      };\n      // on finit les appels\n      let mesAppels = [\n        po,\n        codeSegments('X', 'blue', po.listePoints),\n        afficheCoteSegment(s, `${inc}`, 1, 'red', 2, 0.5, 'black'),\n        nommePolygone(po, myPolyName(n).nameParSommets),\n        anglesDroitsIfIsCarre\n      ];\n      // on prépare l'objet polygone\n      let polygone = {\n        nb_cotes: n,\n        unite: unite,\n        article: myPolyName(n).article,\n        nom: myPolyName(n).name,\n        let_cote: inc,\n        perimetre: randint(200, 500),\n        fig: mathalea2d(\n          {\n            xmin: -7,\n            ymin: -5,\n            xmax: 7,\n            ymax: 5,\n            pixelsParCm: 20,\n            scale: 0.5//0.7\n          },\n          mesAppels\n        )\n      };\n\n      let enonces = [];\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: ``,\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${texteEnCouleur(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      });\n      // pour être sûr d'avoir deux figures différentes\n      let p = randint(3, 8, [n]);\n      polygone.nb_cotes = p;\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: ``,\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${texteEnCouleur(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      })\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n        case 2:\n          texte = `${enonces[1].enonce}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[1].correction}`;\n          };\n          break;\n      }\n\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n\n  }\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  //this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\t\n}\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}