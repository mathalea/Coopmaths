/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_5e_5G40-2_js"],{

/***/ "./src/js/exercices/5e/5G40-2.js":
/*!***************************************!*\
  !*** ./src/js/exercices/5e/5G40-2.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ NomQuelconqueDeLaFonctionQuiCreeExercice)\n/* harmony export */ });\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\n\nconst titre = 'Reconnaitre un parallélogramme à partir du codage d’une figure'\n\n/**\n * Description didactique de l'exercice\n * @Auteur\n * Référence\n*/\nfunction NomQuelconqueDeLaFonctionQuiCreeExercice () {\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_1__.default.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Pour chacune des figures suivantes, tracées à main levée, préciser s'il s'agit d'un parallélogramme.\"\n  this.nb_questions_modifiable = false\n  this.nb_cols = 2 // Uniquement pour la sortie LaTeX\n  this.nb_cols_corr = 1 // Uniquement pour la sortie LaTeX\n  // this.sup = 1\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelle_version = function () {\n    this.liste_questions = [] // Liste de questions\n    this.liste_corrections = [] // Liste de questions corrigées\n    // this.introduction = ''\n\n    const A = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(0, 0)\n    const B = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(5, 0)\n    const C = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(6.5, -3)\n    const D = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(1.5, -3)\n    const O = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.milieu)(A, C)\n    O.nom = 'O'\n    const p = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.polygone)(A, B, C, D)\n    const sAC = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(A, C)\n    sAC.pointilles = true\n    const sBD = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(B, D)\n    sBD.pointilles = true\n    const sABcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(A, B, 'X', 'blue')\n    const sCDcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(C, D, 'X', 'blue')\n    const sADcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(A, D, '▼', 'blue')\n    const sBCcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(B, C, '▼', 'blue')\n    const sAOcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(A, O, '|', 'blue')\n    const sCOcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(O, C, '|', 'blue')\n    const sBOcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(B, O, '||', 'blue')\n    const sDOcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(O, D, '||', 'blue')\n    const aDABcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeAngle)(D, A, B, 0.8, '|', 'black', 1, 1, 'blue')\n    const aBCDcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeAngle)(B, C, D, 0.8, '|', 'black', 1, 1, 'blue')\n    const aABCcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeAngle)(A, B, C, 0.8, '|||', 'black', 1, 1, 'orange')\n    const aCDAcodage = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeAngle)(C, D, A, 0.8, '|||', 'black', 1, 1, 'orange')\n    const sAB = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(A, B)\n    const sBC = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(B, C)\n    const sCD = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(C, D)\n    const sAD = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.segment)(A, D)\n    sAB.epaisseur = 2\n    sAB.color = 'blue'\n    sCD.epaisseur = 2\n    sCD.color = 'blue'\n    sBC.epaisseur = 2\n    sBC.color = 'green'\n    sAD.epaisseur = 2\n    sAD.color = 'green'\n\n    // Cerf-volant\n    const M1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(0, 0)\n    const N1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(-1, -2)\n    const O1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(0, -6)\n    const P1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.point)(1, -2)\n    const p1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.polygone)(M1, N1, O1, P1)\n\n    const codecerf1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(M1, N1, 'X', 'blue')\n    const codecerf2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(M1, P1, 'X', 'blue')\n    const codecerf3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(O1, P1, '▼', 'blue')\n    const codecerf4 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(O1, N1, '▼', 'blue')\n\n    const paramsEnonce = { xmin: -1, ymin: -4, xmax: 7.5, ymax: 0.8, pixelsParCm: 20, scale: 0.5, mainlevee: true, amplitude: 0.5 }\n\n    const nomsDejaUtilises = ['O']\n    let nom\n    function gestionNom () {\n      nom = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_2__.creerNomDePolygone)(4, nomsDejaUtilises)\n      nomsDejaUtilises.push(nom)\n      A.nom = nom[0]\n      B.nom = nom[1]\n      C.nom = nom[2]\n      D.nom = nom[3]\n    }\n\n    const typeQuestionsDisponibles = ['cotesOpposesMemeLongueur', 'cotesConsecutifsMemeLongueur', 'diagonalesMemeLongueur', '2cotesOpposesMemeLongueur', '2cotesOpposesMemeLongueurv2', '2cotesOpposesMemeLongueurEtParallele', '2cotesOpposesMemeLongueurEtParallelev2', '2cotesOpposesEtParalleles', 'anglesOpposesEgaux'] // On créé 3 types de questions\n    const listeTypeQuestions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_2__.combinaison_listes)(typeQuestionsDisponibles, this.nb_questions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nb_questions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sABcodage, sBCcodage, sCDcodage, sADcodage, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)])\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $${B.nom + C.nom} = ${D.nom + A.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses côtés opposés de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case 'cotesConsecutifsMemeLongueur':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(A, B, 'X', 'blue'), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(B, C, 'X', 'blue'), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(C, D, '||', 'blue'), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.codeSegment)(D, A, '||', 'blue'), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)])\n\n          texteCorr = `Les côtés consécutifs de $${nom}$ sont de même longueur, ce n'est pas forcément un parallélogramme comme le montre le contre-exemple suivant. (Il s'agit d'un cerf-volant).`\n\n          texteCorr += '<br>' + (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)({ xmin: -1.5, ymin: -6.5, xmax: 1.5, ymax: 0.5, pixelsParCm: 20, scale: 1 }, [p1, codecerf1, codecerf2, codecerf3, codecerf4])\n          break\n        case 'diagonalesMemeLongueur':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sAOcodage, sBOcodage, sCOcodage, sDOcodage, sAC, sBD, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.latexParPoint)('O', O, 'black', 200, 12, '')])\n          texteCorr = `On sait que $${A.nom + 'O'} = ${'O' + C.nom}$ et $${B.nom + 'O'} = ${'O' + D.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses diagonales qui se coupent en leur milieu alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sABcodage, sCDcodage, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurv2':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sBCcodage, sADcodage, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallele':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sAB, sCD, sABcodage, sCDcodage, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $(${A.nom + B.nom}) // (${C.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallelev2':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sBC, sAD, sBCcodage, sADcodage, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)]) + `$(${B.nom + C.nom}) // (${A.nom + D.nom})$`\n          texteCorr = `On sait que $${B.nom + C.nom} = ${A.nom + D.nom}$ et $(${B.nom + C.nom}) // (${A.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesEtParalleles':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, sAB, sCD, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `$${nom}$ a deux côtés opposés parallèles, c'est donc un trapèze et pas forcément un parallélogramme.`\n          break\n        case 'anglesOpposesEgaux':\n          gestionNom()\n          texte = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.mathalea2d)(paramsEnonce, [p, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_0__.nommePolygone)(p, nom), aABCcodage, aBCDcodage, aCDAcodage, aDABcodage])\n          texteCorr = `On sait que $\\\\widehat{${A.nom + B.nom + C.nom}} = \\\\widehat{${C.nom + D.nom + A.nom}}$ et $\\\\widehat{${B.nom + C.nom + D.nom}} = \\\\widehat{${D.nom + A.nom + B.nom}}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses angles opposés égaux alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n      }\n      if (this.liste_questions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.liste_questions.push(texte)\n        this.liste_corrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_2__.liste_de_question_to_contenu)(this)\n  }\n  // this.besoin_formulaire_numerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n\n// python3 modules/exercices_to_json.py pour faire apparaitre l'exercice dans le menu\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/5e/5G40-2.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);