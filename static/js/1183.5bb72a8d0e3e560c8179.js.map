{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["amcReady","amcType","interactifReady","interactifType","titre","ExerciceVraiFauxDivisibleMultipleDiviseur","justification","N","a","booleen","result","sommeDesChiffres","toString","calcul","texNombre","Math","floor","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","nouvelleVersion","parseInt","sup2","listeQuestions","listeCorrections","typeDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","listeDeNDisponibles","listeDeN","texte","texteCorr","i","cpt","randint","autoCorrection","enonce","propositions","statut","options","ordered","replace","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/1183.5bb72a8d0e3e560c8179.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, sommeDesChiffres, calcul, texNombre, randint, choice } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\nexport const interactifType = ' '\nexport const titre = 'Diviseur, multiple, divisible - Vrai ou faux'\n\n/**\n * Vrai ou faux sur les notions de diviseur ou multiple\n * @author Rémi Angot\n * Référence 6N43-3\n*/\nexport default function ExerciceVraiFauxDivisibleMultipleDiviseur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = 'Pour chaque affirmation, indiquer si elle est vraie ou fausse.'\n  this.nbQuestions = 5\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté \n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n\n  function justification (N, a, booleen) {\n    let result\n    if (booleen === true) {\n      if (N === 2) {\n        result = ', car son chiffre des unités est $0$, $2$, $4$, $6$ ou $8$.'\n      } else if (N === 5) {\n        result = ', car son chiffre des unités est $0$, ou $5$.'\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui est divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${calcul(a / N)}$.`\n      }\n    }\n    if (booleen === false) {\n      if (N === 2) {\n        result = \", car son chiffre des unités n'est pas $0$, $2$, $4$, $6$ ou $8$.\"\n      } else if (N === 5) {\n        result = \", car son chiffre des unités n'est pas $0$, ou $5$.\"\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui n'est pas divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${Math.floor(a / N)}+ ${a % N}$.`\n      }\n    }\n    return result\n  }\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let typeDeQuestionsDisponibles = ['Ndiviseur', 'divisibleParN', 'multipleDeN', 'NdiviseurF', 'divisibleParNF', 'multipleDeNF', 'NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers']\n    if (this.nbQuestions < 8) {\n      typeDeQuestionsDisponibles = [choice(['Ndiviseur', 'divisibleParN']), 'multipleDeN', choice(['NdiviseurF', 'divisibleParNF']), 'multipleDeNF', choice(['NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers'])]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let listeDeNDisponibles\n    if (this.sup === 1) {\n      listeDeNDisponibles = [2, 5]\n    }\n    if (this.sup === 2) {\n      listeDeNDisponibles = [2, 3, 5, 9]\n    }\n    if (this.sup === 3) {\n      listeDeNDisponibles = [7, 11, 13, 20, 30, 25]\n    }\n    const listeDeN = combinaisonListes(listeDeNDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, N, a, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      N = listeDeN[i]\n      a = randint(199, 999) * N\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'Ndiviseur':\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'divisibleParN':\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'multipleDeN':\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'NdiviseurF':\n          a += randint(1, N - 1)\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'NdiviseurEnvers':\n          texte = `$${texNombre(a)}$ est un diviseur de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${N}$ est un diviseur de $${texNombre(a)}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNEnvers':\n          texte = `$${N}$ est divisible par $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${texNombre(a)}$ est divisible par $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNEnvers':\n          texte = `$${N}$ est un multiple de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${a}$ est un multiple de $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    \n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, '1 : Critères de divisibilité par 2 et 5\\n2 : Critères de divisibilité par 2, 3, 5 et 9\\n3 : Sans critères de divisibilité']\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}