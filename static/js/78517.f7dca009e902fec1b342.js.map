{"version":3,"file":"js/78517.f7dca009e902fec1b342.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/1e/1N10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, ecritureAlgebrique, pgcd } from '../../modules/outils.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Déterminer les termes d’une suite définie de façon explicite'\n\n/**\n * 1N10\n * @author Gaelle Morvan\n */\nexport default function TermeDUneSuiteDefinieExplicitement () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Une suite étant donnée, calculer le terme demandé.'\n  this.nbQuestions = 4\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Vide la liste de questions\n    this.listeCorrections = [] // Vide la liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1, 2, 3]\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b, c, d, frac, k; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // fonction affine\n          a = randint(1, 7) * choice([-1, 1])\n          b = randint(1, 10) * choice([-1, 1])\n          k = randint(0, 20)\n\n          texte = 'Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = '\n          if (a === 1) { texte += 'n' } else if (a === -1) { texte += '-n' } else { texte += `${a}n` };\n\n          if (b > 0) { texte += `+${b}$.` } else { texte += `${b}$.` };\n          texte += `<br>Calculer $u_{${k}}$.`\n\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par ${k}, on obtient : $u_{${k}} =`\n          if (a === 1) {\n            texteCorr += `${k} ${ecritureAlgebrique(b)}`\n          } else {\n            if (a === -1) {\n              texteCorr += `-${k} ${ecritureAlgebrique(b)}`\n            } else {\n              texteCorr += `${a} \\\\times ${k} ${ecritureAlgebrique(b)}`\n            }\n          }\n          texteCorr += `=${a * k + b}$.`\n          break\n\n        case 2: // fonction polynome de degré 2\n          a = randint(1, 5) * choice([-1, 1])\n          b = randint(0, 5) * choice([-1, 1])\n          c = randint(0, 9) * choice([-1, 1])\n          k = randint(0, 9)\n\n          texte = 'Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = '\n          if (a === 1) {\n            texte += 'n^2$'\n          } else {\n            if (a === -1) {\n              texte += '-n^2$'\n            } else {\n              texte += `${a}n^2$`\n            }\n          };\n          if (b === 1) { texte += '$+n$' };\n          if (b > 1) { texte += `$+${b}n$` };\n          if (b === -1) { texte += '$-n$' };\n          if (b < -1) { texte += `$${b}n$` };\n          if (c > 0) { texte += `$+${c}$.` };\n          if (c < 0) { texte += `$${c}$.` }\n          texte += `<br>Calculer $u_{${k}}$.`\n\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = `\n          if (a === 1) { texteCorr += `${k}^2` } else {\n            if (a === -1) { texteCorr += `-${k}^2` } else {\n              texteCorr += `${a}\\\\times ${k}^2`\n            }\n          };\n          if (b === 1) {\n            texteCorr += `+${k}`\n          } else {\n            if (b === -1) {\n              texteCorr += `-${k}`\n            } else {\n              texteCorr += `${ecritureAlgebrique(b)}\\\\times ${k}`\n            }\n          }\n          texteCorr += `${ecritureAlgebrique(c)}=${a * k * k + b * k + c}$.`\n          break\n\n        case 3: // fonction homographique\n          a = randint(1, 5) * choice([-1, 1])\n          b = randint(1, 5) * choice([-1, 1])\n          c = randint(2, 4)\n          d = randint(1, 7)\n          k = randint(1, 9)\n\n          texte = 'Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = \\\\dfrac{'\n          if (a === 1) { texte += 'n' } else if (a === -1) { texte += '-n' } else { texte += `${a}n` };\n          if (b > 0) { texte += `+${b}}{` } else { texte += `${b}}{` };\n          if (c === 1) { texte += 'n' } else if (c === -1) { texte += '-n' } else { texte += `${c}n` };\n          if (d > 0) { texte += `+${d}}$.` } else { texte += `${d}}$.` };\n\n          texte += `<br>Calculer $u_{${k}}$.`\n          frac = fraction(a * k + b, c * k + d)\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = \\\\dfrac{${a}\\\\times ${k} ${ecritureAlgebrique(b)}}{${c}\\\\times ${k}\n          ${ecritureAlgebrique(d)}} = ` + frac.texFraction\n          if (pgcd(a * k + b, c * k + d) !== 1) { texteCorr += '=' + frac.texFractionSimplifiee }\n          texteCorr += '$.'\n          break\n      }\n\n      if (this.questionJamaisPosee(i, a, b, k)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte) // Sinon on enregistre la question dans listeQuestions\n        this.listeCorrections.push(texteCorr) // On fait pareil pour la correction\n        i++ // On passe à la question suivante\n      }\n      cpt++ // Sinon on incrémente le compteur d'essai pour avoir une question nouvelle\n    }\n    listeQuestionsToContenu(this) // La liste de question et la liste de la correction\n\n    // sont transformés en chaine de caractère (avec une liste HTML ou LaTeX suivant le contexte)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n  // On aurait pu ajouter un formulaire pour régler le niveau de difficulté à l'aide de l'attribut this.sup\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TermeDUneSuiteDefinieExplicitement","Exercice","this","consigne","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","d","frac","k","i","cpt","randint","choice","ecritureAlgebrique","fraction","texFraction","pgcd","texFractionSimplifiee","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}