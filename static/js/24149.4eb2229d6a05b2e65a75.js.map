{"version":3,"file":"js/24149.4eb2229d6a05b2e65a75.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/betaModèle31_paramétrables.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, creerNomDePolygone } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, polygoneRegulier, codageAngleDroit, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Nom de l\\'exercice'\n\n/**\n * Description didactique de l'exercice\n * @author\n * Référence\n * Date de publication\n*/\nexport default function NomExercice () {\n  Exercice.call(this)\n  this.consigne = 'consigne'\n  this.nbQuestions = 1\n\n  this.besoinFormulaireNumerique = ['Figure à tracer', 2, '1 : Carré\\n2 : Triangle'] // le paramètre sera numérique de valeur max 2 (le 2 en vert)\n  this.sup = 1 // Valeur du paramètre par défaut\n  // Remarques : le paramètre peut aussi être un texte avec : this.besoinFormulaireTexte = [texte, tooltip]\n  //              il peut aussi être une case à cocher avec : this.besoinFormulaireCaseACocher = [texte] (dans ce cas, this.sup = true ou this.sup = false)\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n\n    this.sup = parseInt(this.sup) // Lorsqu'il est récupéré de l'url, le paramètre peut être un texte, dans le doute on le convertit en nombre\n\n    const typesDeQuestionsDisponibles = [1] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let A, B, C, D, traces1, traces2, labels1, labels2, figure, aA, aB, aC, aD\n    let objetsEnonce, objetsEnonceml, objetsCorrection, paramsEnonce, paramsEnonceml, paramsCorrection\n    for (let i = 0, texte, texteCorr, cotes, nomPoly, naturePoly, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objetsEnonceml = [] // Idem pour l'enoncé à main levée si besoin\n      objetsCorrection = [] // Idem pour la correction\n\n      if (this.sup === 1) { // On a un comportement différent selon le paramètre.\n        cotes = 4\n        naturePoly = 'carré'\n        texteCorr = 'Pour cette construction on peut utiliser la règle et l\\'équerre.<br>'\n      } else if (this.sup === 2) {\n        cotes = 3\n        naturePoly = 'triangle équilatéral'\n        texteCorr = 'Pour cette construction on peut utiliser la règle et le compas.<br>'\n      }\n      nomPoly = creerNomDePolygone(cotes, 'GPT') // Permet de choisir un nom de polygone de cotes lettres qui se suivent à l'exclusion de la séquence GPT\n      texte = `Construire le ${naturePoly} $${nomPoly}$.<br>`\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          A = point(0, 0, nomPoly.charAt(0), 'below') // nomPoly.charAt(0) renvoie le premier caractère de nomPoly\n          B = point(5, randint(-30, 30) / 10, nomPoly.charAt(1), 'below') // nomPoly.charAt(1) renvoie le deuxième caractère de nomPoly\n\n          figure = polygoneRegulier(A, B, cotes) // Trace le polygone régulier direct à n côtés qui a pour côté [AB]\n          // En tant que polygone, figure a de nombreux attributs. En particulier :\n          // figure.listePoints[] contient l'ensemble des points du polygone\n          // figure.listePoints[0] contient le premier point\n          // figure.listePoints[1] contient le deuxième point etc\n          // Voir l'exercice 5S12 pour voir comment colorier et hachurer une figure\n\n          // Les points créés avec polygoneRegulier n'ont pas de nom donc pour leur ajouter un nom on peut faire\n          C = figure.listePoints[2]\n          C.nom = nomPoly.charAt(2)\n          C.positionLabel = 'above'\n          // ou alors\n          C = point(figure.listePoints[2].x, figure.listePoints[2].y, nomPoly.charAt(2), 'above')\n\n          if (cotes === 3) {\n            traces2 = tracePoint(A, B, C)\n            labels2 = labelPoint(A, B, C)\n          } else {\n            D = point(figure.listePoints[3].x, figure.listePoints[3].y, nomPoly.charAt(3), 'above')\n            aA = codageAngleDroit(B, A, D)\n            aB = codageAngleDroit(A, B, C)\n            aC = codageAngleDroit(B, C, D)\n            aD = codageAngleDroit(C, D, A)\n            traces2 = tracePoint(A, B, C, D)\n            labels2 = labelPoint(A, B, C, D)\n          }\n          figure.epaisseur = 2\n          traces1 = tracePoint(A, B)\n          labels1 = labelPoint(A, B)\n\n          objetsEnonce.push(traces1, labels1)\n          objetsEnonceml.push(traces2, labels2, figure, aA, aB, aC, aD)\n          objetsCorrection.push(traces2, labels2, figure, aA, aB, aC, aD)\n          // ici sont créés les texte, tex_corr, objets mathalea2d divers entrant dans le contenu de l'exercice\n          break\n\n        case 2:\n          // Idem Cas1 mais avec d'autres texte, texteCorr...\n          break\n\n        case 3:\n\n          break\n\n        case 4:\n\n          break\n      }\n      // Les lignes ci-dessous permettent d'avoir un affichage aux dimensions optimisées\n      const xmin = Math.min(A.x, B.x, C.x, D.x) - 2\n      const xmax = Math.max(A.x, B.x, C.x, D.x) + 2\n      const ymin = Math.min(A.y, B.y, C.y, D.y) - 2\n      const ymax = Math.max(A.y, B.y, C.y, D.y) + 2\n      // paramètres de la fenêtre Mathalea2d pour l'énoncé normal\n      paramsEnonce = { xmin: xmin, ymin: ymin, xmax: xmax, ymax: ymax, pixelsParCm: 20, scale: 1 }\n      // paramètres de la fenêtre Mathalea2d pour l'énoncé main levée\n      paramsEnonceml = { xmin: xmin, ymin: ymin, xmax: xmax, ymax: ymax, pixelsParCm: 20, scale: 1, mainlevee: true, amplitude: 1 }\n      // paramètres de la fenêtre Mathalea2d pour la correction\n      paramsCorrection = paramsEnonce\n      // On ajoute au texte de l'énoncé, la figure à main levée et la figure de l'enoncé.\n      texte += mathalea2d(paramsEnonce, objetsEnonce) + mathalea2d(paramsEnonceml, objetsEnonceml)\n      // On ajoute au texte de la correction, la figure de la correction\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n      // Si la question n'a jamais été posée, on l'enregistre\n      if (this.questionJamaisPosee(i, a, b, c, d)) { // <- laisser le i et ajouter toutes les variables qui rendent les exercices différents (par exemple a, b, c et d)\n        // Dans cet exercice, on n'utilise pas a, b, c et d mais A, B, C et D alors remplace-les !\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","NomExercice","sup","parseInt","listeTypeDeQuestions","combinaisonListes","A","B","C","D","traces1","traces2","labels1","labels2","figure","aA","aB","aC","aD","objetsEnonce","objetsEnonceml","objetsCorrection","paramsEnonce","paramsEnonceml","paramsCorrection","texte","texteCorr","cotes","nomPoly","naturePoly","cpt","creerNomDePolygone","point","charAt","randint","polygoneRegulier","listePoints","nom","positionLabel","x","y","tracePoint","labelPoint","codageAngleDroit","epaisseur","xmin","Math","min","xmax","max","ymin","ymax","pixelsParCm","scale","mainlevee","amplitude","mathalea2d","a","b","c","d","listeQuestionsToContenu"],"sourceRoot":""}