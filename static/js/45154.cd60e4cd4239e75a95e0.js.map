{"version":3,"file":"js/45154.cd60e4cd4239e75a95e0.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N20-3.js","webpack://mathalea/./src/js/exercices/3e/3A10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import DivisionEuclidienneMultiplesDiviseursCriteres from '../3e/3A10.js'\nexport const titre = 'Division Euclidienne - Diviseurs - Multiples'\nexport const dateDeModifImportante = '29/10/2021'\n/**\n * Clone de 3A10 pour les 2nde\n *\n * @author Jean-Claude Lhote\n */\n\nexport default function DivisionEuclidienneMultiplesDiviseursCriteres2nde () {\n  DivisionEuclidienneMultiplesDiviseursCriteres.call(this)\n  this.sup = '3'\n  this.sup2 = '12'\n  this.sup3 = 15\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, shuffle, shuffle2tableaux, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleur, modalPdf, listeDiviseurs, contraindreValeur } from '../../modules/outils.js'\n\nexport const titre = 'Division Euclidienne - Diviseurs - Multiples'\n\n/**\n * 3A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano\n */\nexport default function DivisionEuclidienneMultiplesDiviseursCriteres () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Divisions euclidiennes - Diviseurs - Multiples.'\n  // context.isHtml ? this.spacing = 3 : this.spacing = 2;\n  context.isHtml ? this.spacing = 1 : this.spacing = 2\n  // context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 2\n  this.nbQuestions = 5\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = '3'\n  this.sup2 = '10'\n  this.sup3 = 13\n\n  this.nouvelleVersion = function (numeroExercice) {\n    const nbChiffresMax = combinaisonListesSansChangerOrdre(this.sup.toString().split('-'), this.nbQuestions)\n    const nbDiviseursMax = combinaisonListesSansChangerOrdre(this.sup2.toString().split('-'), this.nbQuestions)\n    this.sup3 = contraindreValeur(2, 16, parseFloat(this.sup3), 10)\n\n    for (let i = 0; i < this.nbQuestions; i++) {\n      nbChiffresMax[i] = contraindreValeur(1, 5, parseFloat(nbChiffresMax[i]), 2)\n    }\n    for (let i = 0; i < this.nbQuestions; i++) {\n      nbDiviseursMax[i] = contraindreValeur(2, parseInt(this.sup3), parseFloat(nbDiviseursMax[i]), 6)\n    }\n\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A10.pdf', 'Aide mémoire sur la division euclidienne (Sébastien Lozano)', 'Aide mémoire')\n      // this.boutonAide += modalVideo('conteMathsNombresPremiers','https://coopmaths.fr/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, M, listeDiviseursM, nbDiviseursM, n1, n2, p1, p2, rgDiviseur, typeDeQuestion, multiplicateurs, multiples, textes, textesCorr, candidatsDiviseurs, dividende, diviseur, quotient, reste, diviseurs, quotients, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typeDeQuestion = listeTypeDeQuestions[i]\n\n      switch (typeDeQuestion) {\n        case 1: // plus grand reste dans une division euclidienne\n          diviseur = randint(2, 99)\n          texte = `Dire quel est le plus grand reste possible dans une division euclidienne par ${diviseur}.`\n          texteCorr = `Si on divise par ${diviseur}, il ne peut pas rester plus de ${diviseur - 1}, sinon c'est qu'on peut encore ajouter au moins 1 fois ${diviseur} dans le dividende et donc 1 au quotient.`\n          break\n        case 2: // quotient et reste d'une division euclidienne donnée\n          diviseur = randint(2, 99)\n          dividende = randint(1001, 99999)\n          quotient = Math.trunc(dividende / diviseur)\n          reste = dividende % diviseur\n\n          texte = `On a ${nombreAvecEspace(dividende)}=${nombreAvecEspace(diviseur)}$\\\\times$${nombreAvecEspace(quotient)} $+$ ${nombreAvecEspace(reste)}`\n          texte += '<br>'\n          texte += `Écrire le quotient et le reste de la division euclidienne de ${nombreAvecEspace(dividende)} par ${diviseur}.`\n          texteCorr = `Dans la division euclidienne de ${nombreAvecEspace(dividende)} par ${diviseur}, le quotient vaut ${nombreAvecEspace(quotient)} et le reste ${reste}.`\n          break\n        case 3: // caractérisation des multiples et diviseurs par le reste de la division euclidienne\n          dividende = randint(101, 9999)\n          if (listeDiviseurs(dividende).length % 2 === 0) { // si il y a un nombre pair de diviseurs on prend le (n/2+1) eme\n            rgDiviseur = listeDiviseurs(dividende).length / 2 + 1 // rang du diviseur choisi\n          } else { // il y a nbre impair de diviseurs on prend le ((n-1)/2 +1) eme\n            rgDiviseur = (listeDiviseurs(dividende).length - 1) / 2 + 1\n          }\n          diviseur = listeDiviseurs(dividende)[rgDiviseur - 1] // on choisit le diviseur central de dividende, ATTENTION rang des tableaux commence à 0\n          candidatsDiviseurs = [diviseur - 1, diviseur, diviseur + 1] // on prend l'entier précédent et le successeur de ce diviseur\n\n          // Faut-il que je conditionne pour éviter le diviseur 1 ?\n          candidatsDiviseurs = shuffle(candidatsDiviseurs) // on mélange le tableau\n          texte = 'Les trois divisions euclidiennes suivantes sont exactes : <br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[0])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[0]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[0])}`\n          texte += '<br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[1])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[1]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[1])}`\n          texte += '<br>'\n          texte += `${nombreAvecEspace(dividende)} = ${nombreAvecEspace(candidatsDiviseurs[2])}$\\\\times$${nombreAvecEspace(Math.trunc(dividende / candidatsDiviseurs[2]))} $+$ ${nombreAvecEspace(dividende % candidatsDiviseurs[2])}`\n          texte += '<br>'\n          texte += `Sans calculer, dire si les nombres ${nombreAvecEspace(candidatsDiviseurs[0])}; ${nombreAvecEspace(candidatsDiviseurs[1])}; ${nombreAvecEspace(candidatsDiviseurs[2])} sont des diviseurs de ${nombreAvecEspace(dividende)}. Justifier.`\n          texteCorr = ''\n          if (egal(dividende % candidatsDiviseurs[0], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[0])} vaut 0 donc ${nombreAvecEspace(candidatsDiviseurs[0])} est un diviseur de ${nombreAvecEspace(dividende)}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[0])} ne vaut pas 0 donc ${nombreAvecEspace(candidatsDiviseurs[0])} n'est pas un diviseur de ${nombreAvecEspace(dividende)}`\n          }\n          texteCorr += '<br>'\n          if (egal(dividende % candidatsDiviseurs[1], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[1])} vaut 0 donc ${nombreAvecEspace(candidatsDiviseurs[1])} divise ${nombreAvecEspace(dividende)}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[1])} ne vaut pas 0 donc ${nombreAvecEspace(candidatsDiviseurs[1])} ne divise pas ${nombreAvecEspace(dividende)}`\n          }\n          texteCorr += '<br>'\n          if (egal(dividende % candidatsDiviseurs[2], 0)) { // egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[2])} vaut 0 donc ${nombreAvecEspace(dividende)} est divisible par ${nombreAvecEspace(candidatsDiviseurs[2])}`\n          } else {\n            texteCorr += `Le reste de la division euclienne de ${nombreAvecEspace(dividende)} par ${nombreAvecEspace(candidatsDiviseurs[2])} ne vaut pas 0 donc ${nombreAvecEspace(dividende)} n'est pas divisible par ${nombreAvecEspace(candidatsDiviseurs[2])}`\n          }\n          texteCorr += '<br>'\n          break\n        case 4: // vocabulaire diviseurs et multiples\n          // on déclare des tableaux utiles\n          diviseurs = []\n          multiplicateurs = []\n          multiples = []\n          quotients = []\n          textes = []\n          textesCorr = []\n          // on tire au hasard 4 diviseurs différents entre 2 et 999 et 4 multiplicateurs différents entre 2 et 9\n          diviseurs = [randint(2, 999), randint(2, 999, [diviseurs[0]]), randint(2, 999, [diviseurs[0], diviseurs[1]]), randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2]])]\n          multiplicateurs = [randint(2, 9), randint(2, 9, [multiplicateurs[0]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1], multiplicateurs[2]])]\n          // on calcule les multiples\n          for (let j = 0; j < 4; j++) {\n            multiples[j] = diviseurs[j] * multiplicateurs[j]\n            quotients[j] = multiples[j] / diviseurs[j]\n            diviseurs[j] = nombreAvecEspace(diviseurs[j])\n            multiples[j] = nombreAvecEspace(multiples[j])\n            quotients[j] = nombreAvecEspace(quotients[j])\n          };\n          // on crée les phrases\n          textes[0] = `${diviseurs[0]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[0]}`\n          textesCorr[0] = `${diviseurs[0]} est un diviseur de ${multiples[0]} car ${multiples[0]}=${diviseurs[0]}$\\\\times$${quotients[0]}`\n          textes[1] = `${diviseurs[1]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[1]}`\n          textesCorr[1] = `${diviseurs[1]} est un diviseur de ${multiples[1]} car ${multiples[1]}=${diviseurs[1]}$\\\\times$${quotients[1]}`\n          textes[2] = `${multiples[2]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[2]}`\n          textesCorr[2] = `${multiples[2]} est un multiple de ${diviseurs[2]} car ${multiples[2]}=${diviseurs[2]}$\\\\times$${quotients[2]}`\n          textes[3] = `${multiples[3]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[3]}`\n          textesCorr[3] = `${multiples[3]} est un multiple de ${diviseurs[3]} car ${multiples[3]}=${diviseurs[3]}$\\\\times$${quotients[3]}`\n          // on ajoute deux cas ni multiple ni diviseur\n          // on choisit deux nombres\n          n1 = nombreAvecEspace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3]]))\n          p1 = nombreAvecEspace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3], n1]))\n          // on choisit un autre qui n'est pas dans la liste des diviseurs de n1\n          n2 = nombreAvecEspace(randint(2, 999, listeDiviseurs(n1)))\n          p2 = nombreAvecEspace(randint(2, 999, listeDiviseurs(p1)))\n          textes[4] = `${n1} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${n2}`\n          textesCorr[4] = `${n1} n'est ni un multiple ni un diviseur de ${n2} car ${n1}=${n2}$\\\\times$${Math.trunc(n1 / n2)}+${texteEnCouleur(n1 % n2)} et ${n2}=${n1}$\\\\times$${Math.trunc(n2 / n1)}+${texteEnCouleur(n2 % n1)}`\n          textes[5] = `${p2} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${p1}`\n          textesCorr[5] = `${p2} n'est ni un multiple ni un diviseur de ${p1} car ${p1}=${p2}$\\\\times$${Math.trunc(p1 / p2)}+${texteEnCouleur(p1 % p2)} et ${p2}=${p1}$\\\\times$${Math.trunc(p2 / p1)}+${texteEnCouleur(p2 % p1)}`\n          // on mélange pour que l'ordre change!\n          shuffle2tableaux(textes, textesCorr)\n          texte = 'Avec la calculatrice, compléter chaque phrase avec \"est un diviseur de\" ou \"est un multiple de\" ou \"n\\'est ni un diviseur ni un multiple de\".'\n          texte += '<br>'\n          texteCorr = ''\n          for (let j = 0; j < 5; j++) {\n            texte += textes[j]\n            texte += '<br>'\n            texteCorr += textesCorr[j]\n            texteCorr += '<br>'\n          };\n          texte += textes[5]\n          // texte +=`<br>`;\n          texteCorr += textesCorr[5]\n          texteCorr += '<br>'\n          break\n        case 5:\n          if (nbDiviseursMax[i] > 10) { // les nombres de 2 chiffres ayant plus de 10 diviseurs étant peu nombreux, on force au moins 3 chiffres.\n            nbChiffresMax[i] = Math.max(nbChiffresMax[i], 3)\n          }\n          do {\n            M = randint(10 ** (nbChiffresMax[i] - 1), 10 ** nbChiffresMax[i] - 1)\n            listeDiviseursM = listeDiviseurs(M)\n            nbDiviseursM = listeDiviseursM.length\n          } while (nbDiviseursM < Math.max(2, nbDiviseursMax[i] - 3) || nbDiviseursM > nbDiviseursMax[i])\n          texte = `Écrire la liste de tous les diviseurs de ${M}.`\n          texteCorr = `Pour trouver la liste des diviseurs de ${M} on cherche tous les produits de deux facteurs qui donnent ${M}. En écrivant toujours le plus petit facteur en premier.<br>`\n          texteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${M}, par exemple ici, ${Math.trunc(Math.sqrt(M))}$\\\\times$${Math.trunc(Math.sqrt(M))} = ${Math.trunc(Math.sqrt(M)) * Math.trunc(Math.sqrt(M))}<${M}`\n          texteCorr += ` et ${Math.trunc(Math.sqrt(M)) + 1}$\\\\times$${Math.trunc(Math.sqrt(M)) + 1} = ${(Math.trunc(Math.sqrt(M)) + 1) * (Math.trunc(Math.sqrt(M)) + 1)}>${M} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(M))}.`\n          texteCorr += ` En effet, si ${M} est le produit de deux entiers p$\\\\times$q avec p < q alors si p$\\\\times$p > ${M} c'est que q$\\\\times$q < ${M} mais dans ce cas p serait supérieur à q sinon p$\\\\times$q serait inférieur à ${M} ce qui ne doit pas être le cas.<br>`\n          if (listeDiviseursM.length % 2 === 0) { // si il y a un nombre pair de diviseurs\n            for (let m = 0; m < (listeDiviseursM.length / 2); m++) {\n              texteCorr += '' + listeDiviseursM[m] + '$\\\\times$' + listeDiviseursM[(listeDiviseursM.length - m - 1)] + ` = ${M}<br>`\n            };\n          } else {\n            for (let m = 0; m < ((listeDiviseursM.length - 1) / 2); m++) {\n              texteCorr += '' + listeDiviseursM[m] + '$\\\\times$' + listeDiviseursM[(listeDiviseursM.length - m - 1)] + ` = ${M}<br>`\n            };\n            texteCorr += '' + listeDiviseursM[(listeDiviseursM.length - 1) / 2] + '$\\\\times$' + listeDiviseursM[(listeDiviseursM.length - 1) / 2] + ` = ${M}<br>`\n          };\n          texteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${M}.<br>`\n          texteCorr += `La liste des diviseurs de ${M} est donc `\n          texteCorr += '1'\n          for (let w = 1; w < listeDiviseursM.length; w++) {\n            texteCorr += ' ; ' + listeDiviseursM[w]\n          };\n          texteCorr += '.'\n          break\n      };\n\n      if (this.questionJamaisPosee(i, typeDeQuestion, texte)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Nombres de chiffres de l\\'entier de la question 5']\n  this.besoinFormulaire2Texte = ['Nombre maximum de diviseurs de l\\'entier de la question 5']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDeModifImportante","DivisionEuclidienneMultiplesDiviseursCriteres2nde","DivisionEuclidienneMultiplesDiviseursCriteres","this","sup","sup2","sup3","Exercice","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","nbChiffresMax","combinaisonListesSansChangerOrdre","toString","split","nbDiviseursMax","contraindreValeur","parseFloat","i","parseInt","boutonAide","modalPdf","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","M","listeDiviseursM","nbDiviseursM","n1","n2","p1","p2","rgDiviseur","typeDeQuestion","multiplicateurs","multiples","textes","textesCorr","candidatsDiviseurs","dividende","diviseur","quotient","reste","diviseurs","quotients","texte","texteCorr","cpt","randint","Math","trunc","nombreAvecEspace","listeDiviseurs","length","shuffle","egal","j","texteEnCouleur","shuffle2tableaux","max","sqrt","m","w","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Texte","consigneCorrection","introduction","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","args","argsConcatenes","arg","undefined","indexOf"],"sourceRoot":""}