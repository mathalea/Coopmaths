{"version":3,"file":"js/7117.421145f7f4b582485dc8.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G12-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, arrondi, texNombre, texteEnCouleur, numAlpha } from '../../modules/outils.js'\nimport { point, tracePoint, pointSurDroite, pointIntersectionDD, labelPoint, droite, droiteParPointEtParallele, droiteParPointEtPerpendiculaire, segment, rotation, codageAngleDroit, afficheCoteSegment, grille, seyes, longueur, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\nexport const amcReady = true\nexport const amcType = 'AMCOpen' // type de question AMC\nexport const titre = 'Tracer des parallèles et des perpendiculaires'\n\n/**\n * Fonction générale pour exercices de constructions de parallèles et perpendiculaires\n * références 6G11, 6G12 et 6G12-1\n * Animation de la correction ajoutée le 16/04/2021\n * @author Jean-Claude Lhote  (AMC par Eric Elter en septembre 2021)\n */\nexport default function ParalleleEtPerpendiculaires () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.type = 3\n  this.typeExercice = 'IEP'\n  this.besoinFormulaire2CaseACocher = ['Avec auto-correction']\n  this.sup2 = true\n  this.nouvelleVersion = function () {\n    const typesDeQuestionsDisponibles = [this.type] // Le choix 1 ou 2 ou 3 : 1=perpendiculaires, 2=parallèles, 3=des perpendiculaires et des paralèlles\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let Xmin; let Xmax; let Ymin; let Ymax; const ppc = 20; let sc\n    let anim\n\n    let A\n    let B\n    let C\n    let D\n    let xE\n    let E\n    let F\n    let CC\n    let DD\n    let EE\n    let d\n    let s1\n    let s2\n    let enonce\n    let correction\n    let dB\n    let dC\n    let dD\n    let dE\n    let g\n    let lC\n    let lD\n    let lE\n    let cB\n    let cC\n    let cD\n    let cE\n    let cF\n    let cG\n    let FF\n    let BB\n    let carreaux\n    let k\n    const objetsEnonce = []\n    const objetsCorrection = []\n\n    let p\n    for (\n      let i = 0, texte, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      anim = new Alea2iep()\n      anim.equerreZoom(150)\n      objetsEnonce.length = 0\n      objetsCorrection.length = 0\n      correction = ''\n      if (this.sup === 2) { k = 0.8 } else { k = 0.5 }\n      if (this.sup === 3) { this.sup2 = false } // Pour obliger à enlever l'auto-correction sur papier blanc, car elle est alors impossible. Pb néanmoins avec la case à cocher qui ni bouge pas (Pb soulevé dans le Slack)\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          A = point(0, 0, 'A', 'above left')\n          B = point(10, randint(-4, 4, [-1, 0, 1]), 'B', 'above right')\n          d = droite(A, B)\n          d.isVisible = true\n          C = point(randint(2, 3), randint(3, 4), 'C', 'above left')\n          D = point(randint(7, 8), randint(-7, -6), 'D')\n          dB = droiteParPointEtPerpendiculaire(B, d)\n          xE = 11\n          E = pointSurDroite(dB, 11, 'E', 'left')\n          while (!Number.isInteger(E.y)) {\n            xE++\n            E = pointSurDroite(dB, xE, 'E', 'left')\n          }\n          F = point(E.x, B.y)\n          s1 = segment(B, F, 'red')\n          s1.epaisseur = 2\n          s1.pointilles = true\n          s2 = segment(F, E, 'blue')\n          s2.epaisseur = 2\n          s2.pointilles = true\n          dC = droiteParPointEtPerpendiculaire(C, d)\n          dD = droiteParPointEtPerpendiculaire(D, d)\n          BB = rotation(A, B, 90)\n          CC = pointIntersectionDD(dC, d, 'M', 'below right')\n          DD = pointIntersectionDD(dD, d, 'N', 'above left')\n          lC = arrondi(longueur(CC, A) * k, 1)\n          lD = arrondi(longueur(DD, A) * k, 1)\n          cB = codageAngleDroit(A, B, BB)\n          cC = codageAngleDroit(C, CC, B)\n          cD = codageAngleDroit(D, DD, B)\n          if (this.sup2) {\n            objetsCorrection.push(s1,\n              s2,\n              dC,\n              dD,\n              dB,\n              cB,\n              cC,\n              cD,\n              d,\n              tracePoint(A, B, C, D, E, CC, DD),\n              labelPoint(A, B, C, D, E, CC, DD),\n              afficheCoteSegment(\n                segment(A, CC),\n                `${texNombre(lC)} cm`,\n                0.5,\n                'red',\n                1,\n                0.5,\n                'red'\n              ),\n              afficheCoteSegment(\n                segment(A, DD),\n                `${texNombre(lD)} cm`,\n                -0.5,\n                'red',\n                1,\n                -0.5,\n                'red'\n              )\n            )\n          } else {\n            objetsCorrection.push(dC,\n              dD,\n              dB,\n              cB,\n              cC,\n              cD,\n              d,\n              tracePoint(A, B, C, D, E, CC, DD),\n              labelPoint(A, B, C, D, E, CC, DD)\n            )\n          }\n          objetsEnonce.push(\n            tracePoint(A, B, C, D),\n            labelPoint(A, B, C, D),\n            d\n          )\n          if (context.isHtml) enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          else enonce = numAlpha(0) + ' Utiliser un crayon à papier afin de pouvoir gommer si besoin.<br>'\n          enonce +=\n            numAlpha(1) +\n            ' Tracer la droite perpendiculaire à $(AB)$ passant par $B$.<br>'\n          enonce +=\n            numAlpha(2) +\n            ' Tracer la droite perpendiculaire à $(AB)$ passant par $C$ et nommer $M$ le point d\\'intersection de cette droite avec la droite $(AB)$.<br>'\n          enonce +=\n            numAlpha(3) +\n            ' Tracer la droite perpendiculaire à $(AB)$ passant par $D$ et nommer $N$ le point d\\'intersection de cette droite avec la droite $(AB)$.<br>'\n          if (this.sup2) {\n            enonce +=\n            numAlpha(4) +\n            ' Mesurer ensuite les distances $AM$ et $AN$. Pour l\\'auto-correction comparer ces mesures avec celles données dans la correction<br>'\n\n            correction = `<br>$AM \\\\approx ${texNombre(\n            lC\n          )}$ cm et $AN \\\\approx ${texNombre(lD)}$ cm.<br>`\n            correction += 'Pour la perpendiculaire en $B$, contrôle la position du point $E$.<br>'\n          }\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, CC.y, DD.y) + 1)\n          anim.recadre(Xmin - 3, Ymax)\n          anim.pointsCreer(A, B, C, D)\n          anim.regleDroite(A, B)\n          anim.perpendiculaireRegleEquerre2points3epoint(A, B, B)\n          anim.perpendiculaireRegleEquerre2points3epoint(A, B, C)\n          anim.perpendiculaireRegleEquerre2points3epoint(A, B, D)\n          break\n        case 2:\n          A = point(2, 0, 'A', 'below left')\n          B = point(12, randint(-4, 4, 0), 'B')\n          d = droite(A, B)\n          d.isVisible = true\n          C = point(0, randint(3, 4), 'C', 'above')\n          D = point(randint(7, 8), randint(-7, -6), 'D', 'below right')\n          E = point(randint(4, 5), randint(5, 6), 'E', 'below right')\n          F = point(2, -3, 'F', 'left')\n\n          dE = droiteParPointEtParallele(E, d)\n          dC = droiteParPointEtParallele(C, d)\n          dD = droiteParPointEtParallele(D, d)\n          p = droite(A, F)\n          p.isVisible = true\n          CC = pointIntersectionDD(dC, p, 'M', 'above left')\n          DD = pointIntersectionDD(dD, p, 'N', 'above left')\n          EE = pointIntersectionDD(dE, p, 'O', 'above left')\n          lC = arrondi(longueur(CC, A) * k, 1)\n          lD = arrondi(longueur(DD, A) * k, 1)\n          lE = arrondi(longueur(EE, A) * k, 1)\n          if (this.sup2) {\n            objetsCorrection.push(dC, dD, dE, d, p, tracePoint(A, B, C, D, E, F), labelPoint(A, B, C, D, E, F, CC, DD, EE), afficheCoteSegment(segment(A, CC), `${texNombre(lC)} cm`, 0.2, 'red', 1, 0.5, 'red'), afficheCoteSegment(segment(DD, A), `${texNombre(lD)} cm`, -0.2, 'green', 1, -0.5, 'green'), afficheCoteSegment(segment(A, EE), `${texNombre(lE)} cm`, -0.2, 'blue', 1, -0.5, 'blue'))\n          } else {\n            objetsCorrection.push(dC, dD, dE, d, p, tracePoint(A, B, C, D, E, F), labelPoint(A, B, C, D, E, F, CC, DD, EE))\n          }\n          objetsEnonce.push(tracePoint(A, B, C, D, E, F), labelPoint(A, B, C, D, E, F), d, p)\n\n          if (context.isHtml) enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          else enonce = numAlpha(0) + ' Utiliser un crayon à papier afin de pouvoir gommer si besoin.<br>'\n          enonce += numAlpha(1) + ' Tracer la droite parallèle à $(AB)$ passant par $C$ et nommer $M$, le point d\\'intersection de cette droite avec la droite $(AF)$.<br>'\n          enonce += numAlpha(2) + ' Tracer la droite parallèle à $(AB)$ passant par $D$ et nommer $N$, le point d\\'intersection de cette droite avec la droite $(AF)$.<br>'\n          enonce += numAlpha(3) + ' Tracer la droite parallèle à $(AB)$ passant par $E$ et nommer $O$, le point d\\'intersection de cette droite avec la droite $(AF)$.<br>'\n          if (this.sup2) {\n            enonce += numAlpha(4) + ' Mesurer les distances $AM$, $AN$ et $AO$. Pour l\\'auto-correction, comparer ces mesures avec celles données par  l\\'ordinateur dans la correction.<br>'\n\n            correction = `<br>$AM \\\\approx ${texNombre(\n            lC\n          )}$ cm, $AN \\\\approx ${texNombre(\n            lD\n          )}$ cm et $AO \\\\approx${texNombre(\n            lE\n          )}$ cm.<br>`\n          }\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) + 1)\n          anim.recadre(Xmin - 3, Ymax)\n          anim.pointsCreer(A, B, C, D, E)\n          anim.regleDroite(A, B)\n          anim.paralleleRegleEquerre2points3epoint(A, B, C)\n          anim.paralleleRegleEquerre2points3epoint(A, B, D)\n          anim.paralleleRegleEquerre2points3epoint(A, B, E)\n\n          break\n        case 3:\n          A = point(0, 0, 'A', 'above left')\n          B = point(10, randint(-4, 4, [-1, 0, 1]), 'B', 'above right')\n          d = droite(A, B)\n          d.isVisible = true\n          C = point(randint(2, 3), randint(3, 4), 'C', 'above left')\n          D = point(randint(7, 8), randint(-7, -6), 'D')\n          dB = droiteParPointEtPerpendiculaire(B, d)\n          xE = 11\n          E = pointSurDroite(dB, 11, 'E', 'left')\n          while (!Number.isInteger(E.y)) {\n            xE++\n            E = pointSurDroite(dB, xE, 'E', 'left')\n          }\n          F = point(E.x, B.y)\n          dE = droiteParPointEtParallele(E, d)\n          dD = droiteParPointEtParallele(D, d)\n          dC = droiteParPointEtPerpendiculaire(C, d)\n          BB = rotation(A, B, 90)\n          CC = pointIntersectionDD(dC, d, 'M', 'below right')\n          DD = pointIntersectionDD(dD, dB, 'N', 'above left')\n          EE = pointIntersectionDD(dC, dE, 'O', 'above left')\n          FF = pointIntersectionDD(dD, dC)\n\n          lC = arrondi(longueur(CC, A) * k, 1)\n          lD = arrondi(longueur(DD, A) * k, 1)\n          lE = arrondi(longueur(EE, A) * k, 1)\n          cB = codageAngleDroit(A, B, BB)\n          cC = codageAngleDroit(C, CC, B)\n          cD = codageAngleDroit(D, DD, B, 'red')\n          cE = codageAngleDroit(B, E, EE, 'red')\n          cF = codageAngleDroit(C, EE, E, 'red')\n          cG = codageAngleDroit(C, FF, D, 'red')\n          if (this.sup2) {\n            objetsCorrection.push(dC, dD, dB, dE, cB, cC, cD, cE, cF, cG, d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), afficheCoteSegment(\n              segment(A, CC),\n            `${texNombre(lC)} cm`,\n            0.5,\n            'red',\n            1,\n            0.5,\n            'red'\n            ),\n            afficheCoteSegment(\n              segment(A, DD),\n              `${texNombre(lD)} cm`,\n              0,\n              'blue',\n              1,\n              -0.5,\n              'blue'\n            ),\n            afficheCoteSegment(\n              segment(A, EE),\n              `${texNombre(lE)} cm`,\n              0,\n              'green',\n              1,\n              -0.5,\n              'green'\n            ))\n          } else {\n            objetsCorrection.push(dC, dD, dB, dE, cB, cC, cD, cE, cF, cG, d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE))\n          }\n          objetsEnonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d)\n          if (context.isHtml) enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          else enonce = numAlpha(0) + ' Utiliser un crayon à papier afin de pouvoir gommer si besoin.<br>'\n          enonce += numAlpha(1) + ' Tracer la droite perpendiculaire à $(AB)$ passant par $B$.<br>'\n          enonce += numAlpha(2) + ' Tracer la droite perpendiculaire à $(AB)$ passant par $C$ et nomme $M$, le point d\\'intersection de cette droite avec la droite $(AB)$.<br>'\n          enonce += numAlpha(3) + ' Tracer la droite parallèle à $(AB)$ passant par $D$ et nomme $N$, le point d\\'intersection de cette droite avec la droite $(BE)$.<br>'\n          enonce += numAlpha(4) + ' Tracer la droite parallèle à $(AB)$ passant par $E$ et nomme $O$, le point d\\'intersection de cette droite avec la droite $(CM)$.<br>'\n          if (this.sup2) {\n            enonce += numAlpha(5) + ' Mesurer les distances $AM$, $AN$ et $AO$. Pour l\\'auto-correction, comparer ces mesures avec celles données par  l\\'ordinateur dans la correction.<br>'\n\n            correction += `<br>$AM \\\\approx ${texNombre(\n            lC\n          )}$ cm, $AN \\\\approx ${texNombre(\n            lD\n          )}$ cm et $AO \\\\approx${texNombre(\n            lE\n          )}$ cm.<br>`\n          }\n          correction += `Les angles droits en rouge se justifient par la propriété :<br> ${texteEnCouleur('Si deux droites sont parallèles, alors toute droite perpendiculaire à l\\'une est aussi perpendiculaire à l\\'autre', 'red')}.<br>`\n          correction += 'Vérifier les angles droits à l\\'équerre.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, F.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, F.y, EE.y, CC.y, DD.y) + 1)\n          anim.recadre(Xmin - 3, Ymax)\n          anim.pointsCreer(A, B, C, D, E)\n          anim.regleDroite(A, B)\n          anim.perpendiculaireRegleEquerre2points3epoint(A, B, B)\n          anim.perpendiculaireRegleEquerre2points3epoint(A, B, C)\n          anim.paralleleRegleEquerre2points3epoint(A, B, D)\n          anim.paralleleRegleEquerre2points3epoint(A, B, E)\n\n          break\n      }\n      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (parseInt(this.sup) === 2) {\n        sc = 0.8\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        sc = 0.5\n        carreaux = ''\n      }\n      objetsEnonce.push(g, carreaux)\n      objetsCorrection.push(g, carreaux)\n\n      enonce += '<br>' + mathalea2d(\n        {\n          xmin: Xmin,\n          ymin: Ymin,\n          xmax: Xmax,\n          ymax: Ymax,\n          pixelsParCm: ppc,\n          scale: sc\n        },\n        objetsEnonce\n      )\n      correction += mathalea2d(\n        {\n          xmin: Xmin,\n          ymin: Ymin,\n          xmax: Xmax,\n          ymax: Ymax,\n          pixelsParCm: ppc,\n          scale: sc\n        },\n        objetsCorrection\n      )\n      /** ********************** AMC Open *****************************/\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].options = { ordered: false }\n      this.autoCorrection[i].enonce = enonce + '<br>'\n      this.autoCorrection[i].propositions = [\n        {\n          texte: correction,\n          statut: 3,\n          sanscadre: true\n        }\n      ]\n      // this.autoCorrection = [{ enonce: enonce + '<br>', propositions: [{ texte: correction, statut: 3, sanscadre: true }] }]\n      /****************************************************/\n      correction += anim.htmlBouton(this.numeroExercice, i)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(enonce + '<br>')\n        this.listeCorrections.push(correction + '<br>')\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de cahier',\n    3,\n    ' 1 : Cahier à petits carreaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","titre","ParalleleEtPerpendiculaires","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","type","typeExercice","besoinFormulaire2CaseACocher","sup2","nouvelleVersion","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","Xmin","Xmax","Ymin","Ymax","listeQuestions","listeCorrections","autoCorrection","sc","anim","A","B","C","D","xE","E","F","CC","DD","EE","d","s1","s2","enonce","correction","dB","dC","dD","dE","g","lC","lD","lE","cB","cC","cD","cE","cF","cG","FF","BB","carreaux","k","objetsEnonce","objetsCorrection","p","texte","i","cpt","Alea2iep","equerreZoom","length","point","randint","droite","isVisible","droiteParPointEtPerpendiculaire","pointSurDroite","Number","isInteger","y","x","segment","epaisseur","pointilles","rotation","pointIntersectionDD","arrondi","longueur","codageAngleDroit","push","tracePoint","labelPoint","afficheCoteSegment","texNombre","context","numAlpha","Math","floor","min","ceil","max","recadre","pointsCreer","regleDroite","perpendiculaireRegleEquerre2points3epoint","droiteParPointEtParallele","paralleleRegleEquerre2points3epoint","texteEnCouleur","grille","parseInt","seyes","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","options","ordered","propositions","statut","sanscadre","htmlBouton","numeroExercice","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}