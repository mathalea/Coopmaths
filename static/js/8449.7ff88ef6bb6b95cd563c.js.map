{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5G40-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","NomQuelconqueDeLaFonctionQuiCreeExercice","Exercice","this","consigne","nbQuestionsModifiable","nbCols","nbColsCorr","tailleDiaporama","video","nouvelleVersion","listeQuestions","listeCorrections","A","point","B","C","D","O","milieu","nom","p","polygone","sAC","segment","pointilles","sBD","sABcodage","codeSegment","sCDcodage","sADcodage","sBCcodage","sAOcodage","sCOcodage","sBOcodage","sDOcodage","aDABcodage","codeAngle","aBCDcodage","aABCcodage","aCDAcodage","sAB","sBC","sCD","sAD","epaisseur","color","M1","N1","O1","P1","p1","codecerf1","codecerf2","codecerf3","codecerf4","paramsEnonce","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","amplitude","nomsDejaUtilises","gestionNom","creerNomDePolygone","push","listeTypeQuestions","combinaisonListes","nbQuestions","texte","texteCorr","i","cpt","mathalea2d","nommePolygone","latexParPoint","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/8449.7ff88ef6bb6b95cd563c.js","sourcesContent":["import { point, polygone, segment, milieu, nommePolygone, codeSegment, codeAngle, mathalea2d, latexParPoint } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { creerNomDePolygone, listeQuestionsToContenu, combinaisonListes } from '../../modules/outils.js'\nexport const titre = 'Reconnaitre un parallélogramme à partir du codage d’une figure'\n\n/**\n * Description didactique de l'exercice\n * @author\n * Référence\n*/\nexport default function NomQuelconqueDeLaFonctionQuiCreeExercice () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Pour chacune des figures suivantes, tracées à main levée, préciser s'il s'agit d'un parallélogramme.\"\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  // this.sup = 1\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    // this.introduction = ''\n\n    const A = point(0, 0)\n    const B = point(5, 0)\n    const C = point(6.5, -3)\n    const D = point(1.5, -3)\n    const O = milieu(A, C)\n    O.nom = 'O'\n    const p = polygone(A, B, C, D)\n    const sAC = segment(A, C)\n    sAC.pointilles = true\n    const sBD = segment(B, D)\n    sBD.pointilles = true\n    const sABcodage = codeSegment(A, B, 'X', 'blue')\n    const sCDcodage = codeSegment(C, D, 'X', 'blue')\n    const sADcodage = codeSegment(A, D, '▼', 'blue')\n    const sBCcodage = codeSegment(B, C, '▼', 'blue')\n    const sAOcodage = codeSegment(A, O, '|', 'blue')\n    const sCOcodage = codeSegment(O, C, '|', 'blue')\n    const sBOcodage = codeSegment(B, O, '||', 'blue')\n    const sDOcodage = codeSegment(O, D, '||', 'blue')\n    const aDABcodage = codeAngle(D, A, B, 0.8, '|', 'black', 1, 1, 'blue')\n    const aBCDcodage = codeAngle(B, C, D, 0.8, '|', 'black', 1, 1, 'blue')\n    const aABCcodage = codeAngle(A, B, C, 0.8, '|||', 'black', 1, 1, 'orange')\n    const aCDAcodage = codeAngle(C, D, A, 0.8, '|||', 'black', 1, 1, 'orange')\n    const sAB = segment(A, B)\n    const sBC = segment(B, C)\n    const sCD = segment(C, D)\n    const sAD = segment(A, D)\n    sAB.epaisseur = 2\n    sAB.color = 'blue'\n    sCD.epaisseur = 2\n    sCD.color = 'blue'\n    sBC.epaisseur = 2\n    sBC.color = 'green'\n    sAD.epaisseur = 2\n    sAD.color = 'green'\n\n    // Cerf-volant\n    const M1 = point(0, 0)\n    const N1 = point(-1, -2)\n    const O1 = point(0, -6)\n    const P1 = point(1, -2)\n    const p1 = polygone(M1, N1, O1, P1)\n\n    const codecerf1 = codeSegment(M1, N1, 'X', 'blue')\n    const codecerf2 = codeSegment(M1, P1, 'X', 'blue')\n    const codecerf3 = codeSegment(O1, P1, '▼', 'blue')\n    const codecerf4 = codeSegment(O1, N1, '▼', 'blue')\n\n    const paramsEnonce = { xmin: -1, ymin: -4, xmax: 7.5, ymax: 0.8, pixelsParCm: 20, scale: 0.5, mainlevee: true, amplitude: 0.5 }\n\n    const nomsDejaUtilises = ['O']\n    let nom\n    function gestionNom () {\n      nom = creerNomDePolygone(4, nomsDejaUtilises)\n      nomsDejaUtilises.push(nom)\n      A.nom = nom[0]\n      B.nom = nom[1]\n      C.nom = nom[2]\n      D.nom = nom[3]\n    }\n\n    const typeQuestionsDisponibles = ['cotesOpposesMemeLongueur', 'cotesConsecutifsMemeLongueur', 'diagonalesMemeLongueur', '2cotesOpposesMemeLongueur', '2cotesOpposesMemeLongueurv2', '2cotesOpposesMemeLongueurEtParallele', '2cotesOpposesMemeLongueurEtParallelev2', '2cotesOpposesEtParalleles', 'anglesOpposesEgaux'] // On créé 3 types de questions\n    const listeTypeQuestions = combinaisonListes(typeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sABcodage, sBCcodage, sCDcodage, sADcodage, nommePolygone(p, nom)])\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $${B.nom + C.nom} = ${D.nom + A.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses côtés opposés de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case 'cotesConsecutifsMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, codeSegment(A, B, 'X', 'blue'), codeSegment(B, C, 'X', 'blue'), codeSegment(C, D, '||', 'blue'), codeSegment(D, A, '||', 'blue'), nommePolygone(p, nom)])\n\n          texteCorr = `Les côtés consécutifs de $${nom}$ sont de même longueur, ce n'est pas forcément un parallélogramme comme le montre le contre-exemple suivant. (Il s'agit d'un cerf-volant).`\n\n          texteCorr += '<br>' + mathalea2d({ xmin: -1.5, ymin: -6.5, xmax: 1.5, ymax: 0.5, pixelsParCm: 20, scale: 1 }, [p1, codecerf1, codecerf2, codecerf3, codecerf4])\n          break\n        case 'diagonalesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAOcodage, sBOcodage, sCOcodage, sDOcodage, sAC, sBD, nommePolygone(p, nom), latexParPoint('O', O, 'black', 200, 12, '')])\n          texteCorr = `On sait que $${A.nom + 'O'} = ${'O' + C.nom}$ et $${B.nom + 'O'} = ${'O' + D.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses diagonales qui se coupent en leur milieu alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sABcodage, sCDcodage, nommePolygone(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurv2':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sBCcodage, sADcodage, nommePolygone(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallele':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAB, sCD, sABcodage, sCDcodage, nommePolygone(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $(${A.nom + B.nom}) // (${C.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallelev2':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sBC, sAD, sBCcodage, sADcodage, nommePolygone(p, nom)]) + `$(${B.nom + C.nom}) // (${A.nom + D.nom})$`\n          texteCorr = `On sait que $${B.nom + C.nom} = ${A.nom + D.nom}$ et $(${B.nom + C.nom}) // (${A.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesEtParalleles':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAB, sCD, nommePolygone(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `$${nom}$ a deux côtés opposés parallèles, c'est donc un trapèze et pas forcément un parallélogramme.`\n          break\n        case 'anglesOpposesEgaux':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, nommePolygone(p, nom), aABCcodage, aBCDcodage, aCDAcodage, aDABcodage])\n          texteCorr = `On sait que $\\\\widehat{${A.nom + B.nom + C.nom}} = \\\\widehat{${C.nom + D.nom + A.nom}}$ et $\\\\widehat{${B.nom + C.nom + D.nom}} = \\\\widehat{${D.nom + A.nom + B.nom}}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses angles opposés égaux alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}