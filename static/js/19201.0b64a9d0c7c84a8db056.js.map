{"version":3,"file":"js/19201.0b64a9d0c7c84a8db056.js","mappings":"4TAOO,MAAMA,EAAQ,uCACRC,GAAkB,EAClBC,EAAiB,WACjBC,GAAW,EACXC,EAAU,UAEVC,EAAoB,YAUlB,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,YAAc,EACnBD,KAAKE,QAAU,EACfF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,mBAAoB,EACzBL,KAAKM,qBAAsB,EAC3B,MAAMC,GAAIC,EAAAA,EAAAA,KAAM,EAAG,GACnB,IAAIC,EACJT,KAAKU,IAAM,EACXV,KAAKW,KAAO,EACZX,KAAKY,MAAO,EACZ,MAAMC,EAAS,EACbC,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC9GM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC9GM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC5LM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAClKM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAClKM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAClKM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MACpFM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MACxIM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MACrJM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MACpFM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC3HM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAClKM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAClKM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MACjGM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC9GM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC3HM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,MAC1QM,EAAAA,EAAAA,KAAS,EAACN,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IAAIA,EAAAA,EAAAA,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","sources":["webpack://mathalea/./src/js/exercices/4e/4G12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { texcolors, choice, lettreDepuisChiffre, listeQuestionsToContenu, texteEnCouleurEtGras, sp, deuxColonnes, centrage, texteEnCouleur, contraindreValeur, enleveElement, compteOccurences, miseEnEvidence, calcul } from '../../modules/outils.js'\nimport { grille, mathalea2d, point, segment, tracePoint, homothetie, polygone, symetrieAxiale, translation, droite, vecteur, rotation, milieu, texteParPointEchelle } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { mod } from 'mathjs'\n\nexport const titre = 'Trouver une série de transformations'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCOpen'\n\nexport const dateDePublication = '3/12/2021'\n\n/**\n * A partir de la figure 0, l'idée est de trouver un chemin qui mène à la figure 28 par une série\n * de transformations entre deux figures strictement voisines.\n * Ref 4G12\n * @author : Jean-Claude Lhote (et modifié par Eric Elter)\n * publié le 03/12/2021\n */\n\nexport default function SerieDeTransformations () {\n  Exercice.call(this)\n  this.nbQuestions = 1\n  this.spacing = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  const A = point(0, 0)\n  let typeDeTransfos\n  this.sup = 4\n  this.sup2 = 6\n  this.sup3 = false\n  const motifs = [\n    polygone([point(1, 1), point(2, 1), point(2, 4), point(6, 4), point(6, 5), point(3, 5), point(3, 6), point(1, 6)]),\n    polygone([point(1, 1), point(3, 1), point(3, 4), point(6, 4), point(6, 6), point(3, 6), point(3, 5), point(1, 5)]),\n    polygone([point(2, 1), point(3, 1), point(3, 3), point(4, 3), point(4, 4), point(3, 4), point(3, 5), point(5, 5), point(5, 6), point(2, 6), point(2, 4), point(1, 4), point(1, 3), point(2, 3)]),\n    polygone([point(1, 1), point(4, 1), point(4, 2), point(5, 2), point(5, 4), point(4, 4), point(4, 5), point(3, 5), point(3, 6), point(2, 6), point(2, 2), point(1, 2)]),\n    polygone([point(2, 1), point(5, 1), point(5, 3), point(6, 3), point(6, 4), point(4, 4), point(4, 3), point(3, 3), point(3, 5), point(5, 5), point(5, 6), point(2, 6)]),\n    polygone([point(1, 1), point(5, 1), point(5, 2), point(2, 2), point(2, 3), point(3, 3), point(3, 4), point(2, 4), point(2, 5), point(4, 5), point(4, 6), point(1, 6)]),\n    polygone([point(2, 6), point(2, 1), point(5, 1), point(5, 2), point(3, 2), point(3, 6)]),\n    polygone([point(2, 6), point(5, 6), point(5, 5), point(4, 5), point(4, 1), point(1, 1), point(1, 2), point(3, 2), point(3, 5), point(2, 5)]),\n    polygone([point(2, 1), point(3, 1), point(6, 1), point(6, 2), point(3, 2), point(3, 3), point(5, 3), point(5, 5), point(3, 5), point(3, 6), point(2, 6)]),\n    polygone([point(2, 1), point(3, 1), point(3, 3), point(5, 3), point(5, 6), point(2, 6)]),\n    polygone([point(2, 1), point(2, 6), point(5, 6), point(5, 3), point(3, 3), point(5, 1), point(4, 1), point(3, 2), point(3, 1)]),\n    polygone([point(2, 1), point(6, 1), point(6, 4), point(3, 4), point(3, 5), point(5, 5), point(5, 6), point(2, 6), point(2, 3), point(5, 3), point(5, 2), point(2, 2)]),\n    polygone([point(2, 1), point(4, 1), point(5, 2), point(5, 1), point(6, 1), point(6, 6), point(5, 6), point(5, 3), point(4, 2), point(3, 2), point(3, 6), point(2, 6)]),\n    polygone([point(1, 6), point(2, 6), point(4, 3), point(5, 5), point(6, 5), point(4, 1), point(3, 1)]),\n    polygone([point(2, 6), point(3, 6), point(4, 4), point(5, 6), point(6, 6), point(3, 1), point(2, 1), point(3, 3)]),\n    polygone([point(1, 1), point(6, 1), point(6, 2), point(3, 5), point(5, 5), point(5, 6), point(1, 6), point(5, 2), point(1, 2)]),\n    polygone([point(3, 6), point(3, 5), point(2, 5), point(2, 4), point(3, 4), point(3, 3), point(1, 3), point(1, 2), point(3, 2), point(3, 1), point(4, 1), point(4, 2), point(5, 2), point(5, 3), point(4, 3), point(4, 4), point(6, 4), point(6, 5), point(4, 5), point(4, 6)]),\n    polygone([point(2, 1), point(3, 3), point(2, 3), point(2, 4), point(6, 4), point(6, 3), point(5, 3), point(5, 1), point(4, 1), point(4, 3), point(3, 1)]),\n    polygone([point(2, 2), point(3, 3), point(3, 2), point(4, 3), point(4, 2), point(5, 3), point(5, 2), point(6, 3), point(6, 5), point(2, 5)]),\n    polygone([point(1, 1), point(3, 1), point(3, 5), point(5, 5), point(5, 6), point(2, 6), point(2, 2), point(1, 2)]),\n    polygone([point(1, 1), point(6, 1), point(6, 2), point(4, 2), point(4, 4), point(5, 4), point(5, 5), point(1, 5), point(1, 4), point(3, 4), point(3, 2), point(1, 2)]),\n    polygone([point(2, 1), point(2, 3), point(4, 3), point(4, 4), point(3, 4), point(3, 6), point(6, 6), point(6, 4), point(5, 4), point(5, 3), point(6, 3), point(6, 1), point(5, 1), point(5, 2), point(4, 2), point(4, 1)]),\n    polygone([point(2, 6), point(2, 4), point(1, 4), point(1, 2), point(2, 2), point(2, 1), point(3, 1), point(3, 3), point(5, 3), point(5, 4), point(4, 4), point(4, 5), point(3, 5), point(3, 6)]),\n    polygone([point(1, 3), point(1, 1), point(3, 1), point(3, 2), point(6, 2), point(6, 5), point(3, 5), point(3, 3)]),\n    polygone([point(2, 1), point(2, 2), point(1, 2), point(1, 4), point(2, 4), point(2, 3), point(3, 3), point(3, 2), point(4, 2), point(4, 4), point(3, 4), point(3, 6), point(6, 6), point(6, 4), point(5, 4), point(5, 3), point(6, 3), point(6, 1)]),\n    polygone([point(3, 1), point(3, 2), point(1, 2), point(1, 3), point(2, 3), point(2, 4), point(3, 4), point(3, 5), point(5, 5), point(5, 4), point(6, 4), point(6, 3), point(5, 3), point(5, 2), point(4, 2), point(4, 1)])\n  ]\n  const noeuds = []\n  const maGrille = []\n  const labels = []\n  maGrille.push(grille(0, 0, 16, 16, 'black', 0.2, 0.4))\n  for (let i = 0; i < 6; i++) {\n    maGrille.push(segment(i * 3.2, 0, i * 3.2, 16))\n    maGrille.push(segment(0, i * 3.2, 16, i * 3.2))\n    for (let j = 0; j < 6; j++) {\n      labels[i * 6 + j] = i * 6 + j < 26 ? lettreDepuisChiffre(i * 6 + j + 1) : lettreDepuisChiffre((i * 6 + j) % 26 + 1) + \"'\"\n      noeuds[i * 6 + j] = point(i * 3.2, j * 3.2, labels[i * 6 + j], 'above right')\n      maGrille.push(tracePoint(noeuds[i * 6 + j]))\n    }\n  }\n\n  function transfoPoly (pol, { type = 'symax', centre, axe, vecteur, angle = 90, sens = true }) {\n    switch (type) { // type est l'une des chaines suivantes 'symax', 'trans', 'rot90', 'rot180'\n      case 'symax':\n        return symetrieAxiale(pol, axe)\n      case 'trans':\n        return translation(pol, vecteur)\n      case 'rot90':\n        return rotation(pol, centre, sens ? angle : -angle)\n      case 'rot180':\n        return rotation(pol, centre, 180)\n      default:\n        return pol\n    }\n  }\n  function definitElements (type, depart, arrivee, leSens = true, num = 0) {\n    let texte, texteCorr, texteInteractif, axeSymetrie, nomDroite, nomCentreRotation, centreRotation, centreSymetrie, nomSegment\n    const sensProgression = (arrivee - depart === 6) ? 'Est' : (arrivee - depart === -6) ? 'Ouest' : (arrivee - depart === 1) ? 'Nord' : 'Sud'\n    switch (type) {\n      case 'symax': // vers l'est la droite est définie par arrivee et arrivee+1 sinon c'est arrivee et arrivee+6\n        switch (sensProgression) {\n          case 'Est' :\n            axeSymetrie = droite(noeuds[arrivee], noeuds[arrivee + 1])\n            nomDroite = '(' + noeuds[arrivee].nom + noeuds[arrivee + 1].nom + ')'\n            break\n          case 'Ouest' :\n            axeSymetrie = droite(noeuds[depart], noeuds[depart + 1])\n            nomDroite = '(' + noeuds[depart].nom + noeuds[depart + 1].nom + ')'\n            break\n          case 'Nord' :\n            axeSymetrie = droite(noeuds[arrivee], noeuds[arrivee + 6])\n            nomDroite = '(' + noeuds[arrivee].nom + noeuds[arrivee + 6].nom + ')'\n            break\n          case 'Sud' :\n            axeSymetrie = droite(noeuds[depart], noeuds[depart + 6])\n            nomDroite = '(' + noeuds[depart].nom + noeuds[depart + 6].nom + ')'\n            break\n        }\n        texteCorr = `La figure ${texteEnCouleurEtGras(depart, texcolors(num + 11))} a pour image la figure ${texteEnCouleurEtGras(arrivee, texcolors(num + 12))} par la symétrie d'axe $${nomDroite}$.`\n        texte = `La figure${sp(1)}...${sp(1)}a pour image la figure${sp(1)}\\\\ldots${sp(1)}par la symétrie d'axe $(${sp(1)}\\\\ldots${sp(1)})$`\n        texteInteractif = \"Une symétrie axiale dont l'axe passe par deux points du quadrillage.\"\n        return { texte: texte, texteCorr: texteCorr, texteInteractif: texteInteractif, type: type, axe: axeSymetrie }\n      case 'trans': // facile pour la translation : depart->arrivee\n        texteCorr = `La figure ${texteEnCouleurEtGras(depart, texcolors(num + 11))} a pour image la figure ${texteEnCouleurEtGras(arrivee, texcolors(num + 12))} par la translation transformant $${noeuds[depart].nom}$ en $${noeuds[arrivee].nom}$.`\n        texte = `La figure${sp(1)}...${sp(1)}a pour image la figure${sp(1)}\\\\ldots${sp(1)}par la translation transformant ${sp(1)}\\\\ldots${sp(1)} en ${sp(1)}\\\\ldots${sp(1)}`\n        texteInteractif = 'Une translation définie par deux points du quadrillage.'\n        return { texte: texte, texteCorr: texteCorr, texteInteractif: texteInteractif, type: type, vecteur: vecteur(noeuds[depart], noeuds[arrivee]) }\n      case 'rot90': // la position du centre dépend du sens de rotation et de départ et arrivee.\n        switch (sensProgression) {\n          case 'Est' :\n            centreRotation = leSens ? noeuds[arrivee + 1] : noeuds[arrivee]\n            nomCentreRotation = leSens ? noeuds[arrivee + 1].nom : noeuds[arrivee].nom\n            break\n          case 'Ouest' :\n            centreRotation = leSens ? noeuds[depart] : noeuds[depart + 1]\n            nomCentreRotation = leSens ? noeuds[depart].nom : noeuds[depart + 1].nom\n            break\n          case 'Nord' :\n            centreRotation = leSens ? noeuds[arrivee] : noeuds[arrivee + 6]\n            nomCentreRotation = leSens ? noeuds[arrivee].nom : noeuds[arrivee + 6].nom\n            break\n          case 'Sud' :\n            centreRotation = leSens ? noeuds[depart + 6] : noeuds[depart]\n            nomCentreRotation = leSens ? noeuds[depart + 6].nom : noeuds[depart].nom\n            break\n        }\n        texteCorr = `La figure ${texteEnCouleurEtGras(depart, texcolors(num + 11))} a pour image la figure ${texteEnCouleurEtGras(arrivee, texcolors(num + 12))} par la rotation de centre $${nomCentreRotation}$ d'angle $90\\\\degree$ dans le sens ${leSens ? \"contraire des aiguilles d'une montre\" : \"des aiguilles d'une montre\"}.`\n        texte = `La figure${sp(1)}...${sp(1)}a pour image la figure${sp(1)}\\\\ldots${sp(1)}par la rotation de centre ${sp(1)}\\\\ldots${sp(1)} d'angle $90\\\\degree$ dans le sens  ${leSens ? \"contraire des aiguilles d'une montre\" : \"des aiguilles d'une montre\"}`\n        texteInteractif = \"Une rotation d'angle 90° et dont le centre est un point du quadrillage.\"\n        return { texte: texte, texteCorr: texteCorr, texteInteractif: texteInteractif, type: type, centre: centreRotation, sens: leSens }\n      case 'rot180': // pas besoin du sens, mais le milieu choisit dépend de depart et arrivee\n        switch (sensProgression) {\n          case 'Est' :\n            centreSymetrie = milieu(noeuds[arrivee], noeuds[arrivee + 1])\n            nomSegment = '[' + noeuds[arrivee + 1].nom + noeuds[arrivee].nom + ']'\n            break\n          case 'Ouest' :\n            centreSymetrie = milieu(noeuds[depart], noeuds[depart + 1])\n            nomSegment = '[' + noeuds[depart + 1].nom + noeuds[depart].nom + ']'\n            break\n          case 'Nord' :\n            centreSymetrie = milieu(noeuds[arrivee], noeuds[arrivee + 6])\n            nomSegment = '[' + noeuds[arrivee + 6].nom + noeuds[arrivee].nom + ']'\n            break\n          case 'Sud' :\n            centreSymetrie = milieu(noeuds[depart], noeuds[depart + 6])\n            nomSegment = '[' + noeuds[depart + 6].nom + noeuds[depart].nom + ']'\n            break\n        }\n        texteCorr = `La figure ${texteEnCouleurEtGras(depart, texcolors(num + 11))} a pour image la figure ${texteEnCouleurEtGras(arrivee, texcolors(num + 12))} par la symétrie dont le centre est le milieu de $${nomSegment}$.`\n        texte = `La figure${sp(1)}...${sp(1)}a pour image la figure${sp(1)}\\\\ldots${sp(1)}par la symétrie dont le centre est le milieu de $[${sp(1)}\\\\ldots${sp(1)}]$`\n        texteInteractif = \"Une symétrie centrale dont le centre est un milieu d'un côté de case.\"\n        return { texte: texte, texteCorr: texteCorr, texteInteractif: texteInteractif, type: type, centre: centreSymetrie }\n    }\n  }\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    this.sup = contraindreValeur(1, 4, this.sup, 4)\n    if (this.sup === 1) typeDeTransfos = ['symax']\n    else if (this.sup === 2) typeDeTransfos = ['symax', 'rot180']\n    else if (this.sup === 3) typeDeTransfos = ['symax', 'trans', 'rot180']\n    else typeDeTransfos = ['symax', 'trans', 'rot90', 'rot180']\n    this.listeQuestions = []\n    this.listeCorrections = []\n    for (let i = 0, texte, texteCorr, paramsCorrection, paramsEnonce, nbTransfMin, nbTransfMax, nbVoisins, futursVoisinsPossibles, parcoursPossible, numeroFigure, chemin, objetsEnonce, objetsCorrection, polys, transfos, leurre0; i < this.nbQuestions; i++) {\n      this.autoCorrection[i] = {}\n      polys = []\n      transfos = []\n      polys[0] = homothetie(choice(motifs), A, 0.4)\n      leurre0 = translation(polys[0], vecteur(...choice([[0.4, 0], [0, 0.4], [0.4, 0.4]]))) // on translate aléatoirement le motif de départ pour faire le leurre\n      for (let x = 0; x < 5; x++) {\n        for (let y = 0, dalle, transfoAlea, elements; y < 5; y++) {\n          if (x + y > 0) {\n            dalle = x * 6 + y\n            transfoAlea = choice(typeDeTransfos)\n            if (y > 0) {\n              elements = definitElements(transfoAlea, dalle - 1, dalle, choice([true, false]))\n              polys[dalle] = transfoPoly(dalle === 1 ? leurre0 : polys[dalle - 1], elements)\n            } else {\n              elements = definitElements(transfoAlea, dalle - 6, dalle, choice([true, false]))\n              polys[dalle] = transfoPoly(dalle === 6 ? leurre0 : polys[dalle - 6], elements)\n            }\n          }\n        }\n      }\n\n      // Construction d'un chemin pour aller de la figure de départ à celle d'arrivée\n      chemin = []\n      this.sup2 = parseInt(this.sup2)\n      switch (this.sup2) {\n        case 1 :\n          nbTransfMin = 8\n          nbTransfMax = 10\n          break\n        case 2 :\n          nbTransfMin = 10\n          nbTransfMax = 12\n          break\n        case 3 :\n          nbTransfMin = 12\n          nbTransfMax = 14\n          break\n        case 4 :\n          nbTransfMin = 14\n          nbTransfMax = 16\n          break\n        case 5 :\n          nbTransfMin = 16\n          nbTransfMax = 18\n          break\n        default :\n          nbTransfMin = 8\n          nbTransfMax = 18\n          break\n      }\n      while (chemin.length < nbTransfMin || chemin.length > nbTransfMax) {\n        chemin = [0]\n        numeroFigure = 0\n        parcoursPossible = [numeroFigure - 6, numeroFigure - 1, numeroFigure + 1, numeroFigure + 6]\n\n        while (numeroFigure !== 28) {\n          parcoursPossible = [numeroFigure - 6, numeroFigure - 1, numeroFigure + 1, numeroFigure + 6]\n          if (mod(numeroFigure, 6) === 0) { // bord bas de la figure\n            enleveElement(parcoursPossible, numeroFigure - 6)\n            enleveElement(parcoursPossible, numeroFigure - 1)\n          } else if (mod(numeroFigure, 6) === 4) { // bord haut de la figure\n            enleveElement(parcoursPossible, numeroFigure - 6)\n            enleveElement(parcoursPossible, numeroFigure + 1)\n          } else if (mod(numeroFigure, 6) === 3) { // Avant-dernière ligne de la figure\n            enleveElement(parcoursPossible, numeroFigure - 6) // Interdiction d'aller à gauche sous peine de retour impossible\n          }\n          if (numeroFigure >= 24) { // bord droit de la figure\n            enleveElement(parcoursPossible, numeroFigure + 6)\n            enleveElement(parcoursPossible, numeroFigure - 1)\n          } else if (numeroFigure <= 4) { // bord gauche de la figure\n            enleveElement(parcoursPossible, numeroFigure - 6)\n            enleveElement(parcoursPossible, numeroFigure - 1)\n          } else if (numeroFigure <= 22 && numeroFigure >= 18) { // Avant-dernière colonne de la figure\n            enleveElement(parcoursPossible, numeroFigure - 1)// Interdiction d'aller en bas sous peine de retour impossible\n          }\n          numeroFigure = choice(parcoursPossible)\n          futursVoisinsPossibles = [numeroFigure - 6, numeroFigure - 1, numeroFigure + 1, numeroFigure + 6]\n          nbVoisins = 0\n          for (let kk = 0; kk < 4; kk++) {\n            nbVoisins = nbVoisins + compteOccurences(chemin, futursVoisinsPossibles[kk])\n          }\n          while (compteOccurences(chemin, numeroFigure) !== 0 || nbVoisins > 1) { // Il ne faut pas choisir une case qui soit voisine avec une case déjà choisie car sinon on pourrait avoir des raccourcis non désirés.\n            enleveElement(parcoursPossible, numeroFigure)\n            numeroFigure = choice(parcoursPossible)\n            futursVoisinsPossibles = [numeroFigure - 6, numeroFigure - 1, numeroFigure + 1, numeroFigure + 6]\n            nbVoisins = 0\n            for (let kk = 0; kk < 4; kk++) {\n              nbVoisins = nbVoisins + compteOccurences(chemin, futursVoisinsPossibles[kk])\n            }\n          }\n          chemin.push(numeroFigure)\n        }\n      }\n      for (let k = 0; k < chemin.length - 1; k++) {\n        transfos[k] = definitElements(choice(typeDeTransfos), chemin[k], chemin[k + 1], choice([true, false]), k)\n        polys[chemin[k + 1]] = transfoPoly(polys[chemin[k]], transfos[k])\n      }\n      objetsEnonce = []\n      objetsCorrection = []\n      texte = this.interactif\n        ? this.sup === 1\n          ? 'Compléter la liste des figures successives obtenues avec une suite de symétries axiales.<br>La liste commence par 0, finit par 28 et les numéros sont à séparer par des virgules.<br><br>'\n          : 'Compléter la liste des figures successives obtenues avec cette suite de transformations.<br>La liste commence par 0, finit par 28 et les numéros sont à séparer par des virgules.<br><br>'\n        : 'On passe de la figure $0$ à la figure $28$ en passant par des cases adjacentes, en suivant les transformations listées dans l\\'ordre précis des phrases ci-dessous qu\\'il faut compléter.<br><br>'\n      texteCorr = ''\n\n      for (let x = 0; x < 5; x++) {\n        for (let y = 0, numero; y < 5; y++) {\n          numero = texteParPointEchelle(Number(x * 6 + y).toString(), point(x * 3.2 + 1.6, y * 3.2 + 1.6), 'milieu', context.isHtml ? 'yellow' : 'black', 1.2, 'middle', true, 0.4)\n          numero.contour = context.isHtml\n          numero.couleurDeRemplissage = 'black'\n          numero.opacite = context.isHtml ? 0.5 : 1\n          numero.opaciteDeRemplissage = 1\n          maGrille.push(numero)\n          polys[x * 6 + y].opacite = 0.7\n          polys[x * 6 + y].color = 'blue'\n        }\n      }\n\n      polys[0].opaciteDeRemplissage = 0.7\n      polys[0].couleurDeRemplissage = texcolors(11)\n      polys[28].opaciteDeRemplissage = 0.7\n      polys[28].couleurDeRemplissage = texcolors(11 + (chemin.length - 1))\n      objetsEnonce.push(...polys)\n      objetsEnonce.push(...maGrille)\n\n      for (let x = 0; x < 6; x++) {\n        for (let y = 0, label; y < 6; y++) {\n          label = texteParPointEchelle(noeuds[x * 6 + y].nom, translation(noeuds[x * 6 + y], vecteur(0.3, 0.3)), 'milieu', context.isHtml ? 'red' : 'black', 1.2, 'middle', true, 0.4)\n          label.contour = context.isHtml\n          label.couleurDeRemplissage = 'black'\n          label.opacite = context.isHtml ? 0.8 : 1\n          label.opaciteDeRemplissage = 1\n          objetsEnonce.push(label)\n        }\n      }\n      if (this.sup === 1) { // cas des symétries axiales seules (une seule ligne par étape) plus de place pour la figure qui rétrécit en F° du nombre d'étapes.\n        paramsEnonce = { xmin: -0.5, ymin: -0.5, xmax: 17, ymax: 16.5, pixelsParCm: 20, scale: calcul(1.1 - chemin.length * 0.03125) }\n        paramsCorrection = { xmin: -0.5, ymin: -0.5, xmax: 17, ymax: 16.5, pixelsParCm: 20, scale: calcul(1 - chemin.length * 0.03125) }\n      } else { // à partir de la symétrie centrale, il peut y avoir 2 lignes par étapes, donc on rétrécit davantage la figure.\n        paramsEnonce = { xmin: -0.5, ymin: -0.5, xmax: 17, ymax: 16.5, pixelsParCm: 20, scale: calcul(1.2 - chemin.length * 0.05) }\n        paramsCorrection = { xmin: -0.5, ymin: -0.5, xmax: 17, ymax: 16.5, pixelsParCm: 20, scale: calcul(1.1 - chemin.length * 0.05) }\n      }\n      for (let k = 1, figure; k < chemin.length - 1; k++) {\n        figure = translation(polys[chemin[k]], vecteur(0, 0))\n        figure.color = texcolors(k + 11)\n        figure.couleurDeRemplissage = texcolors(k + 11)\n        figure.opaciteDeRemplissage = 0.6\n        objetsCorrection.push(figure)\n      }\n      objetsCorrection.push(...objetsEnonce)\n      for (let etape = 0; etape < chemin.length - 1; etape++) {\n        texte += (this.interactif && context.isHtml)\n          ? this.sup === 1\n            ? ''\n            : `$${miseEnEvidence(etape + 1 + ')' + sp(1))}$` + texteEnCouleur(transfos[etape].texteInteractif, etape % 2 === 0\n            ? 'black'\n            : 'brown') + '<br>'\n          : (etape === 0)\n              ? `$${miseEnEvidence(etape + 1 + ')' + sp(1))}$` + texteEnCouleur(transfos[0].texte + (this.sup3 ? ',' : '.') + '<br>', 'black')\n              : this.sup3\n                ? `$${miseEnEvidence(etape + 1 + ')' + sp(1))}$` + texteEnCouleur('qui' + transfos[etape].texte.substr(context.isHtml ? 17 : 13) + (etape === chemin.length - 2 ? '.' : ','), etape % 2 === 0 ? 'black' : 'brown') + '<br>'\n                : `$${miseEnEvidence(etape + 1 + ')' + sp(1))}$` + texteEnCouleur(transfos[etape].texte + '.', etape % 2 === 0 ? 'black' : 'brown') + '<br>'\n        texteCorr += transfos[etape].texteCorr + '<br>'\n      }\n      if (context.isHtml) {\n        texte += ajouteChampTexteMathLive(this, i, 'largeur75 inline')\n        texte = deuxColonnes(texte, mathalea2d(paramsEnonce, objetsEnonce), 50)\n        texteCorr = deuxColonnes(texteCorr, mathalea2d(paramsCorrection, objetsCorrection), 50)\n      } else {\n        texte += '\\n' + centrage(mathalea2d(paramsEnonce, objetsEnonce))\n        texteCorr += '\\n' + centrage(mathalea2d(paramsCorrection, objetsCorrection))\n      }\n      if (context.isAmc) {\n        this.autoCorrection = [\n          {\n            enonce: texte,\n            propositions: [\n              {\n                texte: texteCorr,\n                statut: 3,\n                feedback: '',\n                sanscadre: true\n              }\n            ]\n          }\n        ]\n      } else {\n        setReponse(this, i, chemin.toString(), { formatInteractif: 'texte' })\n      }\n      texte += context.isHtml ? '<br>' : '\\n\\\\newpage'\n      texteCorr += context.isHtml ? '<br>' : '\\n\\\\newpage'\n\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Types de transformations possibles', 4, '1 : Symétries axiales seulement\\n2 : Symétries axiales et centrales\\n3 : Symétries et translations\\n4 : Symétries, translations et quarts de tour']\n  this.besoinFormulaire2Numerique = ['Nombre de transformations entre le départ et l\\'arrivée', 6, '1 : 8\\n2 : 10\\n3 : 12\\n4 : 14\\n5 : 16\\n6 : Entre 8 et 16']\n  this.besoinFormulaire3CaseACocher = ['Énoncés raccourcis', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","dateDePublication","SerieDeTransformations","Exercice","this","nbQuestions","spacing","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","A","point","typeDeTransfos","sup","sup2","sup3","motifs","polygone","noeuds","maGrille","labels","push","grille","i","segment","j","lettreDepuisChiffre","tracePoint","transfoPoly","pol","type","centre","axe","vecteur","angle","sens","symetrieAxiale","translation","rotation","definitElements","depart","arrivee","leSens","num","texte","texteCorr","texteInteractif","axeSymetrie","nomDroite","nomCentreRotation","centreRotation","centreSymetrie","nomSegment","sensProgression","droite","nom","texteEnCouleurEtGras","texcolors","sp","milieu","nouvelleVersion","autoCorrection","contraindreValeur","listeQuestions","listeCorrections","paramsCorrection","paramsEnonce","nbTransfMin","nbTransfMax","nbVoisins","futursVoisinsPossibles","parcoursPossible","numeroFigure","chemin","objetsEnonce","objetsCorrection","polys","transfos","leurre0","homothetie","choice","x","dalle","transfoAlea","elements","y","parseInt","length","mod","enleveElement","kk","compteOccurences","k","interactif","numero","texteParPointEchelle","Number","toString","context","contour","couleurDeRemplissage","opacite","opaciteDeRemplissage","color","label","xmin","ymin","xmax","ymax","pixelsParCm","scale","calcul","figure","etape","miseEnEvidence","texteEnCouleur","substr","ajouteChampTexteMathLive","deuxColonnes","mathalea2d","centrage","enonce","propositions","statut","feedback","sanscadre","setReponse","formatInteractif","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3CaseACocher","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","indexOf"],"sourceRoot":""}