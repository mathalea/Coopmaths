{"version":3,"file":"js/21358.77f198d9e60d9d9aac80.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/beta3S20-1.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { polygone, segment, ObjetMathalea2D, texteParPoint, point, mathalea2d, texteParPosition } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nimport { decompositionFacteursPremiers, listeEntiersSommeConnue, choice, randint, listeQuestionsToContenu, combinaisonListes } from '../../modules/outils.js'\nimport { multiply, divide, matrix, isPrime, sum, ceil, gcd, fraction, round, max } from 'mathjs'\nexport const titre = 'Calculs de probabilités'\n\n// Les exports suivants sont optionnels mais au moins la date de publication semble essentielle\nexport const dateDePublication = '12/12/2021' // La date de publication initiale au format 'jj/mm/aaaa' pour affichage temporaire d'un tag\n\nfunction fixeBordures (objets, { rxmin = undefined, rymin = undefined, rxmax = undefined, rymax = undefined, rzoom = 1 } = {}) {\n  rxmin = rxmin !== undefined ? rxmin : -1\n  rymin = rymin !== undefined ? rymin : -1\n  rxmax = rxmax !== undefined ? rxmax : 1\n  rymax = rymax !== undefined ? rymax : 1\n  let xmin = 0; let ymin = 0; let xmax = 0; let ymax = 0\n  for (const objet of objets) {\n    xmin = Math.min(xmin, objet.x + rxmin || 0)\n    xmax = Math.max(xmax, objet.x + rxmax || 0)\n    ymin = Math.min(ymin, objet.y + rymin || 0)\n    ymax = Math.max(ymax, objet.y + rymax || 0)\n    if (typeof objet.bordure !== 'undefined') {\n      if (typeof objet.bordure[Symbol.iterator] === 'function') {\n        for (const obj of objet.bordure) {\n          xmin = Math.min(xmin, obj.x + rxmin || 0)\n          xmax = Math.max(xmax, obj.x + rxmax || 0)\n          ymin = Math.min(ymin, obj.y + rymin || 0)\n          ymax = Math.max(ymax, obj.y + rymax || 0)\n        }\n      } else {\n        xmin = Math.min(xmin, objet.bordure.x + rxmin || 0)\n        xmax = Math.max(xmax, objet.bordure.x + rxmax || 0)\n        ymin = Math.min(ymin, objet.bordure.y + rymin || 0)\n        ymax = Math.max(ymax, objet.bordure.y + rymax || 0)\n      }\n    }\n  }\n  return { xmin: xmin * rzoom, xmax: xmax * rzoom, ymin: ymin * rzoom, ymax: ymax * rzoom }\n}\n\nfunction TraceBarre (x, y, legende = '', { epaisseur = 0.6, couleurDeRemplissage = 'blue', color = 'black', opaciteDeRemplissage = 0.3, angle = 66, unite = 1, hachures = false } = {}) {\n  ObjetMathalea2D.call(this)\n  this.bordure = [point(x - epaisseur / 2, 0), point(x - epaisseur / 2, y * unite), point(x + epaisseur / 2, y * unite), point(x + epaisseur / 2, 0)]\n  this.bordures = [x - epaisseur / 2, 0, x + epaisseur / 2, y * unite]\n  const p = polygone(...this.bordure)\n  p.couleurDeRemplissage = couleurDeRemplissage\n  p.opaciteDeRemplissage = opaciteDeRemplissage\n  p.color = color\n  if (hachures) {\n    p.hachures = hachures\n  }\n  const texte = texteParPosition(legende, x, -0.2, angle, 'black', 1, 'gauche')\n\n  this.tikz = function () {\n    return p.tikz() + '\\n' + texte.tikz()\n  }\n  this.svg = function (coeff) {\n    return p.svg(coeff) + '\\n' + texte.svg(coeff)\n  }\n}\n\nfunction traceBarre (...args) {\n  return new TraceBarre(...args)\n}\n\nfunction num (nb) {\n  return Intl.NumberFormat('fr-FR', { maximumFractionDigits: 20 }).format(nb).toString().replace(/\\s+/g, '\\\\thickspace ').replace(',', '{,}')\n}\n\nfunction numberFormat (nb) {\n  return Intl.NumberFormat('fr-FR', { maximumFractionDigits: 20 }).format(nb).toString().replace(/\\s+/g, '\\\\thickspace ')\n}\n\nfunction fraction2Tex (fraction) {\n  const signe = fraction.s === 1 ? '' : '-'\n  return fraction.d !== 1 ? String.raw`${signe}\\dfrac{${num(fraction.n)}}{${num(fraction.d)}}` : String.raw`${signe}${num(fraction.n)}`\n}\n/*\nfunction fixeBordures (objets, { rxmin = undefined, rymin = undefined, rxmax = undefined, rymax = undefined, rzoom = 1 } = {}) {\n  rxmin = rxmin !== undefined ? rxmin : -1\n  rymin = rymin !== undefined ? rymin : -1\n  rxmax = rxmax !== undefined ? rxmax : 1\n  rymax = rymax !== undefined ? rymax : 1\n  let xmin = 0; let ymin = 0; let xmax = 0; let ymax = 0\n  for (const objet of objets) {\n    xmin = Math.min(xmin, objet.x + rxmin || 0)\n    xmax = Math.max(xmax, objet.x + rxmax || 0)\n    ymin = Math.min(ymin, objet.y + rymin || 0)\n    ymax = Math.max(ymax, objet.y + rymax || 0)\n    if (typeof objet.bordure !== 'undefined') {\n      if (typeof objet.bordure[Symbol.iterator] === 'function') {\n        for (const obj of objet.bordure) {\n          xmin = Math.min(xmin, obj.x + rxmin || 0)\n          xmax = Math.max(xmax, obj.x + rxmax || 0)\n          ymin = Math.min(ymin, obj.y + rymin || 0)\n          ymax = Math.max(ymax, obj.y + rymax || 0)\n        }\n      } else {\n        xmin = Math.min(xmin, objet.bordure.x + rxmin || 0)\n        xmax = Math.max(xmax, objet.bordure.x + rxmax || 0)\n        ymin = Math.min(ymin, objet.bordure.y + rymin || 0)\n        ymax = Math.max(ymax, objet.bordure.y + rymax || 0)\n      }\n    }\n  }\n  return { xmin: xmin * rzoom, xmax: xmax * rzoom, ymin: ymin * rzoom, ymax: ymax * rzoom }\n}\n*/\nfunction Axes (\n  xmin = -30,\n  ymin = -30,\n  xmax = 30,\n  ymax = 30,\n  thick = 0.2,\n  xstep = 1,\n  ystep = 1,\n  epaisseur = 2,\n  color = 'black',\n  ytick = ystep,\n  titre = ''\n) {\n  ObjetMathalea2D.call(this)\n  const objets = []\n  objets.push(texteParPoint(titre, point(xmin - thick - 0.1, ymax), 'gauche', color))\n  const ordonnee = segment(-1, ymin, -1, ymax)\n  ordonnee.styleExtremites = '->'\n  ordonnee.epaisseur = epaisseur\n  objets.push(ordonnee)\n  ordonnee.color = color\n  for (let y = ymin; y < ymax; y = fraction(y).add(ystep)) {\n    const s = segment(xmin - thick, y, xmin, y)\n    s.epaisseur = epaisseur\n    s.color = color\n    objets.push(s)\n  }\n  for (let y = ymin; y < ymax; y = fraction(y).add(ystep.div(ytick))) {\n    const s = segment(xmin - thick / 2, y, xmin, y)\n    s.epaisseur = epaisseur\n    s.color = color\n    objets.push(s)\n  }\n  this.svg = function (coeff) {\n    let code = ''\n    for (const objet of objets) {\n      code += '\\n\\t' + objet.svg(coeff)\n    }\n    return code\n  }\n  this.tikz = function () {\n    let code = ''\n    for (const objet of objets) {\n      code += '\\n\\t' + objet.tikz()\n    }\n    return code\n  }\n  this.commentaire = `Axes(xmin = ${xmin}, ymin = ${ymin}, xmax = ${xmax}, ymax = ${ymax}, thick = ${thick})`\n}\n\nfunction axes (...args) {\n  return new Axes(...args)\n}\n\nfunction LabelY (\n  ymin = 1,\n  ymax = 20,\n  step = 1,\n  color = 'black',\n  pos = -0.6,\n  coeff = 1\n) {\n  ObjetMathalea2D.call(this)\n  const objets = []\n  for (let y = ceil(fraction(ymin, coeff));\n    y.mul(coeff) <= ymax;\n    y = y.add(step)\n  ) {\n    objets.push(\n      texteParPoint(\n        y.mul(coeff),\n        point(pos, y),\n        'gauche',\n        color\n      )\n    )\n  }\n  this.svg = function (coeff) {\n    let code = ''\n    for (const objet of objets) {\n      code += '\\n\\t' + objet.svg(coeff)\n    }\n    return code\n  }\n  this.tikz = function () {\n    let code = ''\n    for (const objet of objets) {\n      code += '\\n\\t' + objet.tikz()\n    }\n    return code\n  }\n  this.commentaire = `labelX(ymin=${ymin},ymax=${ymax},step=${step},color=${color},pos=${pos})`\n}\n\nfunction labelY (...args) {\n  return new LabelY(...args)\n}\n\nfunction diagrammeBarres (hauteursBarres, etiquettes, { reperageTraitPointille = false, couleurDeRemplissage = 'blue', titreAxeVertical = '', titre = '', hauteurDiagramme = 5, coeff = 2, axeVertical = false, etiquetteValeur = true, labelAxeVert = false } = {}) {\n  const diagramme = []\n  for (let j = 0; j < hauteursBarres.length; j++) {\n    const abscisseBarre = j * coeff\n    const hauteurBarre = hauteursBarres[j] * hauteurDiagramme / max(hauteursBarres)\n    diagramme.push(traceBarre(abscisseBarre, hauteurBarre, etiquettes[j], { couleurDeRemplissage: couleurDeRemplissage }))\n    if (reperageTraitPointille) {\n      const ligne = segment(-1, hauteurBarre, abscisseBarre, hauteurBarre)\n      ligne.pointilles = true\n      ligne.epaisseur = 0.2\n      diagramme.push(ligne)\n    }\n    diagramme.push(texteParPoint(numberFormat(hauteursBarres[j]), point(abscisseBarre, hauteurBarre + 0.3)))\n    // Calculs permettant de graduer l'axe vertical et de placer des valeurs\n    const steps = [1, 2, 5, 10, 20]\n    const yticks = [1, 2, 5, 5, 5]\n    let istep = 1\n    let step = 1\n    let ytick = 1\n    while (max(hauteursBarres) / step > 5 && istep < 5) {\n      istep += 1\n      step = steps[istep - 1]\n      ytick = yticks[istep - 1]\n    }\n    if (istep === 5) istep = 2\n    while (max(hauteursBarres) / step > 5) {\n      istep = istep + 1\n      step = istep * 10\n      ytick = 5\n    }\n    if (labelAxeVert) diagramme.push(labelY(0, max(hauteursBarres), fraction(hauteurDiagramme, max(hauteursBarres)).mul(step), 'black', -1.3, max(hauteursBarres) / hauteurDiagramme))\n    if (axeVertical) diagramme.push(axes(-1, 0, abscisseBarre, hauteurDiagramme + 1, 0.2, abscisseBarre, fraction(hauteurDiagramme, max(hauteursBarres)).mul(step), 0.2, 'black', ytick, titreAxeVertical))\n  }\n  if (titre !== '') diagramme.push(texteParPoint(titre, point((hauteursBarres.length - 1) * coeff / 2, hauteurDiagramme + 1)))\n  return mathalea2d(Object.assign({}, fixeBordures(diagramme, { rxmin: -3, rymin: -2, rymax: 1.5 }), { style: 'inline', scale: 1 }), ...diagramme)\n}\n\nfunction listeExhaustive (univers, ratios) {\n  // On créé une liste exhaustive avec répétition de chaque issue\n  // [blanche blanche blanche noire noire] pour un ratio 3:2 de billes blanches et noires\n  const issues = []\n  for (let j = 0; j < univers.length; j++) {\n    if (ratios[j] > 1) {\n      issues.push(...combinaisonListes([univers[j]], ratios[j]))\n    } else {\n      issues.push(univers[j])\n    }\n  }\n  const issuesAbregees = []\n  for (let j = 0; j < issues.length; j++) {\n    issuesAbregees.push(issues[j][0].toUpperCase())\n  }\n  return { issues: issues, issuesAbregees: issuesAbregees }\n}\n\nfunction simulationExperienceAlaetoire (univers, ratios, nbEssais) {\n  const issues = listeExhaustive(univers, ratios).issues\n  const effectifs = []\n  const realisees = []\n  for (let j = 0; j < nbEssais; j++) {\n    const issue = issues[randint(0, issues.length - 1)] // On choisit une issue dans la liste [blanche blanche blanche noire noire]\n    const refIssue = univers.indexOf(issue) // On trouve sa position dans l'urne qui va être la référence dans realisees\n    if (realisees.indexOf(refIssue) !== -1) { // On teste si cette référence à cette issue existe dans les issues réalisées\n      effectifs[realisees.indexOf(refIssue)] += 1 // Si c'est le cas on ajoute 1\n    } else {\n      realisees.push(refIssue) // Sinon on ajoute la référénce aux issues réalisées\n      effectifs.push(1) // L'effectif de cette référence passe à 1\n    }\n  }\n  // Calcul des fréquences sous forme d'une fraction mathjs\n  const frequences = []\n  for (let j = 0; j < realisees.length; j++) {\n    frequences.push(fraction(effectifs[j], nbEssais))\n  }\n  return { effectifs: effectifs, frequences: frequences, realisees: realisees }\n}\n\nfunction etapesSimplificationFraction (n = 21, d = 45, A = undefined, methode = 0, aligned = false) {\n  let etapes = []\n  const p = gcd(n, d)\n  let netapes = 0\n  switch (methode) {\n    case 0:\n      etapes.push(String.raw`\\dfrac{${n / p}\\times${p}}{${d / p}\\times${p}}`)\n      if (p > 1) {\n        etapes.push(String.raw`\\dfrac{${n / p}}{${d / p}}`)\n        netapes += 1\n      }\n      if (A === undefined) {\n        etapes = etapes.join('=')\n        etapes = '$' + etapes + '$'\n      } else if (A === '' && netapes > 0) {\n        if (aligned) {\n          etapes = etapes.join('\\\\\\\\&=')\n          etapes = String.raw`\n          <br>\n          $\\begin{aligned}\n          \\dfrac{${n}}{${d}}&=${etapes}\n          \\end{aligned}$\n          <br>\n          `\n        } else {\n          etapes = String.raw`$\\dfrac{${n}}{${d}}=${etapes.join('=')}$`\n        }\n      } else if (netapes > 0) {\n        if (aligned) {\n          etapes = etapes.join('\\\\\\\\&=')\n          etapes = String.raw`\n          <br>\n          $\\begin{aligned}\n          ${A}&=${etapes}\n          \\end{aligned}$\n          <br>\n          `\n        } else {\n          etapes = String.raw`$${A}=${etapes.join('=')}$`\n        }\n      } else {\n        etapes = '<br>'\n      }\n      break\n    case 1: // Pas de aligned, pas de détails\n      if (netapes > 0) {\n        if (A === undefined) { // Pour une sortie inline\n          etapes = String.raw`$\\dfrac{${n / p}}{${d / p}}$`\n        } else if (A === '') {\n          etapes = String.raw`\n          <br>\n          $\\dfrac{${n}}{${p}} = \\dfrac{${n / p}}{${d / p}}$\n          <br>\n          `\n        } else {\n          etapes = String.raw`\n          <br>\n          $${A} = \\dfrac{${n / p}}{${d / p}}$\n          <br>\n          `\n        }\n      } else {\n        etapes = '<br>'\n      }\n      break\n  }\n  return etapes\n}\n\nfunction diagrammeCalculsFrequences (typeReponseAttendue = 0) {\n  const urne = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, randint(2, 3))\n  let totalRatios = urne.length + randint(1, 15)\n  const ratios = listeEntiersSommeConnue(urne.length, totalRatios, 1) // On choisit au hasard les ratios\n  if (gcd(...ratios) !== 1) {\n    for (let j = 0; j < urne.length; j++) {\n      ratios[j] = ratios[j] / gcd(...ratios)\n    }\n    totalRatios = sum(ratios)\n  }\n  const nbEssais = totalRatios * randint(1, 9)\n  const experience = simulationExperienceAlaetoire(urne, ratios, nbEssais)\n  const issuesReordonnees = []\n  for (let j = 0; j < experience.realisees.length; j++) {\n    issuesReordonnees.push(urne[experience.realisees[j]])\n  }\n  const diagrammeEffectifs = diagrammeBarres(experience.effectifs, issuesReordonnees, { axeVertical: true, titreAxeVertical: 'Effectifs' })\n  const choixRef = choice(experience.realisees) // Choix d'une référence\n  const posRef = experience.realisees.indexOf(choixRef) // Position de la référence dans realises\n  const choixIssue = urne[choixRef] // Issue correspondante à ce choix (les billes dans l'urne ne sont listées dans le même ordre)\n  const remarque = [\n    '$\\\\textit{* On donnera la valeur exacte et simplifiée.}$',\n    '$\\\\textit{* On donnera une valeur décimale arrondie au millième (si nécessaire).}$',\n    '$\\\\textit{* On donnera un pourcentage arrondi à l\\'unité (si nécessaire).}$'\n  ][typeReponseAttendue]\n  let solution\n  let environ = ''\n  switch (typeReponseAttendue) {\n    case 0:\n      solution = {\n        calculs: `${etapesSimplificationFraction(experience.effectifs[posRef], nbEssais, '', 0, true)}`,\n        reponse: `$${fraction2Tex(experience.frequences[posRef], true)}$`\n      }\n      break\n    case 1: {\n      let approchee = fraction(round(experience.frequences[posRef].valueOf(), 3))\n      environ = approchee - fraction(experience.effectifs[posRef], nbEssais) === 0 ? '' : 'environ'\n      approchee = num(approchee)\n      const approx = (environ === 'environ') ? '\\\\approx' : '='\n      solution = {\n        calculs: String.raw`<br>$\\dfrac{${experience.effectifs[posRef]}}{${nbEssais}}${approx}${approchee}$<br>`,\n        reponse: `$${approchee}$`\n      }\n      break\n    }\n    case 2: {\n      let approchee = fraction(round(experience.frequences[posRef].valueOf(), 2))\n      environ = approchee - fraction(experience.effectifs[posRef], nbEssais) === 0 ? '' : 'environ'\n      approchee = { decimal: num(approchee), pourcentage: num(approchee.mul(100)) }\n      const approx = (environ === 'environ') ? '\\\\approx' : '='\n      solution = {\n        calculs: String.raw`<br>$\\dfrac{${experience.effectifs[posRef]}}{${nbEssais}}${approx}${approchee.decimal}$<br>`,\n        reponse: `$${approchee.pourcentage}~\\\\%$`\n      }\n      break\n    }\n  }\n  const texte = String.raw`Une urne contient des billes de différentes couleurs.\n          <br>        \n          L'expérience consiste à tirer une bille au hasard,\n          à noter sa couleur, puis à la remettre dans l'urne.\n          <br>\n          On obtient le diagramme des effectifs ci-dessous\n          ` +// au bout de $${nbEssais}$ tirages.\n          String.raw`<br>\n          ${diagrammeEffectifs}\n          <br>\n          Calculer la fréquence d'apparition de la couleur ${choixIssue}$\\textit{*}$.\n          <br>\n          ${remarque}\n          `\n  const texteCorr = String.raw`\n          La fréquence d'apparition d'une couleur est le quotient\n          du nombre d'apparitions de cette couleur par le nombre total d'essais.\n          <br>\n          $${experience.effectifs.join('+')}=${nbEssais}$\n          <br>\n          Donc il y a eu $${nbEssais}$ essais.\n          <br>\n          La bille de couleur ${choixIssue} est apparue\n          $${experience.effectifs[posRef]}$ fois sur $${nbEssais}$ tirages.\n          ${solution.calculs}\n          Donc la fréquence d'apparition de la couleur ${choixIssue} est ${environ} ${solution.reponse}.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction ratiosCalculsProbabilites () {\n  const urne = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, randint(2, 3))\n  let totalRatios = urne.length + randint(1, 15)\n  const ratios = listeEntiersSommeConnue(urne.length, totalRatios, 1) // On choisi au hasard les ratios\n  if (gcd(...ratios) !== 1) {\n    for (let j = 0; j < urne.length; j++) {\n      ratios[j] = ratios[j] / gcd(...ratios)\n    }\n    totalRatios = sum(ratios)\n  }\n  const choixRef = randint(1, urne.length) - 1 // Choix d'une référence\n  const choixIssue = urne[choixRef] // Issue correspondante à ce choix (les billes dans l'urne ne sont listées dans le même ordre)\n  const choixRatio = ratios[choixRef]\n  const plurielsIssues = []\n  for (const issue of urne) {\n    plurielsIssues.push(issue + 's')\n  }\n  const solution = {\n    calculs: `${etapesSimplificationFraction(choixRatio, sum(ratios), '', 0, true)}`,\n    reponse: `$${fraction2Tex(fraction(choixRatio, sum(ratios)))}$`\n  }\n  const texte = `Une urne contient des billes de couleurs différentes : des \n          ${plurielsIssues.slice(0, plurielsIssues.length - 1).join(', des ')}\n          et des ${plurielsIssues[plurielsIssues.length - 1]}\n          dans le ratio $${ratios.join('{:}')}$.\n          <br>\n          L'expérience consiste à tirer une bille au hasard et\n          à noter sa couleur.\n          <br>\n          Calculer la probabilité d'obtenir une bille de couleur ${choixIssue}.`\n  const texteCorr = String.raw`\n          Comme $${ratios.join('+')}=${sum(ratios)}$, la proportion de billes ${choixIssue}s est $\\dfrac{${choixRatio}}{${sum(ratios)}}$.\n          ${solution.calculs}\n          Donc la probabilité d'obtenir une bille de couleur ${choixIssue} est ${solution.reponse}.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction probabilitesCalculsRatios () {\n  const urne = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, 3)\n  let ratios = []\n  let compteurSimplifications = []\n  let simplifications = []\n  let totalRatios = 0\n  while (isPrime(totalRatios) || totalRatios === 0 || compteurSimplifications.length < 3) {\n    compteurSimplifications = []\n    simplifications = []\n    totalRatios = urne.length + randint(1, 45)\n    ratios = listeEntiersSommeConnue(urne.length, totalRatios, 1) // On choisit au hasard les ratios\n    // On simplifie le ratio\n    if (gcd(...ratios) !== 1) {\n      for (let j = 0; j < urne.length; j++) {\n        ratios[j] = ratios[j] / gcd(...ratios)\n      }\n      totalRatios = sum(ratios)\n    }\n    for (let j = 0; j < ratios.length; j++) {\n      if (fraction(ratios[j], sum(ratios)).d !== sum(ratios)) {\n        simplifications.push(String.raw`$${fraction2Tex(fraction(ratios[j], sum(ratios)))} = \\dfrac{${ratios[j]}}{${sum(ratios)}}$`)\n      } else {\n        simplifications.push(String.raw`$${fraction2Tex(fraction(ratios[j], sum(ratios)))}$`)\n      }\n      if (compteurSimplifications.indexOf(fraction(ratios[j], sum(ratios)).d) === -1) compteurSimplifications.push(fraction(ratios[j], sum(ratios)).d)\n    }\n  }\n  // Pluriels\n  const plurielsIssues = []\n  for (const issue of urne) {\n    plurielsIssues.push(issue + 's')\n  }\n  const probabilites = []\n  for (let j = 0; j < urne.length; j++) {\n    probabilites.push(`$${fraction2Tex(fraction(ratios[j], sum(ratios)))}$`)\n  }\n  const texte = `Une urne contient des billes de couleurs différentes : des\n          ${plurielsIssues.slice(0, plurielsIssues.length - 1).join(', des ')}\n          et des ${plurielsIssues[plurielsIssues.length - 1]}.\n          <br>\n          L'expérience consiste à tirer une bille au hasard et\n          à noter sa couleur.\n          <br>\n          Les probabilités respectives de chaque couleur sont ${probabilites.slice(0, probabilites.length - 1).join(', ')}\n          et ${probabilites[probabilites.length - 1]}.\n          <br>\n          Dans quel ratio les couleurs sont-elles ?`\n  const texteCorr = String.raw`\n          Écrivons toutes les probabilités avec le même dénominateur.\n          <br>\n          ${simplifications.join(' ; ')}\n          <br>\n          Donc les couleurs ${plurielsIssues.slice(0, plurielsIssues.length - 1).join(', ')}\n          et ${plurielsIssues[plurielsIssues.length - 1]}\n          sont dans le ratio $${ratios.join('{:}')}$.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction ratios2EpreuvesCalculsProbabilites () {\n  const urne = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, randint(2, 3))\n  let totalRatios = urne.length + randint(0, 3)\n  const ratios = listeEntiersSommeConnue(urne.length, totalRatios, 1) // On choisi au hasard les ratios\n  if (gcd(...ratios) !== 1) {\n    for (let j = 0; j < urne.length; j++) {\n      ratios[j] = ratios[j] / gcd(...ratios)\n    }\n    totalRatios = sum(ratios)\n  }\n  const issues = listeExhaustive(urne, ratios)\n  const choixRef = [randint(1, urne.length) - 1, randint(1, urne.length) - 1] // Choix d'une référence\n  const choixIssue = [urne[choixRef[0]], urne[choixRef[1]]] // Issue correspondante à ce choix (les billes dans l'urne ne sont listées dans le même ordre)\n  const evenement = choixIssue[0] === choixIssue[1]\n    ? `Obtenir deux billes de couleurs ${choixIssue[1]}s`\n    : `Obtenir une bille de couleur ${choixIssue[0]}\n          et une bille de couleur ${choixIssue[1]}`\n  const choixRatio = [ratios[choixRef[0]], ratios[choixRef[1]]]\n  const plurielsIssues = []\n  for (const issue of urne) {\n    plurielsIssues.push(issue + 's')\n  }\n  const probabilites = []\n  for (let j = 0; j < urne.length; j++) {\n    probabilites.push(`$${fraction2Tex(fraction(ratios[j], sum(ratios)))}$`)\n  }\n  const texte = `Une urne contient des billes de couleurs différentes : des \n          ${plurielsIssues.slice(0, plurielsIssues.length - 1).join(', des ')}\n          et des ${plurielsIssues[plurielsIssues.length - 1]}\n          dans le ratio $${ratios.join('{:}')}$.\n          <br>\n          L'expérience consiste à tirer une bille au hasard,\n          à noter sa couleur, à la replacer dans l'urne,\n          puis à recommencer une seconde fois.\n          <br>\n          Quelle est la probabilité de l'événement \"${evenement}\" ?\n          `\n  let lignes = [`\\\\hline &${issues.issuesAbregees.join('&')}\\\\\\\\`]\n  for (let j = 0; j < issues.issues.length; j++) {\n    lignes.push(`\\\\hline ${issues.issuesAbregees[j]}`)\n    for (let k = 0; k < issues.issues.length; k++) {\n      lignes.push(`&(${issues.issuesAbregees[j]}{;}${issues.issuesAbregees[k]})`)\n    }\n    lignes.push('\\\\\\\\')\n  }\n  lignes = lignes.join('')\n  const corrProba = choixIssue[0] === choixIssue[1] ? 1 : 2\n  const issuesquirealisent = choixRatio[0] * choixRatio[1] * corrProba === 1 ? 'issue qui réalise' : 'issues qui réalisent'\n  const solution = {\n    calculs: `${etapesSimplificationFraction(choixRatio[0] * choixRatio[1] * corrProba, issues.issues.length ** 2, '', 0, true)}`,\n    reponse: `$${fraction2Tex(fraction(choixRatio[0] * choixRatio[1] * corrProba, issues.issues.length ** 2), true)}$`\n  }\n  const texteCorr = String.raw`\n          Listons dans un tableau à double entrée toutes les issues\n          de cette expérience.\n          <br>\n          $\n          \\begin{array}{${listeExhaustive(['|c'], [issues.issues.length + 1]).issues.join('')}|}\n          ${lignes}\n          \\hline\n          \\end{array}\n          $\n          <br>\n          Il y a $${issues.issues.length ** 2}$ issues au total\n          et toutes ont la même probabilité d'être obtenue.\n          <br>\n          Il y a $${choixRatio[0] * choixRatio[1] * corrProba}$ ${issuesquirealisent} l'événement \"${evenement}\".\n          ${solution.calculs}\n          Donc la probabilité de cet événement est ${solution.reponse}.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction ratioPiece2EpreuvesCalculsProbabilites () {\n  const urne1 = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, randint(2, 3))\n  const urne2 = combinaisonListes(['Pile', 'Face']).slice(0, 2)\n  let totalRatios1 = urne1.length + randint(0, 3)\n  const totalRatios2 = urne2.length\n  const ratios1 = listeEntiersSommeConnue(urne1.length, totalRatios1, 1) // On choisi au hasard les ratios\n  const ratios2 = listeEntiersSommeConnue(urne2.length, totalRatios2, 1) // On choisi au hasard les ratios\n  if (gcd(...ratios1) !== 1) {\n    for (let j = 0; j < urne1.length; j++) {\n      ratios1[j] = ratios1[j] / gcd(...ratios1)\n    }\n    totalRatios1 = sum(ratios1)\n  }\n  const issues1 = listeExhaustive(urne1, ratios1)\n  const issues2 = listeExhaustive(urne2, ratios2)\n  const choixRef = [randint(1, urne1.length) - 1, randint(1, urne2.length) - 1] // Choix d'une référence\n  const choixIssue = [urne1[choixRef[0]], urne2[choixRef[1]]] // Issue correspondante à ce choix (les billes dans l'urne ne sont listées dans le même ordre)\n  const evenement = `Obtenir une bille de couleur ${choixIssue[0]} avec l'urne et obtenir ${choixIssue[1]} avec la pièce`\n  const choixRatio = [ratios1[choixRef[0]], 1]\n  const plurielsIssues = []\n  for (const issue of urne1) {\n    plurielsIssues.push(issue + 's')\n  }\n  const texte = `Une urne contient des billes de couleurs différentes : des\n          ${plurielsIssues.slice(0, plurielsIssues.length - 1).join(', des ')}\n          et des ${plurielsIssues[plurielsIssues.length - 1]}\n          dans le ratio $${ratios1.join('{:}')}$.\n          <br>\n          L'expérience consiste à tirer une bille au hasard,\n          à noter sa couleur, à lancer une pièce de monnaie équilibrée\n          puis à noter la face du dessus.\n          <br>\n          Quelle est la probabilité de l'événement \"${evenement}\" ?\n          `\n  let lignes = [`\\\\hline &${issues1.issuesAbregees.join('&')}\\\\\\\\`]\n  for (let j = 0; j < issues2.issues.length; j++) {\n    lignes.push(`\\\\hline ${issues2.issuesAbregees[j]}`)\n    for (let k = 0; k < issues1.issues.length; k++) {\n      lignes.push(`&(${issues2.issuesAbregees[j]}{;}${issues1.issuesAbregees[k]})`)\n    }\n    lignes.push('\\\\\\\\')\n  }\n  lignes = lignes.join('')\n  const issuesquirealisent = choixRatio[0] * choixRatio[1] === 1 ? 'issue qui réalise' : 'issues qui réalisent'\n  const solution = {\n    calculs: `${etapesSimplificationFraction(choixRatio[0] * choixRatio[1], issues1.issues.length * issues2.issues.length, '', 0, true)}`,\n    reponse: `$${fraction2Tex(fraction(choixRatio[0] * choixRatio[1], issues1.issues.length * issues2.issues.length), true)}$`\n  }\n  const texteCorr = String.raw`\n          Listons dans un tableau à double entrée toutes les issues\n          de cette expérience.\n          <br>\n          $\n          \\begin{array}{${listeExhaustive(['|c'], [issues1.issues.length + 1]).issues.join('')}|}\n          ${lignes}\n          \\hline\n          \\end{array}\n          $\n          <br>\n          Il y a $${issues1.issues.length * issues2.issues.length}$ issues au total\n          et toutes ont la même probabilité d'être obtenue.\n          <br>\n          Il y a $${choixRatio[0] * choixRatio[1]}$ ${issuesquirealisent} l'événement \"${evenement}\".\n          ${solution.calculs}\n          Donc la probabilité de cet événement est ${solution.reponse}.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction diagrammeEffectifsCalculsLoiGrandNombre () {\n  const urne = combinaisonListes(['jaune', 'verte', 'bleue', 'rouge', 'noire']).slice(0, 4)\n  let totalRatios = urne.length + randint(100, 350)\n  const ratios = listeEntiersSommeConnue(urne.length, totalRatios, round(totalRatios / 10)) // On choisit au hasard les ratios\n  if (gcd(...ratios) !== 1) {\n    for (let j = 0; j < urne.length; j++) {\n      ratios[j] = ratios[j] / gcd(...ratios)\n    }\n    totalRatios = sum(ratios)\n  }\n  const nbEssais = totalRatios * randint(300, 500)\n  const experience = simulationExperienceAlaetoire(urne, ratios, nbEssais)\n  const issuesReordonnees = []\n  for (let j = 0; j < experience.realisees.length; j++) {\n    issuesReordonnees.push(urne[experience.realisees[j]])\n  }\n  const diagrammeEffectifs = diagrammeBarres(experience.effectifs, issuesReordonnees, { axeVertical: true, titreAxeVertical: 'Effectifs' })\n  const choixRef = choice(experience.realisees) // Choix d'une référence\n  const posRef = experience.realisees.indexOf(choixRef) // Position de la référence dans realises\n  const choixIssue = urne[choixRef] // Issue correspondante à ce choix (les billes dans l'urne ne sont listées dans le même ordre)\n  const solution = {\n    calculs: `${etapesSimplificationFraction(experience.effectifs[posRef], nbEssais, '', 0, true)}`,\n    reponse: `${fraction2Tex(experience.frequences[posRef])}`\n  }\n  const texte = String.raw`Une urne contient ${totalRatios} billes de couleurs différentes.\n          <br>\n          L'expérience consiste à tirer une bille au hasard,\n          à noter sa couleur, puis à la remettre dans l'urne.\n          <br>\n          On obtient le diagramme des effectifs ci-dessous\n          après $${num(nbEssais)}$ tirages où on a pu constater\n          une stabilisation des fréquences de chaque issue.\n          <br>\n          ${diagrammeEffectifs}\n          <br>\n          Calculer le nombre de billes de couleur ${choixIssue} qu'il y a dans l'urne.\n          `\n  const texteCorr = String.raw`\n          La fréquence d'apparition d'une couleur est le quotient\n          du nombre d'apparitions de cette couleur par le nombre total d'essais.\n          <br>\n          La bille de couleur ${choixIssue} est apparue\n          $${num(experience.effectifs[posRef])}$ fois sur $${num(nbEssais)}$ tirages.\n          ${solution.calculs}\n          Donc la fréquence d'apparition de la couleur ${choixIssue} est $${solution.reponse}$.\n          <br>\n          Pour un nombre suffisamment grand d'essais, la fréquence d'une issue se stabilise autour de sa probabilité.\n          <br>\n          La proportion de billes de couleur ${choixIssue} est donc proche de cette fréquence.\n          <br>\n          $${solution.reponse} \\times ${totalRatios} \\approx ${ratios[choixRef]}$.\n          <br>\n          Il y a donc $${ratios[choixRef]}$ billes ${choixIssue}s dans l'urne.\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction exerciceSimplificationRatios () {\n  let totalRatios = 3 + randint(1, 15)\n  let ratios = matrix(listeEntiersSommeConnue(3, totalRatios, 1)) // On choisit au hasard les ratios\n  ratios = divide(ratios, gcd(...ratios._data))\n  totalRatios = sum(ratios)\n  const k = randint(2, 16)\n  const kratios = multiply(ratios, k)\n  let listeDecompositions = []\n  for (const n of kratios._data) {\n    const d = String.raw`\\bullet\\quad${n}=${decompositionFacteursPremiers(n)}`\n    if (listeDecompositions.indexOf(d) === -1) listeDecompositions.push(d)\n  }\n  let introduction = ''\n  if (listeDecompositions.length > 1) {\n    listeDecompositions = '$' + listeDecompositions.join('\\\\quad') + '$'\n    introduction = `Décomposons chaque partie du ratio en produits de facteurs premiers pour déterminer le PGCD.\n    <br>\n    ${listeDecompositions}\n    <br>\n    Le PGCD des trois parties du ratio est ${k}.\n    <br>\n    `\n  }\n  const texte = String.raw`Simplifier le ratio $${kratios._data.join('{:}')}$\n          `\n  const texteCorr = String.raw`${introduction}\n          On peut donc le simplifier par ${k}.\n          <br>\n          $${kratios._data.join('{:}')} = ${ratios._data.join('{:}')}$\n          `\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction exercicesPourcentagesConversion () {\n  const liste = []\n  const listeTexte = []\n  const listeFractionsSimples = ['1/2', '1/4', '3/4', '1/10', '1/5', '2/5', '3/5', '4/5', '3/10', '7/10', '9/10']\n  liste.push(fraction(choice(listeFractionsSimples)))\n  const k = randint(2, 19)\n  listeTexte.push(String.raw`\\dfrac{${liste[0].n * k}}{${liste[0].d * k}}`)\n  liste.push(fraction(randint(1, 9), 10))\n  listeTexte.push(num(liste[1].valueOf()))\n  liste.push(fraction(randint(0, 9), 10).add(fraction(randint(0, 9), 100).add(fraction(randint(1, 9), 1000))))\n  listeTexte.push(num(liste[2].valueOf()))\n  const listeEntiere = String.raw`$ {\\color{red}a.}~${listeTexte[0]}$\n  $\\quad {\\color{red}b.}~${listeTexte[1]}$\n  $\\quad {\\color{red}c.}~${listeTexte[2]}$\n  `\n  const texte = `Sans calculatrice, convertir en pourcentages les nombres de la liste suivante.\n  <br>\n  ${listeEntiere}\n  `\n  const solution = {\n    calculs: `${etapesSimplificationFraction(liste[0].n * k, liste[0].d * k, '', 0, false)}$=${num(liste[0])}=${num(liste[0].mul(100))}\\\\%$`,\n    reponse: `$${fraction2Tex(liste[0], true)}$`\n  }\n  const texteCorr = String.raw`\n  $ {\\color{red}a.}~$ ${solution.calculs}\n  <br>\n  $ {\\color{red}b.}~${listeTexte[1]}=${listeTexte[1]}0=${num(liste[1].mul(100))}\\% \\quad {\\color{red}c.}~${listeTexte[2]}=${num(liste[2].mul(100))}\\%$\n  `\n  return { texte: texte, texteCorr: texteCorr }\n}\n/**\n * Calculs de fréquences, probabilités, ratios\n * @author Frédéric PIOU\n * Référence\n*/\n\nexport default function CalculsProbabilites () {\n  Exercice.call(this)\n  this.consigne = ''\n  this.nbQuestions = 10\n  this.nbCols = 0\n  this.nbColsCorr = 0\n  this.tailleDiaporama = 1\n  this.video = ''\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n  context.isHtml ? (this.spacing = 2.5) : (this.spacing = 0)\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 0)\n  this.sup = 0 // Type d'exercice\n  this.besoinFormulaireNumerique = [\n    'Type de question', 9, [\n      '0 : Mélange des types de questions',\n      '1 : Calculer une fréquence à partir du diagramme des effectifs (valeur exacte).',\n      '2 : Calculer une fréquence à partir du diagramme des effectifs (valeur approchée).',\n      '3 : Calculer une fréquence à partir du diagramme des effectifs (pourcentage).',\n      '4 : Calcul d\\'une probabilité à partir d\\'un ratio.',\n      '5 : Calcul d\\'un probabilité à partir de pobabilités.',\n      '6 : Expérience à deux épreuves (avec remise) : Calcul d\\'une probabilité à partir de ratios.',\n      '7 : Expérience à deux épreuves différentes : Calcul d\\'une probabilité à partir de ratios.',\n      '8 : Diagramme des effectifs : Utilisation de la stabilistation des fréquences.',\n      '9 : Simplifier un ratio.',\n      '10 : Convertir un nombre en pourcentages.'\n    ].join('\\n')\n  ]\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = [] // À placer même si l'exercice n'a pas vocation à être corrigé\n    for (let i = 0, exercice, cpt = 0; i < this.nbQuestions && cpt < 50;) { // Boucle principale où i+1 correspond au numéro de la question\n      const nquestion = this.sup === 0 ? randint(1, 10) : this.sup\n      switch (nquestion) {\n        case 1:\n          exercice = diagrammeCalculsFrequences(0)\n          break\n        case 2:\n          exercice = diagrammeCalculsFrequences(1)\n          break\n        case 3:\n          exercice = diagrammeCalculsFrequences(2)\n          break\n        case 4: {\n          exercice = ratiosCalculsProbabilites()\n          break\n        }\n        case 5: {\n          exercice = probabilitesCalculsRatios()\n          break\n        }\n        case 6: {\n          exercice = ratios2EpreuvesCalculsProbabilites()\n          break\n        }\n        case 7: {\n          exercice = ratioPiece2EpreuvesCalculsProbabilites()\n          break\n        }\n        case 8: {\n          exercice = diagrammeEffectifsCalculsLoiGrandNombre()\n          break\n        }\n        case 9: {\n          exercice = exerciceSimplificationRatios()\n          break\n        }\n        case 10: {\n          exercice = exercicesPourcentagesConversion()\n          break\n        }\n      }\n      // Fin Probabilites\n      if (this.questionJamaisPosee(i, nquestion)) {\n        this.listeQuestions.push(exercice.texte)\n        this.listeCorrections.push(exercice.texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","dateDePublication","TraceBarre","x","y","legende","epaisseur","couleurDeRemplissage","color","opaciteDeRemplissage","angle","unite","hachures","ObjetMathalea2D","bordure","point","bordures","p","polygone","texte","texteParPosition","tikz","svg","coeff","traceBarre","num","nb","Intl","NumberFormat","maximumFractionDigits","format","replace","fraction2Tex","fraction","signe","s","d","String","raw","n","Axes","xmin","ymin","xmax","ymax","thick","xstep","ystep","ytick","objets","texteParPoint","ordonnee","segment","styleExtremites","add","div","code","objet","commentaire","axes","LabelY","step","pos","ceil","mul","labelY","diagrammeBarres","hauteursBarres","etiquettes","reperageTraitPointille","titreAxeVertical","hauteurDiagramme","axeVertical","etiquetteValeur","labelAxeVert","diagramme","j","length","abscisseBarre","hauteurBarre","max","ligne","pointilles","steps","yticks","istep","mathalea2d","Object","assign","rxmin","rymin","rxmax","rymax","rzoom","Math","min","Symbol","iterator","obj","fixeBordures","style","scale","listeExhaustive","univers","ratios","issues","combinaisonListes","issuesAbregees","toUpperCase","simulationExperienceAlaetoire","nbEssais","effectifs","realisees","issue","randint","refIssue","frequences","etapesSimplificationFraction","A","methode","aligned","etapes","gcd","netapes","join","diagrammeCalculsFrequences","typeReponseAttendue","urne","slice","totalRatios","listeEntiersSommeConnue","sum","experience","issuesReordonnees","diagrammeEffectifs","choixRef","choice","posRef","choixIssue","remarque","solution","environ","calculs","reponse","approchee","round","valueOf","approx","decimal","pourcentage","texteCorr","ratiosCalculsProbabilites","choixRatio","plurielsIssues","probabilitesCalculsRatios","compteurSimplifications","simplifications","isPrime","probabilites","ratios2EpreuvesCalculsProbabilites","evenement","lignes","k","corrProba","issuesquirealisent","ratioPiece2EpreuvesCalculsProbabilites","urne1","urne2","totalRatios1","totalRatios2","ratios1","ratios2","issues1","issues2","diagrammeEffectifsCalculsLoiGrandNombre","exerciceSimplificationRatios","matrix","divide","_data","kratios","multiply","listeDecompositions","decompositionFacteursPremiers","exercicesPourcentagesConversion","liste","listeTexte","CalculsProbabilites","context","sup","exercice","cpt","nquestion","listeQuestionsToContenu"],"sourceRoot":""}