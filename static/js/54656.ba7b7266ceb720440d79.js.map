{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Exercice_conversions_aires.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["amcReady","amcType","interactifReady","interactifType","ExerciceConversionsAires","niveau","Exercice","this","sup","sup2","sup3","titre","consigne","spacing","nbColsCorr","nouvelleVersion","parseInt","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","listeDeK","combinaisonListes","nbQuestions","a","k","div","resultat","resultat2","resultat3","resultat4","resultat5","typesDeQuestions","texte","texteCorr","i","cpt","autoCorrection","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","ecart","unite2","Math","pow","enonce","propositions","statut","interactif","propositionsQcm","ajouteChampTexteMathLive","setReponse","parseFloat","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/54656.ba7b7266ceb720440d79.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, arrondi, texNombre, texTexte, calcul } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, propositionsQcm, setReponse } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = ['qcm', 'mathLive']\n\n/**\n * Conversions d'aires en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * Dans la correction, on montre que l'on multiplie ou divisie à 2 reprises par le coefficient donné par le préfixe\n *\n * * 1 : De dam², hm², km² vers m²\n * * 2 : De dm², cm², mm² vers m²\n * * 3 : Conversions en mètres-carrés\n * * 4 : Conversions avec des multiplications ou des divisions\n * * 5 : Conversions avec des ares, des centiares et des hectares\n * * 6 : Un mélange de toutes les conversions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Référence 6M23\n */\nexport default function ExerciceConversionsAires (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.sup3 = 1 // interactifType Qcm\n  this.titre = \"Conversions d'aires\"\n  this.consigne = 'Compléter'\n  this.spacing = 2\n  this.nbColsCorr = 1\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n\n  this.nouvelleVersion = function () {\n    this.interactifType = parseInt(this.sup3) === 2 ? 'mathLive' : 'qcm'\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let prefixeMulti = [\n      [' da', '\\\\times10\\\\times10', 100],\n      [' h', '\\\\times100\\\\times100', 10000],\n      [' k', '\\\\times1~000\\\\times1~000', 1000000]\n    ]\n    let prefixeDiv = [\n      [' d', '\\\\div10\\\\div10', 100],\n      [' c', '\\\\div100\\\\div100', 10000],\n      [' m', '\\\\div1~000\\\\div1~000', 1000000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    const listeDeK = combinaisonListes([0, 1, 2], this.nbQuestions)\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      resultat2,\n      resultat3,\n      resultat4,\n      resultat5,\n      typesDeQuestions,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 6) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 5)\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = listeDeK[i]\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else if (typesDeQuestions === 3) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions === 4) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        ])\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        prefixeMulti = [\n          [' da', '\\\\times10\\\\times10', 100],\n          [' h', '\\\\times100\\\\times100', 10000],\n          [' k', '\\\\times1~000\\\\times1~000', 1000000]\n        ] // On réinitialise cette liste qui a pu être modifiée dans le cas des ares\n        resultat = calcul(a * prefixeMulti[k][2]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^2' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^2' +\n          ' =  ' +\n          texNombre(a) +\n          prefixeMulti[k][1] +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        prefixeDiv = [\n          [' d', '\\\\div10\\\\div10', 100],\n          [' c', '\\\\div100\\\\div100', 10000],\n          [' m', '\\\\div1~000\\\\div1~000', 1000000]\n        ]\n        k = randint(0, 1) // Pas de conversions de mm^2 en m^2 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = calcul(a / prefixeDiv[k][2]).toString() // Attention aux notations scientifiques pour 10e-8\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^2' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^2' +\n          ' =  ' +\n          texNombre(a) +\n          prefixeDiv[k][1] +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      } else if (typesDeQuestions === 4) {\n        const unite1 = randint(0, 3)\n        let ecart = randint(1, 2) // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1\n        }\n        const unite2 = unite1 + ecart\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, 2 * ecart))\n          resultat2 = calcul(resultat / 10)\n          resultat3 = calcul(resultat * 10)\n          resultat4 = calcul(resultat * 100)\n          resultat5 = calcul(resultat / 100)\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\times' +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            '$'\n        } else {\n          resultat = calcul(a / Math.pow(10, 2 * ecart))\n          resultat2 = calcul(a / Math.pow(10, ecart))\n          resultat3 = calcul(a / Math.pow(10, 2 * ecart + 1))\n          resultat4 = calcul(a / Math.pow(10, -2 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\div' +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            '$'\n        }\n      } else if (typesDeQuestions === 5) {\n        // Pour typesDeQuestions==5\n        prefixeMulti = [\n          ['ha', 10000],\n          ['a', 100]\n        ]\n        k = randint(0, 1)\n        resultat = calcul(a * prefixeMulti[k][1]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0]) +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0]) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          texNombre(prefixeMulti[k][1]) +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [{\n        texte: `$${texNombre(resultat)}$`,\n        statut: true\n      },\n      {\n        texte: `$${texNombre(resultat2)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat3)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat4)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat5)}$`,\n        statut: false\n      }\n      ]\n      if (this.interactif && this.interactifType === 'qcm') {\n        texte += propositionsQcm(this, i).texte\n      } else {\n        texte += ajouteChampTexteMathLive(this, i)\n        setReponse(this, i, parseFloat(resultat))\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    6,\n    \"1 : Conversions en m² avec des multiplications\\n2 : Conversions en m² avec des divisions\\n3 : Conversions en m² avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions\\n5 : Conversions d'hectares et ares en m² \\n6 : Toutes les conversions\"\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n  if (context.isHtml && !context.isDiaporama) this.besoinFormulaire3Numerique = ['Exercice interactif', 2, '1 : QCM\\n2 : Numérique'] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}