{"version":3,"file":"js/38748.c506333cecc96a84cb9d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N50-1.js","webpack://mathalea/./src/js/exercices/4e/4L13-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import MettreEnEquationSansResoudre from '../4e/4L13-0.js'\nexport const titre = 'Mettre en équation un problème sans objectif de résolution'\n// export { interactifReady, interactifType } from '../4e/4L13-0.js'\n// export { amcReady, amcType } from '../4e/4L13-0.js'\n\n/**\n * Clone de 4L13-0 pour les 2nde\n *\n * @author Sébastien LOZANO\n */\nexport default function MettreEnEquationSansResoudre2nde () {\n  MettreEnEquationSansResoudre.call(this)\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, prenom, texteEnCouleur } from '../../modules/outils.js'\nimport { point, segment, codageCarre, polygoneRegulierParCentreEtRayon, nommePolygone, afficheCoteSegment, codeSegments, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Mettre en équation un problème sans objectif de résolution'\n\n/**\n * Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue afin de mettre en équation un problème\n * à partir de figure géométriques élémentaires\n * * 4L13-0\n * @author Sébastien Lozano\n */\nexport default function MettreEnEquationSansResoudre () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.sup = 1\n  if (this.debug) {\n    this.nbQuestions = 9\n  } else {\n    this.nbQuestions = 2\n  };\n\n  this.titre = titre\n  this.consigne = \"Donner une équation qui permet de résoudre le problème.<br>On ne demande pas de résoudre l'équation.\"\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  // context.isHtml? this.spacing = 3 : this.spacing = 2;\n  // context.isHtml? this.spacingCorr = 3 : this.spacingCorr = 2;\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [1]\n    } else {\n      typesDeQuestionsDisponibles = [1, 2]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    typesDeQuestionsDisponibles = [1]\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    // let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour dire le nom du polygone\n      function myPolyName (n) {\n        const sortie = {\n          article: '',\n          name: '',\n          nameParSommets: ''\n        }\n        switch (n) {\n          case 3:\n            sortie.article = 'du '\n            sortie.name = 'triangle équilatéral'\n            sortie.nameParSommets = 'ABC'\n            break\n          case 4:\n            sortie.article = 'du '\n            sortie.name = 'carré'\n            sortie.nameParSommets = 'ABCD'\n            break\n          case 5:\n            sortie.article = 'du '\n            sortie.name = 'pentagone régulier'\n            sortie.nameParSommets = 'ABCDE'\n            break\n          case 6:\n            sortie.article = 'de l\\''\n            sortie.name = 'hexagone régulier'\n            sortie.nameParSommets = 'ABCDEF'\n            break\n          case 7:\n            sortie.article = 'de l\\''\n            sortie.name = 'heptagone régulier'\n            sortie.nameParSommets = 'ABCDEFG'\n            break\n          case 8:\n            sortie.article = 'de l\\''\n            sortie.name = 'octogone régulier'\n            sortie.nameParSommets = 'ABCDEFGH'\n            break\n        }\n        return sortie\n      }\n\n      // on choisit le nombre de côtés su polygone\n      const n = randint(3, 8)\n      // on choisit un nom pour la variable\n      const variables = ['t', 'u', 'v', 'w', 'y', 'z']\n      const inc = variables[randint(0, variables.length - 1)]\n      // on choisit une unité\n      const unites = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n      const unite = unites[randint(0, unites.length - 1)]\n      // on prépare le polygone\n      const po = polygoneRegulierParCentreEtRayon(point(0, 0), 4, n)\n      po.opacite = 0.5\n      po.epaisseur = 2\n      // on pépare la côte\n      const s = segment(po.listePoints[0], po.listePoints[1])\n      s.styleExtremites = '<->'\n      // on fait un test pour coder les angles droits du carré\n      let anglesDroitsIfIsCarre\n      if (n === 4) {\n        anglesDroitsIfIsCarre = codageCarre(po)\n      } else {\n        anglesDroitsIfIsCarre = {}\n      };\n      // on finit les appels\n      const mesAppels = [\n        po,\n        codeSegments('X', 'blue', po.listePoints),\n        afficheCoteSegment(s, `${inc}`, 1, 'red', 2, 0.5, 'black'),\n        nommePolygone(po, myPolyName(n).nameParSommets),\n        anglesDroitsIfIsCarre\n      ]\n      // on prépare l'objet polygone\n      const polygone = {\n        nb_cotes: n,\n        unite: unite,\n        article: myPolyName(n).article,\n        nom: myPolyName(n).name,\n        let_cote: inc,\n        perimetre: randint(200, 500),\n        fig: mathalea2d(\n          {\n            xmin: -7,\n            ymin: -5,\n            xmax: 7,\n            ymax: 5,\n            pixelsParCm: 20,\n            scale: 0.5// 0.7\n          },\n          mesAppels\n        )\n      }\n\n      const enonces = []\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: '',\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${texteEnCouleur(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      })\n      // pour être sûr d'avoir deux figures différentes\n      const p = randint(3, 8, [n])\n      polygone.nb_cotes = p\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${prenom()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: '',\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${texteEnCouleur(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      })\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[1].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  // this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","MettreEnEquationSansResoudre2nde","MettreEnEquationSansResoudre","this","typesDeQuestionsDisponibles","Exercice","debug","sup","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","myPolyName","n","sortie","article","name","nameParSommets","randint","variables","inc","length","unites","unite","po","polygoneRegulierParCentreEtRayon","point","opacite","epaisseur","s","segment","listePoints","anglesDroitsIfIsCarre","styleExtremites","codageCarre","mesAppels","codeSegments","afficheCoteSegment","nommePolygone","polygone","nb_cotes","nom","let_cote","perimetre","fig","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","enonces","push","enonce","prenom","question","correction","texteEnCouleur","p","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}