{"version":3,"sources":["webpack://mathalea/./src/js/exercices/1e/1N10.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Terme_d_une_suite_definie_explicitement","Exercice","this","consigne","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","d","frac","k","i","cpt","randint","choice","ecritureAlgebrique","fraction","texFraction","pgcd","texFractionSimplifiee","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/8288.8354e9992d33ec28fd4e.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,ecritureAlgebrique,pgcd} from '../../modules/outils.js'\nimport {fraction} from '../../modules/Fractions.js'\nexport const titre = 'Déterminer les termes d’une suite définie de façon explicite'\n\n/**\n * 1N10\n * @Auteur Gaelle Morvan\n */\nexport default function Terme_d_une_suite_definie_explicitement() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"Une suite étant donnée, calculer le terme demandé.\";\n  this.nbQuestions = 4;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Vide la liste de questions\n    this.listeCorrections = []; // Vide la liste de questions corrigées\n\n    let type_de_questions_disponibles = [1, 2, 3];\n    let listeTypeDeQuestions = combinaisonListes(\n      type_de_questions_disponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b, c, d, frac,k; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1: //fonction affine\n          a = randint(1, 7) * choice([-1, 1]);\n          b = randint(1, 10) * choice([-1, 1]);\n          k = randint(0, 20);\n\n          texte = `Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = `;\n          if (a == 1) { texte += `n`; }\n\n          else if (a == -1) { texte += `-n`; }\n          else { texte += `${a}n`; };\n\n          if (b > 0) { texte += `+${b}$.`; }\n          else { texte += `${b}$.`; };\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par ${k}, on obtient : $u_{${k}} =`;\n          if (a == 1) {\n            texteCorr += `${k} ${ecritureAlgebrique(b)}`;\n          } else {\n            if (a == -1) {\n              texteCorr += `-${k} ${ecritureAlgebrique(b)}`;\n            } else {\n              texteCorr += `${a} \\\\times ${k} ${ecritureAlgebrique(b)}`;\n            }\n          }\n          texteCorr += `=${a * k + b}$.`;\n          break;\n\n        case 2: //fonction polynome de degré 2\n          a = randint(1, 5) * choice([-1, 1]);\n          b = randint(0, 5) * choice([-1, 1]);\n          c = randint(0, 9) * choice([-1, 1]);\n          k = randint(0, 9);\n\n          texte = `Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = `;\n          if (a == 1) {\n            texte += `n^2$`;\n          } else {\n            if (a == -1) {\n              texte += `-n^2$`;\n            } else {\n              texte += `${a}n^2$`;\n            }\n          };\n          if (b == 1) { texte += `$+n$`; };\n          if (b > 1) { texte += `$+${b}n$`; };\n          if (b == -1) { texte += `$-n$`; };\n          if (b < -1) { texte += `$${b}n$`; };\n          if (c > 0) { texte += `$+${c}$.`; };\n          if (c < 0) { texte += `$${c}$.`; }\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = `;\n          if (a == 1) { texteCorr += `${k}^2`; }\n          else {\n            if (a == -1) { texteCorr += `-${k}^2`; }\n            else {\n              texteCorr += `${a}\\\\times ${k}^2`;\n            }\n          };\n          if (b == 1) {\n            texteCorr += `+${k}`;\n          } else {\n            if (b == -1) {\n              texteCorr += `-${k}`;\n            } else {\n              texteCorr += `${ecritureAlgebrique(b)}\\\\times ${k}`;\n            }\n          }\n          texteCorr += `${ecritureAlgebrique(c)}=${a * k * k + b * k + c}$.`;\n          break;\n\n        case 3: //fonction homographique\n          a = randint(1, 5) * choice([-1, 1]);\n          b = randint(1, 5) * choice([-1, 1]);\n          c = randint(2, 4);\n          d = randint(1, 7);\n          k = randint(1, 9);\n\n          texte = `Soit $(u_n)$ une suite définie pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_n = \\\\dfrac{`;\n          if (a == 1) { texte += `n`; }\n\n          else if (a == -1) { texte += `-n`; }\n          else { texte += `${a}n`; };\n          if (b > 0) { texte += `+${b}}{`; }\n          else { texte += `${b}}{`; };\n          if (c == 1) { texte += `n`; }\n\n          else if (c == -1) { texte += `-n`; }\n          else { texte += `${c}n`; };\n          if (d > 0) { texte += `+${d}}$.`; }\n          else { texte += `${d}}$.`; };\n\n          texte += `<br>Calculer $u_{${k}}$.`;\n          frac = fraction(a * k + b, c * k + d);\n          texteCorr = `Dans l'expression de $u_n$ on remplace $n$ par $${k}$, on obtient : $u_{${k}} = \\\\dfrac{${a}\\\\times ${k} ${ecritureAlgebrique(b)}}{${c}\\\\times ${k}\n          ${ecritureAlgebrique(d)}} = ` + frac.texFraction;\n          if (pgcd(a * k + b, c * k + d) != 1)\n            texteCorr += `=` + frac.texFractionSimplifiee;\n          texteCorr += `$.`;\n          break;\n      }\n\n\n      if (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte); // Sinon on enregistre la question dans listeQuestions\n        this.listeCorrections.push(texteCorr); // On fait pareil pour la correction\n        i++; // On passe à la question suivante\n      }\n      cpt++; // Sinon on incrémente le compteur d'essai pour avoir une question nouvelle\n    }\n    listeQuestionsToContenu(this); // La liste de question et la liste de la correction\n\n    // sont transformés en chaine de caractère (avec une liste HTML ou LaTeX suivant le contexte)\n  };\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n  // On aurait pu ajouter un formulaire pour régler le niveau de difficulté à l'aide de l'attribut this.sup\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}