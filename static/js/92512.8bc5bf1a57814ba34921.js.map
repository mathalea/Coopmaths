{"version":3,"file":"js/92512.8bc5bf1a57814ba34921.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N23-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, nombreEnLettres } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif'\nexport const titre = 'Écrire un nombre décimal en chiffres ou en lettres'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * 6N23-0\n */\n\nexport default function EcrireNombresDecimal () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.sup3 = 3\n  this.nouvelleVersion = function () {\n    let formatEcriture = []\n    if (parseInt(this.sup) === 1) {\n      formatEcriture = combinaisonListes([true], this.nbQuestions)\n    } else if (parseInt(this.sup) === 2) {\n      formatEcriture = combinaisonListes([false], this.nbQuestions)\n    } else {\n      formatEcriture = combinaisonListes([false, true], this.nbQuestions)\n    }\n    if (context.isAmc) {\n      formatEcriture = combinaisonListes([false], this.nbQuestions)\n      this.sup2 = 1\n    }\n    if (this.interactif && context.isHtml) {\n      formatEcriture = combinaisonListes([false], this.nbQuestions)\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    const typesDeQuestionsDemandees = parseInt(this.sup2) + 1 // <1 000, <1 000 000)\n    let typesDeQuestionsDisponibles\n    if (this.sup3 === 1) {\n      typesDeQuestionsDisponibles = [2]\n    } else if (this.sup3 === 2) {\n      typesDeQuestionsDisponibles = [1]\n    } else {\n      typesDeQuestionsDisponibles = [1, 2]\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    for (\n      let i = 0, texte, texteCorr, a, b, c, type, nombre, tranche, partEnt, partDec, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      type = listeTypeDeQuestions[i]\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        partEnt = 0\n        partDec = 0\n        for (let j = 0; j < typesDeQuestionsDemandees; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 1; j < typesDeQuestionsDemandees; j++) {\n          partEnt += tranche[j] * 10 ** ((j - 1) * 3)\n          // nombre += tranche[j] * 10 ** ((j-1)*3)\n        }\n        partDec = tranche[0]\n        nombre = calcul(partEnt + partDec / 1000)\n        // if (tranche[listeTypeDeQuestions[i]-1]==0) nombre=0\n        if (tranche[1] < 2) nombre = 0\n        if (tranche[0] === 0) nombre = 0\n      }\n      if (formatEcriture[i]) {\n        if (!context.isDiaporama) {\n          texte = `Écris le nombre $${texNombre(nombre)}$ en lettres ${type === 2 ? 'en utilisant le mot virgule' : 'sans utiliser le mot virgule'} : '\\\\dotfill'`\n        } else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) {\n          texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre, type)}.`\n        } else {\n          texteCorr = `${nombreEnLettres(nombre, type)}.`\n        }\n      } else {\n        if (!context.isDiaporama) {\n          texte = `Écris le nombre ${nombreEnLettres(nombre, type)} en chiffres :  ${this.interactif ? ajouteChampTexteMathLive(this, i, 'largeur10 inline') : '\\\\dotfill'}`\n        } else {\n          texte = ` ${nombreEnLettres(nombre, type)}`\n        }\n        if (!context.isDiaporama) {\n          texteCorr = ` ${nombreEnLettres(nombre, type)} : $${texNombre(nombre)}$.`\n        } else {\n          texteCorr = `$${texNombre(nombre)}$.`\n        }\n      }\n      if (!formatEcriture[i]) {\n        setReponse(this, i, nombre, { formatInteractif: 'calcul' })\n      }\n      texte = texte.replace('et-un unités', 'et-une unités')\n      texteCorr = texteCorr.replace('et-un unités', 'et-une unités')\n      if (context.isAmc) {\n        this.autoCorrection[i].reponse.param.digits = 6\n        this.autoCorrection[i].reponse.param.decimals = 3\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercices', 3, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres\\n3 : Mélange']\n  this.besoinFormulaire2Numerique = ['Classe maximum', 2, '1 : Unités\\n2 : Milliers']\n  this.besoinFormulaire3Numerique = ['Type d\\'écriture', 3, '1 : Écriture avec le mot virgule\\n2 : Ériture sans le mot virgule\\n3 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","EcrireNombresDecimal","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","sup3","nouvelleVersion","formatEcriture","parseInt","combinaisonListes","context","interactif","listeQuestions","listeCorrections","autoCorrection","typesDeQuestionsDemandees","typesDeQuestionsDisponibles","listeTypeDeQuestions","texte","texteCorr","a","b","c","type","nombre","tranche","partEnt","partDec","i","cpt","splice","j","randint","push","choice","calcul","texNombre","nombreEnLettres","ajouteChampTexteMathLive","setReponse","formatInteractif","replace","reponse","param","digits","decimals","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3Numerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}