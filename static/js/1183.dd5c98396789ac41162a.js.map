{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43-3.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","ExerciceVraiFauxDivisibleMultipleDiviseur","justification","N","a","booleen","result","sommeDesChiffres","toString","calcul","texNombre","Math","floor","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","qcmDisponible","modeQcm","nouvelleVersion","tabrep","tabicone","parseInt","sup2","qcm","ordered","lastChoices","listeQuestions","listeCorrections","typeDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","listeDeNDisponibles","listeDeN","texte","texteCorr","i","cpt","randint","replace","shuffle2tableaux","mathalea","sortieAMC","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","indexOf","push","listeQuestionsToContenu","gestionQcmInteractif","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","b","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length"],"mappings":"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","file":"js/1183.dd5c98396789ac41162a.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, sommeDesChiffres, calcul, texNombre, randint, choice, shuffle2tableaux } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Diviseur, multiple, divisible - Vrai ou faux'\n\n/**\n * Vrai ou faux sur les notions de diviseur ou multiple\n * @Auteur Rémi Angot\n * Référence 6N43-3\n*/\nexport default function ExerciceVraiFauxDivisibleMultipleDiviseur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Pour chaque affirmation, indiquer si elle est vraie ou fausse.'\n  this.nbQuestions = 5\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté à ne définir que si on peut le modifier avec un formulaire en paramètre\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  function justification (N, a, booleen) {\n    let result\n    if (booleen === true) {\n      if (N === 2) {\n        result = ', car son chiffre des unités est $0$, $2$, $4$, $6$ ou $8$.'\n      } else if (N === 5) {\n        result = ', car son chiffre des unités est $0$, ou $5$.'\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui est divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${calcul(a / N)}$.`\n      }\n    }\n    if (booleen === false) {\n      if (N === 2) {\n        result = \", car son chiffre des unités n'est pas $0$, $2$, $4$, $6$ ou $8$.\"\n      } else if (N === 5) {\n        result = \", car son chiffre des unités n'est pas $0$, ou $5$.\"\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui n'est pas divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${Math.floor(a / N)}+ ${a % N}$.`\n      }\n    }\n    return result\n  }\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.qcm = ['6N43-3', [], 'Diviseur, multiple, divisible - Vrai ou faux', 1, { ordered: true, lastChoices: 2 }]\n    let tabrep, tabicone\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let typeDeQuestionsDisponibles = ['Ndiviseur', 'divisibleParN', 'multipleDeN', 'NdiviseurF', 'divisibleParNF', 'multipleDeNF', 'NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers']\n    if (this.nbQuestions < 8) {\n      typeDeQuestionsDisponibles = [choice(['Ndiviseur', 'divisibleParN']), 'multipleDeN', choice(['NdiviseurF', 'divisibleParNF']), 'multipleDeNF', choice(['NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers'])]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let listeDeNDisponibles\n    if (this.sup === 1) {\n      listeDeNDisponibles = [2, 5]\n    }\n    if (this.sup === 2) {\n      listeDeNDisponibles = [2, 3, 5, 9]\n    }\n    if (this.sup === 3) {\n      listeDeNDisponibles = [7, 11, 13, 20, 30, 25]\n    }\n    const listeDeN = combinaisonListes(listeDeNDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, N, a, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      N = listeDeN[i]\n      a = randint(199, 999) * N\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'Ndiviseur':\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [1, 0, 0]\n          break\n        case 'divisibleParN':\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [1, 0, 0]\n          break\n        case 'multipleDeN':\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [1, 0, 0]\n          break\n        case 'NdiviseurF':\n          a += randint(1, N - 1)\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n        case 'divisibleParNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n        case 'multipleDeNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n        case 'NdiviseurEnvers':\n          texte = `$${texNombre(a)}$ est un diviseur de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${N}$ est un diviseur de $${texNombre(a)}$`\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n        case 'divisibleParNEnvers':\n          texte = `$${N}$ est divisible par $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${texNombre(a)}$ est divisible par $${N}$`\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n        case 'multipleDeNEnvers':\n          texte = `$${N}$ est un multiple de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${a}$ est un multiple de $${N}$`\n          texteCorr += justification(N, a, true)\n          tabrep = ['Vrai', 'Faux', 'Je ne sais pas']\n          tabicone = [0, 1, 0]\n          break\n      }\n      shuffle2tableaux(tabrep, tabicone)\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        this.tableauSolutionsDuQcm[i] = tabicone\n        texteCorr = `${texte}..`\n        texte += '<br><br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n        texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        this.qcm[1].push([`${texte}.\\\\\\\\ \\n `,\n          tabrep,\n          tabicone])\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    gestionQcmInteractif(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, '1 : Critères de divisibilité par 2 et 5\\n2 : Critères de divisibilité par 2, 3, 5 et 9\\n3 : Sans critères de divisibilité']\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice}\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n"],"sourceRoot":""}