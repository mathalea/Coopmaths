{"version":3,"file":"js/84295.e599c4878130a794d9fb.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N43.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, sommeDesChiffres, calcul, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = 'qcm'\n\nexport const titre = 'Utiliser les critères de divisibilité'\n\n/**\n * Un nombre est-il divisible par :\n *\n * * 2, 5, 10 ?\n * * 3, 9 ?\n * * 2, 3, 5, 9, 10 ?\n * * 2, 3, 5, 9, 10  et un autre nombre qui peut être 7, 13, 17, ou 19 ?\n * @author Rémi Angot\n * 6N43\n */\nexport default function CriteresDeDivisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4 // Correspond au facteur commun\n  this.consigne = 'Répondre aux questions suivantes en justifiant.'\n  this.spacing = 2\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let listeExercicesDisponibles\n    if (this.sup === 1) {\n      listeExercicesDisponibles = [2, 5, 10]\n    }\n    if (this.sup === 2) {\n      listeExercicesDisponibles = [3, 9]\n    }\n    if (this.sup === 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10]\n    }\n    if (this.sup > 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10, 'autre']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      listeExercicesDisponibles,\n      this.nbQuestions\n    )\n    for (let i = 0, n, u, texte, texteCorr, sommeString, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) {\n        case 2:\n          u = randint(1, 2)\n          n = randint(10, 999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $2$ ?`\n          if (u % 2 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $2$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $2$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 3:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $3$ ?`\n          if (calcul(sommeString) % 3 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${calcul(sommeString) / 3\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $3$ donc $${texNombre(\n              n\n            )}$ est divisible par $3$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${(calcul(sommeString) - (calcul(sommeString) % 3)) / 3\n              }+${calcul(sommeString) % 3}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 9:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $9$ ?`\n          if (calcul(sommeString) % 9 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${calcul(sommeString) / 9\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $9$ donc $${texNombre(\n              n\n            )}$ est divisible par $9$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${(calcul(sommeString) - (calcul(sommeString) % 9)) / 9\n              }+${calcul(sommeString) % 9}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 5:\n          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]) // 1 fois sur 2 ça sera divisible par 5\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $5$ ?`\n          if (u % 5 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $5$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $5$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 10:\n          u = choice([randint(1, 9), 0]) // 1 fois sur 2 ça sera divisible par 10\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $10$ ?`\n          if (u === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $10$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $10$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 'autre':\n          n = randint(100, 999)\n          u = choice([7, 7, 7, 7, 13, 17, 19])\n          if (u === 7) {\n            n = choice(\n              [randint(10, 99) * 10 + 7],\n              7 * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par 7, un divisible par 7, un au hasard\n          } else {\n            n = choice(\n              [randint(10, 99) * 100 + u],\n              u * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par u, un divisible par u, un au hasard\n          }\n          texte = `$${texNombre(n)}$ est-il divisible par $${u}$ ?`\n          texteCorr = `On ne connait pas de critère de divisibilité par $${u}$, on calcule donc la division euclidienne de $${texNombre(\n            n\n          )}$ par $${u}$.<br>`\n          if (n % u === 0) {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${texNombre(\n              n / u\n            )}$<br>`\n            texteCorr += `Le reste de la division euclidienne est nul donc $${texNombre(\n              n\n            )}$ est divisible par $${u}$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${(n - (n % u)) / u}+${n % u\n              }$<br>`\n            texteCorr += `Le reste de la division euclidienne n'est pas nul donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $${u}$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n\n          break\n      }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 4, '1 : Critères de divisibilité par 2, 5 et10\\n2 : Critères de divisibilité par 3 et 9\\n3 : Critères de divisibilité par 2, 3, 5, 9 et 10\\n4 : Avec ou sans critère de divisibilité']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","CriteresDeDivisibilite","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nouvelleVersion","listeExercicesDisponibles","parseInt","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","n","u","texte","texteCorr","sommeString","i","cpt","propositions","statut","options","ordered","randint","texNombre","choice","toString","sommeDesChiffres","calcul","enonce","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}