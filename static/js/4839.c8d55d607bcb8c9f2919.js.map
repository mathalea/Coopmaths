{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5S12.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Construire_Un_Diagramme","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","sup3","nouvelleVersion","type_de_questions_disponibles","listeQuestions","listeCorrections","parseInt","randint","nom","texte","texteCorr","objets_enonce","objets_correction","params_enonce","params_correction","coef","r","lstElementGraph","g","liste_motifs","combinaisonListes","listeTypeDeQuestions","N","nbAnimaux","lstAnimauxExo","lstNombresAnimaux","lstVal","lstAnimaux","choice","contenutableau","A","B","T","angle","a","legende","textelegende","hachures","a0","t","alpha","entete","i","push","concat","effectiftotal","tableauColonneLigne","texFraction","arrondiVirgule","Math","round","point","cercleCentrePoint","tracePoint","style","arc","rotation","texcolors","motifs","couleurDeRemplissage","couleurDesHachures","carre","translation","vecteur","opaciteDeRemplissage","texteParPosition","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","repere2","grilleX","grilleY","xThickListe","xLabelListe","yUnite","yThickDistance","yMax","xMin","xMax","yMin","axeXStyle","yLegende","traceBarre","premiereLettreEnMajuscule","unite","segment","traceGraphiqueCartesien","couleurDesPoints","couleurDuTrait","styleDuTrait","epaisseurDuTrait","styleDesPoints","tailleDesPoints","mathalea2d","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3Numerique","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/4839.c8d55d607bcb8c9f2919.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport { premiereLettreEnMajuscule, listeQuestionsToContenuSansNumero, texcolors, arrondiVirgule, texFraction, combinaisonListes, tableauColonneLigne, choice, randint } from '../../modules/outils.js'\nimport {traceGraphiqueCartesien,segment, mathalea2d, arc, point, rotation, motifs, tracePoint, vecteur, translation, carre, texteParPosition, repere2, traceBarre,cercleCentrePoint } from '../../modules/2d.js'\n\nexport const titre = 'Représenter des données par un diagramme'\n\n/**\n * @Auteur Jean-Claude Lhote\n * \n */\nexport default function Construire_Un_Diagramme() {\n    \"use strict\"\n    Exercice.call(this)\n    this.titre = titre;\n    this.nbQuestions = 1;\n    this.nbQuestionsModifiable = false\n    this.nbCols = 1;\n    this.nbColsCorr = 1;\n    this.pasDeVersionLatex = false\n    this.pas_de_version_HMTL = false\n    this.sup = 3;\n    this.sup2 = 1;\n    this.sup3 = 1;\n\n    //  this.sup3 = false;\n    this.nouvelleVersion = function () {\n        this.listeQuestions = []\n        this.listeCorrections = []\n        let type_de_questions_disponibles\n        if (this.sup3 < 5) {\n            type_de_questions_disponibles = [parseInt(this.sup3)]\n        }\n        else {\n            type_de_questions_disponibles = [randint(1, 4)]\n        }\n        let liste_hachures_disponibles = [0, 1, 3, 4, 5, 6, 7, 8, 9, 10]\n        let liste_motifs = combinaisonListes(liste_hachures_disponibles, 4)\n        let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles, this.nbQuestions)\n        let N = 0, nom, texte, texteCorr;\n        let nbAnimaux = 4; // nombre d'animaux différents dans l'énoncé\n        let lstAnimauxExo = []; //liste des animaux uniquement cités dans l'exercice\n        let lstNombresAnimaux = []; // liste des effectifs de chaque animal\n        let lstVal = [10, 20]; // liste des valeurs à éviter pour les effectifs\n\n        let objets_enonce, objets_correction, params_enonce, params_correction,coef,r,lstElementGraph,g\n        let lstAnimaux = ['girafes', 'zèbres', 'gnous', 'buffles', 'gazelles', 'crocodiles', 'rhinocéros', 'léopards', 'guépards', 'hyènes', 'lycaons', 'servals', 'phacochères'];\n        let lstNomParc = ['Dramve', 'Fatenmin', 'Batderfa', 'Vihi', 'Genser', 'Barbetdou', 'Dramrendu', 'Secai', 'Cipeudram', 'Cigel', 'Lisino', 'Fohenlan',\n            'Farnfoss', 'Kinecardine', 'Zeffari', 'Barmwich', 'Swadlincote', 'Swordbreak', 'Loshull', 'Ruyron', 'Fluasall', 'Blueross', 'Vlane'];\n\n        texte = 'Dans le parc naturel de ' + choice(lstNomParc) + ', il y a beaucoup d’animaux. Voici un tableau qui donne le nombre d’individus de quelques espèces.<br><br>';\n        texteCorr = ''\n        let entete = ['\\\\text{Animaux}']\n        let contenutableau,A,B,T,angle, a, legende, textelegende, hachures,a0,t,alpha\n        switch (parseInt(this.sup)) {\n            case 1: nbAnimaux = 2; break;\n            case 2: nbAnimaux = 3; break;\n            case 3: nbAnimaux = 4; break;\n            default: nbAnimaux = 4;\n        }\n        switch (parseInt(this.sup2)) {\n            case 1:\n                for (let i = 0; i < nbAnimaux; i++) {\n                    N = randint(10, 50, lstVal); // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n                    lstNombresAnimaux.push(N);\n                    lstVal = lstVal.concat([N - 1, N, N + 1]); // valeurs à supprimer pour éviter des valeurs proches\n                }\n                break;\n            case 2:\n                for (let i = 0; i < nbAnimaux; i++) {\n                    N = randint(10, 50, lstVal); // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n                    lstNombresAnimaux.push(10 * N);\n                    lstVal = lstVal.concat([N - 1, N, N + 1]); // valeurs à supprimer pour éviter des valeurs proches\n                }\n                break;\n        }\n        let effectiftotal = 0\n        for (let i = 0; i < nbAnimaux; i++) {\n            effectiftotal += lstNombresAnimaux[i]\n        }\n        for (let i = 0; i < nbAnimaux; i++) {\n            nom = choice(lstAnimaux, lstAnimauxExo); // choisit un animal au hasard sauf parmi ceux déjà utilisés\n            lstAnimauxExo.push(nom);\n            entete.push(`\\\\text{${nom}}`)\n        }\n        texte += `${tableauColonneLigne(entete, ['\\\\text{Effectifs}'], lstNombresAnimaux)}<br><br>`\n        objets_enonce = []\n        objets_correction = []\n\n        switch (listeTypeDeQuestions[0]) {\n            case 1:\n                texte += `Représenter ces données par un diagramme circulaire.<br><br>`\n                entete.push('\\\\text{Totaux}')\n                contenutableau = []\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(lstNombresAnimaux[i])\n                }\n                contenutableau.push(effectiftotal)\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(texFraction(lstNombresAnimaux[i], effectiftotal) + '\\\\approx ' + arrondiVirgule(lstNombresAnimaux[i] / effectiftotal, 2))\n                }\n                contenutableau.push('1')\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(`${texFraction(lstNombresAnimaux[i], effectiftotal)} \\\\times 360 \\\\approx ${Math.round(lstNombresAnimaux[i] * 360 / effectiftotal)}\\\\degree`)\n                }\n                contenutableau.push(`360\\\\degree`)\n\n                texteCorr += `${tableauColonneLigne(entete, ['\\\\text{Éffectifs}', '\\\\text{Fréquences}', '\\\\text{Angles}'], contenutableau, 3)}<br>`\n\n                A = point(0, 0)\n                B = point(6, 0)\n                T = point(7, 0)\n                a0 = cercleCentrePoint(A, B,'black')\n                objets_enonce.push(a0)\n                objets_correction.push(a0)\n                alpha = 0;\n\n                t = tracePoint(A)\n                t.style = '+'\n                objets_enonce.push(t)\n                objets_correction.push(t)\n\n                for (let i = 0; i < nbAnimaux; i++) {\n                    angle = 360 * lstNombresAnimaux[i] / effectiftotal\n                    a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n                    hachures = motifs(liste_motifs[i])\n                    a.hachures = hachures\n                    a.couleurDeRemplissage=texcolors(i + 1)\n                    a.couleurDesHachures=a.couleurDeRemplissage\n                    objets_correction.push(a)\n                    alpha += angle\n                    legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n                    legende.couleurDeRemplissage = a.couleurDeRemplissage\n                    legende.couleurDesHachures = a.couleurDesHachures\n                    legende.hachures = hachures\n                    legende.opaciteDeRemplissage = 0.7\n                    textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + .5, 0, 'black', 1.5, 'gauche', false)\n                    objets_correction.push(legende, textelegende)\n                    params_enonce = { xmin: -6.5, ymin: -6.5, xmax: 6.5, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n                    params_correction = { xmin: -6.5, ymin: -6.5, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n\n                }\n                break\n            case 2:\n                texte += `Représenter ces données par un diagramme semi-circulaire.<br><br>`\n                entete.push('\\\\text{Totaux}')\n                contenutableau = []\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(lstNombresAnimaux[i])\n                }\n                contenutableau.push(effectiftotal)\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(texFraction(lstNombresAnimaux[i], effectiftotal) + '\\\\approx ' + arrondiVirgule(lstNombresAnimaux[i] / effectiftotal, 2))\n                }\n                contenutableau.push('1')\n                for (let i = 0; i < nbAnimaux; i++) {\n                    contenutableau.push(`${texFraction(lstNombresAnimaux[i], effectiftotal)} \\\\times 180 \\\\approx ${Math.round(lstNombresAnimaux[i] * 180 / effectiftotal)}\\\\degree`)\n                }\n                contenutableau.push(`180\\\\degree`)\n\n                texteCorr += `${tableauColonneLigne(entete, ['\\\\text{Éffectifs}', '\\\\text{Fréquences}', '\\\\text{Angles}'], contenutableau, 3)}<br>`\n\n                A = point(0, 0)\n                B = point(6, 0)\n                T = point(7, 0)\n                a0 = arc(B, A, 180, true, 'white', 'black')\n                objets_enonce.push(a0)\n                objets_correction.push(a0)\n                alpha = 0;\n                angle, a, legende, textelegende, hachures\n                t = tracePoint(A)\n                t.style = '+'\n                objets_enonce.push(t)\n                objets_correction.push(t)\n\n                for (let i = 0; i < nbAnimaux; i++) {\n                    angle = 180 * lstNombresAnimaux[i] / effectiftotal\n                    a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n                    hachures = motifs(liste_motifs[i])\n                    a.hachures = hachures\n                    a.couleurDeRemplissage=texcolors(i + 1)\n                    a.couleurDesHachures=a.couleurDeRemplissage\n                    objets_correction.push(a)\n                    alpha += angle\n                    legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n                    legende.couleurDeRemplissage = a.couleurDeRemplissage\n                    legende.couleurDesHachures = a.couleurDesHachures\n                    legende.hachures = hachures\n                    legende.opaciteDeRemplissage = 0.7\n                    textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + .5, 0, 'black', 1.5, 'gauche', false)\n                    objets_correction.push(legende, textelegende)\n                    params_enonce = { xmin: -6.5, ymin: -0.2, xmax: 6.5, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n                    params_correction = { xmin: -6.5, ymin: -0.2, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n\n                }\n                break\n            case 3:\n                texte += `Représenter ces données par un diagramme en barres.<br>`\n                coef = 1;\n                switch (parseInt(this.sup2)) {\n                    case 1:\n                        coef = 1;\n                        break;\n                    case 2:\n                        coef = 10;\n                        break;\n                }\n                 r = repere2({\n                    grilleX: false,\n                    grilleY: 'pointilles',\n                    xThickListe: [],\n                    xLabelListe: [],\n                    yUnite: .1 / coef,\n                    yThickDistance: 10 * coef,\n                    yMax: 60 * coef,\n                    xMin: 0,\n                    xMax: 10,\n                    yMin: 0,\n                    axeXStyle: '',\n                    yLegende: \"Nombre d'individus\"\n                });\n\n                 lstElementGraph = []\n                for (let i = 0; i < nbAnimaux; i++) {\n                    objets_correction.push(traceBarre((((r.xMax - r.xMin) / (nbAnimaux + 1)) * (i + 1)), lstNombresAnimaux[i], premiereLettreEnMajuscule(lstAnimauxExo[i]), { unite: .1 / coef,couleurDeRemplissage:texcolors(i+1),hachures:\"north east lines\" }))\n                }\n                objets_correction.push(r)\n                params_enonce = { xmin: -6.5, ymin: 0, xmax: 6.5, ymax: 0, pixelsParCm: 20, scale: 1, mainlevee: false }\n                params_correction = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7, pixelsParCm: 20, scale: 1, mainlevee: false }\n\n                break\n\n            case 4:\n                texte += `Représenter ces données par un graphique cartésien.<br>`\n                coef = 1;\n                switch (parseInt(this.sup2)) {\n                    case 1:\n                        coef = 1;\n                        break;\n                    case 2:\n                        coef = 10;\n                        break;\n                }\n                r = repere2({\n                    grilleX: false,\n                    grilleY: 'pointilles',\n                    xThickListe: [],\n                    xLabelListe: [],\n                    yUnite: .1 / coef,\n                    yThickDistance: 10 * coef,\n                    yMax: 60 * coef,\n                    xMin: 0,\n                    xMax: 10,\n                    yMin: 0,\n                    axeXStyle: '',\n                    yLegende: \"Nombre d'individus\"\n                });\n\n                lstElementGraph = []\n                for (let i = 0; i < nbAnimaux; i++) {\n                lstElementGraph.push([(i+1)*2,lstNombresAnimaux[i]])  \n                objets_correction.push(texteParPosition(lstAnimauxExo[i],(i+1)*2,-0.2,66,'black',1,'gauche')) \n                objets_correction.push(segment((i+1)*2,-0.1,(i+1)*2,0.1))\n                }\n                g=traceGraphiqueCartesien(lstElementGraph,r,{couleurDesPoints : 'red',\n                couleurDuTrait : 'lightgray',\n                styleDuTrait : '', //plein par défaut\n                epaisseurDuTrait : 1,\n                styleDesPoints : 'o', //croix par défaut\n                tailleDesPoints : 3})\n           \n                objets_correction.push(r,g)\n\n                params_enonce = { xmin: -6.5, ymin: 0, xmax: 6.5, ymax: 0, pixelsParCm: 20, scale: 1, mainlevee: false }\n                params_correction = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7 , pixelsParCm: 20, scale: 1, mainlevee: false }\n\n                break\n        }\n        texte += mathalea2d(params_enonce, objets_enonce)\n        texteCorr += mathalea2d(params_correction, objets_correction)\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        listeQuestionsToContenuSansNumero(this); // On envoie l'exercice à la fonction de mise en page\n    };\n    this.besoinFormulaireNumerique = [`Nombre d'espèces différentes`, 3, ` 2 espèces\\n 2 : 3 espèces\\n 3 : 4 espèces`];\n    this.besoinFormulaire2Numerique = [`Valeurs numériques`, 2, ` Entre 1 et 100\\n Entre 100 et 1 000`];\n    this.besoinFormulaire3Numerique = ['Type de diagramme', 5, '1 : Diagramme circulaire\\n2 : Diagramme semi-circulaire\\n3 : Diagramme en barres\\n4 : Diagramme cartésien\\n5 : Au hasard']\n\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}