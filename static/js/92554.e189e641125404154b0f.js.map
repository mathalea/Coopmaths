{"version":3,"file":"js/92554.e189e641125404154b0f.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G20.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, creerNomDePolygone } from '../../modules/outils.js'\nimport { point, barycentre, vecteur, polygone, carre, nommePolygone, translation, rotation, homothetie, similitude, codageAngleDroit, codeSegments, codeAngle, grille, seyes, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Nommer et coder des polygones'\n\n/**\n * @author Jean-Claude Lhote\n * Placer les sommets et les égalités de longueur...\n * Référence 6G20\n */\nexport default function NommerEtCoderDesPolygones () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Nommer les figures en fonction de l'énoncé puis ajouter le codage.\"\n  this.nbQuestions = 4\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 3\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let Xmin, Xmax, Ymin, Ymax, sc, g, carreaux\n    const ppc = 40\n    if (context.isHtml) {\n      sc = 0.5\n    } else {\n      sc = 0.4\n    }\n\n    let params\n\n    const liste = combinaisonListes([1, 2, 3, 4, 5, 6, 7, 8], this.nbQuestions)\n\n    for (\n      let i = 0, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      context.pixelsParCm = 40\n      let pol, polcode, polsom, polnom\n      function choisirPolygone (n) { // n compris entre 1 et 8 (1 à 4 pour un triangle, 5 à 8 pour une quadrilatère)\n        let A, B, C, D\n        const nom = creerNomDePolygone(4, 'PQ'); let pnom; let q; let p; let pcode; let enonce\n        switch (n) {\n          case 1: // triangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, randint(25, 80), nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est isocèle en $${nom[0]}$.<br>`\n            break\n          case 2: // triangle équilatéral\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 60, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C, B, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est équilatéral.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 3: // triangle rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = similitude(B, A, 90, randint(30, 100) / 100, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = codageAngleDroit(B, A, C)\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle en $${nom[0]}$.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 4: // triangle rectangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 90, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codageAngleDroit(B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle et isocèle en $${nom[0]}$.`\n            break\n          // on choisit un quadrilatère\n          case 5: // carré\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            q = carre(A, B)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, B, C, C, D, D, A), codageAngleDroit(B, A, D), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un carré.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 6: // rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = similitude(A, B, -90, randint(30, 80) / 100, nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, C, D), codeSegments('|', 'red', C, B, A, D), codageAngleDroit(B, A, C), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un rectangle et $${nom[0] + nom[1]}$ est sa longueur.`\n            break\n          case 7: // losange\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = rotation(A, B, randint(100, 150), nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('O', 'blue', A, B, B, C, C, D, D, A), codeAngle(C, D, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(C, B, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(B, C, D, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(D, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un losange et [$${nom[0] + nom[2]}$] est sa plus grande diagonale.`\n            break\n          case 8: // trapèze rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            D = similitude(B, A, 90, randint(30, 80) / 100, nom[3])\n            C = translation(D, homothetie(vecteur(A, B), A, randint(30, 80) / 100), nom[2])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codageAngleDroit(B, A, D), codageAngleDroit(C, D, A)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un trapèze rectangle de grande base $${nom[0] + nom[1]}$ de hauteur $${nom[0] + nom[3]}$.`\n            break\n        }\n        return [p, nom, pcode, pnom, enonce]\n      }\n      [pol, polnom, polcode, polsom, texte] = choisirPolygone(liste[i])\n      if (pol.listePoints.length === 4) {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) + 1)\n      } else {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) + 1)\n      }\n      params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: ppc,\n        scale: sc\n      }\n      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (parseInt(this.sup === 2)) {\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        carreaux = ''\n      }\n\n      pol.epaisseur = 2\n      texte += '<br>' + mathalea2d(params, pol, polnom, g, carreaux)\n      texteCorr = mathalea2d(params, pol, polnom, polcode, polsom, g, carreaux)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    context.pixelsParCm = 20\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de cahier',\n    3,\n    ' 1 : Cahier à petits carreaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","NommerEtCoderDesPolygones","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","Xmin","Xmax","Ymin","Ymax","sc","g","carreaux","listeQuestions","listeCorrections","autoCorrection","params","context","liste","combinaisonListes","texte","texteCorr","i","cpt","pol","polcode","polsom","polnom","choisirPolygone","n","A","B","C","D","nom","creerNomDePolygone","pnom","q","p","pcode","enonce","point","randint","rotation","polygone","barycentre","listePoints","nommePolygone","codeSegments","codeAngle","similitude","codageAngleDroit","carre","translation","vecteur","homothetie","length","Math","floor","min","x","y","ceil","max","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","parseInt","seyes","epaisseur","mathalea2d","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}