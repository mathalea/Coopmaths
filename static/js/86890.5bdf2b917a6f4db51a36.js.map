{"version":3,"file":"js/86890.5bdf2b917a6f4db51a36.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/can/6e/can6G06.js"],"sourcesContent":["import { mathalea2d } from '../../../modules/2d.js'\nimport { homothetie3d, point3d, polygone3d, prisme3d, pyramide3d, pyramideTronquee3d, translation3d, vecteur3d } from '../../../modules/3d.js'\nimport { context } from '../../../modules/context.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../../modules/gestionInteractif.js'\nimport { listeQuestionsToContenuSansNumero, randint, shuffle } from '../../../modules/outils.js'\nimport Exercice from '../../Exercice.js'\nexport const titre = 'Trouver le nombre de faces ou d\\'arêtes d’un solide'\nexport const dateDePublication = '7/11/2021'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n/*!\n * @author Jean-Claude Lhote\n * Créé le 3/11/2021\n * Référence can6G06\n */\nexport default function NombreDeFacesEtDAretes () {\n  Exercice.call(this)\n  this.nbQuestions = 1\n  this.formatChampTexte = 'largeur15 inline'\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n    const typeDeQuestion = []\n    const choixA = []\n    const choixB = []\n    this.nbQuestions = Math.min(this.nbQuestions, 50) // Comme il n'y a que 70 questions différentes on limite pour éviter que la boucle ne cherche trop longtemp\n    for (let i = 0; i < 7; i++) {\n      choixA.push(i * 2 + 1)\n      choixB.push(i * 2 + 2)\n    }\n    const choix1 = shuffle(choixA)\n    const choix2 = shuffle(choixB)\n    for (let i = 0; i < Math.ceil(this.nbQuestions / 2); i++) {\n      typeDeQuestion.push(choix1[i % 7], choix2[i % 7])\n    }\n    console.log(typeDeQuestion)\n    for (let j = 0, choix; j < this.nbQuestions;) {\n      choix = typeDeQuestion[j]\n      context.anglePerspective = 20\n      const objets = []\n      const points3D = []\n      const n = randint(3, 8, 7)\n      const rayon = 4\n      const O = point3d(0, 0, 0)\n      const k = vecteur3d(0, 0, 2)\n      const k1 = homothetie3d(k, O, 2)\n      const k2 = homothetie3d(k, O, -1)\n      const s1 = translation3d(O, k1)\n      const s2 = translation3d(O, k2)\n      const alpha = Math.PI * 2 / n\n      const coeff = randint(5, 7) / 10\n      for (let i = 0; i < n; i++) {\n        points3D.push(point3d(rayon * Math.cos(alpha * i + (n > 5 ? 0.5 : 0)), rayon * Math.sin(alpha * i + (n > 5 ? 0.5 : 0)), 0, !(i > 0 && i <= (n / 2 - 0.1))))\n      }\n      const base = polygone3d(points3D)\n      const corps = prisme3d(base, k)\n      const base2 = translation3d(base, k)\n      for (let i = 0; i < base2.c2d.length; i++) {\n        base2.c2d[i].pointilles = 2 // !(i > 0 && i <= (n / 2 - 0.1)) ? false : 2\n      }\n      const chapeau1 = choix < 7 ? pyramide3d(base2, s1) : choix < 9 ? pyramide3d(base, s1) : choix < 13 ? pyramideTronquee3d(base, s1, coeff) : pyramide3d(base, s1)\n      const chapeau2 = choix < 9 ? pyramide3d(base, s2) : choix < 11 ? pyramideTronquee3d(base, s2, coeff) : choix < 13 ? pyramide3d(base, s2) : pyramideTronquee3d(base, s2, coeff)\n\n      for (let i = 0; i < n; i++) {\n        if (i >= 0 && i < n / 2) {\n          chapeau1.c2d[i].pointilles = 2\n          if (i !== 0) {\n            chapeau1.c2d[i + n].pointilles = 2\n          }\n          chapeau2.c2d[i].pointilles = 2\n          if (i !== 0) {\n            chapeau2.c2d[i + n].pointilles = 2\n          }\n          corps.c2d[i].pointilles = 2\n          if (choix < 5) {\n            corps.c2d[i + n].pointilles = 2\n          }\n          if (i !== 0) {\n            corps.c2d[i + 2 * n].pointilles = 2\n          }\n          if ((choix > 8 && choix < 11) || choix > 12) {\n            chapeau2.c2d[i + 2 * n].pointilles = 2\n          }\n          if (choix > 10 && choix < 13) {\n            if (i !== 0) {\n              chapeau2.c2d[i + n].pointilles = 2\n            }\n          }\n          if (choix > 12) {\n            if (i !== 0) {\n              chapeau1.c2d[i + n].pointilles = 2\n            }\n          }\n        }\n      }\n      switch (choix) {\n        case 1: // Prisme + 2 pyramides -> faces ?\n          objets.push(...corps.c2d, ...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 3 * n\n          this.correction = `Comme chacune des pyramides possède une base à $${n}$ sommets, alors le prisme et les deux pyramides possèdent aussi $${n}$ faces.<br>Ce solide est donc constitué de $3\\\\times ${n}$ faces soit $${3 * n}$ faces.`\n          break\n        case 2: // Prisme + 2 pyramides -> arêtes ?\n          objets.push(...corps.c2d, ...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 5 * n\n          this.correction = `Comme chacune des pyramides possède une base à $${n}$ sommets, alors elles ont aussi $${n}$ arêtes latérales auxquelles on ajoute les $${n}$ arêtes latérales du prisme.<br>Si on ajoute les $${n}$ arêtes de chacune des bases des pyramides, on obtient donc $5\\\\times ${n}$ arêtes soit $${5 * n}$ arêtes.`\n          break\n        case 3: // Prisme + 1 pyramides au dessus -> faces ?\n          objets.push(...corps.c2d, ...chapeau1.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -1, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n + 1\n          this.correction = `Comme le prisme a $${n}$ faces latérales, alors la pyramide en a $${n}$ aussi.<br>Si on ajoute la face du dessous, ce solide est donc constitué de $2\\\\times ${n}+1$ faces soit $${2 * n + 1}$ faces.`\n\n          break\n        case 4: // Prisme + 1 pyramides au dessus -> arêtes ?\n          objets.push(...corps.c2d, ...chapeau1.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -1, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 5 * n\n          this.correction = `Comme chacune des pyramides possède une base à $${n}$ sommets, alors elles ont aussi $${n}$ arêtes latérales auxquelles on ajoute les $${n}$ arêtes latérales du prisme.<br>Si on ajoute les $${n}$ arêtes de chacune des bases des pyramides, on obtient donc $5\\\\times ${n}$ arêtes soit $${5 * n}$ arêtes.`\n\n          break\n        case 5: // Prisme + 1 pyramides en dessous -> faces ?\n          objets.push(...corps.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 3.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n + 1\n          this.correction = `Comme le prisme a $${n}$ faces latérales, alors la pyramide en a $${n}$ aussi.<br>Si on ajoute la face du dessus, ce solide est donc constitué de $2\\\\times ${n}+1$ faces soit $${2 * n + 1}$ faces.`\n\n          break\n        case 6: // Prisme + 1 pyramides en dessous -> arêtes ?\n          objets.push(...corps.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 3.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 4 * n\n          this.correction = `Comme le prisme a $${n}$ arêtes latérales, alors la pyramide en a $${n}$ aussi.<br>En ajoutant les arêtes des deux bases du prisme soit $2\\\\times ${n}$ arêtes, on obtient donc $4\\\\times ${n}$ arêtes soit $${4 * n}$ arêtes.`\n          break\n        case 7: // 2 pyramides -> faces ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n\n          this.correction = `Comme chacune des pyramides possède une base à $${n}$ sommets, elles ont aussi $${n}$ faces latérales.<br>Ce solide est donc constitué de $2\\\\times ${n}$ faces soit $${2 * n}$ faces.`\n\n          break\n        case 8: // 2 pyramides -> arêtes ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 3 * n\n          this.correction = `Comme chacune des pyramides possède une base à $${n}$ sommets, alors elles ont aussi $${n}$ arêtes latérales auxquelles on ajoute les $${n}$ arêtes de la base commune aux deux pyramide.<br>On obtient donc $3\\\\times ${n}$ arêtes soit $${3 * n}$ arêtes.`\n          break\n        case 9: // 2 tronc de pyramides -> faces ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n + 2\n          this.correction = `Les deux pyramides tronquées ont une base commune à $${n}$ sommets, elles ont donc $${n}$ faces latérales chacune auxquelles il faut ajouter les deux faces parallèles du dessus et du dessous.<br>Ce solide est donc constitué de $2\\\\times ${n}+2$ faces soit $${2 * n + 2}$ faces.`\n\n          break\n        case 10: // 2 tronc de pyramides -> arêtes ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 5 * n\n          this.correction = `Les deux pyramides tronquées ont une base commune à $${n}$ sommets.<br>Donc elles ont aussi $${n}$ arêtes latérales chacune.<br>Il faut ajouter les $${n}$ arêtes de la base commune aux deux pyramides.<br>Enfin on ajoute les ${n} arêtes de la face du dessus et les ${n} arêtes de la face du dessous.<br>Au total, il y a $5\\\\times ${n}$ arêtes soit $${5 * n}$ arêtes.`\n          break\n        case 11: // 1 tronc de pyramides au dessus et 1 pyramide en dessous -> faces ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n + 1\n          this.correction = `Le solide est composé d'une pyramide à $${n}$ faces latérales et d'un tronc de pyramide<br>qui possède autant de faces latérales plus une face au dessus<br>Ce solide est donc constitué de $2\\\\times ${n}+1$ faces soit $${2 * n + 1}$ faces.`\n\n          break\n        case 12: // 1 tronc de pyramide au dessus et 1 pyramide en dessous -> arêtes ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 4 * n\n          this.correction = `Le solide est composé d'une pyramide à $${n}$ arêtes latérales et d'un tronc de pyramide<br>qui possède aussi $${n}$ arêtes latérales.<br>Il faut ajouter les $${n}$ arêtes de chacune des bases du tronc de pyramide.<br>Au total, il y a $4\\\\times ${n}$ arêtes soit $${4 * n}$ arêtes.`\n          break\n        case 13: // 1 tronc de pyramides en dessous et 1 pyramide au dessus -> faces ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 2 * n + 1\n          this.correction = `Le solide est composé d'une pyramide à $${n}$ faces latérales et d'un tronc de pyramide<br>qui possède autant de faces latérales plus une face au dessus<br>Ce solide est donc constitué de $2\\\\times ${n}+1$ faces soit $${2 * n + 1}$ faces.`\n\n          break\n        default: // 1 tronc de pyramide en dessous et 1 pyramide au dessus -> arêtes ?\n          objets.push(...chapeau1.c2d, ...chapeau2.c2d)\n          this.question = mathalea2d({ xmin: -6, ymin: -2.5, xmax: 6, ymax: 4.5, scale: 0.5, style: 'margin: auto' }, objets)\n          this.reponse = 4 * n\n          this.correction = `Le solide est composé d'une pyramide à $${n}$ arêtes latérales et d'un tronc de pyramide<br>qui possède aussi $${n}$ arêtes latérales.<br>Il faut ajouter les $${n}$ arêtes de chacune des bases du tronc de pyramide.<br>Au total, il y a $4\\\\times ${n}$ arêtes soit $${4 * n}$ arêtes.`\n          break\n      }\n      console.log(choix)\n      if (choix % 2 === 1) {\n        this.question += '<br>Quel est le nombre de faces de ce solide ?'\n      } else {\n        this.question += '<br>Quel est le nombre d\\'arêtes de ce solide ?'\n      }\n      if (this.questionJamaisPosee(j, choix, n)) {\n        setReponse(this, j, this.reponse)\n        this.question += ajouteChampTexteMathLive(this, j, 'largeur15 inline')\n        this.listeQuestions.push(this.question)\n        this.listeCorrections.push(this.correction)\n        j++\n      }\n    }\n    listeQuestionsToContenuSansNumero(this)\n  }\n}\n"],"names":["titre","dateDePublication","interactifReady","interactifType","amcReady","amcType","NombreDeFacesEtDAretes","Exercice","this","nbQuestions","formatChampTexte","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","typeDeQuestion","choixA","choixB","Math","min","i","push","choix1","shuffle","choix2","ceil","console","log","choix","j","context","objets","points3D","n","randint","rayon","O","point3d","k","vecteur3d","k1","homothetie3d","k2","s1","translation3d","s2","alpha","PI","coeff","cos","sin","base","polygone3d","corps","prisme3d","base2","c2d","length","pointilles","chapeau1","pyramide3d","pyramideTronquee3d","chapeau2","question","mathalea2d","xmin","ymin","xmax","ymax","scale","style","reponse","correction","questionJamaisPosee","setReponse","ajouteChampTexteMathLive","listeQuestionsToContenuSansNumero"],"sourceRoot":""}