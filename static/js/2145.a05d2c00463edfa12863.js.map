{"version":3,"file":"js/2145.a05d2c00463edfa12863.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2G36-7.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, abs, reduireAxPlusB, texFractionReduite, ecritureAlgebrique, pgcd, calcul } from '../../modules/outils.js'\nimport { repere2, droite, segment, tracePoint, labelPoint, point, mathalea2d } from '../../modules/2d.js'\nimport { setReponse, ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const titre = \"Lecture graphique des coefficients d'une équation réduite \"\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n/**\n 2G36-7, ex 2G50-2\n\n*/\nexport default function lecturegraphiquedeaetb (numeroExercice) {\n  Exercice.call(this)\n\n  this.consigne = 'Equation réduite de droite et représentation graphique '\n  this.nbQuestions = 3// On complète le nb de questions\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.tailleDiaporama = 100\n  this.video = ''\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.spacingCorr = 3\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = []\n    this.listeCorrections = []\n    // let typesDeQuestionsDisponibles = []\n    // typesDeQuestionsDisponibles = []// On complète selon le nb de cas dans l'exo (switch)\n\n    // const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, a, b, r, f, c, d, s1, s2, t, l, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) { // on rajoute les variables dont on a besoin\n      if (this.sup === 1) {\n        a = randint(-4, 4) // coefficient directeur\n        b = randint(-5, 5) // ordonnée à l'origine\n        if (a === 0 && b === 0) {\n          a = 1\n        }// On évite la situation de double nullité\n        r = repere2()// On définit le repère\n        c = droite(a, -1, b) // On définit l'objet qui tracera la courbe dans le repère\n        c.color = 'red'\n        c.epaisseur = 2\n        texte = 'A partir de la représentation graphique de la droite ci-dessous, donner par lecture graphique son équation réduite.<br>'\n        texte += mathalea2d({\n          xmin: -8,\n          ymin: -8,\n          xmax: 8,\n          ymax: 8,\n          scale: 0.5\n        }, r, f, c)// On trace le graphique\n        if (a === 0) {\n          texteCorr = 'On observe que la droite est horizontale. '\n          texteCorr += `<br>La droite est l'ensemble des points ayant comme ordonnée : $${b}$ `\n          texteCorr += `<br>L'équation réduite de cette droite est donc : $y=${b}$`\n        } else {\n          texteCorr = 'On sait que l\\'équation réduite d\\'une droite non verticale est de la forme : $y= ax+b$ avec $a$ et $b$ deux réels non tous deux nuls.<br>'\n          texteCorr += 'Le premier coefficient à lire graphiquement est $b$, l\\'ordonnée à l\\'origine de la droite.<br>'\n          texteCorr += 'C\\'est l\\'ordonnée du point d\\'intersection de la droite avec l\\'axe des ordonnées.<br>'\n          texteCorr += `On lit ici que le point $(0;${b}) \\\\in (d)$.<br>`\n          texteCorr += `On peut alors conclure que l'ordonnée à l'origine est : $b=${b}$. <br>`\n          texteCorr += 'On peut lire ensuite le coefficient directeur $a$ de la droite $(d)$.<br>'\n          texteCorr += 'On sait que $a=\\\\dfrac{\\\\text{Dénivelé vertical}}{\\\\text{Déplacement horizontal}}$'\n          texteCorr += `<br>En lisant le déplacement vertical correspondant à un déplacement horizontal d'une unité, on lit : <br>$a=\\\\dfrac{\\\\text{Dénivelé vertical}}{1}=${a}$`\n          texteCorr += '<br>On peut en déduire que l\\'équation réduite de la droite $(d)$ est :'\n\n          texteCorr += `$y=${reduireAxPlusB(a, b)}$`\n        }\n        if (b + a < -5 || b + a > 5) {\n          s1 = segment(-2, b - 2 * a, -1, b - 2 * a, 'blue')\n          s2 = segment(-1, b - 2 * a, -1, b - a, 'blue')\n\n          s1.epaisseur = 4\n          s2.epaisseur = 4\n          const A = point(0, b, 'A')\n          t = tracePoint(A, 'blue') // Variable qui trace les points avec une croix\n          l = labelPoint(A)// Variable qui trace les nom s A et B\n          l.color = 'blue'\n          if (a !== 0) {\n            texteCorr += mathalea2d({\n              xmin: -8,\n              ymin: -8,\n              xmax: 8,\n              ymax: 8,\n              scale: 0.5\n            }, r, s1, s2, t, l, c)\n          }\n        } else {\n          s1 = segment(0, b, 1, b, 'blue')\n          s2 = segment(1, b, 1, b + a, 'blue')\n\n          s1.epaisseur = 4\n          s2.epaisseur = 4\n          const A = point(0, b, 'A')\n          t = tracePoint(A, 'blue') // Variable qui trace les points avec une croix\n          l = labelPoint(A)// Variable qui trace les nom s A et B\n          l.color = 'blue'\n          if (a !== 0) {\n            texteCorr += mathalea2d({\n              xmin: -8,\n              ymin: -8,\n              xmax: 8,\n              ymax: 8,\n              scale: 0.5\n            }, r, s1, s2, t, l, c)\n          }\n        }\n        // On trace le graphique\n        setReponse(this, i, 'y=' + reduireAxPlusB(a, b))\n        if (context.isAmc) {\n          this.autoCorrection[i] = {\n            enonce: texte + '<br>',\n            propositions: [\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: texteCorr,\n                  statut: '',\n                  reponse: {\n                    texte: 'coefficient directeur',\n                    valeur: a,\n                    param: {\n                      digits: 1,\n                      decimals: 0,\n                      signe: true,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  statut: '',\n                  reponse: {\n                    texte: \"ordonnée à l'origine\",\n                    valeur: b,\n                    param: {\n                      digits: 1,\n                      decimals: 0,\n                      signe: true,\n                      approx: 0\n                    }\n                  }\n                }]\n              }\n            ]\n          }\n        }\n      }\n      if (this.sup === 2) { // cas du coeff directeur fractionnaire\n        a = randint(-5, 5, [0]) // numérateut coefficient directeur non nul\n        b = randint(-5, 5) // ordonnée à l'origine\n        d = randint(2, 5, 3) // dénominateur coefficient directeur\n        if (a === 0 && b === 0) {\n          a = 1\n          d = 3\n        }// On évite la situation de double nullité\n\n        r = repere2()// On définit le repère\n        c = droite(a / d, -1, b) // On définit l'objet qui tracera la courbe dans le repère\n        c.color = 'red'\n        c.epaisseur = 2// On définit l'objet qui tracera la courbe dans le repère\n\n        texte = 'A partir de la représentation graphique de la droite ci-dessous, donner par lecture graphique son équation réduite.<br>'\n        texte += mathalea2d({\n          xmin: -6,\n          ymin: -6,\n          xmax: 6,\n          ymax: 6,\n          scale: 0.5\n        }, r, c)// On trace le graphique\n        if (a === 0) {\n          texteCorr = 'On observe que la droite est horizontale. '\n          texteCorr += `<br>La droite est l'ensemble des points ayant comme ordonnée : $${b}$ `\n          texteCorr += `<br>L'équation réduite de cette droite est donc : $y=${b}$`\n        } else {\n          texteCorr = 'On sait que l\\'équation réduite d\\'une droite non verticale est de la forme : $y= ax+b$ avec $a$ et $b$ deux réels non tous deux nuls.<br>'\n          texteCorr += 'Le premier coefficient à lire graphiquement est $b$, l\\'ordonnée à l\\'origine de la droite.<br>'\n          texteCorr += 'C\\'est l\\'ordonnée du point d\\'intersection de la droite avec l\\'axe des ordonnées.<br>'\n          texteCorr += `On lit ici que : $A(0;${b}) \\\\in (d)$.<br>`\n          texteCorr += `On peut alors conclure que l'ordonnée à l'origine est : $b=${b}$. <br>`\n          texteCorr += 'On peut lire ensuite le coefficient directeur $a$ de la droite $(d)$.<br>'\n          texteCorr += 'On sait que $a=\\\\dfrac{\\\\text{Dénivelé vertical}}{\\\\text{Déplacement horizontal}}$'\n          texteCorr += '<br>On cherche un déplacement horizontal correspondant à un déplacement vertical entier.'\n          texteCorr += `<br>On lit que pour un déplacement vers la droite de ${d} unités, il faut `\n\n          if (a > 0) { texteCorr += 'monter de ' }\n          if (a < 0) { texteCorr += 'descendre de ' }\n          texteCorr += `${abs(a)} unités.`\n          texteCorr += `<br>Il vient : $a=\\\\dfrac{${a}}{${d}}`\n          if (pgcd(a, d) !== 1) {\n            texteCorr += `=${texFractionReduite(a, d)}`\n          }\n          texteCorr += '$'\n\n          texteCorr += '<br>On peut en déduire que l\\'équation réduite de la droite $(d)$ est : $y= '\n          if (a === d) { texteCorr += 'x' }\n          if (a === -d) { texteCorr += '-x' }\n          if (a !== d & a !== -d) { texteCorr += `${texFractionReduite(a, d)}x` }\n\n          if (b !== 0) { texteCorr += `${ecritureAlgebrique(b)}` }\n          texteCorr += '$.'\n\n          if (a > 0) {\n            s1 = segment(0, b - a, -d, b - a, 'blue')\n            s1.epaisseur = 4\n            s2 = segment(0, b - a, 0, b, 'blue')\n          }\n          if (a < 0) {\n            s1 = segment(0, b, d, b, 'blue')\n            s1.epaisseur = 4\n            s2 = segment(d, b - abs(a), d, b, 'blue')\n          }\n          s2.epaisseur = 4\n          const A = point(0, b, 'A')\n          t = tracePoint(A, 'red') // Variable qui trace les points avec une croix\n          l = labelPoint(A)// Variable qui trace les nom s A et B\n          l.color = 'red'\n          if (a !== 0) {\n            texteCorr += mathalea2d({\n              xmin: -6,\n              ymin: -10,\n              xmax: 6,\n              ymax: 10,\n              scale: 0.5\n            }, r, s1, s2, t, l, c)\n          }// On trace le graphique\n          setReponse(this, i, 'y=' + reduireAxPlusB(calcul(a / d), b))\n          if (context.isAmc) {\n            this.autoCorrection[i] = {\n              enonce: texte + '<br>',\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    texte: texteCorr,\n                    statut: '',\n                    reponse: {\n                      texte: 'coefficient directeur',\n                      valeur: calcul(a / d),\n                      param: {\n                        digits: 3,\n                        decimals: 2,\n                        signe: true,\n                        approx: 0\n                      }\n                    }\n                  }]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [{\n                    statut: '',\n                    reponse: {\n                      texte: \"ordonnée à l'origine\",\n                      valeur: b,\n                      param: {\n                        digits: 1,\n                        decimals: 0,\n                        signe: true,\n                        approx: 0\n                      }\n                    }\n                  }]\n                }\n              ]\n            }\n          }\n        }\n      }\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.questionJamaisPosee(i, a, b)) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Types de question ', 2, '1 : Valeurs entières.\\n2 : Valeurs fractionnaires.']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","lecturegraphiquedeaetb","numeroExercice","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","spacing","spacingCorr","sup","nouvelleVersion","parseInt","listeQuestions","listeCorrections","a","b","r","f","c","d","s1","s2","t","l","texte","texteCorr","i","cpt","randint","repere2","droite","color","epaisseur","mathalea2d","xmin","ymin","xmax","ymax","scale","reduireAxPlusB","segment","A","point","tracePoint","labelPoint","setReponse","context","autoCorrection","enonce","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","abs","pgcd","texFractionReduite","ecritureAlgebrique","calcul","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","correctionDetailleeDisponible","correctionDetaillee","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}