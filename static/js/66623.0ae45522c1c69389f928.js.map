{"version":3,"file":"js/66623.0ae45522c1c69389f928.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G20-0.js","webpack://mathalea/./src/js/exercices/6e/6G21.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import ConstruireUnTriangle from '../6e/6G21.js'\nexport const titre = 'Construire un triangle aux instruments'\n\n/**\n * @author Guillaume Valmont\n * reference 5G20-0\n * Publié le 21/08/2021\n */\nexport default function ConstruireUnTriangle5e () {\n  ConstruireUnTriangle.call(this)\n  this.titre = titre\n  this.sup2 = true\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListes, calcul, creerNomDePolygone, texNombre } from '../../modules/outils.js'\nimport { point, pointAdistance, droite, droiteParPointEtPerpendiculaire, polygoneAvecNom, cercle, pointIntersectionLC, pointIntersectionCC, traceCompas, codageAngleDroit, afficheLongueurSegment, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Construire un triangle aux instruments'\n\n/**\n * Publié le 30/08/202\n * @author Jean-Claude Lhote (exercice) et Rémi Angot (animation Instrumenpoche)\n * Référence 6G21 et 5G20-0\n * Modifié 2021/04/02\n */\nexport default function ConstruireUnTriangle () {\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 2\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.classe = 6\n  this.typeExercice = 'IEP'\n  this.besoinFormulaireNumerique = ['Types de constructions', 3, '1 : Trois longueurs.\\n2 : Angle droit et deux longueurs.\\n3 : Les deux.']\n  this.sup = 3\n  this.besoinFormulaire2CaseACocher = ['Ne pas montrer de schéma']\n  this.sup2 = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let IEP\n    let typesDeQuestionsDisponibles, A, B, C, CC, lAB, lBC, lAC, cA, cB, T, TT, dBC, dAB, objetsEnonce, objetsCorrection, paramsEnonce, paramsCorrection, nom, sommets\n    if (this.classe === 6 || this.classe === 5) {\n      switch (parseInt(this.sup)) {\n        case 1 :\n          typesDeQuestionsDisponibles = [1]\n          break\n        case 2 :\n          typesDeQuestionsDisponibles = [2]\n          break\n        default :\n          typesDeQuestionsDisponibles = [1, 2]\n          break\n      }\n    } else typesDeQuestionsDisponibles = [1]\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      IEP = new Alea2iep()\n      objetsEnonce = []\n      objetsCorrection = []\n      if (!this.sup2) {\n        texte = 'Le triangle ci-dessous a été réalisé à main levée.<br>Construire ce triangle avec les instruments de géométrie en respectant les mesures indiquées.<br>'\n      }\n      texteCorr = 'Voici la construction que tu devais réaliser.<br>'\n      nom = creerNomDePolygone(3, 'PQ')\n      sommets = []\n      for (let i = 0; i < 3; i++) sommets.push(nom[i])\n      sommets = shuffle(sommets)\n      A = point(0, 0, sommets[0], 'left')\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // triangle donné par trois longueurs\n          lAC = randint(35, 45)\n          lBC = calcul(randint(35, 45, lAC) / 10)\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = calcul(lAC / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          cB = cercle(B, lBC)\n          C = pointIntersectionCC(cA, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])\n\n          objetsEnonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))\n          objetsCorrection.push(traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))\n          if (this.sup2) {\n            texte = `Construire un triangle ${sommets[0]}${sommets[1]}${sommets[2]} avec ${sommets[0]}${sommets[1]} = ${texNombre(lAB)} cm, ${sommets[1]}${sommets[2]} = ${texNombre(lBC)} cm et ${sommets[0]}${sommets[2]} = ${texNombre(lAC)} cm.<br>`\n          }\n          texteCorr += 'Pour cette construction, nous avons utilisé le compas et la règle graduée.<br>'\n\n          IEP.triangle3longueurs(sommets, lAB, lAC, lBC)\n          break\n\n        case 2: // triangle rectangle donné par longueur hypoténuse et un côté de l'angle droit.\n          lAC = randint(70, 80) / 10\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          cA = cercle(A, lAC)\n          dAB = droite(A, B)\n          dBC = droiteParPointEtPerpendiculaire(B, dAB)\n          C = pointIntersectionLC(dBC, cA, sommets[2], 1)\n          CC = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, sommets[2])\n\n          objetsEnonce.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, A), codageAngleDroit(A, B, C))\n          objetsCorrection.push(traceCompas(A, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(C, A))\n          if (this.sup2) {\n            texte = `Construire un triangle ${sommets[0]}${sommets[1]}${sommets[2]} rectangle en ${sommets[1]} avec ${sommets[0]}${sommets[1]} = ${texNombre(lAB)} cm et ${sommets[0]}${sommets[2]} = ${texNombre(lAC)} cm.<br>`\n          }\n          texteCorr += 'Pour cette construction, nous avons utilisé la règle graduée, l\\'équerre et le compas.<br>'\n\n          IEP.triangleRectangleCoteHypotenuse(sommets, lAB, lAC)\n          break\n      }\n      T = polygoneAvecNom(A, B, C)\n      TT = polygoneAvecNom(A, B, CC)\n      objetsEnonce.push(TT[0], TT[1])\n      objetsCorrection.push(T[0], T[1])\n      paramsEnonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 0.3 }\n      paramsCorrection = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 2), ymin: Math.min(A.y - 1, B.y - 1, C.y - 2), xmax: Math.max(A.x + 1, B.x + 1, C.x + 2), ymax: Math.max(A.y + 1, B.y + 1, C.y + 2), pixelsParCm: 30, scale: 1 }\n\n      if (!this.sup2) {\n        texte += mathalea2d(paramsEnonce, objetsEnonce)\n      }\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n\n      texteCorr += IEP.htmlBouton(this.numeroExercice, i)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConstruireUnTriangle5e","ConstruireUnTriangle","this","sup2","Exercice","nbQuestions","nbCols","nbColsCorr","classe","typeExercice","besoinFormulaireNumerique","sup","besoinFormulaire2CaseACocher","nouvelleVersion","IEP","typesDeQuestionsDisponibles","A","B","C","CC","lAB","lBC","lAC","cA","cB","T","TT","dBC","dAB","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","nom","sommets","listeQuestions","listeCorrections","parseInt","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","Alea2iep","creerNomDePolygone","push","shuffle","point","randint","calcul","pointAdistance","positionLabel","cercle","pointIntersectionCC","x","y","afficheLongueurSegment","traceCompas","texNombre","triangle3longueurs","droite","droiteParPointEtPerpendiculaire","pointIntersectionLC","codageAngleDroit","triangleRectangleCoteHypotenuse","polygoneAvecNom","xmin","Math","min","ymin","xmax","max","ymax","pixelsParCm","scale","mainlevee","amplitude","mathalea2d","htmlBouton","numeroExercice","indexOf","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}