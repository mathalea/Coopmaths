{"version":3,"file":"js/23865.c93a63e80fa8598127f5.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6M31.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, arrondi, calcul, texNombre, texTexte } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, propositionsQcm, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Convertir des volumes'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = ['qcm', 'mathLive']\n\n/**\n * Conversions de volumes.\n *\n * Dans la correction, on ne voit qu'une multiplication ou qu'un division pour obtenir le résultat\n *\n * * 1 : Conversions en mètres-cubes avec des multiplications\n * * 2 : Conversions en mètres-cubes avec des divisions\n * * 3 : Conversions en mètres-cubes avec des multiplications ou divisions\n * * 4 : Conversions avec des multiplications ou divisions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Référence 6M31\n */\nexport default function ExerciceConversionsVolumes (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.sup3 = 1 // interactifType Qcm\n  this.titre = titre\n  this.consigne = 'Compléter :'\n  this.spacing = 2\n  this.nbColsCorr = 1\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n\n  this.nouvelleVersion = function () {\n    this.interactifType = parseInt(this.sup3) === 2 ? 'mathLive' : 'qcm'\n    this.autoCorrection = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const prefixeMulti = [\n      ['da', '10\\\\times10\\\\times10', 1000],\n      ['h', '100\\\\times100\\\\times100', 1000000],\n      ['k', '1~000\\\\times1~000\\\\times1~000', 1000000000]\n    ]\n    const prefixeDiv = [\n      ['d', '10\\\\div10\\\\div10', 1000],\n      ['c', '100\\\\div100\\\\div100', 1000000],\n      ['m', '1~000\\\\div1~000\\\\div1~000', 1000000000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    for (\n      let i = 0,\n        a,\n        k,\n        div,\n        resultat,\n        resultat2,\n        resultat3,\n        resultat4,\n        typesDeQuestions,\n        texte,\n        texteCorr,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      this.autoCorrection[i] = {}\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 4)\n      }\n      k = randint(0, 2) // Choix du préfixe\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else if (typesDeQuestions === 3) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions === 4) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        ])\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n\n        resultat = calcul(a * prefixeMulti[k][2]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(a * 10 ** (k + 1))\n        resultat3 = calcul(a * 10 ** (k - 2))\n        resultat4 = calcul(a * 10 ** ((k + 2)))\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^3' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^3' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^3' +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          prefixeMulti[k][1] +\n          texTexte(unite) +\n          '^3' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^3' +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        k = randint(0, 1) // Pas de conversions de mm^3 en m^3 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = calcul(a / prefixeMulti[k][2]).toString() // Attention aux notations scientifiques pour 10e-8\n        resultat2 = calcul(a / 10 ** (k + 1))\n        resultat3 = calcul(a / 10 ** (k - 2))\n        resultat4 = calcul(a / 10 ** ((k + 2)))\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^3' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^3' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^3' +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\div' +\n          prefixeDiv[k][1] +\n          texTexte(unite) +\n          '^3' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^3' +\n          '$'\n      } else if (typesDeQuestions === 4) {\n        const unite1 = randint(0, 3)\n        let ecart = randint(1, 2) // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1\n        }\n        const unite2 = unite1 + ecart\n        let multiplicationsPar1000 = ''\n\n        if (randint(0, 1) > 0) {\n          switch (ecart) {\n            case 1:\n              multiplicationsPar1000 = '\\\\times 1~000'\n              break\n            case 2:\n              multiplicationsPar1000 = '\\\\times 1~000 \\\\times 1~000'\n              break\n            case 3:\n              multiplicationsPar1000 =\n                '\\\\times 1~000 \\\\times 1~000 \\\\times 1~000'\n              break\n          }\n          resultat = calcul(a * Math.pow(10, 3 * ecart))\n          resultat2 = calcul(a * Math.pow(10, 2 * ecart))\n          resultat3 = calcul(a * Math.pow(10, ecart))\n          resultat4 = calcul(a * Math.pow(10, -3 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' =  ' +\n            texNombre(a) +\n            multiplicationsPar1000 +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            '$'\n        } else {\n          switch (ecart) {\n            case 1:\n              multiplicationsPar1000 = '\\\\div 1~000'\n              break\n            case 2:\n              multiplicationsPar1000 = '\\\\div 1~000 \\\\div 1~000'\n              break\n            case 3:\n              multiplicationsPar1000 = '\\\\div 1~000 \\\\div 1~000 \\\\div 1~000'\n              break\n          }\n          resultat = calcul(a / Math.pow(10, 3 * ecart))\n          resultat2 = calcul(a / Math.pow(10, 2 * ecart))\n          resultat3 = calcul(a / Math.pow(10, ecart))\n          resultat4 = calcul(a / Math.pow(10, -3 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' =  ' +\n            texNombre(a) +\n            multiplicationsPar1000 +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            '$'\n        }\n      }\n      // else if(typesDeQuestions==5) { // Pour typesDeQuestions==5\n      // prefixeMulti = [['L',0.001],['dL',0.0001],['cL',0.00001],['mL',0.000001]];\n      // k = randint(0,1)\n      // resultat = calcul(a*prefixeMulti[k][1]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n      // texte = '$ '+ texNombre(a) + texTexte(prefixeMulti[k][0]) + ' = \\\\dotfill ' + texTexte(unite)  + '^3' + '$';\n      // texteCorr = '$ '+ texNombre(a) + texTexte(prefixeMulti[k][0]) + ' =  ' + texNombre(a) + '\\\\times' + texNombre(prefixeMulti[k][1]) + texTexte(unite)  + '^3'\n      //  + ' = ' + texNombre(resultat) + texTexte(unite)+ '^2' + '$';\n      // }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [{\n        texte: `$${texNombre(resultat)}$`,\n        statut: true\n      },\n      {\n        texte: `$${texNombre(resultat2)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat3)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat4)}$`,\n        statut: false\n      }\n      ]\n      if (this.interactif && this.interactifType === 'qcm') {\n        texte += propositionsQcm(this, i).texte\n      } else {\n        texte += ajouteChampTexteMathLive(this, i)\n        setReponse(this, i, parseFloat(resultat))\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    4,\n    '1 : Conversions en mètres-cubes avec des multiplications\\n2 : Conversions en mètres-cubes avec des divisions\\n3 : Conversions en mètres-cubes avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n  if (context.isHtml && !context.isDiaporama) this.besoinFormulaire3Numerique = ['Exercice interactif', 2, '1 : QCM\\n2 : Numérique'] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","ExerciceConversionsVolumes","niveau","Exercice","this","sup","sup2","sup3","consigne","spacing","nbColsCorr","nouvelleVersion","parseInt","autoCorrection","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","a","k","div","resultat","resultat2","resultat3","resultat4","typesDeQuestions","texte","texteCorr","i","cpt","nbQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","ecart","unite2","multiplicationsPar1000","Math","pow","enonce","propositions","statut","interactif","propositionsQcm","ajouteChampTexteMathLive","setReponse","parseFloat","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}