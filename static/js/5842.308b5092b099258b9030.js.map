{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4G21.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["titre","amcReady","amcType","interactifReady","ReciproquePythagore","Exercice","this","interactif","consigne","nbQuestions","nbCols","nbColsCorr","sup","context","spacingCorr","nouvelleVersion","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","listeTripletsPythagoriciens","nomsTriangles","texte","texteCorr","a","b","c","A","B","C","nomTriangle","triplet","ordreDesCotes","i","cpt","autoCorrection","propositions","statut","options","ordered","creerNomDePolygone","push","choice","enleveElement","randint","Math","max","calcul","texNombre","texNombrec","propositionsQcm","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","feedback","messageFeedback","id","message","type","querySelectorAll","uicheck","exerciceQcm","espace","undefined","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","valeurs","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","reponses","Array","isArray","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/5842.308b5092b099258b9030.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, combinaisonListes, calcul, texNombrec, creerNomDePolygone, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Déterminer si un triangle est rectangle ou pas.'\nexport const amcReady = false // tant qu'il n'a pas été adapté à la version 2.6\nexport const amcType = 1 // QCM\nexport const interactifReady = true\n\n/**\n * À partir de la donnée des 3 longueurs d'un triangle, déterminer si il est rectangle ou pas.\n * @author Rémi Angot\n * 4G21\n */\nexport default function ReciproquePythagore () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactif = true\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 3\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeTypeDeQuestions = []\n    if (this.sup === 1) {\n      listeTypeDeQuestions = combinaisonListes(['rectangle'], this.nbQuestions)\n    } else if (this.sup === 2) {\n      listeTypeDeQuestions = combinaisonListes(['pas_rectangle'], this.nbQuestions)\n    } else { // (this.sup === 3)\n      listeTypeDeQuestions = combinaisonListes(['rectangle', 'pas_rectangle'], this.nbQuestions)\n    }\n    const listeTripletsPythagoriciens = [\n      [3, 4, 5],\n      [5, 12, 13],\n      [6, 8, 10],\n      [7, 24, 25],\n      [8, 15, 17],\n      [9, 12, 15],\n      [9, 40, 41],\n      [10, 24, 26],\n      [11, 60, 61],\n      [12, 16, 20],\n      [12, 35, 37],\n      [13, 84, 85],\n      [14, 48, 50],\n      [15, 20, 25],\n      [15, 36, 39],\n      [16, 30, 34],\n      [16, 63, 65],\n      [18, 24, 30],\n      [18, 80, 82],\n      [20, 21, 29],\n      [20, 48, 52],\n      [21, 28, 35],\n      [21, 72, 75],\n      [24, 32, 40],\n      [24, 45, 51],\n      [24, 70, 74],\n      [25, 60, 65],\n      [27, 36, 45],\n      [28, 45, 53],\n      [28, 96, 100],\n      [30, 40, 50],\n      [30, 72, 78],\n      [32, 60, 68],\n      [33, 44, 55],\n      [33, 56, 65],\n      [35, 84, 91],\n      [36, 48, 60],\n      [36, 77, 85],\n      [39, 52, 65],\n      [39, 80, 89],\n      [40, 42, 58],\n      [40, 75, 85],\n      [42, 56, 70],\n      [45, 60, 75],\n      [48, 55, 73],\n      [48, 64, 80],\n      [51, 68, 85],\n      [54, 72, 90],\n      [57, 76, 95],\n      [60, 63, 87],\n      [60, 80, 100],\n      [65, 72, 97]\n    ]\n    const nomsTriangles = [] // on mémorise les noms des triangles pour ne pas les redonner\n    for (\n      let i = 0,\n        texte,\n        texteCorr,\n        a,\n        b,\n        c, A, B, C,\n        nomTriangle,\n        triplet,\n        ordreDesCotes,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true }\n      nomTriangle = creerNomDePolygone(3, nomsTriangles)\n      nomsTriangles.push(nomTriangle)\n      A = nomTriangle[0]\n      B = nomTriangle[1]\n      C = nomTriangle[2]\n      triplet = choice(listeTripletsPythagoriciens)\n      enleveElement(listeTripletsPythagoriciens, triplet) // Supprime le triplet pour les prochaines questions\n      a = triplet[0]\n      b = triplet[1]\n      c = triplet[2]\n      if (listeTypeDeQuestions[i] === 'pas_rectangle') {\n        c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        while (a ** 2 + b ** 2 === c ** 2) {\n          // si par hasard (est-ce possible ?) on retombe sur un triplet pythagoricien on change les valeurs\n          c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        }\n      }\n      if (a > 9 && choice([true, true, true, false])) {\n        // le plus souvent on utilise des décimaux\n        a = calcul(a / 10)\n        b = calcul(b / 10)\n        c = calcul(c / 10)\n      }\n      ordreDesCotes = randint(1, 3)\n      switch (ordreDesCotes) {\n        case 1:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + B\n            }=${texNombre(c)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n        case 2:\n          texte = `Le triangle $${nomTriangle}$ est tel que  $${B + C\n            }=${texNombre(a)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${A + B\n            }=${texNombre(c)}$ cm.`\n          break\n        case 3:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + C\n            }=${texNombre(b)}$ cm, $${A + B}=${texNombre(c)}$ cm,  et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n      }\n      texte += '<br>Ce triangle est-il rectangle ?'\n      texteCorr = `Dans le triangle $${nomTriangle}$, le plus grand côté est $[${A + B\n        }]$.`\n      texteCorr += `<br>$${A + B}^2=${texNombre(c)}^2=${texNombrec(\n        c ** 2\n      )}$`\n      texteCorr += `<br>$${A + C}^2+${B + C}^2=${texNombre(b)}^2+${texNombre(\n        a\n      )}^2=${texNombrec(b ** 2 + a ** 2)}$`\n      if (listeTypeDeQuestions[i] === 'rectangle') {\n        this.autoCorrection[i].propositions[0].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore est vérifiée donc $${nomTriangle}$ est rectangle en $${C}$.`\n      } else {\n        this.autoCorrection[i].propositions[1].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2\\\\not=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore n'est pas vérifiée donc $${nomTriangle}$ n'est pas rectangle.`\n      }\n      texte += propositionsQcm(this, i).texte\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 3, \"1 : Démontrer qu'un triangle est rectangle\\n2 : Démontrer qu'un triangle n'est pas rectangle\\n3 : Déterminer si un triangle est rectangle ou pas \"]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1 && exercice.autoCorrection[i].propositions[indiceFeedback].feedback) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.', ',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true, indice } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}${indice || ''}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {array || number} a\n */\nexport function setReponse (exercice, i, valeurs, { digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0 } = {}) {\n  let reponses = []\n  if (!Array.isArray(valeurs)) {\n    reponses = [valeurs]\n  } else {\n    reponses = valeurs\n  }\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n  for (const reponse of reponses) {\n    exercice.autoCorrection[i].reponse.valeur = reponse\n  }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (const prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n/**\n * Fonctions pour gérer les messages utilisateur (feedback erreur|warning ou messages positifs)\n * @module\n */\n\n/**\n * Les types possibles\n * @type {string[]}\n */\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} feedback.message\n * @param {string} [feedback.type=error]\n * @param {string} [feedback.titre]\n * @return {HTMLElement} L'élément du feedback (déjà ajouté dans le container)\n */\nexport function addFeedback (container, { message, type = 'error', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  if (!message) throw Error('Message obligatoire pour tout retour utilisateur')\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}