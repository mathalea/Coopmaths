{"version":3,"file":"js/40052.9a3a1f927e22f5a0c9e9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6I10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, choice, katexPopup2 } from '../../modules/outils.js'\nimport { point, polygone, grille, texteParPosition, mathalea2d } from '../../modules/2d.js'\n\nexport const titre = 'Programmer des déplacements (scratch)'\n\n/**\n * * Colorier le déplacement d'un lutin\n * * 6Algo10\n * @author Erwan Duplessy\n */\nexport default function Colorier_Deplacement () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.typeExercice = 'Scratch'\n  this.sup = 1 // nombre de commandes = this.sup + 2\n  this.sup2 = false // 1 : sans boucle ; true : avec boucle\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.titre = titre\n  this.consigne = 'Dans le quadrillage, effectuer le programme.'\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestionsModifiable = false\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.listePackages = 'scratch3' // pour dessiner les blocs en LaTeX/Tikz\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    function scratchblocks_Tikz (code_svg, code_tikz) {\n      if (context.isHtml) {\n        return code_svg\n      } else {\n        return code_tikz\n      };\n    };\n\n    let texte = '' // texte de l'énoncé\n    let texteCorr = '' // texte du corrigé\n    let code_tikz = '' // code pour dessiner les blocs en tikz\n    let code_svg = '' // code pour dessiner les blocs en svg\n    const nbCommandes = Number(this.sup) + 2 // nombre de commandes de déplacement dans un script\n    let nbRepetition = 1 // Nombre de fois où la boucle est répétée.\n    if (this.sup2) {\n      nbRepetition = 3\n    }\n    // 0 : gauche, 1 : droite, 2 : haut, 3 : bas, 4 : colorier.\n    const lstCommandesTikz = ['\\\\blockmove{Aller à gauche}', '\\\\blockmove{Aller à droite}', '\\\\blockmove{Aller en haut}', '\\\\blockmove{Aller en bas}', '\\\\blockmove{Colorier la case}']\n    const lstCommandesSVG = ['Aller à gauche', 'Aller à droite', 'Aller en haut', 'Aller en bas', 'Colorier']\n    const lstAjoutXY = [[-1, 0], [1, 0], [0, 1], [0, -1], [0, 0]]\n    code_tikz += '\\\\medskip \\\\\\\\ \\\\begin{scratch} <br>'\n    code_svg += '<pre class=\\'blocks\\'>'\n    let n = 0 // variable temporaire pour stocker le numéro de la commande\n    const lstNumCommande = [] // liste des commandes successives\n    const lstX = [0] // liste des abscisses successives\n    const lstY = [0] // liste des ordonnées successives\n    if (this.sup2) {\n      code_svg += `répéter (${nbRepetition}) fois <br>`\n      code_tikz += `\\\\blockrepeat{répéter \\\\ovalnum{${nbRepetition}} fois} {`\n    }\n\n    for (let i = 0; i < nbCommandes; i++) {\n      n = choice([0, 1, 2, 3]) // choix d'un déplacement\n      code_tikz += lstCommandesTikz[n] // ajout d'un déplacement\n      code_svg += lstCommandesSVG[n] + '<br>' // ajout d'un déplacement\n      code_tikz += lstCommandesTikz[4] // ajout de l'instruction \"Colorier\"\n      code_svg += lstCommandesSVG[4] + '<br>' // ajout de l'instruction \"Colorier\"\n      lstNumCommande.push(n) // ajout d'un déplacement\n      lstNumCommande.push(4) // ajout de l'instruction \"Colorier\"\n      lstX.push(lstX[lstX.length - 1] + lstAjoutXY[n][0]) // calcul de la nouvelle abscisse\n      lstY.push(lstY[lstY.length - 1] + lstAjoutXY[n][1]) // calcul de la nouvelle ordonnée\n    }\n    for (let j = 0; j < nbRepetition - 1; j++) {\n      for (let i = 0; i < 2 * nbCommandes; i++) {\n        lstX.push(lstX[lstX.length - 1] + lstAjoutXY[lstNumCommande[i]][0])\n        lstY.push(lstY[lstY.length - 1] + lstAjoutXY[lstNumCommande[i]][1])\n      }\n    }\n    if (this.sup2) {\n      code_svg += 'fin <br>'\n      code_tikz += '}'\n    }\n    code_svg += '</pre>'\n    code_tikz += '\\\\end{scratch}'\n\n    const xLutinMin = Math.min(...lstX)\n    const xLutinMax = Math.max(...lstX)\n    const yLutinMin = Math.min(...lstY)\n    const yLutinMax = Math.max(...lstY)\n\n    if (context.isHtml) {\n      texte += '<table style=\"width: 100%\"><tr><td>'\n    } else {\n      texte += '\\\\begin{minipage}[t]{.25\\\\textwidth}'\n    }\n\n    texte += scratchblocks_Tikz(code_svg, code_tikz)\n\n    if (context.isHtml) {\n      texte += '</td><td>'\n      texte += '             '\n      texte += '</td><td style=\"vertical-align: top; text-align: center\">'\n    } else {\n      texte += '\\\\end{minipage} '\n      texte += '\\\\hfill \\\\begin{minipage}[t]{.74\\\\textwidth}'\n    }\n\n    const xGrilleMin = xLutinMin - 1\n    const xGrilleMax = xLutinMax + 2\n    const yGrilleMin = yLutinMin - 2\n    const yGrilleMax = yLutinMax + 1\n\n    const r2 = grille(xGrilleMin, yGrilleMin, xGrilleMax, yGrilleMax, 'black', 0.8, 1)\n    const lstObjet = [r2] // liste de tous les objets Mathalea2d\n\n    let p // carré gris représentant le lutin en position de départ\n    p = polygone(point(lstX[0], lstY[0]), point(lstX[0] + 1, lstY[0]), point(lstX[0] + 1, lstY[0] - 1), point(lstX[0], lstY[0] - 1))\n    p.opacite = 0.5\n    p.couleurDeRemplissage = 'black'\n    p.opaciteDeRemplissage = 0.5\n    p.epaisseur = 0\n    lstObjet.push(p)\n    let txt = '' // variable temporaire\n    for (let j = 0; j < (xGrilleMax - xGrilleMin); j++) {\n      txt = String.fromCharCode(65 + j) // ascii 65 = A\n      lstObjet.push(texteParPosition(txt, xGrilleMin + j + 0.5, yGrilleMax + 0.5, 'milieu', 'black', 1)) // affiche de A à J... en haut de la grille\n    }\n    for (let i = 0; i < (yGrilleMax - yGrilleMin); i++) {\n      lstObjet.push(texteParPosition(String(i), xGrilleMin - 0.25, yGrilleMax - i - 0.5, 'gauche', 'black', 1)) // affiche de 0 à 9... à gauche de la grille\n    }\n\n    texte += 'Au départ, le lutin est situé dans la case grisée. Chaque déplacement se fait dans une case adjacente. <br><br>'\n    if (!context.isHtml) { texte += '\\\\begin{center}' }\n    texte += mathalea2d({ xmin: xGrilleMin - 3, xmax: xGrilleMax + 1, ymin: yGrilleMin - 1, ymax: yGrilleMax + 1, pixelsParCm: 20, scale: 0.5 }, lstObjet)\n    if (context.isHtml) {\n      texte += '</td></tr></table>'\n    } else {\n      texte += '\\\\end{center}\\\\end{minipage} '\n      texte += '\\\\hfill \\\\null'\n    }\n\n    // CORRECTION\n    // 0 : gauche, 1 : droite, 2 : haut, 3 : bas, 4 : colorier.\n    let xLutin = 0 // position initiale du carré\n    let yLutin = 0 // position initiale du carré\n    const couleur = 'red'\n\n    // on fait un dessin par passage dans la boucle\n    if (context.isHtml) {\n      texteCorr += '<table style=\"width:100%\"><tr><td style=\"text-align:center\">'\n    } else {\n      texteCorr += '\\\\begin{minipage}{.49\\\\textwidth}'\n    }\n    for (let k = 0; k < nbRepetition; k++) {\n      for (let i = k * lstNumCommande.length; i < (k + 1) * lstNumCommande.length; i++) {\n        switch (lstNumCommande[i % lstNumCommande.length]) {\n          case 0:\n            xLutin += -1; break\n          case 1:\n            xLutin += 1; break\n          case 2:\n            yLutin += 1; break\n          case 3:\n            yLutin += -1; break\n          case 4:\n            p = polygone(point(xLutin, yLutin), point(xLutin + 1, yLutin), point(xLutin + 1, yLutin - 1), point(xLutin, yLutin - 1))\n            p.couleurDeRemplissage = couleur\n            p.opaciteDeRemplissage = 0.25\n            p.epaisseur = 0\n            lstObjet.push(p)\n        }\n      }\n      if (this.sup2) {\n        texteCorr += `Passage n° ${k + 1} dans la boucle : <br>`\n      }\n      texteCorr += mathalea2d({ xmin: xGrilleMin - 3, xmax: xGrilleMax + 1, ymin: yGrilleMin - 1, ymax: yGrilleMax + 1, pixelsParCm: 20, scale: 0.4 }, lstObjet)\n      if (context.isHtml) {\n        if (k % 3 == 2) {\n          texteCorr += '</td></tr><tr><td style=\"text-align:center\">' // retour à la ligne après 3 grilles dessinées en HTML\n        } else {\n          texteCorr += '</td><td></td><td style=\"text-align:center\">'\n        }\n      } else {\n        texteCorr += '\\\\end{minipage}'\n        if (k % 2 == 1) { texteCorr += '\\\\\\\\ ' } // retour à la ligne après 2 grilles dessinées en LaTeX\n        texteCorr += '\\\\begin{minipage}{.49\\\\textwidth}'\n      }\n    }\n    context.isHtml ? texteCorr += '</td></tr></table>' : texteCorr += '\\\\end{minipage}'\n\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Nombre d\\'instructions de déplacements', 3, '1 : 3 instructions\\n2 : 4 instructions\\n3 : 5 instructions']\n  this.besoinFormulaire2CaseACocher = ['Avec une boucle']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Colorier_Deplacement","Exercice","this","typeExercice","sup","sup2","nbQuestions","nbQuestionsModifiable","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","listePackages","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","code_tikz","code_svg","nbCommandes","Number","nbRepetition","lstCommandesTikz","lstCommandesSVG","lstAjoutXY","n","lstNumCommande","lstX","lstY","i","choice","push","length","j","xLutinMin","Math","min","xLutinMax","max","yLutinMin","yLutinMax","scratchblocks_Tikz","xGrilleMin","xGrilleMax","yGrilleMin","yGrilleMax","lstObjet","grille","p","polygone","point","opacite","couleurDeRemplissage","opaciteDeRemplissage","epaisseur","txt","String","fromCharCode","texteParPosition","mathalea2d","xmin","xmax","ymin","ymax","pixelsParCm","scale","xLutin","yLutin","k","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}