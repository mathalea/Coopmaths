{"version":3,"file":"js/10824.8b237dd410fd2daf1d29.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Exercice_perimetres_et_aires.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, combinaisonListes, arrondiVirgule, calcul, texNombrec, creerNomDePolygone, texNombre, arrondi, sp, nombreDeChiffresDe, nombreDeChiffresDansLaPartieDecimale } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nimport Grandeur from '../../modules/Grandeur.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Déterminer le périmètre et l'aire d'un carré, d'un rectangle, d'un triangle rectangle, d'un cercle\n *\n * * 1 : Carré, rectangle et triangle rectangle\n * * 2: Uniquement des cercles\n * * 3 : Les 4 sont demandés\n * @author Rémi Angot// modifié par Mireille Gain pour le support des décimaux\n * * Relecture EE : Décembre 2021\n */\nexport default function ExercicePerimetresEtAires (difficulte = 1) {\n  // Calculer le périmètre et l'aire de figures\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = difficulte\n  this.titre = \"Calculs de périmètres et d'aires\"\n  this.consigne =\n    'Pour chacune des figures, calculer son périmètre puis son aire (valeur exacte et si nécessaire, valeur approchée au dixième près).'\n  this.spacing = 1\n  this.nbQuestions = 4\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const reponses = []\n    let resultat1, resultat2\n    const tripletsPythagoriciens = [\n      [3, 4, 5],\n      [6, 8, 10],\n      [15, 8, 17],\n      [24, 10, 26],\n      [5, 12, 13],\n      [12, 16, 20],\n      [21, 20, 29],\n      [9, 40, 41]\n    ]\n    let typesDeQuestionsDisponibles = [\n      'carre',\n      'rectangle',\n      'triangle_rectangle',\n      'cercle'\n    ]; let typesDeQuestions\n    let partieDecimale1, partieDecimale2\n    if (this.sup2) {\n      partieDecimale1 = calcul(randint(1, 9) / 10)\n      partieDecimale2 = calcul(randint(1, 9) / 10)\n    } else {\n      partieDecimale1 = 0\n      partieDecimale2 = 0\n    }\n\n    if (this.sup === 1) {\n      enleveElement(typesDeQuestionsDisponibles, 'cercle')\n      this.nbCols = 1\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = ['cercle']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cote, nomCarre, L, l, nomRectangle, a, b, c, nomTriangle, triplet, R, donneLeDiametre, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 'carre':\n          cote = calcul(randint(2, 11) + partieDecimale1)\n          nomCarre = creerNomDePolygone(4)\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un carré $${nomCarre}$ de $${texNombre(cote)}$ cm de côté .<br>` + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          } else {\n            texte = `Un carré $${nomCarre}$ tel que $${nomCarre[0] + nomCarre[1]} = ${texNombre(cote)}$ cm.` + '<br>' + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nomCarre}}=4\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(4 * cote)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomCarre}}=${texNombre(cote)}~\\\\text{cm}\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(cote * cote)}~\\\\text{cm}^2$`\n          resultat1 = calcul(4 * cote)\n          resultat2 = calcul(cote * cote)\n          break\n        case 'rectangle':\n          L = calcul(randint(3, 11) + partieDecimale2)\n          l = randint(2, L - 1)\n          nomRectangle = creerNomDePolygone(4)\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un rectangle $${nomRectangle}$ de $${texNombre(L)}$ cm de longueur et de $${l}$ cm de largeur.<br>` + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          } else {\n            texte = `Un rectangle $${nomRectangle}$ tel que $${nomRectangle[0] + nomRectangle[1] + ' = ' + texNombre(L)}$ cm et $${nomRectangle[1] + nomRectangle[2] + ' = ' + l}$ cm.` + '<br>' + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          }\n          texteCorr = `$\\\\mathcal{P}_{${nomRectangle}}=(${texNombre(L)}~\\\\text{cm}+${l}~\\\\text{cm})\\\\times2=${texNombrec((L + l) * 2)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomRectangle}}=${texNombre(L)}~\\\\text{cm}\\\\times${l}~\\\\text{cm}=${texNombrec(L * l)}~\\\\text{cm}^2$`\n          resultat1 = calcul(2 * L + 2 * l)\n          resultat2 = calcul(L * l)\n          break\n        case 'triangle_rectangle':\n          triplet = choice(tripletsPythagoriciens)\n          enleveElement(tripletsPythagoriciens, triplet)\n          a = calcul(triplet[0] * (1 + partieDecimale1))\n          b = calcul(triplet[1] * (1 + partieDecimale1))\n          c = calcul(triplet[2] * (1 + partieDecimale1))\n          nomTriangle = creerNomDePolygone(3)\n          if (choice([true, false])) {\n            texte = `Un triangle $${nomTriangle}$ rectangle en $${nomTriangle[1]}$ tel que $${nomTriangle[0] + nomTriangle[1] + ' = ' + texNombre(a)}$ cm, $${nomTriangle[1] + nomTriangle[2] + ' = ' + texNombre(b)}$ cm\\\n et $${nomTriangle[0] + nomTriangle[2] + ' = ' + texNombre(c)}$ cm.` + '<br>' + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          } else {\n            texte = `Un triangle rectangle $${nomTriangle}$ a pour côtés : $${texNombre(a)}$ cm, $${texNombre(c)}$ cm et $${texNombre(b)}$ cm.` + '<br>' + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nomTriangle}}=${texNombre(a)}~\\\\text{cm}+${texNombre(b)}\n          ~\\\\text{cm}+${texNombre(c)}~\\\\text{cm}=${texNombre(a + b + c)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomTriangle}}=${texNombre(a)}~\\\\text{cm}\\\\times${texNombre(b)}~\\\\text{cm}\\\\div2=${texNombrec(a * b / 2)}~\\\\text{cm}^2$`\n          resultat1 = calcul(a + b + c)\n          resultat2 = calcul(a * b / 2)\n          break\n        case 'cercle':\n          R = randint(3, 11)\n          donneLeDiametre = choice([true, false])\n          if (donneLeDiametre) {\n            texte = `Un cercle de $${2 * R}$ cm de diamètre.` + '<br>' + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n            texteCorr = `Le diamètre est de $${2 * R}$ cm donc le rayon est de $${R}$ cm.<br>`\n          } else {\n            texte = `Un cercle de $${R}$ cm de rayon.` + sp(2) + ajouteChampTexteMathLive(this, 2 * i, 'largeur25 inline longueur', { texte: '<br>Périmètre : ' }) + '<br>' + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur25 inline longueur', { texte: '<br>' + sp(13) + 'Aire : ' })\n            texteCorr = ''\n          }\n\n          texteCorr += `$\\\\mathcal{P}=2\\\\times${R}\\\\times\\\\pi~\\\\text{cm}=${2 * R}\\\\pi~\\\\text{cm}\\\\approx${arrondiVirgule(\n            2 * R * Math.PI,\n            1\n          )}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}=${R}\\\\times${R}\\\\times\\\\pi~\\\\text{cm}^2=${R * R}\\\\pi~\\\\text{cm}^2\\\\approx${arrondiVirgule(\n            R * R * Math.PI,\n            1\n          )}~\\\\text{cm}^2$`\n          resultat1 = arrondi(2 * R * Math.PI, 1)\n          resultat2 = arrondi(R * R * Math.PI, 1)\n          break\n      }\n\n      if (reponses.indexOf(resultat1 * resultat2) === -1) {\n        reponses.push(resultat1 * resultat2)\n        if (!context.isAmc) {\n          setReponse(this, 2 * i, new Grandeur(resultat1, 'cm'), { formatInteractif: 'longueur' })\n          setReponse(this, 2 * i + 1, new Grandeur(resultat2, 'cm^2'), { formatInteractif: 'longueur' })\n        } else {\n          this.autoCorrection[i] = {\n            enonce: texte,\n            propositions: [\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: texteCorr,\n                  statut: '',\n                  reponse: {\n                    texte: 'Périmètre',\n                    valeur: resultat1,\n                    param: {\n                      digits: nombreDeChiffresDe(resultat1),\n                      decimals: nombreDeChiffresDansLaPartieDecimale(resultat1),\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: '',\n                  statut: '',\n                  reponse: {\n                    texte: 'Aire',\n                    valeur: resultat2,\n                    param: {\n                      digits: nombreDeChiffresDe(resultat2),\n                      decimals: nombreDeChiffresDansLaPartieDecimale(resultat2),\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              }]\n          }\n        }\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    3,\n    '1 : Carré, rectangle et triangle rectangle\\n2 : Cercles\\n3 : Mélange'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des décimaux', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","ExercicePerimetresEtAires","difficulte","Exercice","this","sup","titre","consigne","spacing","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","reponses","resultat1","resultat2","tripletsPythagoriciens","typesDeQuestions","partieDecimale1","partieDecimale2","typesDeQuestionsDisponibles","sup2","calcul","randint","enleveElement","nbCols","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","cote","nomCarre","L","l","nomRectangle","a","b","c","nomTriangle","triplet","R","donneLeDiametre","i","cpt","creerNomDePolygone","choice","texNombre","ajouteChampTexteMathLive","sp","texNombrec","arrondiVirgule","Math","PI","arrondi","indexOf","push","context","autoCorrection","enonce","propositions","type","statut","reponse","valeur","param","digits","nombreDeChiffresDe","decimals","nombreDeChiffresDansLaPartieDecimale","signe","approx","setReponse","Grandeur","formatInteractif","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}