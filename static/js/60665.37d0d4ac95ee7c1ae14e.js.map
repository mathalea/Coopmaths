{"version":3,"file":"js/60665.37d0d4ac95ee7c1ae14e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Construire_un_triangle_avec_cible.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, creerNomDePolygone, lettreDepuisChiffre, nombreAvecEspace, range1 } from '../../modules/outils.js'\nimport { codeSegments, point, pointIntersectionDD, longueur, pointAdistance, labelPoint, droite, droiteParPointEtPerpendiculaire, segmentAvecExtremites, polygoneAvecNom, cercle, pointIntersectionLC, pointIntersectionCC, traceCompas, dansLaCibleRonde, cibleRonde, rotation, similitude, codageAngleDroit, afficheLongueurSegment, afficheMesureAngle, codeAngle, texteParPoint, angle, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\n/**\n * publié le 1/12/2020\n * @author Jean-Claude Lhote\n * Réfrence 6G21-1 et ... (exercice en 5e ? pas encore fait)\n */\nexport default function ConstruireUnTriangleAvecCible () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = 'Construire un triangle avec cible auto-corrective'\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.classe = 6\n  this.typeExercice = 'IEP'\n\n  this.nouvelleVersion = function () {\n    let IEP\n    let xMin\n    let yMax\n    this.listeQuestions = []\n    this.listeCorrections = []\n    const celluleAleaRonde = function (rang) {\n      const lettre = lettreDepuisChiffre(randint(1, 8))\n      const chiffre = Number(randint(1, rang)).toString()\n      return lettre + chiffre\n    }\n\n    let typesDeQuestionsDisponibles, cible, cellule, result, A, B, C, CC, lAB, lBC, lAC, cA, cB, T, TT, dBC, dAC, dAB, objetsEnonceml, objetsEnonce, objetsCorrection, paramsEnonceml, paramsEnonce, paramsCorrection, nom, sommets, montriangle\n    if (this.classe === 6) typesDeQuestionsDisponibles = range1(6)\n    else typesDeQuestionsDisponibles = range1(9)\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      IEP = new Alea2iep()\n      objetsEnonce = []\n      objetsEnonceml = []\n      objetsCorrection = []\n      texte = 'Le triangle ci-dessous a été réalisé à main levée.<br>Construire ce triangle avec les instruments de géométrie en respectant les mesures indiquées.<br>'\n      texteCorr = 'Voici la construction que tu devais réaliser.<br>'\n      nom = creerNomDePolygone(3, 'PQ')\n      sommets = []\n      for (let i = 0; i < 3; i++) sommets.push(nom[i])\n      A = point(0, 0, sommets[0], 'left')\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // triangle quelconque par ses trois longueurs\n          lAC = randint(35, 45)\n          lBC = calcul(randint(35, 45, lAC) / 10)\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = calcul(lAC / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          cB = cercle(B, lBC)\n          C = pointIntersectionCC(cA, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B, 'black', 1), afficheLongueurSegment(A, C, 'black', 1))\n          objetsCorrection.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), afficheLongueurSegment(A, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé le compas et la règle graduée.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangle3longueurs(nom, lAB, lAC, lBC, true)\n          break\n        case 2: // triangle ABC rectangle en B dont on connait AB et BC\n          lBC = randint(70, 80) / 10\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cB = cercle(B, lBC)\n          dAB = droite(A, B)\n          dBC = droiteParPointEtPerpendiculaire(B, dAB)\n          C = pointIntersectionLC(dBC, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B, 'black', 1), codageAngleDroit(A, B, CC))\n          objetsCorrection.push(cible, traceCompas(B, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B))\n          texteCorr += 'Pour cette construction, nous avons utilisé la règle graduée, l\\'équerre et le compas.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangleRectangle2Cotes(nom, lAB, lBC, true)\n          break\n        case 3: // triangle ABC isocèle en A\n          lBC = calcul(randint(35, 45) / 10)\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = lAB\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          cB = cercle(B, lBC)\n          C = pointIntersectionCC(cA, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(C, B, 'black', 1), codeSegments('||', 'black', A, B, A, CC))\n          objetsCorrection.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), afficheLongueurSegment(C, B), codeSegments('||', 'black', A, B, A, C), afficheLongueurSegment(A, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé le compas et la règle graduée.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          montriangle = IEP.triangle3longueurs(nom, lAB, lAC, lBC, true)\n          IEP.segmentCodage(montriangle[0], montriangle[1], { codage: '\\\\\\\\' })\n          IEP.segmentCodage(montriangle[0], montriangle[2], { codage: '\\\\\\\\' })\n          break\n        case 4: // triangle ABC recatangle isocèle en B\n          lAB = calcul(randint(46, 60) / 10)\n          lBC = lAB\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cB = cercle(B, lBC)\n          dAB = droite(A, B)\n          dBC = droiteParPointEtPerpendiculaire(B, dAB)\n          C = pointIntersectionLC(dBC, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), codeSegments('||', 'black', A, B, B, CC), codageAngleDroit(A, B, CC))\n          objetsCorrection.push(cible, traceCompas(B, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), codeSegments('||', 'black', A, B, B, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé l\\'équerre et la règle graduée.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          montriangle = IEP.triangleRectangle2Cotes(nom, lAB, lAB, true)\n          IEP.segmentCodage(montriangle[0], montriangle[1], { codage: '\\\\\\\\' })\n          IEP.segmentCodage(montriangle[1], montriangle[2], { codage: '\\\\\\\\' })\n          break\n        case 5: // triangle équilatéral\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = lAB\n          lBC = lAB\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          cB = cercle(B, lBC)\n          C = pointIntersectionCC(cA, cB, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), codeSegments('||', 'black', A, B, B, CC, A, CC))\n          objetsCorrection.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), traceCompas(B, C, 30, 'gray', 1, 2), afficheLongueurSegment(B, A), codeSegments('||', 'black', A, B, B, C, A, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé le compas et la règle graduée.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangleEquilateral(nom, lAB, true)\n          break\n        case 6: // triangle ABC dont on connait AB et AC et l'angle BAC\n          lAB = calcul(randint(46, 60) / 10)\n          lAC = randint(40, 60) / 10\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1], 'right')\n          C = similitude(B, A, randint(8, 24) * 5, lAC / lAB, sommets[2], 'above')\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(codeAngle(B, A, CC, 1.1), afficheLongueurSegment(B, A), texteParPoint(nombreAvecEspace(Math.round(angle(B, A, C))) + '°', similitude(B, A, angle(B, A, C) / 2, 1 / lAB + 0.1)), afficheLongueurSegment(A, C, 'black', 1))\n          objetsCorrection.push(cible, afficheLongueurSegment(B, A), afficheMesureAngle(B, A, C, 'black', 1), afficheLongueurSegment(A, C, 'black', 1))\n          texteCorr += 'Pour cette construction, nous avons utilisé le rapporteur et la règle graduée.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangle2longueurs1angle(nom, lAB, lAC, Math.round(angle(B, A, C)), true)\n          break\n        case 7: // triangle ABC dont ont connais AB et les deux angles adjacents\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          dAB = droite(A, B)\n          dAC = rotation(dAB, A, randint(8, 14) * 5)\n          dBC = rotation(dAB, B, -randint(8, 12) * 5)\n          C = pointIntersectionDD(dAC, dBC, sommets[2])\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(codeAngle(B, A, CC, 1.1), texteParPoint(nombreAvecEspace(Math.round(angle(B, A, C))) + '°', similitude(B, A, angle(B, A, C) / 2, 1 / lAB + 0.1)), codeAngle(A, B, CC, 1.1), texteParPoint(nombreAvecEspace(Math.round(angle(A, B, C))) + '°', similitude(A, B, -angle(A, B, C) / 2, 1 / lAB + 0.1)))\n          objetsCorrection.push(cible, afficheLongueurSegment(B, A), afficheMesureAngle(B, A, C, 'black', 1), afficheMesureAngle(A, B, C, 'black', 1))\n          texteCorr += 'Pour cette construction, nous avons utilisé le rapporteur.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangle1longueur2angles(sommets, lAB, Math.round(angle(B, A, C)), Math.round(angle(A, B, C)))\n          break\n        case 8: // triangle ABC rectangle en B dont on connait AB et l'hypoténuse AC\n          lAC = randint(70, 80) / 10\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          cA = cercle(A, lAC)\n          dAB = droite(A, B)\n          dBC = droiteParPointEtPerpendiculaire(B, dAB)\n          C = pointIntersectionLC(dBC, cA, sommets[2], 1)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(afficheLongueurSegment(B, A), afficheLongueurSegment(A, C, 'black', 1), codageAngleDroit(A, B, CC))\n          objetsCorrection.push(cible, traceCompas(A, C, 30, 'gray', 1, 2), codageAngleDroit(A, B, C), afficheLongueurSegment(B, A), afficheLongueurSegment(A, C))\n          texteCorr += 'Pour cette construction, nous avons utilisé la règle graduée, l\\'équerre et le compas.<br>'\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangleRectangleCoteHypotenuse(nom, lAB, lAC, true)\n          break\n        case 9: // triangle ABC dont ont connais AB un angle adjacent et l'angle opposé\n          lAB = calcul(randint(46, 60) / 10)\n          B = pointAdistance(A, lAB, randint(-45, 45), sommets[1])\n          B.positionLabel = 'right'\n          dAB = droite(A, B)\n          dAC = rotation(dAB, A, randint(8, 14) * 5)\n          dBC = rotation(dAB, B, -randint(8, 12) * 5)\n          C = pointIntersectionDD(dAC, dBC, sommets[2])\n          lAC = longueur(A, C)\n          C.positionLabel = 'above'\n          CC = point(C.x + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, C.y + randint(-5, 5, [-2, -1, 0, 1, 2]) / 10, sommets[2])\n          cellule = celluleAleaRonde(5)\n          result = dansLaCibleRonde(C.x, C.y, 5, 0.3, cellule)\n          cible = cibleRonde({ x: result[0], y: result[1], rang: 5, taille: 0.3 })\n          objetsEnonce.push(cible, segmentAvecExtremites(A, B), labelPoint(A, B))\n          objetsEnonceml.push(codeAngle(B, A, CC, 1.1), afficheLongueurSegment(B, A), texteParPoint(nombreAvecEspace(Math.round(angle(B, A, C))) + '°', similitude(B, A, angle(B, A, C) / 2, 1 / lAB + 0.1)), codeAngle(A, CC, B, 1.1), texteParPoint(nombreAvecEspace(Math.round(angle(A, C, B))) + '°', similitude(A, CC, angle(A, CC, B) / 2, 1 / lAC + 0.1)))\n          objetsCorrection.push(cible, afficheLongueurSegment(B, A), afficheMesureAngle(B, A, C, 'black', 1), afficheMesureAngle(A, B, C, 'black', 1), afficheMesureAngle(A, C, B, 'black', 1))\n          texteCorr += `Pour cette construction, il a fallu calculer l'angle $\\\\widehat{${sommets[0] + sommets[1] + sommets[2]}}$.<br>$\\\\widehat{${sommets[0] + sommets[1] + sommets[2]}}=180-\\\\widehat{${sommets[1] + sommets[0] + sommets[2]}}-\\\\widehat{${sommets[0] + sommets[2] + sommets[1]}}=180-${Math.round(angle(B, A, C))}-${Math.round(angle(B, C, A))}=${Math.round(angle(A, B, C))}$.<br>Nous avons utilisé le rapporteur pour effectuer cette construction.<br>`\n          texteCorr += `Le point ${sommets[2]} se trouve dans le secteur ${cellule}.<br>`\n          xMin = Math.min(0, B.x, C.x, A.x) - 1\n          yMax = Math.max(0, B.y, C.y, A.y) + 3\n          IEP.recadre(xMin, yMax)\n          IEP.triangle1longueur2angles(nom, lAB, Math.round(angle(B, A, C)), Math.round(angle(C, B, A)), true)\n      }\n      T = polygoneAvecNom(A, B, C)\n      TT = polygoneAvecNom(A, B, CC)\n      objetsEnonceml.push(TT[0], TT[1])\n      objetsCorrection.push(T[0], T[1])\n      paramsEnonceml = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 20, scale: 0.58, mainlevee: true, amplitude: 0.3 }\n      paramsEnonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 30, scale: 1, mainlevee: false, amplitude: 1 }\n      paramsCorrection = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 3), ymin: Math.min(A.y - 1, B.y - 1, C.y - 3), xmax: Math.max(A.x + 1, B.x + 1, C.x + 3), ymax: Math.max(A.y + 1, B.y + 1, C.y + 3), pixelsParCm: 30, scale: 1 }\n      texte += mathalea2d(paramsEnonceml, objetsEnonceml) + mathalea2d(paramsEnonce, objetsEnonce)\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n      texteCorr += '<br>' + IEP.htmlBouton(this.numeroExercice, i)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["ConstruireUnTriangleAvecCible","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","classe","typeExercice","nouvelleVersion","IEP","xMin","yMax","listeQuestions","listeCorrections","celluleAleaRonde","rang","lettreDepuisChiffre","randint","Number","toString","typesDeQuestionsDisponibles","cible","cellule","result","A","B","C","CC","lAB","lBC","lAC","cA","cB","T","TT","dBC","dAC","dAB","objetsEnonceml","objetsEnonce","objetsCorrection","paramsEnonceml","paramsEnonce","paramsCorrection","nom","sommets","montriangle","range1","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","Alea2iep","creerNomDePolygone","push","point","calcul","pointAdistance","positionLabel","cercle","pointIntersectionCC","x","y","dansLaCibleRonde","cibleRonde","taille","segmentAvecExtremites","labelPoint","afficheLongueurSegment","traceCompas","Math","min","max","recadre","triangle3longueurs","droite","droiteParPointEtPerpendiculaire","pointIntersectionLC","codageAngleDroit","triangleRectangle2Cotes","codeSegments","segmentCodage","codage","triangleEquilateral","similitude","codeAngle","texteParPoint","nombreAvecEspace","round","angle","afficheMesureAngle","triangle2longueurs1angle","rotation","pointIntersectionDD","triangle1longueur2angles","triangleRectangleCoteHypotenuse","longueur","polygoneAvecNom","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","amplitude","mathalea2d","htmlBouton","numeroExercice","indexOf","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}