{"version":3,"sources":["webpack://mathalea/./src/js/exercices/CM/CM021.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","CompteEstBon","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","typesDeQuestions","a","b","c","d","cible","tirage","combinaisonListes","parseInt","split","i","length","choix","range1","listeQuestions","listeCorrections","texte","texteCorr","cpt","randint","calcul","shuffle","indexOf","push","listeQuestionsToContenu","besoinFormulaireTexte","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"gLAGO,MAAMA,EAAQ,6BAON,SAASC,IACtBC,eAAcC,MACdA,KAAKC,SACH,mGACFD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,IAAM,EAEXL,KAAKM,gBAAkB,WACrB,IAAIC,EAAkBC,EAAGC,EAAGC,EAAGC,EAAGC,EAAOC,EACzC,GAAKb,KAAKK,IAIR,GAAwB,iBAAbL,KAAKK,IAEdE,GAAmBO,SACjB,CAACC,SAASf,KAAKK,MACfL,KAAKE,iBAEF,CACLK,EAAmBP,KAAKK,IAAIW,MAAM,KAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAiBW,OAAQD,IAAOV,EAAiBU,GAAKF,SAASR,EAAiBU,IACpGjB,KAAKE,YAAcK,EAAiBW,YAXtCX,GAAmBO,SAAkB,CAAC,EAAG,EAAG,GAAId,KAAKE,aAcvD,MAAMiB,GAAQL,UAAkBM,SAAO,GAAIpB,KAAKE,aAChDF,KAAKqB,eAAiB,GACtBrB,KAAKsB,iBAAmB,GAExB,IAAK,IAAWC,EAAOC,EAAdP,EAAI,EAAqBQ,EAAM,EAAGR,EAAIjB,KAAKE,aAAeuB,EAAM,IAAK,CAC5E,OAAQlB,EAAiBU,IACvB,KAAK,EAKH,OAJAT,GAAIkB,SAAQ,EAAG,GACfjB,GAAIiB,SAAQ,EAAG,EAAGlB,GAClBE,GAAIgB,SAAQ,EAAG,EAAG,CAAClB,EAAGC,IACtBE,GAAIe,SAAQ,EAAG,EAAG,CAAClB,EAAGC,EAAGC,IACjBS,EAAMF,IACZ,KAAK,EACHL,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,EAAIC,GACtCE,GAASe,SAAQ,CAAC,IAAK,GAAIpB,EAAGC,EAAGC,EAAGC,IACpCa,EAAa,wBAAuBZ,eAAmBJ,cAAcC,KAAKC,KAAKC,KAC/E,MACF,KAAK,EACHC,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,EAAIC,GACtCE,GAASe,SAAQ,CAAC,IAAK,GAAIpB,EAAGC,EAAGC,EAAGC,IACpCa,EAAa,wBAAuBZ,eAAmBJ,cAAcC,KAAKC,KAAKC,KAC/E,MACF,KAAK,EACHC,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,EAAIC,GACtCE,GAASe,SAAQ,CAAC,IAAK,GAAIpB,EAAGC,EAAGC,EAAGC,IACpCa,EAAa,wBAAuBZ,eAAmBJ,cAAcC,KAAKC,KAAKC,KAC/E,MACF,KAAK,EACHC,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,EAAIC,GACtCE,GAASe,SAAQ,CAAC,IAAK,GAAIpB,EAAGC,EAAGC,EAAGC,IACpCa,EAAa,wBAAuBZ,eAAmBJ,cAAcC,KAAKC,KAAKC,KAC/E,MACF,QACEC,GAAQe,SAAW,IAAJnB,EAAoB,IAATC,EAAIC,GAAUC,GACxCE,GAASe,SAAQ,CAAC,IAAK,GAAIpB,EAAGC,EAAGC,EAAGC,IACpCa,EAAa,wBAAuBZ,eAAmBJ,eAAeC,KAAKC,MAAMC,KAErF,MAEF,KAAK,EAIH,OAHAH,GAAIkB,SAAQ,EAAG,GACfjB,GAAIiB,SAAQ,EAAG,EAAGlB,GAClBE,GAAIgB,SAAQ,EAAG,EAAG,CAAClB,EAAGC,IACdU,EAAMF,IACZ,KAAK,EACHL,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,GAClCG,GAASe,SAAQ,CAAC,GAAI,GAAI,GAAIpB,EAAGC,EAAGC,IACpCc,EAAa,wBAAuBZ,mBAAuBJ,cAAcC,KAAKC,KAC9E,MACF,KAAK,EACHE,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,GAClCG,GAASe,SAAQ,CAAC,GAAI,GAAI,GAAIpB,EAAGC,EAAGC,IACpCc,EAAa,wBAAuBZ,mBAAuBJ,cAAcC,KAAKC,KAC9E,MACF,KAAK,EACHE,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,GAClCG,GAASe,SAAQ,CAAC,GAAI,GAAI,GAAIpB,EAAGC,EAAGC,IACpCc,EAAa,wBAAuBZ,mBAAuBJ,cAAcC,KAAKC,KAC9E,MACF,KAAK,EACHE,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,GAClCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,sBAA0BJ,cAAcC,KAAKC,KACjF,MACF,QACEE,GAAQe,SAAW,IAAJnB,EAAc,GAAJC,EAASC,GAClCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,sBAA0BJ,cAAcC,KAAKC,KAErF,MACF,KAAK,EAIH,OAHAF,GAAIkB,SAAQ,EAAG,GACfjB,GAAIiB,SAAQ,EAAG,EAAGlB,GAClBE,GAAIgB,SAAQ,EAAG,EAAG,CAAClB,EAAGC,IACdU,EAAMF,IACZ,KAAK,EACHL,GAAQe,SAAOnB,GAAK,IAAU,GAAJC,GAAUC,GACpCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,KAASJ,gCAAgCC,MAAMC,KACnF,MACF,KAAK,EACHE,GAAQe,SAAOnB,GAAK,IAAU,GAAJC,GAAUC,GACpCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,KAASJ,gCAAgCC,MAAMC,KACnF,MACF,KAAK,EACHE,GAAQe,SAAOnB,GAAK,IAAU,GAAJC,GAAUC,GACpCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,KAASJ,gCAAgCC,MAAMC,KACnF,MACF,KAAK,EACHE,GAAQe,SAAOnB,GAAK,IAAU,GAAJC,GAAUC,GACpCG,GAASe,SAAQ,CAAC,GAAI,EAAG,GAAIpB,EAAGC,EAAGC,IACnCc,EAAa,wBAAuBZ,KAASJ,gCAAgCC,MAAMC,KACnF,MACF,QACEE,GAAQe,SAAOnB,GAAK,IAAU,GAAJC,GAAUC,GACpCG,GAASe,SAAQ,CAAC,GAAI,GAAI,GAAIpB,EAAGC,EAAGC,IACpCc,EAAa,wBAAuBZ,KAASJ,6BAA6BC,MAAMC,MAIxFa,EAAQ,qBACR,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IAAOM,GAAU,GAAEV,EAAOI,QACjDM,GAAU,GAAEV,EAAO,UACnBU,GAAU,gCAA+BX,MAEG,IAAxCZ,KAAKqB,eAAeQ,QAAQN,KAE9BvB,KAAKqB,eAAeS,KAAKP,GACzBvB,KAAKsB,iBAAiBQ,KAAKN,GAC3BP,KAEFQ,KAEFM,SAAwB/B,OAE1BA,KAAKgC,sBAAwB,CAC3B,iCACA,oC,6BCtJW,SAASjC,IAEtBC,KAAKH,MAAQ,GACbG,KAAKC,SAAW,GAChBD,KAAKiC,mBAAqB,GAC1BjC,KAAKqB,eAAiB,GACtBrB,KAAKsB,iBAAmB,GACxBtB,KAAKkC,aAAe,GACpBlC,KAAKmC,QAAU,GACfnC,KAAKoC,kBAAoB,GACzBpC,KAAKE,YAAc,GACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKqC,QAAU,EACfrC,KAAKsC,YAAc,EACnBtC,KAAKuC,QAAS,EAEdvC,KAAKwC,2BAA4B,EACjCxC,KAAKgC,uBAAwB,EAC7BhC,KAAKyC,6BAA8B,EACnCzC,KAAK0C,4BAA6B,EAClC1C,KAAK2C,wBAAyB,EAC9B3C,KAAK4C,8BAA+B,EACpC5C,KAAK6C,4BAA6B,EAClC7C,KAAK8C,wBAAyB,EAC9B9C,KAAK+C,8BAA+B,EACpC/C,KAAKgD,oBAAqB,EAC1BhD,KAAKiD,uBAAwB,EAC7BjD,KAAKkD,kBAAmB,EACxBlD,KAAKmD,sBAAuB,EAC5BnD,KAAKoD,mBAAoB,EACzBpD,KAAKqD,uBAAwB,EAC7BrD,KAAKsD,+BAAgC,EACrCtD,KAAKuD,qBAAsB,EAC3BvD,KAAKwD,MAAQ,GACbxD,KAAKyD,YAAa,EAClBzD,KAAK0D,gBAAkB,GAMvB1D,KAAK2D,mBAAoB,EACzB3D,KAAK4D,YAAa,EAClB5D,KAAK6D,uBAAwB,EAC7B7D,KAAK8D,KAAM,EACX9D,KAAK+D,eAAgB,EACrB/D,KAAKgE,SAAU,EACfhE,KAAKiE,eAAiB,GACtBjE,KAAKkE,sBAAwB,GAC7BlE,KAAKmE,cAAe,EACpBnE,KAAKM,gBAAkB,SAAU8D,KACjCpE,KAAKqE,cAAgB,G","file":"js/19436.4cc11fd5020214a366b7.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, range1, shuffle, combinaisonListes, calcul } from '../../modules/outils.js'\n\nexport const titre = 'Le compte est bon original'\n\n/**\n * Un \"Le compte est bon\" avec des solutions \"formatées\" pour travailler certains incontournables du calcul mental\n *  @author Jean-Claude Lhote\n * Référence CM021\n */\nexport default function CompteEstBon () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne =\n    'Trouve le résultat en utilisant les quatre opérations et les nombres du tirage (une seule fois).'\n  this.nbQuestions = 5\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1 // niveau de calcul souhaité\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestions, a, b, c, d, cible, tirage\n    if (!this.sup) {\n      // Si rien n'est saisi\n      typesDeQuestions = combinaisonListes([1, 2, 3], this.nbQuestions)\n    } else {\n      if (typeof this.sup === 'number') {\n        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur\n        typesDeQuestions = combinaisonListes(\n          [parseInt(this.sup)],\n          this.nbQuestions\n        )\n      } else {\n        typesDeQuestions = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des -\n        for (let i = 0; i < typesDeQuestions.length; i++) { typesDeQuestions[i] = parseInt(typesDeQuestions[i]) }\n        this.nbQuestions = typesDeQuestions.length\n      }\n    }\n    const choix = combinaisonListes(range1(5), this.nbQuestions)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (typesDeQuestions[i]) {\n        case 1:\n          a = randint(2, 9)\n          b = randint(2, 8, a)\n          c = randint(1, 9, [a, b])\n          d = randint(1, 9, [a, b, c])\n          switch (choix[i]) {\n            case 1:\n              cible = calcul(a * 100 + b * 10 + c + d)\n              tirage = shuffle([100, 10, a, b, c, d])\n              texteCorr = `Le compte est bon : $${cible}=100\\\\times${a}+10\\\\times${b}+${c}+${d}$`\n              break\n            case 2:\n              cible = calcul(a * 100 + b * 10 + c - d)\n              tirage = shuffle([100, 10, a, b, c, d])\n              texteCorr = `Le compte est bon : $${cible}=100\\\\times${a}+10\\\\times${b}+${c}-${d}$`\n              break\n            case 3:\n              cible = calcul(a * 100 - b * 10 + c + d)\n              tirage = shuffle([100, 10, a, b, c, d])\n              texteCorr = `Le compte est bon : $${cible}=100\\\\times${a}-10\\\\times${b}+${c}+${d}$`\n              break\n            case 4:\n              cible = calcul(a * 100 - b * 10 + c - d)\n              tirage = shuffle([100, 10, a, b, c, d])\n              texteCorr = `Le compte est bon : $${cible}=100\\\\times${a}-10\\\\times${b}+${c}-${d}$`\n              break\n            default:\n              cible = calcul(a * 100 + (b + c) * 10 + d)\n              tirage = shuffle([100, 10, a, b, c, d])\n              texteCorr = `Le compte est bon : $${cible}=100\\\\times${a}+10\\\\times(${b}+${c})+${d}$`\n          }\n          break\n\n        case 2:\n          a = randint(3, 9)\n          b = randint(3, 8, a)\n          c = randint(3, 9, [a, b])\n          switch (choix[i]) {\n            case 1:\n              cible = calcul(a * 100 + b * 10 + c)\n              tirage = shuffle([50, 50, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=(50+50)\\\\times${a}+10\\\\times${b}+${c}$`\n              break\n            case 2:\n              cible = calcul(a * 100 + b * 10 - c)\n              tirage = shuffle([50, 50, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=(50+50)\\\\times${a}+10\\\\times${b}-${c}$`\n              break\n            case 3:\n              cible = calcul(a * 100 - b * 10 + c)\n              tirage = shuffle([50, 50, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=(50+50)\\\\times${a}-10\\\\times${b}+${c}$`\n              break\n            case 4:\n              cible = calcul(a * 100 - b * 10 - c)\n              tirage = shuffle([50, 2, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=2\\\\times50\\\\times${a}-10\\\\times${b}-${c}$`\n              break\n            default:\n              cible = calcul(a * 100 + b * 10 - c)\n              tirage = shuffle([25, 4, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=4\\\\times25\\\\times${a}+10\\\\times${b}-${c}$`\n          }\n          break\n        case 3:\n          a = randint(2, 5)\n          b = randint(3, 8, a)\n          c = randint(3, 9, [a, b])\n          switch (choix[i]) {\n            case 1:\n              cible = calcul(a * (100 + b * 10) + c)\n              tirage = shuffle([50, 2, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=${a}\\\\times(50\\\\times2+10\\\\times${b})+${c}$`\n              break\n            case 2:\n              cible = calcul(a * (100 + b * 10) - c)\n              tirage = shuffle([50, 2, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=${a}\\\\times(50\\\\times2+10\\\\times${b})-${c}$`\n              break\n            case 3:\n              cible = calcul(a * (100 + b * 10) + c)\n              tirage = shuffle([25, 4, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=${a}\\\\times(25\\\\times4+10\\\\times${b})+${c}$`\n              break\n            case 4:\n              cible = calcul(a * (100 + b * 10) - c)\n              tirage = shuffle([25, 4, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=${a}\\\\times(25\\\\times4+10\\\\times${b})-${c}$`\n              break\n            default:\n              cible = calcul(a * (100 + b * 10) + c)\n              tirage = shuffle([25, 75, 10, a, b, c])\n              texteCorr = `Le compte est bon : $${cible}=${a}\\\\times((25+75)+10\\\\times${b})+${c}$`\n          }\n          break\n      }\n      texte = 'Voici le tirage : '\n      for (let i = 0; i < 5; i++) { texte += `${tirage[i]} ; ` }\n      texte += `${tirage[5]}.<br>`\n      texte += `Et le nombre à trouver est : ${cible}.`\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = [\n    'Niveaux de difficultés (1 à 3)',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}