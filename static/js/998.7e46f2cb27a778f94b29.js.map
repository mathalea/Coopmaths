{"version":3,"sources":["webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/macroSvgJs.js"],"names":["Exercice","this","titre","consigne","consigneCorrection","listeQuestions","listeCorrections","introduction","contenu","contenuCorrection","nbQuestions","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","mg32Editable","nouvelleVersion","numeroExercice","listePackages","SVG_graduation","mon_svg","origine","pas","derniere_graduation","taille","y","couleur","width","i","line","stroke","color","linecap","SVG_label","liste_d_abscisses","opacite","length","text","toString","parseInt","move","font","fill","family","size","anchor","leading","opacity","SVG_fraction","num","den","x","longueur","attr","SVG_tracer_point","nom","shiftxnom","shiftynom","montrer_coord","point","group","SVG_tracer_droite_flecheV","x1","y1","x2","y2","pointilles","fleche","dasharray","SVG_tracer_droite_flecheH","SVG_tracer_flecheH","SVG_Tracer_droite","tailleX","tailleY","Xmin","Xmax","Ymin","Ymax","OrdX0","Pente","k","Pente_r","X0","Y0","Ynom","Math","round","Latex_Tracer_droite","Y1","DeltaX","SVG_repere","subX","subY","grille","DeltaY","Dx","Dy","absO","ordO","line_grille","j","l","SVG_grille","start","end","SVG_Axe_horizontal","SVG_Axe_vertical","dmove","SVG_tracer_flecheV","stringNombre","Latex_repere","result","SVG_reperage_sur_un_axe","id_du_div","pas1","pas2","points_inconnus","points_connus","fraction","arrondir","log10","longueur_pas1","longueur_pas2","distance","valeur","window","SVGExist","setInterval","$","html","SVG","addTo","viewbox","calcul","position","clearInterval","Latex_reperage_sur_un_axe","zoom","decalage","texNombrec","texFractionSigne","SVG_engrenages","w","h","sortieHtml","document","getElementById","innerHTML","SVG_machine_diag_3F12","x_ant","etapes_expressions","SVG_machine_diag_3F1_act_mono"],"mappings":"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","file":"js/998.7e46f2cb27a778f94b29.js","sourcesContent":["/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\n/* eslint-disable camelcase */\nimport { calcul, texNombrec, texFractionSigne, stringNombre } from './outils.js'\nimport katex from 'katex'\nimport { SVG } from '@svgdotjs/svg.js'\n\n/**\n * Trace un axe vertical gradué\n * @param {string} mon_svg l'id du svg\n * @param {number} start ordonnée du début de l'axe en pixels (end-start=longueur del'axe)\n * @param {number} end ordonnée de fin del'axe en pixels\n * @param {number} absO position en abscisse de l'axe en pixels\n * @param {number} DeltaY Nombre entier de graduations à faire sur la longueur de l'axe.\n * @Auteur Jean-Claude Lhote\n */\nexport function SVG_Axe_vertical (mon_svg, start, end, absO, DeltaY, subY) {\n  const droite = mon_svg.line(absO, start + 2, absO, end)\n  droite.stroke({ color: 'black', width: 2, linecap: 'round' })\n  for (let i = 0; i < DeltaY; i++) {\n    const line = mon_svg.line(absO - 2, (DeltaY - i) * ((end - start) / DeltaY), absO + 2, (DeltaY - i) * ((end - start) / DeltaY))\n    line.stroke({ color: 'black', width: 2, linecap: 'round' })\n    if (subY != 1) {\n      for (let k = 1; k < subY; k++) {\n        const line = mon_svg.line(absO - 2, ((end - start) / DeltaY) * (DeltaY - i - k / subY), absO + 2, ((end - start) / DeltaY) * (DeltaY - i - k / subY))\n        line.stroke({ color: 'black', width: 1, linecap: 'round' })\n      }\n    }\n  }\n}\n/**\n   * Trace un axe horizontal gradué\n   * @param {string} mon_svg l'id du svg\n   * @param {number} start abscisse du début de l'axe en pixels (end-start=longueur del'axe)\n   * @param {number} end abscisse de fin del'axe en pixels\n   * @param {number} absO position en ordonnée de l'axe en pixels\n   * @param {number} DeltaX Nombre entier de graduations à faire sur la longueur de l'axe.\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_Axe_horizontal (mon_svg, start, end, ordO, DeltaX, subX) {\n  const droite = mon_svg.line(start, ordO, end - 2, ordO)\n  droite.stroke({ color: 'black', width: 2, linecap: 'round' })\n  for (let i = 1; i <= DeltaX; i++) {\n    const line = mon_svg.line(start + (DeltaX - i) * ((end - start) / DeltaX), ordO - 2, start + (DeltaX - i) * ((end - start) / DeltaX), ordO + 2)\n    line.stroke({ color: 'black', width: 2, linecap: 'round' })\n    if (subX != 1) {\n      for (let k = 1; k < subX; k++) {\n        const line = mon_svg.line(start + (DeltaX - i + k / subX) * ((end - start) / DeltaX), ordO - 2, start + (DeltaX - i + k / subX) * ((end - start) / DeltaX), ordO + 2)\n        line.stroke({ color: 'black', width: 1, linecap: 'round' })\n      }\n    }\n  }\n}\n\n/**\n   * Place une grille de points dans un repère au sein d'un SVG\n   * @param {string} mon_svg  l'id du svg\n   * @param {number} absO abscisse du point de départ de la grille (normalement 0)\n   * @param {number} ordO ordonnée du point de départ de la grille (normalement 0)\n   * @param {number} tailleX largeur totale de la grille en pixels\n   * @param {number} tailleY hauteur totale de la grille en pixels\n   * @param {number} DeltaX nombre de graduations horizontales\n   * @param {number} DeltaY nombre de graduations verticales\n   * @param {number} subX coefficient de fractionnement de la grille en abscisse\n   * @param {number} subY coefficient de fractionnement de la grille en ordonéée\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_grille (mon_svg, absO, ordO, tailleX, tailleY, DeltaX, DeltaY, subX, subY) {\n  let line_grille\n  for (let i = 0; i <= DeltaX; i++) {\n    line_grille = mon_svg.line(absO + i * (tailleX / DeltaX), 0, absO + i * (tailleX / DeltaX), tailleY)\n    line_grille.stroke({ color: 'lightgray', width: 1 })\n  }\n  for (let i = 0; i < DeltaX; i++) {\n    if (subX != 1) {\n      for (let k = 0; k < subX; k++) {\n        line_grille = mon_svg.line(absO + i * (tailleX / DeltaX) + k * (tailleX / DeltaX / subX), 0, absO + i * (tailleX / DeltaX) + k * (tailleX / DeltaX / subX), tailleY)\n        line_grille.stroke({ color: 'lightgray', width: 0.5, linecap: 'round' })\n      }\n    }\n  }\n  for (let j = 0; j <= DeltaY; j++) {\n    line_grille = mon_svg.line(20, ordO + j * (tailleY / DeltaY), 20 + tailleX, ordO + j * (tailleY / DeltaY))\n    line_grille.stroke({ color: 'lightgray', width: 1 })\n  }\n  for (let j = 0; j < DeltaY; j++) {\n    if (subY != 1) {\n      for (let l = 0; l < subY; l++) {\n        line_grille = mon_svg.line(20, ordO + j * (tailleY / DeltaY) + l * (tailleY / DeltaY / subY), 20 + tailleX, ordO + j * (tailleY / DeltaY) + l * (tailleY / DeltaY / subY))\n        line_grille.stroke({ color: 'lightgray', width: 0.5, linecap: 'round' })\n      }\n    }\n  }\n}\n\n/** Trace une graduation sur le SVG\n  * @param mon_svg Objet SVG\n  * @param origine abscisse en pixel de la première graduation\n  * @param pas distance en pixels entre deux graduations\n  * @param derniere_graduation abscisse limite en pixel\n  * @param taille taille verticale\n  * @param y ordonnée de la droite\n  * @param couleur couleur de la graduation\n  * @param width largeur de la graduation\n  * @Auteur Rémi Angot\n  */\nexport function SVG_graduation (mon_svg, origine, pas, derniere_graduation, taille = 10, y = 50, couleur = 'black', width = 5) {\n  for (let i = origine; i < derniere_graduation; i += pas) {\n    const line = mon_svg.line(i, y - taille / 2, i, y + taille / 2)\n    line.stroke({ color: couleur, width: width, linecap: 'round' })\n  }\n}\n\n/**\n   * Ecris des nombres ou des textes à une position donnée dans un SVG\n   * @param {array} liste_d_abscisses [[nombre à écrire,abscisse,ordonnée]]\n   * @param {number} y leading pour position du texte sur la ligne\n   * @param {string} couleur couleur du nombre\n   * @param {number} opacite valeur d'opacité entre 0 et 1\n   * @Auteur Rémi Angot\n   */\nexport function SVG_label (mon_svg, liste_d_abscisses, y, couleur, opacite) {\n  'use strict'\n  for (let i = 0; i < liste_d_abscisses.length; i++) {\n    let text\n    if (typeof liste_d_abscisses[i][0] === 'number') text = mon_svg.text((liste_d_abscisses[i][0]).toString())\n    else text = mon_svg.text(liste_d_abscisses[i][0])\n    y = parseInt(y)\n    text.move(liste_d_abscisses[i][1], liste_d_abscisses[i][2]).font({\n      fill: couleur,\n      family: 'Helvetica',\n      size: 14,\n      anchor: 'middle',\n      leading: y,\n      opacity: opacite\n    })\n  }\n}\n/**\n   * Ecris une fraction dans un SVG\n   * @param {any} mon_svg l'Id du SVG\n   * @param {number} num le numérateur de la fraction\n   * @param {number} den le dénominateur de la fraction\n   * @param {number} x l'abscisse de sa position\n   * @param {number} y l'ordonnée de sa position\n   * @param {string} couleur la couleur de la fraction\n   * @Auteur Rémi Angot\n   */\nexport function SVG_fraction (mon_svg, num, den, x, y, couleur) {\n  'use strict'\n  const longueur = num.toString().length\n  const line = mon_svg.line(x - longueur * 5, y - 7, x + longueur * 5, y - 7)\n  line.stroke({ color: couleur, width: 2, linecap: 'round' })\n  const num_text = mon_svg.text(num.toString()).attr({ x: x, y: y - 10 })\n  num_text.font({\n    fill: couleur,\n    family: 'Helvetica',\n    size: 20,\n    anchor: 'middle',\n    leading: 0\n  })\n  const den_text = mon_svg.text(den.toString()).attr({ x: x, y: y + 10 })\n  den_text.font({\n    fill: couleur,\n    family: 'Helvetica',\n    size: 20,\n    anchor: 'middle',\n    leading: 0\n  })\n}\n\n/**\n   *\n   * @param {any} mon_svg L'id du SVG\n   * @param {number} x l'abscisse du point\n   * @param {number} y l'ordonnée du point\n   * @param {string} nom le nom du point\n   * @param {string} couleur la couleur du point\n   * @param {number} shiftxnom décallage en abscisse pour le nom du point\n   * @param {number} shiftynom décallage en ordonnée pour le nom du point\n   * @param {array} montrer_coord cas 1 : [false] rien n'est ajouté, cas 2 : [true, absAxeX, ordAxeY] trace des flèches jusqu'aux axes\n   * @Auteur Rémi Angot et Jean-Claude Lhote\n   */\nexport function SVG_tracer_point (mon_svg, x, y, nom, couleur, shiftxnom, shiftynom, montrer_coord) {\n  // creer un groupe pour la croix\n  const point = mon_svg.group()\n  const c1 = point.line(-3, 3, 3, -3)\n  c1.stroke({ color: couleur, width: 2, linecap: 'round', opacity: 1 })\n  const c2 = point.line(-3, -3, 3, 3)\n  c2.stroke({ color: couleur, width: 2, linecap: 'round', opacity: 1 })\n  // déplace la croix\n  point.move(x - 3, y - 3)\n  // point.dmove(-3,-3)\n  const text = mon_svg.text(nom).attr({ x: x + shiftxnom, y: y + shiftynom, fill: couleur, opacity: 0.7 })\n  // ecrit le nom\n  text.font({\n    color: couleur,\n    'font-weight': 'bolder',\n    family: 'Helvetica',\n    size: 14,\n    anchor: 'middle',\n    leading: -1\n  })\n  if (montrer_coord[0]) { // montrer_coord=[true,abs_axe,ord_axe] ou [false]\n    if ((y != montrer_coord[2]) && (x != montrer_coord[1])) SVG_tracer_droite_flecheV(mon_svg, x, y, x, montrer_coord[2], couleur, 3)\n    if ((x != montrer_coord[1]) && (y != montrer_coord[2])) SVG_tracer_droite_flecheH(mon_svg, x, y, montrer_coord[1], y, couleur, 3)\n  }\n}\n\n/**\n   * Trace une flèche dans le SVG pour une demi-droite graduée\n   * @param {any} mon_svg l'identifiant du SVG\n   * @param {number} x l'abscisse de la pointe\n   * @param {number} y l'ordonnée de la pointe\n   * @Auteur Rémi Angot\n   */\nfunction SVG_tracer_flecheH (mon_svg, x, y) {\n  // creer un groupe pour la fleche\n  const fleche = mon_svg.group()\n  const c1 = fleche.line(x - 5, y - 5, x, y)\n  c1.stroke({ color: 'black', width: 3, linecap: 'round' })\n  const c2 = fleche.line(x - 5, y + 5, x, y)\n  c2.stroke({ color: 'black', width: 3, linecap: 'round' })\n}\n/**\n   *\n   * @param {string} mon_svg l'identifiant du SVG\n   * @param {number} x l'abscisse de la pointe de la flèche\n   * @param {number} y l'ordonnée de la pointe de la flèche\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_tracer_flecheV (mon_svg, x, y) {\n  // creer un groupe pour la fleche\n  const fleche = mon_svg.group()\n  const c1 = fleche.line(-5, 5, 0, 0)\n  c1.stroke({ color: 'black', width: 3, linecap: 'round' })\n  const c2 = fleche.line(5, 5, 0, 0)\n  c2.stroke({ color: 'black', width: 3, linecap: 'round' })\n  // déplace la croix\n  fleche.move(x, y)\n  fleche.dmove(-5, 5)\n}\n\n/**\n   *\n   * @param {string} mon_svg l'identifiant du SVG\n   * @param {number} x1 (x1,y1)=point de départ de la flèche verticale (x1=x2 en général)\n   * @param {number} y1\n   * @param {number} x2 (x2,y2)=point d'arrivée de la flèche\n   * @param {number} y2\n   * @param {string} couleur couleur de la flèche\n   * @param {number} pointilles longueur des pointillés et des espaces entre les pointillés\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_tracer_droite_flecheV (mon_svg, x1, y1, x2, y2, couleur, pointilles) {\n  const fleche = mon_svg.group()\n  const c1 = fleche.line(x1, y1, x2, y2)\n  c1.stroke({ color: couleur, width: 1, linecap: 'round', dasharray: pointilles, opacity: 0.5 })\n  if (y2 < y1) {\n    const c2 = fleche.line(x2 - 3, y2 + 5, x2, y2)\n    c2.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n    const c3 = fleche.line(x2 + 3, y2 + 5, x2, y2)\n    c3.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n  } else {\n    const c2 = fleche.line(x2 - 3, y2 - 5, x2, y2)\n    c2.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n    const c3 = fleche.line(x2 + 3, y2 - 5, x2, y2)\n    c3.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n  }\n}\n\n/**\n   *\n   * @param {string} mon_svg l'identifiant du SVG\n   * @param {number} x1 (x1,y1)=point de départ de la flèche horizontale (y1=y2 en général)\n   * @param {number} y1\n   * @param {number} x2 (x2,y2)=point d'arrivée de la flèche\n   * @param {number} y2\n   * @param {string} couleur couleur de la flèche\n   * @param {number} pointilles longueur des pointillés et des espaces entre les pointillés\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_tracer_droite_flecheH (mon_svg, x1, y1, x2, y2, couleur, pointilles) {\n  const fleche = mon_svg.group()\n  const c1 = fleche.line(x1, y1, x2, y2)\n  c1.stroke({ color: couleur, width: 1, linecap: 'round', dasharray: pointilles, opacity: 0.5 })\n  if (x2 < x1) {\n    const c2 = fleche.line(x2 + 5, y2 + 3, x2, y2)\n    c2.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n    const c3 = fleche.line(x2 + 5, y2 - 3, x2, y2)\n    c3.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n  } else {\n    const c2 = fleche.line(x2 - 5, y2 + 3, x2, y2)\n    c2.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n    const c3 = fleche.line(x2 - 5, y2 - 3, x2, y2)\n    c3.stroke({ color: couleur, width: 1, linecap: 'round', opacity: 0.5 })\n  }\n}\n/**\n   *\n   * @param {string} mon_svg l'identifiant du SVG\n   * @param {number} tailleX largeur en pixels du SVG\n   * @param {number} tailleY hauteur en pixels du SVG\n   * @param {number} Xmin l'abscisse minimale du repère\n   * @param {number} Xmax l'abscisse maximale du repère\n   * @param {number} Ymin l'ordonnée minimale du repère\n   * @param {number} Ymax l'ordonnée maximale du repère\n   * @param {number} OrdX0 l'ordonnée à l'origine de la droite à tracer\n   * @param {number} Pente la Pente de la droite à tracer.\n   * @param {string} couleur la couleur de la droite à tracer\n   * @param {string} nom le nom de la droite à tracer\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_Tracer_droite (mon_svg, tailleX, tailleY, Xmin, Xmax, Ymin, Ymax, OrdX0, Pente, couleur, nom) {\n  'use strict'\n  let k = 0\n  const Pente_r = Pente * (Xmax - Xmin) / (Ymax - Ymin) // Pente adaptée au ratio d'échelle des axes.\n  while ((k > Xmin) & ((OrdX0 + Pente * k) < Ymax) & ((OrdX0 + Pente * k) > Ymin)) k--\n  const X1 = k\n  const Y1 = OrdX0 + Pente * k\n  const DeltaX = Xmax - Xmin\n  const DeltaY = Ymax - Ymin\n  const Dx = (tailleX - 20) / DeltaX\n  const Dy = (tailleY - 20) / DeltaY\n  const X0 = 20 + Dx * (X1 - Xmin)\n  const Y0 = tailleY - 20 - Dy * (Y1 - Ymin)\n  const droite = mon_svg.line(X0, Y0, X0 + tailleX, Y0 - tailleX * Pente_r)\n  droite.stroke({ color: couleur, width: 2, linecap: 'round' })\n  let Ynom\n  if (Y0 > tailleY / 2) Ynom = -Math.round(Pente)\n  else Ynom = -Math.round(Pente)\n  const text = mon_svg.text(nom).attr({ x: X0 + 20, y: Y0 - 20 * Pente_r })\n  // ecrit le nom\n  text.font({\n    fill: couleur,\n    family: 'Helvetica',\n    size: 15,\n    anchor: 'middle',\n    leading: Ynom\n  })\n}\n\n/**\n   *\n   * @param {number} Xmin l'abscisse minimum du repère\n   * @param {number} Xmax  l'abscisse maximum du repère\n   * @param {number} Ymin l'ordonnée minimum du repère\n   * @param {number} Ymax l'ordonnée maximum du repère\n   * @param {number} OrdX0 l'ordonnée à l'origine de la droite à tracer\n   * @param {number} Pente le coefficient directeur de la droite à tracer\n   * @param {string} couleur la couleur de la droite à tracer\n   * @param {string} nom le nom de la droite\n   * @returns {string} Le code Latex à intégrer dans un environnement {tikzpicture}\n   * @Auteur Jean-Claude Lhote et Rémi Angot\n   */\nexport function Latex_Tracer_droite (Xmin, Xmax, Ymin, Ymax, OrdX0, Pente, couleur, nom) {\n  'use strict'\n  let k = 0\n  // let Pente_r=Pente*(Xmax-Xmin)/(Ymax-Ymin); // Pente adaptée au ratio d'échelle des axes.\n  while ((k > Xmin) & ((OrdX0 + Pente * k) < Ymax) & ((OrdX0 + Pente * k) > Ymin)) k--\n  const X1 = k\n  const Y1 = OrdX0 + Pente * k\n  const DeltaX = Xmax - Xmin\n  // let DeltaY=Ymax-Ymin;\n  const X2 = X1 + DeltaX\n  const Y2 = Y1 + DeltaX * Pente\n  return `\\n\\t \\\\draw[color=${couleur},thick](${X1},${Y1})--(${X2},${Y2}) node[pos=.1,above] {$${nom}$};`\n}\n\n/**\n   *\n   * @param {string} mon_svg l'Identifiant du SVG\n   * @param {number} Xmin l'abscisse minimum (doit être entier. Si positif, on prendra 0 comme minimum)\n   * @param {number} Xmax l'abscisse maximum (doit être entier > Xmin)\n   * @param {number} Ymin l'ordonnée minimum (doit être entier. Si positif, on prendra 0 comme minimum)\n   * @param {number} Ymax l'ordonnée maximum (doit être entier > Ymin)\n   * @param {number} subX coefficient de fractionnement de l'unité en X\n   * @param {number} subY coefficient de fractionnement de l'unité en Y\n   * @param {number} tailleX Nombre de pixels de largeur pour le SVG (>100 !)\n   * @param {number} tailleY Nombre de pixels de hauteur pour le SVG  (>100 !)\n   * @param {boolean} grille Faut-il dessiner une grille ? true si Oui false si Non.\n   * @returns Les coordonnées des axes dans le SVG\n   * @Auteur Jean-Claude Lhote\n   */\nexport function SVG_repere (mon_svg, Xmin, Xmax, Ymin, Ymax, subX, subY, tailleX, tailleY, grille) {\n  'use strict'\n  if (Xmin > 0) Xmin = 0\n  if (Ymin > 0) Ymin = 0\n  const DeltaX = Xmax - Xmin\n  const DeltaY = Ymax - Ymin\n  const Dx = (tailleX - 20) / DeltaX\n  const Dy = (tailleY - 20) / DeltaY\n  if (grille) SVG_grille(mon_svg, 20, 0, tailleX - 20, tailleY - 20, DeltaX, DeltaY, subX, subY)\n  SVG_Axe_horizontal(mon_svg, 20, tailleX, tailleY - 20 + Ymin * Dy, DeltaX, subX)\n  SVG_tracer_flecheH(mon_svg, tailleX - 2, tailleY - 20 + Ymin * Dy)\n  SVG_Axe_vertical(mon_svg, 0, tailleY - 20, 20 - Xmin * Dx, DeltaY, subY)\n  SVG_tracer_flecheV(mon_svg, 20 - Xmin * Dx, -3)\n  for (let i = 0; i < DeltaX; i++) {\n    if (i + Xmin == 0) SVG_label(mon_svg, [[stringNombre(i + Xmin), i * Dx + 15, tailleY + 2 + Ymin * Dy]], 0, 'black', 0.5)\n    else SVG_label(mon_svg, [[stringNombre(i + Xmin), i * Dx + 20, tailleY + 2 + Ymin * Dy]], 0, 'black', 0.5)\n  }\n  for (let i = 0; i < DeltaY; i++) {\n    if (i + Ymin == 0) SVG_label(mon_svg, [[stringNombre(i + Ymin), 10 - Xmin * Dx, tailleY - 15 - i * Dy]], 0, 'black', 0.5)\n    else SVG_label(mon_svg, [[stringNombre(i + Ymin), 10 - Xmin * Dx, tailleY - 25 - i * Dy]], 1, 'black', 0.5)\n  }\n  return [20 - Xmin * Dx, tailleY - 20 + Ymin * Dy]\n}\n/**\n   * Trace un repère en Latex avec une grille\n   * @param {number} Xmin l'abscisse minimum (doit être entier. Si positif, on prendra 0 comme minimum)\n   * @param {number} Xmax l'abscisse maximum (doit être entier > Xmin)\n   * @param {number} Ymin l'ordonnée minimum (doit être entier. Si positif, on prendra 0 comme minimum)\n   * @param {number} Ymax l'ordonnée maximum (doit être entier > Ymin)\n   * @param {number} subX coefficient de fractionnement de l'unité en X\n   * @param {number} subY coefficient de fractionnement de l'unité en Y\n   * @param {boolean} grille Faut-il dessiner une grille ? true si Oui false si Non.\n   * @returns {string} Renvoie le code Latex correspondant\n   * @Auteur Jean-Claude Lhote\n   */\nexport function Latex_repere (Xmin, Xmax, Ymin, Ymax, subX, subY, grille) {\n  'use strict'\n  let result = ''\n  result += `\\n\\t \\\\tkzInit [xmin=${Xmin},xmax=${Xmax},xstep=1,ymin=${Ymin},ymax=${Ymax},ystep=1]`\n  if (grille) result += `\\n\\t \\\\tkzGrid[sub,subxstep=${1 / subX},subystep=${1 / subY},color=lightgray,line width=0.3pt](${Xmin},${Ymin})(${Xmax},${Ymax})`\n  result += '\\n\\t \\\\tkzAxeXY'\n  result += '\\n\\t \\\\tkzClip[space=1]'\n  return result\n}\n\n/**\n  * Trace une graduation sur le SVG\n  * @param origine la première abscisse de la droite ou demi-droite\n  * @param longueur le nombre d'intervalles entre l'origine et la dernière graduation\n  * @param pas1 le fractionnement de l'unité utilisé : 10 pour 0,1 ; 2 pour 0,5 ...\n  * @param pas2 Idem pas1 pour la petite graduation\n  * @param points_inconnus tableau tableau [Nom,nb_pas1,nb_pas2,affiche_ou_pas]\n  * @param points_connus tableau [valeur,nb_pas1,nb_pas2]\n  * @param fraction booléen : true pour fractions, false pour décimaux\n  * @Auteur Jean-Claude Lhote\n  */\nexport function SVG_reperage_sur_un_axe (id_du_div, origine, longueur, pas1, pas2, points_inconnus, points_connus, fraction) {\n  let arrondir = 1 + Math.round(Math.log10(pas1))\n  if (arrondir < 1) arrondir = 1\n  const longueur_pas1 = 600 / longueur\n  const longueur_pas2 = 600 / longueur / pas2\n  let distance, valeur, nom\n  if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n  // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n  window.SVGExist[id_du_div] = setInterval(function () {\n    if ($(`#${id_du_div}`).length) {\n      $(`#${id_du_div}`).html('')// Vide le div pour éviter les SVG en doublon\n      const mon_svg = SVG().addTo(`#${id_du_div}`).viewbox(0, 0, 800, 150).size('100%', '100%')\n      // Droite\n      const droite = mon_svg.line(100, 50, 750, 50)\n      droite.stroke({ color: 'black', width: 2, linecap: 'round' })\n      // Graduation secondaire\n      SVG_graduation(mon_svg, 100, longueur_pas2, 750, 5, 50, 'black', 2)\n      // Graduation principale\n      SVG_graduation(mon_svg, 100, longueur_pas1, 750, 10, 50, 'black', 5)\n      SVG_tracer_flecheH(mon_svg, 750, 50)\n      // Nombres visibles\n      SVG_label(mon_svg, [[stringNombre(origine), 100, 50]], 2, 'black', 1)\n      for (let i = 0; i < points_connus.length; i++) {\n        valeur = stringNombre(points_connus[i][0])\n        distance = calcul(longueur_pas1 * points_connus[i][1] + longueur_pas2 * points_connus[i][2])\n        SVG_label(mon_svg, [[valeur, 100 + distance, 50]], 2, 'black', 1)\n      }\n      // Points inconnus\n      let position = 1\n      for (let i = 0; i < points_inconnus.length; i++) {\n        distance = longueur_pas1 * points_inconnus[i][1] + longueur_pas2 * points_inconnus[i][2]\n        nom = points_inconnus[i][0]\n        SVG_tracer_point(mon_svg, 100 + distance, 50, nom, '#f15929', 0, 0, [false])\n        if (points_inconnus[i][3] == true) {\n          if (!fraction) { // affichage décimal\n            valeur = stringNombre(calcul(origine + points_inconnus[i][1] / pas1 + points_inconnus[i][2] / pas1 / pas2))\n            SVG_label(mon_svg, [[valeur, 100 + distance, 50]], 3 + position, '#f15929', 1)\n            SVG_tracer_droite_flecheV(mon_svg, 100 + distance, 75 + 15 * position, 100 + distance, 55, '#f15929', 3)\n          } else { // affichage fractionnaire\n            SVG_fraction(mon_svg, (origine + points_inconnus[i][1]) * pas2 + points_inconnus[i][2], pas2, 100 + distance, 115 + 15 * position, '#f15929')\n            SVG_tracer_droite_flecheV(mon_svg, 100 + distance, 80 + 15 * position, 100 + distance, 55, '#f15929', 3)\n          }\n          position = 1 - position\n        }\n      }\n      clearInterval(window.SVGExist[id_du_div])// Arrête le timer\n    }\n  }, 100) // Vérifie toutes les 100ms\n}\n\n/**\n  * Trace un axe gradué horizontal avec des points placés dessus en Latex\n  * @param origine la première abscisse de la droite ou demi-droite\n  * @param pas1 le fractionnement de l'unité utilisé : 10 pour 0,1 ; 2 pour 0,5 ...\n  * @param pas2 Idem pas1 pour la petite graduation\n  * @param points_inconnus tableau tableau [Nom,nb_pas1,nb_pas2,affiche_ou_pas]\n  * @param points_connus tableau [valeur,nb_pas1,nb_pas2]\n  * @param fraction booléen : true pour fraction, false pour décimaux\n  * @Auteur Jean-Claude Lhote\n  */\nexport function Latex_reperage_sur_un_axe (zoom, origine, pas1, pas2, points_inconnus, points_connus, fraction) {\n  'use strict'\n  let result = `\\\\begin{tikzpicture}[scale=${zoom}]`\n  let valeur\n  let decalage\n\n  result += `\\n\\t \\\\tkzInit[xmin=${origine},xmax=${calcul(origine + 7 / pas1)},ymin=-0.5,ymax=0.5,xstep=${calcul(1 / pas1)}]`\n\n  if (origine == 0) result += '\\n\\t \\\\tkzDrawX[tickwd=2pt,label={}];'\n  else result += '\\n\\t \\\\tkzDrawX[left space=0.2,tickwd=2pt,label={}];'\n  result += '\\n\\t \\\\tikzset{arr/.style={postaction=decorate,\tdecoration={markings,mark=at position 1 with {\\\\arrow[thick]{#1}}}}}'\n\n  if (origine < 0) decalage = origine * pas1\n  else decalage = 0\n  result += `\\n\\t \\\\foreach \\\\x in {0,${calcul(1 / pas2)},...,7}`\n  result += `\\n\\t {\\\\draw (${decalage}+\\\\x,-0.05)--(${decalage}+\\\\x,0.05);}` // result+=`\\n\\t {\\\\draw (${origine*pas1}+\\\\x,-0.05)--(${origine*pas1}+\\\\x,0.05);}`\n\n  for (let i = 0; i < points_connus.length; i++) {\n    valeur = calcul(origine + points_connus[i][1] / pas1 + calcul(points_connus[i][2] / pas1 / pas2))\n    result += `\\n\\t \\\\tkzDefPoint(${valeur},0){A}`\n    result += `\\n\\t \\\\tkzLabelPoint[color = black,below,inner sep = 5pt,font=\\\\scriptsize](A){$${texNombrec(valeur)}$}`\n  }\n  // Points inconnus\n  let position = 6\n  for (let i = 0; i < points_inconnus.length; i++) {\n    valeur = calcul(origine + points_inconnus[i][1] / pas1 + calcul(points_inconnus[i][2] / pas1 / pas2))\n    result += `\\n\\t \\\\tkzDefPoint(${valeur},0){A}`\n    result += `\\n\\t \\\\tkzDefPoint(${valeur},-0.3-${position * 0.02}){B}`\n    result += '\\n\\t \\\\tkzDrawPoint[shape=cross out,color=blue,size=8](A)'\n    result += `\\n\\t \\\\tkzLabelPoint[above](A){$${points_inconnus[i][0]}$}`\n    if (points_inconnus[i][3]) {\n      if (!fraction) { // affichage décimal\n        result += `\\n\\t \\\\tkzLabelPoint[color = blue,below=${15 + position}pt,inner sep = 5pt,font=\\\\scriptsize](A){$${texNombrec(valeur)}$}`\n        result += '\\n\\t \\\\tkzDrawSegment[color=blue,arr=stealth](B,A)'\n      } else { // affichage fractionnaire\n        result += `\\n\\t \\\\tkzLabelPoint[color = blue,below=${15 + position}pt,inner sep = 5pt,font=\\\\scriptsize](A){$${texFractionSigne((origine + points_inconnus[i][1]) * pas2 + points_inconnus[i][2], pas2)}$}`\n        result += '\\n\\t \\\\tkzDrawSegment[color=blue,arr=stealth](B,A)'\n      }\n    }\n    position = 6 - position\n  }\n  result += '\\n\\t \\\\end{tikzpicture}'\n  return result\n}\n\n/**\n * Renvoie deux engrenages en HTML pour le moment\n * @param {string} id_du_div id unique pour éviter les doublons, généré dans l'exo; à revoir?\n * @param {number} w largeur du conteneur\n * @param {number} h hauteur du conteneur\n * @author Sébastien Lozano\n */\nexport function SVG_engrenages (id_du_div, w, h) {\n  'use strict'\n  if (sortieHtml) {\n    if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n    // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n    window.SVGExist[id_du_div] = setInterval(function () {\n      if ($(`#${id_du_div}`).length) {\n        $(`#${id_du_div}`).html('')// Vide le div pour éviter les SVG en doublon\n        document.getElementById(id_du_div).innerHTML = `\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 ` + w + ' ' + h + '\" width=\"' + w + `\">\n                      <g id=\"surface1\">\n                      <path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 106.5625 0.125 C 106.289062 0.175781 105.386719 0.289062 104.5625 0.363281 C 103.738281 0.449219 103.023438 0.550781 102.960938 0.613281 C 102.761719 0.8125 102 8.164062 102 9.988281 C 102 10.476562 101.9375 10.914062 101.851562 11.023438 C 101.761719 11.136719 101.238281 11.324219 100.6875 11.4375 C 100.136719 11.5625 99.300781 11.800781 98.8125 11.960938 C 97.664062 12.386719 94.125 14.039062 93.226562 14.585938 C 92.800781 14.835938 92.4375 14.976562 92.351562 14.925781 C 92.261719 14.875 90.375 13.351562 88.148438 11.523438 C 85.9375 9.710938 84.074219 8.25 84.011719 8.273438 C 83.949219 8.300781 83.226562 8.863281 82.414062 9.523438 C 80.75 10.886719 78.3125 13.414062 76.699219 15.425781 C 75.75 16.613281 75.636719 16.8125 75.789062 16.988281 C 75.886719 17.101562 76.425781 17.773438 77.011719 18.5 C 77.585938 19.226562 79.023438 20.976562 80.210938 22.414062 C 81.398438 23.835938 82.375 25.039062 82.375 25.085938 C 82.375 25.125 82.148438 25.523438 81.863281 25.976562 C 81.199219 27.011719 80.113281 29.238281 79.773438 30.1875 C 79.574219 30.789062 78.75 33.425781 78.5625 34.074219 C 78.539062 34.148438 77.351562 34.3125 75.601562 34.488281 C 71.3125 34.886719 68.273438 35.273438 68.0625 35.425781 C 67.613281 35.761719 67.351562 40.875 67.625 43.8125 C 67.800781 45.699219 68.023438 47.113281 68.175781 47.300781 C 68.261719 47.414062 69.050781 47.539062 70.5625 47.675781 C 76.101562 48.164062 78.324219 48.386719 78.449219 48.425781 C 78.523438 48.449219 78.625 48.710938 78.675781 49.011719 C 78.726562 49.300781 78.863281 49.800781 78.988281 50.113281 C 79.113281 50.425781 79.425781 51.335938 79.675781 52.136719 C 80.164062 53.648438 81.175781 55.800781 82.011719 57.050781 C 82.273438 57.449219 82.5 57.824219 82.5 57.886719 C 82.5 57.949219 81.363281 59.363281 79.976562 61.023438 C 77.148438 64.425781 76.6875 64.988281 76.210938 65.636719 L 75.875 66.085938 L 76.636719 67.074219 C 78.5625 69.574219 81.164062 72.175781 83.613281 74.050781 C 84.324219 74.601562 84.4375 74.648438 84.664062 74.5 C 85 74.289062 88.789062 71.164062 90.835938 69.414062 C 91.738281 68.636719 92.585938 68 92.726562 68 C 92.863281 68 93.550781 68.324219 94.261719 68.738281 C 95.851562 69.625 97.960938 70.488281 99.863281 71 C 101.125 71.335938 101.75 71.5625 101.75 71.664062 C 101.75 72.476562 102.824219 81.9375 102.9375 82.113281 C 102.960938 82.175781 103.8125 82.289062 104.8125 82.375 C 106.960938 82.5625 112.511719 82.476562 114.0625 82.226562 L 115.050781 82.0625 L 115.148438 81.625 C 115.199219 81.386719 115.414062 79.210938 115.625 76.8125 C 115.835938 74.398438 116.050781 72.210938 116.101562 71.9375 C 116.210938 71.335938 116.273438 71.300781 118.363281 70.6875 C 120.226562 70.148438 122.625 69.085938 124.113281 68.164062 C 125.023438 67.585938 125.226562 67.5 125.425781 67.625 C 125.550781 67.699219 126.363281 68.375 127.238281 69.125 C 129.101562 70.710938 133.5 74.25 133.625 74.25 C 133.664062 74.25 134.148438 73.925781 134.699219 73.523438 C 136.113281 72.488281 141.414062 66.851562 141.988281 65.761719 C 142.101562 65.5625 141.75 65.074219 139.476562 62.351562 C 138.023438 60.613281 136.511719 58.8125 136.113281 58.363281 C 135.699219 57.898438 135.375 57.4375 135.375 57.324219 C 135.375 57.199219 135.710938 56.449219 136.113281 55.648438 C 137.113281 53.6875 138.074219 51.238281 138.398438 49.851562 C 138.613281 48.960938 138.710938 48.699219 138.925781 48.625 C 139.074219 48.5625 139.886719 48.460938 140.75 48.386719 C 145.675781 47.976562 149.324219 47.574219 149.398438 47.460938 C 149.476562 47.324219 149.523438 47 149.773438 44.6875 C 149.976562 42.699219 150.039062 40.136719 149.886719 39.25 C 149.8125 38.800781 149.699219 37.761719 149.625 36.9375 C 149.550781 36.101562 149.425781 35.375 149.335938 35.300781 C 149.25 35.210938 147.074219 34.960938 144.0625 34.6875 C 140.039062 34.324219 138.898438 34.1875 138.789062 34.039062 C 138.699219 33.925781 138.550781 33.449219 138.4375 32.976562 C 138.011719 31.113281 136.5625 27.601562 135.5 25.851562 C 135.363281 25.625 135.25 25.3125 135.25 25.164062 C 135.25 24.988281 136.460938 23.414062 138.550781 20.863281 C 141.074219 17.789062 141.835938 16.789062 141.75 16.636719 C 141.488281 16.148438 139.851562 14.300781 138.335938 12.773438 C 136.960938 11.375 133.886719 8.664062 133.324219 8.351562 C 133.175781 8.261719 129.636719 11.023438 126.699219 13.539062 C 125.8125 14.289062 125.023438 14.914062 124.949219 14.925781 C 124.875 14.925781 123.601562 14.335938 122.125 13.601562 C 119.664062 12.363281 118.039062 11.75 116.476562 11.4375 C 116.085938 11.363281 116.164062 11.800781 115.6875 6.875 C 115.261719 2.523438 115.011719 0.710938 114.851562 0.613281 C 114.699219 0.511719 114.335938 0.476562 112.0625 0.238281 C 110.375 0.0625 107.175781 -0.0117188 106.5625 0.125 Z M 113.1875 26.425781 C 116.261719 27.335938 119.238281 29.460938 121.261719 32.175781 C 126.011719 38.523438 124.863281 47.886719 118.75 52.914062 C 115.613281 55.488281 112.164062 56.648438 108.210938 56.460938 C 103.449219 56.25 99.5 54.125 96.625 50.25 C 93.289062 45.75 92.710938 39.4375 95.199219 34.460938 C 95.925781 33.011719 96.710938 31.914062 97.976562 30.613281 C 100.335938 28.148438 102.5 26.875 105.375 26.238281 C 106.273438 26.039062 106.863281 26.011719 109.25 26.050781 C 111.875 26.085938 112.136719 26.113281 113.1875 26.425781 Z M 113.1875 26.425781 \"/>\n                      <path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 106.386719 28.5625 C 103.1875 29.261719 100.199219 31.261719 98.460938 33.863281 C 96.726562 36.460938 96.050781 39.050781 96.261719 42.261719 C 96.613281 47.523438 100.648438 52.363281 105.875 53.773438 C 106.800781 54.011719 107.226562 54.050781 109.0625 54.050781 C 111.5 54.039062 112.449219 53.851562 114.210938 53.011719 C 115.613281 52.335938 116.613281 51.636719 117.835938 50.460938 C 119.175781 49.175781 119.988281 48.074219 120.675781 46.613281 C 122.335938 43.074219 122.238281 38.5625 120.4375 35.136719 C 118.738281 31.898438 115.148438 29.25 111.523438 28.550781 C 110.363281 28.324219 107.449219 28.335938 106.386719 28.5625 Z M 110.960938 31.574219 C 112.3125 31.851562 113.386719 32.3125 114.648438 33.148438 C 116.4375 34.351562 117.699219 36 118.335938 37.960938 C 118.585938 38.738281 118.675781 39.289062 118.726562 40.613281 C 118.851562 44.0625 118.074219 46.085938 115.789062 48.25 C 114.023438 49.925781 112.386719 50.726562 110.164062 51.011719 C 107.539062 51.351562 104.898438 50.550781 102.789062 48.761719 C 100.550781 46.886719 99.4375 44.625 99.289062 41.675781 C 99.175781 39.398438 99.6875 37.511719 100.925781 35.636719 C 101.675781 34.511719 102.386719 33.800781 103.511719 33.050781 C 105.738281 31.574219 108.414062 31.050781 110.960938 31.574219 Z M 110.960938 31.574219 \"/>\n                      <path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 58.5 55.886719 C 58.011719 57.148438 57.023438 59.835938 56.300781 61.875 C 55.585938 63.898438 54.925781 65.761719 54.835938 66 L 54.675781 66.4375 L 52.4375 66.511719 C 48.898438 66.636719 45.476562 67.125 43.164062 67.824219 C 42.386719 68.0625 41.699219 68.25 41.648438 68.25 C 41.585938 68.25 41.011719 67.5 40.375 66.585938 C 38.375 63.75 33.585938 57.1875 33.449219 57.101562 C 33.300781 57 32.289062 57.375 30.789062 58.074219 C 30.148438 58.375 29.585938 58.625 29.539062 58.625 C 29.476562 58.625 28.789062 59 28 59.449219 C 27.210938 59.914062 25.976562 60.625 25.25 61.039062 C 22.886719 62.386719 19.875 64.636719 19.875 65.0625 C 19.875 65.226562 20.550781 66.699219 24.085938 74.289062 L 25.523438 77.375 L 24.449219 78.5 C 23.863281 79.125 23.0625 80.011719 22.6875 80.476562 C 22.3125 80.9375 21.6875 81.675781 21.300781 82.125 C 20.476562 83.085938 18.699219 85.738281 18.136719 86.835938 C 17.925781 87.273438 17.699219 87.625 17.648438 87.625 C 17.601562 87.625 15.8125 87.324219 13.6875 86.949219 C 7.726562 85.898438 4.101562 85.351562 4 85.460938 C 3.863281 85.613281 2.726562 88.476562 2.210938 89.949219 C 1.699219 91.425781 0.914062 95.199219 0.386719 98.75 C 0.25 99.613281 0.113281 100.398438 0.0742188 100.5 C 0.0117188 100.664062 0.9375 101.0625 4.835938 102.550781 C 7.511719 103.574219 10.398438 104.6875 11.289062 105.039062 L 12.875 105.648438 L 12.875 107.300781 C 12.886719 110.324219 13.226562 112.851562 14.136719 116.5625 C 14.414062 117.664062 14.625 118.613281 14.625 118.6875 C 14.625 118.75 14.414062 118.960938 14.148438 119.136719 C 11.625 120.875 3.949219 126.449219 3.75 126.6875 C 3.449219 127.039062 5.761719 131.738281 7.925781 135.1875 C 8.851562 136.675781 10.585938 139.175781 11.273438 140.039062 L 11.5625 140.386719 L 13.75 139.375 C 19.039062 136.914062 23.851562 134.75 24.050781 134.75 C 24.175781 134.75 25 135.4375 25.898438 136.289062 C 27.9375 138.210938 29.011719 139.011719 31.8125 140.726562 C 33.398438 141.6875 34.074219 142.175781 34.101562 142.351562 C 34.125 142.488281 33.886719 144.136719 33.574219 146.023438 C 33.261719 147.898438 32.800781 150.863281 32.550781 152.601562 C 32.164062 155.273438 32.113281 155.789062 32.261719 155.886719 C 33.136719 156.449219 37.523438 157.835938 41.0625 158.675781 C 43.199219 159.1875 47.238281 159.9375 47.3125 159.851562 C 47.488281 159.625 50.574219 151.5 51.6875 148.3125 C 51.960938 147.550781 52.238281 146.898438 52.300781 146.851562 C 52.375 146.800781 53.3125 146.75 54.375 146.75 C 57.539062 146.75 59.710938 146.4375 63.085938 145.488281 L 64.925781 144.976562 L 65.25 145.335938 C 65.425781 145.539062 67.261719 148.101562 69.335938 151.023438 L 73.125 156.351562 L 75.25 155.375 C 78.074219 154.074219 79.726562 153.1875 81.675781 151.914062 C 83.386719 150.800781 86 148.851562 86.460938 148.351562 L 86.726562 148.0625 L 85.75 145.875 C 85.226562 144.675781 84.011719 142.023438 83.0625 140 C 82.125 137.976562 81.289062 136.136719 81.210938 135.914062 C 81.085938 135.511719 81.113281 135.488281 82.199219 134.3125 C 84.363281 132 86.238281 129.488281 87.386719 127.351562 C 87.738281 126.710938 88.101562 126.101562 88.199219 126 C 88.398438 125.789062 88.101562 125.75 95.6875 127 C 98.648438 127.5 101.300781 127.925781 101.574219 127.960938 L 102.085938 128.023438 L 102.5 126.988281 C 103.039062 125.574219 104.386719 121.386719 104.851562 119.6875 C 105.164062 118.539062 105.761719 115.386719 106.050781 113.289062 C 106.125 112.773438 106.113281 112.75 105.664062 112.523438 C 105.0625 112.210938 102.585938 111.273438 97.625 109.4375 C 95.460938 108.636719 93.5625 107.898438 93.414062 107.800781 C 93.136719 107.625 93.125 107.550781 93.125 105.648438 C 93.125 102.824219 92.75 100.074219 91.925781 96.835938 C 91.75 96.175781 91.625 95.5 91.648438 95.351562 C 91.675781 95.164062 92.550781 94.460938 94.550781 93.039062 C 96.925781 91.335938 102.273438 87.351562 102.664062 87 C 102.875 86.8125 101.039062 82.886719 99.550781 80.300781 C 98.125 77.8125 95.011719 73.5 94.664062 73.5 C 94.414062 73.5 90.75 75.136719 86.625 77.085938 C 84.523438 78.085938 82.664062 78.9375 82.476562 78.960938 C 82.175781 79.023438 81.9375 78.835938 80.523438 77.476562 C 78.898438 75.886719 76.761719 74.199219 75.1875 73.273438 C 74.363281 72.789062 73.25 72.039062 72.738281 71.625 C 72.476562 71.414062 72.375 72.125 73.875 62.6875 C 74.210938 60.488281 74.539062 58.488281 74.574219 58.226562 L 74.636719 57.773438 L 72.726562 57.023438 C 70.449219 56.136719 67.761719 55.25 67.335938 55.25 C 67.164062 55.25 66.8125 55.164062 66.550781 55.050781 C 66.050781 54.835938 61.3125 53.835938 60.113281 53.6875 L 59.398438 53.601562 Z M 55.664062 86.9375 C 61.8125 87.738281 66.976562 90.976562 69.988281 95.914062 C 71.335938 98.113281 72.460938 100.914062 72.886719 103.0625 C 73 103.636719 73.0625 104.800781 73.0625 106.4375 C 73.050781 108.710938 73.023438 109.074219 72.699219 110.4375 C 71.710938 114.699219 70.175781 117.664062 67.625 120.238281 C 64.648438 123.25 60.539062 125.351562 56.261719 126.0625 C 52.601562 126.675781 47.773438 125.8125 43.988281 123.863281 C 38.3125 120.925781 34.289062 114.898438 33.625 108.3125 C 33.273438 104.863281 34.300781 100.125 36.125 96.8125 C 38.800781 91.949219 44.085938 88.1875 49.726562 87.136719 C 51.976562 86.710938 53.550781 86.664062 55.664062 86.9375 Z M 55.664062 86.9375 \"/>\n                      <path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 51.875 89.835938 C 49.851562 90.050781 47.925781 90.648438 45.875 91.699219 C 41.324219 94.011719 38.789062 97.289062 37.4375 102.5625 C 36.523438 106.125 36.5625 108.800781 37.585938 111.851562 C 38.625 114.949219 41.324219 118.449219 44.136719 120.324219 C 49.289062 123.75 55.664062 124.1875 61.0625 121.460938 C 65.613281 119.1875 68.851562 115.023438 69.898438 110.113281 C 70.125 109.050781 70.175781 108.414062 70.175781 106.5625 C 70.175781 104.523438 70.148438 104.1875 69.835938 102.960938 C 68.6875 98.386719 65.761719 94.335938 62 92.125 C 59.238281 90.488281 54.898438 89.511719 51.875 89.835938 Z M 54.898438 93.9375 C 56.726562 94.136719 59.136719 95.039062 60.761719 96.125 C 63.050781 97.664062 65.113281 100.636719 65.898438 103.511719 C 66.148438 104.425781 66.1875 104.835938 66.175781 106.625 C 66.164062 108.324219 66.113281 108.863281 65.898438 109.675781 C 65.300781 111.863281 63.675781 114.539062 62.164062 115.851562 C 59.539062 118.113281 57.210938 119.101562 54.175781 119.210938 C 52.386719 119.289062 51.351562 119.136719 49.449219 118.539062 C 45.824219 117.398438 43.164062 114.789062 41.636719 110.914062 C 40.761719 108.664062 40.585938 105.726562 41.1875 103.335938 C 41.449219 102.351562 42.3125 100.511719 43.011719 99.488281 C 44.976562 96.574219 48.710938 94.300781 52.261719 93.886719 C 53.164062 93.789062 53.449219 93.789062 54.898438 93.9375 Z M 54.898438 93.9375 \"/>\n                      </g>\n                      </svg>\n                      `\n        clearInterval(window.SVGExist[id_du_div])// Arrête le timer\n      }\n    }, 100) // Vérifie toutes les 100ms\n  }\n}\n\n/**\n * Crée un diagramme pour une fonction arithmétique à deux étapes produit puis somme\n * @param {string} id_du_div id du div contenant le SVG\n * @param {number} w largeur du div du svg\n * @param {numer} h hauteur du div du svg\n * @param {string} nom nom de la fonction\n * @param {string} x_ant antécédent de départ\n * @param {array} etapes_expressions tableau contenant les opérations et les expressions algébriques des étapes\n * @author Sébastien Lozano\n */\nexport function SVG_machine_diag_3F12 (id_du_div, w, h, nom, x_ant, etapes_expressions) {\n  'use strict'\n  const interligne = 10// w/80; //h/10; // unité d'espacement\n  if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n  // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n  window.SVGExist[id_du_div] = setInterval(function () {\n    if ($(`#${id_du_div}`).length) {\n      $(`#${id_du_div}`).html('')// Vide le div pour éviter les SVG en doublon\n      // on crée un rectangle dont la taille est adaptée au texte\n      // let path_cadre_rect_ant = 'M0,0L0,-'+interligne+',L'+(w_x_ant + 2*interligne)+',-'+interligne+',L'+(w_x_ant + 2*interligne)+','+interligne+'L0,'+interligne+'Z';\n      document.getElementById(id_du_div).innerHTML = `\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 ` + w + ' ' + h + '\" width=\"' + w + `\">\n                      <g>\n                          <path d=\"M0 ` + 5 * interligne + 'L0 ' + 3 * interligne + 'L' + 5 * interligne + ' ' + 3 * interligne + 'L' + 5 * interligne + ' ' + 7 * interligne + 'L0 ' + 7 * interligne + `Z \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + interligne + '\" height=\"' + h / 2 + '\" x=\"' + 2.5 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">` + x_ant + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <line x1=\"` + 5 * interligne + '\" y1=\"' + 5 * interligne + '\" x2=\"' + 7 * interligne + '\" y2=\"' + 5 * interligne + `\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </line>\n                          <circle r=\"` + 2 * interligne + '\" cx=\"' + 9 * interligne + '\" cy=\"' + 5 * interligne + `\" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </circle>\n                          <path d=\"M` + 11 * interligne + ' ' + 5 * interligne + 'L' + 13 * interligne + ' ' + 5 * interligne + 'L' + (13 * interligne - interligne / 2) + ' ' + (5 * interligne - interligne / 2) + 'M' + 13 * interligne + ' ' + 5 * interligne + 'L' + (13 * interligne - interligne / 2) + ' ' + (5 * interligne + interligne / 2) + ` \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 4 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 7.5 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">×` + etapes_expressions[0][0] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <path d=\"M` + 13 * interligne + ' ' + 5 * interligne + 'L' + 13 * interligne + ' ' + 3 * interligne + 'L' + 21 * interligne + ' ' + 3 * interligne + 'L' + 21 * interligne + ' ' + 7 * interligne + 'L' + 13 * interligne + ' ' + 7 * interligne + `Z \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 2.5 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 16 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">` + etapes_expressions[0][1] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <line x1=\"` + 21 * interligne + '\" y1=\"' + 5 * interligne + '\" x2=\"' + 23 * interligne + '\" y2=\"' + 5 * interligne + `\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </line>\n                          <circle r=\"` + 2 * interligne + '\" cx=\"' + 25 * interligne + '\" cy=\"' + 5 * interligne + `\" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </circle>\n                          <path d=\"M` + 27 * interligne + ' ' + 5 * interligne + 'L' + 29 * interligne + ' ' + 5 * interligne + 'L' + (29 * interligne - interligne / 2) + ' ' + (5 * interligne - interligne / 2) + 'M' + 29 * interligne + ' ' + 5 * interligne + 'L' + (29 * interligne - interligne / 2) + ' ' + (5 * interligne + interligne / 2) + ` \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 4 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 23.5 * interligne + '\" y=\"' + h / 4 + `\">\n                          <body xmlns=\"http://www.w3.org/1999/xhtml\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">+` + etapes_expressions[1][0] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                              </body>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <path d=\"M` + 29 * interligne + ' ' + 5 * interligne + 'L' + 29 * interligne + ' ' + 3 * interligne + 'L' + 44 * interligne + ' ' + 3 * interligne + 'L' + 44 * interligne + ' ' + 7 * interligne + 'L' + 29 * interligne + ' ' + 7 * interligne + `Z \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 12 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 31 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">` + nom + '<span class=\"mopen\">(</span>' + x_ant + '<span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.408889em;\"></span>=<span class=\"mspace\" style=\"margin-right: 0.408889em;\"></span>' + etapes_expressions[1][1] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                  </svg>\t\n                  `\n\n      clearInterval(window.SVGExist[id_du_div])// Arrête le timer\n    }\n  }, 100) // Vérifie toutes les 100ms\n}\n\n/**\n* Crée une flèche orange pour la fonction machine\n* @param {object} groupe groupe svg\n* @param {string} chemin path pour la ligne\n* @param {string} couleur couleur\n* @Auteur Sébastien Lozano\n*/\nexport function SVG_fleche_machine_maths (groupe, chemin, couleur) {\n  'use strict'\n  return groupe.path(chemin).fill(couleur).stroke({ color: couleur, width: 1, linecap: 'round', linejoin: 'null' })\n}\n\n/** Trace un chemin pour un groupe donné avec une couleur donnée\n  * @param {object} groupe groupe\n  * @param {string} chemin path\n  * @param {string} couleur couleur\n  * @Auteur Sébastien Lozano\n  */\nexport function SVG_chemin (groupe, chemin, couleur) {\n  'use strict'\n  return groupe.path(chemin).fill('none').stroke({ color: couleur, width: 1, linecap: 'round', linejoin: 'null' })\n}\n\n/**\n   * Crée un diagramme pour une fonction arithmétique à une étape produit\n   * @param {string} id_du_div id du div contenant le SVG\n   * @param {number} w largeur du div du svg\n   * @param {numer} h hauteur du div du svg\n   * @param {string} nom nom de la fonction\n   * @param {string} x_ant antécédent de départ\n   * @param {array} etapes_expressions tableau contenant les opérations et les expressions algébriques des étapes\n   * @Auteur Sébastien Lozano\n   */\nexport function SVG_machine_diag_3F1_act_mono (id_du_div, w, h, nom, x_ant, etapes_expressions) {\n  'use strict'\n  const interligne = 10// w/80; //h/10; // unité d'espacement\n  if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n  // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n  window.SVGExist[id_du_div] = setInterval(function () {\n    if ($(`#${id_du_div}`).length) {\n      $(`#${id_du_div}`).html('')// Vide le div pour éviter les SVG en doublon\n      // on crée un rectangle dont la taille est adaptée au texte\n      // let path_cadre_rect_ant = 'M0,0L0,-'+interligne+',L'+(w_x_ant + 2*interligne)+',-'+interligne+',L'+(w_x_ant + 2*interligne)+','+interligne+'L0,'+interligne+'Z';\n      document.getElementById(id_du_div).innerHTML = `\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 ` + w + ' ' + h + '\" width=\"' + w + `\">\n                      <g>\n                          <path d=\"M0 ` + 5 * interligne + 'L0 ' + 3 * interligne + 'L' + 5 * interligne + ' ' + 3 * interligne + 'L' + 5 * interligne + ' ' + 7 * interligne + 'L0 ' + 7 * interligne + `Z \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + interligne + '\" height=\"' + h / 2 + '\" x=\"' + 2.5 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">` + x_ant + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <line x1=\"` + 5 * interligne + '\" y1=\"' + 5 * interligne + '\" x2=\"' + 7 * interligne + '\" y2=\"' + 5 * interligne + `\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </line>\n                          <circle r=\"` + 2 * interligne + '\" cx=\"' + 9 * interligne + '\" cy=\"' + 5 * interligne + `\" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </circle>\n                          <path d=\"M` + 11 * interligne + ' ' + 5 * interligne + 'L' + 13 * interligne + ' ' + 5 * interligne + 'L' + (13 * interligne - interligne / 2) + ' ' + (5 * interligne - interligne / 2) + 'M' + 13 * interligne + ' ' + 5 * interligne + 'L' + (13 * interligne - interligne / 2) + ' ' + (5 * interligne + interligne / 2) + ` \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 4 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 7.5 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  <span class=\"mord mathdefault\">×` + etapes_expressions[0][0] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                      <g>\n                          <path d=\"M` + 13 * interligne + ' ' + 5 * interligne + 'L' + 13 * interligne + ' ' + 3 * interligne + 'L' + 27 * interligne + ' ' + 3 * interligne + 'L' + 27 * interligne + ' ' + 7 * interligne + 'L' + 13 * interligne + ' ' + 7 * interligne + `Z \" fill=\"none\" stroke-linejoin=\"null\" stroke-linecap=\"round\" stroke-width=\"3\" stroke=\"#f15929\">\n                          </path>\n                          <foreignObject width=\"` + 12 * interligne + '\" height=\"' + h / 2 + '\" x=\"' + 16 * interligne + '\" y=\"' + h / 4 + `\">\n                              <div style=\"position: fixed\">\n                                  <span class=\"katex-display\">\n                                      <span class=\"katex\">\n                                          <span class=\"katex-html\" aria-hidden=\"true\">\n                                              <span class=\"base\">\n                                                  \n                                                  <span class=\"mord mathdefault\">` + nom + '<span class=\"mopen\">(</span>' + x_ant + '<span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right: 0.408889em;\"></span>=<span class=\"mspace\" style=\"margin-right: 0.408889em;\"></span>' + etapes_expressions[0][1] + `</span>\n                                              </span>\n                                          </span>\n                                      </span>\n                                  </span>\n                              </div>\n                          </foreignObject>\n                      </g>\n                  </svg>\t\n                  `\n\n      clearInterval(window.SVGExist[id_du_div])// Arrête le timer\n    }\n  }, 100) // Vérifie toutes les 100ms\n}\n\n/**\n   * Fonction pour particulariser une police svg et ses paramètres\n   * @param {string} font\n   * @param {string} interligne\n   * @param {string} ancre\n   * @param {string} f_style\n   * @param {string} f_weight\n   * @author Sébastien Lozano\n   */\nexport function my_svg_font (font, interligne, ancre, f_style, f_weight) {\n  'use strict'\n  return {\n    family: font,\n    size: interligne,\n    anchor: ancre,\n    style: f_style,\n    //, leading : 0.5\n    weight: f_weight\n  }\n}\n\n/**\n   * Fonction pour créer une machine mathématique SVG, une fonction!\n   * gestion du rendu KaTeX temporaire avec insertion manuelle de balises foreignObject pour les textes\n   * ATTENTION BUG SVG DONC LES ANIMATIONS SONT FILMEES A PARTIR DE CELLES GENEREES PAR LA FONCTION SVG_machine_maths() SOUS FIREFOX\n   * DE FACON A AVOIR UN RENDU UNIFORME QUEL QUE SOIT LE NAVIGATEUR ON REND LES ANIMATIONS PAR DES VIDEOS\n   * ON LAISSE LA PIROUETTE DE DETECTION DU USERAGENT EN COMMENTAIRE EN ATTENDANT DE TROUVER UNE SOLUTION DE RENDU LATEX DANS SVG UNIVERSELLE\n   * @param {string} id_du_div id_du_div\n   * @param {number} w width du svg\n   * @param {number} h height du svg\n   * @param {string} nom nom de la fonction\n   * @param {string} etape1 etape 1 du procédé de calcul\n   * @param {string} etape2 etape 2 du procédé de calcul\n   * @param {string} etape3 etape 3 du procédé de calcul\n   * @param {string} x_ligne1 antécédent ligne1\n   * @param {string} x_ligne2 antécédent ligne2\n   * @param {string} y_ligne1 image ligne1\n   * @param {string} y_ligne2 image ligne2\n   * @author Sébastien Lozano\n   */\nexport function SVG_machine_maths (id_du_div, w, h, nom, etape1, etape2, etape3, x_ligne1, x_ligne2, y_ligne1, y_ligne2) {\n  'use strict'\n  const interligne = 15 // pour un interligne uniforme\n  const prop_font = my_svg_font('Helvetica', interligne, 'start', 'normal', 'normal')\n  const prop_font_nom = my_svg_font('Helvetica', interligne, 'start', 'normal', 'bold')\n  const prop_font_etape = my_svg_font('Helvetica', 4 * interligne / 5, 'start', 'normal', 'normal')\n\n  if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n  // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n  window.SVGExist[id_du_div] = setInterval(function () {\n    if ($(`#${id_du_div}`).length) {\n      $(`#${id_du_div}`).html('')// Vide le div pour éviter les SVG en doublon\n      // const mon_svg = SVG().addTo(`#${id_du_div}`).viewbox(0, 0, w, h).size('100%','100%');\n      const mon_svg = SVG().addTo(`#${id_du_div}`).viewbox(0, 0, w, h)\n      // on trace un cadre pour le debug\n      // mon_svg.path('M0,0 L'+w+',0L'+w+','+h+'L0,'+h+'Z').fill('none').stroke({ color: '#f15929', width: 1, linecap: 'round', linejoin:'null'});\n\n      // path pour créer des fleches\n      const path_fleche = 'm0,0 l-' + interligne / 2 + ',-' + interligne + ' l' + interligne + ',' + interligne + ' l-' + interligne + ',' + interligne + ' l' + interligne / 2 + ',-' + interligne + 'z'\n\n      // On crée une timeline\n      const timeline = new SVG.Timeline()\n\n      // ------------CREATION DES GROUPES----------------------\n      // ------------Antécédent--------------------------------\n      const ant = mon_svg.group()\n\n      // ------------Image-------------------------------------\n      const im = mon_svg.group()\n\n      // ------------PREPARATION DES DIMENSIONS NECESSAIRES----\n      // ------------Dimension Antécédent----------------------\n      const ant_ligne1 = ant.text(x_ligne1).font(prop_font)\n      const ant_ligne2 = ant.text(x_ligne2).font(prop_font)\n      const w_ant = Math.max(ant_ligne1.length(), ant_ligne2.length()) + interligne\n      ant_ligne1.clear()\n      ant_ligne2.clear()\n\n      // ------------Dimension Image---------------------------\n      const im_ligne1 = im.text(y_ligne1).font(prop_font)\n      const im_ligne2 = im.text(y_ligne2).font(prop_font)\n      const w_im = Math.max(im_ligne1.length(), im_ligne2.length()) + interligne\n      im_ligne1.clear()\n      im_ligne2.clear()\n\n      // ------------Dimension Machine-------------------------\n      // on crée des variables pour le texte à afficher sur la machine afin de récupérer leur taille\n      // pour ajuster celle de la machine.\n      let W_machine_nom, machine_nom, machine_etape1, w_machine_etape1, machine_etape2, w_machine_etape2, machine_etape3, w_machine_etape3\n      if (nom != '') {\n        machine_nom = mon_svg.text(nom).font(prop_font_nom)\n        w_machine_nom = machine_nom.length()\n        machine_nom.clear()\n      } else {\n        w_machine_nom = 0\n      }\n      if (etape1 != '') {\n        machine_etape1 = mon_svg.text(etape1).font(prop_font_etape)\n        w_machine_etape1 = machine_etape1.length()\n        machine_etape1.clear()\n      } else {\n        w_machine_etape1 = 0\n      }\n      if (etape2 != '') {\n        machine_etape2 = mon_svg.text(etape2).font(prop_font_etape)\n        w_machine_etape2 = machine_etape2.length()\n        machine_etape2.clear()\n      } else {\n        w_machine_etape2 = 0\n      }\n      if (etape3 != '') {\n        machine_etape3 = mon_svg.text(etape3).font(prop_font_etape)\n        w_machine_etape3 = machine_etape3.length()\n        machine_etape3.clear()\n      } else {\n        w_machine_etape3 = 0\n      }\n\n      const w_etape_max = Math.max(w_machine_nom, w_machine_etape1, w_machine_etape2, w_machine_etape3, w_ant + interligne, w_im + interligne) + 1.5 * interligne\n\n      // ------------GROUPE ANTECEDENT-------------------------\n      const ant_ligne = ant.foreignObject(w_ant, h).attr({ x: '0', y: '0' })\n      const antDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div')\n      katex.render(x_ligne1 + '\\\\newline ' + x_ligne2, antDiv, {\n        displayMode: true, throwOnError: true, errorColor: '#CC0000', strict: 'ignore', trust: false\n      })\n      ant_ligne.add(antDiv)\n      ant_ligne.dmove(0, -antDiv.offsetHeight / 2)\n      const fleche_ant = SVG_fleche_machine_maths(ant, path_fleche, '#f15929')\n      fleche_ant.dmove(antDiv.offsetWidth + interligne / 2, interligne)\n      // on positionne le groupe antécédent\n      ant.dmove(0, h / 2 - interligne)\n\n      // ------------GROUPE IMAGE-------------------------\n      const im_ligne = im.foreignObject(w_im, h).attr({ x: '0', y: '0' })\n      const imDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div')\n      katex.render(y_ligne1 + '\\\\newline ' + y_ligne2, imDiv, {\n        displayMode: true, throwOnError: true, errorColor: '#CC0000', strict: 'ignore', trust: false\n      })\n      im_ligne.add(imDiv)\n      im_ligne.dmove(0, -imDiv.offsetHeight / 2)\n      const fleche_im = SVG_fleche_machine_maths(im, path_fleche, '#f15929')\n      fleche_im.dmove(-interligne / 2, interligne)\n      // on positionne le groupe image\n      im.dmove(w / 2 - imDiv.offsetWidth / 2, h / 2 - interligne)\n\n      // ------------GROUPE MACHINE-------------------------\n      // const path_machine = 'M-5,0 L-5,-5 L-5,5 M-5,0 L10,0 L10,-40 L100,-40 L100,0 L120,0 L115,-5 L120,0 L115,5 L120,0 L100,0 L100,40 L10,40 L10,0';\n      const path_machine = 'M-10,0 L-10,-5 L-10,5 M-10,0 L10,0 L10,-' + (h / 2 - 5) + ' L' + (w_etape_max + 20) + ',-' + (h / 2 - 5) + ' L' + (w_etape_max + 20) + ',0 L' + (w_etape_max + 40) + ',0 L' + (w_etape_max + 35) + ',-5 L' + (w_etape_max + 40) + ',0 L' + (w_etape_max + 35) + ',5 L' + (w_etape_max + 40) + ',0 L' + (w_etape_max + 20) + ',0 L' + (w_etape_max + 20) + ',' + (h / 2 - 5) + ' L10,' + (h / 2 - 5) + ' L10,0'\n      const machine = mon_svg.path(path_machine).fill('#fff').stroke({ color: '#f15929', width: 3, linecap: 'round', linejoin: 'round' })\n      machine.dmove(w / 2 - w_etape_max / 2 - 20 + interligne / 2, h / 2) // w/2;  60 est la moitié de la taille de la machine en largeur\n\n      const fobj_machine = mon_svg.foreignObject(w_etape_max, h).attr({ x: w / 2 - w_etape_max / 2, y: '0' })\n      const machineDiv = document.createElementNS('http://www.w3.org/1999/xhtml', 'div')\n      katex.render('\\\\mathbf{' + nom + '}\\\\newline ' + etape1 + '\\\\newline ' + etape2 + '\\\\newline ' + etape3, machineDiv, {\n        displayMode: true, throwOnError: true, errorColor: '#CC0000', strict: 'ignore', trust: false\n      })\n      fobj_machine.add(machineDiv)\n      fobj_machine.dmove(0, h / 2 - interligne - machineDiv.offsetHeight / 2)\n\n      // ------------ANIMATION-------------------------\n      ant.timeline(timeline)\n      im.timeline(timeline)\n\n      const runner1 = ant.animate(8000, 0, 'absolute').dmove(w / 2 - w_ant / 2, 0)\n      const runner2 = im.animate(8000, 0, 'after').dmove(w - w_im / 2, 0)\n\n      runner1.loop(true, false, 8000)\n      runner2.loop(true, false, 8000)\n\n      clearInterval(window.SVGExist[id_du_div])// Arrête le timer\n    }\n  }, 100) // Vérifie toutes les 100ms\n}\n"],"sourceRoot":""}