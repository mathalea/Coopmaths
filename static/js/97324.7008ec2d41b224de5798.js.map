{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6M31.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","amcReady","amcType","interactifReady","interactifType","ExerciceConversionsVolumes","niveau","Exercice","this","sup","sup2","sup3","consigne","spacing","nbColsCorr","nouvelleVersion","parseInt","autoCorrection","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","a","k","div","resultat","resultat2","resultat3","resultat4","typesDeQuestions","texte","texteCorr","i","cpt","nbQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","ecart","unite2","multiplicationsPar1000","Math","pow","enonce","propositions","statut","interactif","propositionsQcm","ajouteChampTexteMathLive","setReponse","parseFloat","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/97324.7008ec2d41b224de5798.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, arrondi, calcul, texNombre, texTexte } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, propositionsQcm, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Conversions de volume'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = ['qcm', 'mathLive']\n\n/**\n * Conversions de volumes.\n *\n * Dans la correction, on ne voit qu'une multiplication ou qu'un division pour obtenir le résultat\n *\n * * 1 : Conversions en mètres-cubes avec des multiplications\n * * 2 : Conversions en mètres-cubes avec des divisions\n * * 3 : Conversions en mètres-cubes avec des multiplications ou divisions\n * * 4 : Conversions avec des multiplications ou divisions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Référence 6M31\n */\nexport default function ExerciceConversionsVolumes (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.sup3 = 1 // interactifType Qcm\n  this.titre = titre\n  this.consigne = 'Compléter'\n  this.spacing = 2\n  this.nbColsCorr = 1\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n\n  this.nouvelleVersion = function () {\n    this.interactifType = parseInt(this.sup3) === 2 ? 'mathLive' : 'qcm'\n    this.autoCorrection = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const prefixeMulti = [\n      ['da', '10\\\\times10\\\\times10', 1000],\n      ['h', '100\\\\times100\\\\times100', 1000000],\n      ['k', '1~000\\\\times1~000\\\\times1~000', 1000000000]\n    ]\n    const prefixeDiv = [\n      ['d', '10\\\\div10\\\\div10', 1000],\n      ['c', '100\\\\div100\\\\div100', 1000000],\n      ['m', '1~000\\\\div1~000\\\\div1~000', 1000000000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    for (\n      let i = 0,\n        a,\n        k,\n        div,\n        resultat,\n        resultat2,\n        resultat3,\n        resultat4,\n        typesDeQuestions,\n        texte,\n        texteCorr,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      this.autoCorrection[i] = {}\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 4)\n      }\n      k = randint(0, 2) // Choix du préfixe\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else if (typesDeQuestions === 3) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions === 4) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        ])\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n\n        resultat = calcul(a * prefixeMulti[k][2]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(a * 10 ** (k + 1))\n        resultat3 = calcul(a * 10 ** (k - 2))\n        resultat4 = calcul(a * 10 ** ((k + 2)))\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^3' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^3' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^3' +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          prefixeMulti[k][1] +\n          texTexte(unite) +\n          '^3' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^3' +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        k = randint(0, 1) // Pas de conversions de mm^3 en m^3 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = calcul(a / prefixeMulti[k][2]).toString() // Attention aux notations scientifiques pour 10e-8\n        resultat2 = calcul(a / 10 ** (k + 1))\n        resultat3 = calcul(a / 10 ** (k - 2))\n        resultat4 = calcul(a / 10 ** ((k + 2)))\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^3' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^3' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^3' +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\div' +\n          prefixeDiv[k][1] +\n          texTexte(unite) +\n          '^3' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^3' +\n          '$'\n      } else if (typesDeQuestions === 4) {\n        const unite1 = randint(0, 3)\n        let ecart = randint(1, 2) // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1\n        }\n        const unite2 = unite1 + ecart\n        let multiplicationsPar1000 = ''\n\n        if (randint(0, 1) > 0) {\n          switch (ecart) {\n            case 1:\n              multiplicationsPar1000 = '\\\\times 1~000'\n              break\n            case 2:\n              multiplicationsPar1000 = '\\\\times 1~000 \\\\times 1~000'\n              break\n            case 3:\n              multiplicationsPar1000 =\n                '\\\\times 1~000 \\\\times 1~000 \\\\times 1~000'\n              break\n          }\n          resultat = calcul(a * Math.pow(10, 3 * ecart))\n          resultat2 = calcul(a * Math.pow(10, 2 * ecart))\n          resultat3 = calcul(a * Math.pow(10, ecart))\n          resultat4 = calcul(a * Math.pow(10, -3 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' =  ' +\n            texNombre(a) +\n            multiplicationsPar1000 +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            '$'\n        } else {\n          switch (ecart) {\n            case 1:\n              multiplicationsPar1000 = '\\\\div 1~000'\n              break\n            case 2:\n              multiplicationsPar1000 = '\\\\div 1~000 \\\\div 1~000'\n              break\n            case 3:\n              multiplicationsPar1000 = '\\\\div 1~000 \\\\div 1~000 \\\\div 1~000'\n              break\n          }\n          resultat = calcul(a / Math.pow(10, 3 * ecart))\n          resultat2 = calcul(a / Math.pow(10, 2 * ecart))\n          resultat3 = calcul(a / Math.pow(10, ecart))\n          resultat4 = calcul(a / Math.pow(10, -3 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^3' +\n            ' =  ' +\n            texNombre(a) +\n            multiplicationsPar1000 +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '^3' +\n            '$'\n        }\n      }\n      // else if(typesDeQuestions==5) { // Pour typesDeQuestions==5\n      // prefixeMulti = [['L',0.001],['dL',0.0001],['cL',0.00001],['mL',0.000001]];\n      // k = randint(0,1)\n      // resultat = calcul(a*prefixeMulti[k][1]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n      // texte = '$ '+ texNombre(a) + texTexte(prefixeMulti[k][0]) + ' = \\\\dotfill ' + texTexte(unite)  + '^3' + '$';\n      // texteCorr = '$ '+ texNombre(a) + texTexte(prefixeMulti[k][0]) + ' =  ' + texNombre(a) + '\\\\times' + texNombre(prefixeMulti[k][1]) + texTexte(unite)  + '^3'\n      //  + ' = ' + texNombre(resultat) + texTexte(unite)+ '^2' + '$';\n      // }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [{\n        texte: `$${texNombre(resultat)}$`,\n        statut: true\n      },\n      {\n        texte: `$${texNombre(resultat2)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat3)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat4)}$`,\n        statut: false\n      }\n      ]\n      if (this.interactif && this.interactifType === 'qcm') {\n        texte += propositionsQcm(this, i).texte\n      } else {\n        texte += ajouteChampTexteMathLive(this, i)\n        setReponse(this, i, parseFloat(resultat))\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    4,\n    '1 : Conversions en mètres-cubes avec des multiplications\\n2 : Conversions en mètres-cubes avec des divisions\\n3 : Conversions en mètres-cubes avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n  if (context.isHtml && !context.isDiaporama) this.besoinFormulaire3Numerique = ['Exercice interactif', 2, '1 : QCM\\n2 : Numérique'] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}