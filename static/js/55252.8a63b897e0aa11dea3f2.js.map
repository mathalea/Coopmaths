{"version":3,"file":"js/55252.8a63b897e0aa11dea3f2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3L11-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { randint, combinaisonListes, ecritureParentheseSiNegatif, lettreDepuisChiffre, printlatex, listeQuestionsToContenuSansNumero } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Réduire une expression'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcType = 'AMCHybride'\nexport const amcReady = true\n\n/**\n* Réduire des expressions lorsque c'est possible\n*\n* @author Rémi Angot\n* 3L11-2\n*/\nexport default function ReductionSiPossible () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Réduire les expressions suivantes, si cela est possible.'\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = context.isHtml ? 3 : 2\n  this.spacingCorr = context.isHtml ? 3 : 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    let typesDeQuestionsDisponibles\n    context.isAmc ? typesDeQuestionsDisponibles = ['ax+b', 'ax+bx', 'ax*b', 'b*ax', 'ax+b+cx+d', 'b+ax+d+cx', 'ax+b+x'] : typesDeQuestionsDisponibles = ['ax+b', 'ax+bx', 'ax+bx2', 'ax*b', 'b*ax', 'ax+b+cx+d', 'b+ax+d+cx', 'ax+b+x']\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, reponse, coeffa, constb, a, b, c, d, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      a = randint(-11, 11, 0)\n      b = randint(-11, 11, [0, a])\n      c = randint(-11, 11, [0])\n      d = randint(-11, 11, 0)\n      switch (listeTypeDeQuestions[i]) {\n        case 'ax+b':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b})`)}$`\n          texteCorr = texte\n          reponse = printlatex(`${a}*x+(${b})`)\n          coeffa = a\n          constb = b\n          break\n        case 'ax+bx':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b}*x)`)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b}*x)`)}=${printlatex(`${a + b}x`)}$`\n          reponse = printlatex(`${a + b}x`)\n          coeffa = a + b\n          constb = 0\n          break\n        case 'ax+bx2':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b}*x^2)`)}$`\n          texteCorr = texte\n          reponse = printlatex(`${a}*x+(${b}*x^2)`)\n          // celui-ci ne peut pas être choisi pour AMC\n          break\n        case 'ax*b':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x`)}\\\\times ${ecritureParentheseSiNegatif(b)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x`)}\\\\times ${ecritureParentheseSiNegatif(b)}=${printlatex(`${a * b}*x`)}$`\n          reponse = printlatex(`${a * b}*x`)\n          coeffa = a * b\n          constb = 0\n          break\n        case 'b*ax':\n          a = randint(1, 11)\n          texte = `$${lettreDepuisChiffre(i + 1)}=${b}\\\\times ${printlatex(`${a}*x`)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${b}\\\\times ${printlatex(`${a}*x`)}=${printlatex(`${b * a}*x`)}$`\n          reponse = printlatex(`${b * a}*x`)\n          coeffa = a * b\n          constb = 0\n          break\n        case 'ax+b+cx+d':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b})+(${c})*x+(${d})`)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b})+(${c})*x+(${d})`)}`\n          if (b + d === 0) {\n            if (a + c === 0) {\n              texteCorr += '=0$'\n              reponse = '0'\n              coeffa = 0\n              constb = 0\n            } else {\n              texteCorr += `=${printlatex(`${a + c}*x`)}$`\n              reponse = printlatex(`${a + c}*x`)\n              coeffa = a + c\n              constb = 0\n            }\n          } else {\n            if (a + c === 0) {\n              texteCorr += `=${b + d}$`\n              reponse = `${b + d}`\n              constb = b + d\n              coeffa = 0\n            } else {\n              texteCorr += `=${printlatex(`${a + c}*x+(${b + d})`)}$`\n              reponse = printlatex(`${a + c}*x+(${b + d})`)\n              coeffa = a + c\n              constb = b + d\n            }\n          }\n          break\n        case 'b+ax+d+cx':\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${b}+(${a})*x+(${d})+(${c})*x`)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${b}+(${a})*x+(${d})+(${c})*x`)}`\n          if (b + d === 0) {\n            if (a + c === 0) {\n              texteCorr += '=0$'\n              reponse = '0'\n              coeffa = 0\n              constb = 0\n            } else {\n              texteCorr += `=${printlatex(`${a + c}*x`)}$`\n              coeffa = a + c\n              constb = 0\n            }\n          } else {\n            if (a + c === 0) {\n              texteCorr += `=${b + d}$`\n              reponse = `${b + d}$`\n              coeffa = 0\n              constb = b + d\n            } else {\n              texteCorr += `=${printlatex(`${a + c}*x+(${b + d})`)}$`\n              reponse = printlatex(`${a + c}*x+(${b + d})`)\n              coeffa = a + c\n              constb = b + d\n            }\n          }\n          break\n        case 'ax+b+x':\n          a = randint(-11, 11, [0, -1])\n          texte = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b})+x`)}$`\n          texteCorr = `$${lettreDepuisChiffre(i + 1)}=${printlatex(`${a}*x+(${b})+x`)}=${printlatex(`${a + 1}*x+(${b})`)}$`\n          reponse = printlatex(`${a + 1}*x+(${b})`)\n          coeffa = a + 1\n          constb = b\n          break\n      }\n      if (!context.isAmc) {\n        setReponse(this, i, reponse)\n        texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texte: ' $=$' })\n      } else {\n        this.autoCorrection[i] = {\n          enonce: texte,\n          propositions: [\n            {\n              type: 'AMCOpen',\n              propositions: [{\n                texte: texteCorr,\n                statut: 3\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: 'valeur de $a$ dans $ax+b$',\n                  valeur: [coeffa],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: true,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: 'valeur de $b$ dans $ax+b$',\n                  valeur: [constb],\n                  param: {\n                    digits: 2,\n                    decimals: 0,\n                    signe: true,\n                    approx: 0\n                  }\n                }\n              }]\n            }\n          ]\n        }\n      }\n\n      if (this.questionJamaisPosee(i, a, b, c, d)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenuSansNumero(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcType","amcReady","ReductionSiPossible","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","spacing","context","spacingCorr","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","reponse","coeffa","constb","a","b","c","d","i","cpt","randint","lettreDepuisChiffre","printlatex","ecritureParentheseSiNegatif","enonce","propositions","type","statut","valeur","param","digits","decimals","signe","approx","setReponse","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenuSansNumero","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}