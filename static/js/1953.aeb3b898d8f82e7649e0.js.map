{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Exercice_conversions_de_longueurs.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["Exercice_conversions_de_longueurs","niveau","Exercice","this","sup","sup2","titre","consigne","spacing","nouvelleVersion","listeQuestions","listeCorrections","prefixe_multi","prefixe_div","unite","liste_unite","liste_unite1","combinaisonListes","nbQuestions","liste_de_k","a","k","div","resultat","texte","texteCorr","i","cpt","typesDeQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","unite2","Math","max","min","ecart","pow","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/1953.aeb3b898d8f82e7649e0.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,arrondi,texNombre,texTexte,calcul} from '../../modules/outils.js'\n\n/**\n * Conversions de longueur en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * * 1 : De dam, hm, km vers m\n * * 2 : De dm, cm, mm vers m\n * * 3 : Conversions en mètres\n * * 4 : Toutes les conversions de longueurs\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n */\nexport default function Exercice_conversions_de_longueurs(niveau = 1) {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = niveau; // Niveau de difficulté de l'exercice\n  this.sup2 = false; // Avec des nombres décimaux ou pas\n  this.titre = \"Conversions de longueurs\";\n  this.consigne = \"Compléter\";\n  this.spacing = 2;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let prefixe_multi = [\n      [\" da\", 10],\n      [\" h\", 100],\n      [\" k\", 1000],\n    ];\n    let prefixe_div = [\n      [\" d\", 10],\n      [\" c\", 100],\n      [\" m\", 1000],\n    ];\n    let unite = \"m\";\n    let liste_unite = [\"mm\", \"cm\", \"dm\", \"m\", \"dam\", \"hm\", \"km\"];\n    let liste_unite1 = combinaisonListes([0, 1, 2, 3, 4, 5, 6], this.nbQuestions);\n    let liste_de_k = combinaisonListes([0, 1, 2], this.nbQuestions);\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let typesDeQuestions;\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup;\n      } else {\n        typesDeQuestions = randint(1, 4);\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = liste_de_k[i]; //Plutôt que de prendre un préfix au hasard, on alterne entre 10,100 et 1000\n      if (typesDeQuestions == 1) {\n        // niveau 1\n        div = false; // Il n'y aura pas de division\n      } else if (typesDeQuestions == 2) {\n        // niveau 2\n        div = true; // Avec des divisions\n      } else {\n        div = choice([true, false]); // Avec des multiplications ou des divisions\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),\n        ]);\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9),\n        ]);\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        resultat = calcul(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_multi[k][0] + unite) +\n          \" = \\\\dotfill \" +\n          texTexte(unite) +\n          \"$\";\n\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_multi[k][0] + unite) +\n          \" =  \" +\n          texNombre(a) +\n          \"\\\\times\" +\n          texNombre(prefixe_multi[k][1]) +\n          texTexte(unite) +\n          \" = \" +\n          texNombre(resultat) +\n          texTexte(unite) +\n          \"$\";\n      } else if (div && typesDeQuestions < 4) {\n        resultat = calcul(a / prefixe_div[k][1]).toString(); // Attention aux notations scientifiques pour 10e-8\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_div[k][0] + unite) +\n          \" = \\\\dotfill \" +\n          texTexte(unite) +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_div[k][0] + unite) +\n          \" =  \" +\n          texNombre(a) +\n          \"\\\\div\" +\n          texNombre(prefixe_div[k][1]) +\n          texTexte(unite) +\n          \" = \" +\n          texNombre(resultat) +\n          texTexte(unite) +\n          \"$\";\n      } else {\n        // pour type de question = 4\n        let unite1 = liste_unite1[i];\n        let unite2 = randint(Math.max(0, unite1 - 3), Math.min(unite1 + 3, 6), unite1);\n        if (unite1 > unite2) {\n          [unite1, unite2] = [unite2, unite1];\n        }\n        let ecart = unite2 - unite1; // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite2]) +\n            \" = \\\\dotfill \" +\n            texTexte(liste_unite[unite1]) +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite2]) +\n            \" =  \" +\n            texNombre(a) +\n            \"\\\\times\" +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(liste_unite[unite1]) +\n            \" = \" +\n            texNombre(resultat) +\n            texTexte(liste_unite[unite1]) +\n            \"$\";\n        } else {\n          resultat = calcul(a / Math.pow(10, ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite1]) +\n            \" = \\\\dotfill \" +\n            texTexte(liste_unite[unite2]) +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite1]) +\n            \" =  \" +\n            texNombre(a) +\n            \"\\\\div\" +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(liste_unite[unite2]) +\n            \" = \" +\n            texNombre(resultat) +\n            texTexte(liste_unite[unite2]) +\n            \"$\";\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace(\"= \\\\dotfill\", \"\\\\text{ en }\");\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            \"\\\\dotfill\",\n            \"................................................\"\n          );\n        }\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Niveau de difficulté\",\n    4,\n    \"1 : De dam, hm, km vers m\\n\\\n2 : De dm, cm, mm vers m\\n3 : Conversions en mètres\\n4 : Toutes les conversions de longueurs\",\n  ];\n  this.besoinFormulaire2CaseACocher = [\"Avec des nombres décimaux\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}