{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5C11-1.js","webpack://mathalea/./src/js/exercices/5e/_Ecrire_une_expression_numerique.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","TraduireUneExpressionParUnePhrase","EcrireUneExpressionNumerique","this","version","Exercice","consigne","nbQuestions","nbCols","nbColsCorr","sup2","sup","sup3","nouvelleVersion","expf","expn","expc","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","split","nbval","nbOperations","resultats","decimal","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","val1","val2","i","cpt","parseInt","randint","litteral","ChoisirExpressionLitterale","choisirExpressionNumerique","indexOf","substring","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2CaseACocher","besoinFormulaire3CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/47785.ef2306876f0ff00ae298.js","sourcesContent":["import EcrireUneExpressionNumerique from './_Ecrire_une_expression_numerique.js'\n\nexport const titre = 'Traduire une expression par une phrase'\n\n/**\n * @author Jean-Claude Lhote\n * Référence 5C11-1\n */\nexport default function TraduireUneExpressionParUnePhrase () {\n  EcrireUneExpressionNumerique.call(this)\n  this.version = 2\n  this.titre = titre\n}\n","import Exercice from '../Exercice.js'\nimport choisirExpressionNumerique from './_choisirExpressionNumerique.js'\nimport ChoisirExpressionLitterale from './_Choisir_expression_litterale.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\n/**\n* Fonction noyau pour 6 fonctions qui utilisent les mêmes variables et la fonction choisirExpressionNumerique\n* @author Jean-Claude Lhote\n* Référence 5C11, 5C11-1, 5C11-2, 5C12, 5C12-1, 5L13\n*/\nexport default function EcrireUneExpressionNumerique () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup2 = false // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n  this.sup = false\n  this.sup3 = true\n  this.version = 1 // 1 pour ecrire une expression, 2 pour écrire la phrase, 3 pour écrire l'expression et la calculer, 4 pour calculer une expression numérique\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestionsDisponibles = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) { // Si aucune liste n'est saisie\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    } else {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        typesDeQuestionsDisponibles[0] = this.sup\n      } else {\n        typesDeQuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    let expf; let expn; let expc; let decimal = 1; let nbval; let nbOperations; let resultats\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2) decimal = 10\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      nbOperations = parseInt(listeTypeDeQuestions[i])\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      if (this.version > 2 && nbOperations === 1 && !this.litteral) nbOperations++\n      if (!this.litteral) { resultats = choisirExpressionNumerique(nbOperations, decimal, this.sup3) } else { resultats = ChoisirExpressionLitterale(nbOperations, decimal, val1, val2, this.sup3) }\n      expf = resultats[0]\n      expn = resultats[1]\n      expc = resultats[2]\n      nbval = resultats[3]\n      switch (this.version) {\n        case 1:\n          this.consigne = 'Traduire la phrase par un calcul (il n’est pas demandé d’effectuer ce calcul).'\n          texte = `${expf}.`\n          texteCorr = `${expf} s'écrit<br>${expn}.`\n          break\n        case 2:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Traduire le calcul par une phrase en français.'\n          texte = `${expn}`\n          expf = 'l' + expf.substring(1)\n          texteCorr = `${expn} est ${expf}.`\n          break\n        case 3:\n          this.consigne = 'Traduire la phrase par un calcul et effectuer ce calcul en respectant les priorités opératoires.'\n          if (!this.litteral) texte = `${expf}.`\n          else if (nbval === 2) texte = `${expf} puis calculer pour $x=${val1}$ et $y=${val2}$.` // nbval contient le nombre de valeurs en cas de calcul littéral\n          else texte = `${expf} puis calculer pour $x=${val1}$.`\n          texteCorr = `${expf} s'écrit ${expn}.<br>`\n          if (!this.litteral) texteCorr = `${expc}.`\n          else if (nbval === 2) texteCorr += `Pour $x=${val1}$ et $y=${val2}$ :<br> ${expc}.`\n          else texteCorr += `Pour $x=${val1}$ :<br>${expc}.`\n          break\n        case 4:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Calculer en respectant les priorités opératoires.'\n          if (!this.litteral) texte = `${expn}.`\n          else if (nbval === 2) texte = `Pour $x=${val1}$ et $y=${val2}$, calculer ${expn}.`\n          else texte = `Pour $x=${val1}$, calculer ${expn}.`\n          if (!this.litteral) texteCorr = `${expc}.`\n          else if (nbval === 2) texteCorr = `Pour $x=${val1}$ et $y=${val2}$ :<br>${expc}.`\n          else texteCorr = `Pour $x=${val1}$ :<br>${expc}.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Choix des expressions', 'Nombres séparés par des tirets\\n 1 : Expressions de base à une opération\\n2 : Expressions à deux opérations\\n3 : Expressions à 3 opérations\\n4 : Expressions à 4 opérations\\n5 : Expressions complexes'] // Texte, tooltip\n  this.besoinFormulaire2CaseACocher = ['Avec décimaux.', false]\n  this.besoinFormulaire3CaseACocher = ['Avec le signe × devant les parenthèses', true]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}