{"version":3,"file":"js/98785.ec824ceaa5280941b70e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6D12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, minToHoraire, minToHour, prenomF, prenom } from '../../modules/outils.js'\n\nexport const titre = 'Calculer des durées ou déterminer un horaire'\n\n/**\n * Problèmes où il faut calculer la durée d'un évèbement ou un horaire.\n * Paramétrage possible :\n * * 1 : calculs de durées\n * * 2 : calculer l'heure de début\n * * 3 : calculer l'heure de fin\n * * 4 : mélange des 3 types précédents\n * @author Rémi Angot\n * Référence 6D12\n */\nexport default function CalculsDeDureesOuHoraires () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.sup = 4\n  this.spacing = 2\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typeDeContexte = combinaisonListes(\n      [1, 2, 3, 4, 5],\n      this.nbQuestions\n    )\n    let typesDeQuestions // 1 : calcul de durées // 2 : calcul de l'horaire de début // 3 : calcul de l'horaire de fin // 4 : mélange\n\n    if (this.sup < 4) {\n      // que des questions de niveau 1 ou que des questions de niveau 2\n      typesDeQuestions = combinaisonListes([this.sup], this.nbQuestions)\n    } else {\n      // un mélange équilibré de questions\n      typesDeQuestions = combinaisonListes([1, 2, 3], this.nbQuestions)\n    }\n\n    for (let i = 0, d1, h1, m1, d2, h2, m2, d, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // d1 : heure de début (h1 heures m1 min)\n      // d2 : heure de fin (h2 heures m2 min)\n      // d : durée\n      if (typeDeContexte[i] === 1) {\n        h1 = randint(20, 22)\n        m1 = randint(35, 58)\n        d1 = h1 * 60 + m1\n        h2 = h1 + 2\n        m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n        d2 = h2 * 60 + m2\n        d = d2 - d1\n        d1 = minToHoraire(d1)\n        d2 = minToHoraire(d2)\n        d = minToHour(d)\n\n        if (typesDeQuestions[i] === 1) {\n          texte = `La diffusion d'un film commence à ${d1} et se termine à ${d2}. Combien de temps a duré ce film ?`\n          texteCorr = `${d2} - ${d1} = ${d}`\n          texteCorr += '<br>'\n          texteCorr += `Le film dure ${d}.`\n        }\n        if (typesDeQuestions[i] === 2) {\n          texte = `Un film dure ${d} et commence à ${d1}. À quelle heure se terminera-t-il ?`\n          texteCorr = `${d1} + ${d} = ${d2}`\n          texteCorr += '<br>'\n          texteCorr += `Le film terminera à ${d2}.`\n        }\n        if (typesDeQuestions[i] === 3) {\n          texte = `Un film de ${d} termine à ${d2}. À quelle heure a-t-il commencé ?`\n          texteCorr = `${d2} - ${d} = ${d1}`\n          texteCorr += '<br>'\n          texteCorr += `Le film a commencé à ${d1}.`\n        }\n      }\n\n      if (typeDeContexte[i] === 2) {\n        h1 = randint(20, 23)\n        m1 = randint(35, 58)\n        d1 = h1 * 60 + m1\n        h2 = h1 + 1\n        m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n        d2 = h2 * 60 + m2\n        d = d2 - d1\n        while (d < 27 || d > 75 || d === 60) {\n          h1 = randint(20, 23)\n          m1 = randint(35, 58)\n          d1 = h1 * 60 + m1\n          h2 = h1 + 2\n          m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n          d2 = h2 * 60 + m2\n          d = d2 - d1\n        }\n        d1 = minToHoraire(d1)\n        d2 = minToHoraire(d2)\n        d = minToHour(d)\n\n        if (typesDeQuestions[i] === 1) {\n          texte = `Sur son service de streaming favori, ${prenom()} commence à regarder une série à ${d1} et celle-ci se termine à ${d2}. Combien de temps a duré l'épisode ?`\n          texteCorr = `${d2} - ${d1} = ${d}`\n          texteCorr += '<br>'\n          texteCorr += `La série a duré ${d}.`\n        }\n        if (typesDeQuestions[i] === 2) {\n          texte = `${prenom()} allume son ordinateur à ${d1} pour regarder une série de ${d}. À quelle heure la série s'achèvera-t-elle ?`\n          texteCorr = `${d1} + ${d} = ${d2}`\n          texteCorr += '<br>'\n          texteCorr += `La série s'achèvera à ${d2}.`\n        }\n        if (typesDeQuestions[i] === 3) {\n          texte = `${prenom()} termine de regarder une série de ${d} à ${d2}. À quelle heure la série a-t-elle commencé ?`\n          texteCorr = `${d2} - ${d} = ${d1}`\n          texteCorr += '<br>'\n          texteCorr += `Elle a commencé à ${d1}.`\n        }\n      }\n\n      if (typeDeContexte[i] === 3) {\n        h1 = randint(8, 21)\n        m1 = randint(1, 58)\n        d1 = h1 * 60 + m1\n        h2 = h1 + randint(1, 2)\n        m2 = randint(1, 59) // pas forcément de retenue dans d2-d1\n        d2 = h2 * 60 + m2\n        d = d2 - d1\n        d1 = minToHoraire(d1)\n        d2 = minToHoraire(d2)\n        d = minToHour(d)\n\n        if (typesDeQuestions[i] === 1) {\n          texte = `Une émission télévisée est diffusée de ${d1} à ${d2}. Combien de temps dure-t-elle ?`\n          texteCorr = `${d2} - ${d1} = ${d}`\n          texteCorr += '<br>'\n          texteCorr += `L'émission dure ${d}.`\n        }\n        if (typesDeQuestions[i] === 2) {\n          texte = `Une émission télévisée de ${d} commence à ${d1}. À quelle heure s'achèvera-t-elle ?`\n          texteCorr = `${d1} + ${d} = ${d2}`\n          texteCorr += '<br>'\n          texteCorr += `L'émission s'achèvera à ${d2}.`\n        }\n        if (typesDeQuestions[i] === 3) {\n          texte = `À ${d2}, ${prenom()} termine de regarder une émission de ${d}. À quelle heure l'émission a-t-elle commencé ?`\n          texteCorr = `${d2} - ${d} = ${d1}`\n          texteCorr += '<br>'\n          texteCorr += `L'émission a commencé à ${d1}.`\n        }\n      }\n\n      if (typeDeContexte[i] === 4) {\n        h1 = randint(13, 16)\n        m1 = randint(1, 58)\n        d1 = h1 * 60 + m1\n        h2 = h1 + randint(1, 2)\n        m2 = randint(1, 58) // pas forcément de retenue dans d2-d1\n        d2 = h2 * 60 + m2\n        d = d2 - d1\n        while (d < 27 || d > 75 || d === 60) {\n          h1 = randint(13, 16)\n          m1 = randint(35, 58)\n          d1 = h1 * 60 + m1\n          h2 = h1 + randint(1, 2)\n          m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n          d2 = h2 * 60 + m2\n          d = d2 - d1\n        }\n        d1 = minToHoraire(d1)\n        d2 = minToHoraire(d2)\n        d = minToHour(d)\n\n        if (typesDeQuestions[i] === 1) {\n          texte = `Un papa regarde la compétition de gymnastique de sa fille  de ${d1} à ${d2}. Calculer la durée de cette compétition.`\n          texteCorr = `${d2} - ${d1} = ${d}`\n          texteCorr += '<br>'\n          texteCorr += `La compétition dure ${d}.`\n        }\n        if (typesDeQuestions[i] === 2) {\n          texte = `Une compétition de gymnastique commence à ${d1} et dure ${d}. À quelle heure sera-t-elle terminée ?`\n          texteCorr = `${d1} + ${d} = ${d2}`\n          texteCorr += '<br>'\n          texteCorr += `La compétition terminera à ${d2}.`\n        }\n        if (typesDeQuestions[i] === 3) {\n          texte = `Une compétition de gymnastique qui se termine à ${d2} a duré ${d}. À quelle heure a-t-elle commencé.`\n          texteCorr = `${d2} - ${d} = ${d1}`\n          texteCorr += '<br>'\n          texteCorr += `La compétition a commencé à ${d1}.`\n        }\n      }\n\n      if (typeDeContexte[i] === 5) {\n        h1 = randint(8, 15)\n        m1 = randint(25, 58)\n        d1 = h1 * 60 + m1\n        h2 = h1 + randint(2, 5)\n        m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n        d2 = h2 * 60 + m2\n        d = d2 - d1\n        while (d < 27 || d > 75 || d === 60) {\n          h1 = randint(20, 23)\n          m1 = randint(35, 58)\n          d1 = h1 * 60 + m1\n          h2 = h1 + 2\n          m2 = randint(1, m1) // pour s'assurer qu'il y a une retenue dans d2-d1\n          d2 = h2 * 60 + m2\n          d = d2 - d1\n        }\n        d1 = minToHoraire(d1)\n        d2 = minToHoraire(d2)\n        d = minToHour(d)\n\n        if (typesDeQuestions[i] === 1) {\n          texte = `Un train part à ${d1} et arrive à destination à ${d2}. Calculer la durée du trajet.`\n          texteCorr = `${d2} - ${d1} = ${d}`\n          texteCorr += '<br>'\n          texteCorr += `Le trajet dure ${d}.`\n        }\n        if (typesDeQuestions[i] === 2) {\n          texte = `${prenomF()} monte dans le train à ${d1} pour un trajet qui doit durer ${d}. À quelle heure arrivera-t-elle ?`\n          texteCorr = `${d1} + ${d} = ${d2}`\n          texteCorr += '<br>'\n          texteCorr += `Elle arrivera à ${d2}.`\n        }\n        if (typesDeQuestions[i] === 3) {\n          texte = `Un train arrive en gare à ${d2} après un trajet de ${d}. À quelle heure le voyage a-t-il commencé ?`\n          texteCorr = `${d2} - ${d} = ${d1}`\n          texteCorr += '<br>'\n          texteCorr += `Le voyage a commencé à ${d1}.`\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    4,\n    \"1 : Calcul de durée\\n2 : Calcul de l'horaire de fin\\n3 : Calcul de l'horaire de début\\n4 : 3 types de questions\"\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","CalculsDeDureesOuHoraires","Exercice","this","consigne","sup","spacing","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","typeDeContexte","combinaisonListes","typesDeQuestions","d1","h1","m1","d2","h2","m2","d","texte","texteCorr","i","cpt","randint","minToHoraire","minToHour","prenom","prenomF","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}