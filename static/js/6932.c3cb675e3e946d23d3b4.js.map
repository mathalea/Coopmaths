{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6P11.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","question_achat","liste_de_choses","liste_de_prix_unit","p","index1","randint","prenoms","prenomF","prenomM","index2","length","objet","pu","n","y","x","calcul","somme","met","z","texte","numAlpha","tex_prix","texteCorr","texteEnCouleur","texNombrec","texteEnCouleurEtGras","qtexte","qtexteCorr","question_recette","liste","nb_personne_init","nb_personne_final","alea1","alea2","alea3","alea4","quantite","quantite_reponse","quantite_q2","ingredient","recettes","quantites_par_pers","question_dillution","volume_final","volume_final_aff","unitesolvant_volume_final","solute","volume_unitaire","unite_solute","unite_solvant","question_distance","duree","rapport_question2","distance","reponse_q1","locomotion","vitesse","temps","rapport","question_echelle","distance_carte","distance_reel","distance_reel_q2","distance_carte_2","question_recouvrir_surface","alea5","alea6","qttaffichage","surface_finale","quantite2","surface_finale2","matiere","unite","qtt_matiere_unitaire","qtt_surface","Proportionnalite_par_linearite","question","Exercice","this","consigne","sortieHtml","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","liste_index_situations","combinaisonListes","cpt","i","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/6932.c3cb675e3e946d23d3b4.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,combinaisonListes,calcul,texNombrec,prenomF,prenomM,texteEnCouleur,tex_prix,texteEnCouleurEtGras,numAlpha} from '../../modules/outils.js';\nexport const titre = 'Résoudre des problèmes de proportionnalité en utilisant la linéarité simple'\n\n/**\n * On donne une relation de proportionnalité du type n objets coûtent x€ et on demande le prix de y objets\n * et le nombre d'objets qu'on peut acheter avec z€.\n * @author Jean-Claude Lhote\n * référence 6P11\n * 03/2021 : ajout de situations de proportionnalité : CGrolleau\n*/\n\n// _____ Les fonctions suivantes renvoient un objet : {texte = ; texteCorr = ;} ______\n// elles correspondent aux différentes situations problèmes \n\nfunction question_achat() { //questions d'origine du 6P11 : achat.\n    let liste_de_lieux = [\n      \"dans un magasin de bricolage\",\n      \"dans une animalerie\",\n      \"au supermarché local\",\n      \"à l'épicerie\",\n      \"dans la boutique du musée\"\n    ];\n    let liste_de_choses = [[]];\n    let liste_de_prix_unit = [[]];\n    liste_de_choses[0] = [\n      \"articles\",\n      \"outils\",\n      \"accessoires\",\n      \"pièces d'outillage\",\n      \"pinceaux\",\n      \"ampoules\",\n      \"tournevis\",\n      \"spatules\",\n      \"raccords de tuyaux\"\n    ];\n    liste_de_choses[1] = [\n      \"poissons rouges\",\n      \"cannetons\",\n      \"perruches\",\n      \"phasmes\",\n      \"colliers anti-puces\",\n      \"souris\",\n      \"lapereaux\",\n      \"paquets de graines\"\n    ];\n    liste_de_choses[2] = [\n      \"sets de tables\",\n      \"verres\",\n      \"assiettes\",\n      \"os à macher\",\n      \"dosettes de café\",\n      \"packs de lait\",\n      \"paquets de pâtes\"\n    ];\n    liste_de_choses[3] = [\n      \"mangues\",\n      \"ananas\",\n      \"fruits de la passion\",\n      \"melons\",\n      \"paquets de madeleines de Commercy\",\n      \"bergamottes\",\n      \"bredeles\",\n      \"pots de cancoillotte\"\n    ];\n    liste_de_choses[4] = [\n      \"cartes\",\n      \"livres\",\n      \"gravures\",\n      \"puzzles\",\n      \"maquettes\",\n      \"roches\",\n      \"jeux de société\"\n    ];\n    liste_de_prix_unit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5];\n    liste_de_prix_unit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8];\n    liste_de_prix_unit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3];\n    liste_de_prix_unit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3];\n    liste_de_prix_unit[4] = [0.5, 5, 7, 13.5, 10, 15, 20];\n    let index1 = randint(0, 4);\n    let prenoms = [prenomF(), prenomM()];\n    let index2 = randint(0, liste_de_choses[index1].length - 1);\n    let objet = liste_de_choses[index1][index2];\n    let pu = liste_de_prix_unit[index1][index2] * (1 + randint(1, 2) * 0.2 * randint(-1, 1));\n    let n = randint(3, 6);\n    let y = n * randint(2, 5);\n    let x = calcul(n * pu, 2);\n    let somme = calcul(y * pu, 2);\n    let met = false;\n    let p;\n\twhile (met == false) {\n        p = n * randint(2, 5);\n        if (p != y) {\n\t\t\tmet = true;\n\t\t}\n    }\n    let z = calcul(p * pu, 2);\n    let texte = `${numAlpha(0)} ${prenoms[0]} a repéré ${liste_de_lieux[index1]} des ${objet} qui l\\'intéressent.<br\\> ` +\n\t\t`Elle lit que ${n} ${objet} coûtent ${tex_prix(x)} €. ` +\n\t\t`Elle veut en acheter ${y}.<br\\> Combien va-t-elle dépenser ?<br\\>`;\n    let texteCorr = `${numAlpha(0)} ${y} ${objet}, c'est ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        \"blue\"\n      )} ${objet}.<br\\> Si ${texteEnCouleur(\n        n,\n        \"blue\"\n      )} ${objet} coûtent ${tex_prix(x)} €, alors ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        \"blue\"\n      )} ${objet} coutent ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${tex_prix(x)} €.<br\\>` +\n\t  texteEnCouleurEtGras(`Donc ${prenoms[0]} dépensera ${texteEnCouleur(\n        texNombrec(y / n)\n      )} $\\\\times$ ${tex_prix(x)} € = ${tex_prix(somme)} €.`,\"black\") + \"<br\\><br\\>\";\n    texte += `${numAlpha(1)} ${prenoms[1]\n        } veut lui aussi acheter ces ${objet}. Il dispose de ${tex_prix(\n          z\n        )} €.<br\\> Combien peut-il en acheter ?<br\\>`;\n    texteCorr += `${numAlpha(1)} ${tex_prix(z)} €, c'est ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${tex_prix(x)} €.<br\\> Si avec ${tex_prix(\n        x\n      )} € on peut acheter ${texteEnCouleur(\n        n,\n        \"blue\"\n      )} ${objet}, alors avec ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${tex_prix(x)} €, on peut acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texteEnCouleur(n, \"blue\")} ${objet}.<br\\>`;\n      texteCorr += texteEnCouleurEtGras(`Donc ${prenoms[1]} pourra acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} $\\\\times$ ${texteEnCouleur(n, \"blue\")} = ${p} ${objet}.`,\"black\") + \"<br\\>\";\n\treturn {\n\t\tqtexte:texte,\n\t\tqtexteCorr:texteCorr\n\t};\n}\n\nfunction question_recette() { //questions avec des masses pour un nombre de personne dans des recettes correction : passage à l'unité\n\tlet liste, nb_personne_init, nb_personne_final, alea1, alea2, alea3, alea4, prenoms, quantite, quantite_reponse, quantite_q2, texte, texteCorr;\n\tliste = [ //liste des ingrédients avec différentes recettes associées et masses\n\t\t{\n\t\tingredient : 'farine',\n\t\trecettes : ['gateau au citron','gauffres','crepes','cake'],\n\t\tquantites_par_pers : [20,25,30,35,40,50] // A voir pour l'instant quantités \"simples\".\n\t\t},\n\t\t{\n\t\tingredient : 'sucre',\n\t\trecettes : ['gateau','mousse au chocolat','pain perdu','riz au lait'],\n\t\tquantites_par_pers : [15,20,25,30,35]\n\t\t},\n\t\t{\n\t\tingredient : 'chocolat',\n\t\trecettes : ['gateau','mousse au chocolat','flan','riz au lait'],\n\t\tquantites_par_pers : [10,15,20,25,30,35]\n\t\t},\n\t\t{\n\t\tingredient : 'beurre',\n\t\trecettes : ['gateau','mousse au chocolat'],\n\t\tquantites_par_pers : [10,12,15,18]\n\t\t}\n\t];\n\tnb_personne_init = randint(2, 6); //nombre de personne indiqué dans la recette.\n\tnb_personne_final = randint(2, 12, [nb_personne_init]); //nombre de personne pour lequel on veut cuisiner\n\talea1 = randint(0, 3); //pour le choix de l'ingredient\n\talea2 = randint(0, liste[alea1].recettes.length-1); //pour le choix de la recette \n\talea3 = randint(0, liste[alea1].quantites_par_pers.length-1); //pour le choix de la quantité par personne.\n\tquantite = calcul(liste[alea1].quantites_par_pers[alea3] * nb_personne_init); //Calcul de la quantité dans la recette à partir de la qtt/personne et du nb de personne\n\tquantite_reponse = calcul(liste[alea1].quantites_par_pers[alea3] * nb_personne_final); //Pour la correction\n\talea4 = randint(2, 12, [nb_personne_init,nb_personne_final]); //Pour la deuxième question (on évite une réponse identique à la 1ere et à la recette.)\n\tquantite_q2 = calcul(liste[alea1].quantites_par_pers[alea3] * alea4); \n\tprenoms = [prenomF(), prenomM()]; //Choix de prénoms pour l'énoncé\n\ttexte = `${numAlpha(0)} ${prenoms[0]} lit sur sa recette de ${liste[alea1].recettes[alea2]} pour ${nb_personne_init} personnes qu'il faut ${quantite} g de ${liste[alea1].ingredient}. <br\\>` +\n\t\t`Elle veut adapter sa recette pour ${nb_personne_final} personnes.` +\n\t\t`<br\\> Quelle masse de ${liste[alea1].ingredient} doit-elle prévoir ? <br\\><br\\>`;\n    texteCorr = `${numAlpha(0)} Commençons par trouver la masse de ${liste[alea1].ingredient} pour une personne : <br\\>` +\n\t\t` ${nb_personne_init} personnes, c'est ${texteEnCouleur(nb_personne_init)} fois 1 personne. ` +\n\t\t`il faut donc ${texteEnCouleur(nb_personne_init)} fois moins que ${quantite} g pour 1 personne.<br\\>` +\n\t\t`${quantite} $\\\\div $ ${texteEnCouleur(nb_personne_init)} = ${liste[alea1].quantites_par_pers[alea3]}. <br\\>` +\n\t\ttexteEnCouleurEtGras(` Conclusion intermédiaire :`,\"black\") +\n\t\t` il faut ${liste[alea1].quantites_par_pers[alea3]} g de ${liste[alea1].ingredient} pour 1 personne. <br\\>`+\n        ` Cherchons maintenant la quantité nécessaire pour ${nb_personne_final} personnes : <br\\>` +\n\t\t` ${nb_personne_final} personnes c'est ${texteEnCouleur(nb_personne_final)} fois 1 personne. <br\\>` +\n\t\t`Donc il faut ${texteEnCouleur(nb_personne_final)} fois plus que ${liste[alea1].quantites_par_pers[alea3]} g de ${liste[alea1].ingredient} que pour 1 personne pour faire sa recette :` + \n\t\t`<br\\> ${liste[alea1].quantites_par_pers[alea3]} $\\\\times$ ${texteEnCouleur(nb_personne_final)} = ${quantite_reponse} <br\\>` +\n\t\ttexteEnCouleurEtGras(`Conclusion : ${prenoms[0]} doit utiliser ${quantite_reponse} g de ${liste[alea1].ingredient} pour ${nb_personne_final} personnes. `,\"black\") +\n\t\t` <br\\><br\\>`;\t\n    texte += `${numAlpha(1)} ${prenoms[1]} utilise la même recette de ${liste[alea1].recettes[alea2]}. Il dispose de ${quantite_q2} g de ${liste[alea1].ingredient}. <br\\>`+\n\t\t` Pour combien de personnes au maximum peut-il cuisiner ? <br\\>`;\n    texteCorr += `${numAlpha(1)} ${prenoms[1]} utilise ${quantite_q2} g de ${liste[alea1].ingredient} cela représente ${texteEnCouleur(alea4,\"blue\")} fois plus que ${liste[alea1].quantites_par_pers[alea3]} g (quantité pour 1 personne).<br\\>`+\n\ttexteEnCouleurEtGras(`  Conclusion :  Il peut donc préparer sa recette pour ${texteEnCouleur(alea4,\"blue\")} personnes.`,\"black\"); \n    return {\n\t\tqtexte : texte,\n\t\tqtexteCorr : texteCorr\n\t}; \n}\n\nfunction question_dillution() { //questions de mélange de volumes\n\tlet liste, alea1, alea2, quantite, volume_final, quantite_reponse, volume_final_aff, unitesolvant_volume_final, texte, texteCorr;\n\tliste = [ \n\t\t{\n\t\tsolute : 'sirop',\n\t\tvolume_unitaire : [12,15,18,20] ,\n\t\tunite_solute : 'cL',\t\t\n\t\tunite_solvant : ['L','L'] //liste pour [0] singulier [1] pluriel\n\t\t},\n\t\t{\n\t\tsolute : 'nettoyant pour sol',\n\t\tvolume_unitaire : [5,8,10,12],\n\t\tunite_solute : 'cL',\n\t\tunite_solvant : ['L','L']\n\t\t},\n\t\t{\n\t\tsolute : 'médicament',\n\t\tvolume_unitaire : [3,3.5,4,4.5,5,7.5],\n\t\tunite_solute : 'mL',\n\t\tunite_solvant : ['dL','dL']\n\t\t},\n\t\t{\n\t\tsolute : 'produit pour piscine',\n\t\tvolume_unitaire : [1,1.2,0.8,1.5],\n\t\tunite_solute : 'L',\n\t\tunite_solvant : [\"dizaine de mètres cubes\", \"dizaines de mètres cubes\"]\n\t\t}\n\t];\n\tvolume_final = randint(1, 5) + (randint(1, 5)) * 0.1 * randint(-1, 1,[0]); //volume d'eau pour la préparation\n\talea1 = randint(0, 3); //pour le choix du soluté\n\talea2 = randint(0, liste[alea1].volume_unitaire.length-1); //pour le choix du volume pour une unité de solvant \n\tquantite = liste[alea1].volume_unitaire[alea2];\n\tquantite_reponse = calcul(volume_final * quantite); //Calcul du volume de soluté final (pour la correction.)\n\tif (volume_final < 2) {\n\t\tunitesolvant_volume_final = liste[alea1].unite_solvant[0];\n\t} else {\n\t\tunitesolvant_volume_final = liste[alea1].unite_solvant[1];\n\t}\n\tvolume_final_aff = texNombrec(volume_final); //pour affichage avec bon séparateur.\n\ttexte = `Il est indiqué sur la bouteille de ${liste[alea1].solute} qu'il faut  ` +\n\t\t` ${texNombrec(quantite)} ${liste[alea1].unite_solute} de  ${liste[alea1].solute} pour 1 ${liste[alea1].unite_solvant[0]} d'eau.<br\\> ` +\n\t\t`On veut utiliser ${volume_final_aff} ${unitesolvant_volume_final} d'eau.` +\n\t\t`<br\\> Quel volume de ${liste[alea1].solute} doit-on prévoir ? <br\\>`;\n    texteCorr = `Le volume de ${liste[alea1].solute} est proportionnel au volume d'eau <br\\> ` +\n\t\t` ${texteEnCouleur(volume_final_aff)} ${unitesolvant_volume_final} d'eau, c'est ${texteEnCouleur(volume_final_aff)} fois 1 ${liste[alea1].unite_solvant[0]} d'eau. <br\\> ` +\n\t\t`il faut donc ${texteEnCouleur(volume_final_aff)} fois plus que ${texteEnCouleur(texNombrec(quantite),\"blue\")} ${liste[alea1].unite_solute} de ${liste[alea1].solute}. <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(quantite),\"blue\")} ${liste[alea1].unite_solute} $\\\\times $ ${texteEnCouleur(volume_final_aff)} = ${texNombrec(quantite_reponse)}  ${liste[alea1].unite_solute}  <br\\>  ` +\n        texteEnCouleurEtGras(` Conclusion : Il faut donc prévoir ${texNombrec(quantite_reponse)} ${liste[alea1].unite_solute} de ${liste[alea1].solute}.`,\"black\") + ` <br\\>`;\t\n    return {\n\t\tqtexte : texte,\n\t\tqtexteCorr : texteCorr\n\t};\n}\n\nfunction question_distance() { //questions de distance parcourue à une vitesse moyenne donnée\n\tlet liste, alea1, alea2, alea3, volume_final, duree, rapport, rapport_question2, distance, reponse_q1, texte, texteCorr;\n\tliste = [ //liste des \"moyens de locomotion\" et vitesses associées\n\t\t{\n\t\tlocomotion : 'piéton',\n\t\tvitesse : [3,3.5,4,4.5] ,\n\t\t},\n\t\t{\n\t\tlocomotion : 'cycliste',\n\t\tvitesse : [12,15,16,17,18,20,22],\n\t\t},\n\t\t{\n\t\tlocomotion : 'camion',\n\t\tvitesse : [75,77.5,80,82.5,85],\n\t\t},\n\t\t{\n\t\tlocomotion : 'train',\n\t\tvitesse : [125,150,175,185,195],\n\t\t}\n\t];\n\talea1 = randint(0, 3); //pour le choix de locomotion\n\tduree = [{\n\t\ttemps : '15 minutes',\n\t\trapport : 0.25\n\t\t},\n\t\t{\n\t\ttemps : '30 minutes',\n\t\trapport : 0.5\n\t\t},\n\t\t{\n\t\ttemps : '45 minutes',\n\t\trapport : 0.75\n\t\t},\n\t\t{\n\t\ttemps : '1 heure et demi',\n\t\trapport : 1.5\n\t\t},\n\t\t{\n\t\ttemps : '2 heures',\n\t\trapport : 2\n\t\t},\n\t\t{\n\t\ttemps : '2 heures et demi',\n\t\trapport : 2.5\n\t\t},\n\t\t{\n\t\ttemps : '3 heures',\n\t\trapport : 3\n\t\t}];\n\talea2 = randint(0, liste[alea1].vitesse.length-1); //pour le choix du temps passé \n\trapport_question2 = [0.25, 0.5, 0.75, 1.25, 1.5, 2];\n\talea3 = randint(0, rapport_question2.length-1,[alea2]);\n\treponse_q1 = calcul(duree[alea2].rapport*liste[alea1].vitesse[alea2]);\n\tdistance = texNombrec(calcul(rapport_question2[alea3] * liste[alea1].vitesse[alea2])); // pour question 2\n\ttexte = `${numAlpha(0)} Un ${liste[alea1].locomotion} parcourt en moyenne ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure.<br\\> Quelle distance va-t-il parcourir, à la même vitesse en ${duree[alea2].temps} ? <br\\><br\\> `;\n    texteCorr = `${numAlpha(0)} ${duree[alea2].temps} c'est ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois une heure.<br\\> ` +\n\t\t`En une heure le ${liste[alea1].locomotion} parcourt ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2],\"blue\"))} km donc en ${duree[alea2].temps} il va parcourir ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2],\"blue\"))} km. <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(duree[alea2].rapport))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2],\"blue\"))} km = ${texNombrec(reponse_q1)} km <br\\>`  +\n\t\ttexteEnCouleurEtGras(` Conclusion : Le ${liste[alea1].locomotion} va donc parcourir ${texNombrec(reponse_q1)} km.`,\"black\") + `<br\\><br\\>`\t;\t\n\ttexte += `${numAlpha(1)} Combien de temps va-t-il mettre pour parcourir ${distance} km à cette même vitesse ? <br\\> `;\n    texteCorr += `${numAlpha(1)} ${distance} c'est ${texteEnCouleur(texNombrec(rapport_question2[alea3]))} fois ${texNombrec(liste[alea1].vitesse[alea2])} km.\n\t\tIl parcourt ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure. <br\\>` + \n\t`Il va mettre donc ${texteEnCouleur(texNombrec(rapport_question2[alea3]))} fois une heure à parcourir ${distance} km <br\\>` + \n\ttexteEnCouleurEtGras(`Conclusion : Il va donc mettre  ${texNombrec(rapport_question2[alea3])} heure(s) ( ${texNombrec(rapport_question2[alea3])} $\\\\times$ 1 ) à parcourir ${distance} km  ce qui fait ${calcul(rapport_question2[alea3]*60)} minutes.`,\"black\") + `<br\\><br\\>`;\t\n\treturn {\n\t\tqtexte : texte,\n\t\tqtexteCorr : texteCorr\n\t};\n}\n\nfunction question_echelle() { //X cm sur une carte correspond à x km dans la réalité... \n\tlet rapport, distance_carte, distance_reel, distance_reel_q2, alea1, alea2, distance_carte_2, prenoms, texte, texteCorr;\n\tdistance_carte = randint(1, 7); //Choix d'un nombre de cm sur la carte\n\tdistance_reel = randint(3, 20, [distance_carte]); //Choix d'un nombre de km dans la réalité (on évite d'avoir 1cm pour 1km)\n\trapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5]; //rapport entre la référence et la question (rapports simples car niveau 6eme)\n\talea1 = randint(0, rapport.length-1);\n\talea2 = randint(0, rapport.length-1, [alea1]);\n\tdistance_carte_2 = texNombrec(calcul(rapport[alea1] * distance_carte)); \n\tdistance_reel_q2 = texNombrec(calcul(rapport[alea2] * distance_reel)); \n\tprenoms = [prenomF(), prenomM()];\n\ttexte = `${numAlpha(0)} Sur une carte sur laquelle ${distance_carte} cm représente ${distance_reel} km dans la réalité, <br\\>\n\t\t${prenoms[0]} mesure sont trajet, elle trouve une distance de ${distance_carte_2} cm. <br\\>` +\n\t\t`A quelle distance cela correspond dans la réalité ? <br\\><br\\>`;\n    texteCorr = `${numAlpha(0)} ${distance_carte_2} cm c'est ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${distance_carte} cm <br\\>\n\t\tDans la réalité, ${distance_carte} cm correspond à ${texteEnCouleur(distance_reel,\"blue\")} km donc <br\\>`+\n\t\t`  ${distance_carte_2} cm va correspondre à ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${texteEnCouleur(distance_reel,\"blue\")} km  <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(rapport[alea1]))} $\\\\times$ ${texteEnCouleur(distance_reel,\"blue\")} km = ${texNombrec(calcul(rapport[alea1]*distance_reel))} km <br\\>` +\n\t\ttexteEnCouleurEtGras(`Conclusion : le trajet de ${prenoms[0]} est de ${texNombrec(calcul(rapport[alea1]*distance_reel))} km.`,\"black\") + `<br\\><br\\>` ;\t\n\ttexte += `${numAlpha(1)} Deux villes sont distantes de ${texNombrec(distance_reel_q2)} km. <br\\>` +\n\t`Quelle distance va-t-on mesurer sur la carte entre ces deux villes ?`;\n    texteCorr += `${numAlpha(1)} ${texNombrec(distance_reel_q2)} km c'est ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${distance_reel} km.\n\t\tOr ${distance_reel} km est représenté par ${texteEnCouleur(distance_carte,\"blue\")} cm sur la carte. <br\\>` + \n\t\t`Donc ${texNombrec(distance_reel_q2)} km est représenté par ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${texteEnCouleur(distance_carte,\"blue\")} cm sur la carte <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(rapport[alea2]))} $\\\\times$ ${texteEnCouleur(distance_carte,\"blue\")} cm = ${texNombrec(calcul(rapport[alea2]*distance_carte))} cm <br\\>` +\n\t\ttexteEnCouleurEtGras(`Conclusion : Les deux villes sont séparées de ${texNombrec(calcul(rapport[alea2]*distance_carte))} cm sur la carte.`,\"black\") + `<br\\><br\\>`;\n\treturn {\n\t\tqtexte : texte,\n\t\tqtexteCorr : texteCorr\n\t};\n}\n\nfunction question_recouvrir_surface() { //peinture, gazon, carrelage pour une surface donnée.\n\tlet liste, alea1, alea2, alea3, alea4, alea5, alea6, quantite, qttaffichage, surface_finale, rapport, quantite2, surface_finale2, prenoms, texte, texteCorr;\n\tliste = [ \n\t\t{\n\t\tmatiere : 'de la peinture',\n\t\tunite : 'L',\n\t\tqtt_matiere_unitaire : [0.5,1,1.5,2], //quantité au m²\n\t\tqtt_surface : [10,25,15] //nombre de m² indiqués sur l'emballage\n\t\t},\n\t\t{\n\t\tmatiere : 'du gazon',\n\t\tunite : 'kg',\n\t\tqtt_matiere_unitaire : [2.5,3,5,10], \n\t\tqtt_surface : [200,175,150] \n\t\t},\n\t\t{\n\t\tmatiere : 'du carrelage',\n\t\tunite : 'carreaux',\n\t\tqtt_matiere_unitaire : [25,30,50,100], \n\t\tqtt_surface : [10,20,5] \n\t\t}\n\t];\n\talea1 = randint(0, liste.length-1); \n\talea2 = randint(0, liste[alea1].qtt_matiere_unitaire.length-1);\n\talea3 = randint(0, liste[alea1].qtt_surface.length-1);\t\n\trapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5]; //choix parmi des rapports simples (en 6eme cela parrait suffisant)\n\tquantite = liste[alea1].qtt_matiere_unitaire[alea2]; \n\talea4 = randint(0, rapport.length-1);\n\tsurface_finale = calcul(rapport[alea4]*liste[alea1].qtt_surface[alea3]); \n\talea5 = randint(0, rapport.length-1,[alea4]);\n\tquantite2 = calcul(rapport[alea5]*liste[alea1].qtt_matiere_unitaire[alea2]);\n\talea6 = randint(-2, 2,[0]);\n\tsurface_finale2 =  calcul(rapport[alea5]*liste[alea1].qtt_surface[alea3]+alea6);\n\tprenoms = [prenomF(), prenomM()];\n\tqttaffichage = texNombrec(quantite); //Pour affichage avec virgule en séparateur.\n\ttexte = `${numAlpha(0)} ${prenoms[0]} doit acheter ${liste[alea1].matiere}. <br\\>`+\n\t`Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${liste[alea1].qtt_surface[alea3]} m$^2$ <br\\> ` +\n\t`Combien doit-elle en acheter pour une surface de ${texNombrec(surface_finale)} m$^2$ ? <br\\>`;\n    texteCorr = `${numAlpha(0)} ${texNombrec(surface_finale)} $m^2$ c'est ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${liste[alea1].qtt_surface[alea3]} $m^2$ <br\\>` +\n\t\t`Il va donc falloir ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${texteEnCouleur(qttaffichage,\"blue\")} ${liste[alea1].unite} pour ${texNombrec(surface_finale)} $m^2$ <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage,\"blue\")} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4]*quantite))} ${liste[alea1].unite}<br\\>` +\n\t\ttexteEnCouleurEtGras(`Conclusion : elle doit en acheter ${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage,\"blue\")} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4]*quantite))} ${liste[alea1].unite}.`,\"black\")+ `<br\\>  `;\t\n\ttexte += `<br\\> ${numAlpha(1)} ${prenoms[1]} a acheté ${liste[alea1].matiere}. Il lui en reste ${texNombrec(quantite2)} ${liste[alea1].unite}. <br\\> Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${texNombrec(liste[alea1].qtt_surface[alea3])} m$^2$ <br\\>`+\n\t`En a-t-il suffisament pour la surface de ${texNombrec(surface_finale2)} m$^2$ qu'il lui reste à faire ? <br\\>`;\n    texteCorr += `<br\\> ${numAlpha(1)} ${texNombrec(quantite2)} ${liste[alea1].unite} c'est ${texteEnCouleur(texNombrec(rapport[alea5]))} fois ${qttaffichage} ${liste[alea1].unite}. <br\\>` +\n\t\t`avec ${texNombrec(quantite2)} ${liste[alea1].unite} on peut donc traiter une surface de ${texteEnCouleur(texNombrec(rapport[alea5]))}\n\t\tfois ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]),\"blue\")} m$^2$ <br\\>` +\n\t\t`${texteEnCouleur(texNombrec(rapport[alea5]))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]),\"blue\")} m$^2$ = ${texNombrec(calcul(rapport[alea5]*liste[alea1].qtt_surface[alea3]))} m$^2$. <br\\>`;\n\tif (calcul(rapport[alea5]*liste[alea1].qtt_surface[alea3]) > surface_finale2) {\n\t\ttexteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5]*liste[alea1].qtt_surface[alea3]))} m$^2$ > ${texNombrec(surface_finale2)} $m^2$ donc il a suffisament pour ${surface_finale2} m$^2$.`,\"black\") +` <br\\>`;\n\t} else {\n\t\ttexteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5]*liste[alea1].qtt_surface[alea3]))} m$^2$ < ${texNombrec(surface_finale2)} $m^2$ donc il n'a pas assez pour ${surface_finale2} m$^2$.`,\"black\") +` <br\\>`;\n\t}\n\treturn {\n\t\tqtexte : texte,\n\t\tqtexteCorr : texteCorr\n\t};\n}\n\n// _______ Fin des fonctions correspondants aux situations problèmes _____\n\n\nexport default function Proportionnalite_par_linearite() {\n  \"use strict\";\n  let question;\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"Répondre aux questions posées en justifiant\";\n  sortieHtml ? (this.spacing = 2) : (this.spacing = 1);\n  sortieHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1);\n  this.nbQuestions = 5;\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let situationtypes = [];\n\tlet liste_index_situations_disponible = [0, 1, 2, 3, 4, 5]; \n\tlet liste_index_situations = combinaisonListes(\n\t\tliste_index_situations_disponible,\n\t\tthis.nbQuestions\n\t); //permet de ne pas avoir 2 fois la même situation si - de questions que de situations\n\t//boucle pour le nombre de question. \n\t//A chaque question on vérifie qu'elle n'existe pas déjà pour en refaire une. Sécurité : on ajoute un compteur pour eviter trop d'essais...\n\tlet cpt = 0;\n\tfor (let i=0; i<this.nbQuestions && cpt<50;) {\n\t\tswitch(liste_index_situations[i]) {\n\t\t\tcase 0:\n\t\t\t\tquestion = question_achat();\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tquestion = question_recette();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tquestion = question_dillution();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tquestion = question_distance();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tquestion = question_echelle();\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tquestion = question_recouvrir_surface();\n\t\t\t\tbreak;\n\t\t}\n\t\tif (this.listeQuestions.indexOf(question.qtexte) == -1) { // Si la question n'a jamais été posée, on la garde.\n\t\t\tthis.listeQuestions.push(question.qtexte);\n\t\t\tthis.listeCorrections.push(question.qtexteCorr);\n\t\t\ti++;\n\t\t}\n\t\tcpt++;\n\t}\n    listeQuestionsToContenu(this); //Espacement de 2 em entre chaque questions.\n  };\n}","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}