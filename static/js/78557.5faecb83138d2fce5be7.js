(self.webpackChunkmathalea=self.webpackChunkmathalea||[]).push([[78557,71129],{78557:(e,s,t)=>{"use strict";t.r(s),t.d(s,{titre:()=>u,default:()=>l});var r=t(71129),n=(t(62259),t(63861));const u="Constructibilité des triangles via les longueurs";function l(){let e;r.default.call(this),this.sup=1,this.exo==this.beta+"5G21-1"?(this.titre=u,this.consigne="Justifier si les longueurs données permettent de construire le triangle.",this.consigne+="<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure."):this.exo==this.beta+"5G31-1"?(this.titre="Constructibilité des triangles via les angles",this.consigne="Justifier si les angles donnés permettent de construire le triangle.",this.consigne+="<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure."):(this.titre="Constructibilité des triangles",this.consigne="Justifier si les longueurs ou les angles donnés permettent de construire le triangle.",this.consigne+="<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure."),this.nbCols=1,this.nbColsCorr=1,this.nbQuestionsModifiable=!1,this.listePackages="bclogo",this.nouvelleVersion=function(){this.exo==this.beta+"5G21-1"?1==this.sup?(e=(0,n.TVQ)([1,2,3]),this.nbQuestions=e.length):2==this.sup&&(e=[(0,n.q$q)([1,2,3]),4],this.nbQuestions=e.length):this.exo==this.beta+"5G31-1"?1==this.sup?(e=(0,n.TVQ)([5,6,7]),this.nbQuestions=e.length):2==this.sup&&(e=[(0,n.q$q)([5,6,7]),8],this.nbQuestions=e.length):(e=[1,2,3,4,5,6,7,8],this.nbQuestions=e.length);let s=e;this.listeQuestions=[],this.listeCorrections=[];for(let e,t,r,u,l,i,a,o,g=0,$=0;g<this.nbQuestions&&$<50;){let c=2,m=20,d=0,p=180,h=new n.phu,b=[];switch(s[g]){case 1:for(;!h.isTrueTriangleLongueurs();)r=(0,n.nSR)(c,m),u=(0,n.nSR)(c,m),l=(0,n.nSR)(c,m),h.l1=r,h.l2=u,h.l3=l;e=`${h.getNom()} tel que ${h.getLongueurs()[0]} $= ${h.l1}$ cm ; `,e+=`${h.getLongueurs()[1]} $= ${h.l2}$ cm et ${h.getLongueurs()[2]} $= ${h.l3}$ cm.`;for(let e=0;e<3;e++)b.push({longueur:h.getLongueurs()[e],cote:h.getCotes()[e],valeur:h.getLongueursValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[2].cote} qui mesure $${b[2].valeur}$ cm est le plus grand côté.`,t+=`<br> De plus ${b[0].longueur} + ${b[1].longueur} = $${b[0].valeur}$ cm + $${b[1].valeur}$ cm = $${(0,n.n0o)(b[0].valeur+b[1].valeur)}$ cm.`,t+=`<br> On constate que ${b[0].longueur} + ${b[1].longueur} > ${b[2].longueur}.`,t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom())}.`,t+=`<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${(0,n.pRK)("plusieurs tels triangles existent")}.`,t+="<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.";break;case 2:for(;!h.isPlatTriangleLongueurs();)r=(0,n.nSR)(c,m),u=(0,n.nSR)(c,m),l=(0,n.n0o)(r+u),h.l1=r,h.l2=u,h.l3=l;e=`${h.getNom()} tel que ${h.getLongueurs()[0]} $ = ${h.l1}$ cm ; `,e+=`${h.getLongueurs()[1]} $= ${h.l2}$ cm et ${h.getLongueurs()[2]} $= ${h.l3}$ cm.`;for(let e=0;e<3;e++)b.push({longueur:h.getLongueurs()[e],cote:h.getCotes()[e],valeur:h.getLongueursValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[2].cote} qui mesure $${b[2].valeur}$ cm est le plus grand côté.`,t+=`<br> De plus ${b[0].longueur} + ${b[1].longueur} = $${b[0].valeur}$ cm + $${b[1].valeur}$ cm = $${b[2].valeur}$ cm aussi.`,t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom()+" c'est un triangle plat")}.`,t+=`<br><br>${(0,n.pRK)("Un seul triangle de ce type existe")}, il s'agit du segment ${b[2].cote} sur lequel on place le point `,b[0].longueur.split("")[2]==b[2].cote.split("")[1]||b[0].longueur.split("")[2]==b[2].cote.split("")[2]?t+=`${b[0].longueur.split("")[1]}`:t+=`${b[0].longueur.split("")[2]}`,t+=".";break;case 3:for(r=(0,n.nSR)(c,m),u=(0,n.nSR)(c,m),l=(0,n.nSR)(c,m),h.l1=r,h.l2=u,h.l3=l;h.isTrueTriangleLongueurs()||h.isPlatTriangleLongueurs();)r=(0,n.nSR)(c,m),u=(0,n.nSR)(c,m),l=(0,n.nSR)(c,m),h.l1=r,h.l2=u,h.l3=l;e=`${h.getNom()} tel que ${h.getLongueurs()[0]} $= ${h.l1}$ cm ; `,e+=`${h.getLongueurs()[1]} $= ${h.l2}$ cm et ${h.getLongueurs()[2]} $= ${h.l3}$ cm.`;for(let e=0;e<3;e++)b.push({longueur:h.getLongueurs()[e],cote:h.getCotes()[e],valeur:h.getLongueursValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[2].cote} qui mesure $${b[2].valeur}$ cm est le plus grand côté.`,t+=`<br> De plus ${b[0].longueur} + ${b[1].longueur} = $${b[0].valeur}$ cm + $${b[1].valeur}$ cm = $${(0,n.n0o)(b[0].valeur+b[1].valeur)}$ cm.`,t+=`<br> On constate que ${b[0].longueur} + ${b[1].longueur} < ${b[2].longueur}, les longueurs données ne permettent donc pas de satisfaire à l'inégalité triangulaire.`,t+=`<br> ${(0,n.pRK)("On ne peut donc pas construire le triangle "+h.getNom())}.`,t+=`<br><br>  ${(0,n.pRK)("Aucun triangle de ce type n'existe")}.`;break;case 4:for(;!h.isTrueTriangleLongueurs();)r=(0,n.nSR)(c,m),u=(0,n.nSR)(c,m),l=(0,n.nSR)(c,m),h.l1=r,h.l2=u,h.l3=l;e=`${h.getNom()} tel que ${h.getLongueurs()[0]} $= ${h.l1}$ cm ; `,e+=`${h.getLongueurs()[1]} $= ${h.l2}$ cm et dont le périmètre vaut $${h.getPerimetre()}$ cm.`;for(let e=0;e<3;e++)b.push({longueur:h.getLongueurs()[e],cote:h.getCotes()[e],valeur:h.getLongueursValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Puisque le périmètre vaut $${h.getPerimetre()}$ cm alors la troisième longueur vaut ${h.getLongueurs()[2]} = $${h.getPerimetre()}$ cm - $${h.l1}$ cm - $${h.l2}$ cm = $${h.l3}$ cm.`,t+=`<br> Donc dans le triangle ${h.getNom()}, ${b[2].cote} qui mesure $${b[2].valeur}$ cm est le plus grand côté.`,t+=`<br> De plus ${b[0].longueur} + ${b[1].longueur} = $${b[0].valeur}$ cm + $${b[1].valeur}$ cm = $${(0,n.n0o)(b[0].valeur+b[1].valeur)}$ cm.`,t+=`<br> On constate que ${b[0].longueur} + ${b[1].longueur} > ${b[2].longueur}`,t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom())}.`,t+=`<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${(0,n.pRK)("plusieurs tels triangles existent")}.`,t+="<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.";break;case 5:for(;!h.isTrueTriangleAngles();)i=(0,n.nSR)(d,p,[0,180]),a=(0,n.nSR)(d,p,[0,180]),o=(0,n.n0o)(180-i-a),h.a1=i,h.a2=a,h.a3=o;e="",t="",e=`${h.getNom()} tel que ${h.getAngles()[0]} $= ${h.a1}\\degree$ ; `,e+=`${h.getAngles()[1]} $= ${h.a2}\\degree$ et ${h.getAngles()[2]} $= ${h.a3}\\degree$.`;for(let e=0;e<3;e++)b.push({angle:h.getAngles()[e],valeur:h.getAnglesValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[0].angle} + ${b[1].angle} + ${b[2].angle} = $${b[0].valeur}\\degree + ${b[1].valeur}\\degree + ${b[2].valeur}\\degree = ${(0,n.n0o)(b[0].valeur+b[1].valeur+b[2].valeur)}\\degree$.`,t+="<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.",t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom())}.`,t+=`<br><br>  ${(0,n.pRK)("Il existe une infinité de triangles avec ces mesures.")}`,t+="<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.";break;case 6:for(;!h.isPlatTriangleAngles();)i=(0,n.nSR)(d,p),a=(0,n.nSR)(d,p),o=(0,n.n0o)(180-i-a),h.a1=i,h.a2=a,h.a3=o;e="",t="",e=`${h.getNom()} tel que ${h.getAngles()[0]} $= ${h.a1}\\degree$ ; `,e+=`${h.getAngles()[1]} $= ${h.a2}\\degree$ et ${h.getAngles()[2]} $= ${h.a3}\\degree$.`;for(let e=0;e<3;e++)b.push({angle:h.getAngles()[e],valeur:h.getAnglesValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[0].angle} + ${b[1].angle} + ${b[2].angle} = $${b[0].valeur}\\degree + ${b[1].valeur}\\degree + ${b[2].valeur}\\degree = ${(0,n.n0o)(b[0].valeur+b[1].valeur+b[2].valeur)}\\degree$.`,t+="<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.",t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom())}.`,t+=`<br> Deux des trois angles du triangle valent $0\\degree$, ${(0,n.pRK)(h.getNom()+" est donc un triangle plat")}.`,t+=`<br><br>  ${(0,n.pRK)("Il existe une infinité de triangles avec ces mesures.")}`,t+="<br> On les obtient en traçant des segments et en plaçant le troisième sommet sur ce segment, les longueurs n'ayant aucune importance.",t+=`<br> Dans le cas présent, il s'agit d'un segment $[${b[2].angle.split("")[12]}${b[2].angle.split("")[14]}]$ sur lequel on place un point ${b[2].angle.split("")[13]}.`;break;case 7:for(i=(0,n.nSR)(d,p),a=(0,n.nSR)(d,p),o=(0,n.nSR)(d,p),h.a1=i,h.a2=a,h.a3=o;h.isTrueTriangleAngles();)i=(0,n.nSR)(d,p),a=(0,n.nSR)(d,p),o=(0,n.nSR)(d,p),h.a1=i,h.a2=a,h.a3=o;e=`${h.getNom()} tel que ${h.getAngles()[0]} $= ${h.a1}\\degree$ ; `,e+=`${h.getAngles()[1]} $= ${h.a2}\\degree$ et ${h.getAngles()[2]} $= ${h.a3}\\degree$.`;for(let e=0;e<3;e++)b.push({angle:h.getAngles()[e],valeur:h.getAnglesValeurs()[e]});b.sort((function(e,s){return e.valeur-s.valeur})),t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,t+=`<br>Dans le triangle ${h.getNom()}, ${b[0].angle} + ${b[1].angle} + ${b[2].angle} = $${b[0].valeur}\\degree + ${b[1].valeur}\\degree + ${b[2].valeur}\\degree = ${(0,n.n0o)(b[0].valeur+b[1].valeur+b[2].valeur)}\\degree$.`,t+="<br> Si le triangle était constructible, la somme des trois angles vaudrait $180\\degree$,",t+=" or ce n'est pas le cas.",t+=`<br> ${(0,n.pRK)("On ne peut donc pas construire le triangle "+h.getNom())}.`,t+=`<br><br>  ${(0,n.pRK)("Aucun triangle de ce type n'existe")}.`;break;case 8:let s=(0,n.nSR)(0,1),g=["triple","quadruple","quart"],$="";switch(e="",t="",t=`Supposons que l'on puisse construire un triangle ${h.getNom()} avec ces mesures.`,s){case 0:switch(i=(0,n.nSR)(d,p),h.a1=i,$=g[(0,n.nSR)(0,2)],e+=`${h.getNom()} tel que ${h.getAngles()[0]} $= ${(0,n.euh)(h.a1)}\\degree$ ; `,$){case"triple":a=(0,n.n0o)((180-i)/4),o=(0,n.n0o)(3*a);break;case"quadruple":a=(0,n.n0o)((180-i)/5),o=(0,n.n0o)(4*a);break;case"quart":a=(0,n.n0o)(4*(180-i)/5),o=(0,n.n0o)(a/4)}h.a2=a,h.a3=o,e+=`${h.getAngles()[1]} $= ${(0,n.euh)(h.a2)}\\degree$ et ${h.getAngles()[2]} est le ${$} de ${h.getAngles()[1]}.`;for(let e=0;e<3;e++)b.push({angle:h.getAngles()[e],valeur:h.getAnglesValeurs()[e]});t+=`<br>Dans le triangle ${h.getNom()}, ${b[2].angle} est le ${$} de ${b[1].angle} = $${(0,n.euh)(b[1].valeur)}\\degree$  d'où ${b[2].angle} = $${(0,n.euh)(b[2].valeur)}\\degree$.`;break;case 1:switch(a=(0,n.nSR)(d,p),h.a2=a,$=g[(0,n.nSR)(0,2)],e+=`${h.getNom()} tel que ${h.getAngles()[1]} $= ${(0,n.euh)(h.a2)}\\degree$ ; `,$){case"triple":i=(0,n.n0o)((180-a)/4),o=(0,n.n0o)(3*i);break;case"quadruple":i=(0,n.n0o)((180-a)/5),o=(0,n.n0o)(4*i);break;case"quart":i=(0,n.n0o)(4*(180-a)/5),o=(0,n.n0o)(i/4)}h.a1=i,h.a3=o,e+=`${h.getAngles()[0]} $= ${(0,n.euh)(h.a1)}\\degree$ et ${h.getAngles()[2]} est le ${$} de ${h.getAngles()[0]}.`;for(let e=0;e<3;e++)b.push({angle:h.getAngles()[e],valeur:h.getAnglesValeurs()[e]});t+=`<br>Dans le triangle ${h.getNom()}, ${b[2].angle} est le ${$} de ${b[0].angle} = $${(0,n.euh)(b[0].valeur)}\\degree$  d'où ${b[2].angle} = $${(0,n.euh)(b[2].valeur)}\\degree$.`}t+=`<br>Donc ${b[0].angle} + ${b[1].angle} + ${b[2].angle} = $${(0,n.euh)(b[0].valeur)}\\degree + ${(0,n.euh)(b[1].valeur)}\\degree + ${(0,n.euh)(b[2].valeur)}\\degree = ${(0,n.k$K)(b[0].valeur+b[1].valeur+b[2].valeur)}\\degree$.`,t+="<br> On constate que la somme des trois angles du triangle vaut bien $180\\degree$.",t+=`<br> ${(0,n.pRK)("On peut donc construire le triangle "+h.getNom())}.`,t+=`<br><br>  ${(0,n.pRK)("Il existe une infinité de triangles avec ces mesures.")}`,t+="<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction."}-1===this.listeQuestions.indexOf(e)&&(this.listeQuestions.push(e),this.listeCorrections.push(t),g++),$++}(0,n.K1R)(this)},this.exo==this.beta+"5G21-1"?this.besoinFormulaireNumerique=["Niveau de difficulté",2,"1 : 3 longueurs\n2 : 2 longueurs et le périmètre"]:this.exo==this.beta+"5G31-1"&&(this.besoinFormulaireNumerique=["Niveau de difficulté",2,"1 : 3 angles\n2 : 2 angles et le 3e en fonction du 1er ou du 2eme"])}},71129:(e,s,t)=>{"use strict";function r(){this.titre="",this.consigne="",this.consigneCorrection="",this.listeQuestions=[],this.listeCorrections=[],this.introduction="",this.contenu="",this.contenuCorrection="",this.nbQuestions=10,this.nbCols=2,this.nbColsCorr=2,this.spacing=1,this.spacingCorr=1,this.beamer=!1,this.besoinFormulaireNumerique=!1,this.besoinFormulaireTexte=!1,this.besoinFormulaireCaseACocher=!1,this.besoinFormulaire2Numerique=!1,this.besoinFormulaire2Texte=!1,this.besoinFormulaire2CaseACocher=!1,this.besoinFormulair2eNumerique=!1,this.besoinFormulair2eTexte=!1,this.besoinFormulair2eCaseACocher=!1,this.consigneModifiable=!0,this.nbQuestionsModifiable=!0,this.nbColsModifiable=!0,this.nbColsCorrModifiable=!0,this.spacingModifiable=!0,this.spacingCorrModifiable=!0,this.correctionDetailleeDisponible=!1,this.correctionDetaillee=!0,this.video="",this.boutonAide=!1,this.tailleDiaporama=50,this.pasDeVersionLatex=!1,this.interactif=!1,this.interactifObligatoire=!1,this.qcm=!1,this.qcmDisponible=!1,this.modeQcm=!1,this.autoCorrection=[],this.tableauSolutionsDuQcm=[],this.mg32Editable=!1,this.nouvelleVersion=function(e){},this.listePackages=[]}t.r(s),t.d(s,{default:()=>r})}}]);
//# sourceMappingURL=78557.5faecb83138d2fce5be7.js.map