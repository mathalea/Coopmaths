{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4P10-1.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Graphiques_et_proportionnalite2","type_de_questions_disponibles","Exercice","this","debug","nbQuestions","consigne","nbCols","nbColsCorr","sortieHtml","spacing","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","r","stepAxeSecondaire","pu_oranges","choice","pu_baguettes","situations","lieu","prenom","articles","art_articles","prix_unitaire","qte","qte_max","qte2","unite","legendeX","legendeY","fig","fig_corr","situation","randint","length","xscale","yscale","mesAppels","repere","xmin","ymin","ymax","xmax","grilleSecondaireVisible","grilleSecondaireDistance","positionLegendeY","f","x","calcul","push","courbe","mathalea2d","pixelsParCm","mesAppels_corr","A","point","B","s1","segment","epaisseur","pointilles","styleExtremites","C","s2","D","E","s3","F","s4","k","k_corr","enonces","enonce","numAlpha","correction","texteEnCouleur","tex_prix","texteGras","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/8025.6ca12d9b319d2dd205fc.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListesSansChangerOrdre,calcul,prenom,texteEnCouleur,texteGras,tex_prix,numAlpha} from '../../modules/outils.js'\nimport {point,segment,repere,courbe,mathalea2d} from '../../modules/2d.js'\nexport const titre = 'Résoudre un problème de proportionnalité à l’aide d’un graphique'\n\n/**\n * fork de 4P10-1 par Jean-Claude Lhote\n */\n\nexport default function Graphiques_et_proportionnalite2() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.debug = false;\n  if (this.debug) {\n    this.nbQuestions = 2;\n  } else {\n    this.nbQuestions = 1;\n  };\n\n  this.titre = titre;\n  this.consigne = \"\";\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  sortieHtml ? this.spacing = 2 : this.spacing = 1;\n  //sortieHtml? this.spacingCorr = 3 : this.spacingCorr = 2;\n\n  let type_de_questions_disponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      type_de_questions_disponibles = [1];\n    } else {\n      type_de_questions_disponibles = [1];\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    //type_de_questions_disponibles=[1];\t\t\t\n\n    //let listeTypeDeQuestions  = combinaisonListes(type_de_questions_disponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // on prévoit un peu d'aléatoire pour les prix unitaires\n      let pu_oranges = choice([1.2, 1.4, 1.6, 1.8]);\n      let pu_baguettes = choice([0.6, 0.8, 1.2]);\n      // on prévoit un tableau avec des situations\n      let situations = [\n        { lieu: `l'épicerie`, prenom: prenom(), articles: `oranges`, art_articles: `d'oranges`, prix_unitaire: pu_oranges, qte: `poids`, qte_max: 10, qte2: 3, unite: `kg d'`, legendeX: `poids en kg`, legendeY: `prix en €`, fig: {}, fig_corr: {} },\n        { lieu: `la boulangerie`, prenom: prenom(), articles: `baguettes`, art_articles: `de baguettes`, prix_unitaire: pu_baguettes, qte: `nombre`, qte_max: 10, qte2: 3, unite: ``, legendeX: `quantité`, legendeY: `prix en €`, fig: {}, fig_corr: {} }\n      ]\n      // on en choisit une\n      let situation = situations[randint(0, situations.length - 1)];\n      let r;\n      let xscale = 1;\n      let yscale = choice([1,2,5]);\n      // pour aléatoiriser un peu le pas sur l'axe des prix\n      let stepAxeSecondaire \n      if (yscale==1) stepAxeSecondaire = choice([0.5,0.2,0.25]);\n      // on finit les appels\n      let mesAppels = [\n        r = repere({\n          xmin: 0,\n          ymin: 0,\n          ymax: situation.qte_max * situation.prix_unitaire + 4,\n          xmax: situation.qte_max,\n          xscale: xscale,\n          yscale: yscale,\n          legendeX: situation.legendeX,\n          legendeY: situation.legendeY,\n          grilleSecondaireVisible: true,\n          grilleSecondaireDistance: stepAxeSecondaire,//0.2,\n          positionLegendeY: [0.3, situation.qte_max * situation.prix_unitaire + 4 + 0.4]\n        }),\n      ];\n      let f = x => calcul(situation.prix_unitaire * x);\n      mesAppels.push(f, courbe(f, 0, situation.qte_max, 'black', 1.5, r));\n      // on prépare l'objet figure\n      let fig = mathalea2d(\n        {\n          xmin: -xscale,\n          ymin: -yscale,\n          xmax: situation.qte_max / xscale + 3,\n          ymax: (situation.qte_max * situation.prix_unitaire + 4) / 2 + 1,\n          pixelsParCm: 40\n        },\n        mesAppels\n      );\n      situation.fig = fig;\n\n      // on prépare les appels supplémentaires pour la correction\n      let mesAppels_corr = mesAppels;\n      let A = point(situation.qte_max, 0);\n      let B = point(situation.qte_max, calcul(situation.qte_max * situation.prix_unitaire / yscale));\n      let s1 = segment(A, B, \"red\");\n      s1.epaisseur = 2;\n      s1.pointilles = true;\n      s1.styleExtremites = `->`;\n      let C = point(0, calcul(situation.qte_max * situation.prix_unitaire / yscale));\n      let s2 = segment(B, C, \"red\");\n      s2.epaisseur = 2;\n      s2.pointilles = true;\n      s2.styleExtremites = `->`;\n\n      let D = point(situation.qte2, 0);\n      let E = point(situation.qte2, calcul(situation.qte2 * situation.prix_unitaire / yscale));\n      let s3 = segment(D, E, \"blue\");\n      s3.epaisseur = 2;\n      s3.pointilles = true;\n      s3.styleExtremites = `->`;\n      let F = point(0, calcul(situation.qte2 * situation.prix_unitaire / yscale));\n      let s4 = segment(E, F, \"blue\");\n      s4.epaisseur = 2;\n      s4.pointilles = true;\n      s4.styleExtremites = `->`;\n\n      // on ajoute les appels pour la correction\n      mesAppels_corr.push(\n        s1,\n        s2,\n        s3,\n        s4\n      )\n\n      // on prépare l'objet figure correction\n      let fig_corr = mathalea2d(\n        {\n          xmin: -xscale,\n          ymin: -yscale,\n          xmax: situation.qte_max / xscale + 3,\n          ymax: (situation.qte_max * situation.prix_unitaire + 4) / 2 + 1,\n          pixelsParCm: 40\n        },\n        mesAppels_corr\n      );\n      situation.fig_corr = fig_corr;\n\n\n\n      // un compteur pour les sous-questions\n      let k = 0;\n      let k_corr = 0;\n\n      let enonces = [];\n      enonces.push({\n        enonce: `\n          À ${situation.lieu}, ${situation.prenom} utilise le graphique ci-dessous pour indiquer le prix de ses ${situation.articles} en fonction du ${situation.qte} ${situation.art_articles}.\n          <br>${situation.fig}\n          <br> ${numAlpha(k++)} Justifier que c'est une situation de proportionnalité à l'aide du graphique.\n          <br> ${numAlpha(k++)} Quel est le prix de $${situation.qte_max}$ ${situation.unite}  ${situation.articles}?\n          <br> ${numAlpha(k++)} Quel est le prix de $${situation.qte2}$ ${situation.unite}  ${situation.articles}?\n          `,\n        //question:``,\n        correction: `\n        <br> ${numAlpha(k_corr++)} Ce graphique est une droite qui passe par l'origine.\n        <br> ${texteEnCouleur(`C'est donc bien le graphique d'une situation de proportionnalité.`)}\n\n        <br> ${numAlpha(k_corr++)} Par lecture graphique, en utilisant les pointillés rouges du graphe ci-dessous, ${texteEnCouleur(`$${situation.qte_max}$ ${situation.unite}  ${situation.articles} coûtent $${tex_prix(calcul(situation.qte_max * situation.prix_unitaire))}$ €.`)}\n        <br> ${situation.fig_corr}\n        <br> ${numAlpha(k_corr++)} Pour $${situation.qte2}$ ${situation.unite}  ${situation.articles}, la lecture graphique est moins facile, nous allons détailler deux méthodes.\n        <br><br> ${texteGras(`Première méthode par lecture graphique :`)} \n        <br> Il faut prendre en compte que chaque petit carreau représente $${tex_prix(stepAxeSecondaire*yscale)}$ € et utiliser les pointillés bleus.\n        <br><br> ${texteGras(`Seconde méthode en calculant une quatrième proportionnelle :`)}\n        <br> $${situation.qte_max}$ ${situation.unite}  ${situation.articles} coûtent $${tex_prix(calcul(situation.qte_max * situation.prix_unitaire))}$ €\n        donc $${situation.qte2}$ ${situation.unite}  ${situation.articles} coûtent : <br> $(${tex_prix(calcul(situation.qte_max * situation.prix_unitaire))}$ € $\\\\div ${situation.qte_max}$ ${situation.articles} $)\\\\times (${situation.qte2}$ ${situation.articles})  $= ${tex_prix(calcul(situation.qte2 * situation.prix_unitaire))}$ €\n        <br><br>${texteEnCouleur(`Quelle que soit la méthode utilisée, ${situation.qte2} ${situation.unite}  ${situation.articles} coûtent $${tex_prix(calcul(situation.qte2 * situation.prix_unitaire))}$ €.`)}\n        `\n      })\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`;\n          //texte = `${fig}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n      }\n\n\n      if (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n\n  }\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  //this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\t  \n}\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}