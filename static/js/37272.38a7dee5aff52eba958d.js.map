{"version":3,"file":"js/37272.38a7dee5aff52eba958d.js","mappings":"yRAMO,MAAMA,GAAW,EACXC,EAAU,UACVC,GAAkB,EAClBC,EAAiB,MAEjBC,EAAQ,sBAQN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MAEdA,KAAKC,YAAc,EACnBD,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAKI,IAAM,EACXJ,KAAKK,MAAO,EACZL,KAAKM,YAAcC,EAAAA,GAAAA,OAAiB,IAAM,IAE1CP,KAAKQ,gBAAkB,WACrBR,KAAKI,IAAMK,SAAST,KAAKI,KACzBJ,KAAKU,QAAWV,KAAKW,YAA2B,IAAbX,KAAKI,IAAa,EAAI,EACzDJ,KAAKY,eAAiB,GACjBL,EAAAA,GAAAA,OAAkBP,KAAKW,WAG1BX,KAAKa,SAAW,0HAFhBb,KAAKa,SAAW,mIAIlB,MAAMC,EAAS,GAAUC,EAAW,GAAUC,EAAY,GAAI,IAS1DC,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAGC,EAAKC,EAAKC,EAAIC,EAAKC,EAAOC,EATHC,EAAc,GAC5EC,EAAS,GAEXA,EADE5B,EAAAA,GAAAA,OACO,OAEA,OAEXP,KAAKoC,eAAiB,GACtBpC,KAAKqC,iBAAmB,GAExB,MAAMC,EAAsBtC,KAAKI,IAAM,GAAImC,EAAAA,EAAAA,KAAkB,CAACvC,KAAKI,KAAMJ,KAAKC,cAAesC,EAAAA,EAAAA,KAAkB,CAAC,EAAG,EAAG,EAAG,GAAIvC,KAAKC,aAClI,IAAK,IAAIuC,EAAI,EAAGC,EAAQ,GAAIC,EAAY,GAAIC,EAAM,EAAGH,EAAIxC,KAAKC,aAAe0C,EAAM,IAAK,CAEtF,OADA3C,KAAKY,eAAe4B,GAAK,GACjBF,EAAoBE,IAC1B,KAAK,EACHvB,GAAI2B,EAAAA,EAAAA,KAAQ,EAAG,GACf1B,GAAI0B,EAAAA,EAAAA,KAAQ,EAAG,GACfzB,GAAIyB,EAAAA,EAAAA,KAAQ,EAAG,GACfxB,GAAIwB,EAAAA,EAAAA,KAAQ,EAAG,GACfvB,GAAKuB,EAAAA,EAAAA,KAAQ,EAAG,GAChBtB,GAAKsB,EAAAA,EAAAA,KAAQ,EAAG,GAChBrB,GAAKqB,EAAAA,EAAAA,KAAQ,EAAG,EAAG,GACnBpB,GAAKoB,EAAAA,EAAAA,KAAQ,EAAG,GAChBnB,GAAKmB,EAAAA,EAAAA,KAAQ,EAAG,GAChBlB,GAAKkB,EAAAA,EAAAA,KAAQ,EAAG,GAChBjB,EAAIH,EAAKP,EAAI,IAAOQ,EAAKP,EAAI,IAAMQ,EAAKP,EAAI,GAAS,EAAJC,GAAQyB,EAAAA,EAAAA,KAAY,GAALxB,EAAgB,IAALC,EAAiB,KAALC,GACvFO,GAAKgB,EAAAA,EAAAA,KAAUnB,GACfc,EAAS,IAAGX,KACZ,MACF,KAAK,EACHF,GAAMmB,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,GAAI,KACxBlB,GAAMe,EAAAA,EAAAA,KAAQ,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC5FjB,EAAIE,EAAMD,EACVE,GAAKkB,EAAAA,EAAAA,KAAYnB,EAAKD,GACtBP,EAAK,IAAM4B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC5CL,EAAK,KAAO2B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC7CJ,EAAK,KAAQ0B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC9Cc,EAAS,gDAA+CZ,UAAYD,+BAAgCkB,EAAAA,EAAAA,KAAUnB,OAC9G,MACF,KAAK,EACHI,GAAMa,EAAAA,EAAAA,KAAQ,EAAG,IAAK,EAACM,EAAAA,EAAAA,KAAiC,OACxDvB,EAAIwB,KAAKC,KAAKrB,GACdD,EAAM,UAASC,KACfV,EAAK,IAAM4B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC5CL,EAAK,KAAO2B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC7CJ,EAAK,KAAQ0B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC9Cc,EAAS,gDAA+CX,+BAA+BgB,EAAAA,EAAAA,KAAUnB,OACjG,MACF,KAAK,EACHM,GAAIW,EAAAA,EAAAA,KAAQ,GAAI,IAAM,GACtBZ,GAAQY,EAAAA,EAAAA,KAAQ,EAAG,GAAI,KACnBG,EAAAA,EAAAA,KAAO,EAAC,GAAM,KAChBpB,EAAIM,GAAIoB,EAAAA,EAAAA,IAAIrB,GACZF,EAAM,IAAEgB,EAAAA,EAAAA,KAAUb,WAAWD,KAC7BX,EAAK,IAAM4B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC5CL,EAAK,KAAO2B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC7CJ,EAAK,KAAQ0B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,KAE9CA,EAAIM,GAAIoB,EAAAA,EAAAA,IAAIrB,GACZF,EAAM,YAAUgB,EAAAA,EAAAA,KAAUb,aAAaD,MACvCX,EAAK,IAAM4B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC5CL,EAAK,KAAO2B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,GAC7CJ,EAAK,KAAQ0B,EAAAA,EAAAA,KAAWtB,GAAIsB,EAAAA,EAAAA,KAAWtB,EAAG,GAAI,IAEhDc,EAAS,gDAA+CX,+BAA+BgB,EAAAA,EAAAA,KAAUnB,OA0GrG,GAtGAe,EAAY,sCACRrB,EAAK,GACPqB,GAAc,uBAAqBY,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,OACxHX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,OACxGX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,QACvGO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,MAE1CQ,GAAc,uBAAqBI,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,QACvHX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,QACvGX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,EAAG,OACxGO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,KAG5CQ,GAAa,2CACTpB,EAAK,GACPoB,GAAc,mBAAiBY,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,OACtHX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,OAC1GX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,QACzGO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,MAE1CQ,GAAc,mBAAiBI,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,QACrHX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,QACzGX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,GAAK,OAC1GO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,KAG5CQ,GAAa,+CACTnB,EAAK,GACPmB,GAAc,KAAGY,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,OACzGX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,OAC3GX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,QAC1GO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,MAE1CQ,GAAc,KAAGI,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,QACxGX,EAAU,GAAM,KAAG8B,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,SAASG,QAAQwB,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,QAC1GX,EAAU,GAAM,KAAGsC,EAAAA,EAAAA,KAAeR,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAG,UAAUG,QAAQgB,EAAAA,EAAAA,MAAUG,EAAAA,EAAAA,KAAWtB,EAAI,IAAM,OAC3GO,EAAc,EAAC,GAAM,IACjBa,EAAAA,EAAAA,KAAO,EAAC,GAAO,MACjBQ,EAAAA,EAAAA,KAAiBvC,EAAWkB,GAE9BpB,EAAO0C,KAAKxC,EAAU,GAAIA,EAAU,IACpCD,EAASyC,KAAKtB,EAAY,GAAIA,EAAY,KAE5ClC,KAAKY,eAAe4B,GAAGiB,OAAU,oEAAmEhB,gCACpGzC,KAAKY,eAAe4B,GAAGkB,QAAU,CAAEC,UAAU,EAAMC,SAAS,GAC5D5D,KAAKY,eAAe4B,GAAGqB,aAAe,CACpC,CACEpB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,IAEZ,CACEtB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,IAEZ,CACEtB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,IAEZ,CACEtB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,IAEZ,CACEtB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,IAEZ,CACEtB,MAAO3B,EAAO,GACdgD,OAAQ/C,EAAS,GACjBgD,SAAU,KAGV/D,KAAKgE,UAAYzD,EAAAA,GAAAA,MAAe,CAClCkC,GAAS,sCACTC,EAAY,GAEZ,IAAK,IAAIF,EAAI,EAAGA,EAAI,EAAGA,IACrBC,GAAU,iBAAgB3B,EAAO0B,KAAOL,EACpB,IAAhBpB,EAASyB,GACXE,GAAc,sBAAqB5B,EAAO0B,KAAOL,EAEjDO,GAAc,iBAAgB5B,EAAO0B,KAAOL,GAKN,IAAxCnC,KAAKoC,eAAe6B,QAAQxB,KAE1BzC,KAAKW,aACP8B,IAASyB,EAAAA,EAAAA,IAAgBlE,KAAMwC,GAAGC,OAEpCzC,KAAKoC,eAAeoB,KAAKf,GACzBzC,KAAKqC,iBAAiBmB,KAAKd,GAC3B5B,EAAOqD,OAAS,EAChBpD,EAASoD,OAAS,EAClB3B,KAEFG,KAEFyB,EAAAA,EAAAA,KAAwBpE,OAE1BA,KAAKqE,0BAA4B,CAAC,kBAAmB,EAAG,2C,gBCvO3C,SAAStE,IAItBC,KAAKH,MAAQ,GACbG,KAAKsE,YAAa,EAclBtE,KAAKa,SAAW,GAChBb,KAAKuE,mBAAqB,GAC1BvE,KAAKwE,aAAe,GACpBxE,KAAKoC,eAAiB,GACtBpC,KAAKqC,iBAAmB,GACxBrC,KAAKyE,QAAU,GACfzE,KAAK0E,kBAAoB,GACzB1E,KAAKY,eAAiB,GACtBZ,KAAK2E,sBAAwB,GAK7B3E,KAAKU,QAAU,EACfV,KAAKM,YAAc,EAKnBN,KAAK4E,mBAAoB,EACzB5E,KAAK6E,cAAgB,GACrB7E,KAAK8E,oBAAqB,EAC1B9E,KAAK+E,uBAAwB,EAC7B/E,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAKgF,kBAAmB,EACxBhF,KAAKiF,sBAAuB,EAC5BjF,KAAKkF,mBAAoB,EACzBlF,KAAKmF,uBAAwB,EAM7BnF,KAAKoF,QAAS,EACdpF,KAAKqF,gBAAkB,EAKvBrF,KAAKC,YAAc,GACnBD,KAAKsF,mBAAqB,EAC1BtF,KAAKuF,+BAAgC,EACrCvF,KAAKwF,qBAAsB,EAC3BxF,KAAKyF,oBAAqB,EAC1BzF,KAAK0F,MAAQ,GAEb1F,KAAKW,YAAa,EAClBX,KAAK2F,uBAAwB,EAE7B3F,KAAKqE,2BAA4B,EACjCrE,KAAK4F,uBAAwB,EAC7B5F,KAAK6F,6BAA8B,EAEnC7F,KAAK8F,4BAA6B,EAClC9F,KAAK+F,wBAAyB,EAC9B/F,KAAKgG,8BAA+B,EAEpChG,KAAKiG,4BAA6B,EAClCjG,KAAKkG,wBAAyB,EAC9BlG,KAAKmG,8BAA+B,EAEpCnG,KAAKoG,4BAA6B,EAClCpG,KAAKqG,wBAAyB,EAC9BrG,KAAKsG,8BAA+B,EAMpCtG,KAAKuG,cAAe,EASpBvG,KAAKwG,eAAiB,GAMtBxG,KAAKQ,gBAAkB,SAAUiG,KAQjCzG,KAAK0G,oBAAsB,SAAUlE,KAAMmE,GAC/B,IAANnE,IAASxC,KAAKwG,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI/G,KAAKwG,eAAevC,QAAQ2C,IAAmB,KAGjD5G,KAAKwG,eAAehD,KAAKoD,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/6e/6N31-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeNombresPremiersStrictJusqua, shuffle2tableaux, choice, listeQuestionsToContenu, randint, troncature, calcul, texNombre, miseEnEvidence, texFraction, combinaisonListes } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nimport { cos } from '../../modules/fonctionsMaths.js'\n\nexport const amcReady = true\nexport const amcType = 'qcmMult' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = 'qcm'\n\nexport const titre = 'Arrondir une valeur'\n\n/**\n * * Encadrer_puis_arrondir_une_valeur\n * * 6N31-3\n * @author Mireille Gain, s'inspirant de 6N31-1 de Sébastien Lozano\n */\n\nexport default function ArrondirUneValeur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n\n  this.nbQuestions = 3\n  this.nbCols = 2 // Valeur différente de 3 car sinon en Latex, 3 colonnes, c'est trop !\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = false\n  this.spacingCorr = context.isHtml ? 2.5 : 3.5\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.spacing = (this.interactif && this.sup === 2) ? 3 : 1\n    this.autoCorrection = []\n    if (!context.isAmc && !this.interactif) {\n      this.consigne = \"Encadrer chaque nombre à l'unité, puis au dixième, puis au centième.<br>Dans chaque cas, mettre ensuite en évidence son arrondi.\"\n    } else {\n      this.consigne = \"Quels sont les encadrements où la valeur orange est la valeur arrondie du nombre à l'unité, au dixième et au centième ?\"\n    }\n    const tabrep = []; const tabicone = []; const preTabRep = []; let preTabIcone = []\n    let espace = ''\n    if (context.isHtml) {\n      espace = '<br>'\n    } else {\n      espace = '\\\\\\\\'\n    }\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let m, c, d, u, di, ci, mi, me, ce, de, n, den, num, nb, rac, angle, v\n    const listeTypeDeQuestion = this.sup < 5 ? combinaisonListes([this.sup], this.nbQuestions) : combinaisonListes([1, 2, 3, 4], this.nbQuestions)\n    for (let i = 0, texte = '', texteCorr = '', cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      switch (listeTypeDeQuestion[i]) {\n        case 1:\n          m = randint(0, 9)\n          c = randint(0, 9)\n          d = randint(0, 9)\n          u = randint(2, 9)\n          di = randint(1, 9)\n          ci = randint(1, 9)\n          mi = randint(1, 9, 5)\n          me = randint(0, 1)\n          ce = randint(0, 1)\n          de = randint(0, 1)\n          n = me * m * 1000 + ce * c * 100 + de * d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001)\n          nb = texNombre(n)\n          texte = `$${nb}$`\n          break\n        case 2:\n          den = choice([7, 9, 11, 13])\n          num = randint(1, 50, [7, 9, 11, 13, 14, 18, 21, 22, 26, 27, 28, 33, 35, 36, 39, 42, 44, 45, 49])\n          n = num / den\n          nb = texFraction(num, den)\n          di = 10 * (troncature(n - troncature(n, 0), 1))\n          ci = 100 * (troncature(n - troncature(n, 1), 2))\n          mi = 1000 * (troncature(n - troncature(n, 2), 3))\n          texte = `$\\\\text{Quand~on~écrit~sur~la~calculatrice~} ${num}\\\\div ${den}, \\\\text{~elle~renvoie} : ${texNombre(n)}$.`\n          break\n        case 3:\n          rac = randint(2, 300, [listeNombresPremiersStrictJusqua(300)])\n          n = Math.sqrt(rac)\n          nb = `\\\\sqrt{${rac}}`\n          di = 10 * (troncature(n - troncature(n, 0), 1))\n          ci = 100 * (troncature(n - troncature(n, 1), 2))\n          mi = 1000 * (troncature(n - troncature(n, 2), 3))\n          texte = `$\\\\text{Quand~on~écrit~sur~la~calculatrice~} ${nb}, \\\\text{~elle~renvoie} : ${texNombre(n)}$.`\n          break\n        case 4:\n          v = randint(11, 99) / 10\n          angle = randint(1, 89, 60)\n          if (choice([true, false])) {\n            n = v * cos(angle)\n            nb = `${texNombre(v)}\\\\cos(${angle})`\n            di = 10 * (troncature(n - troncature(n, 0), 1))\n            ci = 100 * (troncature(n - troncature(n, 1), 2))\n            mi = 1000 * (troncature(n - troncature(n, 2), 3))\n          } else {\n            n = v / cos(angle)\n            nb = `\\\\dfrac{${texNombre(v)}}{\\\\cos(${angle})}`\n            di = 10 * (troncature(n - troncature(n, 0), 1))\n            ci = 100 * (troncature(n - troncature(n, 1), 2))\n            mi = 1000 * (troncature(n - troncature(n, 2), 3))\n          }\n          texte = `$\\\\text{Quand~on~écrit~sur~la~calculatrice~} ${nb}, \\\\text{~elle~renvoie} : ${texNombre(n)}$.`\n          break\n      }\n\n      texteCorr = \"Encadrement et arrondi à l'unité : \"\n      if (di < 5) {\n        texteCorr += `$\\\\phantom{1234567}${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$\\\\phantom{1234567}${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n\n      texteCorr += '<br>Encadrement et arrondi au dixième : '\n      if (ci < 5) {\n        texteCorr += `$\\\\phantom{123}${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$\\\\phantom{123}${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n\n      texteCorr += '<br>Encadrement et arrondi au centième : $~$'\n      if (mi < 5) {\n        texteCorr += `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n      this.autoCorrection[i].enonce = `Quels sont les encadrements où la valeur orange est l'arrondi de ${texte} ?\\\\\\\\ \\n Réponses possibles`\n      this.autoCorrection[i].options = { vertical: true, ordered: true }\n      this.autoCorrection[i].propositions = [\n        {\n          texte: tabrep[0],\n          statut: tabicone[0],\n          feedback: ''\n        },\n        {\n          texte: tabrep[1],\n          statut: tabicone[1],\n          feedback: ''\n        },\n        {\n          texte: tabrep[2],\n          statut: tabicone[2],\n          feedback: ''\n        },\n        {\n          texte: tabrep[3],\n          statut: tabicone[3],\n          feedback: ''\n        },\n        {\n          texte: tabrep[4],\n          statut: tabicone[4],\n          feedback: ''\n        },\n        {\n          texte: tabrep[5],\n          statut: tabicone[5],\n          feedback: ''\n        }\n      ]\n      if (this.modeQcm && !context.isAmc) {\n        texte += '<br><br>Réponses possibles : <br>  '\n        texteCorr = ''\n        // shuffle2tableaux(tabrep, tabicone);\n        for (let i = 0; i < 6; i++) {\n          texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          if (tabicone[i] === 1) {\n            texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace\n          } else {\n            texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          }\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n        this.listeQuestions.push(texte) // Sinon on enregistre la question dans listeQuestions\n        this.listeCorrections.push(texteCorr) // On fait pareil pour la correction\n        tabrep.length = 0\n        tabicone.length = 0\n        i++ // On passe à la question suivante\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de nombres', 2, ' 1 : Nombres décimaux\\n 2 : Fractions']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","ArrondirUneValeur","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","spacingCorr","context","nouvelleVersion","parseInt","spacing","interactif","autoCorrection","consigne","tabrep","tabicone","preTabRep","m","c","d","u","di","ci","mi","me","ce","de","n","den","num","nb","rac","angle","v","preTabIcone","espace","listeQuestions","listeCorrections","listeTypeDeQuestion","combinaisonListes","i","texte","texteCorr","cpt","randint","calcul","texNombre","choice","texFraction","troncature","listeNombresPremiersStrictJusqua","Math","sqrt","cos","miseEnEvidence","shuffle2tableaux","push","enonce","options","vertical","ordered","propositions","statut","feedback","modeQcm","indexOf","propositionsQcm","length","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}