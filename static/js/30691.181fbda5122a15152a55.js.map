{"version":3,"file":"js/30691.181fbda5122a15152a55.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5M10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { mathalea2d, pointAdistance, point, parallelogramme2points1hauteur, afficheLongueurSegment, projectionOrtho, milieu, droite, segment, codageAngleDroit } from '../../modules/2d.js'\nimport { creerNomDePolygone, listeQuestionsToContenuSansNumero, randint, texteEnCouleurEtGras } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\n\nexport const titre = 'Aire du parallélogramme'\n\n/**\n* Deux parallélogrammes sont tracés, on connait les 2 côté et une hauteur.\n*\n* Il faut calculer leurs aires.\n*\n* Pas de version LaTeX\n* @author Rémi Angot\n* 5M10\n*/\nexport default function AireDuParallelogramme () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Calculer l'aire des 3 parallélogrammes suivants (les longueurs sont données en cm).\"\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nbQuestionsModifiable = false\n  const cadre = function (p, params) {\n    let xmin = 0; let xmax = 0; let ymin = 0; let ymax = 0\n    for (let i = 0; i < 4; i++) {\n      xmin = Math.min(xmin, p[0].listePoints[i].x - 1)\n      ymin = Math.min(ymin, p[0].listePoints[i].y - 1)\n      xmax = Math.max(xmax, p[0].listePoints[i].x + 1)\n      ymax = Math.max(ymax, p[0].listePoints[i].y + 1)\n    }\n    params.xmin = xmin\n    params.xmax = xmax\n    params.ymin = ymin\n    params.ymax = ymax\n    return params\n  }\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.listeQuestions = []\n    this.autoCorrection = []\n    let texte = ''; let params\n    const nom = creerNomDePolygone(12, 'Q')\n    const c1 = randint(3, 7)\n    const h1 = randint(2, 4)\n    const c2 = randint(3, 7)\n    const h2 = randint(2, 7)\n    const c3 = randint(3, 10)\n    const h3 = randint(2, 4)\n    const A1 = point(0, 0, nom[0])\n    const B1 = pointAdistance(A1, c1, randint(-20, 20), nom[1])\n    const P1 = parallelogramme2points1hauteur(nom.slice(0, 4), A1, B1, h1)\n    const C1 = P1[0].listePoints[2]\n    const I1 = milieu(A1, B1)\n    const H1 = projectionOrtho(I1, droite(P1[0].listePoints[3], P1[0].listePoints[2]))\n    const s1 = segment(I1, H1)\n    s1.pointilles = 2\n    const A2 = point(0, 0)\n    const B2 = pointAdistance(A2, c2, randint(-20, 20), nom[5])\n    const P2 = parallelogramme2points1hauteur(nom.slice(4, 8), A2, B2, h2)\n    const C2 = P2[0].listePoints[2]\n    const I2 = milieu(A2, B2)\n    const H2 = projectionOrtho(I2, droite(P2[0].listePoints[3], P2[0].listePoints[2]))\n    const s2 = segment(I2, H2)\n    s2.pointilles = 2\n    const A3 = point(0, 0)\n    const B3 = pointAdistance(A3, c3, randint(-20, 20), nom[9])\n    const P3 = parallelogramme2points1hauteur(nom.slice(8, 12), A3, B3, h3)\n    const C3 = P3[0].listePoints[2]\n    const I3 = milieu(A3, B3)\n    const H3 = projectionOrtho(I3, droite(P3[0].listePoints[3], P3[0].listePoints[2]))\n    const s3 = segment(I3, H3)\n    s3.pointilles = 2\n    params = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n    params = cadre(P1, params)\n    texte += mathalea2d(params, P1[0], P1[1], afficheLongueurSegment(B1, A1), afficheLongueurSegment(C1, B1), afficheLongueurSegment(I1, H1), s1, codageAngleDroit(A1, I1, H1), codageAngleDroit(C1, H1, I1))\n    params = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n    params = cadre(P2, params)\n    texte += mathalea2d(params, P2[0], P2[1], afficheLongueurSegment(B2, A2), afficheLongueurSegment(C2, B2), afficheLongueurSegment(I2, H2), s2, codageAngleDroit(A2, I2, H2), codageAngleDroit(C2, H2, I2))\n    params = { xmin: 0, xmax: 0, ymin: 0, ymax: 0, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n    params = cadre(P3, params)\n    texte += 'br' + mathalea2d(params, P3[0], P3[1], afficheLongueurSegment(B3, A3), afficheLongueurSegment(C3, B3), afficheLongueurSegment(I3, H3), s3, codageAngleDroit(A3, I3, H3), codageAngleDroit(C3, H3, I3))\n\n    let texteCorr = `Dans chaque parallélogramme, le segment en pointillés est ${texteEnCouleurEtGras('perpendiculaire')} à deux côtés opposés, c'est donc une ${texteEnCouleurEtGras('hauteur')}.<br>`\n    texteCorr += `Pour obtenir l'aire, il faut multiplier cette ${texteEnCouleurEtGras('hauteur')} par la longueur de la ${texteEnCouleurEtGras('base')} correspondante.`\n    texteCorr += '<br><br>'\n    texteCorr += `$\\\\mathcal{A}_{${nom.slice(0, 4)}}=${c1}~\\\\text{cm}\\\\times  ${h1}~\\\\text{cm}=${c1 * h1}~\\\\text{cm}^2$`\n    texteCorr += `<br>$\\\\mathcal{A}_{${nom.slice(4, 8)}}=${c2}~\\\\text{cm}\\\\times  ${h2}~\\\\text{cm}=${c2 * h2}~\\\\text{cm}^2$`\n    texteCorr += `<br>$\\\\mathcal{A}_{${nom.slice(8, 12)}}=${c3}~\\\\text{cm}\\\\times  ${h3}~\\\\text{cm}=${c3 * h3}~\\\\text{cm}^2$`\n\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n  }\n\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,\"1 : Périmètres\\n\\\n  // 2 : Aires\\n3 : Périmètres et aires\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","AireDuParallelogramme","Exercice","this","consigne","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nbQuestionsModifiable","cadre","p","params","xmin","xmax","ymin","ymax","i","Math","min","listePoints","x","y","max","nouvelleVersion","numeroExercice","listeCorrections","listeQuestions","autoCorrection","texte","nom","creerNomDePolygone","c1","randint","h1","c2","h2","c3","h3","A1","point","B1","pointAdistance","P1","parallelogramme2points1hauteur","slice","C1","I1","milieu","H1","projectionOrtho","droite","s1","segment","pointilles","A2","B2","P2","C2","I2","H2","s2","A3","B3","P3","C3","I3","H3","s3","pixelsParCm","scale","mainlevee","mathalea2d","afficheLongueurSegment","codageAngleDroit","texteCorr","texteEnCouleurEtGras","push","listeQuestionsToContenuSansNumero","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}