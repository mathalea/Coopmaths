{"version":3,"file":"js/2483.ddb155247af3a762bb58.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6P12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, texNombrec, prenomF, prenomM, texteEnCouleur, texPrix, texteEnCouleurEtGras } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Résoudre des problèmes de proportionnalité en utilisant la proportionnalité simple'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = 'true'\nexport const amcType = 'AMCNum'\n/**\n * On donne une relation de proportionnalité du type n objets coûtent x€ et on demande le prix de y objets\n * et le nombre d'objets qu'on peut acheter avec z€.\n * @author Jean-Claude Lhote // pour l'exercice 6P11 original\n * @author CGrolleau // pour avoir ajouté des situations de proportionnalité en 03/2021\n * @author Guillaume Valmont // pour avoir fait la transition coefficient de linéarité -> coefficient de proportionnalité en 08/2021\n * référence 6P12\n * Publié le 11/08/2021\n*/\n\n// _____ Les fonctions suivantes renvoient un objet : {texte = ; texteCorr = ;} ______\n// elles correspondent aux différentes situations problèmes\nlet versionSimplifiee = false\nlet indexN\nconst couplePremiersEntreEux = [\n  [3, 4],\n  [3, 5],\n  [3, 7],\n  [6, 7],\n  [3, 8],\n  [7, 8],\n  [7, 9],\n  [3, 10],\n  [7, 10],\n  [9, 10],\n  [3, 11],\n  [6, 11],\n  [7, 11],\n  [9, 11],\n  [7, 12],\n  [9, 12],\n  [11, 12],\n  [3, 13],\n  [6, 13],\n  [7, 13],\n  [9, 13],\n  [11, 13],\n  [12, 13]\n] // Couples de nombres premiers entre eux\nfunction questionAchat (exo, i) { // questions d'origine du 6P11 : achat.\n  const listeDeLieux = [\n    'dans un magasin de bricolage',\n    'dans une animalerie',\n    'au supermarché local',\n    \"à l'épicerie\",\n    'dans la boutique du musée'\n  ]\n  const listeDeChoses = [[]]\n  const listeDeChose = [[]]\n  const listeDePrixUnit = [[]]\n  listeDeChoses[0] = [\n    'articles',\n    'outils',\n    'accessoires',\n    \"pièces d'outillage\",\n    'pinceaux',\n    'ampoules',\n    'tournevis',\n    'spatules',\n    'raccords de tuyaux'\n  ]\n  listeDeChose[0] = [\n    'un seul article',\n    'un seul outil',\n    'un seul accessoire',\n    \"une seule pièce d'outillage\",\n    'un seul pinceau',\n    'une seule ampoule',\n    'un seul tournevis',\n    'une seule spatule',\n    'un seul raccord de tuyaux'\n  ]\n  listeDeChoses[1] = [\n    'poissons rouges',\n    'cannetons',\n    'perruches',\n    'phasmes',\n    'colliers anti-puces',\n    'souris',\n    'lapereaux',\n    'paquets de graines'\n  ]\n  listeDeChose[1] = [\n    'un seul poisson rouge',\n    'un seul canneton',\n    'une seule perruche',\n    'un seul phasme',\n    'un seul collier anti-puces',\n    'une seule souris',\n    'un seul lapereau',\n    'un seul paquet de graines'\n  ]\n  listeDeChoses[2] = [\n    'sets de tables',\n    'verres',\n    'assiettes',\n    'os à mâcher',\n    'dosettes de café',\n    'packs de lait',\n    'paquets de pâtes'\n  ]\n  listeDeChose[2] = [\n    'un seul set de table',\n    'un seul verre',\n    'une seule assiette',\n    'un seul os à mâcher',\n    'une seule dosette de café',\n    'un seul pack de lait',\n    'un seul paquet de pâtes'\n  ]\n  listeDeChoses[3] = [\n    'mangues',\n    'ananas',\n    'fruits de la passion',\n    'melons',\n    'paquets de madeleines de Commercy',\n    'bergamotes',\n    'bredeles',\n    'pots de cancoillotte'\n  ]\n  listeDeChose[3] = [\n    'une seule mangue',\n    'un seul ananas',\n    'un seul fruit de la passion',\n    'un seul melon',\n    'un seul paquet de madeleines de Commercy',\n    'une seule bergamote',\n    'un seul bredele',\n    'un seul pot de cancoillotte'\n  ]\n  listeDeChoses[4] = [\n    'cartes',\n    'livres',\n    'gravures',\n    'puzzles',\n    'maquettes',\n    'roches',\n    'jeux de société'\n  ]\n  listeDeChose[4] = [\n    'une seule carte',\n    'un seul livre',\n    'une seule gravure',\n    'un seul puzzle',\n    'une seule maquette',\n    'une seule roche',\n    'un seul jeu de société'\n  ]\n  listeDePrixUnit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5]\n  listeDePrixUnit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8]\n  listeDePrixUnit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3]\n  listeDePrixUnit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3]\n  listeDePrixUnit[4] = [0.5, 5, 7, 13.5, 10, 15, 20]\n  const index1 = randint(0, 4)\n  const prenoms = [prenomF(), prenomM()]\n  const index2 = randint(0, listeDeChoses[index1].length - 1)\n  const objet = listeDeChoses[index1][index2]\n  const pu = listeDePrixUnit[index1][index2] * (1 + randint(1, 2) * 0.2 * randint(-1, 1))\n  const n = couplePremiersEntreEux[indexN][0]\n  const y = couplePremiersEntreEux[indexN][1]\n  let x\n  if (versionSimplifiee) {\n    x = calcul(n * randint(2, 5))\n  } else {\n    x = calcul(n * pu, 2)\n  }\n  let met = false\n  let p\n  while (met === false) {\n    p = n * randint(2, 5)\n    if (p !== y) {\n      met = true\n    }\n  }\n  const texte = `${prenoms[0]} a repéré ${listeDeLieux[index1]} des ${objet} qui l'intéressent.<br>\n  Elle lit que ${n} ${objet} coûtent ${texPrix(x)} €. Elle veut en acheter ${y}.<br>\n  Combien va-t-elle dépenser ?` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' €' })\n  const texteCorr = `Commençons par trouver le prix d'${listeDeChose[index1][index2]} : <br>` +\n`Si ${n} ${objet} coûtent ${texPrix(x)} €, alors ${listeDeChose[index1][index2]} coûte ${texteEnCouleur(n)} fois moins cher.<br>` +\n`${texPrix(x)} € $\\\\div $ ${texteEnCouleur(n)} = ${texPrix(x / n)} €. <br>` +\ntexteEnCouleurEtGras(' Conclusion intermédiaire : ', 'black') +\n`${listeDeChose[index1][index2]} coûte donc ${texteEnCouleur(texPrix(x / n), 'blue')} €.<br>` +\n        `Cherchons donc maintenant le prix de ${y} ${objet} : <br>` +\n`${y} ${objet} c'est ${texteEnCouleur(y)} fois plus qu'${listeDeChose[index1][index2]}. <br>` +\n`${y} ${objet} coûtent donc ${texteEnCouleur(y)} fois plus que ${texteEnCouleur(texPrix(x / n), 'blue')} €, le prix d'${listeDeChose[index1][index2]}` +\n`<br> ${texteEnCouleur(texPrix(x / n), 'blue')} € $\\\\times$ ${texteEnCouleur(y)} = ${texPrix(x * y / n)} €.<br>` +\n` ${texteEnCouleurEtGras('Conclusion :', 'black')} ${y} ${objet} coûtent donc ${texPrix(x * y / n)} €.`\n  setReponse(exo, i, calcul(x * y / n))\n\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecette (exo, i) { // questions avec des masses pour un nombre de personne dans des recettes correction : passage à l'unité\n  const liste = [ // liste des ingrédients avec différentes recettes associées et masses\n    {\n      ingredient: 'farine',\n      recettes: ['gateau au citron', 'gauffres', 'crêpes', 'cake'],\n      quantites_par_pers: [20, 25, 30, 35, 40, 50] // A voir pour l'instant quantités \"simples\".\n    },\n    {\n      ingredient: 'sucre',\n      recettes: ['gateau', 'mousse au chocolat', 'pain perdu', 'riz au lait'],\n      quantites_par_pers: [15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'chocolat',\n      recettes: ['gateau', 'mousse au chocolat', 'flan', 'riz au lait'],\n      quantites_par_pers: [10, 15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'beurre',\n      recettes: ['gateau', 'mousse au chocolat'],\n      quantites_par_pers: [10, 12, 15, 18]\n    }\n  ]\n  const nbPersonneInit = couplePremiersEntreEux[indexN][0] // nombre de personne indiqué dans la recette.\n  const nbPersonneFinal = couplePremiersEntreEux[indexN][1] // nombre de personne pour lequel on veut cuisiner\n  const alea1 = randint(0, 3) // pour le choix de l'ingredient\n  const alea2 = randint(0, liste[alea1].recettes.length - 1) // pour le choix de la recette\n  const alea3 = randint(0, liste[alea1].quantites_par_pers.length - 1) // pour le choix de la quantité par personne.\n  const quantite = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneInit) // Calcul de la quantité dans la recette à partir de la qtt/personne et du nb de personne\n  const quantiteReponse = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneFinal) // Pour la correction\n  const prenoms = [prenomF(), prenomM()] // Choix de prénoms pour l'énoncé\n  const texte = `${prenoms[0]} lit sur sa recette de ${liste[alea1].recettes[alea2]} pour ${nbPersonneInit} personnes qu'il faut ${texNombrec(quantite)} g de ${liste[alea1].ingredient}. <br>` +\n`Elle veut adapter sa recette pour ${nbPersonneFinal} personnes.` +\n`<br> Quelle masse de ${liste[alea1].ingredient} doit-elle prévoir ?` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' g' })\n  const texteCorr = `Commençons par trouver la masse de ${liste[alea1].ingredient} pour une personne : <br>` +\n` ${nbPersonneInit} personnes, c'est ${texteEnCouleur(nbPersonneInit)} fois 1 personne. ` +\n`il faut donc ${texteEnCouleur(nbPersonneInit)} fois moins que ${texNombrec(quantite)} g pour 1 personne.<br>` +\n`${texNombrec(quantite)} $\\\\div $ ${texteEnCouleur(nbPersonneInit)} = ${liste[alea1].quantites_par_pers[alea3]}. <br>` +\ntexteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n` il faut ${texteEnCouleur(liste[alea1].quantites_par_pers[alea3], 'blue')} g de ${liste[alea1].ingredient} pour 1 personne. <br>` +\n        ` Cherchons maintenant la quantité nécessaire pour ${nbPersonneFinal} personnes : <br>` +\n` ${nbPersonneFinal} personnes c'est ${texteEnCouleur(nbPersonneFinal)} fois 1 personne. <br>` +\n`Donc il faut ${texteEnCouleur(nbPersonneFinal)} fois plus que ${liste[alea1].quantites_par_pers[alea3]} g de ${liste[alea1].ingredient} que pour 1 personne pour faire sa recette :` +\n`<br> ${texteEnCouleur(liste[alea1].quantites_par_pers[alea3], 'blue')} $\\\\times$ ${texteEnCouleur(nbPersonneFinal)} = ${quantiteReponse} <br>\n${texteEnCouleurEtGras('Conclusion : ', 'black')} ${prenoms[0]} doit utiliser ${quantiteReponse} g de ${liste[alea1].ingredient} pour ${nbPersonneFinal} personnes. `\n  setReponse(exo, i, quantiteReponse)\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDillution (exo, i) { // questions de mélange de volumes\n  let uniteSolvantVolumeFinal\n  const liste = [\n    {\n      solute: 'sirop',\n      volumeUnitaire: [12, 15, 18, 20],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L'] // liste pour [0] singulier [1] pluriel\n    },\n    {\n      solute: 'nettoyant pour sol',\n      volumeUnitaire: [5, 8, 10, 12],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L']\n    },\n    {\n      solute: 'médicament',\n      volumeUnitaire: [3, 3.5, 4, 4.5, 5, 7.5],\n      unite_solute: 'mL',\n      unite_solvant: ['dL', 'dL']\n    },\n    {\n      solute: 'produit pour piscine',\n      volumeUnitaire: [1, 1.2, 0.8, 1.5],\n      unite_solute: 'L',\n      unite_solvant: ['dizaine de mètres cubes', 'dizaines de mètres cubes']\n    }\n  ]\n  const volumeInitial = couplePremiersEntreEux[indexN][0] // volume d'eau pour la préparation\n  const volumeFinal = couplePremiersEntreEux[indexN][1]\n  const alea1 = randint(0, 3) // pour le choix du soluté\n  const alea2 = randint(0, liste[alea1].volumeUnitaire.length - 1) // pour le choix du volume pour une unité de solvant\n  let quantite\n  if (versionSimplifiee) {\n    quantite = volumeInitial * randint(2, 5)\n  } else {\n    quantite = liste[alea1].volumeUnitaire[alea2] * volumeInitial\n  }\n  if (volumeFinal < 2) {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[0]\n  } else {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[1]\n  }\n  const volumeFinalAff = texNombrec(volumeFinal) // pour affichage avec bon séparateur.\n  const volumeInitialAff = texNombrec(volumeInitial) // pour affichage avec bon séparateur.\n  const texte = `Il est indiqué sur la bouteille de ${liste[alea1].solute} qu'il faut  ` +\n  ` ${texNombrec(quantite)} ${liste[alea1].unite_solute} de  ${liste[alea1].solute} pour ${volumeInitialAff} ${liste[alea1].unite_solvant[0]} d'eau.<br> ` +\n  `On veut utiliser ${volumeFinalAff} ${uniteSolvantVolumeFinal} d'eau.` +\n  `<br> Quel volume de ${liste[alea1].solute} doit-on prévoir ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' ' + liste[alea1].unite_solute })\n\n  const texteCorr = `Commençons par trouver combien est-ce qu'il faut de ${liste[alea1].solute} pour 1 ${liste[alea1].unite_solvant[0]} d'eau : <br>` +\n  ` ${volumeInitial} ${liste[alea1].unite_solvant[0]} d'eau, c'est ${texteEnCouleur(volumeInitial)} fois 1 ${liste[alea1].unite_solvant[0]} d'eau. ` +\n  `Pour 1 ${liste[alea1].unite_solvant[0]} d'eau, il faut donc ${texteEnCouleur(volumeInitial)} fois moins que ${texNombrec(quantite)} ${liste[alea1].unite_solute}.<br>` +\n  `${texNombrec(quantite)} ${liste[alea1].unite_solute} $\\\\div $ ${texteEnCouleur(volumeInitial)} = ${texNombrec(liste[alea1].volumeUnitaire[alea2])} ${liste[alea1].unite_solute}. <br>` +\n  texteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n  `Il faut ${texteEnCouleur(texNombrec(liste[alea1].volumeUnitaire[alea2]), 'blue')} ${liste[alea1].unite_solute} de ${liste[alea1].solute} pour 1 ${liste[alea1].unite_solvant[0]} d'eau. <br>` +\n      ` Cherchons maintenant la quantité nécessaire pour ${volumeFinalAff} ${uniteSolvantVolumeFinal} d'eau : <br>` +\n  ` ${volumeFinalAff} ${uniteSolvantVolumeFinal} d'eau c'est ${texteEnCouleur(volumeFinalAff)} fois 1 ${liste[alea1].unite_solvant[0]} d'eau.` +\n  ` Il faut donc ${texteEnCouleur(volumeFinalAff)} fois plus de ${liste[alea1].solute} que ${texNombrec(liste[alea1].volumeUnitaire[alea2])} ${liste[alea1].unite_solute} :` +\n  `<br> ${texteEnCouleur(texNombrec(liste[alea1].volumeUnitaire[alea2]), 'blue')} ${liste[alea1].unite_solute} $\\\\times$ ${texteEnCouleur(volumeFinalAff)} = ${texNombrec(liste[alea1].volumeUnitaire[alea2] * volumeFinal)} ${liste[alea1].unite_solute}.<br>` +\n  `${texteEnCouleurEtGras('Conclusion :', 'black')} Il faut donc prévoir ${texNombrec(liste[alea1].volumeUnitaire[alea2] * volumeFinal)} ${liste[alea1].unite_solute} de  ${liste[alea1].solute}.`\n  setReponse(exo, i, calcul(liste[alea1].volumeUnitaire[alea2] * volumeFinal))\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDistance (exo, i) { // questions de distance parcourue à une vitesse moyenne donnée\n  const liste = [ // liste des \"moyens de locomotion\" et vitesses associées\n    {\n      locomotion: 'piéton',\n      vitesse: [3, 4, 5, 6]\n    },\n    {\n      locomotion: 'cycliste',\n      vitesse: [12, 15, 16, 17, 18, 20, 22]\n    },\n    {\n      locomotion: 'camion',\n      vitesse: [75, 77, 80, 82, 85]\n    },\n    {\n      locomotion: 'train',\n      vitesse: [125, 150, 175, 185, 195]\n    }\n  ]\n  let facteur\n  if (versionSimplifiee) {\n    facteur = 1\n  } else {\n    facteur = randint(1, 19, [10]) / 10\n  }\n  const alea1 = randint(0, 3) // pour le choix de locomotion\n  const dureeQ = couplePremiersEntreEux[indexN][0]\n  const dureeR = couplePremiersEntreEux[indexN][1]\n  const alea2 = randint(0, liste[alea1].vitesse.length - 1) // pour le facteur de distance parcourue\n  const texte = `Un ${liste[alea1].locomotion} parcourt en moyenne $${texNombrec(liste[alea1].vitesse[alea2] * dureeQ * facteur)}$ km en ${dureeQ} heures.\n  <br> Quelle distance va-t-il parcourir, à la même vitesse en ${dureeR} heures ?` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' km' })\n\n  const texteCorr = `Commençons par trouver quelle est la distance parcourue en 1h : <br>\n  1 h, c'est ${texteEnCouleur(dureeQ)} fois moins que ${dureeQ} h. \n   En 1 h, il parcourt donc une distance ${texteEnCouleur(dureeQ)} fois moins grande qu'en ${dureeQ} h.<br>` +\n  `$${texNombrec(liste[alea1].vitesse[alea2] * facteur * dureeQ)}$ km $\\\\div $ ${texteEnCouleur(dureeQ)} = ${texNombrec(liste[alea1].vitesse[alea2] * facteur)} km. <br>` +\n  texteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n  ` En 1h, le ${liste[alea1].locomotion} parcourt donc ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2] * facteur), 'blue')} km. <br>` +\n      ` Cherchons maintenant la distance parcourue en ${dureeR} h : <br>` +\n  ` ${dureeR} h, c'est ${texteEnCouleur(dureeR)} fois 1 h.` +\n  ` Il parcourt donc ${texteEnCouleur(dureeR)} fois plus de distance qu'en 1 h :` +\n  `<br> ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2] * facteur), 'blue')} $\\\\times$ ${texteEnCouleur(dureeR)} = $${texNombrec(liste[alea1].vitesse[alea2] * dureeR * facteur)}$.<br>` +\n  `${texteEnCouleurEtGras('Conclusion :', 'black')} Le ${liste[alea1].locomotion} parcourra donc en moyenne $${texNombrec(liste[alea1].vitesse[alea2] * dureeR * facteur)}$ km en ${dureeR} h.`\n  setReponse(exo, i, calcul(liste[alea1].vitesse[alea2] * dureeR * facteur))\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionEchelle (exo, i) { // X cm sur une carte correspond à x km dans la réalité...\n  const distanceCarte = couplePremiersEntreEux[indexN][0] // Choix d'un nombre de cm sur la carte\n  let distanceReel = distanceCarte * randint(2, 5) // Choix d'un nombre de km dans la réalité (on évite d'avoir 1cm pour 1km)\n  if (!versionSimplifiee) distanceReel *= randint(1, 19, [10]) / 10\n  const distanceCarte2 = couplePremiersEntreEux[indexN][1]\n  const prenoms = [prenomF(), prenomM()]\n  const texte = `Sur une carte sur laquelle ${distanceCarte} cm représente ${texNombrec(distanceReel)} km dans la réalité, <br>\n  ${prenoms[0]} mesure sont trajet, elle trouve une distance de ${distanceCarte2} cm. <br>` +\n  'A quelle distance cela correspond dans la réalité ?' + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' km' })\n\n  const texteCorr = `Commençons par trouver 1 cm sur la carte correspond à combien de km dans la réalité : <br>\n  1 cm, c'est ${texteEnCouleur(distanceCarte)} fois moins que ${distanceCarte} cm.<br>` +\n  `${texNombrec(distanceReel)} km $\\\\div $ ${texteEnCouleur(distanceCarte)} = ${texNombrec(distanceReel / distanceCarte)} km. <br>` +\n  texteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n  ` 1 cm sur la carte correspond donc à ${texteEnCouleur(texNombrec(distanceReel / distanceCarte), 'blue')} km dans la réalité. <br>` +\n      ' Cherchons maintenant la distance réelle de son trajet : <br>' +\n  ` ${distanceCarte2} cm, c'est ${texteEnCouleur(distanceCarte2)} fois 1 cm.` +\n  `<br> ${texteEnCouleur(texNombrec(distanceReel / distanceCarte), 'blue')} km $\\\\times$ ${texteEnCouleur(distanceCarte2)} = ${texNombrec(distanceCarte2 * distanceReel / distanceCarte)} km.<br>` +\n  `${texteEnCouleurEtGras('Conclusion :', 'black')} Son trajet correspond en réalité à une distance de ${texNombrec(distanceCarte2 * distanceReel / distanceCarte)} km.`\n  setReponse(exo, i, calcul(distanceCarte2 * distanceReel / distanceCarte))\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecouvrirSurface (exo, i) { // peinture, gazon, carrelage pour une surface donnée.\n  const liste = [\n    {\n      matiere: 'de la peinture',\n      unite: 'L',\n      qtt_matiere_unitaire: [0.5, 1, 1.5, 2], // quantité au m²\n      qtt_surface: [2, 3, 5] // nombre de m² indiqués sur l'emballage\n    },\n    {\n      matiere: 'du gazon',\n      unite: 'kg',\n      qtt_matiere_unitaire: [2.5, 3, 5, 10],\n      qtt_surface: [30, 40, 50]\n    },\n    {\n      matiere: 'du carrelage',\n      unite: 'carreaux',\n      qtt_matiere_unitaire: [25, 30, 50, 100],\n      qtt_surface: [1, 2, 4]\n    }\n  ]\n  let alea1\n  if (versionSimplifiee) alea1 = liste.length - 1 // Pour avoir un coef entier, la qtt_matiere_unitaire doit être plus grande que la surface, ce qui ne se trouve que dans le carrelage\n  else alea1 = randint(0, liste.length - 1)\n  const alea2 = randint(0, liste[alea1].qtt_matiere_unitaire.length - 1)\n  const alea3 = randint(0, liste[alea1].qtt_surface.length - 1)\n  const rapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5] // choix parmi des rapports simples (en 6eme cela parrait suffisant)\n  const alea4 = randint(0, rapport.length - 1)\n  let quantite, surfaceFinale, surfaceInitiale\n  if (versionSimplifiee) {\n    surfaceInitiale = couplePremiersEntreEux[indexN][0]\n    quantite = surfaceInitiale * randint(2, 5)\n    surfaceFinale = couplePremiersEntreEux[indexN][1]\n  } else {\n    surfaceInitiale = liste[alea1].qtt_surface[alea3]\n    quantite = liste[alea1].qtt_matiere_unitaire[alea2]\n    surfaceFinale = calcul(rapport[alea4] * liste[alea1].qtt_surface[alea3])\n  }\n  const prenoms = [prenomF(), prenomM()]\n  const qttaffichage = texNombrec(quantite) // Pour affichage avec virgule en séparateur.\n  const texte = `${prenoms[0]} doit acheter ${liste[alea1].matiere}. <br>` +\n  `Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${texNombrec(surfaceInitiale)} m$^2$ <br> ` +\n  `Combien doit-elle en acheter pour une surface de ${texNombrec(surfaceFinale)} m$^2$ ?` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' ' + liste[alea1].unite })\n\n  const texteCorr = `Commençons par trouver combien de ${liste[alea1].unite} faut-il prévoir pour 1 m$^2$ : <br>\n  1 m$^2$, c'est ${texteEnCouleur(texNombrec(surfaceInitiale))} fois moins que ${texNombrec(surfaceInitiale)} m$^2$.<br>` +\n  `${qttaffichage} ${liste[alea1].unite} $\\\\div $ ${texteEnCouleur(texNombrec(surfaceInitiale))} = ${texNombrec(quantite / surfaceInitiale)} ${liste[alea1].unite}. <br>` +\n  texteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n  ` On a donc besoin de ${texteEnCouleur(texNombrec(quantite / surfaceInitiale), 'blue')} ${liste[alea1].unite} pour recouvrir 1 m$^2$ . <br>` +\n      ` Cherchons maintenant la quantité de ${liste[alea1].unite} nécessaire pour recouvrir ${texNombrec(surfaceFinale)} m$^2$ : <br>` +\n  ` ${texNombrec(surfaceFinale)} m$^2$, c'est ${texteEnCouleur(texNombrec(surfaceFinale))} fois plus que 1 m$^2$.` +\n  `<br> ${texteEnCouleur(texNombrec(quantite / surfaceInitiale), 'blue')} ${liste[alea1].unite} $\\\\times$ ${texteEnCouleur(texNombrec(surfaceFinale))} = ${texNombrec(quantite * surfaceFinale / surfaceInitiale)} ${liste[alea1].unite}.<br>` +\n  `${texteEnCouleurEtGras('Conclusion :', 'black')} Elle aura donc besoin de ${texNombrec(quantite * surfaceFinale / surfaceInitiale)} ${liste[alea1].unite} pour recouvrir ${texNombrec(surfaceFinale)} m$^2$.`\n  setReponse(exo, i, calcul(quantite * surfaceFinale / surfaceInitiale))\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\n// _______ Fin des fonctions correspondants aux situations problèmes _____\n\nexport default function ProportionnaliteParCoefDeProportionnalite () {\n  'use strict'\n  let question\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Répondre aux questions posées en justifiant'\n  context.isHtml ? (this.spacing = 2) : (this.spacing = 1)\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n  this.nbQuestions = 6\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.besoinFormulaireCaseACocher = ['Version simplifiée ne comportant que des nombres entiers']\n  this.sup = false\n  this.interactif = true\n  this.besoinFormulaire2Texte = ['Types de questions', 'Nombres séparés par des tirets\\n1 : Achat.\\n2 : Recette.\\n3 : Dilution.\\n4 : Distance.\\n5 : Echelle.\\n6 : Surface.']\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeIndexSituationsDisponible = []\n    if (!this.sup2) { // Si aucune liste n'est saisie\n      listeIndexSituationsDisponible = [1, 2, 3, 4, 5, 6]\n    } else {\n      if (typeof (this.sup2) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        listeIndexSituationsDisponible[0] = this.sup2\n      } else {\n        listeIndexSituationsDisponible = this.sup2.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    const listeIndexSituations = combinaisonListes(listeIndexSituationsDisponible, this.nbQuestions)\n    let cpt = 0\n    for (let i = 0; i < this.nbQuestions && cpt < 50;) {\n      indexN = randint(0, couplePremiersEntreEux.length - 1)\n      if (this.sup) {\n        versionSimplifiee = true\n      } else {\n        versionSimplifiee = false\n      }\n      switch (parseInt(listeIndexSituations[i])) {\n        case 1:\n          question = questionAchat(this, i)\n          break\n        case 2:\n          question = questionRecette(this, i)\n          break\n        case 3:\n          question = questionDillution(this, i)\n          break\n        case 4:\n          question = questionDistance(this, i)\n          break\n        case 5:\n          question = questionEchelle(this, i)\n          break\n        case 6:\n          question = questionRecouvrirSurface(this, i)\n          break\n      }\n      if (this.questionJamaisPosee(i, listeIndexSituations[i], this.autoCorrection[i].reponse.valeur, this.autoCorrection[i].enonce)) { // Si la question n'a jamais été posée, on la garde.\n        this.listeQuestions.push(question.qtexte)\n        this.listeCorrections.push(question.qtexteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","indexN","versionSimplifiee","couplePremiersEntreEux","questionAchat","exo","i","listeDeChoses","listeDeChose","listeDePrixUnit","index1","randint","prenoms","prenomF","prenomM","index2","length","objet","pu","n","y","x","calcul","p","met","texte","texPrix","ajouteChampTexteMathLive","texteApres","texteCorr","texteEnCouleur","texteEnCouleurEtGras","setReponse","qtexte","qtexteCorr","questionRecette","liste","ingredient","recettes","quantites_par_pers","nbPersonneInit","nbPersonneFinal","alea1","alea2","alea3","quantite","quantiteReponse","texNombrec","questionDillution","uniteSolvantVolumeFinal","solute","volumeUnitaire","unite_solute","unite_solvant","volumeInitial","volumeFinal","volumeFinalAff","volumeInitialAff","questionDistance","locomotion","vitesse","facteur","dureeQ","dureeR","questionEchelle","distanceCarte","distanceReel","distanceCarte2","questionRecouvrirSurface","matiere","unite","qtt_matiere_unitaire","qtt_surface","rapport","alea4","surfaceFinale","surfaceInitiale","qttaffichage","ProportionnaliteParCoefDeProportionnalite","question","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","besoinFormulaireCaseACocher","sup","interactif","besoinFormulaire2Texte","nouvelleVersion","listeQuestions","listeCorrections","listeIndexSituationsDisponible","sup2","split","listeIndexSituations","combinaisonListes","cpt","parseInt","questionJamaisPosee","autoCorrection","reponse","valeur","enonce","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}