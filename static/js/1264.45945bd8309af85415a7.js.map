{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3G32-1.js"],"names":["amcReady","amcType","titre","CalculsTrigonometriques1","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","spacingCorr","spacing","nouvelleVersion","alpha","O","H","M","R","R2","Axe","normalV","normalH","P","HP","Sph","OP","PoleNord","PoleSud","autoCorrection","listeQuestions","listeCorrections","objets","texte","texteCorr","i","cpt","randint","point3d","vecteur3d","arete3d","rotationV3d","context","p2d","nom","z","sphere3d","push","codageAngleDroit","tracePoint","labelPoint","demicercle3d","afficheMesureAngle","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","texNombrec","Math","cos","PI","indexOf","enonce","propositions","statut","feedback","reponse","valeur","round","options","digits","decimals","listeQuestionsToContenu"],"mappings":"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","file":"js/1264.45945bd8309af85415a7.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, texNombrec } from '../../modules/outils.js'\nimport { tracePoint, labelPoint, afficheMesureAngle, codageAngleDroit, mathalea2d } from '../../modules/2d.js'\nimport { point3d, vecteur3d, sphere3d, arete3d, rotationV3d, demicercle3d } from '../../modules/3d.js'\n\nexport const amcReady = true // tant qu'il n'a pas été adapté à la version 2.6\n\nexport const amcType = 3 // type de question AMC\n\nexport const titre = 'Calcul d’un parallèle terrestre'\n\n/**\n * propose de calculer la longueur d'un parallèle terrestre à partir de la latitde\n * @author Jean-Claude Lhote\n * Référence 3G32-1\n*/\nexport default function CalculsTrigonometriques1 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.spacingCorr = 2\n  this.spacing = 2\n  this.amcReady = amcReady\n  this.amcType = amcType\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let alpha; let O; let H; let M; let R; let R2; let Axe; let normalV; let normalH; let P; let HP; let Sph; let OP; let PoleNord; let PoleSud; let objets = []\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n\n      objets = []\n      alpha = randint(30, 60)\n      O = point3d(0, 0, 0, false, 'O')\n      M = point3d(5, 0, 0, true, 'M')\n      PoleNord = point3d(0, 0, 5, false, 'N')\n      PoleSud = point3d(0, 0, -5, false, 'S')\n      R = vecteur3d(O, M)\n      Axe = arete3d(PoleSud, PoleNord)\n      normalV = vecteur3d(0, 0, 1)\n      M = rotationV3d(M, normalV, context.anglePerspective)\n      M.p2d.nom = 'M'\n      normalH = rotationV3d(R, normalV, 90)\n      P = rotationV3d(M, normalH, -alpha)\n      P.p2d.nom = 'P'\n      H = point3d(0, 0, P.z, false)\n      R2 = vecteur3d(H, P)\n      H.p2d.nom = 'H'\n      Sph = sphere3d(O, 5, 1, 3)\n      HP = arete3d(H, P)\n      OP = arete3d(O, P)\n      objets.push(Sph, Axe.p2d, HP.p2d, OP.p2d, codageAngleDroit(P.p2d, H.p2d, O.p2d), tracePoint(H.p2d, P.p2d, O.p2d, M.p2d), labelPoint(H.p2d, P.p2d, O.p2d, M.p2d))\n      objets.push(demicercle3d(H, normalV, R2, 'caché', 'red', 0), demicercle3d(H, normalV, R2, 'visible', 'red', 0))\n      objets.push(arete3d(O, M).p2d)\n      objets.push(afficheMesureAngle(M.p2d, O.p2d, P.p2d, 'black', 1.5, `${alpha}`))\n      texte = mathalea2d({ xmin: -8, ymin: -6, xmax: 8, ymax: 6, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n      texte += `Quelle est la longueur du $${alpha}$e parallèle Nord ?`\n      texteCorr = mathalea2d({ xmin: -8, ymin: -6, xmax: 8, ymax: 6, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n      texteCorr += `Considérons que le $${alpha}$e parallèle Nord est un cercle. Soit $H$ le centre de ce cercle situé sur l'axe de rotation de la terre.<br>`\n      texteCorr += 'Les segments $[HP]$ et $[OM]$ sont parallèles, donc les angles alternes-internes $\\\\widehat{MOP}$ et $\\\\widehat{OPH}$ sont égaux.<br>'\n      texteCorr += 'Dans le triangle $OPH$ rectangle en $H$, $\\\\cos(\\\\widehat{OPH})=\\\\dfrac{HP}{OP}$ d\\'où $HP=OP\\\\times \\\\cos(\\\\widehat{OPH})$.<br>'\n      texteCorr += 'Le rayon de la terre étant approximativement de $6400$ km, nous pouvons calculer $HP$ :<br>'\n      texteCorr += `$HP=6400\\\\times \\\\cos(${alpha})\\\\approx ${texNombrec(6400 * Math.cos(alpha * Math.PI / 180))}$ km.<br>`\n      texteCorr += `Calculons maintenant la longueur $L$ du $${alpha}$e parallèle : $L\\\\approx 2\\\\times \\\\pi\\\\times ${texNombrec(6400 * Math.cos(alpha * Math.PI / 180))}\\\\approx ${texNombrec(2 * Math.PI * 6400 * Math.cos(alpha * Math.PI / 180))}$ km.<br>`\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        // Pour AMC question AmcOpen\n        this.autoCorrection[i] = { enonce: texte, propositions: [{ texte: texteCorr, statut: 3, feedback: '' }], reponse: { texte: 'Longueur arrondie au km près', valeur: Math.round(2 * Math.PI * 6400 * Math.cos(alpha * Math.PI / 180)), options: { digits: 0, decimals: 0 } } }\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n"],"sourceRoot":""}