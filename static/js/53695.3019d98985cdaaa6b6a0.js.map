{"version":3,"file":"js/53695.3019d98985cdaaa6b6a0.js","mappings":"4GAMe,SAASA,IAItBC,KAAKC,MAAQ,GACbD,KAAKE,YAAa,EAclBF,KAAKG,SAAW,GAChBH,KAAKI,mBAAqB,GAC1BJ,KAAKK,aAAe,GACpBL,KAAKM,eAAiB,GACtBN,KAAKO,iBAAmB,GACxBP,KAAKQ,QAAU,GACfR,KAAKS,kBAAoB,GACzBT,KAAKU,eAAiB,GACtBV,KAAKW,sBAAwB,GAK7BX,KAAKY,QAAU,EACfZ,KAAKa,YAAc,EAKnBb,KAAKc,mBAAoB,EACzBd,KAAKe,cAAgB,GACrBf,KAAKgB,oBAAqB,EAC1BhB,KAAKiB,uBAAwB,EAC7BjB,KAAKkB,OAAS,EACdlB,KAAKmB,WAAa,EAClBnB,KAAKoB,kBAAmB,EACxBpB,KAAKqB,sBAAuB,EAC5BrB,KAAKsB,mBAAoB,EACzBtB,KAAKuB,uBAAwB,EAM7BvB,KAAKwB,QAAS,EACdxB,KAAKyB,gBAAkB,EAKvBzB,KAAK0B,YAAc,GACnB1B,KAAK2B,mBAAqB,EAC1B3B,KAAK4B,+BAAgC,EACrC5B,KAAK6B,qBAAsB,EAC3B7B,KAAK8B,oBAAqB,EAC1B9B,KAAK+B,MAAQ,GAEb/B,KAAKgC,YAAa,EAClBhC,KAAKiC,uBAAwB,EAE7BjC,KAAKkC,2BAA4B,EACjClC,KAAKmC,uBAAwB,EAC7BnC,KAAKoC,6BAA8B,EAEnCpC,KAAKqC,4BAA6B,EAClCrC,KAAKsC,wBAAyB,EAC9BtC,KAAKuC,8BAA+B,EAEpCvC,KAAKwC,4BAA6B,EAClCxC,KAAKyC,wBAAyB,EAC9BzC,KAAK0C,8BAA+B,EAEpC1C,KAAK2C,4BAA6B,EAClC3C,KAAK4C,wBAAyB,EAC9B5C,KAAK6C,8BAA+B,EAMpC7C,KAAK8C,cAAe,EASpB9C,KAAK+C,eAAiB,GAMtB/C,KAAKgD,gBAAkB,SAAUC,KAQjCjD,KAAKkD,oBAAsB,SAAUC,KAAMC,GAC/B,IAAND,IAASnD,KAAK+C,eAAiB,IACnC,IAAIM,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIxD,KAAK+C,eAAeU,QAAQJ,IAAmB,KAGjDrD,KAAK+C,eAAeW,KAAKL,IAClB,I,gPC7Hb,MAAMM,EAAS,CACdC,wBAAyB,IAGpBC,EAAe,CACnB,IAAK,UACL,IAAK,UACL,IAAK,WACL,IAAK,UAGDC,EAAuB,CAC3B,IAAK,WACL,IAAK,eACL,KAAM,2BACN,IAAK,YACL,KAAM,yBAsBR,SAASC,EAAeC,GACtB,OAAOA,EAAKC,QAAOD,GAAQA,EAAKE,cAGlC,SAASC,EAAkBC,GACzB,GAAIA,EAAKC,QACP,OAAON,EAAeK,EAAKC,SAExB,GAAID,EAAKE,YAAa,CAGzB,MAAO,IAFuBP,EAAeK,EAAKE,YAAYC,aAC/BR,EAAeK,EAAKE,YAAYE,YAGjE,OAAO,KAGF,SAASC,EAAkBL,GAChC,GAAIA,EAAKM,QACP,OAAOX,EAAeK,EAAKM,SAExB,GAAIN,EAAKO,YAAa,CAGzB,MAAO,IAFuBZ,EAAeK,EAAKO,YAAYJ,aAC/BR,EAAeK,EAAKO,YAAYH,YAGjE,OAAO,KAGT,SAASI,EAAcC,EAAOC,GAAW,GAEvCD,EAAME,SAAQf,IAAUA,EAAKE,iBAAcX,KAE3C,IAAIyB,EAAUH,EAAMI,KAAIjB,GAAQA,EAAKkB,UAKrC,OAJKJ,IACHE,EAAU,IAAI,IAAIG,IAAIH,KAGD,IAAnBA,EAAQI,OACH,GAEmB,IAAnBJ,EAAQI,OACRJ,EAAQ,GAGP,GAAEA,EAAQK,MAAM,GAAI,GAAGC,KAAK,uBAAuBN,EAAQK,OAAO,KA7D9E1B,EAAO4B,aAAe,SAASnB,GAC7B,KAAMA,EAAKoB,cAAc7B,EAAOC,yBAI9B,OADD6B,QAAQC,MAAMtB,EAAKoB,WAAa,qCACxBpB,EAAKoB,WAId,IAAIG,GAAoB/B,EADQD,EAAOC,wBAAwBQ,EAAKoB,aACpBpB,GAChD,OAAKuB,GACK,UAAShC,EAAOiC,WAAWxB,EAAKoB,gBAuD5C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAM0B,EAAW3B,EAAkBC,GACnC,GAAwB,IAApB0B,EAASV,OACX,OAAO,KAGT,MAAMW,EAAUD,EAAS,GACzB,IAAKE,IAAAA,WAAoBD,EAAS,OAChC,OAAO,KAIT,MAAQ,uCADOA,EAAQ3C,KAAK,GAAG8B,WAKjCvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,wBAAsC,SAASzB,GAC5E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAgBa,EAASb,SAAWU,EAASV,OACxD,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAgBa,EAASb,SAAWU,EAASV,OACxD,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,eAA6B,SAASzB,GACnE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,IAAyB,MAAdA,EAAOC,IAAcD,EAAO9C,KAAKgC,OAAS,EAC5E,OAAO,KAKT,MAAQ,gBAFOR,EAAcsB,EAAO9C,MAAM,uBAC5B6C,EAAS,GAAGf,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,sBAAoC,SAASzB,GAC1E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,IAAyB,MAAdA,EAAOC,GACzC,OAAO,KAKT,MAAQ,gBAFOvB,EAAcsB,EAAO9C,MAAM,uBAC5B6C,EAAS,GAAGf,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GAEvE,MAAMgC,EAAY3B,EAAkBL,GACpC,GAAyB,IAArBgC,EAAUhB,OACZ,OAAO,KAIT,MAAQ,gBADKgB,EAAU,GAAGlB,kCAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GACvE,MAAM0B,EAAW3B,EAAkBC,GACnC,GAAwB,IAApB0B,EAASV,OACX,OAAO,KAIT,MAAQ,kCADOR,EAAckB,MAK/BnC,EAAOC,wBAAwBiC,EAAAA,YAAAA,iBAA+B,SAASzB,GACrE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,0BAAwC,SAASzB,GAC9E,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,aAA2B,SAASzB,GACjE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,cAA4B,SAASzB,GAClE,MAAM0B,EAAW3B,EAAkBC,GACnC,GAAwB,IAApB0B,EAASV,OACX,OAAO,KAIT,MAAQ,mBADOR,EAAckB,kDAK/BnC,EAAOC,wBAAwBiC,EAAAA,YAAAA,gCAA8C,SAASzB,GACpF,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GACvE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,6BAA2C,SAASzB,GACjF,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,mBAFOR,EAAckB,mBACflB,EAAcqB,mDAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,oCAAkD,SAASzB,GACxF,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,YAA0B,SAASzB,GAChE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,yBAAuC,SAASzB,GAC7E,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,8BAA4C,SAASzB,GAClF,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,mBAFOR,EAAckB,4CACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,wBAAsC,SAASzB,GAC5E,MAAMgC,EAAY3B,EAAkBL,GACpC,GAAyB,IAArBgC,EAAUhB,OACZ,OAAO,KAIT,MAAQ,iCADKgB,EAAU,GAAGlB,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,0BAAwC,SAASzB,GAC9E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,GAFOR,EAAckB,iCACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,iBAA+B,SAASzB,GACrE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,GAFOR,EAAckB,gCACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,+BAA6C,SAASzB,GACnF,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAgBa,EAASb,OAASU,EAASV,QAAUa,EAASb,OAAS,EAClF,OAAO,KAKT,MAAQ,mBAFOR,EAAckB,wCACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,yCAAuD,SAASzB,GAC7F,MAAMgC,EAAY3B,EAAkBL,GACpC,GAAyB,IAArBgC,EAAUhB,OACZ,OAAO,KAIT,MAAQ,+CADKgB,EAAU,GAAGlB,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,qCAAmD,SAASzB,GACzF,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,GAAU,mBACzBlB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,kBAAgC,SAASzB,GACtE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,uBAAqC,SAASzB,GAC3E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,IAAyB,MAAdA,EAAOC,GACzC,OAAO,KAKT,MAAQ,sCAFOvB,EAAckB,GAAU,uBACzBG,EAAS,GAAGf,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,uBAAqC,SAASzB,GAC3E,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,IAAyB,MAAdA,EAAOC,GACzC,OAAO,KAKT,MAAQ,qBAFOvB,EAAcsB,EAAO9C,MAAM,uBAC5B6C,EAAS,GAAGf,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,2BAAyC,SAASzB,GAC/E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,IAAyB,MAAdA,EAAOC,GACzC,OAAO,KAKT,MAAQ,qBAFOvB,EAAcsB,EAAO9C,MAAM,uBAC5B6C,EAAS,GAAGf,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,wBAAsC,SAASzB,GAC5E,MAAMgC,EAAY3B,EAAkBL,GACpC,GAAyB,IAArBgC,EAAUhB,OACZ,OAAO,KAIT,MAAQ,mCADKgB,EAAU,GAAGlB,WAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,WAAyB,WACtD,OAAO,MAITlC,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAM0B,EAAW3B,EAAkBC,GACnC,GAAwB,IAApB0B,EAASV,OACX,OAAO,KAIT,MAAQ,6BADOR,EAAckB,MAK/BnC,EAAOC,wBAAwBiC,EAAAA,YAAAA,iBAA+B,SAASzB,GACrE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,yBAAuC,SAASzB,GAC7E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,uBAAqC,SAASzB,GAC3E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,wBAAsC,SAASzB,GAC5E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,oCAAkD,SAASzB,GACxF,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,2BAAyC,SAASzB,GAC/E,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,sBAAoC,SAASzB,GAC1E,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAGT,MAAMc,EAASJ,EAAS,GACxB,IAAKE,IAAAA,WAAoBE,KAA2C,IAAhC,QAAQzC,QAAQyC,EAAOC,IACzD,OAAO,KAGT,MAAME,EAASzB,EAAcsB,EAAO9C,MAAM,GACpCkD,EAAQL,EAAS,GAAGf,QAC1B,MAAQ,UAASrB,EAAaqC,EAAOC,SAASE,sBAA2BC,KAI3E3C,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GACvE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GACvE,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAoC,IAApBa,EAASb,OACpC,OAAO,KAKT,MAAQ,qBAFOR,EAAckB,mBACflB,EAAcqB,MAK9BtC,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,qBAAmC,SAASzB,GACzE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,gBAA8B,SAASzB,GACpE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,oBAAkC,SAASzB,GACxE,MAAMmC,EAAanC,EAAKO,YAAY4B,WACpC,MAAQ,+BAA8BzC,EAAqByC,sBAI7D5C,EAAOC,wBAAwBiC,EAAAA,YAAAA,mBAAiC,SAASzB,GACvE,MAAMmC,EAAanC,EAAKO,YAAY4B,WACpC,MAAQ,2BAA0BzC,EAAqByC,sBAIzD5C,EAAOC,wBAAwBiC,EAAAA,YAAAA,0BAAwC,SAASzB,GAC9E,MAAMgC,EAAY3B,EAAkBL,GACpC,GAAyB,IAArBgC,EAAUhB,OACZ,OAAO,KAIT,MAAQ,qBADKgB,EAAU,GAAGlB,oCAK5BvB,EAAOC,wBAAwBiC,EAAAA,YAAAA,YAA0B,SAASzB,GAChE,MAAQ,UAAST,EAAOiC,WAAWxB,EAAKoB,gBAI1C7B,EAAOC,wBAAwBiC,EAAAA,YAAAA,6BAA2C,SAASzB,GACjF,MAAM0B,EAAW3B,EAAkBC,GAC7B6B,EAAWxB,EAAkBL,GACnC,GAAwB,IAApB0B,EAASV,QAAgBa,EAASb,SAAWU,EAASV,OACxD,OAAO,KAKT,MAAQ,oBAFOR,EAAckB,mBACflB,EAAcqB,MAI9BtC,EAAOiC,WAAa,CAClBY,eAAgB,0BAChBC,uBAAwB,0CACxBC,oBAAqB,wCACrBC,cAAe,6BACfC,eAAgB,iCAChBC,qBAAsB,oCACtBC,kBAAmB,6BACnBC,kBAAmB,wBACnBC,gBAAiB,sBACjBC,yBAA0B,mCAC1BC,eAAgB,wDAChBC,YAAa,kBACbC,aAAc,qDACdC,+BAAgC,iCAChCC,kBAAmB,wBACnBC,mBAAoB,kDACpBC,mBAAoB,mDACpBC,mBAAoB,wDACpBC,mBAAoB,mCACpBC,4BAA6B,4DAC7BC,mCAAoC,sDACpCC,WAAY,kCACZC,wBAAyB,qCACzBC,oBAAqB,qCACrBC,6BAA8B,qDAC9BC,uBAAwB,kCACxBC,yBAA0B,6DAC1BC,gBAAiB,iDACjBC,8BAA+B,iCAC/BC,mBAAoB,2CACpBC,mBAAoB,kCACpBC,oBAAqB,0BACrBC,wCAAyC,qDACzCC,oCAAqC,4BACrCC,oBAAqB,oDACrBC,iBAAkB,wCAClBC,sBAAuB,qCACvBC,sBAAuB,yCACvBC,mBAAoB,kCACpBC,oBAAqB,uCACrBC,0BAA2B,yCAC3BC,uBAAwB,kCACxBC,eAAgB,8BAChBC,UAAW,YACXC,gBAAiB,gDACjBC,sBAAuB,2CACvBC,uBAAwB,+CACxBC,wBAAyB,0CACzBC,mBAAoB,0BACpBC,mCAAoC,gEACpCC,0BAA2B,iDAC3BC,qBAAsB,4CACtBC,oBAAqB,0BACrBC,kBAAmB,gCACnBC,kBAAmB,6EACnBC,mBAAoB,8BACpBC,oBAAqB,+BACrBC,eAAgB,0CAChBC,eAAgB,8BAChBC,mBAAoB,yBACpBC,kBAAmB,wBACnBC,yBAA0B,oCAC1BC,WAAY,aACZC,4BAA6B,wC,wMC7uB/B,MAAMC,IAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GACpBF,GAAKG,OAAO,CACVC,OAAQ,aAIH,MAAM3K,GAAQ,sBAER4K,GAAoB,aAQjC,SAAS3F,GAAOlB,EAAM8G,GAAQ,GA2K5B,OA1KIA,IACFrF,QAAQsF,IAAI,yCAA4C/G,EAAKR,SAAS,CAAEwH,YAAa,UACrFvF,QAAQsF,IAAI,OAAQ/G,IAgGtBA,GAlCAA,GA3DAA,GADAA,GAAOiH,EAAAA,EAAAA,IAAMjH,EAAKR,SAAS,CAAEwH,YAAa,WAC9BE,WACV,SAAUlH,EAAMmH,EAAMC,GAuDpB,OAtDIpH,EAAKqH,gBAA8B,MAAZrH,EAAKmC,KAC1BnC,EAAKZ,KAAK,GAAGkI,oBAAmBtH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,SAC5DvH,EAAKZ,KAAK,GAAGkI,oBAAmBtH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,UAE9DvH,EAAKqH,gBAA8B,MAAZrH,EAAKmC,KAC1BnC,EAAKZ,KAAK,GAAGkI,oBAAmBtH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,SAC5DvH,EAAKZ,KAAK,GAAGkI,oBAAmBtH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,UAE9DvH,EAAKqH,gBAA8B,MAAZrH,EAAKmC,KAC1BnC,EAAKZ,KAAK,GAAGkI,oBAAmBtH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,SAElD,eAAZvH,EAAKwH,IACLxH,EAAKZ,KAAK,GAAGkI,mBACbtH,EAAKZ,KAAK,GAAGmI,QAAQF,iBAES,MAA5BrH,EAAKZ,KAAK,GAAGmI,QAAQpF,IAES,MAA5BnC,EAAKZ,KAAK,GAAGmI,QAAQpF,MAElBnC,EAAKZ,KAAK,GAAGmI,QAAQnI,KAAK,GAAGiI,gBAE5BrH,EAAKZ,KAAK,GAAGmI,QAAQnI,KAAK,GAAGiI,gBACO,eAApCrH,EAAKZ,KAAK,GAAGmI,QAAQnI,KAAK,GAAGoI,OAKrCxH,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,UAE5BvH,EAAKqH,gBAA8B,MAAZrH,EAAKmC,KAC1BnC,EAAKZ,KAAK,GAAGkI,qBAEZtH,EAAKZ,KAAK,GAAGmI,QAAQF,gBACrBrH,EAAKZ,KAAK,GAAGmI,QAAQF,gBAA8C,MAA5BrH,EAAKZ,KAAK,GAAGmI,QAAQpF,MAG/DnC,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,QAC5BvH,EAAKyH,UAAW,GAEdzH,EAAKZ,KAAK,GAAGkI,qBAEZtH,EAAKZ,KAAK,GAAGmI,QAAQF,gBAEpBrH,EAAKZ,KAAK,GAAGmI,QAAQF,gBACO,MAA5BrH,EAAKZ,KAAK,GAAGmI,QAAQpF,MAGzBnC,EAAKZ,KAAK,GAAKY,EAAKZ,KAAK,GAAGmI,QAC5BvH,EAAKyH,UAAW,IAMbzH,MAGCkH,WAAU,SAAUlH,EAAMmH,EAAMC,GAC1C,GACO,iBADCpH,EAAK0H,KAET,OAAQ1H,EAAKmC,IACX,IAAK,IACH,GAAwB,MAApBnC,EAAKZ,KAAK,GAAG+C,GACf,OAAO,IAAIwF,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAIY,EAAKZ,KAAK,GAAGA,KAAK,KACrE,GAAwB,MAApBY,EAAKZ,KAAK,GAAG+C,IAA0C,MAA5BnC,EAAKZ,KAAK,GAAGA,KAAK,GAAG+C,GAAY,CACrE,MAAMyF,EAAQ,IAAID,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAIY,EAAKZ,KAAK,GAAGA,KAAK,KACjG,OAAO,IAAIuI,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAIwI,IACnD,GAAwB,MAApB5H,EAAKZ,KAAK,GAAG+C,GAAY,CAClC,GAAInC,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAA8C,eAA5BrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGoI,GAAqB,CACnF,IAAMxH,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAAoBrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAA8C,eAA5BrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGoI,GAAsB,CAC/H,MAAMK,EAAO,IAAIF,EAAAA,GAAa,IAAK,SAAU,CAAC3H,EAAKZ,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAIY,EAAKZ,KAAK,GAAGA,KAAK,KAC9F,OAAO,IAAIuI,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAIyI,IACnD,OAAO7H,EACT,OAAOA,EACT,OAAOA,EAChB,IAAK,IACH,GAAe,OAAXoH,GAAmBA,EAAOE,mBAAoC,MAAdF,EAAOjF,GAAa,CACtE,GAAInC,EAAKZ,KAAK,GAAGiI,gBAAsC,eAApBrH,EAAKZ,KAAK,GAAGoI,GAAqB,CACnE,IAAMxH,EAAKZ,KAAK,GAAGiI,gBAAoBrH,EAAKZ,KAAK,GAAGiI,gBAAsC,eAApBrH,EAAKZ,KAAK,GAAGoI,GAAsB,CACvG,MAAMK,EAAO,IAAIF,EAAAA,GAAa,IAAK,SAAU,CAAC3H,EAAKZ,KAAK,GAAGA,KAAK,GAAIY,EAAKZ,KAAK,KAC9E,OAAO,IAAIuI,EAAAA,GAAa,IAAK,aAAc,CAACE,IACvC,OAAO7H,EACT,OAAOA,EACT,OAAOA,EAChB,QACE,OAAOA,EAGX,OAAOA,MAGDkH,WAAU,SAAUlH,EAAMmH,EAAMC,GAU1C,GATIN,IACFrF,QAAQsF,IAAI,WAAY/G,EAAKR,WAAY,aAAcQ,GACvDyB,QAAQsF,IAAI,gBAAiB/G,EAAKwH,IACnB,OAAXJ,GAAiB3F,QAAQsF,IAAI,kBAAmBK,EAAOjF,SACzC5C,IAAdS,EAAKZ,MAAoBqC,QAAQsF,IAAI,0BAA2B/G,EAAKZ,KAAK,GAAGsI,WAC/DnI,IAAdS,EAAKZ,MAAsBY,EAAKZ,KAAKgC,OAAS,GAAGK,QAAQsF,IAAI,0BAA2B/G,EAAKZ,KAAK,GAAGsI,WACvFnI,IAAdS,EAAKZ,MAAoBqC,QAAQsF,IAAI,wBAAyB/G,EAAKZ,KAAK,GAAG+C,SAC7D5C,IAAdS,EAAKZ,MAAsBY,EAAKZ,KAAKgC,OAAS,GAAGK,QAAQsF,IAAI,wBAAyB/G,EAAKZ,KAAK,GAAG+C,KAGlG,iBADCnC,EAAK0H,KAET,OAAQ1H,EAAKmC,IACX,IAAK,IACH,MAAwB,eAApBnC,EAAKZ,KAAK,GAAGoI,IACfxH,EAAKZ,KAAK,GAAK,IAAI0I,EAAAA,GAAgB9H,EAAKZ,KAAK,IACtCY,IAGLA,EAAKZ,KAAK,GAAG2I,gBACZ/H,EAAKZ,KAAK,GAAGiI,gBAAsC,MAApBrH,EAAKZ,KAAK,GAAG+C,IAE3CnC,EAAKZ,KAAK,GAAG4I,cACbhI,EAAKZ,KAAK,GAAGiI,qBACY9H,IAAzBS,EAAKZ,KAAK,GAAGA,KAAK,IAClBY,EAAKZ,KAAK,GAAGA,KAAK,GAAG4I,cAGrBhI,EAAKZ,KAAK,GAAG4I,cACbhI,EAAKZ,KAAK,GAAG4I,eAGjBhI,EAAKyH,UAAW,GAEJzH,GAChB,IAAK,IACH,GAAwB,MAApBA,EAAKZ,KAAK,GAAG+C,GACf,OAAO,IAAIwF,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAIY,EAAKZ,KAAK,GAAGA,KAAK,KACrE,GAAwB,MAApBY,EAAKZ,KAAK,GAAG+C,GAAY,CAClC,GAAInC,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAA8C,eAA5BrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGoI,GAAqB,CACnF,IAAMxH,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAAoBrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGiI,gBAA8C,eAA5BrH,EAAKZ,KAAK,GAAGA,KAAK,GAAGoI,GAAsB,CAC/H,MAAMK,EAAO,IAAIF,EAAAA,GAAa,IAAK,SAAU,CAAC3H,EAAKZ,KAAK,GAAGA,KAAK,GAAGA,KAAK,GAAIY,EAAKZ,KAAK,GAAGA,KAAK,KAC9F,OAAO,IAAIuI,EAAAA,GAAa,IAAK,WAAY,CAAC3H,EAAKZ,KAAK,GAAIyI,IACnD,OAAO7H,EACT,OAAOA,EACT,OAAOA,EAChB,IAAK,IACH,GAAe,OAAXoH,GAAmBA,EAAOE,mBAAoC,MAAdF,EAAOjF,GAAa,CACtE,GAAInC,EAAKZ,KAAK,GAAGiI,gBAAsC,eAApBrH,EAAKZ,KAAK,GAAGoI,GAAqB,CACnE,IAAMxH,EAAKZ,KAAK,GAAGiI,gBAAoBrH,EAAKZ,KAAK,GAAGiI,gBAAsC,eAApBrH,EAAKZ,KAAK,GAAGoI,GAAsB,CACvG,MAAMK,EAAO,IAAIF,EAAAA,GAAa,IAAK,SAAU,CAAC3H,EAAKZ,KAAK,GAAGA,KAAK,GAAIY,EAAKZ,KAAK,KAC9E,OAAO,IAAIuI,EAAAA,GAAa,IAAK,aAAc,CAACE,IACvC,OAAO7H,EACT,OAAOA,EACT,OAAOA,EAChB,QACE,OAAOA,EAOX,OAAOA,KAGT8G,IACFrF,QAAQsF,IAAI,uDAAwD/G,EAAKR,YACzEiC,QAAQsF,IAAI,kBAAmB/G,EAAKkB,SACpCO,QAAQsF,IAAI,kCAAmC/G,EAAKkB,MAAM,CAAE8F,YAAa,SAAUiB,WAAW,SAAU,YACxGxG,QAAQsF,IAAI,kBAAmB/G,IAE1BA,EAAKkB,MAAM,CAAE8F,YAAa,SAAUiB,WAAW,SAAU,WAAWA,WAAW,IAAK,OAAOA,WAAW,SAAU,WAGzH,SAASC,GAAyBC,EAAa,kBAAmBC,EAAe,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,GAAI,GAAK1B,GAAQ,GAEpH,OAAO2B,EAAAA,EAAAA,IAASN,EAAY,CAAC,CAAEO,EAAG,MAAOC,EAAG,KAAO,CAAED,EAAG,OAAQC,EAAG,MAAQ,CAAED,EAAG,MAAOC,EAAG,KAAO,CAAED,EAAG,MAAOC,EAAG,KAAO,CAAED,EAAG,MAAOC,EAAG,KAAO,CAAED,EAAG,MAAOC,EAAG,MAAQP,GAGtK,SAASQ,GAA0BC,EAAY,CAAER,GAAG,EAAOC,GAAG,EAAOC,GAAG,EAAMC,EAAG,iCAAkCM,KAAM,kBAAoBhC,GAAQ,GACnJ,MAAMsB,EAAe,GACrB,IAAIW,EAAM,EACND,GAAO,EACX,EAAG,CACDC,IACA,IAAK,MAAMC,KAAKC,OAAOC,KAAKL,GACE,kBAAjBA,EAAUG,GACnBZ,EAAaY,IAAKG,EAAAA,EAAAA,IAAS,2CAA4C,CAAEC,EAAGP,EAAUG,KACvE,SAANA,IACTZ,EAAaY,IAAKG,EAAAA,EAAAA,IAASN,EAAUG,GAAIZ,SAGtB7I,IAAnBsJ,EAAUC,OAAoBA,GAAOK,EAAAA,EAAAA,IAASN,EAAUC,KAAMV,WAC1DU,GAAQC,EAAM,KAExB,OADY,MAARA,GAAcM,OAAOC,OAAO,oGACzBlB,EAGT,SAASmB,GAAiBC,EAAOC,EAAS,IAKxC,OAJAD,EAAMzI,SAAQ,SAAUX,EAAMjB,GAE5B,OAD6B,IAAzBiB,EAAKsJ,SAAStI,QAAcqI,EAAO/J,KAAKU,GACrCmJ,GAAgBnJ,EAAKsJ,SAAUD,MAEjCA,EAGT,SAASE,GAAkBxB,EAAa,UAAWyB,GAAa,EAAO9C,GAAQ,GAC7E,MAAM0C,EAAqBD,GAAbK,GAA6BC,EAAAA,EAAAA,QAAO1B,IAA+B2B,EAAAA,EAAAA,oBAAmB3B,IAChGrB,IACFrF,QAAQsF,IAAI,aACZtF,QAAQsF,IAAIyC,IAEd,IAAIO,EAAa,EACjB,MAAMC,EAAkB,GACxB,IAAIC,EAAkB,GACtBT,EAAMzI,SAAQ,SAAUX,EAAMjB,GAC5B,MAAM+K,EAAa9J,EAAKoB,WACH,OAAjBpB,EAAKC,UACHD,EAAKC,QAAQb,aAAeY,EAAKM,QAAQlB,WACxB,wBAAf0K,IAAsCH,GAAcA,EAAa,GAAK,GAE1EA,EAAa,GAGjB,MAAM1J,EAA2B,OAAjBD,EAAKC,QAAmBa,GAAMd,EAAKC,SAAW,GACxDK,EAAUQ,GAAMd,EAAKM,SACvBoG,IACFrF,QAAQsF,IAAImD,GACZzI,QAAQsF,IAAIrG,EAAQlB,aAEZ,IAANL,IACF8K,EAAmB,GAAE5J,KAEnByG,GAAOrF,QAAQsF,IAAIrG,GACvB,MAAMyJ,EAAqB,CACzB5G,mBAAoB6G,OAAOC,IAAT,QAAa,gCAC/BxF,sBAAuBuF,OAAOC,IAAT,QAAa,sCAClC3H,oBAAqB0H,OAAOC,IAAT,QAAa,gCAChCC,6BAA8BF,OAAOC,IAAT,QAAa,iCAE3C,IAAIE,EAAe,CACjB9G,mBAAoB2G,OAAOC,IAAT,QAAa,wCAC/BtF,oBAAqBqF,OAAOC,IAAT,QAAa,oBAChC7G,mBAAoB4G,OAAOC,IAAT,QAAa,oCAC/BzH,eAAgBwH,OAAOC,IAAT,QAAa,uCAC3B5H,uBAAwB2H,OAAOC,IAAT,QAAa,oCACnC/F,mBAAoB8F,OAAOC,IAAT,QAAa,sCAC/BG,SAAUJ,OAAOC,IAAT,QAAa,kDACrBI,WAAYL,OAAOC,IAAT,QAAa,oCAErBvD,IACFyD,EAAetB,OAAOyB,OAAOH,EAAc,CACzCpE,mBAAoBiE,OAAOC,IAAT,QAAa,gCAC/BjE,kBAAmBgE,OAAOC,IAAT,QAAa,+BAC9BxG,WAAYuG,OAAOC,IAAT,QAAa,wBACvBrE,oBAAqBoE,OAAOC,IAAT,QAAa,0CAChCtE,mBAAoBqE,OAAOC,IAAT,QAAa,0CAC/BhH,+BAAgC+G,OAAOC,IAAT,QAAa,0DAC3CzE,oBAAqBwE,OAAOC,IAAT,QAAa,+BAChCvE,kBAAmBsE,OAAOC,IAAT,QAAa,mCAC9B5E,mCAAoC2E,OAAOC,IAAT,QAAa,6CAC/C7E,mBAAoB4E,OAAOC,IAAT,QAAa,6BAC/B/D,WAAY8D,OAAOC,IAAT,QAAa,qCACvBnH,eAAgBkH,OAAOC,IAAT,QAAa,oCAC3BM,WAAYP,OAAOC,IAAT,QAAa,2CACvBpE,eAAgBmE,OAAOC,IAAT,QAAa,+BAC3B1F,iBAAkByF,OAAOC,IAAT,QAAa,mCAC7B1H,cAAeyH,OAAOC,IAAT,QAAa,qCAC1BtH,kBAAmBqH,OAAOC,IAAT,QAAa,gCAC9BjH,aAAcgH,OAAOC,IAAT,QAAa,8BACzB3E,0BAA2B0E,OAAOC,IAAT,QAAa,oDAGT9K,IAA7BgL,EAAaL,KAA2BK,EAAaL,GAAc,SAChC3K,IAAnC4K,EAAmBD,IAA2BF,EAAgBtK,KAAK0K,OAAOC,IAA5B,QAAgC,KAAhC,gBAAoC3J,EAAiB6J,EAAaL,KAChHpD,GAAOrF,QAAQsF,IAAI,aAAcwD,EAAaL,OAEpD,IAAIU,EAAQR,OAAOC,IAAV,QAAc,eAAd,OAA4BJ,GACrC,MAAMY,EAAYT,OAAOC,IAAV,QAAc,eAAd;;;IAAA;;KAA4BJ,EAGzCA,EAAkBD,EAAgB1I,KAAK,SAIzC,OADIwF,IAAO8D,EAAQC,GACZ,CAAED,MAAOA,EAAOC,UAAWA,GAGpC,SAASC,GAAcC,EAAW,cAAelC,EAAY,CAAER,GAAG,EAAOC,GAAG,EAAOC,GAAG,EAAOC,GAAG,EAAOM,KAAM,eAAiBhC,GAAQ,GACpI,MAAMkE,EAAc,CAAC,KAAM,KAAM,IAAK,IAAK,KACrC5C,EAAeQ,GAAyBC,EAAW/B,GACzD,IAAK,MAAMkC,KAAKC,OAAOC,KAAKd,GAC1BA,EAAaY,IAAKpC,EAAAA,EAAAA,KAAOwB,EAAaY,IAExC,IAAIzG,EACA0I,EACJ,IAAK,IAAI9L,EAAI,EAAGA,EAAI6L,EAAY5J,OAAQjC,IAAK,CAC3C,MAAM+L,EAAmBF,EAAY7L,GACrC8L,EAAQF,EAASI,MAAMD,GACF,IAAjBD,EAAM7J,SACRmB,EAAa2I,GAGjBD,EAAQF,EAASI,MAAM5I,GACvB,MAAMhC,EAAW2H,GAAwB+C,EAAM,GAAI7C,EAActB,GAAOtH,WAClEgB,EAAY0H,GAAwB+C,EAAM,GAAI7C,EAActB,GAAOtH,WAIzE,OAHIsH,GACFrF,QAAQsF,IAAI,yBAA2B,GAAExG,IAAWgC,IAAa/B,KAE3D,GAAED,IAAWgC,IAAa/B,IAGpC,SAAS4K,GAAkBL,EAAW,gBAAiBjE,GAAQ,GAC7D,MAAMkE,EAAc,CAAC,KAAM,KAAM,IAAK,IAAK,KAC3C,IAAIzI,EACA0I,EAUAI,EATJ,IAAK,IAAIlM,EAAI,EAAGA,EAAI6L,EAAY5J,OAAQjC,IAAK,CAC3C,MAAM+L,EAAmBF,EAAY7L,GACrC8L,EAAQF,EAASI,MAAMD,GACF,IAAjBD,EAAM7J,SACRmB,EAAa2I,GAGjBD,EAAQF,EAASI,MAAM5I,GAGvB,MAAMiH,GAAQ8B,EAAAA,EAAAA,eAAcP,GACxBjE,IACFrF,QAAQsF,IAAI,aACZtF,QAAQsF,IAAIyC,IAEd,MAAM+B,EAAmB,GACzB,IAAIxB,EAAa,EACjBP,EAAMzI,SAAQ,SAAUX,EAAMjB,GAC5B,MAAM+K,EAAa9J,EAAKoB,WACC,OAArBpB,EAAKE,cACHF,EAAKE,YAAYC,SAASf,aAAeY,EAAKO,YAAYJ,SAASf,YAAcY,EAAKE,YAAYE,UAAUhB,aAAeY,EAAKO,YAAYH,UAAUhB,WACrI,wBAAf0K,IAAsCH,GAAcA,EAAa,GAAK,GAE1EA,EAAa,GAOjB,MAAMyB,EAAmC,OAArBpL,EAAKE,YAAuBY,GAAMd,EAAKE,YAAYC,UAAY,GACnF,IAAIkL,EAAcvK,GAAMd,EAAKO,YAAYJ,UACzC,MAAMmL,EAAoC,OAArBtL,EAAKE,YAAuBY,GAAMd,EAAKE,YAAYE,WAAa,GACrF,IAAImL,EAAezK,GAAMd,EAAKO,YAAYH,WACtCsG,IACFrF,QAAQsF,IAAImD,GACZzI,QAAQsF,IAAI0E,EAAYjM,WAAaY,EAAKO,YAAY4B,WAAaoJ,EAAanM,aAExE,IAANL,IACFkM,EAAiB,GAAEG,IAAcpL,EAAKO,YAAY4B,aAAamJ,KAEjE,MAAME,EAAuB,IAAf7B,EAAmB,QAAU,MAC3C0B,EAAe,YAAWG,KAASH,EAAYI,QAAQL,EAAc,kBAAiBA,SACtFG,EAAgB,YAAWC,KAASD,EAAaE,QAAQH,EAAe,kBAAiBA,SACrF5E,GAAOrF,QAAQsF,IAAI0E,EAAcrL,EAAKO,YAAY4B,WAAaoJ,GACnE,MAAMG,EAAarL,EAAkBL,GAAMgB,OAAS,EAAIF,IAAM+F,EAAAA,EAAAA,IAAMxG,EAAkBL,GAAM,GAAGZ,WAAY,CAAEwH,YAAa,UAAa,GACvI,IAAIuD,EAAe,CACjB9F,oCAAqC2F,OAAOC,IAAT,UAAa,8CAChDhE,yBAA0B+D,OAAOC,IAAT,UAAa,qBAAb,4BAAiCyB,GACzDhJ,kBAAmBsH,OAAOC,IAAT,UAAa,kBAAb,4BAA8ByB,GAC/C7G,uBAAwBmF,OAAOC,IAAT,UAAa,uCAAb,KAAmDyB,GACzE7H,uBAAwBmG,OAAOC,IAAT,UAAa,oCAAb,KAAgDyB,GACtEtH,wCAAyC4F,OAAOC,IAAT,UAAa,uCAAb,KAAmDyB,IAExFhF,IACFyD,EAAetB,OAAOyB,OAAOH,EAAc,CACzCpE,mBAAoBiE,OAAOC,IAAT,UAAa,gCAC/BjE,kBAAmBgE,OAAOC,IAAT,UAAa,+BAC9BxG,WAAYuG,OAAOC,IAAT,UAAa,wBACvBrE,oBAAqBoE,OAAOC,IAAT,UAAa,0CAChCtE,mBAAoBqE,OAAOC,IAAT,UAAa,0CAC/BhH,+BAAgC+G,OAAOC,IAAT,UAAa,0DAC3CzE,oBAAqBwE,OAAOC,IAAT,UAAa,+BAChCvE,kBAAmBsE,OAAOC,IAAT,UAAa,mCAC9B5E,mCAAoC2E,OAAOC,IAAT,UAAa,6CAC/C7E,mBAAoB4E,OAAOC,IAAT,UAAa,6BAC/B/D,WAAY8D,OAAOC,IAAT,UAAa,qCACvBnH,eAAgBkH,OAAOC,IAAT,UAAa,oCAC3BM,WAAYP,OAAOC,IAAT,UAAa,2CACvBpE,eAAgBmE,OAAOC,IAAT,UAAa,+BAC3B1F,iBAAkByF,OAAOC,IAAT,UAAa,mCAC7B1H,cAAeyH,OAAOC,IAAT,UAAa,qCAC1BtH,kBAAmBqH,OAAOC,IAAT,UAAa,gCAC9BjH,aAAcgH,OAAOC,IAAT,UAAa,8BACzB3E,0BAA2B0E,OAAOC,IAAT,UAAa,oDAGT9K,IAA7BgL,EAAaL,KAA2BK,EAAaL,GAAc,IACpD,IAAfH,GACFA,EAAa,EACbwB,EAAiBQ,MACE,uBAAf7B,GAAqCqB,EAAiB7L,KAAK0K,OAAOC,IAA7B,UAAiC,GAAjC,oBAAmCoB,EAAerL,EAAKO,YAAY4B,WAAaoJ,EAAiBpB,EAAaL,MAEpI,uBAAfA,GAAqCqB,EAAiB7L,KAAK0K,OAAOC,IAA7B,UAAiC,GAAjC,oBAAmCoB,EAAerL,EAAKO,YAAY4B,WAAaoJ,EAAiBpB,EAAaL,KAErJpD,GAAOrF,QAAQsF,IAAI,aAAcwD,EAAaL,OAEpD,IAAIU,EAAQR,OAAOC,IAAV,UAAc,aAAd,OAA0BgB,GACnC,MAAMR,EAAYT,OAAOC,IAAV,UAAc,aAAd;;;IAAA;;KAA0BgB,EAGvCE,EAAiBjK,KAAK,SAIxB,OADIwF,IAAO8D,EAAQC,GACZ,CAAED,MAAOA,EAAOC,UAAWA,GAGpC,SAASmB,GAAiBC,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAOC,EAAcpF,GAAQ,GACzJ,MAAMqF,EAAQ1D,EAAAA,GAAAA,MACd0D,EAAM,IAAM,CAAEzD,EAAG,IAAKC,EAAG,KACzBwD,EAAM,IAAM,CAAEzD,EAAG,IAAKC,EAAG,KAEzB,MAAME,EAAY,GAClBA,EAAUuD,UAAYnD,OAAOoD,OAAOJ,GACpC,MAAMG,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MACrGjK,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5EmK,EAAU,CACd,MAAO,WAAY,WAAY,SAC/B,MACA,MAAO,MACP,WAAY,WACZ,MAAO,WACP,MAAO,WACP,WAAY,UACRC,EAAa,CACjBC,IAAK,WACLC,SAAU,MACVC,SAAU,SACVC,OAAQ,YAEJC,EAAe,CACnBJ,IAAK,IACLC,SAAU,IACVC,SAAU,IACVC,OAAQ,KAEJE,EAAe,CACnB,WAAY,cAAe,kBAAmB,eAC9C,kBACA,qCAAsC,qCACtC,wCAAyC,wCACzC,oCAAqC,uCACrC,2BAA4B,8BAC5B,kCAAmC,gCAE/BC,EAAkB,CACtB,cAAe,WAAY,eAAgB,kBAC3C,0BACA,wCAAyC,wCACzC,qCAAsC,qCACtC,uCAAwC,oCACxC,8BAA+B,2BAC/B,+BAAgC,mCAE5BC,EAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7CC,EAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChDnE,EAAUyD,QAAUrD,OAAOoD,OAAOxD,EAAUuD,WAC5CvD,EAAUgE,aAAe5D,OAAOoD,OAAOxD,EAAUuD,WACjDvD,EAAUiE,gBAAkB7D,OAAOoD,OAAOxD,EAAUuD,WACpDvD,EAAU1G,GAAK8G,OAAOoD,OAAOxD,EAAUuD,WACvCvD,EAAUyD,QAAQvL,SAAQ,SAAUqI,EAAGjK,GACrC0J,EAAUyD,QAAQnN,GAAKmN,EAAQF,EAAU3M,QAAQ2J,OAEnDP,EAAUgE,aAAa9L,SAAQ,SAAUqI,EAAGjK,GAC1C0J,EAAUgE,aAAa1N,GAAK0N,EAAaT,EAAU3M,QAAQ2J,OAE7DP,EAAUiE,gBAAgB/L,SAAQ,SAAUqI,EAAGjK,GAC7C0J,EAAUiE,gBAAgB3N,GAAK2N,EAAgBV,EAAU3M,QAAQ2J,OAEnEP,EAAU1G,GAAGpB,SAAQ,SAAUqI,EAAGjK,GAChC0J,EAAU1G,GAAGhD,GAAKgD,EAAGiK,EAAU3M,QAAQ2J,OAEzC,MAAMvI,EAAQ,CAAC,IAAIoM,EAAAA,GAAW,MACxBC,EAAW,GACXC,EAAU,CAAC,sBACX3D,EAAQ,CAAC,KACT4D,EAAY,CAAC,IAAIH,EAAAA,GAAW,MAC5BI,EAAkB,CAAC,KACnBC,EAAW,CAAC,KACZC,EAAqB,CAAC,KACtBC,EAAa,CAAC,gCAEdC,EAAwB,CAD9BvB,GAAezD,EAAAA,EAAAA,IAASjC,GAAKkH,OAAOxB,KAE9ByB,EAAsB,CAACzB,GAC7B,IAAI9L,EACJ,MAAMwN,EAAW/E,EAAUuD,UAAUhL,OAAS,EAC9C,IAAK,IAAIjC,EAAI,EAAGA,EAAIyO,EAAUzO,IAAK,CACjC,MAAM0O,EAAQ1O,EAAI,EAClB,IAAI2O,EAAWjF,EAAUuD,UAAUyB,GACnC,MAAME,EAASlF,EAAUyD,QAAQuB,GAC3BG,EAAcnF,EAAUgE,aAAagB,GACrCI,EAAiBpF,EAAUiE,gBAAgBe,GAC3C1L,EAAK0G,EAAU1G,GAAG0L,GACxB,IAAIK,EAAY,GAChB,OAAQJ,GACN,IAAK,IAGL,IAAK,IASL,IAAK,IACH1N,EAAO,IAAI+N,EAAAA,IAAaC,EAAAA,EAAAA,KAAWpB,IACnC,MARF,IAAK,IACH5M,EAAO,IAAI+N,EAAAA,GAAa,GACxB,MACF,IAAK,IACH/N,EAAO,IAAI+N,EAAAA,IAAaC,EAAAA,EAAAA,KAAWrB,IACnC,MAIF,QACsB,MAAhBe,EAAS,KAAYA,EAAWA,EAASjC,QAAQ,IAAK,KAC1DzL,GAAO6G,EAAAA,EAAAA,IAAM6G,GAEjBV,EAAU1N,KAAKU,GACXA,EAAK2H,iBAAgBmG,EAAa,IAAG9N,EAAKZ,eAC9C,IAAI6O,GAAgB5F,EAAAA,EAAAA,IAAS5H,EAAM1B,EAAI,GAAGK,SAAS,CAAEwH,YAAa,SAAWmF,GAC7EtL,EAAMnB,KAAK,IAAIiI,EAAAA,GAAaxF,EAAI4L,EAAQ,CAAC,IAAIjG,EAAAA,GAAgBuG,GAAgBjO,KAC7EoJ,EAAM9J,KAAKwB,GAAML,EAAM1B,GAAI2H,IAC3BuH,GAAgB5F,EAAAA,EAAAA,IAAS5H,EAAM1B,GAAGK,SAAS,CAAEwH,YAAa,SAAWmF,GACrEe,EAASxN,KAAK,IAAIiI,EAAAA,GAAaiF,EAAamB,GAASxB,EAAWwB,GAAS,CAAC,IAAIjG,EAAAA,GAAgBuG,GAAgBjO,KAC9GkN,EAAS5N,KAAKwB,GAAMgM,EAAS/N,EAAI,GAAI2H,IACrCuG,EAAgB3N,KAAKwB,GAAMmN,EAAevH,IAC1C,MAAMwH,GAAmBrH,EAAAA,EAAAA,IAAMiG,EAAS/N,EAAI,GAAGK,SAAS,CAAEwH,YAAa,UACvEuG,EAAmB7N,KAAKwB,GAAMoN,EAAkBxH,IAChDqG,EAAQzN,KAAKsO,EAAcE,GAC3BV,EAAW9N,KAAKuO,EAAiBC,GAC7B/O,IAAM0J,EAAUuD,UAAUhL,SAC5BoI,EAAM9J,KAAKwB,GAAML,EAAM1B,GAAI2H,IAC3BuG,EAAgB3N,KAAKwB,GAAMmN,EAAevH,IAC1CwG,EAAS5N,KAAKwB,GAAMgM,EAAS/N,EAAI,GAAI2H,IACrCyG,EAAmB7N,KAAKwB,GAAMmN,EAAevH,IAC7CqG,EAAQzN,KAAK,sBAEb8N,EAAW9N,KAAK,0BAEdP,IAAMyO,GACRD,EAAoBjO,KAAKiO,EAAoBxO,EAAI,IACjDsO,EAAsB/N,KAAKiO,EAAoBxO,EAAI,KAC1CA,EAAI,IACbwO,EAAoBjO,KAAK,IAAIiI,EAAAA,GAAakB,EAAU1G,GAAG0L,GAAQE,EAAQ,CAACN,EAAsBtO,EAAI,IAAIsJ,EAAAA,EAAAA,IAASrI,EAAM,CAAC,CAAEsI,EAAG,IAAKC,EAAG,MAAQ,CAAE4F,EAAGrC,OAChJuB,EAAsB/N,MAAK+I,EAAAA,EAAAA,IAASkF,EAAoBxO,GAAI,CAAEoP,EAAGrC,MAGrE,MAAMsC,EAA2B,CAACf,EAAsBG,EAAW,IAC7Da,EAAyB,CAAChB,EAAsBG,EAAW,IACjE,IAAK,IAAIzO,EAAI,EAAGA,EAAIyO,EAAUzO,IAAK,CACjC,MAAM0O,EAAQ1O,EAAI,EACZ4O,EAASlF,EAAUyD,QAAQsB,EAAW,EAAIC,GAC5C1O,IAAMyO,GACRa,EAAuB/O,KAAK+O,EAAuBtP,IACnDqP,EAAyB9O,KAAK+O,EAAuBtP,KAC5CA,EAAIyO,IACba,EAAuB/O,KAAK,IAAIiI,EAAAA,GAAaiF,EAAamB,GAASxB,EAAWwB,GAAS,CAACS,EAAyBrP,EAAI,IAAIsJ,EAAAA,EAAAA,IAAS2E,EAAUQ,EAAWzO,GAAI,CAAC,CAAEuJ,EAAG,IAAKC,EAAG,MAAQ,CAAE4F,EAAGrC,OACtLsC,EAAyB9O,MAAK+I,EAAAA,EAAAA,IAASgG,EAAuBtP,GAAI,CAAEoP,EAAGrC,MAG3E,MAAO,CAAEiB,QAASA,EAAS3D,MAAOA,EAAO6D,gBAAiBA,EAAiBC,SAAUA,EAAUC,mBAAoBA,EAAoBC,WAAYA,EAAY3M,MAAOA,EAAOoL,SAAUA,EAAU0B,oBAAqBA,EAAqBF,sBAAuBA,EAAuBgB,uBAAwBA,EAAwBD,yBAA0BA,GAGrW,SAASE,GAAyBzC,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAOC,EAAcpF,GAAQ,GACjK,MAAM6H,EAAY3C,GAAgBC,EAAUC,EAAcpF,GACpD8H,EAAyB3F,OAAOoD,OAAOsC,EAAUxB,SACvDyB,EAAuB7N,SAAQ,SAAUX,EAAMjB,GAC7CyP,EAAuBzP,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,KACzEwP,EAAUxB,QAAQhO,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,IACpEyP,EAAuBzP,IAAM,IAAMwP,EAAUnF,MAAMrK,GAC/CwP,EAAUnF,MAAMrK,KAAOwP,EAAUtB,gBAAgBlO,KAAIyP,EAAuBzP,IAAM,KAAOwP,EAAUtB,gBAAgBlO,OAEzH,IAAIyL,EAAQR,OAAOC,IAAV,UAAc;;;YAAd;;;;;;aAGCsE,EAAUxB,QAAQ7L,KAAK,SAOjC,MAAMuJ,EAAYT,OAAOC,IAAV,UAAc;;;YAAd;2BAGLuE,EAAuBtN,KAAK,SAGtC,OADIwF,IAAO8D,EAAS,GAAEA,QAAYC,KAC3B,CAAED,MAAOA,EAAOC,UAAWA,GAGpC,SAASgE,GAAuB5C,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAOC,EAAcpF,GAAQ,GAC/J,MAAM6H,EAAY3C,GAAgBC,EAAUC,EAAcpF,GACpD8H,EAAyB3F,OAAOoD,OAAOsC,EAAUxB,SACvDyB,EAAuB7N,SAAQ,SAAUX,EAAMjB,GAC7CyP,EAAuBzP,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,KACzEwP,EAAUxB,QAAQhO,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,IACpEyP,EAAuBzP,IAAM,IAAMwP,EAAUnF,MAAMrK,GAC/CwP,EAAUnF,MAAMrK,KAAOwP,EAAUtB,gBAAgBlO,KAAIyP,EAAuBzP,IAAM,KAAOwP,EAAUtB,gBAAgBlO,OAEzH,IAAIyL,EAAQR,OAAOC,IAAV,UAAc;;aAAd;aAEEsE,EAAUtB,gBAAgBsB,EAAUtB,gBAAgBjM,OAAS,IAExE,MAAMyJ,EAAYT,OAAOC,IAAV,UAAc;;;YAAd;2BAGLuE,EAAuBtN,KAAK,SAGtC,OADIwF,IAAO8D,EAAS,GAAEA,QAAYC,KAC3B,CAAED,MAAOA,EAAOC,UAAWA,GAGpC,SAASiE,GAAyB7C,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAOC,EAAcpF,GAAQ,GACjK,MAAM6H,EAAY3C,GAAgBC,EAAUC,EAAcpF,GACpD8H,EAAyB3F,OAAOoD,OAAOsC,EAAUxB,SACjD4B,EAA4B9F,OAAOoD,OAAOsC,EAAUxB,SACpDS,EAAWgB,EAAuBxN,OACxCwN,EAAuB7N,SAAQ,SAAUX,EAAMjB,GAC7CyP,EAAuBzP,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,KACzEwP,EAAUxB,QAAQhO,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,IACpEyP,EAAuBzP,IAAM,IAAMwP,EAAUnF,MAAMrK,GACnD4P,EAA0B5P,GAAK,oBAAsBwP,EAAUnB,WAAWrO,GAAK,KAC/EwP,EAAUnB,WAAWrO,GAAK,oBAAsBwP,EAAUnB,WAAWrO,GAAK,IAChE,IAANA,EACF4P,EAA0B5P,IAAM,IAAM+B,GAAMyN,EAAUH,yBAAyBZ,EAAW,IACjFzO,EAAIyP,EAAuBxN,OAAS,EAC7C2N,EAA0B5P,IAAM,IAAM+B,GAAMyN,EAAUF,uBAAuBb,EAAW,EAAIzO,IAAM,MAAQ+B,GAAMyN,EAAUH,yBAAyBZ,EAAW,EAAIzO,IAElK4P,EAA0B5P,IAAM,IAAM+B,GAAMyN,EAAUH,yBAAyB,OAGnFtC,GAAezD,EAAAA,EAAAA,IAASjC,GAAKkH,OAAOxB,IACpC,IAAItB,EAAQR,OAAOC,IAAV,UAAc,yBAAd;;;YAAA;;;;aAAsCnJ,GAAMyN,EAAUH,yBAAyB,IAG9EG,EAAUxB,QAAQ7L,KAAK,SAKjC,MAAMuJ,EAAYT,OAAOC,IAAV,UAAc;;;YAAd;;;yCAAA;aAGL0E,EAA0BC,UAAU1N,KAAK,QAGZJ,GAAMgL,IAG7C,OADIpF,IAAO8D,EAAS,GAAEA,QAAYC,KAC3B,CAAED,MAAOA,EAAOC,UAAWA,GAGpC,SAASoE,GAA0BhD,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAOC,EAAcpF,GAAQ,GAClK,MAAM6H,EAAY3C,GAAgBC,EAAUC,EAAcpF,GACpD8H,EAAyB3F,OAAOoD,OAAOsC,EAAUxB,SACvDyB,EAAuB7N,SAAQ,SAAUX,EAAMjB,GAC7CyP,EAAuBzP,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,KACzEwP,EAAUxB,QAAQhO,GAAK,oBAAsBwP,EAAUxB,QAAQhO,GAAK,IAE1D,IAANA,EACFyP,EAAuBzP,IAAM,IAAM+B,GAAMyN,EAAUlB,sBAAsB,IAChEtO,EAAIyP,EAAuBxN,OAAS,EAC7CwN,EAAuBzP,IAAM,IAAM+B,GAAMyN,EAAUhB,oBAAoBxO,IAAM,MAAQ+B,GAAMyN,EAAUlB,sBAAsBtO,IAE3HyP,EAAuBzP,IAAM,IAAM+B,GAAMyN,EAAUlB,sBAAsBtO,EAAI,OAGjF+M,GAAezD,EAAAA,EAAAA,IAASjC,GAAKkH,OAAOxB,IACpC,IAAItB,EAAQR,OAAOC,IAAV,UAAc,sBAAd;;;YAAA;;;aAAmCnJ,GAAMgL,GAGxCyC,EAAUxB,QAAQ7L,KAAK,SAIjC,MAAMuJ,EAAYT,OAAOC,IAAV,UAAc;;;YAAd;2BAGLuE,EAAuBtN,KAAK,SAGtC,OADIwF,IAAO8D,EAAS,GAAEA,QAAYC,KAC3B,CAAED,MAAOA,EAAOC,UAAWA,GASrB,SAASqE,KACtBnT,EAAAA,QAAAA,KAAcC,MACd,MAAMmT,EAAa,CACjB,qCACA,sEACA,sEACA,sEACA,yDACA,4BACA,4BACA,4BACA,4BACA,4BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBAEFnT,KAAK0B,YAAc,EACnB1B,KAAKkC,0BAA4B,CAC/B,mBAAoBlC,KAAK0B,YAAayR,EAAW7N,KAAK,OAExDtF,KAAKG,SAAW,GAChBH,KAAKkB,OAAS,EACdlB,KAAKmB,WAAa,EAClBnB,KAAKyB,gBAAkB,EACvBzB,KAAK+B,MAAQ,GACb/B,KAAK4B,+BAAgC,EACrC5B,KAAK6B,qBAAsB,EAC3BuR,EAAAA,GAAAA,OAAkBpT,KAAKY,QAAU,IAAQZ,KAAKY,QAAU,IACxDwS,EAAAA,GAAAA,OAAkBpT,KAAKa,YAAc,IAAQb,KAAKa,YAAc,IAChEb,KAAKqT,IAAM,EACXrT,KAAKgD,gBAAkB,SAAUC,EAAgBqQ,GAAW,GAC1DtT,KAAK0B,YAAc1B,KAAKuT,YAAc,EAAIvT,KAAK0B,YAA2B,IAAb1B,KAAKqT,IAAY,EAAIF,EAAW/N,OAAS,EACtGpF,KAAKM,eAAiB,GACtBN,KAAKO,iBAAmB,GACxBP,KAAKU,eAAiB,GACtB,IAAI8S,EAAY,EAChB,IAAK,IAAWC,EAAPtQ,EAAI,EAAa4J,EAAM,EAAG5J,EAAInD,KAAK0B,aAAeqL,EAAM,KAAM,CAQrE,OAPAyG,EAAyB,IAAbxT,KAAKqT,IAAYtG,EAAM,EAAI/M,KAAKqT,IACxCC,GACF7N,QAAQsF,IAAK,gEAEF5H,EAAI,UAAUqQ,+CAGnBA,GACN,KAAK,EAyRL,KAAK,GACHC,EAAWf,GAAwB,CAAC,IAAK,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GACzD,MAvRF,KAAK,EACHG,EAAWf,GAAwB,CAAC,IAAK,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GACzD,MAEF,KAAK,EACHG,EAAWf,GAAwB,CAAC,IAAK,IAAK,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC9D,MAEF,KAAK,EACHG,EAAWf,GAAwB,CAAC,IAAK,IAAK,QAAQzH,EAAAA,EAAAA,IAAM,GAAIqI,GAChE,MAEF,KAAK,EACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,SACJwG,GACJ,MAEF,KAAK,EACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,SACJwG,GACJ,MAEF,KAAK,EACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,SACJwG,GACJ,MAEF,KAAK,EACHG,EAAWrE,GAAiBN,GAAa,UAAW,CAClDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHO,KAAM,0BACJwG,GACJ,MAEF,KAAK,EACHG,EAAWrE,GAAiBN,GAAa,WAAY,CACnDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHO,KAAM,gBACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,UAAW,CAClDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHO,KAAM,gBACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,gBAAiB,CACxDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHkH,GAAG,EACH5G,KAAM,mCACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHkH,GAAG,EACH5G,KAAM,wCACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,gBAAiB,CACxDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHkH,GAAG,EACH5G,KAAM,gBACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtD6E,EAAG,8DACHtH,EAAG,8DACHC,EAAG,8DACHC,EAAG,8DACHqH,EAAG,MACHC,EAAG,IACHC,EAAG,IACHC,EAAG,QACHjH,KAAM,kBACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,kBAAmB,CAC1DzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHkH,GAAG,EACH5G,KAAM,oBACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,YAAa,CACpDzC,GAAG,EACHC,GAAG,EACHC,GAAG,IACD+G,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,oBAAqB,CAC5DzC,GAAG,EACHC,GAAG,EACHC,GAAG,IACD+G,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,QAAS,CAChDzC,GAAG,EACHS,KAAM,SACJwG,GACJ,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAClDU,GAAyB,CACvBP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,wDACJtJ,YAAY,EAAO8P,GACzB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,EAAG,mBACHC,EAAG,sBACD9I,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,EAAG,mBACHC,EAAG,mBACHC,EAAG,mBACHO,KAAM,YACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,wDAEJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,kBAAmBU,GAAyB,CAC9FP,EAAG,kBACHC,EAAG,kBACHC,EAAG,qBACD/I,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,EAAG,oBACHE,EAAG,oBACHD,EAAG,uBACD9I,YAAY,EAAM8P,GACtB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,EAAG,oBACHE,EAAG,oBACHD,EAAG,uBACD9I,YAAY,EAAM8P,GACtB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,EAAG,oBACHC,EAAG,uBACD9I,YAAY,EAAM8P,GACtB,MAEF,KAAK,GAIL,KAAK,GACHG,EAAWZ,GAAsB,CAAC,IAAK,IAAK,QAAQ5H,EAAAA,EAAAA,IAAM,GAAIqI,GAC9D,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,QAASU,GAAyB,CACpFP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,qBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,QAASU,GAAyB,CACpFP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,iCACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,+EACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,cAAe,CACtDzC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,SACJwG,GACJ,MAEF,KAAK,GACHG,EAAWrE,GAAiBN,GAAa,gBAAiB,CACxD6E,GAAG,EACHK,GAAG,EACH3H,GAAG,EACHC,EAAG,WACHC,EAAG,SACF+G,GAAWA,GACd,MAMF,KAAK,GACHG,EAAWZ,GAAsB,CAAC,IAAK,MAAM5H,EAAAA,EAAAA,IAAM,GAAIqI,GACvD,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,QAAQzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC3D,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,SAASzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC5D,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,IAAK,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC9D,MAEF,KAAK,GACHG,EAAWR,GACT,CAAC,IAAK,IAAK,IAAK,IAAK,OACrBrG,GACE,CACEP,GAAG,EACHC,GAAG,EACHC,EAAG,gBACHO,KAAM,WACLP,EAAG+G,GACV,MAEF,KAAK,GACHG,EAAWX,GACT,CAAC,IAAK,IAAK,IAAK,KAChBlG,GACE,CACEP,GAAG,EACHC,GAAG,EACHC,EAAG,gBACHO,KAAM,WACLP,EAAG+G,GACV,MAEF,KAAK,GACHG,EAAWX,GACT,CAAC,KACDlG,GACE,CACEP,GAAG,IACFA,EAAGiH,GACV,MAEF,KAAK,GACHG,EAAWX,GACT,CAAC,IAAK,KACNlG,GACE,CACEP,GAAG,IACFA,EAAGiH,GACV,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,+EACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,EAAG,wBACHC,EAAG,0BACHQ,KAAM,oBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,QAASU,GAAyB,CACpFP,GAAG,EACHC,GAAG,EACHQ,KAAM,iBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GASL,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,YAAaU,GAAyB,CACxFP,GAAG,EACHC,GAAG,EACHC,GAAG,EACHO,KAAM,6BACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,GAAG,EACHC,GAAG,EACHQ,KAAM,iBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,GAAG,EACHC,GAAG,EACHQ,KAAM,mBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,oBAAqBU,GAAyB,CAChGP,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,yBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,IAAK,SAASzH,EAAAA,EAAAA,IAAM,GAAIqI,GACjE,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,KAAM,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC/D,MAEF,KAAK,GACHG,EAAWf,GAAwB,CAAC,IAAK,KAAM,MAAMzH,EAAAA,EAAAA,IAAM,GAAIqI,GAC/D,MAEF,KAAK,GACHG,EAAWR,GAAyB,CAAC,IAAK,IAAK,KAAMrG,GACnD,CACEP,GAAG,IACFA,EAAGiH,GACR,MAEF,KAAK,GACHG,EAAWX,GAAwB,CAAC,IAAK,IAAK,KAAMlG,GAClD,CACEP,GAAG,IACFA,EAAGiH,GACR,MAEF,KAAK,GACHG,EAAWX,GAAwB,CAAC,IAAK,IAAK,KAAMlG,GAClD,CACEP,GAAG,IACFA,EAAGiH,GACR,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAClDU,GAAyB,CACvBP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,kEACJtJ,YAAY,EAAO8P,GACzB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,QAASU,GAAyB,CACpFP,GAAG,EACHC,EAAG,mBACHC,GAAG,EACHC,EAAG,mBACHM,KAAM,qBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,EAAG,0BACHC,EAAG,0BACHQ,KAAM,mBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,QAASU,GAAyB,CACpFP,GAAG,EACHC,GAAG,EACHQ,KAAM,oBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,YAAaU,GAAyB,CACxFP,GAAG,EACHC,GAAG,EACHC,GAAG,EACHO,KAAM,oBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,UAAWU,GAAyB,CACtFP,GAAG,EACHC,GAAG,EACHQ,KAAM,mBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,cAAeU,GAAyB,CAC1FP,GAAG,EACHC,GAAG,EACHQ,KAAM,mBACJtJ,YAAY,EAAO8P,GACvB,MAEF,KAAK,GACHG,EAAW9F,GAAiBzB,GAAwB,oBAAqBU,GAAyB,CAChGP,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHM,KAAM,6BACJtJ,YAAY,EAAO8P,GAIvBtT,KAAKkD,oBAAoBC,EAAGqQ,KAC9BxT,KAAKM,eAAeoD,KAAK+P,EAAS7E,OAClC5O,KAAKO,iBAAiBmD,KAAK+P,EAAS5E,WACpC1L,KAEF4J,KAEFkH,EAAAA,EAAAA,KAAwBjU,S,UC3zC5B,MAAMgG,EAAW,CAEjBA,WAAsB,SAAUhC,EAAMkQ,EAAW,MAC/C,MAAqB,iBAAdlQ,EAAK0H,MACO,eAAZ1H,EAAKwH,IACL,QAAQ2I,SAASnQ,EAAKmC,OACrB+N,GAAWlQ,EAAKmC,KAAO+N,IAGjClO,cAAyB,SAAUhC,GACjC,MAAqB,oBAAdA,EAAK0H,MAGd1F,aAAwB,SAAUhC,GAChC,MAAqB,iBAAdA,EAAK0H,MAAuC,eAAZ1H,EAAKwH,IAG9CxF,WAAsB,SAAUhC,EAAMoQ,EAAe,MACnD,MAAkB,iBAAdpQ,EAAK0H,QAGL0I,GAAgBpQ,EAAKwH,GAAG6I,OAASD,IAMvCpO,SAAoB,SAAUhC,EAAMsQ,GAAkB,GACpD,MAAkB,eAAdtQ,EAAK0H,SAEE4I,IAAmBtO,EAASuO,aAAavQ,KAC3CgC,EAASwO,SAASxQ,EAAKZ,KAAK,IAAI,IAM3C4C,WAAsB,SAAUhC,EAAMsQ,GAAkB,GACtD,GAAkB,iBAAdtQ,EAAK0H,KACP,OAAO,EACF,GAAI4I,GAAmBtO,EAASuO,aAAavQ,GAAO,CACzD,GAAIgC,EAASyO,WAAWzQ,EAAKZ,KAAK,IAAI,GAAQ,CAE5C,OADcsR,WAAW1Q,EAAKZ,KAAK,GAAGuR,QACtB,EAEhB,OAAO,EAGT,OAAO,GAIX3O,mBAA8B,SAAUhC,EAAMsQ,GAAkB,GAC9D,QAAItO,EAAS4O,WAAW5Q,EAAM,MACrBA,EAAKZ,KAAKyR,OAAMzH,GAAKpH,EAASyO,WAAWrH,EAAGkH,MAMvDtO,6BAAwC,SAAUhC,EAAMsQ,GAAkB,GACxE,SAAItO,EAASyO,WAAWzQ,EAAMsQ,KAC1BtO,EAAS8O,mBAAmB9Q,EAAMsQ,KAOxCtO,kBAA6B,SAAUhC,EAAMsQ,GAAkB,GAC7D,IAAKtO,EAAS8O,mBAAmB9Q,EAAMsQ,GACrC,OAAO,EAET,IAAIS,EAAY/Q,EAAKZ,KAAK,GACtB4R,EAAchR,EAAKZ,KAAK,GAS5B,OARIkR,IACEtO,EAASuO,aAAaQ,KACxBA,EAAYA,EAAU3R,KAAK,IAEzB4C,EAASuO,aAAaS,KACxBA,EAAcA,EAAY5R,KAAK,KAG3B6R,OAAOC,UAAUR,WAAWK,EAAUJ,SACtCM,OAAOC,UAAUR,WAAWM,EAAYL,UAGlDQ,EAAOC,QAAUpP","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/Change.js","webpack://mathalea/./src/js/exercices/beta/betaEquations.js","webpack://mathalea/./src/js/modules/NodeType.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { ChangeTypes } from 'mathsteps';\nimport NodeType from './NodeType.js'\n\nconst Change = {\n\tchangeFormatFunctionMap: {}\n};\n\nconst OP_TO_STRING = {\n  '+': 'Combine',\n  '-': 'Combine',\n  '*': 'Multiply',\n  '/': 'Divide'\n};\n\nconst COMPARATOR_TO_STRING = {\n  '=': 'equal to',\n  '>': 'greater than',\n  '>=': 'greater than or equal to',\n  '<': 'less than',\n  '<=': 'less than or equal to',\n};\n\n// Given a step, will return the change and explanation for the change\n// from the oldNode, newNode, and changeType\nChange.formatChange = function(step) {\n  if (!(step.changeType in Change.changeFormatFunctionMap)) {\n  \t// TODO: add tests that will alert us when a new change type doesn't\n  \t// have a change function yet\n  \tconsole.error(step.changeType + ' does not have a change function!');\n    return step.changeType;\n  }\n\n  const changeFormatFunctionMap = Change.changeFormatFunctionMap[step.changeType];\n  let changeDescription = changeFormatFunctionMap(step);\n  if (!changeDescription) {\n    return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n  }\n\n  return changeDescription;\n};\n\nfunction getChangeNodes(node) {\n  return node.filter(node => node.changeGroup);\n}\n\nfunction getOldChangeNodes(step) {\n  if (step.oldNode) {\n    return getChangeNodes(step.oldNode);\n  }\n  else if (step.oldEquation) {\n    const leftChangeNodeStrings = getChangeNodes(step.oldEquation.leftNode);\n    const rightChangeNodeStrings = getChangeNodes(step.oldEquation.rightNode);\n    return [...leftChangeNodeStrings, ...rightChangeNodeStrings];\n  }\n  return null;\n}\n\nexport function getNewChangeNodes(step) {\n  if (step.newNode) {\n    return getChangeNodes(step.newNode);\n  }\n  else if (step.newEquation) {\n    const leftChangeNodeStrings = getChangeNodes(step.newEquation.leftNode);\n    const rightChangeNodeStrings = getChangeNodes(step.newEquation.rightNode);\n    return [...leftChangeNodeStrings, ...rightChangeNodeStrings];\n  }\n  return null;\n}\n\nfunction nodesToString(nodes, duplicates=false) {\n  // get rid of changeGroup so we can find duplicates\n  nodes.forEach(node => { node.changeGroup = undefined; });\n\n  let strings = nodes.map(node => node.toTex());\n  if (!duplicates) {\n    strings = [...new Set(strings)];\n  }\n\n  if (strings.length === 0) {\n    return '';\n  }\n  else if (strings.length === 1) {\n    return strings[0];\n  }\n  else {\n    return `${strings.slice(0, -1).join(', ')} \\\\text{ and } ${strings.slice(-1)}`;\n  }\n}\n\n// e.g. |-3| -> 3\nChange.changeFormatFunctionMap[ChangeTypes.ABSOLUTE_VALUE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  if (oldNodes.length !== 1) {\n    return null;\n  }\n\n  const absNode = oldNodes[0];\n  if (!NodeType.isFunction(absNode, 'abs')) {\n    return null;\n  }\n\n  const string = absNode.args[0].toTex();\n  return `\\\\text{Take the absolute value of } ${string}`;\n};\n\n// e.g. 2x + x -> 2x + 1x\nChange.changeFormatFunctionMap[ChangeTypes.ADD_COEFFICIENT_OF_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length === 0 || newNodes.length !== oldNodes.length) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. x^2 * x -> x^2 * x^1\nChange.changeFormatFunctionMap[ChangeTypes.ADD_EXPONENT_OF_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length === 0 || newNodes.length !== oldNodes.length) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 1/2 + 1/3 -> 5/6\nChange.changeFormatFunctionMap[ChangeTypes.ADD_FRACTIONS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || opNode.op !== '+' || opNode.args.length > 3) {\n    return null;\n  }\n\n  const before = nodesToString(opNode.args, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{Add } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. (1 + 2)/3 -> 3/3\nChange.changeFormatFunctionMap[ChangeTypes.ADD_NUMERATORS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x^2 + x^2 -> 2x^2\nChange.changeFormatFunctionMap[ChangeTypes.ADD_POLYNOMIAL_TERMS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || opNode.op !== '+') {\n    return null;\n  }\n\n  const before = nodesToString(opNode.args, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{Add } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. x - 3 = 2 -> x - 3 + 3 = 2 + 3\nChange.changeFormatFunctionMap[ChangeTypes.ADD_TO_BOTH_SIDES] = function(step) {\n  // there is a term node on each side of the equation\n  const termNodes = getNewChangeNodes(step);\n  if (termNodes.length !== 2) {\n    return null;\n  }\n\n  const term = termNodes[0].toTex();\n  return `\\\\text{Add } ${term} \\\\text{ to both sides}`;\n};\n\n// e.g. (x + 2)/2 -> x/2 + 2/2\nChange.changeFormatFunctionMap[ChangeTypes.BREAK_UP_FRACTION] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  if (oldNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  return `\\\\text{Break up the fraction } ${before}`;\n};\n\n// e.g. nthRoot(x ^ 2, 4) -> nthRoot(x, 2)\nChange.changeFormatFunctionMap[ChangeTypes.CANCEL_EXPONENT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(x ^ 2, 2) -> x\nChange.changeFormatFunctionMap[ChangeTypes.CANCEL_EXPONENT_AND_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(x ^ 2, 2) -> x\nChange.changeFormatFunctionMap[ChangeTypes.CANCEL_MINUSES] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(x ^ 4, 2) -> x ^ 2\nChange.changeFormatFunctionMap[ChangeTypes.CANCEL_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2x/2 -> x\nChange.changeFormatFunctionMap[ChangeTypes.CANCEL_TERMS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  if (oldNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  return `\\\\text{Cancel } ${before} \\\\text{ from the numerator and denominator}`;\n};\n\n// e.g. 2 + x + 3 + x -> 5 + 2x\nChange.changeFormatFunctionMap[ChangeTypes.COLLECT_AND_COMBINE_LIKE_TERMS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x^2 * x^3 * x^1 -> x^(2 + 3 + 1)\nChange.changeFormatFunctionMap[ChangeTypes.COLLECT_EXPONENTS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x + 2 + x^2 + x + 4 -> x^2 + (x + x) + (4 + 2)\nChange.changeFormatFunctionMap[ChangeTypes.COLLECT_LIKE_TERMS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2/5 + 1/5 -> (2+1)/5\nChange.changeFormatFunctionMap[ChangeTypes.COMBINE_NUMERATORS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(2, 2) * nthRoot(3, 2) -> nthRoot(2 * 3, 2)\nChange.changeFormatFunctionMap[ChangeTypes.COMBINE_UNDER_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2/6 + 1/4 -> (2*2)/(6*2) + (1*3)/(4*3)\nChange.changeFormatFunctionMap[ChangeTypes.COMMON_DENOMINATOR] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 3 + 1/2 -> 6/2 + 1/2\nChange.changeFormatFunctionMap[ChangeTypes.CONVERT_INTEGER_TO_FRACTION] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Change } ${before} \\\\text{ to } ${after} \\\\text{ so that it has a shared denominator}`;\n};\n\n// e.g. 2 * 2 * 2 -> 2 ^ 3\nChange.changeFormatFunctionMap[ChangeTypes.CONVERT_MULTIPLICATION_TO_EXPONENT] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 2(x + y) -> 2x + 2y\nChange.changeFormatFunctionMap[ChangeTypes.DISTRIBUTE] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. -(2 + x) -> -2 - x\nChange.changeFormatFunctionMap[ChangeTypes.DISTRIBUTE_NEGATIVE_ONE] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(2 * x) -> nthRoot(2) * nthRoot(x)\nChange.changeFormatFunctionMap[ChangeTypes.DISTRIBUTE_NTH_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// 1.2 + 1/2 -> 1.2 + 0.5\nChange.changeFormatFunctionMap[ChangeTypes.DIVIDE_FRACTION_FOR_ADDITION] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Divide } ${before} \\\\text{ so it's in the decimal form } ${after}`;\n};\n\n// e.g. 2x = 1 -> (2x)/2 = 1/2\nChange.changeFormatFunctionMap[ChangeTypes.DIVIDE_FROM_BOTH_SIDES] = function(step) {\n  const termNodes = getNewChangeNodes(step);\n  if (termNodes.length !== 2) {\n    return null;\n  }\n\n  const term = termNodes[0].toTex();\n  return `\\\\text{Divide both sides by } ${term}`;\n};\n\n// e.g. 2/-1 -> -2\nChange.changeFormatFunctionMap[ChangeTypes.DIVISION_BY_NEGATIVE_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `${before} \\\\text{ divided by -1 is } ${after}`;\n};\n\n// e.g. 2/1 -> 2\nChange.changeFormatFunctionMap[ChangeTypes.DIVISION_BY_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `${before} \\\\text{ divided by 1 is } ${after}`;\n};\n\n// e.g. nthRoot(4) * nthRoot(x^2) -> 2 * x\nChange.changeFormatFunctionMap[ChangeTypes.EVALUATE_DISTRIBUTED_NTH_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 12 -> 2 * 2 * 3\nChange.changeFormatFunctionMap[ChangeTypes.FACTOR_INTO_PRIMES] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length < oldNodes.length || newNodes.length > 5) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Factor } ${before} \\\\text{ into its prime factors: } ${after}`;\n};\n\n// e.g. 2x^2 + 3x^2 + 5x^2 -> (2+3+5)x^2\nChange.changeFormatFunctionMap[ChangeTypes.GROUP_COEFFICIENTS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. nthRoot(2 * 2 * 2, 2) -> nthRoot((2 * 2) * 2)\nChange.changeFormatFunctionMap[ChangeTypes.GROUP_TERMS_BY_ROOT] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. (2/3)x = 1 -> (2/3)x * (3/2) = 1 * (3/2)\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION] = function(step) {\n  const termNodes = getNewChangeNodes(step);\n  if (termNodes.length !== 2) {\n    return null;\n  }\n\n  const term = termNodes[0].toTex();\n  return `\\\\text{Multiply both sides by the inverse } ${term}`;\n};\n\n// e.g. -x = 2 -> -1 * -x = -1 * 2\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x/(2/3) -> x * 3/2\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_BY_INVERSE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes, true);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. x * 0 -> 0\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_BY_ZERO] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. (2 * 3)(x * x) -> 6(x*x)\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_COEFFICIENTS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || opNode.op !== '*') {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{Multiply the coefficients } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. (2*2)/(6*2) + (1*3)/(4*3) -> (2*2)/12 + (1*3)/12\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_DENOMINATORS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 1/2 * 2/3 -> 2/6\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_FRACTIONS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || opNode.op !== '*') {\n    return null;\n  }\n\n  const before = nodesToString(opNode.args, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{Multiply } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. (2*2)/12 + (1*3)/12 -> 4/12 + 3/12\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_NUMERATORS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2x * x -> 2x ^ 2\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_POLYNOMIAL_TERMS] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || opNode.op !== '*') {\n    return null;\n  }\n\n  const before = nodesToString(opNode.args, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{Multiply } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. x/2 = 1 -> (x/2) * 2 = 1 * 2\nChange.changeFormatFunctionMap[ChangeTypes.MULTIPLY_TO_BOTH_SIDES] = function(step) {\n  const termNodes = getNewChangeNodes(step);\n  if (termNodes.length !== 2) {\n    return null;\n  }\n\n  const term = termNodes[0].toTex();\n  return `\\\\text{Multiply both sides by } ${term}`;\n};\n\n// This should never happen\nChange.changeFormatFunctionMap[ChangeTypes.NO_CHANGE] = function() {\n  return null;\n};\n\n// e.g. nthRoot(4) -> 2\nChange.changeFormatFunctionMap[ChangeTypes.NTH_ROOT_VALUE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  if (oldNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  return `\\\\text{Take the root of } ${before}`;\n};\n\n// e.g. x * 2 -> 2x\nChange.changeFormatFunctionMap[ChangeTypes.REARRANGE_COEFF] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x ^ 0 -> 1\nChange.changeFormatFunctionMap[ChangeTypes.REDUCE_EXPONENT_BY_ZERO] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 0/1 -> 0\nChange.changeFormatFunctionMap[ChangeTypes.REDUCE_ZERO_NUMERATOR] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 2 + 0 -> 2\nChange.changeFormatFunctionMap[ChangeTypes.REMOVE_ADDING_ZERO] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x ^ 1 -> x\nChange.changeFormatFunctionMap[ChangeTypes.REMOVE_EXPONENT_BY_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. x * -1 -> -x\nChange.changeFormatFunctionMap[ChangeTypes.REMOVE_MULTIPLYING_BY_NEGATIVE_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. x * 1 -> x\nChange.changeFormatFunctionMap[ChangeTypes.REMOVE_MULTIPLYING_BY_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 2 - - 3 -> 2 + 3\nChange.changeFormatFunctionMap[ChangeTypes.RESOLVE_DOUBLE_MINUS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2 + 2 -> 4 or 2 * 2 -> 4\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_ARITHMETIC] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const opNode = oldNodes[0];\n  if (!NodeType.isOperator(opNode) || '+-*/^'.indexOf(opNode.op) === -1) {\n    return null;\n  }\n\n  const before = nodesToString(opNode.args, true);\n  const after = newNodes[0].toTex();\n  return `\\\\text{${OP_TO_STRING[opNode.op]} } ${before} \\\\text{ to get } ${after}`;\n};\n\n// e.g. 2/3/4 -> 2/(3*4)\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_DIVISION] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\n// e.g. 2/6 -> 1/3\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_FRACTION] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length !== 1 || newNodes.length !== 1) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Simplify } ${before} \\\\text{ to } ${after}`;\n};\n\n// e.g. x + 2 - 1 = 3 -> x + 1 = 3\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_LEFT_SIDE] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. x = 3 - 1 -> x = 2\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_RIGHT_SIDE] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2/-3 -> -2/3\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_SIGNS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2 * 4x + 2*5 --> 8x + 10\nChange.changeFormatFunctionMap[ChangeTypes.SIMPLIFY_TERMS] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2 = 2\nChange.changeFormatFunctionMap[ChangeTypes.STATEMENT_IS_FALSE] = function(step) {\n  const comparator = step.newEquation.comparator;\n  return `\\\\text{The left side is not ${COMPARATOR_TO_STRING[comparator]} the right side}`;\n};\n\n// e.g. 2 = 3\nChange.changeFormatFunctionMap[ChangeTypes.STATEMENT_IS_TRUE] = function(step) {\n  const comparator = step.newEquation.comparator;\n  return `\\\\text{The left side is ${COMPARATOR_TO_STRING[comparator]} the right side}`;\n};\n\n// e.g. x + 3 = 2 -> x + 3 - 3 = 2 - 3\nChange.changeFormatFunctionMap[ChangeTypes.SUBTRACT_FROM_BOTH_SIDES] = function(step) {\n  const termNodes = getNewChangeNodes(step);\n  if (termNodes.length !== 2) {\n    return null;\n  }\n\n  const term = termNodes[0].toTex();\n  return `\\\\text{Subtract } ${term} \\\\text{ from both sides}`;\n};\n\n// e.g. 2 = x -> x = 2\nChange.changeFormatFunctionMap[ChangeTypes.SWAP_SIDES] = function(step) {\n  return `\\\\text{${Change.ChangeText[step.changeType]}}`;\n};\n\n// e.g. 2x - x -> 2x - 1x\nChange.changeFormatFunctionMap[ChangeTypes.UNARY_MINUS_TO_NEGATIVE_ONE] = function(step) {\n  const oldNodes = getOldChangeNodes(step);\n  const newNodes = getNewChangeNodes(step);\n  if (oldNodes.length === 0 || newNodes.length !== oldNodes.length) {\n    return null;\n  }\n\n  const before = nodesToString(oldNodes);\n  const after = nodesToString(newNodes);\n  return `\\\\text{Rewrite } ${before} \\\\text{ as } ${after}`;\n};\n\nChange.ChangeText = {\n  ABSOLUTE_VALUE: 'Take the absolute value',\n  ADD_COEFFICIENT_OF_ONE: 'Rewrite term to have a coefficient of 1',\n  ADD_EXPONENT_OF_ONE: 'Rewrite term to have an exponent of 1',\n  ADD_FRACTIONS: 'Add the fractions together',\n  ADD_NUMERATORS: 'Add the terms in the numerator',\n  ADD_POLYNOMIAL_TERMS: 'Add the polynomial terms together',\n  ADD_TO_BOTH_SIDES: 'Add the term to both sides',\n  BREAK_UP_FRACTION: 'Break up the fraction',\n  CANCEL_EXPONENT: 'Cancel the exponent',\n  CANCEL_EXPONENT_AND_ROOT: 'Cancel the exponent and the root',\n  CANCEL_MINUSES: 'Cancel the negatives in the numerator and denominator',\n  CANCEL_ROOT: 'Cancel the root',\n  CANCEL_TERMS: 'Cancel like terms in the numerator and denominator',\n  COLLECT_AND_COMBINE_LIKE_TERMS: 'Collect and combine like terms',\n  COLLECT_EXPONENTS: 'Collect the exponents',\n  COLLECT_LIKE_TERMS: 'Identify the like terms and group them together',\n  COMBINE_NUMERATORS: 'Combine the numerators with a shared denominator',\n  COMMON_DENOMINATOR: 'Multiply the terms so they share a common denominator',\n  COMBINE_UNDER_ROOT: 'Combine terms with the same root',\n  CONVERT_INTEGER_TO_FRACTION: 'Change the number to a fraction with the same denominator',\n  CONVERT_MULTIPLICATION_TO_EXPONENT: 'Change repeatedly multiplying a term to an exponent',\n  DISTRIBUTE: 'Distribute into the parentheses',\n  DISTRIBUTE_NEGATIVE_ONE: 'Distribute -1 into the parentheses',\n  DISTRIBUTE_NTH_ROOT: 'Distribute the root into each term',\n  DIVIDE_FRACTION_FOR_ADDITION: 'Divide any fractions to convert it to decimal form',\n  DIVIDE_FROM_BOTH_SIDES: 'Divide the term from both sides',\n  DIVISION_BY_NEGATIVE_ONE: 'Rewrite any term divided by -1 as the negative of the term',\n  DIVISION_BY_ONE: 'Rewrite any term divided by 1 as just the term',\n  EVALUATE_DISTRIBUTED_NTH_ROOT: 'Take the root of all the terms',\n  FACTOR_INTO_PRIMES: 'Factor the number into its prime factors',\n  GROUP_COEFFICIENTS: 'Group the coefficients together',\n  GROUP_TERMS_BY_ROOT: 'Group repeating factors',\n  MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION: 'Multiply both sides by the inverse of the fraction',\n  MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE: 'Multiply both sides by -1',\n  MULTIPLY_BY_INVERSE: 'Rewrite division as multiplication by the inverse',\n  MULTIPLY_BY_ZERO: 'Rewrite any term multiplied by 0 as 0',\n  MULTIPLY_COEFFICIENTS: 'Multiply the coefficients together',\n  MULTIPLY_DENOMINATORS: 'Multiply the terms in the denominators',\n  MULTIPLY_FRACTIONS: 'Multiply the fractions together',\n  MULTIPLY_NUMERATORS: 'Multiply the terms in the numerators',\n  MULTIPLY_POLYNOMIAL_TERMS: 'Multiply the polynomial terms together',\n  MULTIPLY_TO_BOTH_SIDES: 'Multiply the term to both sides',\n  NTH_ROOT_VALUE: 'Take the root of the number',\n  NO_CHANGE: 'No change',\n  REARRANGE_COEFF: 'Move the coefficient to the front of the term',\n  REDUCE_ZERO_NUMERATOR: 'Rewrite zero divided by anything as zero',\n  REMOVE_EXPONENT_BY_ONE: 'Rewrite any term to the power of 1 as itself',\n  REDUCE_EXPONENT_BY_ZERO: 'Rewrite any term to the power of 0 as 1',\n  REMOVE_ADDING_ZERO: 'Remove zero when adding',\n  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: 'Rewrite any term multiplied by -1 as the negative of the term',\n  REMOVE_MULTIPLYING_BY_ONE: 'Rewrite any term multiplied 1 as just the term',\n  RESOLVE_DOUBLE_MINUS: 'Change subtracting a negative to addition',\n  SIMPLIFY_ARITHMETIC: 'Evaluate the arithmetic',\n  SIMPLIFY_DIVISION: 'Rewrite the chain of division',\n  SIMPLIFY_FRACTION: 'Simplify by dividing the top and bottom by the greatest common denominator',\n  SIMPLIFY_LEFT_SIDE: 'Simplify the left hand side',\n  SIMPLIFY_RIGHT_SIDE: 'Simplify the right hand side',\n  SIMPLIFY_SIGNS: 'Move the negative sign to the numerator',\n  SIMPLIFY_TERMS: 'Simplify after distributing',\n  STATEMENT_IS_FALSE: 'The statement is False',\n  STATEMENT_IS_TRUE: 'The statement is True',\n  SUBTRACT_FROM_BOTH_SIDES: 'Subtract the term from both sides',\n  SWAP_SIDES: 'Swap sides',\n  UNARY_MINUS_TO_NEGATIVE_ONE: 'Rewrite minus as a coefficient of -1',\n};\n\nexport default Change;\n\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu } from '../../modules/outils.js'\nimport { create, all, number, evaluate, SymbolNode, ConstantNode, OperatorNode, ParenthesisNode, simplify, parse, pickRandom } from 'mathjs'\nimport { solveEquation, simplifyExpression, factor } from 'mathsteps'\nimport { getNewChangeNodes } from '../../modules/Change.js'\nimport Algebrite from 'algebrite'\n\nconst math = create(all)\nmath.config({\n  number: 'Fraction'\n})\n// eslint-disable-next-line no-debugger\ndebugger\nexport const titre = 'Calculs algébriques'\n// Les exports suivants sont optionnels mais au moins la date de publication semble essentielle\nexport const dateDePublication = '02/01/2021' // La date de publication initiale au format 'jj/mm/aaaa' pour affichage temporaire d'un tag\n\nfunction developperExpression (expression) {\n  // const rules = simplify.rules\n  // rules.push({l: 'n1*(n1+n2)'})\n  return Algebrite.run(expression)\n}\n\nfunction toTex (node, debug = false) {\n  if (debug) {\n    console.log('node.toString({ parenthesis: \\'keep\\' })', node.toString({ parenthesis: 'keep' }))\n    console.log('node', node)\n  }\n  node = parse(node.toString({ parenthesis: 'keep' })) // Convertir en objet mathjs les objets mathsteps\n  node = node.transform(\n    function (node, path, parent) {\n      if (node.isOperatorNode && node.op === '/') { // Enlève les parenthèses au numérateur et dénominateur d'une fraction\n        if (node.args[0].isParenthesisNode) node.args[0] = node.args[0].content\n        if (node.args[1].isParenthesisNode) node.args[1] = node.args[1].content\n      }\n      if (node.isOperatorNode && node.op === '+') { // Enlève les parenthèses aux deux termes d'une addition\n        if (node.args[0].isParenthesisNode) node.args[0] = node.args[0].content\n        if (node.args[1].isParenthesisNode) node.args[1] = node.args[1].content\n      }\n      if (node.isOperatorNode && node.op === '-') { // Enlève les parenthèses au premier terme d'une soustraction et au second sous condition d'une /\n        if (node.args[0].isParenthesisNode) node.args[0] = node.args[0].content\n        if (\n          node.fn !== 'unaryMinus' && // On vérifie si c'est une vraie soustraction (avec deux termes)\n          node.args[1].isParenthesisNode && // On vérifie que le second terme possède une parenthèse\n          node.args[1].content.isOperatorNode && // On vérifie que le second terme contient une opération\n          (\n            node.args[1].content.op === '/' || // On teste si cette opération est une division\n            (\n              node.args[1].content.op === '*' && // On teste si c'est une multiplication\n              (\n                !node.args[1].content.args[0].isOperatorNode || // Si le premier facteur n'est pas une opération\n                (\n                  node.args[1].content.args[0].isOperatorNode && // Ou si c'est une opération\n                  node.args[1].content.args[0].fn !== 'unaryMinus' // mais que le premier argument n'est pas -blabla\n                )\n              )\n            )\n          )\n        ) node.args[1] = node.args[1].content\n      }\n      if (node.isOperatorNode && node.op === '*') { // Enlève les parenthèses aux deux facteurs d'une multiplication\n        if (node.args[0].isParenthesisNode && // On cherche à l'intérieur d'une parenthèse\n          (\n            !node.args[0].content.isOperatorNode || // Il ne faut pas d'opération\n            (node.args[0].content.isOperatorNode && node.args[0].content.op === '/') // ou alors une division\n          )\n        ) { // Si l'une des conditions est vérifiée alors :\n          node.args[0] = node.args[0].content // on enlève la parenthèse\n          node.implicit = false // on fait en sorte que la multiplication soit visible\n        }\n        if (node.args[1].isParenthesisNode &&\n          (\n            !node.args[1].content.isOperatorNode ||\n            (\n              node.args[1].content.isOperatorNode &&\n              node.args[1].content.op === '/'\n            )\n          )) {\n          node.args[1] = node.args[1].content\n          node.implicit = false\n        }\n        /* if (node.args[0].isSymbolNode && node.args[1].isSymbolNode) {\n          node.implicit = true\n        } */\n      }\n      return node\n    }\n  )\n  node = node.transform(function (node, path, parent) { // On commence par transformer les +- en -\n    switch (node.type) {\n      case 'OperatorNode':\n        switch (node.op) {\n          case '+':\n            if (node.args[1].op === '-') {\n              return new OperatorNode('-', 'subtract', [node.args[0], node.args[1].args[0]])\n            } else if (node.args[1].op === '*' && node.args[1].args[0].op === '-') {\n              const node2 = new OperatorNode('*', 'multiply', [node.args[1].args[0].args[0], node.args[1].args[1]])\n              return new OperatorNode('-', 'subtract', [node.args[0], node2])\n            } else if (node.args[1].op === '/') {\n              if (node.args[1].args[0].isOperatorNode && node.args[1].args[0].fn === 'unaryMinus') {\n                if (!(node.args[1].args[1].isOperatorNode) || (node.args[1].args[1].isOperatorNode && node.args[1].args[1].fn !== 'unaryMinus')) {\n                  const frac = new OperatorNode('/', 'divide', [node.args[1].args[0].args[0], node.args[1].args[1]])\n                  return new OperatorNode('-', 'subtract', [node.args[0], frac])\n                } else return node\n              } else return node\n            } else return node\n          case '/':\n            if (parent === null || parent.isParenthesisNode || (parent.op === '*')) {\n              if (node.args[0].isOperatorNode && node.args[0].fn === 'unaryMinus') {\n                if (!(node.args[1].isOperatorNode) || (node.args[1].isOperatorNode && node.args[1].fn !== 'unaryMinus')) {\n                  const frac = new OperatorNode('/', 'divide', [node.args[0].args[0], node.args[1]])\n                  return new OperatorNode('-', 'unaryMinus', [frac])\n                } else return node\n              } else return node\n            } else return node\n          default:\n            return node\n        }\n      default:\n        return node\n    }\n  })\n  node = node.transform(function (node, path, parent) {\n    if (debug) {\n      console.log('********', node.toString(), '********\\n', node)\n      console.log(' * node.fn : ', node.fn)\n      if (parent !== null) console.log(' * parent.op : ', parent.op)\n      if (node.args !== undefined) console.log(' * node.args[0].type : ', node.args[0].type)\n      if (node.args !== undefined && node.args.length > 1) console.log(' * node.args[1].type : ', node.args[1].type)\n      if (node.args !== undefined) console.log(' * node.args[0].op : ', node.args[0].op)\n      if (node.args !== undefined && node.args.length > 1) console.log(' * node.args[1].op : ', node.args[1].op)\n    }\n    switch (node.type) {\n      case 'OperatorNode':\n        switch (node.op) {\n          case '*': // Les multiplications deviennent implicites\n            if (node.args[1].fn === 'unaryMinus') { // pour obtenir \\times(-1)\n              node.args[1] = new ParenthesisNode(node.args[1])\n              return node\n            } else if (\n              !(\n                node.args[1].isConstantNode ||\n                (node.args[1].isOperatorNode && node.args[1].op === '/') ||\n                (\n                  node.args[1].isSymbolNode &&\n                  node.args[0].isOperatorNode &&\n                  node.args[0].args[1] !== undefined &&\n                  node.args[0].args[1].isSymbolNode\n                ) ||\n                (\n                  node.args[0].isSymbolNode &&\n                  node.args[1].isSymbolNode\n                )\n              )) {\n              node.implicit = true\n              return node\n            } else return node\n          case '+':\n            if (node.args[1].op === '-') {\n              return new OperatorNode('-', 'subtract', [node.args[0], node.args[1].args[0]])\n            } else if (node.args[1].op === '/') {\n              if (node.args[1].args[0].isOperatorNode && node.args[1].args[0].fn === 'unaryMinus') {\n                if (!(node.args[1].args[1].isOperatorNode) || (node.args[1].args[1].isOperatorNode && node.args[1].args[1].fn !== 'unaryMinus')) {\n                  const frac = new OperatorNode('/', 'divide', [node.args[1].args[0].args[0], node.args[1].args[1]])\n                  return new OperatorNode('-', 'subtract', [node.args[0], frac])\n                } else return node\n              } else return node\n            } else return node\n          case '/':\n            if (parent === null || parent.isParenthesisNode || (parent.op === '*')) {\n              if (node.args[0].isOperatorNode && node.args[0].fn === 'unaryMinus') {\n                if (!(node.args[1].isOperatorNode) || (node.args[1].isOperatorNode && node.args[1].fn !== 'unaryMinus')) {\n                  const frac = new OperatorNode('/', 'divide', [node.args[0].args[0], node.args[1]])\n                  return new OperatorNode('-', 'unaryMinus', [frac])\n                } else return node\n              } else return node\n            } else return node\n          default:\n            return node\n        }\n      case 'ConstantNode':\n        return node\n      case 'SymbolNode':\n        return node\n      default:\n        return node\n    }\n  })\n  if (debug) {\n    console.log('***********RESULTATS***********\\n node.toString() : ', node.toString())\n    console.log('node.toTex() : ', node.toTex())\n    console.log('node.toTex() avec formattage : ', node.toTex({ parenthesis: 'auto' }).replaceAll('\\\\cdot', '\\\\times'))\n    console.log('node.toTex() : ', node)\n  }\n  return node.toTex({ parenthesis: 'keep' }).replaceAll('\\\\cdot', '\\\\times').replaceAll('.', '{,}').replaceAll('\\\\frac', '\\\\dfrac')\n}\n\nfunction aleaExpressionLitterale (expression = '(a*x+b)*(c*x-d)', assignations = { a: 1, b: 2, c: 3, d: -6 }, debug = false) {\n  // Ne pas oublier le signe de la multiplication\n  return simplify(expression, [{ l: '1*n', r: 'n' }, { l: '-1*n', r: '-n' }, { l: 'n/1', r: 'n' }, { l: 'c/c', r: '1' }, { l: '0*v', r: '0' }, { l: '0+v', r: 'v' }], assignations)\n}\n\nfunction aleaAssignationVariables (variables = { a: false, b: false, c: true, d: 'fraction(a,10)+fraction(b,100)', test: 'b!=0 and b>a>c' }, debug = false) {\n  const assignations = {}\n  let cpt = 0\n  let test = true\n  do {\n    cpt++\n    for (const v of Object.keys(variables)) {\n      if (typeof variables[v] === 'boolean') {\n        assignations[v] = evaluate('(pickRandom([-1,1]))^(n)*randomInt(1,10)', { n: variables[v] })\n      } else if (v !== 'test') {\n        assignations[v] = evaluate(variables[v], assignations)\n      }\n    }\n    if (variables.test !== undefined) test = evaluate(variables.test, assignations)\n  } while (!test && cpt < 1000)\n  if (cpt === 1000) window.notify('Attention ! 1000 essais dépassés.\\n Trop de contraintes.\\n Le résultat ne vérifiera pas le test.')\n  return assignations\n}\n\nfunction traverserEtapes (steps, result = []) {\n  steps.forEach(function (step, i) {\n    if (step.substeps.length === 0) result.push(step)\n    return traverserEtapes(step.substeps, result)\n  })\n  return result\n}\n\nfunction calculExpression (expression = '4/3+5/6', factoriser = false, debug = false) {\n  const steps = factoriser ? traverserEtapes(factor(expression)) : traverserEtapes(simplifyExpression(expression))\n  if (debug) {\n    console.log('* steps :')\n    console.log(steps)\n  }\n  let repetition = 0\n  const stepsExpression = []\n  let expressionPrint = ''\n  steps.forEach(function (step, i) {\n    const changement = step.changeType\n    if (step.oldNode !== null) {\n      if (step.oldNode.toString() === step.newNode.toString()) {\n        if (changement !== 'REMOVE_ADDING_ZEROS') repetition = (repetition + 1) % 2\n      } else {\n        repetition = 0\n      }\n    }\n    const oldNode = step.oldNode !== null ? toTex(step.oldNode) : ''\n    const newNode = toTex(step.newNode)\n    if (debug) {\n      console.log(changement)\n      console.log(newNode.toString())\n    }\n    if (i === 0) {\n      expressionPrint = `${oldNode}`\n    }\n    if (debug) console.log(newNode)\n    const commentairesExclus = {\n      COLLECT_LIKE_TERMS: String.raw`\\text{Regrouper les termes}`,\n      MULTIPLY_DENOMINATORS: String.raw`\\text{Calculer les dénominateurs}`,\n      ADD_EXPONENT_OF_ONE: String.raw`\\text{Ajouter l'exposant 1}`,\n      COLLECT_POLYNOMIAL_EXPONENTS: String.raw`\\text{Ajouter l'exposant 1}`\n    }\n    let commentaires = {\n      COMMON_DENOMINATOR: String.raw`\\text{Obtenir le même dénominateur}`,\n      MULTIPLY_NUMERATORS: String.raw`\\text{Calculer}`,\n      COMBINE_NUMERATORS: String.raw`\\text{Combiner les numérateurs}`,\n      ADD_NUMERATORS: String.raw`\\text{Additionner les numérateurs}`,\n      ADD_COEFFICIENT_OF_ONE: String.raw`\\text{Ajouter le coefficient }1`,\n      GROUP_COEFFICIENTS: String.raw`\\text{Regrouper les coefficients}`,\n      FIND_GCD: String.raw`\\text{Trouver le plus grand diviseur commun.}`,\n      CANCEL_GCD: String.raw`\\text{Simplifier par le PGCD.}`\n    }\n    if (debug) {\n      commentaires = Object.assign(commentaires, {\n        STATEMENT_IS_FALSE: String.raw`\\text{L'égalité est fausse}`,\n        STATEMENT_IS_TRUE: String.raw`\\text{L'égalité est vraie}`,\n        DISTRIBUTE: String.raw`\\text{Distribution}`,\n        SIMPLIFY_RIGHT_SIDE: String.raw`\\text{Simplifier le membre de droite}`,\n        SIMPLIFY_LEFT_SIDE: String.raw`\\text{Simplifier le membre de gauche}`,\n        COLLECT_AND_COMBINE_LIKE_TERMS: String.raw`\\text{Regrouper et réduire les termes de même nature}`,\n        SIMPLIFY_ARITHMETIC: String.raw`\\text{Calcul arithmétique}`,\n        SIMPLIFY_FRACTION: String.raw`\\text{Simplifier une fraction}`,\n        REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: String.raw`\\text{Calculer la multiplication par }-1`,\n        REMOVE_ADDING_ZERO: String.raw`\\text{Enlever des zéros}`,\n        SWAP_SIDES: String.raw`\\text{Echanger les deux membres}`,\n        CANCEL_MINUSES: String.raw`\\text{Annuler les signes moins}`,\n        FIND_ROOTS: String.raw`\\text{Trouver la (ou les) solution(s)}`,\n        SIMPLIFY_SIGNS: String.raw`\\text{Simplifier le signe}`,\n        MULTIPLY_BY_ZERO: String.raw`\\text{Multiplication par zéro}`,\n        ADD_FRACTIONS: String.raw`\\text{Additionner des fractions}`,\n        BREAK_UP_FRACTION: String.raw`\\text{Séparer une fraction}`,\n        CANCEL_TERMS: String.raw`\\text{Annuler les termes}`,\n        REMOVE_MULTIPLYING_BY_ONE: String.raw`\\text{Retirer la multiplication par } 1`\n      })\n    }\n    if (commentaires[changement] === undefined) commentaires[changement] = ''\n    if (commentairesExclus[changement] === undefined) stepsExpression.push(String.raw`&=${newNode}&&\\tiny${commentaires[changement]}`)\n    if (debug) console.log('changement', commentaires[changement])\n  })\n  let texte = String.raw`Simplifier $${expressionPrint}$.`\n  const texteCorr = String.raw`Simplifier $${expressionPrint}$.\n  <br>\n  $\\begin{aligned}\n  ${expressionPrint}${stepsExpression.join('\\\\\\\\')}\n  \\end{aligned}$\n  `\n  if (debug) texte = texteCorr\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction aleaEquation (equation = 'a*x+b=c*x-d', variables = { a: false, b: false, c: false, d: false, test: 'a>b or true' }, debug = false) { // Ne pas oublier le signe de la multiplication\n  const comparators = ['<=', '>=', '=', '<', '>']\n  const assignations = aleaAssignationVariables(variables, debug)\n  for (const v of Object.keys(assignations)) {\n    assignations[v] = number(assignations[v])\n  }\n  let comparator\n  let sides\n  for (let i = 0; i < comparators.length; i++) {\n    const comparatorSearch = comparators[i]\n    sides = equation.split(comparatorSearch)\n    if (sides.length === 2) {\n      comparator = comparatorSearch\n    }\n  }\n  sides = equation.split(comparator)\n  const leftNode = aleaExpressionLitterale(sides[0], assignations, debug).toString()\n  const rightNode = aleaExpressionLitterale(sides[1], assignations, debug).toString()\n  if (debug) {\n    console.log('Equation à résoudre : ', `${leftNode}${comparator}${rightNode}`)\n  }\n  return `${leftNode}${comparator}${rightNode}`\n}\n\nfunction resoudreEquation (equation = '5(x-7)=3(x+1)', debug = false) {\n  const comparators = ['<=', '>=', '=', '<', '>']\n  let comparator\n  let sides\n  for (let i = 0; i < comparators.length; i++) {\n    const comparatorSearch = comparators[i]\n    sides = equation.split(comparatorSearch)\n    if (sides.length === 2) {\n      comparator = comparatorSearch\n    }\n  }\n  sides = equation.split(comparator)\n  // const equation0 = equation.replace(comparator, `+0${comparator}0+`)\n  let equationPrint\n  const steps = solveEquation(equation)\n  if (debug) {\n    console.log('* steps :')\n    console.log(steps)\n  }\n  const stepsNewEquation = []\n  let repetition = 0\n  steps.forEach(function (step, i) {\n    const changement = step.changeType\n    if (step.oldEquation !== null) {\n      if (step.oldEquation.leftNode.toString() === step.newEquation.leftNode.toString() || step.oldEquation.rightNode.toString() === step.newEquation.rightNode.toString()) {\n        if (changement !== 'REMOVE_ADDING_ZEROS') repetition = (repetition + 1) % 3\n      } else {\n        repetition = 0\n      }\n    }\n    /* const oldLeftNode = step.oldEquation !== null ? toTex(parse(step.oldEquation.leftNode.toString())) : ''\n    let newLeftNode = toTex(parse(step.newEquation.leftNode.toString()))\n    const oldRightNode = step.oldEquation !== null ? toTex(parse(step.oldEquation.rightNode.toString())) : ''\n    let newRightNode = toTex(parse(step.newEquation.rightNode.toString())) */\n    const oldLeftNode = step.oldEquation !== null ? toTex(step.oldEquation.leftNode) : ''\n    let newLeftNode = toTex(step.newEquation.leftNode)\n    const oldRightNode = step.oldEquation !== null ? toTex(step.oldEquation.rightNode) : ''\n    let newRightNode = toTex(step.newEquation.rightNode)\n    if (debug) {\n      console.log(changement)\n      console.log(newLeftNode.toString() + step.newEquation.comparator + newRightNode.toString())\n    }\n    if (i === 0) {\n      equationPrint = `${oldLeftNode}${step.newEquation.comparator}${oldRightNode}`\n    }\n    const color = repetition === 2 ? 'black' : 'red'\n    newLeftNode = `{\\\\color{${color}}${newLeftNode.replace(oldLeftNode, `{\\\\color{black}${oldLeftNode}}`)}}`\n    newRightNode = `{\\\\color{${color}}${newRightNode.replace(oldRightNode, `{\\\\color{black}${oldRightNode}}`)}}`\n    if (debug) console.log(newLeftNode + step.newEquation.comparator + newRightNode)\n    const stepChange = getNewChangeNodes(step).length > 0 ? toTex(parse(getNewChangeNodes(step)[0].toString(), { parenthesis: 'auto' })) : ''\n    let commentaires = {\n      MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE: String.raw`\\text{Multiplier les deux membres par }-1`,\n      SUBTRACT_FROM_BOTH_SIDES: String.raw`\\text{Soustraire }${stepChange}\\text{ à chaque membre}`,\n      ADD_TO_BOTH_SIDES: String.raw`\\text{Ajouter }${stepChange}\\text{ à chaque membre}`,\n      MULTIPLY_TO_BOTH_SIDES: String.raw`\\text{Multiplier chaque membre par }${stepChange}`,\n      DIVIDE_FROM_BOTH_SIDES: String.raw`\\text{Diviser chaque membre par }${stepChange}`,\n      MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION: String.raw`\\text{Multiplier chaque membre par }${stepChange}`\n    }\n    if (debug) {\n      commentaires = Object.assign(commentaires, {\n        STATEMENT_IS_FALSE: String.raw`\\text{L'égalité est fausse}`,\n        STATEMENT_IS_TRUE: String.raw`\\text{L'égalité est vraie}`,\n        DISTRIBUTE: String.raw`\\text{Distribution}`,\n        SIMPLIFY_RIGHT_SIDE: String.raw`\\text{Simplifier le membre de droite}`,\n        SIMPLIFY_LEFT_SIDE: String.raw`\\text{Simplifier le membre de gauche}`,\n        COLLECT_AND_COMBINE_LIKE_TERMS: String.raw`\\text{Regrouper et réduire les termes de même nature}`,\n        SIMPLIFY_ARITHMETIC: String.raw`\\text{Calcul arithmétique}`,\n        SIMPLIFY_FRACTION: String.raw`\\text{Simplifier une fraction}`,\n        REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: String.raw`\\text{Calculer la multiplication par }-1`,\n        REMOVE_ADDING_ZERO: String.raw`\\text{Enlever des zéros}`,\n        SWAP_SIDES: String.raw`\\text{Echanger les deux membres}`,\n        CANCEL_MINUSES: String.raw`\\text{Annuler les signes moins}`,\n        FIND_ROOTS: String.raw`\\text{Trouver la (ou les) solution(s)}`,\n        SIMPLIFY_SIGNS: String.raw`\\text{Simplifier le signe}`,\n        MULTIPLY_BY_ZERO: String.raw`\\text{Multiplication par zéro}`,\n        ADD_FRACTIONS: String.raw`\\text{Additionner des fractions}`,\n        BREAK_UP_FRACTION: String.raw`\\text{Séparer une fraction}`,\n        CANCEL_TERMS: String.raw`\\text{Annuler les termes}`,\n        REMOVE_MULTIPLYING_BY_ONE: String.raw`\\text{Retirer la multiplication par } 1`\n      })\n    }\n    if (commentaires[changement] === undefined) commentaires[changement] = ''\n    if (repetition === 2) {\n      repetition = 0\n      stepsNewEquation.pop()\n      if (changement !== 'REMOVE_ADDING_ZERO') stepsNewEquation.push(String.raw`${newLeftNode}&${step.newEquation.comparator}${newRightNode}&&${commentaires[changement]}`)\n    } else {\n      if (changement !== 'REMOVE_ADDING_ZERO') stepsNewEquation.push(String.raw`${newLeftNode}&${step.newEquation.comparator}${newRightNode}&&${commentaires[changement]}`)\n    }\n    if (debug) console.log('changement', commentaires[changement])\n  })\n  let texte = String.raw`Résoudre $${equationPrint}$.`\n  const texteCorr = String.raw`Résoudre $${equationPrint}$.\n  <br>\n  $\\begin{aligned}\n  ${stepsNewEquation.join('\\\\\\\\')}\n  \\end{aligned}$\n  `\n  if (debug) texte = texteCorr\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction programmeCalcul (stepProg = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x'], nombreChoisi, debug = false) {\n  const rules = simplify.rules\n  rules[13] = { l: 'n', r: 'n' } // Pour éviter la factorisation\n  rules[14] = { l: 'n', r: 'n' } // Pour éviter la factorisation\n  // rules.push({ l: 'n1+-n2', r: 'n1-n2' }) // Peut être utile pour des nombres négatifs\n  const variables = {}\n  variables.symbolsOp = Object.values(stepProg)\n  const symbolsOp = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x']\n  const op = ['+', '-', '*', '/', '^', '+', '+', '-', '-', '+', '-', '+', '-', '*', '/']\n  const namesOp = [\n    'add', 'subtract', 'multiply', 'divide',\n    'pow',\n    'add', 'add',\n    'subtract', 'subtract',\n    'add', 'subtract',\n    'add', 'subtract',\n    'multiply', 'divide']\n  const namesOpInv = {\n    add: 'subtract',\n    subtract: 'add',\n    multiply: 'divide',\n    divide: 'multiply'\n  }\n  const symbolsOpInv = {\n    add: '-',\n    subtract: '+',\n    multiply: '/',\n    divide: '*'\n  }\n  const debutsPhrase = [\n    'Ajouter ', 'Soustraire ', 'Multiplier par ', 'Diviser par ',\n    'Elever au carré',\n    'Ajouter le double du nombre choisi', 'Ajouter le triple du nombre choisi',\n    'Soustraire le double du nombre choisi', 'Soustraire le triple du nombre choisi',\n    'Ajouter le carré du nombre choisi', 'Soustraire le carré du nombre choisi',\n    'Ajouter le nombre choisi', 'Soustraire le nombre choisi',\n    'Multiplier par le nombre choisi', 'Diviser par le nombre choisi'\n  ]\n  const debutsPhraseInv = [\n    'Soustraire ', 'Ajouter ', 'Diviser par ', 'Multiplier par ',\n    'Prendre la racine carré',\n    'Soustraire le double du nombre choisi', 'Soustraire le triple du nombre choisi',\n    'Ajouter le double du nombre choisi', 'Ajouter le triple du nombre choisi',\n    'Soustraire le carré du nombre choisi', 'Ajouter le carré du nombre choisi',\n    'Soustraire le nombre choisi', 'Ajouter le nombre choisi',\n    'Diviser par le nombre choisi', 'Multiplier par le nombre choisi'\n  ]\n  const nombresAutorises1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const nombresAutorises2 = [2, 3, 4, 5, 6, 7, 8, 9]\n  variables.namesOp = Object.values(variables.symbolsOp)\n  variables.debutsPhrase = Object.values(variables.symbolsOp)\n  variables.debutsPhraseInv = Object.values(variables.symbolsOp)\n  variables.op = Object.values(variables.symbolsOp)\n  variables.namesOp.forEach(function (n, i) {\n    variables.namesOp[i] = namesOp[symbolsOp.indexOf(n)]\n  })\n  variables.debutsPhrase.forEach(function (n, i) {\n    variables.debutsPhrase[i] = debutsPhrase[symbolsOp.indexOf(n)]\n  })\n  variables.debutsPhraseInv.forEach(function (n, i) {\n    variables.debutsPhraseInv[i] = debutsPhraseInv[symbolsOp.indexOf(n)]\n  })\n  variables.op.forEach(function (n, i) {\n    variables.op[i] = op[symbolsOp.indexOf(n)]\n  })\n  const nodes = [new SymbolNode('x')]\n  const nodesInv = []\n  const phrases = ['Choisir un nombre.']\n  const steps = ['x']\n  const stepsNode = [new SymbolNode('x')]\n  const stepsSimplified = ['x']\n  const stepsInv = ['x']\n  const stepsSimplifiedInv = ['x']\n  const phrasesInv = ['On obtient le nombre choisi.']\n  nombreChoisi = simplify(math.format(nombreChoisi))\n  const resultatIntermediaire = [nombreChoisi]\n  const calculIntermediaire = [nombreChoisi]\n  let step\n  const longueur = variables.symbolsOp.length + 1\n  for (let i = 1; i < longueur; i++) {\n    const choix = i - 1\n    let symbolOp = variables.symbolsOp[choix]\n    const nameOp = variables.namesOp[choix]\n    const debutPhrase = variables.debutsPhrase[choix]\n    const debutPhraseInv = variables.debutsPhraseInv[choix]\n    const op = variables.op[choix]\n    let stepPrint = ''\n    switch (symbolOp) {\n      case '/':\n        step = new ConstantNode(pickRandom(nombresAutorises2))\n        break\n      case '*':\n        step = new ConstantNode(pickRandom(nombresAutorises2))\n        break\n      case '^':\n        step = new ConstantNode(2)\n        break\n      case '-':\n        step = new ConstantNode(pickRandom(nombresAutorises1))\n        break\n      case '+':\n        step = new ConstantNode(pickRandom(nombresAutorises2))\n        break\n      default :\n        if (symbolOp[0] === '-') symbolOp = symbolOp.replace('-', '')\n        step = parse(symbolOp)\n    }\n    stepsNode.push(step)\n    if (step.isConstantNode) stepPrint = `$${step.toString()}$`\n    let nodeSimplifie = simplify(nodes[i - 1].toString({ parenthesis: 'keep' }), rules)\n    nodes.push(new OperatorNode(op, nameOp, [new ParenthesisNode(nodeSimplifie), step]))\n    steps.push(toTex(nodes[i], debug))\n    nodeSimplifie = simplify(nodes[i].toString({ parenthesis: 'auto' }), rules)\n    nodesInv.push(new OperatorNode(symbolsOpInv[nameOp], namesOpInv[nameOp], [new ParenthesisNode(nodeSimplifie), step]))\n    stepsInv.push(toTex(nodesInv[i - 1], debug))\n    stepsSimplified.push(toTex(nodeSimplifie, debug))\n    const nodeSimplifieInv = parse(nodesInv[i - 1].toString({ parenthesis: 'auto' }))\n    stepsSimplifiedInv.push(toTex(nodeSimplifieInv, debug))\n    phrases.push(debutPhrase + stepPrint)\n    phrasesInv.push(debutPhraseInv + stepPrint)\n    if (i === variables.symbolsOp.length) {\n      steps.push(toTex(nodes[i], debug))\n      stepsSimplified.push(toTex(nodeSimplifie, debug))\n      stepsInv.push(toTex(nodesInv[i - 1], debug))\n      stepsSimplifiedInv.push(toTex(nodeSimplifie, debug))\n      phrases.push('Ecrire le résultat')\n      // phrasesInv.push(debutPhraseInv + stepPrint)\n      phrasesInv.push('Résultat du programme')\n    }\n    if (i === longueur) {\n      calculIntermediaire.push(calculIntermediaire[i - 1])\n      resultatIntermediaire.push(calculIntermediaire[i - 1])\n    } else if (i > 0) {\n      calculIntermediaire.push(new OperatorNode(variables.op[choix], nameOp, [resultatIntermediaire[i - 1], simplify(step, [{ l: 'n', r: 'n' }], { x: nombreChoisi })]))\n      resultatIntermediaire.push(simplify(calculIntermediaire[i], { x: nombreChoisi }))\n    }\n  }\n  const resultatIntermediaireInv = [resultatIntermediaire[longueur - 1]]\n  const calculIntermediaireInv = [resultatIntermediaire[longueur - 1]]\n  for (let i = 1; i < longueur; i++) {\n    const choix = i - 1\n    const nameOp = variables.namesOp[longueur - 2 - choix]\n    if (i === longueur) {\n      calculIntermediaireInv.push(calculIntermediaireInv[i])\n      resultatIntermediaireInv.push(calculIntermediaireInv[i])\n    } else if (i < longueur) {\n      calculIntermediaireInv.push(new OperatorNode(symbolsOpInv[nameOp], namesOpInv[nameOp], [resultatIntermediaireInv[i - 1], simplify(stepsNode[longueur - i], [{ l: 'n', r: 'n' }], { x: nombreChoisi })]))\n      resultatIntermediaireInv.push(simplify(calculIntermediaireInv[i], { x: nombreChoisi }))\n    }\n  }\n  return { phrases: phrases, steps: steps, stepsSimplified: stepsSimplified, stepsInv: stepsInv, stepsSimplifiedInv: stepsSimplifiedInv, phrasesInv: phrasesInv, nodes: nodes, stepProg: stepProg, calculIntermediaire: calculIntermediaire, resultatIntermediaire: resultatIntermediaire, calculIntermediaireInv: calculIntermediaireInv, resultatIntermediaireInv: resultatIntermediaireInv }\n}\n\nfunction traduireProgrammeCalcul (stepProg = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x'], nombreChoisi, debug = false) {\n  const programme = programmeCalcul(stepProg, nombreChoisi, debug)\n  const stepsSolutionDetaillee = Object.values(programme.phrases) // Clone de phrases pour ne pas être touchée par les modifications\n  stepsSolutionDetaillee.forEach(function (step, i) {\n    stepsSolutionDetaillee[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}&'\n    programme.phrases[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}'\n    stepsSolutionDetaillee[i] += '&' + programme.steps[i]\n    if (programme.steps[i] !== programme.stepsSimplified[i]) stepsSolutionDetaillee[i] += '&=' + programme.stepsSimplified[i]\n  })\n  let texte = String.raw` Voici un programme de calcul.\n          <br>\n          $\\begin{aligned}\n          ${programme.phrases.join('\\\\\\\\')}\n          \\end{aligned}$\n          <br>\n          Notons $x$ le nombre choisi.\n          <br>\n          Ecrire le résultat du programme de calcul en fonction de $x$.\n          `\n  const texteCorr = String.raw`Solution détaillée\n          <br>\n          $\\begin{aligned}\n          ${stepsSolutionDetaillee.join('\\\\\\\\')}\n          \\end{aligned}$`\n  if (debug) texte = `${texte}<br>${texteCorr}`\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction ecrireProgrammeCalcul (stepProg = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x'], nombreChoisi, debug = false) {\n  const programme = programmeCalcul(stepProg, nombreChoisi, debug)\n  const stepsSolutionDetaillee = Object.values(programme.phrases) // Clone de phrases pour ne pas être touchée par les modifications\n  stepsSolutionDetaillee.forEach(function (step, i) {\n    stepsSolutionDetaillee[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}&'\n    programme.phrases[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}'\n    stepsSolutionDetaillee[i] += '&' + programme.steps[i]\n    if (programme.steps[i] !== programme.stepsSimplified[i]) stepsSolutionDetaillee[i] += '&=' + programme.stepsSimplified[i]\n  })\n  let texte = String.raw`Voici une expression. Ecrire le programme de calcul correspondant.\n          <br>\n          $${programme.stepsSimplified[programme.stepsSimplified.length - 1]}$\n          `\n  const texteCorr = String.raw`Solution détaillée\n          <br>\n          $\\begin{aligned}\n          ${stepsSolutionDetaillee.join('\\\\\\\\')}\n          \\end{aligned}$`\n  if (debug) texte = `${texte}<br>${texteCorr}`\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction remonterProgrammeCalcul (stepProg = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x'], nombreChoisi, debug = false) {\n  const programme = programmeCalcul(stepProg, nombreChoisi, debug)\n  const stepsSolutionDetaillee = Object.values(programme.phrases) // Clone de phrases pour ne pas être touchée par les modifications\n  const stepsSolutionDetailleeInv = Object.values(programme.phrases) // Clone de phrases pour ne pas être touchée par les modifications\n  const longueur = stepsSolutionDetaillee.length\n  stepsSolutionDetaillee.forEach(function (step, i) {\n    stepsSolutionDetaillee[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}&'\n    programme.phrases[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}'\n    stepsSolutionDetaillee[i] += '&' + programme.steps[i]\n    stepsSolutionDetailleeInv[i] = '&\\\\bullet~\\\\text{' + programme.phrasesInv[i] + '}&'\n    programme.phrasesInv[i] = '&\\\\bullet~\\\\text{' + programme.phrasesInv[i] + '}'\n    if (i === 0) {\n      stepsSolutionDetailleeInv[i] += '&' + toTex(programme.resultatIntermediaireInv[longueur - 2])\n    } else if (i < stepsSolutionDetaillee.length - 1) {\n      stepsSolutionDetailleeInv[i] += '&' + toTex(programme.calculIntermediaireInv[longueur - 1 - i]) + '&&=' + toTex(programme.resultatIntermediaireInv[longueur - 1 - i])\n    } else {\n      stepsSolutionDetailleeInv[i] += '&' + toTex(programme.resultatIntermediaireInv[0])\n    }\n  })\n  nombreChoisi = simplify(math.format(nombreChoisi))\n  let texte = String.raw`On obtient le nombre $${toTex(programme.resultatIntermediaireInv[0])}$ avec le programme suivant.\n          <br>\n          $\\begin{aligned}\n          ${programme.phrases.join('\\\\\\\\')}\n          \\end{aligned}$\n          <br>\n          Quel était le nombre choisi ?\n          `\n  const texteCorr = String.raw`Solution détaillée\n          <br>\n          $\\begin{aligned}\n          ${stepsSolutionDetailleeInv.reverse().join('\\\\\\\\')}\n          \\end{aligned}$\n          <br>\n          Le nombre choisi était donc $${toTex(nombreChoisi)}$.\n          `\n  if (debug) texte = `${texte}<br>${texteCorr}`\n  return { texte: texte, texteCorr: texteCorr }\n}\n\nfunction appliquerProgrammeCalcul (stepProg = ['+', '-', '*', '/', '^2', '2*x', '3*x', '-2*x', '-3*x', 'x^2', '-x^2', 'x', '-x', '*x', '/x'], nombreChoisi, debug = false) {\n  const programme = programmeCalcul(stepProg, nombreChoisi, debug)\n  const stepsSolutionDetaillee = Object.values(programme.phrases) // Clone de phrases pour ne pas être touchée par les modifications\n  stepsSolutionDetaillee.forEach(function (step, i) {\n    stepsSolutionDetaillee[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}&'\n    programme.phrases[i] = '&\\\\bullet~\\\\text{' + programme.phrases[i] + '}'\n    // stepsSolutionDetaillee[i] += '&' + programme.steps[i]\n    if (i === 0) {\n      stepsSolutionDetaillee[i] += '&' + toTex(programme.resultatIntermediaire[0])\n    } else if (i < stepsSolutionDetaillee.length - 1) {\n      stepsSolutionDetaillee[i] += '&' + toTex(programme.calculIntermediaire[i]) + '&&=' + toTex(programme.resultatIntermediaire[i])\n    } else {\n      stepsSolutionDetaillee[i] += '&' + toTex(programme.resultatIntermediaire[i - 1])\n    }\n  })\n  nombreChoisi = simplify(math.format(nombreChoisi))\n  let texte = String.raw`Choisir le nombre $${toTex(nombreChoisi)}$ et effectuer le programme de calcul suivant.\n          <br>\n          $\\begin{aligned}\n          ${programme.phrases.join('\\\\\\\\')}\n          \\end{aligned}$\n          <br>\n          `\n  const texteCorr = String.raw`Solution détaillée\n          <br>\n          $\\begin{aligned}\n          ${stepsSolutionDetaillee.join('\\\\\\\\')}\n          \\end{aligned}$`\n  if (debug) texte = `${texte}<br>${texteCorr}`\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * Résoudre des équations du premier degré\n * @author Frédéric PIOU\n * Référence\n*/\n\nexport default function equationsProgression () {\n  Exercice.call(this)\n  const formulaire = [\n    '0 : Mélange des types de questions',\n    '1 : Programme de calcul : 3 étapes, quatre opérations, cube, carré.',\n    '2 : Programme de calcul : 4 étapes, quatre opérations, cube, carré.',\n    '3 : Programme de calcul : 5 étapes, quatre opérations, cube, carré.',\n    '4 : Programme de calcul : 5 étapes, quatre opérations.',\n    '5 : Résoudre une équation',\n    '6 : Résoudre une équation',\n    '7 : Résoudre une équation',\n    '8 : Résoudre une équation',\n    '9 : Résoudre une équation',\n    '10 : Résoudre une équation',\n    '11 : Résoudre une équation',\n    '12 : Résoudre une équation',\n    '13 : Résoudre une équation',\n    '14 : Résoudre une équation',\n    '15 : Résoudre une équation',\n    '16 : Résoudre une équation',\n    '17 : Résoudre une équation',\n    '18 : Résoudre une équation',\n    '19 : Calculer',\n    '20 : Calculer',\n    '21 : Calculer',\n    '22 : Calculer',\n    '23 : Calculer',\n    '24 : Calculer',\n    '25 : Calculer',\n    '26 : Calculer',\n    '27 : Calculer',\n    '28 : Calculer',\n    '29 : Calculer',\n    '30 : Calculer',\n    '31 : Calculer',\n    '32 : Calculer',\n    '33 : Calculer',\n    '34 : Calculer',\n    '35 : Calculer',\n    '36 : Calculer',\n    '37 : Calculer',\n    '38 : Calculer',\n    '39 : Calculer',\n    '40 : Calculer',\n    '41 : Calculer',\n    '42 : Calculer',\n    '43 : Calculer',\n    '44 : Calculer',\n    '45 : Calculer',\n    '46 : Calculer',\n    '47 : Calculer',\n    '48 : Calculer',\n    '49 : Calculer',\n    '50 : Calculer',\n    '51 : Calculer',\n    '52 : Calculer',\n    '53 : Calculer',\n    '54 : Calculer',\n    '55 : Calculer',\n    '56 : Calculer',\n    '57 : Calculer',\n    '58 : Calculer',\n    '59 : Calculer',\n    '60 : Calculer',\n    '61 : Calculer',\n    '62 : Calculer',\n    '63 : Calculer',\n    '64 : Calculer'\n  ]\n  this.nbQuestions = 0\n  this.besoinFormulaireNumerique = [\n    'Type de question', this.nbQuestions, formulaire.join('\\n')\n  ]\n  this.consigne = ''\n  this.nbCols = 0\n  this.nbColsCorr = 0\n  this.tailleDiaporama = 1\n  this.video = ''\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n  context.isHtml ? (this.spacing = 2.5) : (this.spacing = 1.5)\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.sup = 0 // Type d'exercice\n  this.nouvelleVersion = function (numeroExercice, genDebug = false) {\n    this.nbQuestions = this.NbQuestions > 0 ? this.nbQuestions : this.sup !== 0 ? 1 : formulaire.length - 1\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = [] // À placer même si l'exercice n'a pas vocation à être corrigé\n    let nquestion = 0\n    for (let i = 0, exercice, cpt = 0; i < this.nbQuestions && cpt < 100;) { // Boucle principale où i+1 correspond au numéro de la question\n      nquestion = this.sup === 0 ? cpt + 1 : this.sup\n      if (genDebug) {\n        console.log(`\n        ********************************\n        Exercice ${i + 1} Case ${nquestion}\n        ********************************`)\n      }\n      switch (nquestion) {\n        case 1: {\n          exercice = traduireProgrammeCalcul(['+', '*'], parse(1), genDebug)\n          break\n        }\n        case 2: {\n          exercice = traduireProgrammeCalcul(['*', '+'], parse(1), genDebug)\n          break\n        }\n        case 3: {\n          exercice = traduireProgrammeCalcul(['+', '*', '-'], parse(1), genDebug)\n          break\n        }\n        case 4: {\n          exercice = traduireProgrammeCalcul(['-', '*', '2*x'], parse(1), genDebug)\n          break\n        }\n        case 5: {\n          exercice = resoudreEquation(aleaEquation('a*x+b=c*x+d', { // Ici le type de l'équation\n            a: false, // a est un nombre entier compris entre 1 et 9 (1 et 9 compris)\n            b: false, // idem\n            c: false,\n            d: false, // aleaEquation va choisir au hasard les nombres a, b, c et d\n            test: 'a!=c' // mais elle vérfie que a est différent de c (1000 essais autorisés)\n          }), genDebug)\n          break\n        }\n        case 6: {\n          exercice = resoudreEquation(aleaEquation('a*x+b=c*x+d', {\n            a: false,\n            b: true, // Si c'est true alors le nombre pourra être négatif (mais pas nul)\n            c: false,\n            d: true, // C'est toujours un nombre entier compris entre -9 et 9 cette fois-ci (non nul)\n            test: 'a!=c'\n          }), genDebug)\n          break\n        }\n        case 7: {\n          exercice = resoudreEquation(aleaEquation('a*x+b=c*x+d', {\n            a: true,\n            b: true,\n            c: false,\n            d: true,\n            test: 'a!=c'\n          }), genDebug)\n          break\n        }\n        case 8: {\n          exercice = resoudreEquation(aleaEquation('x/a=b/c', {\n            a: false,\n            b: true,\n            c: false,\n            test: 'a!= 1 and abs(b)%c!=0' // Ici on fait en sorte que b/c ne soit pas simplifiable en utilisant le reste\n          }), genDebug)\n          break\n        }\n        case 9: {\n          exercice = resoudreEquation(aleaEquation('-x/a=b/c', {\n            a: false,\n            b: true,\n            c: false,\n            test: 'abs(b)%c!=0'\n          }), genDebug)\n          break\n        }\n        case 10: {\n          exercice = resoudreEquation(aleaEquation('a/x=b/c', {\n            a: true,\n            b: true,\n            c: false,\n            test: 'abs(b)%c!=0'\n          }), genDebug)\n          break\n        }\n        case 11: {\n          exercice = resoudreEquation(aleaEquation('(a*x+b)/c=d/e', {\n            a: true,\n            b: true,\n            c: false,\n            d: true,\n            e: false,\n            test: 'c>1 and a%c!=0 and abs(d)%e!=0'\n          }), genDebug)\n          break\n        }\n        case 12: {\n          exercice = resoudreEquation(aleaEquation('a*x+b/c=d/e', {\n            a: true,\n            b: true,\n            c: false,\n            d: true,\n            e: false,\n            test: 'c>1 and abs(d)%e!=0 and abs(b)%c!=0'\n          }), genDebug)\n          break\n        }\n        case 13: {\n          exercice = resoudreEquation(aleaEquation('a/(b*x+c)=d/e', {\n            a: true,\n            b: true,\n            c: true,\n            d: true,\n            e: false,\n            test: 'abs(d)%e!=0'\n          }), genDebug)\n          break\n        }\n        case 14: {\n          exercice = resoudreEquation(aleaEquation('A*x+B=C*x+D', {\n            s: 'fraction(randomInt(-9, 9))+fraction(randomInt(-10, 10), 10)', // les calculs avec fraction donnent des valeurs exactes\n            a: 'fraction(randomInt(-9, 9))+fraction(randomInt(-10, 10), 10)', // même si on les additionnent\n            b: 'fraction(randomInt(-9, 9))+fraction(randomInt(-10, 10), 10)', // c'est un avantage\n            c: 'fraction(randomInt(-9, 9))+fraction(randomInt(-10, 10), 10)', //\n            A: 'a+b', // on construit les coefficient de l'équation\n            B: 'c', // pour que la solution\n            C: 'b', // soit le nombre s (qui est décimal)\n            D: 'a*s+c',\n            test: 'A!=0 and D!=0' // Le test permet d'éliminer les cas particuliers\n          }), genDebug)\n          break\n        }\n        case 15: {\n          exercice = resoudreEquation(aleaEquation('a*(b*x+c)=d*x+e', {\n            a: true,\n            b: true,\n            c: true,\n            d: true,\n            e: false,\n            test: 'a!=1 and a*b!=d' // Pour qu'il y ait une solution\n          }), genDebug)\n          break\n        }\n        case 16: {\n          exercice = resoudreEquation(aleaEquation('a*x+b*y=c', { // On résous l'équation en x\n            a: true, // On aura donc y en fonction de x\n            b: true,\n            c: true\n          }), genDebug)\n          break\n        }\n        case 17: {\n          exercice = resoudreEquation(aleaEquation('a*x^2+b=a*x*(x+c)', {\n            a: true, // On s'arrange pour qu'on puisse\n            b: true, // se ramener à une équation\n            c: true // du premier degré\n          }), genDebug)\n          break\n        }\n        case 18: {\n          exercice = resoudreEquation(aleaEquation('x/a=y', {\n            a: false,\n            test: 'a!=1'\n          }), genDebug)\n          break\n        }\n        case 19: {\n          exercice = calculExpression(aleaExpressionLitterale('a/b+c/d',\n            aleaAssignationVariables({\n              a: false,\n              b: 'randomInt(2,100)',\n              c: false,\n              d: 'randomInt(2,100)',\n              test: '(d%b==0 or b%d==0) and gcd(a,b)==1 and gcd(c,d)==1'\n            })).toString(), false, genDebug)\n          break\n        }\n        case 20: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x+b*x', aleaAssignationVariables({\n            a: 'randomInt(2,100)',\n            b: 'randomInt(2,100)'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 21: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x+b*x-c*x', aleaAssignationVariables({\n            a: 'randomInt(2,100)',\n            b: 'randomInt(2,100)',\n            c: 'randomInt(2,100)',\n            test: 'a+b>=c'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 22: {\n          exercice = calculExpression(aleaExpressionLitterale('a/b*x+c/d*x', aleaAssignationVariables({\n            a: false,\n            b: 'randomInt(2,100)',\n            c: false,\n            d: 'randomInt(2,100)',\n            test: '(d%b==0 or b%d==0) and gcd(a,b)==1 and gcd(c,d)==1'\n            // On souhaite que l'une des deux fractions soit simplifiable\n          })).toString(), false, genDebug)\n          break\n        }\n        case 23: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x^2+b*x+c*x^2', aleaAssignationVariables({\n            a: 'randomInt(1,20)',\n            b: 'randomInt(1,20)',\n            c: 'randomInt(1,20)'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 24: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x^2+b*x+c', aleaAssignationVariables({\n            a: 'randomInt(1,15)^2',\n            c: 'randomInt(1,15)^2',\n            b: '2*sqrt(a)*sqrt(c)'\n          })).toString(), true, genDebug)\n          break\n        }\n        case 25: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x^2-b*x+c', aleaAssignationVariables({\n            a: 'randomInt(1,15)^2',\n            c: 'randomInt(1,15)^2',\n            b: '2*sqrt(a)*sqrt(c)'\n          })).toString(), true, genDebug)\n          break\n        }\n        case 26: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x^2-b', aleaAssignationVariables({\n            a: 'randomInt(1,15)^2',\n            b: 'randomInt(1,15)^2'\n          })).toString(), true, genDebug)\n          break\n        }\n        case 27: {\n          exercice = ecrireProgrammeCalcul(['-', '*', '2*x'], parse(1), genDebug)\n          break\n        }\n        case 28: {\n          exercice = ecrireProgrammeCalcul(['-', '*', '2*x'], parse(1), genDebug)\n          break\n        }\n        case 29: {\n          exercice = calculExpression(aleaExpressionLitterale('a+c/d', aleaAssignationVariables({\n            a: false,\n            b: 'randomInt(2,100)',\n            c: false,\n            d: 'randomInt(2,100)',\n            test: 'c!=d and c%d!=0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 30: {\n          exercice = calculExpression(aleaExpressionLitterale('a-c/d', aleaAssignationVariables({\n            a: false,\n            b: 'randomInt(2,100)',\n            c: false,\n            d: 'randomInt(2,100)',\n            test: 'c!=d and c%d!=0 and a-c/d>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 31: {\n          exercice = calculExpression(aleaExpressionLitterale('a/b-c/d', aleaAssignationVariables({\n            a: false,\n            b: 'randomInt(2,100)',\n            c: false,\n            d: 'randomInt(2,100)',\n            test: 'gcd(a,b)==1 and gcd(c,d)==1 and d!=b and (d%b==0 or b%d==0) and a/b-c/d>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 32: {\n          exercice = resoudreEquation(aleaEquation('a*x+b>c*x+d', { // On résoud maintenant une inéquation\n            a: false,\n            b: false,\n            c: false,\n            d: false,\n            test: 'a!=c'\n          }), genDebug)\n          break\n        }\n        case 33: {\n          exercice = resoudreEquation(aleaEquation('a*x^2+b*x+c=0', { // On résoud une équation du second degré\n            s: true,\n            t: true,\n            a: true,\n            b: 'a*(-s-t)', // les racines sont des entiers (seuls gérés par mathsteps)\n            c: 'a*s*t'\n          }, genDebug), genDebug)\n          break\n        }\n        case 34: {\n          exercice = traduireProgrammeCalcul(['+', '*'], parse(1), genDebug)\n          break\n        }\n        case 35: {\n          exercice = ecrireProgrammeCalcul(['*', '+'], parse(1), genDebug)\n          break\n        }\n        case 36: {\n          exercice = traduireProgrammeCalcul(['*', '2*x'], parse(1), genDebug)\n          break\n        }\n        case 37: {\n          exercice = traduireProgrammeCalcul(['-', '-2*x'], parse(1), genDebug)\n          break\n        }\n        case 38: {\n          exercice = traduireProgrammeCalcul(['-', '/', 'x'], parse(1), genDebug)\n          break\n        }\n        case 39: {\n          exercice = appliquerProgrammeCalcul(\n            ['-', '/', 'x', '*', 'x^2'],\n            aleaAssignationVariables(\n              {\n                a: true,\n                b: false,\n                c: 'fraction(a,b)',\n                test: 'a%b!=0'\n              }).c, genDebug)\n          break\n        }\n        case 40: {\n          exercice = remonterProgrammeCalcul(\n            ['-', '/', '*', '+'],\n            aleaAssignationVariables(\n              {\n                a: true,\n                b: false,\n                c: 'fraction(a,b)',\n                test: 'a%b!=0'\n              }).c, genDebug)\n          break\n        }\n        case 41: {\n          exercice = remonterProgrammeCalcul(\n            ['-'],\n            aleaAssignationVariables(\n              {\n                a: false\n              }).a, genDebug)\n          break\n        }\n        case 42: {\n          exercice = remonterProgrammeCalcul(\n            ['-', '*'],\n            aleaAssignationVariables(\n              {\n                a: false\n              }).a, genDebug)\n          break\n        }\n        case 43: {\n          exercice = calculExpression(aleaExpressionLitterale('(a/b)*(c/d)', aleaAssignationVariables({\n            a: false,\n            b: 'randomInt(2,100)',\n            c: false,\n            d: 'randomInt(2,100)',\n            test: 'gcd(a,b)==1 and gcd(c,d)==1 and d!=b and (d%b==0 or b%d==0) and a/b-c/d>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 44: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x+b*x', aleaAssignationVariables({\n            a: 'round(random(1,10),1)',\n            b: 'round(random(-10,10),1)',\n            test: 'b!=0 and a+b>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 45: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b', aleaAssignationVariables({\n            a: false,\n            b: false,\n            test: 'a>1 and b>1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 46: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b+c*x', aleaAssignationVariables({\n            a: false,\n            b: false,\n            c: true,\n            test: 'b>1 and a>1 and a*b+c>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 47: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b+c*x', aleaAssignationVariables({\n            a: false,\n            b: false,\n            c: true,\n            test: 'b>1 and a>1 and a*b+c>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 48: {\n          exercice = calculExpression(aleaExpressionLitterale('x*a*x*b', aleaAssignationVariables({\n            a: false,\n            b: false,\n            test: 'b>1 and a>1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 49: {\n          exercice = calculExpression(aleaExpressionLitterale('x*a*x+b*x^2', aleaAssignationVariables({\n            a: false,\n            b: true,\n            test: 'a>1 and a+b>0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 50: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b*x*c*x+d*x^2', aleaAssignationVariables({\n            a: false,\n            b: false,\n            c: false,\n            d: true,\n            test: 'a>1 and b>1 and c>1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 51: {\n          exercice = traduireProgrammeCalcul(['+', '/', '-x^2'], parse(1), genDebug)\n          break\n        }\n        case 52: {\n          exercice = traduireProgrammeCalcul(['*', '-x', '/'], parse(1), genDebug)\n          break\n        }\n        case 53: {\n          exercice = traduireProgrammeCalcul(['/', '-x', '*'], parse(1), genDebug)\n          break\n        }\n        case 54: {\n          exercice = appliquerProgrammeCalcul(['+', '*', '-'], aleaAssignationVariables(\n            {\n              a: true\n            }).a, genDebug)\n          break\n        }\n        case 55: {\n          exercice = remonterProgrammeCalcul(['*', '-', '/'], aleaAssignationVariables(\n            {\n              a: true\n            }).a, genDebug)\n          break\n        }\n        case 56: {\n          exercice = remonterProgrammeCalcul(['+', '*', '-'], aleaAssignationVariables(\n            {\n              a: true\n            }).a, genDebug)\n          break\n        }\n        case 57: {\n          exercice = calculExpression(aleaExpressionLitterale('a/b+c/d',\n            aleaAssignationVariables({\n              a: true,\n              b: 'randomInt(2,100)',\n              c: true,\n              d: 'randomInt(2,100)',\n              test: '(d%b==0 or b%d==0) and gcd(abs(a),b)==1 and gcd(abs(c),d)==1'\n            })).toString(), false, genDebug)\n          break\n        }\n        case 58: {\n          exercice = calculExpression(aleaExpressionLitterale('a+c/d', aleaAssignationVariables({\n            a: true,\n            b: 'randomInt(2,100)',\n            c: true,\n            d: 'randomInt(2,100)',\n            test: 'c!=d and c%d!=0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 59: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x+b*x', aleaAssignationVariables({\n            a: 'round(random(-10,10),1)',\n            b: 'round(random(-10,10),1)',\n            test: 'b!=0 and a!=0'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 60: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b', aleaAssignationVariables({\n            a: true,\n            b: true,\n            test: 'a!= 1 and b!=1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 61: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b+c*x', aleaAssignationVariables({\n            a: true,\n            b: true,\n            c: true,\n            test: 'a!= 1 and b!=1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 62: {\n          exercice = calculExpression(aleaExpressionLitterale('x*a*x*b', aleaAssignationVariables({\n            a: true,\n            b: true,\n            test: 'a!=1 and b!=1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 63: {\n          exercice = calculExpression(aleaExpressionLitterale('x*a*x+b*x^2', aleaAssignationVariables({\n            a: true,\n            b: true,\n            test: 'a!=1 and b!=1'\n          })).toString(), false, genDebug)\n          break\n        }\n        case 64: {\n          exercice = calculExpression(aleaExpressionLitterale('a*x*b*x*c*x+d*x^2', aleaAssignationVariables({\n            a: true,\n            b: true,\n            c: true,\n            d: true,\n            test: 'a!= 1 and b!=1 and c!=1'\n          })).toString(), false, genDebug)\n          break\n        }\n      }\n      if (this.questionJamaisPosee(i, nquestion)) {\n        this.listeQuestions.push(exercice.texte)\n        this.listeCorrections.push(exercice.texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n}\n","/*\n  For determining the type of a mathJS node.\n */\n\nconst NodeType = {}\n\nNodeType.isOperator = function (node, operator = null) {\n  return node.type === 'OperatorNode' &&\n         node.fn !== 'unaryMinus' &&\n         '*+-/^'.includes(node.op) &&\n         (operator ? node.op === operator : true)\n}\n\nNodeType.isParenthesis = function (node) {\n  return node.type === 'ParenthesisNode'\n}\n\nNodeType.isUnaryMinus = function (node) {\n  return node.type === 'OperatorNode' && node.fn === 'unaryMinus'\n}\n\nNodeType.isFunction = function (node, functionName = null) {\n  if (node.type !== 'FunctionNode') {\n    return false\n  }\n  if (functionName && node.fn.name !== functionName) {\n    return false\n  }\n  return true\n}\n\nNodeType.isSymbol = function (node, allowUnaryMinus = false) {\n  if (node.type === 'SymbolNode') {\n    return true\n  } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {\n    return NodeType.isSymbol(node.args[0], false)\n  } else {\n    return false\n  }\n}\n\nNodeType.isConstant = function (node, allowUnaryMinus = false) {\n  if (node.type === 'ConstantNode') {\n    return true\n  } else if (allowUnaryMinus && NodeType.isUnaryMinus(node)) {\n    if (NodeType.isConstant(node.args[0], false)) {\n      const value = parseFloat(node.args[0].value)\n      return value >= 0\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nNodeType.isConstantFraction = function (node, allowUnaryMinus = false) {\n  if (NodeType.isOperator(node, '/')) {\n    return node.args.every(n => NodeType.isConstant(n, allowUnaryMinus))\n  } else {\n    return false\n  }\n}\n\nNodeType.isConstantOrConstantFraction = function (node, allowUnaryMinus = false) {\n  if (NodeType.isConstant(node, allowUnaryMinus) ||\n      NodeType.isConstantFraction(node, allowUnaryMinus)) {\n    return true\n  } else {\n    return false\n  }\n}\n\nNodeType.isIntegerFraction = function (node, allowUnaryMinus = false) {\n  if (!NodeType.isConstantFraction(node, allowUnaryMinus)) {\n    return false\n  }\n  let numerator = node.args[0]\n  let denominator = node.args[1]\n  if (allowUnaryMinus) {\n    if (NodeType.isUnaryMinus(numerator)) {\n      numerator = numerator.args[0]\n    }\n    if (NodeType.isUnaryMinus(denominator)) {\n      denominator = denominator.args[0]\n    }\n  }\n  return (Number.isInteger(parseFloat(numerator.value)) &&\n          Number.isInteger(parseFloat(denominator.value)))\n}\n\nmodule.exports = NodeType\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","Change","changeFormatFunctionMap","OP_TO_STRING","COMPARATOR_TO_STRING","getChangeNodes","node","filter","changeGroup","getOldChangeNodes","step","oldNode","oldEquation","leftNode","rightNode","getNewChangeNodes","newNode","newEquation","nodesToString","nodes","duplicates","forEach","strings","map","toTex","Set","length","slice","join","formatChange","changeType","console","error","changeDescription","ChangeText","ChangeTypes","oldNodes","absNode","NodeType","newNodes","opNode","op","termNodes","before","after","comparator","ABSOLUTE_VALUE","ADD_COEFFICIENT_OF_ONE","ADD_EXPONENT_OF_ONE","ADD_FRACTIONS","ADD_NUMERATORS","ADD_POLYNOMIAL_TERMS","ADD_TO_BOTH_SIDES","BREAK_UP_FRACTION","CANCEL_EXPONENT","CANCEL_EXPONENT_AND_ROOT","CANCEL_MINUSES","CANCEL_ROOT","CANCEL_TERMS","COLLECT_AND_COMBINE_LIKE_TERMS","COLLECT_EXPONENTS","COLLECT_LIKE_TERMS","COMBINE_NUMERATORS","COMMON_DENOMINATOR","COMBINE_UNDER_ROOT","CONVERT_INTEGER_TO_FRACTION","CONVERT_MULTIPLICATION_TO_EXPONENT","DISTRIBUTE","DISTRIBUTE_NEGATIVE_ONE","DISTRIBUTE_NTH_ROOT","DIVIDE_FRACTION_FOR_ADDITION","DIVIDE_FROM_BOTH_SIDES","DIVISION_BY_NEGATIVE_ONE","DIVISION_BY_ONE","EVALUATE_DISTRIBUTED_NTH_ROOT","FACTOR_INTO_PRIMES","GROUP_COEFFICIENTS","GROUP_TERMS_BY_ROOT","MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION","MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE","MULTIPLY_BY_INVERSE","MULTIPLY_BY_ZERO","MULTIPLY_COEFFICIENTS","MULTIPLY_DENOMINATORS","MULTIPLY_FRACTIONS","MULTIPLY_NUMERATORS","MULTIPLY_POLYNOMIAL_TERMS","MULTIPLY_TO_BOTH_SIDES","NTH_ROOT_VALUE","NO_CHANGE","REARRANGE_COEFF","REDUCE_ZERO_NUMERATOR","REMOVE_EXPONENT_BY_ONE","REDUCE_EXPONENT_BY_ZERO","REMOVE_ADDING_ZERO","REMOVE_MULTIPLYING_BY_NEGATIVE_ONE","REMOVE_MULTIPLYING_BY_ONE","RESOLVE_DOUBLE_MINUS","SIMPLIFY_ARITHMETIC","SIMPLIFY_DIVISION","SIMPLIFY_FRACTION","SIMPLIFY_LEFT_SIDE","SIMPLIFY_RIGHT_SIDE","SIMPLIFY_SIGNS","SIMPLIFY_TERMS","STATEMENT_IS_FALSE","STATEMENT_IS_TRUE","SUBTRACT_FROM_BOTH_SIDES","SWAP_SIDES","UNARY_MINUS_TO_NEGATIVE_ONE","math","create","all","config","number","dateDePublication","debug","log","parenthesis","parse","transform","path","parent","isOperatorNode","isParenthesisNode","content","fn","implicit","type","OperatorNode","node2","frac","ParenthesisNode","isConstantNode","isSymbolNode","replaceAll","aleaExpressionLitterale","expression","assignations","a","b","c","d","simplify","l","r","aleaAssignationVariables","variables","test","cpt","v","Object","keys","evaluate","n","window","notify","traverserEtapes","steps","result","substeps","calculExpression","factoriser","factor","simplifyExpression","repetition","stepsExpression","expressionPrint","changement","commentairesExclus","String","raw","COLLECT_POLYNOMIAL_EXPONENTS","commentaires","FIND_GCD","CANCEL_GCD","assign","FIND_ROOTS","texte","texteCorr","aleaEquation","equation","comparators","sides","comparatorSearch","split","resoudreEquation","equationPrint","solveEquation","stepsNewEquation","oldLeftNode","newLeftNode","oldRightNode","newRightNode","color","replace","stepChange","pop","programmeCalcul","stepProg","nombreChoisi","rules","symbolsOp","values","namesOp","namesOpInv","add","subtract","multiply","divide","symbolsOpInv","debutsPhrase","debutsPhraseInv","nombresAutorises1","nombresAutorises2","SymbolNode","nodesInv","phrases","stepsNode","stepsSimplified","stepsInv","stepsSimplifiedInv","phrasesInv","resultatIntermediaire","format","calculIntermediaire","longueur","choix","symbolOp","nameOp","debutPhrase","debutPhraseInv","stepPrint","ConstantNode","pickRandom","nodeSimplifie","nodeSimplifieInv","x","resultatIntermediaireInv","calculIntermediaireInv","traduireProgrammeCalcul","programme","stepsSolutionDetaillee","ecrireProgrammeCalcul","remonterProgrammeCalcul","stepsSolutionDetailleeInv","reverse","appliquerProgrammeCalcul","equationsProgression","formulaire","context","sup","genDebug","NbQuestions","nquestion","exercice","e","s","A","B","C","D","t","listeQuestionsToContenu","operator","includes","functionName","name","allowUnaryMinus","isUnaryMinus","isSymbol","isConstant","parseFloat","value","isOperator","every","isConstantFraction","numerator","denominator","Number","isInteger","module","exports"],"sourceRoot":""}