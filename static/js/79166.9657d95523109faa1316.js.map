{"version":3,"file":"js/79166.9657d95523109faa1316.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4P10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, exposant, arrondi, arrondiVirgule, texFractionReduite, produitsEnCroix, quatriemeProportionnelle, calcul, texNombrec, prenomF, prenom, texNombre, nombreAvecEspace, miseEnEvidence, texPrix, katexPopup2, numAlpha } from '../../modules/outils.js'\nexport const titre = 'Résoudre des problèmes de grandeurs composées et de conversion d’unités complexes'\n\n/**\n * problèmes de grandeurs composées\n * @author Jean-Claude Lhote\n * Référence : 4P10\n */\nexport default function ProblemesGrandeursComposees () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  context.isHtml ? (this.spacing = 3) : (this.spacing = 1.5)\n  context.isHtml ? (this.spacingCorr = 3) : (this.spacingCorr = 2)\n  this.sup = false\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    // let listeIndex_disponibles=[1,2,3,4,5,6,7,8,9,10,11,12,13,14];\n    // let listeIndex=combinaisonListes(listeIndex_disponibles,this.nbQuestions);\n    let grandeurs = []\n    const liste7 = combinaisonListes([0, 1, 2], this.nbQuestions)\n    let flag7 = 0\n    let flag2 = 0\n    const liste2 = combinaisonListes([0, 1], this.nbQuestions)\n    let appareil, puissance, dureeMax, nbQuartsDHeures, prixkWh, h1, h2, l, L, deltaT, r, h\n    let concentration2, tailleFichier\n    let d1, d2, k, n1, n2, I1, I2, allures, v1, v2, volume1, volume2, vMax, unites\n    if (!this.sup) {\n      // Si aucune grandeur n'est saisie\n      grandeurs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    } else {\n      if (typeof this.sup === 'number') {\n        // Si c'est un nombre c'est qu'il y a qu'une seule grandeur\n        grandeurs[0] = this.sup % 15\n        this.nbQuestions = 1\n      } else {\n        grandeurs = this.sup.split('-') // Sinon on créé un tableau à partir des valeurs séparées par des -\n        this.nbQuestions = grandeurs.length\n      }\n    }\n\n    const listeIndex = combinaisonListes(grandeurs, this.nbQuestions)\n    let typeAide = 1\n    if (!context.isHtml) typeAide = 0\n    const solutes = [\n      ['sel', 'd\\'eau', 300],\n      ['sucre', 'd\\'eau', 2000],\n      ['dioxyde de carbone', 'd\\'eau', 3],\n      ['bicarbonate de sodium', 'd\\'eau', 9],\n      ['carbonate de sodium', 'd\\'eau', 300]\n    ] // soluté, masse maximale en gramme pour saturer 1 L de solvant\n    const materiaux = [\n      ['Paladium', 12000],\n      ['acier', 7800],\n      ['fonte', 7100],\n      ['aluminium', 2700],\n      ['argent', 10500],\n      ['bronze', 8800],\n      ['cuivre', 8960],\n      ['fer', 7860],\n      ['lithium', 530],\n      ['mercure', 13545],\n      ['nickel', 8900],\n      ['or', 19300],\n      ['platine', 21450],\n      ['titane', 4500],\n      ['zinc', 7150]\n    ]\n    const villes = [\n      ['Nice', 342637, 71.9],\n      ['Montpellier', 281613, 56.9],\n      ['Rennes', 216268, 50.4],\n      ['Dijon', 155090, 40.4],\n      ['Orléans', 114782, 27.5],\n      ['Clermont-Ferrand', 142686, 42.7],\n      ['Nantes', 306694, 65.2],\n      ['Paris', 2190327, 105.4],\n      ['Lyon', 515695, 47.9],\n      ['Marseille', 862211, 240.6],\n      ['Bordeaux', 252040, 49.4],\n      ['Nancy', 104592, 15],\n      ['Toulouse', 475438, 118.3],\n      ['Lille', 232440, 34.8],\n      ['Strasbourg', 279284, 78.3]\n    ] // [Ville, population, superfice en ha, année du recensement]\n    const locations = [\n      ['un vélo', 1.5, 2, 8],\n      ['un canoé', 10, 2, 4],\n      ['des rollers', 7, 2, 5],\n      ['un char à voile', 12, 2, 4]\n    ]\n    const cours = [\n      ['de piano', 20],\n      ['de maths', 25],\n      ['de yoga', 5],\n      ['de dessin', 12],\n      ['de voile', 15]\n    ]\n    const fruits = [\n      ['pêches', 4, 10, 30],\n      ['Noix', 5.4, 4, 13],\n      ['cerises', 5.6, 11, 20],\n      ['pommes', 2.2, 20, 40],\n      ['framboises', 15, 1, 5],\n      ['fraises', 7.5, 5, 10],\n      ['citrons', 1.5, 15, 30],\n      ['bananes', 1.5, 15, 25]\n    ]\n    const appareils = [\n      ['radiateur', 2000, 20],\n      ['téléviseur', 350, 12],\n      ['four électrique', 2500, 4],\n      ['ordinateur', 450, 8]\n    ] // [appareil,puissance,durée maxi de fonctionnement]\n    const liquides = [\n      ['de lait entier', 1.032],\n      ['d\\'essence', 0.755],\n      ['de diesel', 0.83],\n      ['d\\'huile', 0.91],\n      ['de bière', 0.9],\n      ['de sable', 1.6]\n    ] // [nom,densité]\n    const rivieres = [\n      ['Marne', 'Gournay-sur-Marne', 110, 550, 'avril 1983', 'la ', 'de la '],\n      ['Seine', 'Alfortville', 218, 2100, 'janvier 1982', 'la ', 'de la '],\n      ['Oise', 'Pont-Sainte-Maxence', 109, 665, 'février 1995', 'l\\'', 'de l\\''],\n      ['Loire', 'Saint-Nazaire', 931, 5350, 'décembre 1999', 'la ', 'de la'],\n      ['Rhin', 'Strasbourg', 951, 3310, 'juin 2016', 'le ', 'du '],\n      ['Rhône', 'Beaucaire', 1690, 11500, 'décembre 2003', 'le ', 'du '],\n      ['Meuse', 'Chooz', 144, 1610, 'janvier 1995', 'la ', 'de la ']\n    ]\n    // [Nom de rivière,Lieu de passage,débit moyen annuel, débitmax, date de la crue, article défini, article partitif]\n    const vitesses = [\n      ['sur un vélo', 4, 12, 8],\n      ['dans un train', 50, 100, 5],\n      ['dans une voiture', 15, 30, 5],\n      ['en avion', 150, 250, 12],\n      ['à pied', 2, 4, 5]\n    ] // [moyen de transport, vitesse min,vitesse max en m/s,durée max en h]\n    for (\n      let i = 0,\n        j,\n        index,\n        index1,\n        index2,\n        duree,\n        quidam,\n        nbheures,\n        nbminutes,\n        nbsecondes,\n        vitesseMoy,\n        distance,\n        masse,\n        masse2,\n        masse3,\n        prix1,\n        prix2,\n        prix3,\n        texte,\n        texteCorr,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      switch (parseInt(listeIndex[i]) % 15) {\n        case 1: // problème de consommation éléctrique\n          index = randint(0, 3)\n          appareil = appareils[index][0]\n          puissance = appareils[index][1]\n          dureeMax = appareils[index][2]\n          nbQuartsDHeures = randint(0, 3)\n          nbheures = randint(dureeMax / 4, dureeMax, [1])\n          duree = nbheures + nbQuartsDHeures * 0.25\n          prixkWh = calcul(randint(0, 5) / 100 + 0.14)\n          texte = `L'étiquette apposée au dos d'un ${appareil} indique une puissance de ${puissance} Watts. On le fait fonctionner pendant ${Math.floor(\n            duree\n          )} heures `\n          if (nbQuartsDHeures !== 0) { texte += `et ${nbQuartsDHeures * 15} minutes` }\n          texte += `.<br>Le prix d'un kWh est de ${texNombrec(\n            prixkWh\n          )} €.<br>`\n          if (context.isHtml) {\n            // les boutons d'aide uniquement pour la version html\n          }\n          texte +=\n            numAlpha(0) +\n            ' Exprimer en kWh l\\' ' +\n            katexPopup2(\n              numeroExercice + i + 1,\n              typeAide,\n              'énergie',\n              'Définition : énergie (grandeur physique)',\n              'C’est le produit de la puissance électrique (Watt) par le temps (s) et se mesure en Joule (J).<br>1 J=1 W × 1 s.<br>Cependant pour mesurer des énergies plus importantes on utilise plutôt le kiloWattheure (kWh).<br>1 kWh=1000 W × 1 h.'\n            ) +\n            ' consommée.<br>'\n          texte += numAlpha(1) + ' Calculer la dépense correspondante.'\n          texteCorr =\n            numAlpha(0) +\n            ` Un ${appareil} d'une puissance de ${puissance} Watts qui fonctionne pendant ${Math.floor(\n              duree\n            )} heures `\n          if (nbQuartsDHeures !== 0) { texteCorr += `et ${nbQuartsDHeures * 15} minutes` }\n          texteCorr += ' consomme : <br>'\n          if (nbQuartsDHeures !== 0) {\n            texteCorr += `$${nbheures}\\\\text{ h } ${nbQuartsDHeures * 15\n              } = ${nbheures}\\\\text{ h} + ${texFractionReduite(\n                nbQuartsDHeures,\n                4\n              )}\\\\text{ h} =${texNombre(\n                nbheures + nbQuartsDHeures * 0.25\n              )}\\\\text{ h}$<br>`\n          }\n          texteCorr += `$${puissance}\\\\text{ W}\\\\times${texNombre(\n            duree\n          )}\\\\text{ h}=${texNombre(\n            puissance / 1000\n          )}\\\\text{ kW}\\\\times${texNombre(duree)}\\\\text{ h}=${texNombre(\n            calcul(puissance * duree * 0.001)\n          )}\\\\text{ kWh}.$<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` Le prix de cette énergie consommée est : $${texNombre(\n              prixkWh\n            )}$ €$\\\\text{ /kWh} \\\\times${texNombre(\n              calcul(puissance * duree * 0.001)\n            )}\\\\text{ kWh}`\n          if (!((prixkWh * puissance * duree) / 10 === Math.round((prixkWh * puissance * duree) / 10))) {\n            texteCorr += `\\\\approx${arrondiVirgule(((prixkWh * puissance) / 1000) * duree, 2)}$ €`\n          } else {\n            texteCorr += `=${arrondiVirgule(\n              ((prixkWh * puissance) / 1000) * duree,\n              2\n            )}$ €`\n          }\n          break\n        case 2: // problèmes de volumes\n          index1 = liste2[flag2]\n          flag2++\n          switch (index1) {\n            case 0: // Volume d'une piscine\n              h1 = 180 + randint(0, 10) * 10\n              h2 = 80 + randint(0, 4) * 10\n              l = 5 + randint(0, 5)\n              L = l * 2 + randint(0, 4) * 2\n              deltaT = randint(2, 5)\n              texte = `Une piscine a la forme d'un prisme droit. La profondeur à son extrémité nord est de ${h1} cm et la profondeur à son extrémité sud est de ${h2} cm.<br>`\n              texte += `D'une extrémité à l'autre la pente au fond de la piscine est régulière.<br>La largeur de la piscine (Est-Ouest) est de ${l} m et sa longueur (Nord-Sud) est de ${L} m.<br>`\n              texte +=\n                numAlpha(0) +\n                ' Calculer le ' +\n                katexPopup2(\n                  numeroExercice + i * 3,\n                  typeAide,\n                  'volume',\n                  'Définition : volume (grandeur physique)',\n                  `C’est le produit de trois longueurs ou le produit d'une aire et d'une longueur.<br>L'unité de mesure du volume est le mètre cube (m${exposant(\n                    3\n                  )}) mais on peut aussi rencontrer le litre (L) avec comme correspondance 1dm${exposant(\n                    3\n                  )}=1L`\n                ) +\n                ` d'eau en m${exposant(\n                  3\n                )} contenu dans cette piscine quand elle est pleine.<br>`\n              texte +=\n                numAlpha(1) +\n                ` Sachant que pour élever la température d'un litre d'eau de 1 degré, il faut une énergie de 1,162 Wattheure.<br> Quelle est l'énergie consommée en kWh pour augmenter de ${deltaT} degrés ?<br>`\n              texteCorr =\n                numAlpha(0) +\n                ` La base de ce prisme droit est un trapèze rectangle de petite base ${h2} cm, de grande base ${h1} cm et de hauteur ${L} m.<br>`\n              texteCorr += `$\\\\mathcal{A}=\\\\dfrac{\\\\left(${h1}\\\\text{ cm}+${h2}\\\\text{ cm}\\\\right)}{2}\\\\times${L}\\\\text{ m}$`\n              texteCorr += ` $=\\\\dfrac{\\\\left(${arrondiVirgule(\n                h1 / 100\n              )}\\\\text{ m}+${arrondiVirgule(\n                h2 / 100\n              )}\\\\text{ m}\\\\right)}{2}\\\\times${L}\\\\text{ m}$`\n              texteCorr += ` $=\\\\dfrac{${arrondiVirgule(\n                (h1 + h2) / 100\n              )}\\\\text{ m}}{2}\\\\times${L}\\\\text{ m}$`\n              texteCorr += ` $=${arrondiVirgule(\n                (h1 + h2) / 200\n              )}\\\\text{ m}\\\\times${L}\\\\text{ m}$`\n              texteCorr += ` $=${arrondiVirgule(\n                ((h1 + h2) / 200) * L\n              )}\\\\text{ m}$${exposant(2)}<br>`\n              texteCorr += 'Le volume de ce prisme et donc par extension le volume d\\'eau conteu dans la piscine est :<br>'\n              texteCorr += `$\\\\mathcal{A}\\\\times\\\\mathcal{h}=${arrondiVirgule(\n                ((h1 + h2) / 200) * L\n              )}\\\\text{ m}^2\\\\times${l}\\\\text{ m}$`\n              texteCorr += ` $=${arrondiVirgule(\n                ((h1 + h2) / 200) * L * l\n              )}$m${exposant(3)}.<br>`\n              texteCorr +=\n                numAlpha(1) +\n                ` Convertissons le volume de la piscine en litres : $${arrondiVirgule(\n                  ((h1 + h2) / 200) * L * l\n                )}\\\\text{ m}^3=${texNombre(\n                  (h1 + h2) * L * l * 5\n                )}\\\\text{ dm}^3=${texNombre(\n                  (h1 + h2) * L * l * 5\n                )}\\\\text{ L}$<br>`\n              texteCorr += ` L'énergie consomée pour élever la température de l'eau de cette piscine de ${deltaT} degrés est :<br>`\n              texteCorr += `$\\\\mathcal{E}=${texNombre(\n                (h1 + h2) * L * l * 5\n              )}\\\\text{ L}\\\\times${deltaT}\\\\text{ °C}\\\\times 1,162 \\\\dfrac{\\\\text{Wh}}{\\\\text{°C}\\\\times\\\\text{L}}=${texNombre(\n                arrondi((h1 + h2) * L * l * 5 * deltaT * 1.162, 3)\n              )}\\\\text{ Wh}=${texNombre(\n                arrondi((((h1 + h2) * L * l) / 200) * deltaT * 1.162, 7)\n              )}\\\\text{ kWh}$<br>`\n              break\n            case 1: // Volume d'un tonneau cylindrique\n              index2 = randint(0, 5)\n              r = randint(10, 15) * 2\n              h = randint(0, 10) + r * 4\n              texte = `Un tonneau cylindrique a un rayon de ${r} cm et une hauteur de ${h} cm.<br>`\n              texte +=\n                numAlpha(0) +\n                ' Calculer le ' +\n                katexPopup2(\n                  numeroExercice + i * 3,\n                  typeAide,\n                  'volume',\n                  'Définition : volume (grandeur physique)',\n                  'C’est le produit de trois longueurs ou le produit d\\'une aire et d\\'une longueur.<br>L\\'unité de mesure du volume est le mètre cube ($\\\\text{m}^3$) mais on peut aussi rencontrer le litre (L) avec comme correspondance $\\\\text{1dm}^3=\\\\text{1L}$'\n                ) +\n                ` en dm${exposant(3)} à 0,1 près de ce tonneau.<br>`\n              texte +=\n                numAlpha(1) +\n                ` Si on le remplit ${liquides[index2][0]} (dont la ` +\n                katexPopup2(\n                  numeroExercice + i * 3,\n                  typeAide,\n                  'densité',\n                  'Définition : densité (grandeur physique)',\n                  'La densité d\\'une substance est égale à la masse volumique de la substance divisée par la masse volumique du corps de référence à la même température.<br>Pour les liquides et les solides, l\\'eau est utilisée comme référence (sa masse volumique est de 1kg/dm$^3$), pour les gaz, la mesure s\\'effectue par rapport à l\\'air.<br>Donc pour les liquides, la densité est égale à la masse volumique exprimée en kg/dm$^3$.'\n                ) +\n                ` est de ${texNombrec(liquides[index2][1])}), quelle masse ${liquides[index2][0]\n                } en kg contiendra-t-il au gramme près ?<br>`\n              texteCorr =\n                numAlpha(0) +\n                ` Le volume d'un cylindre est donné par la formule $\\\\mathcal{A}\\\\text{ire de base}\\\\times\\\\mathcal{h}$.<br> Ici la base est un disque de rayon ${r} cm.<br>`\n              texteCorr += `$\\\\mathcal{A}\\\\text{ire de base}\\\\times\\\\mathcal{h}=\\\\pi\\\\times${r}^{2}\\\\text{ cm}^2\\\\times${h}\\\\text{ cm}=${r * r * h\n                }\\\\pi\\\\text{ cm}^3\\\\approx${texNombre(\n                  arrondi(r * r * h * Math.PI, 1)\n                )}\\\\text{ cm}^3\\\\approx${texNombre(\n                  arrondi((r * r * h * Math.PI) / 1000, 1)\n                )}\\\\text{ dm}^3$<br>`\n              texteCorr +=\n                numAlpha(1) +\n                ` La masse ${liquides[index2][0]} contenue dans ce tonneau est :<br>`\n              texteCorr += `$${texNombre(\n                arrondi((r * r * h * Math.PI) / 1000, 1)\n              )}\\\\text{ dm}^3\\\\times ${texNombrec(\n                liquides[index2][1]\n              )} \\\\times 1 \\\\dfrac{kg}{dm^3}\\\\approx${texNombre(\n                arrondi(((r * r * h * Math.PI) / 1000) * liquides[index2][1], 3)\n              )}\\\\text{ kg}$`\n              break\n          }\n          break\n        case 3: // Problème de quantité de mouvement et d'énergie cinétique\n          quidam = prenomF()\n          index1 = randint(0, 4)\n          masse = randint(40, 70)\n          vitesseMoy = randint(vitesses[index1][1], vitesses[index1][2]) // vitesse choisie pour l'exo\n          texte =\n            `${quidam} se déplace ${vitesses[index1][0]} à la ` +\n            katexPopup2(\n              numeroExercice + i * 3,\n              typeAide,\n              'vitesse',\n              'Définition : Vitesse (grandeur physique)',\n              'La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L\\'unité officielle est le mètre par seconde ($\\\\text{m/s}$  ou  $\\\\text{m.s}^{-1}$) mais on utilise souvent le kilomètre par heure ($\\\\text{km/h}$  ou  $\\\\text{km.h}^{-1}$)'\n            ) +\n            ` de ${texNombrec(vitesseMoy)} m/s.<br>`\n          texte += `Elle pèse ${masse} kg.<br>`\n          texte +=\n            numAlpha(0) +\n            ' Calculer sa ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 1,\n              typeAide,\n              'quantité de mouvement',\n              'Définition : quantité de mouvement (grandeur physique)',\n              'C’est le produit de la masse d\\'un corps par sa vitesse.<br>L\\'unité de mesure de la quantité de mouvement est le ($\\\\text{kg.m.s}^{-1}$)'\n            ) +\n            ' en $\\\\text{kg.m.s}^{-1}$.<br>'\n          texte +=\n            numAlpha(1) +\n            ' En déduire son ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 2,\n              typeAide,\n              'énergie cinétique',\n              'Définition : énergie cinétique (grandeur physique)',\n              'L\\'énergie cinétique d\\'un corps de masse $m$ (en kg) assimilé à un point matériel se déplaçant à la vitesse $v$ (en m/s) est donné par la formule $E=\\\\dfrac{1}{2}\\\\times m\\\\times v^2$.<br>L\\'unité de mesure de l\\'énergie cinétique est le Joule (J).<br>$1J=1\\\\text{ kg.m}^2\\\\text{s}^{-2}$.'\n            ) +\n            ' en Joules.'\n          texteCorr =\n            numAlpha(0) +\n            ` La quantité de mouvement de ${quidam} est : $${masse} \\\\text{ kg}\\\\times ${vitesseMoy}\\\\text{ m/s}=${texNombrec(\n              masse * vitesseMoy\n            )}\\\\text{ kg.m.s}^{-1}$<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` L'énergie cinétique de ${quidam} est : $\\\\dfrac{1}{2}\\\\times ${masse} \\\\text{ kg}\\\\times (${vitesseMoy}\\\\text{ m/s})^2=\\\\dfrac{${masse}\\\\times${vitesseMoy}^2}{2}\\\\text{ J}=${texNombrec(\n              (masse * vitesseMoy ** 2) / 2\n            )}\\\\text{ J}$`\n          break\n        case 4: // problème de moment et de couple de forces qui s'annulent.\n          quidam = prenom()\n          index = randint(60, 90) // masse du père (recyclage de variable)\n          masse = randint(20, 30) // masse de l'enfant\n          distance = arrondi(randint(25, 35) / 10)\n          texte =\n            `${quidam} qui pèse ${masse} kg se trouve sur le siège d'une balançoire \"` +\n            katexPopup2(\n              numeroExercice + i * 3,\n              2,\n              'trébuchet',\n              'Schéma explicatif',\n              'images/trebuchet.png'\n            ) +\n            `\" dans un jardin d'enfant. Le siège est situé à ${texNombre(\n              distance\n            )} m du pivot central de la balançoire (bras de levier).<br>`\n          texte +=\n            numAlpha(0) +\n            ' Calculer le ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 1,\n              typeAide,\n              'moment',\n              'Définition : momnent (grandeur physique)',\n              'Le moment d\\'une force d\\'intensité F(en Newton ou kg.m.s$^{-2}$) en un point M par rapport à un pivot P est le produit de F par la distance PM (appelée bras de levier) exprimée en mètres (lorsque cette force s\\'exerce perpendiculairement au bras de levier). Le moment est l\\'energie permettant de faire tourner l\\'objet autour du pivot.<br>L\\'unité de mesure du moment est le Joule (J).<br>$1J=1\\\\text{ kg.m}^2\\\\text{s}^{-2}$.'\n            ) +\n            ' du ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 2,\n              typeAide,\n              'poids',\n              'Définition : Poids',\n              'Le poids est le produit de la masse d\\'un objet par l\\'accélération de la pesanteur terrestre ($9,81\\\\text{ m.s}^{-2}$).<br>L\\'unité du poids est le Newton (N) : 1N=1kg.m.s$^{-2}$'\n            ) +\n            ` de ${quidam} sur son siège par rapport au pivot central du trébuchet en Joules (on admettra que le bras de levier est horizontal).<br>`\n          texte +=\n            numAlpha(1) +\n            ` Le père de ${quidam} vient s'installer de l'autre côté du pivot central. Il pèse ${index} kg et s'installe de façon à ce que son poids permette d'équilibrer la balançoire à l'horizontale. Quelle doit être la longueur du bras de levier de son côté ( à quelle distance du pivot est-il assis ) ?<br>`\n          texteCorr =\n            numAlpha(0) +\n            ` Le moment du poids de ${quidam} appliqué sur son siège par rapport au pivot central du trébuchet est :<br>`\n          index1 = arrondi(masse * 9.81 * distance) // pour éviter d'avoir trop de variable, je recycle\n          texteCorr += `$${masse}\\\\text{ kg} \\\\times 9,81 \\\\text{m.s}^{-2} \\\\times ${texNombre(\n            distance\n          )} \\\\text{ m} = ${texNombre(\n            index1\n          )}\\\\text{ kg.m}^2\\\\text{.s}^{-2}=${texNombre(\n            index1\n          )}\\\\text{ J}$<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` Afin d'équilibrer le trébuchet, le père de ${quidam} doit se placer de façon que le moment de son poids sur son point d'assise par rapport au pivot central du trébuchet soit égal à celui de ${quidam}, on obtient l'équation suivante où $${miseEnEvidence(\n              'd',\n              'black'\n            )}$ représente sa distance par rapport au pivot central :<br>`\n          texteCorr += `$ ${index}\\\\text{ kg}\\\\times 9,81 \\\\text{m.s}^{-2} \\\\times ${miseEnEvidence(\n            'd',\n            'black'\n          )} \\\\text{ m}=${texNombre(index1)}\\\\text{ J}$<br>`\n          texteCorr += `D'où $${miseEnEvidence(\n            'd',\n            'black'\n          )}\\\\text{ m} = \\\\dfrac{${texNombre(\n            index1\n          )}\\\\text{ J}}{${index}\\\\text{ kg}\\\\times 9,81 \\\\text{m.s}^{-2}}\\\\approx${texNombrec(\n            arrondi(index1 / (9.81 * index))\n          )}\\\\text{ m}.$`\n          break\n        case 5: // problème de trafic de coyageurs.\n          d1 = randint(3, 6)\n          d2 = randint(3, 6, [d1])\n          k = randint(5, 8)\n          n1 = k * d2\n          n2 = k * d1\n          texte =\n            numAlpha(0) +\n            ` Un bus de ville transporte en moyenne ${n1} personnes à la fois.<br> La longueur moyenne de déplacement est de ${d1} km.<br> Calculer le ` +\n            katexPopup2(\n              numeroExercice + i * 3,\n              typeAide,\n              'trafic',\n              'Définition : Trafic de voyageurs',\n              'Le trafic de voyageurs est le produit du nombre de voyageurs par la distance parcourue. L\\'unité est le voyageur.km qui correspond au déplacement d\\'un voyageur sur 1km'\n            ) +\n            ' moyen de voyageurs en voyageurs.km.<br> '\n          texte +=\n            numAlpha(1) +\n            ` Un autre bus de ville transporte en moyenne ${n2} personnes à la fois.<br> La longueur moyenne de déplacement est de ${d2} km.<br> Montrer que le trafic de voyageur est le même qu'à la question ` +\n            numAlpha(0)\n          texteCorr =\n            numAlpha(0) +\n            ` Le trafic moyen de ce bus de ville est : $${n1}\\\\text{voyageurs}\\\\times${d1}\\\\text{km}=${n1 * d1\n            }\\\\text{voyageurs.km}$.<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` Le trafic moyen de ce bus de ville est : $${n2}\\\\text{voyageurs}\\\\times${d2}\\\\text{km}=${n2 * d2\n            }\\\\text{voyageurs.km}$, donc ces deux bus ont le même trafic.`\n          break\n        case 6: // problème de puissance électrique.\n          index = randint(0, 3)\n          index1 = randint(0, 3, [index])\n          I1 = arrondi(appareils[index][1] / 230, 0) + 1\n          texte =\n            numAlpha(0) +\n            ` Un ${appareils[index][0]} est protégé par un fusible de ${I1} ampères, quelle est la ` +\n            katexPopup2(\n              numeroExercice + i * 3 + 1,\n              typeAide,\n              'puissance',\n              'Définition : Puissance (grandeur physique)',\n              'C’est le produit de la force électromotrice (tension) exprimée en Volt (V) par l\\'intensité du courant électrique exprimée en ampères (A).<br>L\\'unité de mesure de la puissance est le Watt (W)'\n            ) +\n            ' maximale de cet appareil s\\'il fonctionne sur le secteur ?<br>'\n          texte +=\n            numAlpha(1) +\n            ` Un ${appareils[index1][0]} fonctionne à une puissance maximum de ${appareils[index1][1]} W.<br>Quel est l'ampérage minimum nécessaire pour le fusible qui protégera ce ${appareils[index][0]} des court-ciruits ?<br>`\n          texteCorr =\n            numAlpha(0) +\n            ` La tension du secteur étant de 230V, la puissance maximale de ce ${appareils[index][0]} est de :<br>`\n          texteCorr += `$230\\\\text{ V}\\\\times${I1}\\\\text{ A}=${230 * I1\n            }\\\\text{ W}$<br>`\n          I2 = Math.floor(appareils[index1][1] / 230) + 1\n          texteCorr +=\n            numAlpha(1) +\n            ' Pour fonctionner à la puissance maximum, cet appareil a besoin d\\'un courant d\\'une intensité de :<br>'\n          texteCorr += `$\\\\dfrac{${appareils[index1][1]\n            }\\\\text{ W}}{230 \\\\text{ V}} \\\\approx ${texNombrec(\n              arrondi(appareils[index1][1] / 230)\n            )}\\\\text{ A}$.<br>`\n          texteCorr += `Le fusible nécessaire pour protéger cet appareil des courts-circuits devra avoir une intensité de rupture minimum de ${I2} ampères.`\n          break\n        case 7: // problème de vitesses\n          index2 = liste7[flag7]\n          flag7++\n          quidam = prenom() // prenom choisi\n          switch (index2) {\n            case 0: // problème de déplacements\n              index1 = randint(0, 4)\n              vitesseMoy = randint(vitesses[index1][1], vitesses[index1][2]) // vitesse choisie pour l'exo\n              distance = Math.round(\n                (vitesseMoy * 3.6 * vitesses[index1][3] * randint(5, 20)) / 10\n              ) // distance choisie pour question b\n              duree = randint(2, vitesses[index1][3])\n              texte =\n                `${quidam} se déplace ${vitesses[index1][0]} à la ` +\n                katexPopup2(\n                  numeroExercice + i * 3,\n                  typeAide,\n                  'vitesse',\n                  'Définition : Vitesse (grandeur physique)',\n                  'La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L\\'unité officielle est le mètre par seconde ($\\\\text{m/s}$  ou  $\\\\text{m.s}^{-1}$) mais on utilise souvent le kilomètre par heure ($\\\\text{km/h}$  ou  $\\\\text{km.h}^{-1}$)'\n                ) +\n                ` de ${texNombrec(vitesseMoy)} m/s.<br>`\n              texte +=\n                numAlpha(0) +\n                ` En se déplaçant à cette vitesse pendant ${duree} h, quelle est la distance parcourue par ${quidam} en km ?<br>`\n              texte +=\n                numAlpha(1) +\n                ` Si ${quidam} veut parcourir ${nombreAvecEspace(\n                  distance\n                )} km à cette vitesse, combien de temps durera le trajet ? Donner le résultat en heures, minutes et secondes.`\n              texteCorr =\n                numAlpha(0) +\n                ` La distance parcourue par ${quidam} ${vitesses[index1][0]\n                } en ${duree} h à la vitesse de ${texNombrec(\n                  vitesseMoy\n                )} m/s est :<br>`\n              texteCorr += `$${texNombrec(\n                vitesseMoy\n              )}\\\\text{ m/s}\\\\times${duree}\\\\text{ h}=\\\\dfrac{${texNombrec(\n                vitesseMoy\n              )}\\\\text{ m}}{1 \\\\text{ s}}\\\\times ${duree}\\\\times ${texNombre(\n                3600\n              )}\\\\text{ s}`\n              texteCorr += `=${texNombrec(\n                vitesseMoy * 3600 * duree\n              )}\\\\text{ m}=${texNombrec(\n                vitesseMoy * 3.6 * duree\n              )}\\\\text{ km}$<br>`\n              texteCorr +=\n                numAlpha(1) +\n                ` Pour parcourir ${nombreAvecEspace(\n                  distance\n                )} km à cette vitesse, ${quidam} mettra :<br>`\n              texteCorr += ` Partons de la formule $\\\\mathcal{V}=\\\\dfrac{\\\\mathcal{d}}{\\\\mathcal{t}}$ et remplaçons : $\\\\dfrac{${vitesseMoy}\\\\text{ m}}{1 \\\\text{ s}}=\\\\dfrac{${texNombre(\n                distance\n              )}\\\\text{ km}}{\\\\mathcal{t}\\\\text{ h}}$<br>`\n              texteCorr += `Rendons les unités homogènes : $\\\\dfrac{${vitesseMoy}\\\\text{ m}}{1 \\\\text{ s}}=\\\\dfrac{${texNombrec(\n                distance * 1000\n              )}\\\\text{ m}}{\\\\mathcal{t}\\\\text{ h}\\\\times ${texNombre(\n                3600\n              )}\\\\text{ s/h}}$<br>`\n              texteCorr += `Appliquons l'égalité des produits en croix : ${produitsEnCroix(\n                [\n                  [`${vitesseMoy}\\\\text{ m}`, '1 \\\\text{ s}'],\n                  [\n                    `${texNombrec(distance * 1000)}\\\\text{ m}`,\n                    `\\\\mathcal{t}\\\\times ${texNombre(3600)}\\\\text{ s/h}`\n                  ]\n                ]\n              )}<br>`\n              texteCorr += `D'où : $\\\\mathcal{t}=\\\\dfrac{1 \\\\text{ s}\\\\times${texNombrec(\n                distance * 1000\n              )}\\\\text{ m}}{${vitesseMoy}\\\\text{ m}\\\\times${texNombre(\n                3600\n              )}\\\\text{ s}}$ (t est le nombre décimal d'heures : les mètres et les secondes disparaissent car elles sont présentes au numérateur et au dénominateur.)<br>`\n              texteCorr += `Soit : $\\\\mathcal{t}\\\\approx${texNombrec(\n                (distance * 1000) / vitesseMoy / 3600\n              )}\\\\text{ h}\\\\approx${texNombrec(\n                arrondi((distance * 1000) / vitesseMoy, 0)\n              )}\\\\text{ s}\\\\approx`\n              nbheures = Math.floor((distance * 1000) / vitesseMoy / 3600) // conversion en h min s\n              nbminutes = Math.floor(\n                (Math.floor((distance * 1000) / vitesseMoy) % 3600) / 60\n              )\n              nbsecondes = arrondi(\n                (distance * 1000) / vitesseMoy -\n                3600 * nbheures -\n                60 * nbminutes,\n                0\n              )\n              texteCorr += `(${texNombre(nbheures)}\\\\times ${texNombre(\n                3600\n              )}+${texNombre(nbminutes)}\\\\times 60+${texNombre(\n                nbsecondes\n              )})\\\\text{ s}\\\\approx`\n              if (nbheures !== 0) { texteCorr += `${texNombre(nbheures)}\\\\text{ h }` } // affichage de la réponse\n              if (nbminutes !== 0) { texteCorr += `${texNombre(nbminutes)}\\\\text{ min }` }\n              texteCorr += `${texNombre(nbsecondes)}\\\\text{ s}$`\n              break\n            case 1: // l'orage et la vitesse du son\n              duree = randint(2, 15) // durée pour question a)\n              distance = randint(5, 15, [duree]) * 340 // distance de l'orage en m pour question b\n              texte =\n                'Le son se déplace dans l\\'air à la ' +\n                katexPopup2(\n                  numeroExercice + i * 3,\n                  typeAide,\n                  'vitesse',\n                  'Définition : Vitesse (grandeur physique)',\n                  'La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L\\'unité officielle est le mètre par seconde ($\\\\text{m/s}$  ou  $\\\\text{m.s}^{-1}$) mais on utilise souvent le kilomètre par heure ($\\\\text{km/h}$  ou  $\\\\text{km.h}^{-1}$)'\n                ) +\n                ' de 340 m/s.<br>'\n              texte +=\n                numAlpha(0) +\n                ` ${quidam} voit un éclair dans le ciel et compte dans sa tête ${duree} secondes avant d'entendre le tonnerre.<br>`\n              texte += 'Quelle est la distance à laquelle l\\'éclair est tombé ?<br>'\n              texte +=\n                numAlpha(1) +\n                ' L\\'éclair suivant tombe sur le paratonnerre situé sur le clocher de l\\'église du village voisin.<br>'\n              texte += `${quidam} sait que le clocher est situé à ${distance} m de sa position. Combien de temps se passe-t-il avant que ${quidam} n'entende le tonnerre ?`\n              texteCorr =\n                numAlpha(0) +\n                ' Calculons la distance à laquelle le premier éclair est tombé en utilisant la vitesse du son (on considère que la vitesse de la lumière est telle que l\\'éclair est visible instantanément) :<br>'\n              texteCorr += `$340\\\\text{ m/s}=\\\\dfrac{340\\\\text{ m}}{1\\\\text{ s}}=\\\\dfrac{${miseEnEvidence(\n                duree\n              )}\\\\times 340\\\\text{ m}}{${miseEnEvidence(\n                duree\n              )}\\\\times 1\\\\text{ s}}=\\\\dfrac{${texNombrec(\n                duree * 340\n              )}\\\\text{ m}}{${duree}\\\\text{ s}}$<br>`\n              texteCorr += `La distance à laquelle l'éclair est tombé est donc de ${nombreAvecEspace(\n                duree * 340\n              )} m.<br>`\n              texteCorr +=\n                numAlpha(1) +\n                ' Avec les données de l\\'énoncé nous pouvons écrire :<br>'\n              texteCorr += `$\\\\dfrac{340\\\\text{ m}}{1\\\\text{ s}}=\\\\dfrac{${texNombre(\n                distance\n              )}\\\\text{ m}}{\\\\mathcal{T}\\\\text{ s}}$<br>`\n              texteCorr += `Soit grâce à l'égalité des produits en croix : $\\\\mathcal{T}\\\\text{ s}=${quatriemeProportionnelle(\n                '340 \\\\text{ m}',\n                '1 \\\\text{ s}',\n                distance + '\\\\text{ m}',\n                0\n              )}=${texNombrec(arrondi(distance / 340))}\\\\text{ s}$<br>`\n              texteCorr += `${quidam} entendra le tonnerre ${texNombrec(\n                arrondi(distance / 340)\n              )} secondes après avoir vu l'éclair tomber sur le clocher.`\n              break\n            case 2: // Le coureur\n              vitesseMoy = randint(vitesses[4][1] * 5, vitesses[4][2] * 5) / 5\n              distance = randint(5, 12)\n              texte =\n                `${quidam} vient de courir ${distance} kilomètres. Sa montre connectée a enregistré l'` +\n                katexPopup2(\n                  numeroExercice + i,\n                  typeAide,\n                  'allure',\n                  'Définition : allure (grandeur physique)',\n                  'L\\'allure est le temps exprimé en h,min,s pour parcourir un kilomètre.<br>L\\'unité est alors h/km ou min/km'\n                ) +\n                'pour chaque kilomètre parcouru :'\n              allures = []\n              for (let j = 0; j < distance; j++) {\n                duree = Math.round(\n                  1000 / (vitesseMoy * (1 + randint(-10, 10) * 0.01))\n                )\n                nbsecondes = duree % 60\n                nbminutes = (duree - nbsecondes) / 60\n                allures.push([nbminutes, nbsecondes])\n              }\n              texte += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // On construit le tableau des allures\n              texte += '|c'\n              for (let j = 0; j < allures.length; j++) texte += '|c'\n              texte += '}\\\\hline  \\\\text{kilomètre}'\n              for (let j = 0; j < allures.length; j++) { texte += '&' + texNombre(j + 1) }\n              texte +=\n                '\\\\\\\\\\\\hline \\\\text{allure en minutes et secondes (par km)}'\n              for (j = 0; j < allures.length; j++) {\n                texte +=\n                  '&' +\n                  allures[j][0] +\n                  '\\\\text{ min }' +\n                  allures[j][1] +\n                  '\\\\text{ s}'\n              }\n              texte += '\\\\\\\\\\\\hline\\\\end{array}$<br>'\n              texte +=\n                numAlpha(0) +\n                ` Calculer la durée totale de la course de ${quidam}.<br>`\n              texte +=\n                numAlpha(1) +\n                ' En déduire sa ' +\n                katexPopup2(\n                  numeroExercice + i + 1,\n                  typeAide,\n                  'vitesse',\n                  'Définition : Vitesse (grandeur physique)',\n                  'La vitesse est le quotient de la distance parcourue par le temps de parcours.<br>L\\'unité officielle est le mètre par seconde ($\\\\text{m/s}$  ou  $\\\\text{m.s}^{-1}$) mais on utilise souvent le kilomètre par heure ($\\\\text{km/h}$  ou  $\\\\text{km.h}^{-1}$)'\n                ) +\n                ' moyenne en km/h sur le trajet total.<br>'\n              texte +=\n                numAlpha(2) +\n                ` ${quidam} s'entraîne pour un semi-marathon (21,0975 km). En courant à la même vitesse, combien de temps durerait son semi-marathon ?`\n              texteCorr =\n                numAlpha(0) +\n                ` La durée totale de la course de ${quidam} est :<br>`\n              allures.push([0, 0])\n              duree = 0\n\n              for (let j = 0; j < distance; j++) {\n                allures[distance][1] += allures[j][1]\n                if (allures[distance][1] > 59) {\n                  allures[distance][0] += 1\n                  allures[distance][1] = allures[distance][1] % 60\n                }\n                allures[distance][0] += allures[j][0]\n                if (allures[distance][0] > 59) {\n                  duree++\n                  allures[distance][0] = allures[distance][0] % 60\n                }\n              }\n              for (let j = 0; j < distance - 1; j++) {\n                texteCorr += `${allures[j][0]} min ${allures[j][1]} s + `\n              }\n              texteCorr += `${allures[distance - 1][0]} min ${allures[distance - 1][1]\n                } s = `\n              if (duree !== 0) texteCorr += `${duree} h `\n              if (allures[distance][0] !== 0) { texteCorr += `${allures[distance][0]} min ` }\n              if (allures[distance][1] !== 0) { texteCorr += `${allures[distance][1]} s.` }\n              texteCorr +=\n                '<br>' +\n                numAlpha(1) +\n                ` ${quidam} a effectué ${distance} km en `\n              if (duree !== 0) texteCorr += `${duree} h `\n              if (allures[distance][0] !== 0) { texteCorr += `${allures[distance][0]} min ` }\n              if (allures[distance][1] !== 0) { texteCorr += `${allures[distance][1]} s<br>Soit ` }\n              if (duree !== 0) texteCorr += `${duree} h `\n              if (allures[distance][0] !== 0) { texteCorr += ` $\\\\dfrac{${allures[distance][0]}}{60}$ h ` }\n              if (allures[distance][1] !== 0) {\n                texteCorr += ` $\\\\dfrac{${allures[distance][1]}}{${texNombre(\n                  3600\n                )}}$ h = `\n              }\n              texteCorr += '$\\\\dfrac{'\n              if (duree !== 0) { texteCorr += `${duree}\\\\times ${texNombre(3600)} + ` }\n              texteCorr += `${allures[distance][0]}\\\\times 60+${allures[distance][1]\n                }}{${texNombre(3600)}}$ h = `\n              texteCorr += '$\\\\dfrac{'\n              if (duree !== 0) {\n                duree =\n                  duree * 3600 +\n                  allures[distance][0] * 60 +\n                  allures[distance][1]\n                texteCorr += `${duree}}`\n              } else {\n                duree = allures[distance][0] * 60 + allures[distance][1]\n                texteCorr += `${duree}}`\n              }\n              texteCorr += `{${texNombre(3600)}}$ h.<br>`\n              texteCorr += `Sa vitesse en km/h est par conséquent :<br>$${distance} \\\\text{ km}\\\\div\\\\dfrac{${duree}}{${texNombre(\n                3600\n              )}}\\\\text{ h}=`\n              texteCorr += `${distance} \\\\text{ km}\\\\times\\\\dfrac{${texNombre(\n                3600\n              )}}{${duree}}\\\\text{ h}^{-1}=\\\\dfrac{${distance}\\\\times${texNombre(\n                3600\n              )}}{${duree}}\\\\text{km.h}^{-1}`\n              vitesseMoy = arrondi((distance * 3600) / duree)\n              texteCorr += `\\\\approx${texNombrec(vitesseMoy)}$ km/h<br>`\n              texteCorr +=\n                numAlpha(2) +\n                ` Si elle court 21,0975 km à cette vitesse de ${texNombre(\n                  vitesseMoy\n                )} km/h, ${quidam} mettra :<br>`\n              duree = arrondi(21.0975 / vitesseMoy, 4)\n              texteCorr += `$\\\\dfrac{${texNombre(\n                21.0975\n              )} \\\\text{ km}}{${texNombre(\n                vitesseMoy\n              )} \\\\text{ km.h}^{-1}}\\\\approx${texNombre(duree)}$ h soit `\n              nbheures = Math.floor(duree)\n              duree = (duree - nbheures) * 60\n              nbminutes = Math.floor(duree)\n              duree = Math.round((duree - nbminutes) * 60)\n              texteCorr += ` environ ${nbheures} h ${nbminutes} min ${duree} s.`\n              break\n          }\n          break\n        case 8: // problème de prix massique\n          index1 = randint(0, 7)\n          index2 = randint(0, 5, [index1])\n          index = randint(0, 5, [index1, index2])\n          masse = arrondi(randint(fruits[index1][2], fruits[index1][3]) / 10)\n          masse2 = arrondi(randint(fruits[index2][2], fruits[index2][3]) / 10)\n          masse3 = arrondi(randint(fruits[index][2], fruits[index][3]) / 10)\n          prix1 = arrondi(masse * fruits[index1][1])\n          prix2 = arrondi(masse2 * fruits[index2][1])\n          prix3 = arrondi(masse3 * fruits[index][1])\n          quidam = prenomF()\n          texte = `${quidam} se rends à l'épicerie de son quartier. Elle y achète ${texNombre(\n            masse\n          )} kg de ${fruits[index1][0]} à ${texPrix(\n            fruits[index1][1]\n          )} €/kg et pour ${texPrix(prix2)} € de ${fruits[index2][0]\n            } à ${texPrix(fruits[index2][1])} €/kg.<br>`\n          texte += `Enfin, elle achète ${texNombre(masse3)} kg de ${fruits[index][0]\n            } pour ${texPrix(prix3)} €.<br>`\n          texte +=\n            numAlpha(0) +\n            ` Combien lui coûtent les ${fruits[index1][0]} ?<br>`\n          texte +=\n            numAlpha(1) +\n            ` Quelle masse de ${fruits[index2][0]} a-t-elle achetée ?<br>`\n          texte +=\n            numAlpha(2) +\n            ` Quel est le prix au kilogramme des ${fruits[index][0]} ?`\n          texteCorr =\n            numAlpha(0) +\n            ` ${quidam} dépense pour les ${fruits[index1][0]} : $${texNombre(\n              masse\n            )}\\\\text{ kg} \\\\times ${texPrix(\n              fruits[index1][1]\n            )}$ €$\\\\text{/kg} = ${texPrix(prix1)}$ €.<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` La masse de ${fruits[index2][0]\n            } qu'elle a achetée est : $${texPrix(prix2)} $ €$ \\\\div ${texPrix(\n              fruits[index2][1]\n            )}$ €$\\\\text{/kg} = ${texNombre(masse2)}\\\\text{ kg}$.<br>`\n          texteCorr +=\n            numAlpha(2) +\n            ` Enfin, ${quidam} a acheté des ${fruits[index][0]\n            } au prix unitaire de : $${texPrix(prix3)}$ € $\\\\div ${texNombre(\n              masse3\n            )}\\\\text{ kg} = ${texPrix(fruits[index][1])}$ €$\\\\text{/kg}$.`\n          break\n        case 9: // problème de prix horaire\n          index1 = randint(0, 3)\n          index2 = randint(0, 4)\n          nbheures = randint(locations[index1][1], locations[index1][2])\n          prix1 = locations[index1][1]\n          prix2 = cours[index2][1] * randint(2, 6)\n          quidam = prenomF()\n          texte = `${quidam} a prévu de louer ${locations[index1][0]\n            } pendant ${texNombre(\n              nbheures\n            )} heures. L'heure de location coûte ${texPrix(prix1)} €.<br>`\n          texte += numAlpha(0) + ' Combien cette location va lui coûter ?<br>'\n          texte +=\n            numAlpha(1) +\n            ` ${quidam} a pris des leçons particulières ${cours[index2][0]\n            }. En tout ce mois-ci elle a eu ${texNombrec(\n              prix2 / cours[index2][1]\n            )} heures de cours pour ${texPrix(\n              prix2\n            )} €. Combien demande son professeur pour une heure de cours ?<br>`\n          texteCorr =\n            numAlpha(0) +\n            ` ${quidam} va dépenser pour sa location : $${texNombre(\n              nbheures\n            )}\\\\text{ h} \\\\times ${texPrix(prix1)}$ €$\\\\text{/h} = ${texPrix(\n              nbheures * prix1\n            )}$ €.<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` L'heure de cours ${cours[index2][0]} coûte : $${texPrix(\n              prix2\n            )}$ € $ \\\\div ${texNombre(\n              prix2 / cours[index2][1]\n            )}\\\\text{ h} = ${texPrix(cours[index2][1])}$ €$\\\\text{/h}$.<br>`\n          break\n        case 10: // problème de densité de population\n          index1 = randint(0, 14)\n          index2 = randint(0, 14, [index1])\n          texte =\n            numAlpha(0) +\n            ` En 2016, à ${villes[index1][0]} il y avait $${texNombre(\n              villes[index1][1]\n            )}$ habitants pour une superficie de $${texNombrec(\n              villes[index1][2] * 100\n            )}$ ha.<br> Calculer la densité de population en hab/km$^2$.<br>`\n          texte +=\n            numAlpha(1) +\n            ' La même année, la ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 1,\n              typeAide,\n              'densité de population',\n              'Définition : Densité de population',\n              'C’est le quotient du nombre d\\'habitants par la superficie en km$^2$.<br>L\\'unité de la densité de population est l\\'habitant par km$^2$ (hab/km$^2$).'\n            ) +\n            ` de ${villes[index2][0]} était de $${texNombrec(\n              villes[index2][1] / villes[index2][2]\n            )}$ hab/km$^2$ pour une superficie de $${texNombrec(\n              villes[index2][2] * 100\n            )}$ ha.<br> Calculer le nombre d'habitants de ${villes[index2][0]\n            } à cette date.<br>`\n          texteCorr =\n            numAlpha(0) +\n            ` En 2016, la densité de population à ${villes[index1][0]\n            } était de :<br> $\\\\dfrac{${texNombre(\n              villes[index1][1]\n            )}\\\\text{ hab}}{${texNombrec(\n              villes[index1][2] * 100\n            )}\\\\text{ ha}}=\\\\dfrac{${texNombre(\n              villes[index1][1]\n            )}\\\\text{ hab}}{${texNombre(\n              villes[index1][2]\n            )}\\\\text{ km}^2}=${texNombrec(\n              villes[index1][1] / villes[index1][2]\n            )}\\\\text{ hab/km}^{2}$.<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` À cette date, le nombre d'habitants de ${villes[index2][0]\n            } était de :<br> $${texNombrec(\n              villes[index2][1] / villes[index2][2]\n            )}\\\\text{ hab/km}^2\\\\times ${texNombrec(\n              villes[index2][2] * 100\n            )}\\\\text{ ha}=${texNombrec(\n              villes[index2][1] / villes[index2][2]\n            )}\\\\text{ hab/km}^2\\\\times ${texNombrec(\n              villes[index2][2]\n            )}\\\\text{ km}^{2}=${texNombre(villes[index2][1])}\\\\text{ hab}$.`\n          break\n        case 11: // problème de masse volumique\n          index1 = randint(0, 14)\n          index2 = randint(0, 14, [index1])\n          v1 = randint(50, 100)\n          masse2 = randint(5, 30)\n          masse = arrondi((materiaux[index1][1] * v1) / 1000000)\n          v2 = arrondi(masse2 / materiaux[index2][1], 7)\n          texte =\n            numAlpha(0) +\n            ' La ' +\n            katexPopup2(\n              numeroExercice + i * 3 + 1,\n              typeAide,\n              'masse volumique',\n              'Définition : Masse volumique (grandeur physique)',\n              'La masse volumique d\\'un élément est le quotient de la masse de cet élément par le volume qu\\'il occupe.<br>L\\'unité de la masse volumique dépend de la nature de l\\'élément et peut s\\'exprimer kg/m$^3$ pour les solides g/L pour les gaz par exemple.'\n            ) +\n            ` du ${materiaux[index1][0]} est de $${texNombre(\n              materiaux[index1][1]\n            )}\\\\text{ kg/m}^3$.<br>`\n          texte += `Quelle est la masse d'une pièce de ce métal de $${texNombre(\n            v1\n          )}\\\\text{ cm}^3$ ?<br>`\n          texte +=\n            numAlpha(1) +\n            ` Quel est le volume d'une pièce de ${materiaux[index2][0]} ayant une masse de `\n          texte += `$${texNombre(masse2)}\\\\text{ kg}$ (la masse volumique du ${materiaux[index2][0]\n            } est de $${texNombre(materiaux[index2][1])}\\\\text{ kg/m}^3$)<br>`\n          texteCorr =\n            numAlpha(0) +\n            ` La masse de cette pièce de ${materiaux[index1][0]\n            } est de :<br>$${texNombre(\n              materiaux[index1][1]\n            )}\\\\text{ kg/m}^3\\\\times ${texNombre(\n              v1\n            )}\\\\text{ cm}^3=${texNombre(\n              materiaux[index1][1]\n            )}\\\\text{ kg/m}^3\\\\times ${texNombrec(\n              v1 / 1000000\n            )}\\\\text{ m}^3=${texNombre(masse)}\\\\text{ kg}$.<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` Le volume de cette pièce de ${materiaux[index2][0]\n            } est de :<br>$${texNombre(masse2)}\\\\text{ kg}\\\\div ${texNombre(\n              materiaux[index2][1]\n            )}\\\\text{ kg/m}^3\\\\approx${texNombre(\n              v2\n            )}\\\\text{ m}^3\\\\approx${texNombrec(\n              v2 * 1000000\n            )}\\\\text{ cm}^3$<br>`\n          break\n        case 12: // problème de concentration massique\n          index1 = randint(0, 4)\n          index2 = randint(0, 4, [index1])\n          volume1 = arrondi(randint(2, 15, [10]) / 10)\n          volume2 = arrondi(randint(2, 15, [10]) / 10)\n          if (solutes[index1][2] < 10) {\n            masse = arrondi(\n              (randint(11, solutes[index1][2] * 10) * volume1) / 10\n            )\n          } else masse = arrondi(randint(2, solutes[index1][2]) * volume1)\n          if (solutes[index2][2] < 10) { // concentration en g/L soluté 2.\n            concentration2 = arrondi(randint(11, solutes[index2][2] * 10) / 10)\n          } else concentration2 = randint(2, solutes[index2][2])\n          texte =\n            numAlpha(0) +\n            ` On a dissout $${texNombre(masse)}\\\\text{ g}$ de ${solutes[index1][0]\n            } dans $${texNombre(volume1)}\\\\text{ litres}$ ${solutes[index1][1]\n            }.<br>Calculer la concentration massique de cette solution.<br>`\n          texte +=\n            numAlpha(1) +\n            ` On dispose de $${texNombre(\n              volume2\n            )}$ litres de solution aqueuse de ${solutes[index2][0]\n            } à $${texNombre(\n              concentration2\n            )}\\\\text{ g/L}$.<br>Quelle masse de ${solutes[index2][0]\n            } a été dissoute dans l'eau ?`\n          texteCorr =\n            numAlpha(0) +\n            ` La concentration en ${solutes[index1][0]} de cette solution aqueuse est de :<br>`\n          texteCorr += ` $\\\\dfrac{${texNombre(masse)}\\\\text{ g}}{${texNombre(\n            volume1\n          )}\\\\text{ litres}}=${texNombrec(\n            arrondi(masse / volume1)\n          )}\\\\text{ g/L}$<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` La masse de ${solutes[index2][0]} dissoute est de :<br>`\n          texteCorr += `$${texNombre(volume2)}\\\\text{ L}\\\\times ${texNombre(\n            concentration2\n          )}\\\\text{ g/L}=${texNombre(\n            arrondi(volume2 * concentration2)\n          )}\\\\text{ g}$`\n          break\n\n        case 13: // problème de débit\n          index2 = randint(0, 6)\n          duree = randint(2, 24)\n          vMax = rivieres[index2][3] * 3600\n          texte =\n            'Le ' +\n            katexPopup2(\n              numeroExercice + i,\n              typeAide,\n              'débit',\n              'Définition : Débit (grandeur physique)',\n              'Le débit est le quotient d\\'un volume d\\'eau écoulée dans une section de conduit par le temps d\\'écoulement.<br>L\\'unité officielle est le mètre cube par seconde ($\\\\text{m}^3/\\\\text{s}$  et dans certains cas on peut utiliser le litre par minute (L/min)'\n            ) +\n            ` annuel moyen ${rivieres[index2][6]}${rivieres[index2][0]\n            } mesuré à ${rivieres[index2][1]} est de ${rivieres[index2][2]\n            } m${exposant(3)}/s.<br>`\n          texte +=\n            numAlpha(0) +\n            ` Calculer le volume d'eau en m${exposant(\n              3\n            )} écoulé en ${duree} heures à ce débit.<br>`\n          texte +=\n            numAlpha(1) +\n            ` En ${rivieres[index2][4]} à ${rivieres[index2][1]}, ${rivieres[index2][5]\n            }${rivieres[index2][0]} a débité ${nombreAvecEspace(\n              vMax\n            )} m${exposant(\n              3\n            )} en une heure. Quel a été alors le débit en m³/s ?`\n          texteCorr =\n            numAlpha(0) +\n            ` En ${duree} heures il s'écoule en moyenne dans ${rivieres[index2][5]}${rivieres[index2][0]} à ${rivieres[index2][1]} :<br>`\n          texteCorr += `$\\\\mathcal{V}=${duree}\\\\text{ h}\\\\times${rivieres[index2][2]\n            }\\\\text{ m}^3\\\\text{/s}=${duree}\\\\times 3600\\\\text{ s}\\\\times${rivieres[index2][2]\n            }\\\\text{ m}^3\\\\text{/s}=${texNombre(\n              duree * 3600 * rivieres[index2][2]\n            )}\\\\text{ m}^3$<br>`\n          texteCorr +=\n            numAlpha(1) +\n            ` En ${rivieres[index2][4]} lors de la crue historique ${rivieres[index2][6]}${rivieres[index2][0]} à ${rivieres[index2][1]} le débit maximal a été de :<br>`\n          texteCorr += `Débit =$${texNombre(\n            vMax\n          )}\\\\text{ m}^3\\\\text{/h}=\\\\dfrac{${texNombre(\n            vMax\n          )}\\\\text{ m}^3}{1\\\\text{ h}}=\\\\dfrac{${texNombre(\n            vMax\n          )}\\\\text{ m}^3}{${texNombre(3600)}\\\\text{ s}}=${texNombrec(\n            vMax / 3600\n          )}\\\\text{ m}^3\\\\text{/s}$<br>`\n\n          break\n        case 14: // problème de vitesse de téléchargement\n          unites = ['ko', 'Mo', 'Go']\n          index = randint(0, 1)\n          if (index === 0) vitesseMoy = randint(200, 999)\n          else vitesseMoy = randint(1, 20)\n          quidam = prenom()\n          nbminutes = randint(3, 10)\n          nbsecondes = randint(2, 59)\n          masse = arrondi(randint(15, 35) / 10)\n          texte =\n            numAlpha(0) +\n            ` ${quidam} télécharge un fichier depuis un espace de stockage en ligne. Sa ` +\n            katexPopup2(\n              numeroExercice + i,\n              typeAide,\n              'vitesse de téléchargement',\n              'Définition : Vitesse de téléchargement',\n              'La vitesse de téléchargement est le quotient de la quantité de données téléchargées (en ko,Mo ou Go) par la durée de téléchargement (en seconde).<br>L\\'unité de cette grandeur quotient est le ko/s (ou Mo/s)'\n            ) +\n            ` est de ${vitesseMoy} ${unites[index]}/s.<br>`\n          texte += `Le téléchargement dure ${nbminutes} minutes et ${nbsecondes} secondes. Quelle est la taille du fichier téléchargé en ${unites[index]} ?<br>`\n          texte +=\n            numAlpha(1) +\n            ` ${quidam} veut télécharger un fichier de ${texNombre(\n              masse\n            )} Go. Quelle sera la durée du téléchargement si sa vitesse de téléchargement est de ${vitesseMoy} ${unites[index]\n            }/s ?<br>`\n          texteCorr =\n            numAlpha(0) + ' La taille du fichier téléchargé est :<br>'\n          tailleFichier = (nbminutes * 60 + nbsecondes) * vitesseMoy\n          texteCorr += `$(${nbminutes}\\\\times 60 +${nbsecondes})\\\\text{ s}\\\\times ${vitesseMoy} \\\\text{ ${unites[index]\n            }/s} = ${nbminutes * 60 + nbsecondes\n            }\\\\text{ s}\\\\times ${vitesseMoy} \\\\text{ ${unites[index]\n            }/s} = ${tailleFichier} \\\\text{ ${unites[index]} }$`\n          if (tailleFichier > 1000) {\n            texteCorr += `$ =${texNombrec(tailleFichier / 1000)} \\\\text{ ${unites[index + 1]\n              }}.$<br>`\n          }\n          texteCorr +=\n            numAlpha(1) + ' La durée du téléchargement sera de :<br>'\n          if (index === 0) {\n            texteCorr += `$${masse}\\\\times ${texNombrec(\n              10 ** 6\n            )} \\\\text{ ko} \\\\div ${vitesseMoy} \\\\text{ ${unites[index]}/s}$`\n            tailleFichier = masse * 10 ** 6\n          } else {\n            texteCorr += `$${masse}\\\\times ${texNombrec(\n              10 ** 3\n            )} \\\\text{ Mo} \\\\div ${vitesseMoy} \\\\text{ ${unites[index]}/s}$`\n            tailleFichier = masse * 10 ** 3\n          }\n          texteCorr += `$=\\\\dfrac{${tailleFichier}}{${vitesseMoy}}\\\\text{ s}`\n          nbheures = Math.floor(tailleFichier / vitesseMoy / 3600)\n          nbminutes = Math.floor(\n            (tailleFichier / vitesseMoy - 3600 * nbheures) / 60\n          )\n          nbsecondes = arrondi(\n            tailleFichier / vitesseMoy - 3600 * nbheures - 60 * nbminutes,\n            0\n          )\n          if (\n            tailleFichier / vitesseMoy ===\n            nbsecondes + 60 * nbheures + 3600 * nbheures\n          ) { texteCorr += '=' } else texteCorr += '\\\\approx'\n          if (nbheures !== 0) texteCorr += `${nbheures} \\\\text{ h }`\n          if (nbminutes !== 0) texteCorr += `${nbminutes} \\\\text{ min }`\n          if (nbsecondes !== 0) texteCorr += `${nbsecondes} \\\\text { s}`\n          texteCorr += '$'\n\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque question.\n  }\n  // this.besoinFormulaireCaseACocher =['Choix des exercices aléatoire'];\n  // this.besoinFormulaire2Numerique = ['Type d\\'exercice', 14, '1 : Energie consommée\\n 2 :  Volumes\\n 3 : Quantité de mouvement & Energie cinétique\\n 4 : Moment de force\\n 5 : Trafic de voyageurs\\n 6 : Puissance électrique\\n 7 : Vitesses\\n 8 : Prix massique\\n 9 : Prix horaire\\n 10 : Densité de population\\n 11 : Masse volumique\\n 12 : Concentration massique\\n 13 : Débits\\n 14 : Transfert de fichiers'];\n  this.besoinFormulaireTexte = [\n    'Type des grandeurs',\n    'Nombres séparés par des tirets\\n 1 : Energie consommée\\n 2 :  Volume\\n 3 : Quantité de mouvement & Energie cinétique\\n 4 : Moment de force\\n 5 : Trafic de voyageurs\\n 6 : Puissance électrique\\n 7 : Vitesse\\n 8 : Prix massique\\n 9 : Prix horaire\\n 10 : Densité de population\\n 11 : Masse volumique\\n 12 : Concentration massique\\n 13 : Débits\\n 14 : Transfert de fichiers'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ProblemesGrandeursComposees","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","context","spacing","spacingCorr","sup","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","grandeurs","liste7","combinaisonListes","flag7","flag2","liste2","appareil","puissance","dureeMax","nbQuartsDHeures","prixkWh","h1","h2","l","L","deltaT","r","h","concentration2","tailleFichier","d1","d2","k","n1","n2","I1","I2","allures","v1","v2","volume1","volume2","vMax","unites","split","length","listeIndex","typeAide","solutes","materiaux","villes","locations","cours","fruits","appareils","liquides","rivieres","vitesses","j","index","index1","index2","duree","quidam","nbheures","nbminutes","nbsecondes","vitesseMoy","distance","masse","masse2","masse3","prix1","prix2","prix3","texte","texteCorr","i","cpt","parseInt","randint","calcul","Math","floor","texNombrec","numAlpha","katexPopup2","texFractionReduite","texNombre","round","arrondiVirgule","exposant","arrondi","PI","prenomF","prenom","miseEnEvidence","nombreAvecEspace","produitsEnCroix","quatriemeProportionnelle","push","texPrix","indexOf","listeQuestionsToContenu","besoinFormulaireTexte","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}