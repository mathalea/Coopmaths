{"version":3,"file":"js/10993.95c1e22402bf0226fca0.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5R10-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, texteEnCouleur, tableauColonneLigne, combinaisonListes } from '../../modules/outils.js'\nexport const titre = 'Trouver l’opposé d’un nombre relatif'\nexport const dateDeModifImportante = '26/11/2021'\n\n/**\n* * Remplir un tableau en utilisant la notion d'opposé\n* * 5R10-0\n* @author Sébastien Lozano\n* Ajout d'un paramètre pour afficher quelques fois le signe des nombres positif par Guillaume Valmont le 26/11/2021\n*/\n\nexport default function TrouverOppose () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.besoinFormulaireCaseACocher = ['Afficher quelques fois le signe des nombres positifs']\n  this.sup = 1\n  if (this.debug) {\n    this.nbQuestions = 1\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.titre = titre\n  this.consigne = 'Compléter le tableau suivant.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [1]\n    } else {\n      typesDeQuestionsDisponibles = [1]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n    const listeSignesPositifs = combinaisonListes(['+', ''], 6 * this.nbQuestions)\n    const listeSignes = combinaisonListes(['+', '-'], 6 * this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, signePositif, indice = 0, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let sup\n      parseInt(this.sup) === 1 ? sup = false : sup = this.sup // Pour rester compatible avec l'ancien paramètre this.sup = 1 par défaut (et inutilisé)\n      // une fonction pour générer un relatif et son opposé\n      function nbRelatifEtSonOppose () {\n        sup ? signePositif = listeSignesPositifs[indice] : signePositif = ''\n        const nbNum = randint(0, 9) + randint(0, 9) / 10\n        if (listeSignes[indice] === '+') {\n          indice++\n          return {\n            nb: signePositif + texNombre(nbNum),\n            opp: texNombre(-nbNum)\n          }\n        } else {\n          indice++\n          return {\n            nb: texNombre(-nbNum),\n            opp: signePositif + texNombre(nbNum)\n          }\n        }\n      }\n      const nbLigneNombres = ['\\\\text{Nombre}']\n      const nbLigneNombresCorr = ['\\\\text{Nombre}']\n      const nbLigneNombresOpp = []\n      const nbLigneNombresOppCorr = []\n      let nb\n      for (let k = 0; k < 6; k++) {\n        nb = nbRelatifEtSonOppose()\n        if (randint(0, 1) === 1) {\n          nbLigneNombres[k + 1] = ''\n          nbLigneNombresCorr[k + 1] = miseEnEvidence(nb.nb)\n          nbLigneNombresOpp.push(nb.opp)\n          nbLigneNombresOppCorr.push(nb.opp)\n        } else {\n          nbLigneNombres.push(nb.nb)\n          nbLigneNombresCorr.push(nb.nb)\n          nbLigneNombresOpp[k] = ''\n          nbLigneNombresOppCorr[k] = miseEnEvidence(nb.opp)\n        }\n      };\n\n      const enonces = []\n      enonces.push({\n        enonce: `${tableauColonneLigne(nbLigneNombres, ['\\\\text{Opposé du nombre}'], nbLigneNombresOpp)}`,\n        question: '',\n        correction: `${tableauColonneLigne(nbLigneNombresCorr, ['\\\\text{Opposé du nombre}'], nbLigneNombresOppCorr)}`\n      })\n      enonces.push({\n        enonce: 'énoncé type 2',\n        question: '',\n        correction: `${texteEnCouleur('correction type2')}`\n      })\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[1].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDeModifImportante","TrouverOppose","typesDeQuestionsDisponibles","Exercice","this","debug","besoinFormulaireCaseACocher","sup","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","listeSignesPositifs","combinaisonListes","listeSignes","texte","texteCorr","signePositif","i","indice","cpt","nbRelatifEtSonOppose","nbNum","randint","nb","texNombre","opp","parseInt","nbLigneNombres","nbLigneNombresCorr","nbLigneNombresOpp","nbLigneNombresOppCorr","k","miseEnEvidence","push","enonces","enonce","tableauColonneLigne","question","correction","texteEnCouleur","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}