{"version":3,"file":"js/93872.7cb9cad34c16f9a26729.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4L13-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListes,prenom,texteEnCouleur} from '../../modules/outils.js'\nexport const titre = 'Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue'\n\n/**\n * Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue\n * * 4L13-1\n * @author Sébastien Lozano\n */\nexport default function Forme_litterale_introduire_une_lettre() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.debug = false;\n  this.sup = 1;\n  if (this.debug) {\n    this.nbQuestions = 3;\n  } else {\n    this.nbQuestions = 2;\n  };\n\n  this.titre = titre;\n  this.consigne = \"Exprimer le prix total de l'achat, en fonction des lettres introduites dans l'énoncé.\";\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  //context.isHtml? this.spacing = 3 : this.spacing = 2; \n  //context.isHtml? this.spacingCorr = 3 : this.spacingCorr = 2;\n\n  let typesDeQuestionsDisponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [1];\n    } else {\n      typesDeQuestionsDisponibles = [1];\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    typesDeQuestionsDisponibles = [1];\n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    //let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\n      // une fonction pour gérer le pluriel \n      function pluriel(n, obj) {\n        if (n > 1) {\n          return obj.plur\n        } else {\n          return obj.sing\n        };\n      };\n\n      // une fonction pour gérer la chaine de sortie et supprimer le coeff 1 !\n      function sliceUn(n) {\n        if (n == 1) {\n          return ``;\n        } else {\n          return `${n}`;\n        };\n      };\n\n      // on definit un tableau de couples possibles\t\t\t\n      let situations = [\n        { prenom: prenom(), elt1: { lettre: 'c', article: 'un', sing: 'crayon', plur: 'crayons' }, elt2: { lettre: 'g', article: 'une', sing: 'gomme', plur: 'gommes' } },\n        { prenom: prenom(), elt1: { lettre: 'r', article: 'une', sing: 'règle', plur: 'règles' }, elt2: { lettre: 'e', article: 'une', sing: 'équerre', plur: 'équerres' } },\n        { prenom: prenom(), elt1: { lettre: 'p', article: 'une', sing: 'poire', plur: 'poires' }, elt2: { lettre: 'b', article: 'une', sing: 'banane', plur: 'bananes' } },\n        { prenom: prenom(), elt1: { lettre: 'c', article: 'un', sing: 'couteau', plur: 'couteaux' }, elt2: { lettre: 'f', article: 'une', sing: 'fourchette', plur: 'fourchettes' } },\n        { prenom: prenom(), elt1: { lettre: 'm', article: 'un', sing: 'marteau', plur: 'marteaux' }, elt2: { lettre: 'e', article: 'une', sing: 'enclume', plur: 'enclumes' } },\n      ]\n      let enonces = [];\n      let n = randint(1, 6);\n      let p = randint(1, 6);\n      let situation = situations[randint(0, situations.length - 1)];\n      enonces.push({\n        enonce: `${situation.prenom} veut acheter ${n} ${pluriel(n, situation.elt1)} et ${p} ${pluriel(p, situation.elt2)}.\n\t\t\t\t<br>On note $${situation.elt1.lettre}$\tle prix d'${situation.elt1.article} ${situation.elt1.sing} et $${situation.elt2.lettre}$\tle prix d'${situation.elt2.article} ${situation.elt2.sing}.`,\n        question: ``,\n        correction: `\n        ${situation.prenom} va payer $${n}$ fois le prix d'${situation.elt1.article} ${situation.elt1.sing} et $${p}$ fois le prix d'${situation.elt2.article} ${situation.elt2.sing}.\n        <br> C'est à dire $${n}\\\\times ${situation.elt1.lettre} + ${p}\\\\times ${situation.elt2.lettre} = ${sliceUn(n)}${situation.elt1.lettre} + ${sliceUn(p)}${situation.elt2.lettre}$.\n        <br>${texteEnCouleur(`Donc le prix total de l'achat est  $${sliceUn(n)}${situation.elt1.lettre} + ${sliceUn(p)}${situation.elt2.lettre}$.`)}\n        `\n      })\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n\n  }\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  //this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\t\n}\n\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Forme_litterale_introduire_une_lettre","typesDeQuestionsDisponibles","Exercice","this","debug","sup","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","pluriel","n","obj","plur","sing","sliceUn","situations","prenom","elt1","lettre","article","elt2","enonces","randint","p","situation","length","push","enonce","question","correction","texteEnCouleur","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}