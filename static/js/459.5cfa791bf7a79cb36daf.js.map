{"version":3,"file":"js/459.5cfa791bf7a79cb36daf.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N11-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\nimport { point, segment, crochetD, crochetG, intervalle, mathalea2d } from '../../modules/2d.js'\n\nexport const titre = 'Utiliser et comprendre les symboles $\\\\cup $ et $\\\\cap $ avec les intervalles de $\\\\mathbb{R}$'\n\n/**\n * 2N11-2, ex 2N25\n * @author Stéphane Guyon\n */\nexport default function UnionEtIntersectionIntervallesDeR () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Répondre aux questions suivantes: :'\n  this.nbQuestions = 4\n  this.nbCols = 2\n  this.nbColsCorr = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7, 8]; let typesDeQuestions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    const X1 = point(0, 0)\n    const X2 = point(12, 0)\n    for (let i = 0, a, b, c, d, s, e, f, test, A, B, C, D, c1, c2, c3, c4, int, int1, int2, texte = '', texteCorr = '', cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      test = randint(1, 6)\n      // variables qui alternent les ouvertures de crochets\n      switch (typesDeQuestions) {\n        // Cas par cas, on définit le type de nombres que l'on souhaite\n        // Combien de chiffres ? Quelles valeurs ?\n        case 1: // Intersection de deux intervalles fermés disjoints\n          a = randint(1, 15)\n          e = a + 1\n          b = randint(e, 25)\n          e = b + 1\n          c = randint(e, 35)\n          e = c + 1\n          d = randint(e, 45)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(5, 0, b)\n          C = point(6, 0, c)\n          D = point(9, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', 0)\n          int2 = intervalle(C, D, 'blue', 0)\n\n          texte = 'Donner si possible, une écriture simplifiée de '\n          if (test === 1) {\n            texte += `$I=[${a};${b}]\\\\cap[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cap[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]${a};${b}]$ et dans $[${c};${d}]$.`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $]${c};${d}]$.`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}]\\\\cap[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cap[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n          }\n          texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n          texteCorr += `<br>Les deux ensembles sont disjoints, ils n'ont aucun élément en commun.<br>\n                    $I=\\\\emptyset$`\n          break\n        case 2: // Union de deux intervalles fermés disjoints\n          a = randint(1, 15)\n          e = a + 1\n          b = randint(e, 25)\n          e = b + 1\n          c = randint(e, 35)\n          e = c + 1\n          d = randint(e, 45)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(5, 0, b)\n          C = point(6, 0, c)\n          D = point(9, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', 0)\n          int2 = intervalle(C, D, 'blue', 0)\n          texte = 'Donner si possible, une écriture simplifiée de Union Union'\n          if (test === 1) {\n            texte += `$I=[${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ ou bien $[${c};${d}]$, ou dans les deux.`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $[${c};${d}]$ , ou dans les deux.`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ou bien  $]${c};${d}]$, ou dans les deux.`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}]\\\\cup[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}]$ ou bien  $[${c};${d}[$, ou dans les deux.`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cup[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}[$ ou bien  $[${c};${d}[$, ou dans les deux.`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $]${c};${d}[$, ou dans les deux.`\n          }\n          texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n          texteCorr += `<br>Les deux ensembles sont disjoints, ils n'ont aucun élément en commun.<br>\n                    On ne peut pas simplifier l'écriture de $I$ qui s'écrit donc `\n          if (test === 1) {\n            texteCorr += `$I=[${a};${b}]\\\\cup[${c};${d}]$`\n          }\n          if (test === 2) {\n            texteCorr += `$I=]${a};${b}]\\\\cup[${c};${d}]$`\n          }\n          if (test === 3) {\n            texteCorr += `$I=[${a};${b}]\\\\cup]${c};${d}]$`\n          }\n          if (test === 4) {\n            texteCorr += `$I=[${a};${b}]\\\\cup[${c};${d}[$`\n          }\n          if (test === 5) {\n            texteCorr += `$I=[${a};${b}[\\\\cup[${c};${d}[$`\n          }\n          if (test === 6) {\n            texteCorr += `$I=]${a};${b}]\\\\cup]${c};${d}]$`\n          }\n          break\n        case 3:// Intersection de deux intervalles fermés avec intervalle fermé en commmun\n          a = randint(1, 15)\n          e = a + 4\n          b = randint(29, 45)\n          e = b - 1\n          c = randint(16, e)\n          e = b + 1\n          d = randint(e, 65)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(6, 0, b)\n          C = point(5, 0, c)\n          D = point(9, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = 'Donner si possible, une écriture simplifiée de '\n          if (test === 1) {\n            texte += `$I=[${a};${b}]\\\\cap[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=[${c};${b}]$`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cap[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]${a};${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=[${c};${b}]$`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $]${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=]${c};${b}]$`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cap]${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=]${c};${b}[$`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cap[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=[${c};${b}[$`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `$I=]${c};${b}]$`\n          }\n\n          break\n        case 4:// Union de deux intervalles fermés avec intervalle fermé en commmun\n          a = randint(1, 15)\n          e = a + 4\n          b = randint(29, 45)\n          e = b - 1\n          c = randint(16, e)\n          e = b + 1\n          d = randint(e, 65)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(6, 0, b)\n          C = point(5, 0, c)\n          D = point(9, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = 'Donner si possible, une écriture simplifiée de '\n          if (test === 1) {\n            texte += `$I=[${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ ou bien $[${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=[${a};${d}]$`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $[${c};${d}]$ , ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=]${a};${d}]$`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ou bien  $]${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=[${a};${d}]$`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cup]${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}[$ ou bien  $]${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=[${a};${d}[$`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cup[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}[$ ou bien  $[${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=[${a};${d}[$`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $]${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `$I=]${a};${d}]$`\n          }\n\n          break\n        case 5:// Intersection de deux intervalles fermés dont un inclus dans l'autre\n          a = randint(1, 15)\n          e = a + 15\n          b = randint(e, 35)\n          e = a + 1\n          f = b - 10\n          c = randint(e, f)\n          e = c + 1\n          d = randint(e, f)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(9, 0, b)\n          C = point(5, 0, c)\n          D = point(7, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = 'Donner si possible, une écriture simplifiée de'\n\n          if (test === 1) {\n            texte += ` $I=[${a};${b}] \\\\cap [${c};${d}].$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $[${c};${d}]\\\\subset [${a};${b}]$ donc $I=[${c};${d}].$`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cap[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]${a};${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $[${c};${d}]\\\\subset ]${a};${b}]$ donc $I=[${c};${d}].$`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $]${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $]${c};${d}]\\\\subset [${a};${b}]$ donc $I=]${c};${d}].$`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cap]${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $]${c};${d}[\\\\subset [${a};${b}[$ donc $I=]${c};${d}[.$`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cap[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}[$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $[${c};${d}[\\\\subset [${a};${b}[$ donc $I=[${c};${d}[.$`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}]$ et dans $[${c};${d}[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += `On observe que $]${c};${d}]\\\\subset ]${a};${b}]$ donc $I=]${c};${d}].$`\n          }\n\n          break\n        case 6:// Union de deux intervalles fermés dont un inclus dans l'autre\n          a = randint(1, 15)\n          e = a + 15\n          b = randint(e, 35)\n          e = a + 1\n          f = b - 10\n          c = randint(e, f)\n          e = c + 1\n          d = randint(e, f)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(9, 0, b)\n          C = point(5, 0, c)\n          D = point(7, 0, d)\n          if (test === 1) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = 'Donner si possible, une écriture simplifiée de'\n\n          if (test === 1) {\n            texte += `$I=[${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ ou bien $[${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $[${c};${d}]\\\\subset [${a};${b}]$ donc $I=[${a};${b}].$`\n          }\n          if (test === 2) {\n            texte += `$I=]${a};${b}]\\\\cup[${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $[${c};${d}]$ , ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $[${c};${d}]\\\\subset ]${a};${b}]$ donc $I=]${a};${b}].$`\n          }\n          if (test === 3) {\n            texte += `$I=[${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $[${a};${b}]$ou bien  $]${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $]${c};${d}]\\\\subset [${a};${b}]$ donc $I=[${a};${b}].$`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cup]${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}[$ ou bien  $]${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $]${c};${d}[\\\\subset [${a};${b}[$ donc $I=[${a};${b}[].$`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cup[${c};${d}[$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $[${a};${b}[$ ou bien  $[${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $[${c};${d}]\\\\subset [${a};${b}[$ donc $I=[${a};${b}[.$`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans  $]${a};${b}]$ ou bien  $]${c};${d}[$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n\n            texteCorr += `On $]${c};${d}]\\\\subset ]${a};${b}]$ donc $I=]${a};${b}].$`\n          }\n\n          break\n        case 7:// Intersection de deux intervalles avec infini\n          a = randint(1, 15)\n          e = a + 1\n          b = randint(e, 25)\n          e = b + 1\n          c = randint(e, 35)\n          e = c + 1\n          d = randint(e, 45)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          B = point(5, 0, b)\n          C = point(6, 0, c)\n          D = point(10, 0, d)\n          if (test === 1) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', 0)\n          int2 = intervalle(C, D, 'blue', 0)\n\n          texte = 'Donner si possible, une écriture simplifiée de'\n          if (test === 1) {\n            texte += ` $I=]-\\\\infty;${b}] \\\\cap [${c};${d}].$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]-\\\\infty;${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc aucun réel n\\'appartient aux deux ensembles.<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          if (test === 2) {\n            texte += ` $I=]-\\\\infty;${b}] \\\\cap [${c};${d}].$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]-\\\\infty;${b}]$ et dans $[${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc aucun réel n\\'appartient aux deux ensembles.<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          if (test === 3) {\n            texte += `$I=]-\\\\infty;${b}]\\\\cap]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[$I=]-\\\\infty;${b}]$ et dans $]${c};${d}]$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc aucun réel n\\'appartient aux deux ensembles.<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cap]${c};+\\\\infty[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}[$ et dans $]${c};+\\\\infty[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cap[${c};+\\\\infty[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $[${a};${b}[$ et dans $[${c};+\\\\infty[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cap]${c};+\\\\infty[$`\n            texteCorr = `<br>On cherche les réels qui sont à la fois dans $]${a};${b}]$ et dans $]${c};+\\\\infty[$.`\n            texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n            texteCorr += '$I=\\\\emptyset$'\n          }\n          break\n        case 8:// Union de deux intervalles un fermé et l'autre semi fermé, et disjoints\n          a = randint(1, 15)\n          e = a + 1\n          b = randint(e, 25)\n          e = b + 1\n          c = randint(e, 35)\n          e = c + 1\n          d = randint(e, 45)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          B = point(5, 0, b)\n          C = point(6, 0, c)\n\n          if (test === 1) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 2) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetD(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 3) {\n            A = point(0, 0)\n            D = point(10, 0, d)\n            // c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            c4 = crochetG(D, 'blue')\n          }\n          if (test === 4) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetG(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          if (test === 5) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetD(A, 'red')\n            c2 = crochetD(B, 'red')\n            c3 = crochetD(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          if (test === 6) {\n            A = point(0, 0, a)\n            D = point(15, 0)\n            c1 = crochetG(A, 'red')\n            c2 = crochetG(B, 'red')\n            c3 = crochetG(C, 'blue')\n            // c4 = crochetD(D, 'blue')\n          }\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', 0)\n          int2 = intervalle(C, D, 'blue', 0)\n          texte = 'Donner si possible, une écriture simplifiée de'\n          if (test === 1) {\n            texte += ` $I=]-\\\\infty;${b}] \\\\cup [${c};${d}].$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $]-\\\\infty;${b}]$ ou bien dans $[${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=]-\\\\infty;${b}] \\\\cup [${c};${d}].$`\n          }\n          if (test === 2) {\n            texte += ` $I=]-\\\\infty;${b}] \\\\cup [${c};${d}].$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $]-\\\\infty;${b}]$ ou bien dans $[${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=]-\\\\infty;${b}] \\\\cup [${c};${d}].$`\n          }\n\n          if (test === 3) {\n            texte += `$I=]-\\\\infty;${b}]\\\\cup]${c};${d}]$`\n            texteCorr = `<br>On cherche les réels qui sont ou bien dans $]-\\\\infty;${b}]$ ou bien dans $[${c};${d}]$, ou dans les deux.`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=]-\\\\infty;${b}] \\\\cup [${c};${d}].$`\n          }\n          if (test === 4) {\n            texte += `$I=[${a};${b}[\\\\cup]${c};+\\\\infty[$`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=[${a};${b}[\\\\cup]${c};+\\\\infty[$`\n          }\n          if (test === 5) {\n            texte += `$I=[${a};${b}[\\\\cup[${c};+\\\\infty[$`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=[${a};${b}[\\\\cup[${c};+\\\\infty[$`\n          }\n          if (test === 6) {\n            texte += `$I=]${a};${b}]\\\\cup]${c};+\\\\infty[$`\n            texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n            texteCorr += 'On observe que les deux intervalles sont disjoints donc <br>'\n            texteCorr += `$I=[${a};${b}]\\\\cup]${c};+\\\\infty[$`\n          }\n\n          break\n        case 9:\n          a = randint(1, 15)\n          e = a + 4\n          b = randint(29, 45)\n          e = b - 1\n          c = randint(16, e)\n          e = b + 1\n          d = randint(e, 65)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(6, 0, b)\n          C = point(5, 0, c)\n          D = point(9, 0, d)\n          c1 = crochetG(A, 'red')\n          c2 = crochetD(B, 'red')\n          c3 = crochetD(C, 'blue')\n          c4 = crochetG(D, 'blue')\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = `Donner si possible, une écriture simplifiée de $I=]${a};${b}[ \\\\cap [${c};${d}].$`\n\n          texteCorr = `<br>On cherche les réels qui sont à la fois dans $]${a};${b}[$ et dans $[${c};${d}]$.`\n          texteCorr += '<br>On regarde la partie de l\\'intervalle qui est coloriée à la fois en bleu et en rouge :<br>'\n          texteCorr += `$I=[${c};${b}[$`\n          break\n        case 10:\n          a = randint(1, 15)\n          e = a + 4\n          b = randint(29, 45)\n          e = b - 1\n          c = randint(16, e)\n          e = b + 1\n          d = randint(e, 65)\n          s = segment(0, 0, 10, 0)\n          s.styleExtremites = '->'\n\n          A = point(2, 0, a)\n          B = point(6, 0, b)\n          C = point(5, 0, c)\n          D = point(9, 0, d)\n          c1 = crochetG(A, 'red')\n          c2 = crochetD(B, 'red')\n          c3 = crochetG(C, 'blue')\n          c4 = crochetD(D, 'blue')\n          int = intervalle(X1, X2, 'black', 0)\n          int1 = intervalle(A, B, 'red', -0.1)\n          int2 = intervalle(C, D, 'blue', 0.1)\n          texte = `Donner si possible, une écriture simplifiée de $I=]${a};${b}[ \\\\cup ]${c};${d}[.$`\n\n          texteCorr = `<br>On cherche les réels qui sont ou bien dans $]${a};${b}[$, ou bien dans $]${c};${d}[$.`\n          texteCorr += '<br>On donc regarde la partie de l\\'intervalle qui est coloriée, soit en bleu, soit en rouge, soit en bleu et rouge :<br>'\n          texteCorr += `$I=]${a};${d}[$`\n          break\n      }\n      texteCorr += mathalea2d({\n        xmin: -2,\n        ymin: -2,\n        xmax: 15,\n        ymax: 2\n      }, int, int1, int2, c1, c2, c3, c4)\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","UnionEtIntersectionIntervallesDeR","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestions","listeTypeDeQuestions","combinaisonListes","X1","point","X2","a","b","c","d","s","e","f","test","A","B","C","D","c1","c2","c3","c4","int","int1","int2","i","texte","texteCorr","cpt","randint","segment","styleExtremites","crochetD","crochetG","intervalle","mathalea2d","xmin","ymin","xmax","ymax","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}