{"version":3,"sources":["webpack://mathalea/./src/js/exercices/CM/CM009.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["titre","amcReady","interactifReady","amcType","Moitie","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","range1","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","i","cpt","randint","setReponse","interactif","ajouteChampTexte","texNombrec","texNombre","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","propositions","length","statut","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","feedback","type","querySelectorAll","uicheck","classList","add","propositionsQcm","espace","context","undefined","options","ordered","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","texteApres","inline","numeric","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/5807.35f0236ce8356538d12a.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nimport { listeQuestionsToContenu, randint, range1, combinaisonListes, texNombrec, texNombre } from '../../modules/outils.js'\nexport const titre = 'Moitié'\nexport const amcReady = false\nexport const interactifReady = true\nexport const amcType = 4\n/**\n * Calculer la moitié d'un nombre pair, d'un impair inférieur à 20, d'un multiple de 200, d'un nombre de la forme a00 avec a impair, d'un nombre de la forme\n *  a,b avec a et b pairs ou 1xx avec xx un nombre pair\n * @Auteur Rémi Angot\n * Référence CM009\n*/\nexport default function Moitie () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = 'Calculer'\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1 // niveau de difficulté\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = range1(6)\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // Table de 2\n          a = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${a * 2}$`\n          texteCorr = `$\\\\text{La moitié de }${a * 2} \\\\text{ est } ${a}$`\n          setReponse(this, i, a)\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n        case 2: // Impair inférieur à 20\n          a = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${a * 2 + 1}$`\n          texteCorr = `$\\\\text{La moitié de }${a * 2 + 1\n            } \\\\text{ est } ${texNombrec(a + 5 / 10)}$`\n          setReponse(this, i, texNombrec(a + 5 / 10))\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n        case 3: // Table de 200\n          a = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${texNombre(a * 2 * 100)}$`\n          texteCorr = `$\\\\text{La moitié de }${texNombre(\n            a * 2 * 100\n          )} \\\\text{ est } ${texNombre(a * 100)}$`\n          setReponse(this, i, texNombre(a * 100))\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n        case 4: // a00 avec a impair\n          a = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${texNombre((a * 2 + 1) * 100)}$`\n          texteCorr = `$\\\\text{La moitié de }${texNombre(\n            (a * 2 + 1) * 100\n          )} \\\\text{ est } ${texNombre(a * 100 + 50)}$`\n          setReponse(this, i, texNombre(a * 100 + 50))\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n        case 5: // a,b avec a et b pairs\n          a = randint(2, 9)\n          b = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${texNombrec(\n            a * 2 + (b * 2) / 100\n          )}$`\n          texteCorr = `$\\\\text{La moitié de }${texNombrec(\n            a * 2 + (b * 2) / 100\n          )} \\\\text{ est } ${texNombrec(a + b / 100)}$`\n          setReponse(this, i, texNombrec(a + b / 100))\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n        case 6: // 1xx avec xx un nombre pair\n          a = randint(2, 9)\n          texte = `$\\\\text{La moitié de }${100 + a * 2}$`\n          texteCorr = `$\\\\text{La moitié de }${100 + a * 2} \\\\text{ est } ${50 + a\n            }$`\n          setReponse(this, i, 50 + a)\n          if (this.interactif) texte += ajouteChampTexte(this, i)\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}