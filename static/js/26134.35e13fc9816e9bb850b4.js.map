{"version":3,"file":"js/26134.35e13fc9816e9bb850b4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N61-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { mathalea2d, tableauDeVariation } from '../../modules/2d.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, ecritureAlgebrique, ecritureParentheseSiNegatif, texFractionReduite, miseEnEvidence, texFraction, texSymbole } from '../../modules/outils.js'\n\nexport const titre = 'Résoudre une inéquation produit'\n\n/**\n * Résoudre une inéquation produit\n * * Type 1 : (x+a)(x+b)<0\n * * Type 2 : (x+a)(x+b)(x+c)<0\n * * Type 3 : (ax+b)(cx+d)<0\n * * Type 4 : (ax+b)(cx+d)(ex+f)<0\n * * Type 5 : (ax+b)²(cx+d)<0\n * * Tous les types\n * @author Guillaume Valmont\n * 2N61-2, ex 2L14-1\n * 17/07/2021\n */\nexport default function ExerciceInequationProduit () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.spacing = 2 // Espace entre deux lignes\n  this.spacingCorr = 2 // Espace entre deux lignes pour la correction\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = false // Désactive la correction détaillée par défaut\n  this.sup = 1 // Choix du type d'inéquation\n  this.nbQuestions = 1 // Choix du nombre de questions\n  if (this.nbQuestions.toString() === '1') {\n    this.consigne = 'Résoudre l\\'inéquation suivante :'\n  } else {\n    this.consigne = 'Résoudre les inéquations suivantes :'\n  }\n  this.listePackages = 'tkz-tab' // Pour la compilation LateX des tableaux de signes\n  this.nbCols = 1 // Fixe le nombre de colonnes pour les énoncés de la sortie LateX\n  this.nbColsCorr = 1 // Fixe le nombre de colonnes pour les réponses de la sortie LateX\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeTypeDeQuestions // Stockera la liste des types de questions\n    // Convertit le paramètre this.sup en type de question\n    switch (this.sup.toString()) {\n      case '1':\n        listeTypeDeQuestions = ['(x+a)(x+b)<0']\n        break\n      case '2':\n        listeTypeDeQuestions = ['(x+a)(x+b)(x+c)<0']\n        break\n      case '3':\n        listeTypeDeQuestions = ['(ax+b)(cx+d)<0']\n        break\n      case '4':\n        listeTypeDeQuestions = ['(ax+b)(cx+d)(ex+f)<0']\n        break\n      case '5':\n        listeTypeDeQuestions = ['(ax+b)²(cx+d)<0']\n        break\n      default:\n        listeTypeDeQuestions = [\n          '(x+a)(x+b)<0',\n          '(x+a)(x+b)(x+c)<0',\n          '(ax+b)(cx+d)<0',\n          '(ax+b)(cx+d)(ex+f)<0',\n          '(ax+b)²(cx+d)<0'\n        ]\n        break\n    }\n    // Crée une liste randomisée de types de questions respectant le nombre (this.nbQuestions) et le type (this.sup) de questions passés en paramètre\n    listeTypeDeQuestions = combinaisonListes(\n      listeTypeDeQuestions,\n      this.nbQuestions\n    )\n    // Crée une liste d'autant de signes que de questions\n    const signes = combinaisonListes(['<', '>', '≤', '≥'], this.nbQuestions)\n    // Boucle principale qui servira à créer toutes les questions // On limite le nombre d'essais à 50 pour chercher des valeurs nouvelles\n    for (let i = 0, a, b, c, d, e, f, pGauche, pDroite, texte, ligne1, ligne2, ligne3, ligne4, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Génère 4 nombres relatifs a, b, c et d tous différents avec a et c qui ne peuvent pas être 1 car ce sont ceux qui peuvent multiplier x pour éviter à la fois d'avoir '1x' et de diviser par 1\n      a = randint(-13, 13, [0, 1, -1])\n      b = randint(-13, 13, [0, a])\n      c = randint(-13, 13, [0, 1, -1, a, b])\n      d = randint(-13, 13, [0, a, b, c, (b * c) / a]) // Pour éviter que ax + b et cx + d n'aient la même racine\n      e = randint(-13, 13, [0, 1, -1, a, b, c, d])\n      f = randint(-13, 13, [0, a, b, c, d, e, (b * e) / a, (d * e) / c]) // Pour éviter que (ax + b et ex + f) ou (cx + d et ex + f) n'aient la même racine\n      // Pioche un signe d'inégalité parmi <, ≤, ≥, > et définit en fonction si les crochets seront ouverts ou fermés dans l'ensemble de solutions\n      switch (signes[i]) {\n        case '<':\n          pGauche = ']'\n          pDroite = '['\n          break\n        case '≤':\n          pGauche = '['\n          pDroite = ']'\n          break\n        case '>':\n          pGauche = ']'\n          pDroite = '['\n          break\n        case '≥':\n          pGauche = '['\n          pDroite = ']'\n          break\n      }\n      // Fonction détaillant la résolution d'une équation de type x + val\n      function resolutionDetailleeEquation (val) {\n        texteCorr += `$x${ecritureAlgebrique(val)}${texSymbole('>')}0$ <br>`\n        texteCorr += `$x${ecritureAlgebrique(val)}${miseEnEvidence(ecritureAlgebrique(-1 * val))}\n        ${texSymbole('>')}${miseEnEvidence(ecritureAlgebrique(-1 * val))}$<br>`\n        texteCorr += `$x${texSymbole('>')}${-val}$<br>`\n      }\n      // Fonction écrivant la correction détaillée d'une inéquation du type var1*x + var2 > 0\n      function ecrireCorrectionDetaillee (var1, var2, egal) {\n        let symbolePlusGrand = texSymbole('>')\n        let symbolePlusPetit = texSymbole('<')\n        if (egal) {\n          symbolePlusGrand = '='\n          symbolePlusPetit = '='\n        }\n        // Détaille les étapes de la résolution en mettant en évidence les calculs réalisés.\n        texteCorr += `<br>$${var1}x${ecritureAlgebrique(var2)}${symbolePlusGrand}0$ <br>`\n        texteCorr += `$${var1}x${ecritureAlgebrique(var2)}${miseEnEvidence(ecritureAlgebrique(-1 * var2))}\n        ${symbolePlusGrand}${miseEnEvidence(ecritureAlgebrique(-1 * var2))}$<br>`\n        texteCorr += `$${var1}x${symbolePlusGrand}${-var2}$<br>`\n        // Si var1 < 0, l'inégalité change de sens\n        if (var1 < 0) {\n          texteCorr += `$${var1}x${miseEnEvidence('\\\\div' + ecritureParentheseSiNegatif(var1))}`\n          if (egal) { // On met en évidence un > qui se change en <, pas un = qui ne change pas\n            texteCorr += symbolePlusPetit\n          } else {\n            texteCorr += miseEnEvidence(symbolePlusPetit)\n          }\n          texteCorr += `${-var2 + miseEnEvidence('\\\\div' + ecritureParentheseSiNegatif(var1))}$<br>`\n          texteCorr += `$x${symbolePlusPetit}${texFraction(-var2, var1)}$`\n          texteCorr += `<br>Donc $${var1}x${ecritureAlgebrique(var2)}${symbolePlusGrand}0$ si et seulement si $x${symbolePlusPetit} ${texFractionReduite(-var2, var1)}$`\n        } else { // sinon elle ne change pas de sens\n          texteCorr += `$${var1}x${miseEnEvidence('\\\\div' + ecritureParentheseSiNegatif(var1))}\n            ${symbolePlusGrand}${-var2 + miseEnEvidence('\\\\div' + ecritureParentheseSiNegatif(var1))}$<br>`\n          texteCorr += `$x${symbolePlusGrand} ${texFraction(-var2, var1)}$`\n          texteCorr += `<br>Donc $${var1}x${ecritureAlgebrique(var2)}${symbolePlusGrand}0$ si et seulement si $x${symbolePlusGrand}${texFractionReduite(-var2, var1)}$`\n        }\n      }\n      // Prépare les quatre types de lignes possibles pour les tableaux avec 2 antécédents : + + - , + - -, - + + et - - +\n      // Les lignes sont des tableaux qui alternent chaîne de caractère et 'nombre de pixels de largeur estimée du texte pour le centrage'\n      // La première chaîne 'Line' indique que c'est pour un tableau de signes et valeurs ('Var' pour un tableau de variations)\n      // '' indique qu'il n'y a rien à afficher (pour laisser un espace sous la borne par exemple)\n      // \",'z', 20\" pour avoir un zéro sur des pointillés et \",'t', 5\" pour juste avoir les pointillés\n      const lignePPM = ['Line', 30, '', 0, '+', 20, 't', 5, '+', 20, 'z', 20, '-', 20]\n      const lignePMM = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 't', 5, '-', 20]\n      const ligneMPP = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 't', 5, '+', 20]\n      const ligneMMP = ['Line', 30, '', 0, '-', 20, 't', 5, '-', 20, 'z', 20, '+', 20]\n      // Prépare les six types de lignes possibles pour les tableaux avec 3 antécédents : +++-, ++--, +---, ---+, --++, -+++\n      const lignePPPM = ['Line', 30, '', 0, '+', 20, 't', 5, '+', 20, 't', 5, '+', 20, 'z', 20, '-', 20]\n      const lignePPMM = ['Line', 30, '', 0, '+', 20, 't', 5, '+', 20, 'z', 20, '-', 20, 't', 5, '-', 20]\n      const lignePMMM = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 't', 5, '-', 20, 't', 5, '-', 20]\n      const ligneMPPP = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 't', 5, '+', 20, 't', 5, '+', 20]\n      const ligneMMPP = ['Line', 30, '', 0, '-', 20, 't', 5, '-', 20, 'z', 20, '+', 20, 't', 5, '+', 20]\n      const ligneMMMP = ['Line', 30, '', 0, '-', 20, 't', 5, '-', 20, 't', 5, '-', 20, 'z', 20, '+', 20]\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // Génère la consigne (texte) et la correction (texteCorr) pour les questions de type '(x+a)(x+b)<0'                                      Type 1        //\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      if (listeTypeDeQuestions[i] === '(x+a)(x+b)<0') {\n        // Consigne\n        texte = `$(x${ecritureAlgebrique(a)})(x${ecritureAlgebrique(b)})${texSymbole(signes[i])}0$`\n        // Correction // Si une correction détaillée est demandée, détaille comment résoudre les équations\n        texteCorr = texte + '<br>'\n        // Première équation\n        if (this.correctionDetaillee) {\n          resolutionDetailleeEquation(a)\n        }\n        texteCorr += `$x${ecritureAlgebrique(a)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')}${-a}$ <br>`\n        // Deuxième équation\n        if (this.correctionDetaillee) {\n          resolutionDetailleeEquation(b)\n        }\n        texteCorr += `$x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')}${-b}$ <br>`\n        // Prépare l'affichage du tableau de signes : la ligne1 correspond à (x + a) et la ligne2 correspond à (x + b)\n        texteCorr += 'On peut donc en déduire le tableau de signes suivant : <br>'\n        // Si la racine de x + a est inférieure à la racine de x + b, la ligne1 (celle de x + a) aura d'abord un 0, puis un | et ce sera l'inverse pour la ligne2\n        if (Math.min(-a, -b) === -a) {\n          ligne1 = ligneMPP\n          ligne2 = ligneMMP\n        } else { // Si la racine de x + a est supérieure à la racine de x + b, ligne2 et ligne1 sont inversées (pas d'égalité possible car a ≠ b)\n          ligne1 = ligneMMP\n          ligne2 = ligneMPP\n        }\n        // Affiche le tableau de signes : xmin détermine la marge à gauche, ymin la hauteur réservée pour le tableau, xmax la largeur réservée pour le tableau et ymax la marge au dessus du tableau\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -8.1, xmax: 30, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              // Première colonne du tableau avec le format [chaine d'entête, hauteur de ligne, nombre de pixels de largeur estimée du texte pour le centrage]\n              ['$x$', 2, 30], [`$x${ecritureAlgebrique(a)}$`, 2, 50], [`$x${ecritureAlgebrique(b)}$`, 2, 50], [`$(x${ecritureAlgebrique(a)})(x${ecritureAlgebrique(b)})$`, 2, 100]\n            ],\n            // Première ligne du tableau avec chaque antécédent suivi de son nombre de pixels de largeur estimée du texte pour le centrage\n            ['$-\\\\infty$', 30, `$${Math.min(-a, -b)}$`, 20, `$${Math.max(-a, -b)}$`, 20, '$+\\\\infty$', 30]\n          ],\n          // Les autres lignes du tableau dont le fonctionnement est expliqué plus haut\n          tabLines: [ligne1, ligne2, ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 'z', 20, '+', 20]],\n          colorBackground: '',\n          espcl: 3.5, // taille en cm entre deux antécédents\n          deltacl: 0.8, // distance entre la bordure et les premiers et derniers antécédents\n          lgt: 8, // taille de la première colonne en cm\n          hauteurLignes: [15, 15, 15, 15]\n\n        }))\n        // Affiche l'ensemble de solutions\n        if ((signes[i] === '<' || signes[i] === '≤')) {\n          texteCorr += `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left${pGauche} ${Math.min(-a, -b)} , ${Math.max(-a, -b)} \\\\right${pDroite} $.`\n        } else if ((signes[i] === '>' || signes[i] === '≥')) {\n          texteCorr += `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left] -\\\\infty , ${Math.min(-a, -b)} \\\\right${pDroite} \\\\bigcup \\\\left${pGauche} ${Math.max(-a, -b)}, +\\\\infty \\\\right[ $.`\n        }\n      }\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // Génère la consigne (texte) et la correction (texteCorr) pour les questions de type '(x+a)(x+b)(x+c)<0'                                 Type 2        //\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      if (listeTypeDeQuestions[i] === '(x+a)(x+b)(x+c)<0') {\n        // Consigne\n        texte = `$(x${ecritureAlgebrique(a)})(x${ecritureAlgebrique(b)})(x${ecritureAlgebrique(c)})${texSymbole(signes[i])}0$`\n        // Correction // Si une correction détaillée est demandée, détaille comment résoudre les équations\n        texteCorr = texte + '<br>'\n        // Première équation\n        if (this.correctionDetaillee) {\n          resolutionDetailleeEquation(a)\n        }\n        texteCorr += `$x${ecritureAlgebrique(a)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')}${-a}$ <br>`\n        // Deuxième équation\n        if (this.correctionDetaillee) {\n          resolutionDetailleeEquation(b)\n        }\n        texteCorr += `$x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')}${-b}$ <br>`\n        // Troisième équation\n        if (this.correctionDetaillee) {\n          resolutionDetailleeEquation(c)\n        }\n        texteCorr += `$x${ecritureAlgebrique(c)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')}${-c}$ <br>`\n        // On range les racines dans l'ordre croissant pour pouvoir les mettre dans l'ordre dans le tableau\n        const racines = [-a, -b, -c].sort(function (a, b) { return a - b })\n        const lignes = [-a, -b, -c]\n        // Pour chaque ligne, on cherche la racine correspondante\n        for (let j = 0; j < 3; j++) {\n          for (let n = 0; n < 3; n++) {\n            if (racines[n] === lignes[j]) {\n              if (n === 0) { // La racine d'indice 0 est la plus petite des trois, et donc celle la plus à gauche dans le tableau donc le 0 (, 'z', 20) est en première position et les autres sont des | (, 't', 5)\n                lignes[j] = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 't', 5, '+', 20, 't', 5, '+', 20]\n              } else if (n === 1) { // La racine d'indice 1 est la deuxième racine, donc le 0 (, 'z', 20) en deuxième position et les autres sont des | (, 't', 5)\n                lignes[j] = ['Line', 30, '', 0, '-', 20, 't', 5, '-', 20, 'z', 20, '+', 20, 't', 5, '+', 20]\n              } else if (n === 2) { // La racine d'indice 2 est la plus grande des racines, donc le 0 (, 'z', 20) est en troisième position et les autres sont des | (, 't', 5)\n                lignes[j] = ['Line', 30, '', 0, '-', 20, 't', 5, '-', 20, 't', 5, '-', 20, 'z', 20, '+', 20]\n              }\n            }\n          }\n        }\n        // Affiche le tableau de signes (voir les commentaires du premier type d'exercice)\n        texteCorr += 'On peut donc en déduire le tableau de signes suivant : <br>'\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -10.1, xmax: 30, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              ['$x$', 2, 30], [`$x${ecritureAlgebrique(a)}$`, 2, 50], [`$x${ecritureAlgebrique(b)}$`, 2, 50], [`$x${ecritureAlgebrique(c)}$`, 2, 50], [`$(x${ecritureAlgebrique(a)})(x${ecritureAlgebrique(b)})(x${ecritureAlgebrique(c)})$`, 2, 150]\n            ],\n            ['$-\\\\infty$', 30, `$${racines[0]}$`, 20, `$${racines[1]}$`, 20, `$${racines[2]}$`, 20, '$+\\\\infty$', 30]\n          ],\n          tabLines: [lignes[0], lignes[1], lignes[2], ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 'z', 20, '-', 20, 'z', 20, '+', 20]],\n          colorBackground: '',\n          espcl: 3.5,\n          deltacl: 0.8,\n          lgt: 10,\n          hauteurLignes: [15, 15, 15, 15, 15]\n        }))\n        // Affiche l'ensemble de solutions\n        if ((signes[i] === '<' || signes[i] === '≤')) {\n          texteCorr += `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left] -\\\\infty , ${racines[0]} \\\\right${pDroite} \\\\bigcup \\\\left${pGauche} ${racines[1]} , ${racines[2]} \\\\right${pDroite} $.`\n        } else if ((signes[i] === '>' || signes[i] === '≥')) {\n          texteCorr += `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left${pGauche} ${racines[0]} , ${racines[1]} \\\\right${pDroite} \\\\bigcup \\\\left${pGauche} ${racines[2]}, +\\\\infty \\\\right[ $.`\n        }\n      }\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // Génère la consigne (texte) et la correction (texteCorr) pour les questions de type '(ax+b)(cx+d)<0'                                    Type 3        //\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      if (listeTypeDeQuestions[i] === '(ax+b)(cx+d)<0') {\n        let valPetit, valGrand\n        texte = `$(${a}x${ecritureAlgebrique(b)})(${c}x${ecritureAlgebrique(d)})${texSymbole(signes[i])}0$`\n        // Correction\n        texteCorr = texte\n        // Si une correction détaillée est demandée, détaille comment résoudre les équations\n        if (this.correctionDetaillee) {\n          // Utilise la fonction décrite plus haut pour éviter d'écrire deux fois la même chose pour les deux inéquations ax + b > 0 et cx + d > 0\n          ecrireCorrectionDetaillee(a, b)\n          ecrireCorrectionDetaillee(c, d)\n        } else { // Si pas de correction détaillée, écrit simplement les conclusions, en changeant le sens des inégalités si a < 0 ou si c < 0\n          if (a < 0) {\n            texteCorr += `<br>$${a}x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-b, a)}$`\n          } else {\n            texteCorr += `<br>$${a}x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-b, a)}$`\n          }\n          if (c < 0) {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-d, c)}$`\n          } else {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-d, c)}$`\n          }\n        }\n        // Prépare l'affichage du tableau de signes\n        texteCorr += '<br>On peut donc en déduire le tableau de signes suivant : <br>'\n        if (-b / a < -d / c) { // Si la plus petite solution est celle de la première équation\n          if (a > 0) { // La ligne1 change de signe en premier donc ligne1 = PMM ou MPP selon le signe de a\n            ligne1 = ligneMPP\n          } else {\n            ligne1 = lignePMM\n          }\n          if (c > 0) { // La ligne 2 change de signe en deuxième donc ligne2 = PPM ou MMP selon le signe de c\n            ligne2 = ligneMMP\n          } else {\n            ligne2 = lignePPM\n          }\n          valPetit = texFractionReduite(-b, a) // la plus petite valeur est la solution de la première équation\n          valGrand = texFractionReduite(-d, c) // la plus grande valeur est la solution de la deuxième équation\n        } else { // Si la plus petite solution est celle de la deuxième équation\n          if (a > 0) { // La ligne1 change de signe en deuxième donc ligne1 = PPM ou MMP selon le signe de a\n            ligne1 = ligneMMP\n          } else {\n            ligne1 = lignePPM\n          }\n          if (c > 0) { // La ligne 2 change de signe en premier donc ligne2 = PMM ou MPP selon le signe de c\n            ligne2 = ligneMPP\n          } else {\n            ligne2 = lignePMM\n          }\n          valPetit = texFractionReduite(-d, c) // la plus petite valeur est la solution de la deuxième équation\n          valGrand = texFractionReduite(-b, a) // la plus grande valeur est la solution de la première équation\n        }\n        // Détermine la dernière ligne selon le signe du coefficient dominant\n        if (a * c > 0) {\n          ligne3 = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 'z', 20, '+', 20]\n        } else {\n          ligne3 = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 'z', 20, '-', 20]\n        }\n        // Affiche enfin le tableau\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -8.6, xmax: 30, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              ['$x$', 2.5, 30], [`$${a}x${ecritureAlgebrique(b)}$`, 2, 75], [`$${c}x${ecritureAlgebrique(d)}$`, 2, 75], [`$(${a}x${ecritureAlgebrique(b)})(${c}x${ecritureAlgebrique(d)})$`, 2, 200]\n            ],\n            ['$-\\\\infty$', 30, `$${valPetit}$`, 20, `$${valGrand}$`, 20, '$+\\\\infty$', 30]\n          ],\n          tabLines: [ligne1, ligne2, ligne3],\n          colorBackground: '',\n          espcl: 3.5,\n          deltacl: 0.8,\n          lgt: 10,\n          hauteurLignes: [15, 15, 15, 15]\n        }))\n        // Affiche l'ensemble de solutions selon le sens de l'inégalité\n        const interieur = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left${pGauche} ${valPetit} , ${valGrand} \\\\right${pDroite} $.`\n        const exterieur = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\bigg] -\\\\infty , ${valPetit} \\\\bigg${pDroite} \\\\bigcup \\\\bigg${pGauche} ${valGrand}, +\\\\infty \\\\bigg[ $.` // \\\\bigg au lieu de \\\\left et \\\\right pour que les parenthèses soient les mêmes des deux côtés s'il y a une fraction d'un côté et pas de l'autre\n        if ((signes[i] === '<' || signes[i] === '≤')) {\n          if (a * c > 0) {\n            texteCorr += interieur\n          } else {\n            texteCorr += exterieur\n          }\n        } else if ((signes[i] === '>' || signes[i] === '≥')) {\n          if (a * c > 0) {\n            texteCorr += exterieur\n          } else {\n            texteCorr += interieur\n          }\n        }\n      }\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // Génère la consigne (texte) et la correction (texteCorr) pour les questions de type '(ax+b)(cx+d)(ex+f)<0'                                    Type 4  //\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      if (listeTypeDeQuestions[i] === '(ax+b)(cx+d)(ex+f)<0') {\n        let valPetit, valMoyen, valGrand\n        texte = `$(${a}x${ecritureAlgebrique(b)})(${c}x${ecritureAlgebrique(d)})(${e}x${ecritureAlgebrique(f)})${texSymbole(signes[i])}0$`\n        // Correction\n        texteCorr = texte\n        // Si une correction détaillée est demandée, détaille comment résoudre les équations\n        if (this.correctionDetaillee) {\n          // Utilise la fonction décrite plus haut pour éviter d'écrire deux fois la même chose pour les deux inéquations ax + b > 0 et cx + d > 0\n          ecrireCorrectionDetaillee(a, b)\n          ecrireCorrectionDetaillee(c, d)\n          ecrireCorrectionDetaillee(e, f)\n        } else { // Si pas de correction détaillée, écrit simplement les conclusions, en changeant le sens des inégalités si a < 0 ou si c < 0\n          if (a < 0) {\n            texteCorr += `<br>$${a}x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-b, a)}$`\n          } else {\n            texteCorr += `<br>$${a}x${ecritureAlgebrique(b)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-b, a)}$`\n          }\n          if (c < 0) {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-d, c)}$`\n          } else {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-d, c)}$`\n          }\n          if (e < 0) {\n            texteCorr += `<br>$${e}x${ecritureAlgebrique(f)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-f, e)}$`\n          } else {\n            texteCorr += `<br>$${e}x${ecritureAlgebrique(f)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-f, e)}$`\n          }\n        }\n        // Prépare l'affichage du tableau de signes\n        texteCorr += '<br>On peut donc en déduire le tableau de signes suivant : <br>'\n        if (-b / a < -d / c && -b / a < -f / e) { // Si la plus petite solution est celle de la première équation\n          if (a > 0) { // La ligne1 change de signe en premier donc ligne1 = PMMM ou MPPP selon le signe de a\n            ligne1 = ligneMPPP\n          } else {\n            ligne1 = lignePMMM\n          }\n          valPetit = texFractionReduite(-b, a) // la plus petite valeur est la solution de la première équation\n          if (-d / c < -f / e) { // Si la deuxième plus petite solution est celle de la deuxième équation\n            if (c > 0) { // La ligne 2 change de signe en deuxième donc ligne2 = PPMM ou MMPP selon le signe de c\n              ligne2 = ligneMMPP\n            } else {\n              ligne2 = lignePPMM\n            }\n            if (e > 0) { // La ligne 3 change de signe en troisième donc ligne3 = PPPM ou MMMP selon le signe de e\n              ligne3 = ligneMMMP\n            } else {\n              ligne3 = lignePPPM\n            }\n            valMoyen = texFractionReduite(-d, c) // la moyenne valeur est la solution de la deuxième équation\n            valGrand = texFractionReduite(-f, e) // la plus grande valeur est la solution de la troisième équation\n          } else { // Si la deuxième plus petite solution est celle de la troisième équation\n            if (c > 0) { // La ligne 2 change de signe en troisième donc ligne2 = PPPM ou MMMP selon le signe de c\n              ligne2 = ligneMMMP\n            } else {\n              ligne2 = lignePPPM\n            }\n            if (e > 0) { // La ligne 3 change de signe en deuxième donc ligne3 = PPMM ou MMPP selon le signe de e\n              ligne3 = ligneMMPP\n            } else {\n              ligne3 = lignePPMM\n            }\n            valMoyen = texFractionReduite(-f, e) // la moyenne valeur est la solution de la troisième équation\n            valGrand = texFractionReduite(-d, c) // la plus grande valeur est la solution de la deuxième équation\n          }\n        } else if (-d / c < -b / a && -d / c < -f / e) { // Si la plus petite solution est celle de la deuxième équation\n          if (c > 0) { // La ligne2 change de signe en premier donc ligne2 = PMMM ou MPPP selon le signe de c\n            ligne2 = ligneMPPP\n          } else {\n            ligne2 = lignePMMM\n          }\n          valPetit = texFractionReduite(-d, c) // la plus petite valeur est la solution de la deuxième équation\n          if (-b / a < -f / e) { // Si la deuxième plus petite solution est celle de la première équation\n            if (a > 0) { // La ligne 1 change de signe en deuxième donc ligne1 = PPMM ou MMPP selon le signe de a\n              ligne1 = ligneMMPP\n            } else {\n              ligne1 = lignePPMM\n            }\n            if (e > 0) { // La ligne 3 change de signe en troisième donc ligne3 = PPPM ou MMMP selon le signe de e\n              ligne3 = ligneMMMP\n            } else {\n              ligne3 = lignePPPM\n            }\n            valMoyen = texFractionReduite(-b, a) // la moyenne valeur est la solution de la première équation\n            valGrand = texFractionReduite(-f, e) // la plus grande valeur est la solution de la troisième équation\n          } else { // Si la deuxième plus petite solution est celle de la troisième équation\n            if (a > 0) { // La ligne 1 change de signe en troisième donc ligne1 = PPPM ou MMMP selon le signe de a\n              ligne1 = ligneMMMP\n            } else {\n              ligne1 = lignePPPM\n            }\n            if (e > 0) { // La ligne 3 change de signe en deuxième donc ligne3 = PPMM ou MMPP selon le signe de e\n              ligne3 = ligneMMPP\n            } else {\n              ligne3 = lignePPMM\n            }\n            valMoyen = texFractionReduite(-f, e) // la moyenne valeur est la solution de la troisième équation\n            valGrand = texFractionReduite(-b, a) // la plus grande valeur est la solution de la première équation\n          }\n        } else { // Si la plus petite solution est celle de la troisième équation\n          if (e > 0) { // La ligne 3 change de signe en premier donc ligne3 = PMMM ou MPPP selon le signe de e\n            ligne3 = ligneMPPP\n          } else {\n            ligne3 = lignePMMM\n          }\n          valPetit = texFractionReduite(-f, e) // la plus petite valeur est la solution de la troisième équation\n          if (-b / a < -d / c) { // Si la deuxième plus petite solution est celle de la première équation\n            if (a > 0) { // La ligne 1 change de signe en deuxième donc ligne1 = PPMM ou MMPP selon le signe de a\n              ligne1 = ligneMMPP\n            } else {\n              ligne1 = lignePPMM\n            }\n            if (c > 0) { // La ligne 2 change de signe en troisième donc ligne2 = PPPM ou MMMP selon le signe de c\n              ligne2 = ligneMMMP\n            } else {\n              ligne2 = lignePPPM\n            }\n            valMoyen = texFractionReduite(-b, a) // la moyenne valeur est la solution de la première équation\n            valGrand = texFractionReduite(-d, c) // la plus grande valeur est la solution de la deuxième équation\n          } else { // Si la deuxième plus petite solution est celle de la première équation\n            if (a > 0) { // La ligne 1 change de signe en troisième donc ligne1 = PPPM ou MMMP selon le signe de a\n              ligne1 = ligneMMMP\n            } else {\n              ligne1 = lignePPPM\n            }\n            if (c > 0) { // La ligne 2 change de signe en deuxième donc ligne2 = PPMM ou MMPP selon le signe de c\n              ligne2 = ligneMMPP\n            } else {\n              ligne2 = lignePPMM\n            }\n            valMoyen = texFractionReduite(-d, c) // la moyenne valeur est la solution de la deuxième équation\n            valGrand = texFractionReduite(-b, a) // la plus grande valeur est la solution de la première équation\n          }\n        }\n        // Détermine la dernière ligne selon le signe du coefficient dominant\n        if (a * c * e > 0) {\n          ligne4 = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 'z', 20, '-', 20, 'z', 20, '+', 20]\n        } else {\n          ligne4 = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 'z', 20, '+', 20, 'z', 20, '-', 20]\n        }\n        // Affiche enfin le tableau\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -10.6, xmax: 40, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              ['$x$', 2.5, 30], [`$${a}x${ecritureAlgebrique(b)}$`, 2, 75], [`$${c}x${ecritureAlgebrique(d)}$`, 2, 75], [`$${e}x${ecritureAlgebrique(f)}$`, 2, 75], [`$(${a}x${ecritureAlgebrique(b)})(${c}x${ecritureAlgebrique(d)})(${e}x${ecritureAlgebrique(f)})$`, 2, 200]\n            ],\n            ['$-\\\\infty$', 30, `$${valPetit}$`, 20, `$${valMoyen}$`, 20, `$${valGrand}$`, 20, '$+\\\\infty$', 30]\n          ],\n          tabLines: [ligne1, ligne2, ligne3, ligne4],\n          colorBackground: '',\n          espcl: 3.5,\n          deltacl: 0.8,\n          lgt: 10,\n          hauteurLignes: [15, 15, 15, 15, 15]\n        }))\n        // Affiche l'ensemble de solutions selon le sens de l'inégalité\n        const solutions1et3 = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\bigg] -\\\\infty , ${valPetit} \\\\bigg${pDroite} \\\\bigcup \\\\bigg${pGauche} ${valMoyen}, ${valGrand} \\\\bigg${pDroite} $.` // \\\\bigg au lieu de \\\\left et \\\\right pour que les parenthèses soient les mêmes des deux côtés s'il y a une fraction d'un côté et pas de l'autre\n        const solutions2et4 = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\bigg${pGauche} ${valPetit} , ${valMoyen} \\\\bigg${pDroite} \\\\bigcup \\\\bigg${pGauche} ${valGrand}, +\\\\infty \\\\bigg[ $.` // \\\\bigg au lieu de \\\\left et \\\\right pour que les parenthèses soient les mêmes des deux côtés s'il y a une fraction d'un côté et pas de l'autre\n        if ((signes[i] === '<' || signes[i] === '≤')) {\n          if (a * c * e > 0) {\n            texteCorr += solutions1et3\n          } else {\n            texteCorr += solutions2et4\n          }\n        } else if ((signes[i] === '>' || signes[i] === '≥')) {\n          if (a * c * e > 0) {\n            texteCorr += solutions2et4\n          } else {\n            texteCorr += solutions1et3\n          }\n        }\n      }\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      // Génère la consigne (texte) et la correction (texteCorr) pour les questions de type '(ax+b)²(cx+d)<0'                                   Type 5        //\n      // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n      if (listeTypeDeQuestions[i] === '(ax+b)²(cx+d)<0') {\n        let valPetit, valGrand\n        texte = `$(${a}x${ecritureAlgebrique(b)})^2(${c}x${ecritureAlgebrique(d)})${texSymbole(signes[i])}0$`\n        // Correction\n        texteCorr = texte\n        // Si une correction détaillée est demandée, détaille comment résoudre les équations\n        if (this.correctionDetaillee) {\n          // Utilise la fonction décrite plus haut pour écrire la résolution détaillée de ax + b = 0 cx + d > 0\n          ecrireCorrectionDetaillee(a, b, true)\n          texteCorr += `<br>Un carré étant toujours positif, $(${a}x${ecritureAlgebrique(b)})^2 > 0$ pour tout $x$ différent de $${texFractionReduite(-b, a)}$.`\n          ecrireCorrectionDetaillee(c, d)\n        } else { // Si pas de correction détaillée, écrit simplement les conclusions, en changeant le sens des inégalités si a < 0 ou si c < 0\n          texteCorr += `<br>$${a}x${ecritureAlgebrique(b)}=0$ si et seulement si $x=${texFractionReduite(-b, a)}$`\n          texteCorr += `<br>Un carré étant toujours positif, $(${a}x${ecritureAlgebrique(b)})^2 > 0$ pour tout $x$ différent de $${texFractionReduite(-b, a)}$.`\n          if (c < 0) {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('<')} ${texFractionReduite(-d, c)}$`\n          } else {\n            texteCorr += `<br>$${c}x${ecritureAlgebrique(d)}${texSymbole('>')}0$ si et seulement si $x${texSymbole('>')} ${texFractionReduite(-d, c)}$`\n          }\n        }\n        // Prépare l'affichage du tableau de signes\n        texteCorr += '<br>On peut donc en déduire le tableau de signes suivant : <br>'\n        if (-b / a < -d / c) { // Si la première racine est la racine double\n          ligne1 = ['Line', 30, '', 0, '+', 20, 'z', 20, '+', 20, 't', 20, '+', 20]\n          valPetit = texFractionReduite(-b, a) // la plus petite valeur est la solution de la première équation\n          valGrand = texFractionReduite(-d, c) // la plus grande valeur est la solution de la deuxième équation\n          if (c > 0) {\n            ligne2 = ['Line', 30, '', 0, '-', 20, 't', 20, '-', 20, 'z', 20, '+', 20]\n            ligne3 = ['Line', 30, '', 0, '-', 20, 'z', 20, '-', 20, 'z', 20, '+', 20]\n          } else {\n            ligne2 = ['Line', 30, '', 0, '+', 20, 't', 20, '+', 20, 'z', 20, '-', 20]\n            ligne3 = ['Line', 30, '', 0, '+', 20, 'z', 20, '+', 20, 'z', 20, '-', 20]\n          }\n        } else { // Si la racine double est la deuxième\n          ligne1 = ['Line', 30, '', 0, '+', 20, 't', 20, '+', 20, 'z', 20, '+', 20]\n          valPetit = texFractionReduite(-d, c) // la plus petite valeur est la solution de la deuxième équation\n          valGrand = texFractionReduite(-b, a) // la plus grande valeur est la solution de la première équation\n          if (c > 0) {\n            ligne2 = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 't', 20, '+', 20]\n            ligne3 = ['Line', 30, '', 0, '-', 20, 'z', 20, '+', 20, 'z', 20, '+', 20]\n          } else {\n            ligne2 = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 't', 20, '-', 20]\n            ligne3 = ['Line', 30, '', 0, '+', 20, 'z', 20, '-', 20, 'z', 20, '-', 20]\n          }\n        }\n        // Affiche le tableau\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -8.6, xmax: 30, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              ['$x$', 2.5, 30], [`$(${a}x${ecritureAlgebrique(b)})^2$`, 2, 75], [`$${c}x${ecritureAlgebrique(d)}$`, 2, 75], [`$(${a}x${ecritureAlgebrique(b)})^2(${c}x${ecritureAlgebrique(d)})$`, 2, 200]\n            ],\n            ['$-\\\\infty$', 30, `$${valPetit}$`, 20, `$${valGrand}$`, 20, '$+\\\\infty$', 30]\n          ],\n          tabLines: [ligne1, ligne2, ligne3],\n          colorBackground: '',\n          espcl: 3.5,\n          deltacl: 0.8,\n          lgt: 10,\n          hauteurLignes: [15, 15, 15, 15]\n        }))\n        // Affiche l'ensemble de solutions selon le sens de l'inégalité\n        const gauche = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left] -\\\\infty, ${texFractionReduite(-d, c)} \\\\right${pDroite} $.`\n        const droite = `<br> L'ensemble de solutions de l'inéquation est $S = \\\\left${pGauche} ${texFractionReduite(-d, c)}, +\\\\infty \\\\right[ $.`\n        if ((signes[i] === '<' || signes[i] === '≤')) {\n          if (c > 0) {\n            texteCorr += gauche\n          } else {\n            texteCorr += droite\n          }\n        } else if ((signes[i] === '>' || signes[i] === '≥')) {\n          if (a * c > 0) {\n            texteCorr += droite\n          } else {\n            texteCorr += gauche\n          }\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // Choisit le type de question à l'aide d'un formulaire numérique (la réponse sera stockée dans this.sup)\n  this.besoinFormulaireNumerique = [\n    \"Type d'inéquation\",\n    6,\n    '1: (x+a)(x+b)<0\\n2: (x+a)(x+b)(x+c)<0\\n3: (ax+b)(cx+d)<0\\n4: (ax+b)(cx+d)(ex+f)<0\\n5: (ax+b)²(cx+d)<0\\n6: Tous les types précédents'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ExerciceInequationProduit","Exercice","this","spacing","spacingCorr","correctionDetailleeDisponible","correctionDetaillee","sup","nbQuestions","toString","consigne","listePackages","nbCols","nbColsCorr","nouvelleVersion","listeTypeDeQuestions","listeQuestions","listeCorrections","combinaisonListes","signes","a","b","c","d","e","f","pGauche","pDroite","texte","ligne1","ligne2","ligne3","ligne4","texteCorr","i","cpt","randint","resolutionDetailleeEquation","val","ecritureAlgebrique","texSymbole","miseEnEvidence","ecrireCorrectionDetaillee","var1","var2","egal","symbolePlusGrand","symbolePlusPetit","ecritureParentheseSiNegatif","texFraction","texFractionReduite","lignePPM","lignePMM","ligneMPP","ligneMMP","lignePPPM","lignePPMM","lignePMMM","ligneMPPP","ligneMMPP","ligneMMMP","Math","min","mathalea2d","xmin","ymin","xmax","ymax","scale","tableauDeVariation","tabInit","max","tabLines","colorBackground","espcl","deltacl","lgt","hauteurLignes","racines","sort","lignes","j","n","valPetit","valGrand","interieur","exterieur","valMoyen","solutions1et3","solutions2et4","gauche","droite","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}