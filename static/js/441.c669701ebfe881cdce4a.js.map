{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C30-3.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","MultiplicationMentalDecimaux","Exercice","this","consigne","nbQuestions","video","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","qcmDisponible","modeQcm","nouvelleVersion","qcm","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","a","b","tabrep","tabicone","randint","texNombre2","calcul","push","slice","shuffle2tableaux","mathalea","sortieAMC","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","indexOf","listeQuestionsToContenu","gestionQcmInteractif","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","tailleDiaporama","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length"],"mappings":"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","file":"js/441.c669701ebfe881cdce4a.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, texNombre2, calcul, shuffle2tableaux } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\n\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Opérations avec les nombres décimaux'\n\n/**\n * Reconnaître une fonction affine\n* @auteur Erwan Duplessy\n* 6C30-1\n* Trouver la réposne exacte. 4 cas :\n* - somme de deux entiers\n* - produit de deux entiers\n* - somme de deux décimaux\n* - produit de deux décimaux\n* date : 2021/02/15\n*/\n\nexport default function MultiplicationMentalDecimaux () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = 'Trouver la réponse exacte du calcul parmi les réponses proposées.'\n  this.nbQuestions = 4 // Ici le nombre de questions\n  this.video = ''\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.qcmDisponible = true\n  this.modeQcm = false\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n\n    this.qcm = ['6C30-3', [], 'Opérations avec les nombres décimaux', 1] // Ajouté par Jean-Claude Lhote : ceci est un exercice à QCM this.qcm permet de l'exporter vers AMC\n\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const typeDeQuestionsDisponibles = ['add', 'mul', 'add_deci', 'mul_deci'] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n      let a = 0; let b = 0; let tabrep = []; let tabicone = [] // les deux opérandes\n\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 'add':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n\n          tabrep = [`$${texNombre2(calcul(a + b))}$`, `$${texNombre2(calcul(a * b))}$`, `$${texNombre2(calcul((a + b) / 10))}$`, `$${texNombre2(calcul(10 * (a + b)))}$`, `$${texNombre2(calcul(a + b + 1))}$`] // réponses possibles\n          tabicone = [1, 0, 0, 0, 0] // 1 pour la bonne réponse\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${a}+${b}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${a} + ${b}$. <br>`\n\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${a} + ${b}=${texNombre2(calcul(a + b))}$`\n          }\n          break\n\n        case 'mul':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n          tabrep = [`$${texNombre2(a * b)}$`, `$${texNombre2(10 * a * b)}$`, `$${texNombre2(a * b / 10)}$`, `$${texNombre2(a + b)}$`, `$${texNombre2(a * b + 1)}$`]\n          tabicone = [1, 0, 0, 0, 0]\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${a} \\\\times ${b}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${a} \\\\times ${b}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${a} \\\\times ${b}=${texNombre2(calcul(a * b))}$`\n          }\n          break\n\n        case 'add_deci':\n          a = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          b = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          tabrep = [`$${texNombre2(calcul((a + b) / 100))}$`, `$${texNombre2(calcul((a * b) / 100))}$`, `$${texNombre2(calcul((a + b) / 1000))}$`, `$${texNombre2(calcul(10 * (a + b) / 100))}$`, `$${texNombre2(calcul((a + b + 1) / 100))}$`]\n          tabicone = [1, 0, 0, 0, 0]\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${texNombre2(a / 100)}+${texNombre2(b / 100)}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${texNombre2(a / 100)} + ${texNombre2(b / 100)}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += ` $${texNombre2(a / 100)} + ${texNombre2(b / 100)}=${texNombre2(calcul(a / 100 + b / 100))}$. <br>`\n          }\n          break\n\n        case 'mul_deci':\n          // a et b sont des nombres à 4 chiffres, dont 2 avant la virgule\n          // on multiplie par 100 pour travailler avec des nombres entiers. Par ex : 6547 plutôt que 65.47\n          a = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9, [2, 5]) // on évite le 2*5 avec les derniers chiffres\n          b = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9)\n          tabrep = [`$${texNombre2(calcul((a * b) / 10000))}$`, `$${texNombre2(calcul((10 * a * b) / 10000))}$`, `$${texNombre2(calcul((a * b) / 100000))}$`, `$${texNombre2(calcul((a + b) / 100))}$`, `$${texNombre2(calcul((a * b + 1) / 10000))}$`]\n          tabicone = [1, 0, 0, 0, 0]\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}=${texNombre2(calcul(a * b / 10000))}$. <br>`\n          }\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  gestionQcmInteractif(this)\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  // this.besoinFormulaireCaseACocher = ['Mode QCM',true]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice}\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n"],"sourceRoot":""}