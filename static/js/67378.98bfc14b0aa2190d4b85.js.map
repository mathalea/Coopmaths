{"version":3,"file":"js/67378.98bfc14b0aa2190d4b85.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G40-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { point, polygone, segment, milieu, nommePolygone, codeSegment, codeAngle, mathalea2d, latexParPoint } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { creerNomDePolygone, listeQuestionsToContenu, combinaisonListes } from '../../modules/outils.js'\nexport const titre = 'Reconnaitre un parallélogramme à partir du codage d’une figure'\n\n/**\n * On doit justifier qu'un quadrilatère est un parallélogramme en citant la bonne propriété\n * @author Rémi Angot\n * Référence 5G40-2\n * Publié le 5/4/2021\n*/\nexport default function ParallelogrammeAPartirDUneFigure () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = \"Pour chacune des figures suivantes, tracées à main levée, préciser s'il s'agit d'un parallélogramme.\"\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  // this.sup = 1\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    // this.introduction = ''\n\n    const A = point(0, 0)\n    const B = point(5, 0)\n    const C = point(6.5, -3)\n    const D = point(1.5, -3)\n    const O = milieu(A, C)\n    O.nom = 'O'\n    const p = polygone(A, B, C, D)\n    const sAC = segment(A, C)\n    sAC.pointilles = true\n    const sBD = segment(B, D)\n    sBD.pointilles = true\n    const sABcodage = codeSegment(A, B, 'X', 'blue')\n    const sCDcodage = codeSegment(C, D, 'X', 'blue')\n    const sADcodage = codeSegment(A, D, '▼', 'blue')\n    const sBCcodage = codeSegment(B, C, '▼', 'blue')\n    const sAOcodage = codeSegment(A, O, '|', 'blue')\n    const sCOcodage = codeSegment(O, C, '|', 'blue')\n    const sBOcodage = codeSegment(B, O, '||', 'blue')\n    const sDOcodage = codeSegment(O, D, '||', 'blue')\n    const aDABcodage = codeAngle(D, A, B, 0.8, '|', 'black', 1, 1, 'blue')\n    const aBCDcodage = codeAngle(B, C, D, 0.8, '|', 'black', 1, 1, 'blue')\n    const aABCcodage = codeAngle(A, B, C, 0.8, '|||', 'black', 1, 1, 'orange')\n    const aCDAcodage = codeAngle(C, D, A, 0.8, '|||', 'black', 1, 1, 'orange')\n    const sAB = segment(A, B)\n    const sBC = segment(B, C)\n    const sCD = segment(C, D)\n    const sAD = segment(A, D)\n    sAB.epaisseur = 2\n    sAB.color = 'blue'\n    sCD.epaisseur = 2\n    sCD.color = 'blue'\n    sBC.epaisseur = 2\n    sBC.color = 'green'\n    sAD.epaisseur = 2\n    sAD.color = 'green'\n\n    // Cerf-volant\n    const M1 = point(0, 0)\n    const N1 = point(-1, -2)\n    const O1 = point(0, -6)\n    const P1 = point(1, -2)\n    const p1 = polygone(M1, N1, O1, P1)\n\n    const codecerf1 = codeSegment(M1, N1, 'X', 'blue')\n    const codecerf2 = codeSegment(M1, P1, 'X', 'blue')\n    const codecerf3 = codeSegment(O1, P1, '▼', 'blue')\n    const codecerf4 = codeSegment(O1, N1, '▼', 'blue')\n\n    const paramsEnonce = { xmin: -1, ymin: -4, xmax: 7.5, ymax: 0.8, pixelsParCm: 20, scale: 0.5, mainlevee: true, amplitude: 0.5 }\n\n    const nomsDejaUtilises = ['O']\n    let nom\n    function gestionNom () {\n      nom = creerNomDePolygone(4, nomsDejaUtilises)\n      nomsDejaUtilises.push(nom)\n      A.nom = nom[0]\n      B.nom = nom[1]\n      C.nom = nom[2]\n      D.nom = nom[3]\n    }\n\n    const typeQuestionsDisponibles = ['cotesOpposesMemeLongueur', 'cotesConsecutifsMemeLongueur', 'diagonalesMemeLongueur', '2cotesOpposesMemeLongueur', '2cotesOpposesMemeLongueurv2', '2cotesOpposesMemeLongueurEtParallele', '2cotesOpposesMemeLongueurEtParallelev2', '2cotesOpposesEtParalleles', 'anglesOpposesEgaux'] // On créé 3 types de questions\n    const listeTypeQuestions = combinaisonListes(typeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sABcodage, sBCcodage, sCDcodage, sADcodage, nommePolygone(p, nom)])\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $${B.nom + C.nom} = ${D.nom + A.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses côtés opposés de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case 'cotesConsecutifsMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, codeSegment(A, B, 'X', 'blue'), codeSegment(B, C, 'X', 'blue'), codeSegment(C, D, '||', 'blue'), codeSegment(D, A, '||', 'blue'), nommePolygone(p, nom)])\n\n          texteCorr = `Les côtés consécutifs de $${nom}$ sont de même longueur, ce n'est pas forcément un parallélogramme comme le montre le contre-exemple suivant. (Il s'agit d'un cerf-volant).`\n\n          texteCorr += '<br>' + mathalea2d({ xmin: -1.5, ymin: -6.5, xmax: 1.5, ymax: 0.5, pixelsParCm: 20, scale: 1 }, [p1, codecerf1, codecerf2, codecerf3, codecerf4])\n          break\n        case 'diagonalesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAOcodage, sBOcodage, sCOcodage, sDOcodage, sAC, sBD, nommePolygone(p, nom), latexParPoint('O', O, 'black', 200, 12, '')])\n          texteCorr = `On sait que $${A.nom + 'O'} = ${'O' + C.nom}$ et $${B.nom + 'O'} = ${'O' + D.nom}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses diagonales qui se coupent en leur milieu alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueur':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sABcodage, sCDcodage, nommePolygone(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurv2':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sBCcodage, sADcodage, nommePolygone(p, nom)])\n          texteCorr = `Seulement deux côtés opposés sont de même longueur, ce n'est pas suffisant pour que $${nom}$ soit un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallele':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAB, sCD, sABcodage, sCDcodage, nommePolygone(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `On sait que $${A.nom + B.nom} = ${C.nom + D.nom}$ et $(${A.nom + B.nom}) // (${C.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesMemeLongueurEtParallelev2':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sBC, sAD, sBCcodage, sADcodage, nommePolygone(p, nom)]) + `$(${B.nom + C.nom}) // (${A.nom + D.nom})$`\n          texteCorr = `On sait que $${B.nom + C.nom} = ${A.nom + D.nom}$ et $(${B.nom + C.nom}) // (${A.nom + D.nom})$.`\n          texteCorr += '<br>Or « Si un quadrilatère a deux côtés opposés parallèles et de même longueur alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n        case '2cotesOpposesEtParalleles':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, sAB, sCD, nommePolygone(p, nom)]) + `$(${A.nom + B.nom}) // (${C.nom + D.nom})$`\n          texteCorr = `$${nom}$ a deux côtés opposés parallèles, c'est donc un trapèze et pas forcément un parallélogramme.`\n          break\n        case 'anglesOpposesEgaux':\n          gestionNom()\n          texte = mathalea2d(paramsEnonce, [p, nommePolygone(p, nom), aABCcodage, aBCDcodage, aCDAcodage, aDABcodage])\n          texteCorr = `On sait que $\\\\widehat{${A.nom + B.nom + C.nom}} = \\\\widehat{${C.nom + D.nom + A.nom}}$ et $\\\\widehat{${B.nom + C.nom + D.nom}} = \\\\widehat{${D.nom + A.nom + B.nom}}$.`\n          texteCorr += '<br>Or « Si un quadrilatère a ses angles opposés égaux alors c\\'est un parallélogramme ».'\n          texteCorr += `<br>Donc $${nom}$ est un parallélogramme.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ParallelogrammeAPartirDUneFigure","Exercice","this","consigne","nbQuestionsModifiable","nbCols","nbColsCorr","tailleDiaporama","video","nouvelleVersion","listeQuestions","listeCorrections","A","point","B","C","D","O","milieu","nom","p","polygone","sAC","segment","pointilles","sBD","sABcodage","codeSegment","sCDcodage","sADcodage","sBCcodage","sAOcodage","sCOcodage","sBOcodage","sDOcodage","aDABcodage","codeAngle","aBCDcodage","aABCcodage","aCDAcodage","sAB","sBC","sCD","sAD","epaisseur","color","M1","N1","O1","P1","p1","codecerf1","codecerf2","codecerf3","codecerf4","paramsEnonce","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","amplitude","nomsDejaUtilises","gestionNom","creerNomDePolygone","push","listeTypeQuestions","combinaisonListes","nbQuestions","texte","texteCorr","i","cpt","mathalea2d","nommePolygone","latexParPoint","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","correctionDetailleeDisponible","correctionDetaillee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}