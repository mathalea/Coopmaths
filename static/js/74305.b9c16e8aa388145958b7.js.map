{"version":3,"file":"js/74305.b9c16e8aa388145958b7.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3G10-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { codageAngleDroit, droiteParPointEtPente, droiteVerticaleParPoint, mathalea2d, point, segment, milieu, pointSurDroite, tracePoint, codeSegments, repere2, labelPoint, droiteHorizontaleParPoint, afficheMesureAngle, vecteur } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, choice, combinaisonListes, imagePointParTransformation, texFractionReduite, texNombrec, texNombre } from '../../modules/outils.js'\nimport { calcule } from '../../modules/fonctionsMaths.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Trouver les coordonnées de l’image d’un point par une transformation du plan'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Trouver les coordonnées d'un punto transformé d'un autre par une des transformations du plan\n * @author Jean-Claude Lhote\n * 3G10-1\n */\nexport default function TransformationsDuPlanEtCoordonnees () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  context.fenetreMathalea2d = [-9, -9, 9, 9]\n  this.sup = 1 // 1 calcul de l'hypoténuse 2 calcul d'un côté de l'angle droit\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n  this.nouvelleVersion = function (numeroExercice) {\n    const objetsEnonce = []\n    const objetsCorrection = []\n    let enonceAmc = ''\n    this.listeQuestions = []\n    this.sup = parseInt(this.sup)\n    this.listeCorrections = [] // Liste de questions corrigées\n    let xA; let yA; let xB; let yB; let xC; let yC; const k = []\n    let A, B, C, Aprime, Bprime, Cprime\n    const xP = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] // ces nombres sont juste là pour compter combien il y en a... ils seront remplacés plus tard par les coordonnées utiles ou pas.\n    const yP = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] // comme pour t, je n'utiliserai pas le premier élément pour coller aux index.\n    const t = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] // il y a 14 transformations mais je n'utilise pas t[0] pour coller avec les index.\n    let texte = ''; let texteCorr = ''; const lettre1 = ['A', 'B', 'C']; const lettre2 = ['O\\'', 'A', 'B'] // si t[i]=0 alors la transformation concernée n'existe pas, si t[i]=1, on la dessine.\n    const punto = [[]]\n    const transformation = parseInt(this.sup) - 1\n    const listeTypeDeQuestions = [[1, 2, 3, 4], [1, 2, 3, 4, 7], [1, 2, 3, 4, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]]\n    const choixTransformation = combinaisonListes(listeTypeDeQuestions[transformation], 3)\n    for (let j = 0; j < 3; j++) {\n      if (choixTransformation[j] === 10) {\n        k[j] = choice([2, 2, 2, 2, 4, 4, 4, 4, 5, 10]) * randint(-1, 1, [0]) // rapport d'homothétie < 1 (plus ou moins  0.5, 0.25, 0.2 ou 0,1 ) avec une fréquence divisée par 4 pour 0.2 et 0.1\n      } else { k[j] = choice([1, 2, 2, 3, 3, 2.5]) * randint(-1, 1, [0]) }\n    } // rapport d'homothétie >=1 (plus ou - 1,2,2.5, 3 avec des fréquences divisées par 2 pour 1 et 2.5)\n\n    const xO = randint(-3, 3, [0, -1]) // Point O' (origine du repère dans lequel les transformations sont simples (centre des rotations et punto d'intersection des axes))\n    const yO = randint(-3, 3, [0, -1])\n    const pointO = point(0, 0, 'O', 'above right')\n    const O = point(xO, yO, \"O'\", 'above left') // on crée le point O'\n    const droited1 = droiteParPointEtPente(O, 1, '(d_1)') // et les trois axes passant par O'\n    const droited = droiteHorizontaleParPoint(O, '(d)')\n    const droited2 = droiteParPointEtPente(O, -1, '(d_2)')\n    const droitedprime = droiteVerticaleParPoint(O, \"(d')\")\n    droited1.isVisible = true\n    droited2.isVisible = true\n    droited.isVisible = true\n    droitedprime.isVisible = true\n    droited1.epaisseur = 2\n    droited2.epaisseur = 2\n    droited.epaisseur = 2\n    droitedprime.epaisseur = 2\n    droited1.color = 'green'\n    droited2.color = 'green'\n    droited.color = 'green'\n    droitedprime.color = 'green'\n    droited1.opacite = 0.5\n    droited1.nom = '(d_1)'\n    droited2.opacite = 0.5\n    droited.opacite = 0.5\n    droitedprime.opacite = 0.5\n    let trouve = false\n    let compteur = 0\n    while (trouve === false) {\n      xA = randint(-7, 7, 0) // Point A\n      yA = randint(-7, 7, -1)\n      xB = randint(-7, 7, [xA, 0]) // Point B\n      yB = randint(-7, 7, -1)\n      xC = randint(-7, 7, 0) // Point C\n      yC = randint(-7, 7, [yA, yB, -1])\n\n      punto[0] = imagePointParTransformation(choixTransformation[0], [xA, yA], [xO, yO], [xO, yO], k[0])\n      while ((punto[0][0] < -9 || punto[0][0] > 9 || punto[0][1] < -9 || punto[0][1] > 9) && compteur < 20) { // on teste si A est dans la fenêtre sinon on en choisit un autre\n        xA = randint(-7, 7) // Point A\n        yA = randint(-7, 7, -1)\n        punto[0] = imagePointParTransformation(choixTransformation[0], [xA, yA], [xO, yO], [xO, yO], k[0])\n        compteur++\n      }\n      if (compteur < 20) {\n        compteur = 0\n      } else {\n        compteur = 100\n      }\n      A = point(xA, yA, 'A')\n      Aprime = point(punto[0][0], punto[0][1], \"A'\")\n      if (choixTransformation[1] > 4) { punto[1] = imagePointParTransformation(choixTransformation[1], [xB, yB], [xA, yA], [xA, yA], k[1]) } else { punto[1] = imagePointParTransformation(choixTransformation[1], [xB, yB], [xO, yO]) } // si c'est une symétrie, l'axe passe par O'\n      while ((punto[1][0] < -9 || punto[1][0] > 9 || punto[1][1] < -9 || punto[1][1] > 9) && compteur < 20) { // on teste si on est dans les clous, sinon on choisit un autre punto B\n        xB = randint(-7, 7, [xA]) // Point B\n        yB = randint(-7, 7, -1)\n        if (choixTransformation[1] > 4) { punto[1] = imagePointParTransformation(choixTransformation[1], [xB, yB], [xA, yA], [xA, yA], k[1]) } else { punto[1] = imagePointParTransformation(choixTransformation[1], [xB, yB], [xO, yO]) } // si c'est une symétrie, l'axe passe par O'\n        compteur++\n      }\n      if (compteur < 20) {\n        compteur = 0\n      } else {\n        compteur = 100\n      }\n\n      B = point(xB, yB, 'B')\n      Bprime = point(punto[1][0], punto[1][1], \"B'\")\n\n      if (choixTransformation[2] > 4) { punto[2] = imagePointParTransformation(choixTransformation[2], [xC, yC], [xB, yB], [xB, yB], k[2]) } else { punto[2] = imagePointParTransformation(choixTransformation[2], [xC, yC], [xO, yO]) } // si c'est une symétrie, l'axe passe par O'\n      while ((punto[2][0] < -9 || punto[2][0] > 9 || punto[2][1] < -9 || punto[2][1] > 9) && compteur < 20) { // on vérifie que C est dans le repère sinon on change le punto C.\n        xC = randint(-7, 7) // Point C\n        yC = randint(-7, 7, [yA, yB, -1])\n        if (choixTransformation[2] > 4) { punto[2] = imagePointParTransformation(choixTransformation[2], [xC, yC], [xB, yB], [xB, yB], k[2]) } else { punto[2] = imagePointParTransformation(choixTransformation[2], [xC, yC], [xO, yO]) } // si c'est une symétrie, l'axe passe par O'\n        compteur++\n      }\n      if (compteur < 20) {\n        trouve = true\n      }\n      C = point(xC, yC, 'C')\n      Cprime = point(punto[2][0], punto[2][1], \"C'\")\n    }\n    console.log(compteur)\n    // les puntos sont choisis, on écrit l'énoncé\n    for (let i = 0; i < 3; i++) {\n      switch (choixTransformation[i]) {\n        case 1:\n          t[1] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A), labelPoint(A))\n            objetsCorrection.push(tracePoint(A, Aprime), labelPoint(A, Aprime), segment(A, Aprime, 'blue'), codageAngleDroit(A, milieu(A, Aprime), pointSurDroite(droited1, -15)), codeSegments('||', 'red', A, milieu(A, Aprime), milieu(A, Aprime), Aprime))\n            xP[1] = xA\n            yP[1] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B), labelPoint(B))\n            objetsCorrection.push(tracePoint(B, Bprime), labelPoint(B, Bprime), segment(B, Bprime, 'blue'), codageAngleDroit(B, milieu(B, Bprime), pointSurDroite(droited1, -15)), codeSegments('O', 'red', B, milieu(B, Bprime), milieu(B, Bprime), Bprime))\n            xP[1] = xB\n            yP[1] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C), labelPoint(C))\n            objetsCorrection.push(tracePoint(C, Cprime), labelPoint(C, Cprime), segment(C, Cprime, 'blue'), codageAngleDroit(C, milieu(C, Cprime), pointSurDroite(droited1, -15)), codeSegments('X', 'red', C, milieu(C, Cprime), milieu(C, Cprime), Cprime))\n            xP[1] = xC\n            yP[1] = yC\n          }\n          objetsEnonce.push(droited1)\n          objetsCorrection.push(droited1)\n\n          texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_1)$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_1)$.`\n          }\n          texteCorr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d_1)$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 2:\n          t[2] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A), labelPoint(A))\n            objetsCorrection.push(tracePoint(A, Aprime), labelPoint(A, Aprime), segment(A, Aprime, 'blue'), codageAngleDroit(A, milieu(A, Aprime), pointSurDroite(droited2, -15)), codeSegments('||', 'red', A, milieu(A, Aprime), milieu(A, Aprime), Aprime))\n            xP[2] = xA\n            yP[2] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B), labelPoint(B))\n            objetsCorrection.push(tracePoint(B, Bprime), labelPoint(B, Bprime), segment(B, Bprime, 'blue'), codageAngleDroit(B, milieu(B, Bprime), pointSurDroite(droited2, -15)), codeSegments('O', 'red', B, milieu(B, Bprime), milieu(B, Bprime), Bprime))\n            xP[2] = xB\n            yP[2] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C), labelPoint(C))\n            objetsCorrection.push(tracePoint(C, Cprime), labelPoint(C, Cprime), segment(C, Cprime, 'blue'), codageAngleDroit(C, milieu(C, Cprime), pointSurDroite(droited2, -15)), codeSegments('X', 'red', C, milieu(C, Cprime), milieu(C, Cprime), Cprime))\n            xP[2] = xC\n            yP[2] = yC\n          }\n          objetsEnonce.push(droited2)\n          objetsCorrection.push(droited2)\n          texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_2)$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d_2)$.`\n          }\n          texteCorr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d_2)$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 3:\n          t[3] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A), labelPoint(A))\n            objetsCorrection.push(tracePoint(A, Aprime), labelPoint(A, Aprime), segment(A, Aprime, 'blue'), codageAngleDroit(A, milieu(A, Aprime), pointSurDroite(droited, -15)), codeSegments('||', 'red', A, milieu(A, Aprime), milieu(A, Aprime), Aprime))\n            xP[3] = xA\n            yP[3] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B), labelPoint(B))\n            objetsCorrection.push(tracePoint(B, Bprime), labelPoint(B, Bprime), segment(B, Bprime, 'blue'), codageAngleDroit(B, milieu(B, Bprime), pointSurDroite(droited, -15)), codeSegments('O', 'red', B, milieu(B, Bprime), milieu(B, Bprime), Bprime))\n            xP[3] = xB\n            yP[3] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C), labelPoint(C))\n            objetsCorrection.push(tracePoint(C, Cprime), labelPoint(C, Cprime), segment(C, Cprime, 'blue'), codageAngleDroit(C, milieu(C, Cprime), pointSurDroite(droited, -15)), codeSegments('X', 'red', C, milieu(C, Cprime), milieu(C, Cprime), Cprime))\n            xP[3] = xC\n            yP[3] = yC\n          }\n          objetsEnonce.push(droited)\n          objetsCorrection.push(droited)\n          texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d)$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d)$.`\n          }\n          texteCorr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d)$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 4:\n          t[4] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A), labelPoint(A))\n            objetsCorrection.push(tracePoint(A, Aprime), labelPoint(A, Aprime), segment(A, Aprime, 'blue'), codageAngleDroit(A, milieu(A, Aprime), pointSurDroite(droitedprime, -15)), codeSegments('||', 'red', A, milieu(A, Aprime), milieu(A, Aprime), Aprime))\n            xP[4] = xA\n            yP[4] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B), labelPoint(B))\n            objetsCorrection.push(tracePoint(B, Bprime), labelPoint(B, Bprime), segment(B, Bprime, 'blue'), codageAngleDroit(B, milieu(B, Bprime), pointSurDroite(droitedprime, -15)), codeSegments('O', 'red', B, milieu(B, Bprime), milieu(B, Bprime), Bprime))\n            xP[4] = xB\n            yP[4] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C), labelPoint(C))\n            objetsCorrection.push(tracePoint(C, Cprime), labelPoint(C, Cprime), segment(C, Cprime, 'blue'), codageAngleDroit(C, milieu(C, Cprime), pointSurDroite(droitedprime, -15)), codeSegments('X', 'red', C, milieu(C, Cprime), milieu(C, Cprime), Cprime))\n            xP[4] = xC\n            yP[4] = yC\n          }\n          objetsEnonce.push(droitedprime)\n          objetsCorrection.push(droitedprime)\n          texte += `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d')$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées du symétrique de $${lettre1[i]}$ par rapport à la droite $(d')$.`\n          }\n          texteCorr += `Le symétrique de $${lettre1[i]}$ par rapport à $(d')$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 5:\n\n          t[5] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime)\n            )\n            xP[5] = xA\n            yP[5] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[5] = xB\n            yP[5] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[5] = xC\n            yP[5] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens anti-horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens anti-horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens anti-horaire a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 6:\n\n          t[6] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[6] = xA\n            yP[6] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, A), labelPoint(B, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[6] = xB\n            yP[6] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[6] = xC\n            yP[6] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 90° dans le sens horaire a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 7:\n\n          t[7] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[7] = xA\n            yP[7] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[7] = xB\n            yP[7] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[7] = xC\n            yP[7] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la symétrie de centre $${lettre2[i]}$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la symétrie de centre $${lettre2[i]}$.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la symétrie de centre $${lettre2[i]}$ a pour coordonnées ($${texNombrec(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 11:\n\n          t[11] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[11] = xA\n            yP[11] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[11] = xB\n            yP[11] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[11] = xC\n            yP[11] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens anti-horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens anti-horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens anti-horaire a pour coordonnées ($${texNombre(calcule(punto[i][0], 2))};${texNombre(calcule(punto[i][1], 2))}$).<br>`\n          break\n        case 12:\n\n          t[12] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[12] = xA\n            yP[12] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[12] = xB\n            yP[12] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[12] = xC\n            yP[12] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 60° dans le sens horaire a pour coordonnées ($${texNombre(calcule(punto[i][0], 2))};${texNombre(calcule(punto[i][1], 2))}$).<br>`\n          break\n\n        case 13:\n\n          t[13] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[13] = xA\n            yP[13] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[13] = xB\n            yP[13] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[13] = xC\n            yP[13] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens anti-horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens anti-horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens anti-horaire a pour coordonnées ($${texNombre(calcule(punto[i][0], 2))};${texNombre(calcule(punto[i][1], 2))}$).<br>`\n          break\n\n        case 14:\n\n          t[14] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'blue'), afficheMesureAngle(A, O, Aprime), codeSegments('//', 'red', O, A, O, Aprime))\n            xP[14] = xA\n            yP[14] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'blue'), afficheMesureAngle(B, A, Bprime), codeSegments('O', 'red', A, B, A, Bprime))\n            xP[14] = xB\n            yP[14] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'blue'), afficheMesureAngle(C, B, Cprime), codeSegments('X', 'red', B, C, B, Cprime))\n            xP[14] = xC\n            yP[14] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens horaire.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens horaire.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la rotation de centre $${lettre2[i]}$ et d'angle 120° dans le sens horaire a pour coordonnées ($${texNombre(calcule(punto[i][0], 2))};${texNombre(calcule(punto[i][1], 2))}$).<br>`\n          break\n\n        case 8:\n\n          t[8] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O, pointO), labelPoint(A, O, pointO), vecteur(pointO, O).representant(pointO))\n            objetsCorrection.push(tracePoint(A, Aprime, O, pointO), labelPoint(A, Aprime, O, pointO),\n              vecteur(pointO, O).representant(A), vecteur(pointO, O).representant(pointO))\n            xP[8] = xA\n            yP[8] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A, pointO), labelPoint(B, A, pointO), vecteur(pointO, A).representant(pointO))\n            objetsCorrection.push(tracePoint(B, Bprime, A, pointO), labelPoint(B, Bprime, A, pointO),\n              vecteur(pointO, A).representant(B), vecteur(pointO, A).representant(pointO))\n            xP[8] = xB\n            yP[8] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B, pointO), labelPoint(C, B, pointO), vecteur(pointO, B).representant(pointO))\n            objetsCorrection.push(tracePoint(C, Cprime, B, pointO), labelPoint(C, Cprime, B, pointO),\n              vecteur(pointO, B).representant(C), vecteur(pointO, B).representant(pointO))\n            xP[8] = xC\n            yP[8] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]}.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]}.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par la translation qui transforme O en ${lettre2[i]} a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 9:\n\n          t[9] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'orange'))\n            xP[9] = xA\n            yP[9] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(O, B, 'blue'), segment(O, Bprime, 'orange'))\n\n            xP[9] = xB\n            yP[9] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(O, C, 'blue'), segment(O, Cprime, 'orange'))\n\n            xP[9] = xC\n            yP[9] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texNombre(k[i])}$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texNombre(k[i])}$.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texNombre(k[i])}$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n\n        case 10:\n\n          t[10] = 1\n          if (i === 0) {\n            objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n            objetsCorrection.push(tracePoint(A, Aprime, O), labelPoint(A, Aprime, O),\n              segment(O, A, 'blue'), segment(O, Aprime, 'orange'))\n            xP[10] = xA\n            yP[10] = yA\n          } else if (i === 1) {\n            objetsEnonce.push(tracePoint(B, A), labelPoint(B, A))\n            objetsCorrection.push(tracePoint(B, Bprime, A), labelPoint(B, Bprime, A),\n              segment(A, B, 'blue'), segment(A, Bprime, 'orange'))\n            xP[10] = xB\n            yP[10] = yB\n          } else {\n            objetsEnonce.push(tracePoint(C, B), labelPoint(C, B))\n            objetsCorrection.push(tracePoint(C, Cprime, B), labelPoint(C, Cprime, B),\n              segment(B, C, 'blue'), segment(B, Cprime, 'orange'))\n            xP[10] = xC\n            yP[10] = yC\n          }\n          texte += `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texFractionReduite(1, k[i])}$.`\n          if (context.isAmc) {\n            enonceAmc += `${i + 1}) ` + `Donner les coordonnées de l'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texFractionReduite(1, k[i])}$.`\n          }\n          texteCorr += `L'image de $${lettre1[i]}$ par l'homothétie de centre $${lettre2[i]}$ et de rapport $${texFractionReduite(1, k[i])}$ a pour coordonnées ($${texNombre(punto[i][0])};${texNombre(punto[i][1])}$).<br>`\n          break\n      }\n      if (this.interactif) {\n        texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n      } else texte += '<br>'\n      setReponse(this, i, [`${punto[i][0]};${punto[i][1]}`, `(${punto[i][0]};${punto[i][1]})`])\n      if (context.isAmc) {\n        enonceAmc += '<br>'\n      }\n    }\n    objetsEnonce.push(repere2({ xMin: -10, yMin: -10, xMax: 10, yMax: 10, grilleOpacite: 0.2 }))\n    objetsCorrection.push(repere2({ xMin: -10, yMin: -10, xMax: 10, yMax: 10, grilleOpacite: 0.2 }))\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: enonceAmc + mathalea2d({ xmin: -10, ymin: -10, xmax: 10, ymax: 10, pixelsParCm: 20, scale: 0.5, mainlevee: false }, objetsEnonce) + '\\\\\\\\',\n        options: { multicols: true },\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'Abscisse de A',\n                valeur: punto[0][0],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: `A(${punto[0][0]};${punto[0][1]})`,\n              statut: '',\n              reponse: {\n                texte: 'Ordonnée de A',\n                valeur: punto[0][1],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'Abscisse de B',\n                valeur: punto[1][0],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: `B(${punto[1][0]};${punto[1][1]})`,\n              statut: '',\n              reponse: {\n                texte: 'Ordonnée de B',\n                valeur: punto[1][1],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'Abscisse de C',\n                valeur: punto[2][0],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: `C(${punto[2][0]};${punto[2][1]})`,\n              statut: '',\n              reponse: {\n                texte: 'Ordonnée de C',\n                valeur: punto[2][1],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          }]\n      }\n    }\n\n    this.listeQuestions.push(texte + '<br>' + mathalea2d({ xmin: -10, ymin: -10, xmax: 10, ymax: 10, pixelsParCm: 20, scale: 0.4, mainlevee: false }, objetsEnonce))\n    this.listeCorrections.push(texteCorr + '<br>' + mathalea2d({ xmin: -10, ymin: -10, xmax: 10, ymax: 10, pixelsParCm: 20, scale: 0.4, mainlevee: false }, objetsCorrection))\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Transformations', 5, '1 : Symétries axiales (6ème)\\n 2 : Symétries axiales et centrales (5ème)\\n 3 : Symétries et translations (4ème)\\n 4 : Symétries, translations, rotations et homothéties\\n 5 : Les mêmes plus des rotations compliquées\\n']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","TransformationsDuPlanEtCoordonnees","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","context","sup","spacingCorr","nouvelleVersion","numeroExercice","objetsEnonce","objetsCorrection","xA","yA","xB","yB","xC","yC","enonceAmc","listeQuestions","parseInt","listeCorrections","k","A","B","C","Aprime","Bprime","Cprime","xP","yP","t","texte","texteCorr","lettre1","lettre2","punto","transformation","choixTransformation","combinaisonListes","j","choice","randint","xO","yO","pointO","point","O","droited1","droiteParPointEtPente","droited","droiteHorizontaleParPoint","droited2","droitedprime","droiteVerticaleParPoint","isVisible","epaisseur","color","opacite","nom","trouve","compteur","imagePointParTransformation","console","log","i","push","tracePoint","labelPoint","segment","codageAngleDroit","milieu","pointSurDroite","codeSegments","texNombre","afficheMesureAngle","texNombrec","calcule","vecteur","representant","texFractionReduite","interactif","ajouteChampTexteMathLive","setReponse","repere2","xMin","yMin","xMax","yMax","grilleOpacite","autoCorrection","enonce","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","options","multicols","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}