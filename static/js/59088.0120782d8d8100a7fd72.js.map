{"version":3,"file":"js/59088.0120782d8d8100a7fd72.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5S11.js","webpack://mathalea/./src/js/exercices/6e/6S10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import LectureDiagrammeBarre from '../6e/6S10.js'\nexport const titre = 'Lire un diagramme en barre'\n\n/**\n * Lire un diagramme en barre\n * @author Guillaume Valmont\n * reference 5S11\n * Publié le 08/08/2021\n */\nexport default function LectureDiagrammeBarre5e () {\n  LectureDiagrammeBarre.call(this)\n  this.titre = titre\n  this.sup = 3\n  this.sup2 = 2\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, premiereLettreEnMajuscule, numAlpha, calcul, sp } from '../../modules/outils.js'\nimport { repere2, traceBarre, mathalea2d } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nimport { ajouteChampTexteMathLive, ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Lire un diagramme en barre'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Lire un diagramme en barre\n * @author Erwan Duplessy\n * Conversion Amc et interactif par Jean-Claude Lhote\n * Référence 6S10\n */\n\nexport default function LectureDiagrammeBarre () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = \"Répondre aux questions à l'aide du graphique.\"\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.interactif = true\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // vide la liste de questions\n    this.listeCorrections = [] // vide la liste de questions corrigées\n\n    const lstAnimaux = ['girafes', 'zèbres', 'gnous', 'buffles', 'gazelles', 'crocodiles', 'rhinocéros', 'léopards', 'guépards', 'hyènes', 'lycaons', 'servals', 'phacochères']\n    let nbAnimaux = 4 // nombre d'animaux différents dans l'énoncé\n    switch (parseInt(this.sup)) {\n      case 1: nbAnimaux = 4; break\n      case 2: nbAnimaux = 5; break\n      case 3: nbAnimaux = 6; break\n      default: nbAnimaux = 4\n    }\n    const propa = []\n    const propb = []\n    const propc = []\n    const lstAnimauxExo = [] // liste des animaux uniquement cités dans l'exercice\n    const lstNombresAnimaux = [] // liste des effectifs de chaque animal\n    let lstVal = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] // liste des valeurs à éviter pour les effectifs\n    let N = 0; let nom; let texte; let texteCorr\n\n    switch (parseInt(this.sup2)) {\n      case 1:\n        for (let i = 0; i < nbAnimaux; i++) {\n          N = randint(2, 100, lstVal) // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n          lstNombresAnimaux.push(N)\n          lstVal = lstVal.concat([N - 1, N, N + 1]) // valeurs à supprimer pour éviter des valeurs proches\n        }\n        break\n      case 2:\n        for (let i = 0; i < nbAnimaux; i++) {\n          N = randint(2, 100, lstVal) // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n          lstNombresAnimaux.push(10 * N)\n          lstVal = lstVal.concat([N - 1, N, N + 1]) // valeurs à supprimer pour éviter des valeurs proches\n        }\n        break\n    }\n\n    for (let i = 0; i < nbAnimaux; i++) {\n      nom = choice(lstAnimaux, lstAnimauxExo) // choisit un animal au hasard sauf parmi ceux déjà utilisés\n      lstAnimauxExo.push(nom)\n    }\n\n    const nMin = Math.min(...lstNombresAnimaux)\n    const nMax = Math.max(...lstNombresAnimaux)\n\n    const lstNomParc = ['Dramve', 'Fatenmin', 'Batderfa', 'Vihi', 'Genser', 'Barbetdou', 'Dramrendu', 'Secai', 'Cipeudram', 'Cigel', 'Lisino', 'Fohenlan',\n      'Farnfoss', 'Kinecardine', 'Zeffari', 'Barmwich', 'Swadlincote', 'Swordbreak', 'Loshull', 'Ruyron', 'Fluasall', 'Blueross', 'Vlane']\n\n    texte = 'Dans le parc naturel de ' + choice(lstNomParc) + ', il y a beaucoup d’animaux.<br>Voici un diagramme en bâtons qui donne le nombre d’individus pour chaque espèce.<br>'\n    if (!context.isAmc) {\n      texte += numAlpha(0) + ' Quels sont les animaux les plus nombreux ?' + ajouteChampTexte(this, 0, { texte: sp(5) + 'les' })\n      texte += '<br>' + numAlpha(1) + ' Quels sont les animaux les moins nombreux ?' + ajouteChampTexte(this, 1, { texte: sp(5) + 'les' }) + '<br>'\n      setReponse(this, 0, lstAnimauxExo[lstNombresAnimaux.indexOf(nMax)])\n      setReponse(this, 1, lstAnimauxExo[lstNombresAnimaux.indexOf(nMin)])\n    } else {\n      texte += '1) Quels sont les animaux les plus nombreux ?<br>'\n      texte += '2) Quels sont les animaux les moins nombreux ?<br>'\n    }\n    const numAnimal = randint(0, nbAnimaux - 1)\n    switch (parseInt(this.sup2)) {\n      case 1:\n        if (!context.isAmc) {\n          texte += numAlpha(2) + ' Donner un encadrement à la dizaine du nombre de ' + lstAnimauxExo[numAnimal] + ' ?<br>'\n          texte += ajouteChampTexteMathLive(this, 2, 'largeur10 inline', { texte: sp(5) }) + sp(10) + `< nombre de ${lstAnimauxExo[numAnimal]} < `\n          texte += ajouteChampTexteMathLive(this, 3, 'largeur10 inline', { texte: sp(5) })\n        } else {\n          texte += '3) Donner un encadrement à la dizaine du nombre de ' + lstAnimauxExo[numAnimal] + ' ?<br>'\n        }\n        break\n      case 2:\n        if (!context.isAmc) {\n          texte += numAlpha(2) + ' Donner un encadrement à la centaine du nombre de ' + lstAnimauxExo[numAnimal] + ' ?<br>'\n        } else {\n          texte += '3)  Donner un encadrement à la centaine du nombre de ' + lstAnimauxExo[numAnimal] + ' ?<br>'\n        }\n        break\n    }\n    texte += '<br>'\n\n    // coefficient pour gérer les deux types d'exercices (entre 1 et 100) ou (entre 10 et 1000)\n    let coef = 1\n    switch (parseInt(this.sup2)) {\n      case 1:\n        coef = 1\n        break\n      case 2:\n        coef = 10\n        break\n    }\n\n    const r = repere2({\n      grilleX: false,\n      grilleY: 'pointilles',\n      xThickListe: [],\n      xLabelListe: [],\n      yUnite: 0.1 / coef,\n      yThickDistance: 10 * coef,\n      yMax: 110 * coef,\n      xMin: 0,\n      xMax: 10,\n      yMin: 0,\n      axeXStyle: '',\n      yLegende: \"Nombre d'individus\"\n    })\n\n    const lstElementGraph = []\n    for (let i = 0; i < nbAnimaux; i++) {\n      lstElementGraph.push(traceBarre((((r.xMax - r.xMin) / (nbAnimaux + 1)) * (i + 1)), lstNombresAnimaux[i], premiereLettreEnMajuscule(lstAnimauxExo[i]), { unite: 0.1 / coef }))\n      if (context.isAmc) {\n        if (i === lstNombresAnimaux.indexOf(nMax)) {\n          propa.push({ texte: premiereLettreEnMajuscule(lstAnimauxExo[i]), statut: true })\n        } else {\n          propa.push({ texte: premiereLettreEnMajuscule(lstAnimauxExo[i]), statut: false })\n        }\n        if (i === lstNombresAnimaux.indexOf(nMin)) {\n          propb.push({ texte: premiereLettreEnMajuscule(lstAnimauxExo[i]), statut: true })\n        } else {\n          propb.push({ texte: premiereLettreEnMajuscule(lstAnimauxExo[i]), statut: false })\n        }\n        if (i === numAnimal) {\n          propc.push({ texte: `entre ${calcul(10 * coef * Math.floor(lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[i])] / (10 * coef)))} et ${calcul(10 * coef * (1 + Math.floor(lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[i])] / (10 * coef))))}`, statut: true })\n        } else {\n          propc.push({ texte: `entre ${calcul(10 * coef * Math.floor(lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[i])] / (10 * coef)))} et ${calcul(10 * coef * (1 + Math.floor(lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[i])] / (10 * coef))))}`, statut: false })\n        }\n      }\n    }\n    texte += mathalea2d({ xmin: -5, xmax: 11, ymin: -4, ymax: 11, pixelsParCm: 30, scale: 0.5 }, r, lstElementGraph)\n    // debut de la correction\n    // question 1\n    if (!context.isAmc) {\n      texteCorr = numAlpha(0) + ' Les animaux les plus nombreux sont les ' + lstAnimauxExo[lstNombresAnimaux.indexOf(nMax)] + '.<br>'\n    } else {\n      texte += '<br>'\n      texteCorr = '1) Les animaux les plus nombreux sont les ' + lstAnimauxExo[lstNombresAnimaux.indexOf(nMax)] + '.<br>'\n    }\n    // question 2\n    if (!context.isAmc) {\n      texteCorr += numAlpha(1) + ' Les animaux les moins nombreux sont les ' + lstAnimauxExo[lstNombresAnimaux.indexOf(nMin)] + '.<br>'\n    } else {\n      texteCorr += '2) Les animaux les moins nombreux sont les ' + lstAnimauxExo[lstNombresAnimaux.indexOf(nMin)] + '.<br>'\n    }\n\n    // question 3\n    const reponse = lstNombresAnimaux[lstAnimauxExo.indexOf(lstAnimauxExo[numAnimal])]\n    const reponseinf = 10 * coef * Math.floor(reponse / (10 * coef))\n    const reponsesup = reponseinf + 10 * coef\n    if (!context.isAmc) {\n      setReponse(this, 2, reponseinf)\n      setReponse(this, 3, reponsesup)\n      texteCorr += numAlpha(2) + ' Il y a entre ' + reponseinf + ' et ' + reponsesup + ' ' + lstAnimauxExo[numAnimal] + '.<br>'\n    } else {\n      texteCorr += '3) Il y a entre ' + reponseinf + ' et ' + reponsesup + ' ' + lstAnimauxExo[numAnimal] + '.<br>'\n    }\n\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: texte,\n        propositions: [\n          {\n            type: 'qcmMono',\n            propositions: propa,\n            options: { ordered: false }\n          },\n          {\n            type: 'qcmMono',\n            options: { ordered: false },\n            propositions: propb\n          },\n          {\n            type: 'qcmMono',\n            options: { ordered: false },\n            propositions: propc\n          }\n        ]\n      }\n    }\n  }\n  this.besoinFormulaireNumerique = ['Nombre d\\'espèces différentes', 3, ' choix 1 : 4 espèces\\n choix 2 : 5 espèces\\n choix 3 : 6 espèces']\n  this.besoinFormulaire2Numerique = ['Valeurs numériques', 2, ' choix 1 : entre 1 et 100\\n choix 2 : entre 100 et 1 000']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","LectureDiagrammeBarre5e","LectureDiagrammeBarre","this","sup","sup2","amcReady","amcType","interactifReady","interactifType","Exercice","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","interactif","nouvelleVersion","listeQuestions","listeCorrections","lstAnimaux","nbAnimaux","parseInt","propa","propb","propc","lstAnimauxExo","lstNombresAnimaux","nom","texte","texteCorr","lstVal","N","i","randint","push","concat","choice","nMin","Math","min","nMax","max","context","numAlpha","ajouteChampTexte","sp","setReponse","indexOf","numAnimal","ajouteChampTexteMathLive","coef","r","repere2","grilleX","grilleY","xThickListe","xLabelListe","yUnite","yThickDistance","yMax","xMin","xMax","yMin","axeXStyle","yLegende","lstElementGraph","traceBarre","premiereLettreEnMajuscule","unite","statut","calcul","floor","mathalea2d","xmin","xmax","ymin","ymax","pixelsParCm","scale","reponse","reponseinf","reponsesup","listeQuestionsToContenu","autoCorrection","enonce","propositions","type","options","ordered","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}