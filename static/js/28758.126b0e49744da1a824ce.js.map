{"version":3,"file":"js/28758.126b0e49744da1a824ce.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A11-2.js","webpack://mathalea/./src/js/exercices/4e/4A11-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, obtenirListeFacteursPremiers, texNombre, miseEnEvidence, modalPdf, modalVideo, cribleEratostheneN, premiersEntreBornes, warnMessage } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\nexport const titre = 'Décomposition en facteurs premiers d’un entier'\n\n/**\n * 3A11-2 - decompositionFacteursPremiers\n * Décomposer un nombre en facteurs premiers et compter son nombre de diviseurs à partir d'un tableau\n * plusieurs type de nombres à décomposer\n * type 1 : 3 à 5 facteurs premiers max, multiplicités 0,1,2 ou 3 max à préciser\n * type 2 : un produit de deux premiers entre 30 et 100, multiplicité 1 ... suffisamment de possibilités?\n * type 3 : un gros premiers au delà de 1000 et inférieur à 2 000\n * @author Sébastien Lozano\n */\nexport default function decompositionFacteursPremiers () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  // mais une différence selon que l'exo est affiché en interactif ou non\n  this.consigne = ''\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 3\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.listePackages = 'bclogo'\n  this.besoinFormulaireCaseACocher = ['Afficher la liste des nombres premiers inférieurs à 100']\n  this.sup = true\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'https://coopmaths.fr/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    if (this.interactif) {\n      this.consigne = 'À l\\'aide de la calculatrice, décomposer pas à pas les nombres entiers en produit de facteurs premiers.'\n    } else {\n      this.consigne = 'À l\\'aide de la calculatrice, décomposer pas à pas les nombres entiers en produit de facteurs premiers.'\n    }\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = [1, 2, 3]\n    typesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles) // on mélange l'ordre des questions\n\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    let stringRappel = 'Cette liste des nombres premiers inférieurs à 100 pourra être utile : <br>' + cribleEratostheneN(100)[0]\n    for (let k = 1; k < cribleEratostheneN(100).length; k++) {\n      stringRappel += ', ' + cribleEratostheneN(100)[k]\n    };\n    stringRappel += '.'\n\n    if (this.sup) {\n      this.introduction = warnMessage(stringRappel, 'nombres', 'Coup de pouce')\n    } else {\n      this.introduction = ''\n    }\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      let nombre, reponse\n\n      switch (typesDeQuestions) {\n        case 1: // 3 à 5 facteurs premiers max compris entre 0 et 30, de multiplicité 1,2 ou 3 max\n          {\n            // on fixe le nombre de facteurs premier entre 3 et 5\n            const nbDePremiers = randint(3, 5)\n            // on fixe la limite pour le choix des premiers\n            const maxPremier = 11\n            // on fixe le rang max pour le choix des premiers\n            const rgMax = cribleEratostheneN(maxPremier).length - 1\n            // on choisit les rangs pour les nombres premiers\n            const tabRangs = []\n            const tabRangsExclus = []\n            for (let k = 0; k < (nbDePremiers); k++) {\n              for (let m = 0; m < k; m++) {\n                tabRangsExclus.push(tabRangs[m])\n              }\n              tabRangs[k] = randint(0, rgMax, tabRangsExclus)\n            };\n            // on choisit les premiers\n            const tabPremiers = []\n            for (let k = 0; k < tabRangs.length; k++) {\n              tabPremiers[k] = cribleEratostheneN(maxPremier)[tabRangs[k]]\n            };\n            // on range les facteurs premiers dans l'ordre croissant\n            tabPremiers.sort(function (a, b) {\n              return a - b\n            })\n            // on choisit les multiplicités\n            const tabMultiplicites = []\n            for (let k = 0; k < tabRangs.length; k++) {\n              tabMultiplicites[k] = randint(1, 2)\n            };\n            // yapluka écrire le nombre dans l'énoncé et sa décomposition dans la correction\n            texte = 'À l\\'aide de la calculatrice, décomposer '\n            let nombreTodecompose = 1\n            for (let k = 0; k < tabRangs.length; k++) {\n              for (let m = 0; m < tabMultiplicites[k]; m++) {\n                nombreTodecompose = nombreTodecompose * tabPremiers[k]\n              };\n            };\n            const racinePremier1 = Math.trunc(Math.sqrt(nombreTodecompose))\n            texte += `$${texNombre(nombreTodecompose)}$ en produit de facteurs premiers.`\n            // correction\n            texteCorr = `Nous allons successivement tester la divisibilité de $${texNombre(nombreTodecompose)}$ par tous les nombres premiers inférieurs à `\n            texteCorr += `$${texNombre(nombreTodecompose)}$ en commençant par 2, 3, 5, 7, ...<br>`\n            texteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(nombreTodecompose)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(nombreTodecompose)}}$ c'est-à-dire inférieurs à $${texNombre(racinePremier1)}$.<br>`\n            texteCorr += 'Ce sont les nombres de la liste : <br>'\n            texteCorr += cribleEratostheneN(racinePremier1)[0] + ' ; '\n            for (let k = 1; k < cribleEratostheneN(racinePremier1).length; k++) {\n              texteCorr += cribleEratostheneN(racinePremier1)[k]\n              if (k !== cribleEratostheneN(racinePremier1).length - 1) {\n                texteCorr += ' ; '\n              } else {\n                texteCorr += '.'\n              }\n              if (k % 15 === 0) {\n                texteCorr += '<br>'\n              }\n            };\n            texteCorr += '<br>'\n            const listeFacteursPremiers = obtenirListeFacteursPremiers(nombreTodecompose)\n            let quotientIntermediaire = nombreTodecompose\n            for (let k = 0; k < listeFacteursPremiers.length; k++) {\n              texteCorr += `$${texNombre(quotientIntermediaire)}\\\\div${miseEnEvidence(listeFacteursPremiers[k])} = ${texNombre(quotientIntermediaire / listeFacteursPremiers[k])}$<br>`\n              quotientIntermediaire = quotientIntermediaire / listeFacteursPremiers[k]\n            };\n            texteCorr += `Finalement on obtient la décomposition suivante : $ ${texNombre(nombreTodecompose)} = `\n            if (tabMultiplicites[0] === 1) {\n              texteCorr += `${tabPremiers[0]}`\n              reponse = `${tabPremiers[0]}`\n            } else {\n              texteCorr += `${tabPremiers[0]}^{${tabMultiplicites[0]}}`\n              reponse = `${tabPremiers[0]}^{${tabMultiplicites[0]}}`\n            };\n            for (let k = 1; k < tabPremiers.length; k++) {\n              if (tabMultiplicites[k] === 1) {\n                texteCorr += `\\\\times ${tabPremiers[k]}`\n                reponse += `\\\\times ${tabPremiers[k]}`\n              } else {\n                texteCorr += `\\\\times ${tabPremiers[k]}^{${tabMultiplicites[k]}}`\n                reponse += `\\\\times ${tabPremiers[k]}^{${tabMultiplicites[k]}}`\n              };\n            };\n            texteCorr += '$'\n            nombre = nombreTodecompose\n            setReponse(this, i, reponse)\n          }\n          break\n        case 2: // deux premiers compris entre 30 et 100 de multiplicité 1\n          {\n          // on choisit un rang différent pour chaque premier entre 30 et 100\n            const r1 = randint(0, premiersEntreBornes(30, 100).length - 1)\n            const r2 = randint(0, premiersEntreBornes(30, 100).length - 1, r1)\n            let premier1 = premiersEntreBornes(30, 100)[r1]\n            let premier2 = premiersEntreBornes(30, 100)[r2]\n            if (premier1 > premier2) { // on inverse p1 et p2 si p1 est supérieur à p2\n              const p = premier1\n              premier1 = premier2\n              premier2 = p\n            };\n            texte = `À l'aide de la calculatrice, décomposer $${texNombre(premier1 * premier2)}$ en produit de facteurs premiers.`\n            const racinePrem = Math.trunc(Math.sqrt(premier1 * premier2))\n            texteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(premier1 * premier2)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(premier1 * premier2)}}$ c'est-à-dire inférieurs à $${texNombre(racinePrem)}$.<br>`\n            texteCorr += 'Ce sont les nombres de la liste suivante : <br>$'\n            texteCorr += cribleEratostheneN(racinePrem)[0]\n            for (let k = 1; k < cribleEratostheneN(racinePrem).length; k++) {\n              texteCorr += '; ' + cribleEratostheneN(racinePrem)[k]\n            };\n            texteCorr += '.$<br>'\n            const listeFacteursPremiers = obtenirListeFacteursPremiers(premier1 * premier2)\n            let quotientIntermediaire = premier1 * premier2\n            for (let k = 0; k < listeFacteursPremiers.length; k++) {\n              texteCorr += `$${texNombre(quotientIntermediaire)}\\\\div${miseEnEvidence(listeFacteursPremiers[k])} = ${texNombre(quotientIntermediaire / listeFacteursPremiers[k])}$<br>`\n              quotientIntermediaire = quotientIntermediaire / listeFacteursPremiers[k]\n            };\n            texteCorr += ` D'où $${texNombre(premier1 * premier2)} = ${texNombre(premier1)}\\\\times${texNombre(premier2)}$.`\n            reponse = `${premier1}\\\\times${premier2}`\n            nombre = premier1 * premier2\n            setReponse(this, i, reponse)\n          }\n          break\n        case 3: // un gros premier entre 1000 et 2000\n          {\n          // on choisit un rang pour le nombre premier entre 1000 et 2000\n            const r = randint(0, premiersEntreBornes(1000, 2000).length - 1)\n            const premier = premiersEntreBornes(1000, 2000)[r]\n            const racinePremier = Math.trunc(Math.sqrt(premier))\n            texte = `À l'aide de la calculatrice, décomposer $${texNombre(premier)}$ en produit de facteurs premiers.`\n            texteCorr = `En testant la divisibilité de $${texNombre(premier)}$ par tous les nombres premiers inférieurs ou égaux à $${racinePremier}$`\n            texteCorr += ' c\\'est-à-dire les nombre de la liste $'\n            texteCorr += cribleEratostheneN(racinePremier)[0]\n            for (let k = 1; k < cribleEratostheneN(racinePremier).length; k++) {\n              texteCorr += '; ' + cribleEratostheneN(racinePremier)[k]\n            };\n            texteCorr += '$, '\n            texteCorr += `on se rend compte que $${texNombre(premier)}$ est un nombre premier donc `\n            texteCorr += `$${texNombre(premier)} = ${texNombre(premier)}$.`\n\n            reponse = `${premier}`\n            nombre = premier\n            setReponse(this, i, reponse)\n          }\n          break\n      }\n      texte += ajouteChampTexteMathLive(this, i, 'largeur20 inline', { texte: `<br> <b>Écrire les diviseurs premiers dans l'ordre croissant et la décomposition à l'aide de puissances lorsque l'exposant est supérieur ou égal à deux.</b> <br> La décomposition de $${texNombre(nombre)}$ est : ` })\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Afficher la liste des nombres premiers inférieurs à 100']\n}\n","import decompositionFacteursPremiers from '../3e/3A11-2.js'\nexport const titre = 'Décomposer un nombre entier en produit de facteurs premiers'\nexport { interactifReady, interactifType } from '../3e/3A11-2.js'\n\n/**\n * @author Guillaume Valmont\n * reference 4A11-1\n */\nexport default function decompositionFacteursPremiers4e () {\n  decompositionFacteursPremiers.call(this)\n  this.titre = titre\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","titre","decompositionFacteursPremiers","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","besoinFormulaireCaseACocher","sup","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","interactif","listeQuestions","listeCorrections","contenu","contenuCorrection","typesDeQuestionsDisponibles","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","stringRappel","cribleEratostheneN","k","length","introduction","warnMessage","texte","texteCorr","i","cpt","nombre","reponse","nbDePremiers","randint","maxPremier","rgMax","tabRangs","tabRangsExclus","m","push","tabPremiers","sort","a","b","tabMultiplicites","nombreTodecompose","racinePremier1","Math","trunc","sqrt","texNombre","listeFacteursPremiers","obtenirListeFacteursPremiers","quotientIntermediaire","miseEnEvidence","setReponse","r1","premiersEntreBornes","r2","premier1","premier2","p","racinePrem","r","premier","racinePremier","ajouteChampTexteMathLive","indexOf","listeQuestionsToContenu","decompositionFacteursPremiers4e","consigneCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}