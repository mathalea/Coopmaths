{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3L11.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Exercice_developper","difficulte","Exercice","this","sup","consigne","spacing","nbQuestions","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","type_de_questions","lettre","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","k","randint","choice","a","b","inconnue","lettreDepuisChiffre","ecritureAlgebrique","ecritureParentheseSiNegatif","signe","abs","c","ecritureParentheseSiMoins","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/6099.549436af689280dfa1fc.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,ecritureAlgebrique,ecritureParentheseSiNegatif,ecritureParentheseSiMoins,signe,abs,lettreDepuisChiffre} from '../../modules/outils.js'\n\nexport const titre = 'Utiliser la simple distributivité'\n\n/**\n * Développer en utilisant la distributivité simple\n *\n * * La lettre peut être x, y, z, t, a, b ou c\n * * 3 fois sur 6 c'est une distributivité simple :  k(ax+b)\n * * 1 fois sur 6 c'est une distributivité simple : (ax+b)×k\n * * 1 fois sur 6, la variable est en facteur : kx(ax+b)\n * * 1 fois sur 6 il faut ensuite réduire : k(ax+b)+c\n *\n * Niveau de difficulté :\n * * 1 : Multiplication par un facteur positif\n * * 2: Multiplication par un facteur relatif\n * @Auteur Rémi Angot\n * 4L10 et 3L11\n */\nexport default function Exercice_developper(difficulte = 1) {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = difficulte;\n  this.titre = titre;\n  this.consigne = \"Développer.\";\n  this.spacing = 1;\n  this.nbQuestions = 5;\n  this.nbColsCorr = 1;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let lettre = [\"x\", \"y\", \"z\", \"t\", \"a\", \"b\", \"c\"];\n    let type_de_questions_disponibles = [\n      \"simple\",\n      \"simple\",\n      \"simple2\",\n      \"x_en_facteur\",\n      \"developper_et_reduire\",\n    ];\n    let type_de_questions\n    let listeTypeDeQuestions = combinaisonListes(\n      type_de_questions_disponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      type_de_questions = listeTypeDeQuestions[i];\n      let k = randint(2, 11);\n      if (this.sup > 1) {\n        // si difficulté 2, k peut être négatif\n        k = k * choice([-1, 1]);\n      }\n      let a = randint(1, 9);\n      let b = randint(1, 9) * choice([-1, 1]);\n      let inconnue = choice(lettre);\n      switch (type_de_questions) {\n        case \"simple\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})=${k}\n\t\t\t\t\t\t\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})=${k}\n\t\t\t\t\t\t\\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          }\n          break;\n        case \"simple2\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\n\t\t\t\t\t\t\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})\\\\times${ecritureParentheseSiNegatif(k)}=${k}\n\t\t\t\t\t\t\\\\times ${a}${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}=${k * a}${inconnue}${ecritureAlgebrique(k * b)}$`;\n          }\n          break;\n        case \"x_en_facteur\":\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(b)})$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(b)})$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}${inconnue}(${inconnue}${ecritureAlgebrique(\n              b\n            )})=${k}${inconnue}\\\\times ${inconnue} ${signe(\n              k * b\n            )}${k}${inconnue}\\\\times ${abs(b)}=${k * a}${inconnue}^2${ecritureAlgebrique(k * b)}${inconnue}$`;\n          } else {\n            if (k > 0) {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + ${k}${inconnue}\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`;\n            } else {\n              texteCorr = `$${lettreDepuisChiffre(\n                i + 1\n              )}=${k}${inconnue}(${a}${inconnue}${ecritureAlgebrique(\n                b\n              )})=${k}${inconnue}\\\\times ${a}${inconnue} + (${k}${inconnue})\\\\times ${ecritureParentheseSiNegatif(\n                b\n              )}=${k * a}${inconnue}^2${ecritureAlgebrique(\n                k * b\n              )}${inconnue}$`;\n            }\n          }\n          break;\n        case \"developper_et_reduire\":\n          let c = randint(2, 9);\n          if (a == 1) {\n            // ne pas écrire 1x\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(b)})+${c}$`;\n          } else {\n            texte = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(b)})+${c}$`;\n          }\n\n          if (a == 1) {\n            // ne pas écrire 1x\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times ${inconnue}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n\t\t\t\t\t\t=${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`;\n          } else {\n            texteCorr = `$${lettreDepuisChiffre(\n              i + 1\n            )}=${k}(${a}${inconnue}${ecritureAlgebrique(\n              b\n            )})+${c}=${k}\\\\times${ecritureParentheseSiMoins(\n              a + inconnue\n            )}+${ecritureParentheseSiNegatif(\n              k\n            )}\\\\times${ecritureParentheseSiNegatif(b)}+${c}\n\t\t\t\t\t\t=${k * a}${inconnue}${ecritureAlgebrique(k * b)}+${c}=${k * a}${inconnue}${ecritureAlgebrique(k * b + c)}$`;\n          }\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Niveau de difficulté\",\n    2,\n    \"1 : Multiplication par un facteur positif\\n2: Multiplication par un facteur relatif\",\n  ];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}