{"version":3,"file":"js/65893.3157f42659bef1232fb9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5A10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListesSansChangerOrdre,listeDiviseurs,cribleEratostheneN,texteOuPas} from '../../modules/outils.js'\n\n\nexport const titre = 'Écrire la liste de tous les diviseurs d’un entier'\n\n/**\n * 5A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano\n */\nexport default function listeDesDiviseurs_5e() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.titre = titre;\n\t// pas de différence entre la version html et la version latex pour la consigne\n\t//this.consigne =`Écrire la liste de tous les diviseurs d'un entier.`;\n\tthis.consigne = ``;\n\t//this.consigne += `<br>`;\n\tcontext.isHtml ? this.spacing = 2 : this.spacing = 1;\n\tcontext.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n\tthis.nbQuestions = 3;\n\t//this.correctionDetailleeDisponible = true;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\n\tthis.nouvelleVersion = function () {\n\t\tlet typesDeQuestions;\n\t\tif (context.isHtml) { // les boutons d'aide uniquement pour la version html\n\t\t\t//this.boutonAide = '';\n\t\t\t//this.boutonAide = modalPdf(numeroExercice,\"assets/pdf/FicheArithmetique-3A10.pdf\",\"Aide mémoire sur la division euclidienne (Sébastien Lozano)\",\"Aide mémoire\")\t\t\n\t\t\t//this.boutonAide += modalVideo('conteMathsNombresPremiers','/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n\t\t} else { // sortie LaTeX\n\t\t};\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tthis.contenu = ''; // Liste de questions\n\t\tthis.contenuCorrection = ''; // Liste de questions corrigées\n\n\t\tlet typesDeQuestionsDisponibles = [1, 1, 2];\n\t\t//let typesDeQuestionsDisponibles = [1];\n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions);\n\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\ttypesDeQuestions = listeTypeDeQuestions[i];\n\n\t\t\tswitch (typesDeQuestions) {\n\t\t\t\tcase 1: // Compléter un tableau pour trouver la liste de tous les diviseurs d'un entier\n\t\t\t\t\t// on choisit un entier non premier inférieur à 99\n\t\t\t\t\tlet M = randint(2, 99, cribleEratostheneN(99));\n\t\t\t\t\t// on calcule le nombre de diviseur de M pour prévoir le nombre de lignes du tableau\n\t\t\t\t\tlet nbre_diviseurs_M = listeDiviseurs(M).length;\n\n\t\t\t\t\ttexte = `Compléter le tableau suivant et faire la liste de tous les diviseurs de ${M}`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexte += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\tif (context.isHtml) {\n\t\t\t\t\t\ttexte += `$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexte += `$\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\ttexte += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`;\n\t\t\t\t\ttexte += `\\\\hline\\n`;\n\n\t\t\t\t\tif (nbre_diviseurs_M % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n\t\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[m]) + ` & ` + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[m]) + ` & ` + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2]) + ` & ` + texteOuPas(listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `\\\\end{array}\\n$`;\n\n\t\t\t\t\t// correction\n\t\t\t\t\ttexteCorr = `Le tableau suivant contient tous les couples de facteurs dont le produit vaut ${M}`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tif (context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `$\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\ttexteCorr += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`;\n\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\n\t\t\t\t\tif (nbre_diviseurs_M % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[m] + ` & ` + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[m] + ` & ` + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2] + ` & ` + listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `\\\\end{array}\\n$`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\ttexteCorr += `${M} a donc ${nbre_diviseurs_M} diviseurs qui sont : `;\n\t\t\t\t\ttexteCorr += `1`;\n\t\t\t\t\tfor (let w = 1; w < listeDiviseurs(M).length; w++) {\n\t\t\t\t\t\ttexteCorr += ` ; ` + listeDiviseurs(M)[w];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // liste des diviseurs\n\t\t\t\t\t// on définit un tableau pour les choix du nombre dont on veut les diviseurs\n\t\t\t\t\t// 3 parmis 2,99 y compris les premiers et 1 parmis les entiers à 3 chiffres ayant au moins 8 diviseurs, il y en a 223 !\n\t\t\t\t\tlet tableau_de_choix = [];\n\t\t\t\t\ttableau_de_choix = [randint(2, 99), randint(2, 99, [tableau_de_choix[0]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1], tableau_de_choix[2]])];\n\t\t\t\t\tlet tableau_de_choix_3chiffres = [];\n\t\t\t\t\tfor (let m = 101; m < 999; m++) {\n\t\t\t\t\t\tif (listeDiviseurs(m).length > 8) {\n\t\t\t\t\t\t\ttableau_de_choix_3chiffres.push(m);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t// on ajoute un nombre à trois chiffre avec au moins 8 diviseurs dans les choix possibles\n\t\t\t\t\tlet rg_Nb_3chiffres = randint(0, (tableau_de_choix_3chiffres.length - 1));\n\t\t\t\t\ttableau_de_choix.push(tableau_de_choix_3chiffres[rg_Nb_3chiffres]);\n\n\t\t\t\t\tlet N; // on déclare le nombre dont on va chercher les diviseurs\n\t\t\t\t\tlet rg_N; // pour tirer le rang du nombre dans le tableau des choix\n\t\t\t\t\trg_N = randint(0, (tableau_de_choix.length - 1));\n\t\t\t\t\tN = tableau_de_choix[rg_N];\n\t\t\t\t\ttexte = `Écrire la liste de tous les diviseurs de ${N}.`;\n\t\t\t\t\ttexteCorr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En écrivant toujours le plus petit facteur en premier.<br>`;\n\t\t\t\t\ttexteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\\\times $${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N)) * Math.trunc(Math.sqrt(N))}<${N}`;\n\t\t\t\t\ttexteCorr += ` et ${Math.trunc(Math.sqrt(N)) + 1}$\\\\times $${Math.trunc(Math.sqrt(N)) + 1} = ${(Math.trunc(Math.sqrt(N)) + 1) * (Math.trunc(Math.sqrt(N)) + 1)}>${N} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(N))}.`;\n\t\t\t\t\ttexteCorr += ` En effet, si ${N} est le produit de deux entiers p$\\\\times $q avec p < q alors si p$\\\\times $p > ${N} c'est que q$\\\\times $q < ${N} mais dans ce cas p serait supérieur à q sinon p$\\\\times $q serait inférieur à ${N} ce qui ne doit pas être le cas.<br>`;\n\t\t\t\t\tif (listeDiviseurs(N).length % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(N).length / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + ` = ${N}<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(N).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + `<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + ` = ${N}<br>`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`;\n\t\t\t\t\ttexteCorr += `La liste des diviseurs de ${N} est donc `;\n\t\t\t\t\ttexteCorr += `1`;\n\t\t\t\t\tfor (let w = 1; w < listeDiviseurs(N).length; w++) {\n\t\t\t\t\t\ttexteCorr += ` ; ` + listeDiviseurs(N)[w];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\tbreak;\n\t\t\t};\n\n\t\t\tif (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\t//this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"]; \n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","listeDesDiviseurs_5e","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","typesDeQuestions","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","M","randint","cribleEratostheneN","nbre_diviseurs_M","listeDiviseurs","length","m","texteOuPas","w","tableau_de_choix","tableau_de_choix_3chiffres","push","N","rg_N","rg_Nb_3chiffres","Math","trunc","sqrt","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}