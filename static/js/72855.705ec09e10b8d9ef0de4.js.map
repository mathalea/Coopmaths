{"version":3,"file":"js/72855.705ec09e10b8d9ef0de4.js","mappings":"gLAGO,MAAMA,EAAQ,sDAMN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQ,sDACbG,KAAKC,SAAW,kHAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,IAAM,EAEXL,KAAKM,gBAAkB,WACrBN,KAAKK,IAAME,SAASP,KAAKK,KACzBL,KAAKQ,KAAOD,SAASP,KAAKQ,MAC1BR,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GAExB,IAAK,IAAWC,EAAGC,EAAGC,EAAGC,EAAGC,EAAOC,EAA1BC,EAAI,EAAiCC,EAAM,EAAGD,EAAIjB,KAAKE,aAAegB,EAAM,IACnFP,GAAIQ,EAAAA,EAAAA,KAAQ,EAAG,IACfP,EAAID,EAAIA,EACRE,GAAIM,EAAAA,EAAAA,KAAQ,EAAG,EAAG,CAAC,IACnBL,EAAID,EAAID,EACS,IAAbZ,KAAKK,MAAaU,EAAS,mBAAkBD,iCAAiCD,+BAClFG,EAAa,sDAAqDF,YAAYF,iEACxBE,KAAKD,aAAaD,KAAKC,aAAaF,uEAC1DG,aAAaH,iBAAiBE,OAAOF,mBAAmBE,MACvE,IAAbb,KAAKK,MAAaU,EAAS,mBAAkBD,kGACjDE,EAAa,sDAAqDF,YAAYF,iEACxBE,KAAKD,aAAaD,KAAKC,aAAaF,uEAC1DG,aAAaH,iBAAiBE,OAAOF,mBAAmBE,OAC5C,IAAxCb,KAAKS,eAAeW,QAAQL,KAC9Bf,KAAKS,eAAeY,KAAKN,GACzBf,KAAKU,iBAAiBW,KAAKL,GAC3BC,KAEFC,KAEFI,EAAAA,EAAAA,KAAwBtB,OAE1BA,KAAKuB,0BAA4B,CAAC,uBAAwB,EAAG,+D,gBCxChD,SAASxB,IAItBC,KAAKH,MAAQ,GACbG,KAAKwB,YAAa,EAclBxB,KAAKC,SAAW,GAChBD,KAAKyB,mBAAqB,GAC1BzB,KAAK0B,aAAe,GACpB1B,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GACxBV,KAAK2B,QAAU,GACf3B,KAAK4B,kBAAoB,GACzB5B,KAAK6B,eAAiB,GACtB7B,KAAK8B,sBAAwB,GAK7B9B,KAAK+B,QAAU,EACf/B,KAAKgC,YAAc,EAKnBhC,KAAKiC,mBAAoB,EACzBjC,KAAKkC,cAAgB,GACrBlC,KAAKmC,oBAAqB,EAC1BnC,KAAKoC,uBAAwB,EAC7BpC,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKqC,kBAAmB,EACxBrC,KAAKsC,sBAAuB,EAC5BtC,KAAKuC,mBAAoB,EACzBvC,KAAKwC,uBAAwB,EAM7BxC,KAAKyC,QAAS,EACdzC,KAAK0C,gBAAkB,EAKvB1C,KAAKE,YAAc,GACnBF,KAAK2C,mBAAqB,EAC1B3C,KAAK4C,+BAAgC,EACrC5C,KAAK6C,qBAAsB,EAC3B7C,KAAK8C,oBAAqB,EAC1B9C,KAAK+C,MAAQ,GAEb/C,KAAKgD,YAAa,EAClBhD,KAAKiD,uBAAwB,EAE7BjD,KAAKuB,2BAA4B,EACjCvB,KAAKkD,uBAAwB,EAC7BlD,KAAKmD,6BAA8B,EAEnCnD,KAAKoD,4BAA6B,EAClCpD,KAAKqD,wBAAyB,EAC9BrD,KAAKsD,8BAA+B,EAEpCtD,KAAKuD,4BAA6B,EAClCvD,KAAKwD,wBAAyB,EAC9BxD,KAAKyD,8BAA+B,EAEpCzD,KAAK0D,4BAA6B,EAClC1D,KAAK2D,wBAAyB,EAC9B3D,KAAK4D,8BAA+B,EAMpC5D,KAAK6D,cAAe,EASpB7D,KAAK8D,eAAiB,GAMtB9D,KAAKM,gBAAkB,SAAUyD,KAQjC/D,KAAKgE,oBAAsB,SAAU/C,KAAMgD,GAC/B,IAANhD,IAASjB,KAAK8D,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIrE,KAAK8D,eAAe1C,QAAQ8C,IAAmB,KAGjDlE,KAAK8D,eAAezC,KAAK6C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/2e/2N32-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint } from '../../modules/outils.js'\n\nexport const titre = 'Écrire le nombre proposé sous la forme $a\\\\sqrt{b}$'\n\n/**\n * 2N32-3, ex 2N11\n * @author Stéphane Guyon\n */\nexport default function ExtraireUnCarreParfaitDUneRacineCarree () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = 'Ecrire le nombre proposé sous la forme $a\\\\sqrt{b}$'\n  this.consigne = ' Ecrire le nombre proposé sous la forme $a\\\\sqrt{b}$ où $a$ est un entier et $b$ le plus petit entier possible:'\n  this.nbQuestions = 4\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 2 //\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (let i = 0, a, b, c, d, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      a = randint(2, 11)\n      b = a * a\n      c = randint(2, 7, [4])\n      d = c * b\n      if (this.sup === 1) { texte = `Ecrire $\\\\sqrt{ ${d} } $ sous la forme $a\\\\sqrt{ ${c} } $ où $a$ est un entier:` }\n      texteCorr = `On cherche le plus grand carré parfait diviseur de ${d}, c'est ${b}.\n                            On a donc la décomposition : $${d}=${c} \\\\times ${b}=${c} \\\\times ${a}^{2}$ qui permet d'écrire que\n                            $\\\\sqrt{${d}}=\\\\sqrt{${a}^{2} \\\\times ${c} }=${a}\\\\times \\\\sqrt{${c}}$`\n      if (this.sup === 2) { texte = `Ecrire $\\\\sqrt{ ${d} } $ sous la forme $a\\\\sqrt{ b } $ où $a$ est un entier et $b$ le plus petit entier possible:` }\n      texteCorr = `On cherche le plus grand carré parfait diviseur de ${d}, c'est ${b}.\n                            On a donc la décomposition : $${d}=${c} \\\\times ${b}=${c} \\\\times ${a}^{2}$ qui permet d'écrire que\n                            $\\\\sqrt{${d}}=\\\\sqrt{${a}^{2} \\\\times ${c} }=${a}\\\\times \\\\sqrt{${c}}$`\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : En donnat la racine carrée unité\\n2 : Sans indication']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ExtraireUnCarreParfaitDUneRacineCarree","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","parseInt","sup2","listeQuestions","listeCorrections","a","b","c","d","texte","texteCorr","i","cpt","randint","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}