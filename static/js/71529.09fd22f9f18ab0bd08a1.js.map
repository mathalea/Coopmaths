{"version":3,"file":"js/71529.09fd22f9f18ab0bd08a1.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2S10-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, texPrix } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Calculer une proportion ou appliquer un pourcentage'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true // Pour en bénéficier avec le générateur AMC\nexport const amcType = 'AMCNum' // Les réponses sont des valeurs numériques à encoder\nexport const dateDePublication = '9/12/2021'\n\n/**\n* Problèmes de proportions\n*\n* * Situations variées : spectacle, cadeau, réserve\n*\n* * Déterminer l'effectif de la sous population\n* * Calculer une proportion\n* * Retrouver l'effectif de la population totale'\n* * Mélange des 3 types de problèmes\n* @author Florence Tapiero\n* * ajout de lignes pour l'export AMC par Jean-Claude Lhote\n* 2S10-1\n*/\nexport default function Proportions () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 4 // type de questions\n  this.spacing = 1\n  this.spacingCorr = 2\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = [] // Cette ligne doit être ajoutée afin de vider les précédentes valeurs pour AMC\n    let typesDeQuestionsDisponibles = []\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = ['sous-population']\n    }\n    if (this.sup === 2) {\n      typesDeQuestionsDisponibles = ['proportion']\n    }\n    if (this.sup === 3) {\n      typesDeQuestionsDisponibles = ['population-totale']\n    }\n    if (this.sup === 4) {\n      typesDeQuestionsDisponibles = ['sous-population', 'proportion', 'population-totale']\n    }\n    const situationsDisponibles = ['spectacle', 'cadeau', 'réserve']\n    // const situationsDisponibles = ['cadeau'] pour test de chaque situation\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const typesDeSituations = combinaisonListes(situationsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let prénom, espèces\n    for (let i = 0, texte, texteCorr, sous, sous2, totale, taux, p, reponse, paramAMC, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (typesDeSituations[i]) {\n        case 'spectacle':\n          // Le nombre de spectateurs doit être entier\n          // Multiple de 50 et multiple de 2%\n          // Multiple de 20 et multiple de 5%\n          // Multiple de 100 et n%\n          switch (randint(1, 3)) {\n            case 1:\n              totale = 50 * randint(2, 60)\n              taux = 2 * randint(3, 30)\n              break\n            case 2:\n              totale = 20 * randint(5, 150)\n              taux = 5 * randint(1, 16)\n              break\n            case 3:\n              totale = 100 * randint(1, 30)\n              taux = randint(10, 80)\n              break\n          }\n          p = calcul(taux / 100)\n          sous = calcul(totale * p)\n          sous2 = totale - sous\n          switch (listeTypeDeQuestions[i]) {\n            case 'sous-population':\n              switch (randint(1, 2)) {\n                case 1:\n                  texte = `$${texNombre(totale)}$ personnes assistent à un concert. $${taux}~\\\\%$ ont moins de $18$ ans. <br>Calculer le nombre de personnes mineures dans le public.`\n                  texteCorr = `Pour appliquer une proportion à une valeur, on multiplie celle-ci par la proportion $p$. <br>Comme $${taux}~\\\\%$ des $${texNombre(totale)}$ personnes sont mineures, le nombre de personnes mineures est donné par :`\n                  texteCorr += `<br>$\\\\dfrac{${taux}}{100} \\\\times ${texNombre(totale)} = ${texNombre(p)} \\\\times ${texNombre(totale)}=${texNombre(sous)}$`\n                  texteCorr += `<br>Il y a donc $${texNombre(sous)}$ personnes mineures dans le public.`\n                  reponse = sous\n                  break\n                case 2:\n                  texte = `$${texNombre(totale)}$ personnes assistent à un concert. $${taux}~\\\\%$ ont moins de $18$ ans. <br>Calculer le nombre de personnes majeures dans le public.`\n                  texteCorr = `<br>On commence par déterminer la proportion de personnes majeures avec ce calcul : <br> $100-${taux}=${100 - taux}$.`\n                  texteCorr += 'Pour appliquer une proportion à une valeur, on multiplie celle-ci par la proportion $p$.'\n                  texteCorr += `<br>Comme $${100 - taux}~\\\\%$ des $${texNombre(totale)}$ personnes sont majeures, le nombre de personnes majeures est donné par :`\n                  texteCorr += `<br>$\\\\dfrac{${100 - taux}}{100} \\\\times ${texNombre(totale)} = ${texNombre(calcul(1 - p))} \\\\times ${texNombre(totale)} = ${texNombre(sous2)}$`\n                  texteCorr += `<br>Il y a donc $${texNombre(sous2)}$ personnes majeures dans le public.`\n                  reponse = sous2\n                  break\n              }\n              paramAMC = { digits: 4, decimals: 0, signe: false, approx: 0 } // on mets 4 chiffres même si la plupart des réponses n'en ont que 3 pour ne pas contraindre les réponses\n              break\n            case 'population-totale':\n              texte = `Lors d'un concert, il y a $${texNombre(sous)}$ spectacteurs de plus de $60$ ans, ce qui représente $${taux}~\\\\%$ du public. <br>Combien de spectateurs ont assisté au concert ?`\n              texteCorr = `Soit $x$ le nombre total de spectateur. <br> Comme $${taux}~\\\\%$ de $x$ est égal à $${texNombre(sous)}$, on a :`\n              texteCorr += `<br>$\\\\begin{aligned}\n              \\\\dfrac{${taux}}{100} \\\\times x &= ${texNombre(sous)} \\\\\\\\\\\\\n              ${texNombre(p)} \\\\times x &= ${texNombre(sous)} \\\\\\\\\n              x &= \\\\dfrac{${texNombre(sous)}}{${texNombre(p)}} \\\\\\\\\n              x &= ${texNombre(totale)}\n              \\\\end{aligned}$`\n              texteCorr += `<br>Il y avait donc $${texNombre(totale)}$ spectateurs.`\n              reponse = totale\n              paramAMC = { digits: 4, decimals: 0, signe: false, approx: 0 } // Le nombre attendu a bien 4 chiffres maxi\n              break\n            case 'proportion':\n              texte = `Parmi les $${texNombre(totale)}$ spectacteurs d'un concert, $${texNombre(sous)}$ ont moins de $18$ ans. <br>Calculer la proportion des personnes mineures dans le public en pourcentage.`\n              texteCorr = `La proportion $p$ est donnée par le quotient : $\\\\dfrac{${texNombre(sous)}}{${texNombre(totale)}} = ${texNombre(p)}$.`\n              texteCorr += `<br>$${texNombre(p)}=\\\\dfrac{${texNombre(taux)}}{100}$. Il y a donc $${taux}~\\\\%$ de personnes mineures dans le public.`\n              reponse = taux\n              paramAMC = { digits: 2, decimals: 0, signe: false, approx: 0 } // Le taux est ici inférieur à 100%\n              break\n          }\n          break\n        case 'cadeau' :\n          switch (randint(1, 3)) {\n            case 1:\n              totale = 50 * randint(1, 3, 2)\n              taux = 2 * randint(3, 17)\n              break\n            case 2:\n              totale = 20 * randint(2, 8, 5)\n              taux = 5 * randint(2, 7)\n              break\n            case 3:\n              totale = 10 * randint(1, 15)\n              taux = 10 * randint(1, 3)\n              break\n          }\n          p = calcul(taux / 100)\n          sous = calcul(totale * p)\n          sous2 = totale - sous\n          prénom = choice(['Frédéric', 'Brice', 'Marion', 'Christelle', 'Léo', 'Gabriel', 'Maël', 'Louise', 'Lina', 'Mia', 'Rose', 'Mohamed', 'Mehdi', 'Rayan', 'Karim', 'Yasmine', 'Noûr', 'Kaïs', 'Louna', 'Nora', 'Fatima', 'Nora', 'Nadia', 'Sohan', 'Timothée', 'Jamal'])\n          switch (listeTypeDeQuestions[i]) {\n            case 'sous-population':\n              texte = `Le cadeau commun que nous souhaitons faire à ${prénom} coûte $${texPrix(totale)}$ €. Je participe à hauteur de $${taux}~\\\\%$ du prix total. <br>Combien ai-je donné pour le cadeau de ${prénom} ?`\n              texteCorr = `Pour appliquer une proportion à une valeur, on multiplie celle-ci par la proportion $p$. <br>Comme ma participation représente $${taux}~\\\\%$ de $${texPrix(totale)}$, j'ai donné :`\n              texteCorr += `<br>$\\\\dfrac{${taux}}{100} \\\\times ${texNombre(totale)} = ${texNombre(p)} \\\\times ${texNombre(totale)}=${texNombre(sous)}$`\n              texteCorr += `<br>Ma participation au cadeau est de $${texPrix(sous)}$ €.`\n              reponse = sous\n              paramAMC = { digits: 3, decimals: 0, signe: false, approx: 0 } // la participation n'a que 2 chiffres mais on ne contraint pas la réponse\n              break\n            case 'population-totale':\n              texte = `Pour le cadeau de ${prénom}, j'ai donné $${texPrix(sous)}$ €. Cela représente $${taux}~\\\\%$ du prix total du cadeau. <br>Quel est le montant du cadeau ?`\n              texteCorr = `Soit $x$ le montant du cadeau. <br> Comme $${taux}~\\\\%$ de $x$ est égal à $${texPrix(sous)}$, on a :`\n              texteCorr += `<br>$\\\\begin{aligned}\n              \\\\dfrac{${taux}}{100} \\\\times x &= ${sous} \\\\\\\\\\\\\n              ${texNombre(p)} \\\\times x &= ${sous} \\\\\\\\\n              x &= \\\\dfrac{${texPrix(sous)}}{${texNombre(p)}} \\\\\\\\\n              x &= ${texPrix(totale)}\n              \\\\end{aligned}$`\n              texteCorr += `<br>Le cadeau coûte $${texPrix(totale)}$ €.`\n              reponse = totale\n              paramAMC = { digits: 3, decimals: 0, signe: false, approx: 0 }\n              break\n            case 'proportion':\n              texte = `Le cadeau commun que nous souhaitons faire à ${prénom} coûte $${texPrix(totale)}$ €. Je participe à hauteur de $${texPrix(sous)}$ €. <br>Calculer la proportion de ma participation sur le prix total du cadeau.`\n              texteCorr = `La proportion $p$ est donnée par le quotient : $\\\\dfrac{${texPrix(sous)}}{${texPrix(totale)}} = ${texNombre(p)}$.`\n              texteCorr += `<br>$${texNombre(p)}=\\\\dfrac{${texNombre(taux)}}{100}$. J'ai donc donné $${taux}~\\\\%$ du montant total du cadeau.`\n              reponse = taux\n              paramAMC = { digits: 2, decimals: 0, signe: false, approx: 0 } // Le taux est ici inférieur à 100%\n              break\n          }\n          break\n        case 'réserve' :\n          switch (randint(1, 3)) {\n            case 1:\n              totale = 50 * randint(10, 60)\n              taux = 2 * randint(3, 20)\n              break\n            case 2:\n              totale = 20 * randint(25, 150)\n              taux = 5 * randint(1, 9)\n              break\n            case 3:\n              totale = 100 * randint(5, 30)\n              taux = randint(8, 40)\n              break\n          }\n          p = calcul(taux / 100)\n          sous = calcul(totale * p)\n          sous2 = totale - sous\n          // espèce = choice(['pic noir', 'pipit farlouse', 'bruant des roseaux']) au singulier, inutile à priori\n          espèces = choice(['pics noir', 'pipits farlouse', 'bruants des roseaux'])\n          switch (listeTypeDeQuestions[i]) {\n            case 'sous-population':\n              texte = `Une réserve de protection d'oiseaux contient $${texNombre(totale)}$ individus d'oiseaux. On dénombre $${taux}~\\\\%$ de ${espèces}.<br>Quel est le nombre de ${espèces} ?`\n              texteCorr = `Pour appliquer une proportion à une valeur, on multiplie celle-ci par la proportion $p$. <br>Comme les ${espèces} représentent $${taux}~\\\\%$ de $${texNombre(totale)}$, leur nombre est donné par :`\n              texteCorr += `<br>$\\\\dfrac{${taux}}{100} \\\\times ${texNombre(totale)} = ${texNombre(p)} \\\\times ${texNombre(totale)}=${texNombre(sous)}$`\n              texteCorr += `<br>Il y a $${texNombre(sous)}$ ${espèces} dans la réserve.`\n              reponse = sous\n              paramAMC = { digits: 4, decimals: 0, signe: false, approx: 0 } // on mets 4 chiffres même si la plupart des réponses n'en ont que 3 pour ne pas contraindre les réponses\n\n              break\n            case 'population-totale':\n              texte = `Dans une réserve de protection d'oiseaux, il y a $${texNombre(sous)}$ ${espèces}, ce qui représente $${taux}~\\\\%$ du nombre total d'oiseaux. <br>Quel est le nombre d'oiseaux de cette réserve ?`\n              texteCorr = `Soit $x$ le nombre d'oiseaux. <br> Comme $${taux}~\\\\%$ de $x$ est égal à $${texNombre(sous)}$, on a :`\n              texteCorr += `<br>$\\\\begin{aligned}\n                \\\\dfrac{${taux}}{100} \\\\times x &= ${texNombre(sous)} \\\\\\\\\\\\\n                ${texNombre(p)} \\\\times x &= ${texNombre(sous)} \\\\\\\\\n                x &= \\\\dfrac{${texNombre(sous)}}{${texNombre(p)}} \\\\\\\\\n                x &= ${texNombre(totale)}\n                \\\\end{aligned}$`\n              texteCorr += `<br>Il y a $${texNombre(totale)}$ oiseaux dans la réserve.`\n              reponse = totale\n              paramAMC = { digits: 4, decimals: 0, signe: false, approx: 0 } // population à 4 chiffres (souvent)\n\n              break\n            case 'proportion':\n              texte = `Une réserve de protection d'oiseaux contient $${texNombre(totale)}$ individus d'oiseaux. On dénombre $${texNombre(sous)}$ ${espèces}. <br>Calculer la proportion de ${espèces} dans la réserve.`\n              texteCorr = `La proportion $p$ est donnée par le quotient : $\\\\dfrac{${texNombre(sous)}}{${texNombre(totale)}} = ${texNombre(p)}$.`\n              texteCorr += `<br>$${texNombre(p)}=\\\\dfrac{${texNombre(taux)}}{100}$. Le pourcentage de ${espèces} dans la réserve est donc de $${taux}~\\\\%$.`\n              reponse = taux\n              paramAMC = { digits: 2, decimals: 0, signe: false, approx: 0 } // Le taux est ici inférieur à 100%\n              break\n          }\n          break\n      }\n      setReponse(this, i, reponse, paramAMC)\n      if (context.isAmc && listeTypeDeQuestions[i] === 'proportion') {\n        this.autoCorrection[i].reponse.textePosition = 'left'\n        this.autoCorrection[i].reponse.texte = '\\\\\\\\En \\\\% : '\n      }\n      texte += ajouteChampTexteMathLive(this, i, 'largeur10 inline')\n      // à cause de ajouteChampTexteMathLive qui inclus un Id unique, toutes les questions sont différentes, comparer les textes ne suffit plus\n      if (this.questionJamaisPosee(i, taux, totale, sous)) { // on utilise donc cette fonction basée sur les variables aléatoires pour éviter les doublons\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 4, '1 : Déterminer l\\'effectif d\\'une sous-population \\n2 : Calculer une proportion en pourcentage\\n3 : Calculer l\\'effectif de la population totale \\n4 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","dateDePublication","Proportions","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","spacing","spacingCorr","nouvelleVersion","parseInt","listeQuestions","listeCorrections","autoCorrection","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","typesDeSituations","prénom","espèces","texte","texteCorr","sous","sous2","totale","taux","p","reponse","paramAMC","i","cpt","randint","calcul","texNombre","digits","decimals","signe","approx","choice","texPrix","setReponse","context","textePosition","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}