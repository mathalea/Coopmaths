{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C30-5.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","MultiplierPar001","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","consigne","qcmDisponible","modeQcm","sup","sup2","nouvelleVersion","typeDeQuestionsDisponibles","qcm","listeQuestions","listeCorrections","parseInt","listeTypeDeQuestions","combinaisonListes","rang","tabrep","tabicone","texte","texteCorr","coef","nombre","nombreentier","resultat","exposant","i","cpt","randint","calcul","choice","texNombre2","push","shuffle2tableaux","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","texFraction","miseEnEvidence","indexOf","listeQuestionsToContenu","gestionQcmInteractif","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","a","b","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","mathalea","sortieAMC","length"],"mappings":"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","file":"js/5633.8bcd50cc536fa71ada32.js","sourcesContent":["import Exercice from '../ClasseExercice.js'\nimport { shuffle2tableaux, calcul, listeQuestionsToContenu, combinaisonListes, randint, texNombre2, texFraction, choice, miseEnEvidence } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\n\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Multiplication par 0,1 ; 0,01 ; 0,001 (compléter avec le nombre qui convient)'\n\n/**\n * @Auteur Jean-claude Lhote\n * Publié le 20/02/2021\n * Référence 6C30-5\n */\nexport default function MultiplierPar001 () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 4 // Ici le nombre de questions\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.consigne = 'Compléter les pointillés.'\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n  this.qcmDisponible = true\n  this.modeQcm = false\n  this.sup = false\n  this.sup2 = 4\n  //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n  //  this.modeQcm = false; // A décommenter : valeur par défaut d'un troisième paramètre\n\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n\n    this.qcm = ['6C30-5', [], 'Multiplication par 0,1 ; 0,01 ; 0,001 (compléter avec le nombre qui convient)', 1]\n\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    let typeDeQuestionsDisponibles\n    if (this.sup2 === 4) {\n      typeDeQuestionsDisponibles = [1, 2, 3]\n    } else {\n      typeDeQuestionsDisponibles = [parseInt(this.sup2)]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n    const rang = ['millièmes', 'centièmes', 'dixièmes']\n    let tabrep; let tabicone = [1, 0, 0, 0]\n    this.qcm[1] = []\n    for (let i = 0, texte, texteCorr, coef, nombre, nombreentier, resultat, exposant, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n      coef = -randint(1, 3)\n      if (!this.sup) {\n        exposant = -randint(1, 3)\n      } else {\n        exposant = 0\n      }\n      nombreentier = calcul(randint(10, 1000) + randint(10, 999) * choice([0, 1000]))\n      nombre = calcul(nombreentier * 10 ** exposant)\n      resultat = calcul(nombre * 10 ** coef)\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 1:\n          tabrep = [`$${texNombre2(resultat)}$`, `$${texNombre2(calcul(nombre * 10 ** (-coef)))}$`, `$${texNombre2(calcul(nombre * 10 ** (coef - 1)))}$`, `$${texNombre2(calcul(nombre * 10 ** (-coef + 1)))}$`]\n          tabicone = [1, 0, 0, 0]\n          this.qcm[1].push([`Que doit-on écrire à la place des pointillés ? $${texNombre2(nombre)} \\\\times ${texNombre2(calcul(10 ** coef))}~~ = ~~\\\\ldots\\\\ldots\\\\ldots\\\\ldots$.\\\\\\\\ \\n Réponses possibles`,\n            tabrep,\n            tabicone])\n          texte = `$${texNombre2(nombre)} \\\\times ${texNombre2(calcul(10 ** coef))}~~ = ~~\\\\ldots\\\\ldots\\\\ldots\\\\ldots$`\n          if (this.modeQcm) {\n            shuffle2tableaux(tabrep, tabicone)\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n            break\n          }\n          texteCorr = `Quand on multiplie par $${texNombre2(calcul(10 ** coef))}=${texFraction(1, calcul(10 ** (-coef)))}$ chaque chiffre prend une valeur $${texNombre2(calcul(10 ** (-coef)))}$ fois plus petite.<br>`\n          texteCorr += `Le chiffre des unités se positionne donc dans les ${rang[3 + coef]} :<br>`\n          texteCorr = `$${texNombre2(nombre)} \\\\times ${texNombre2(calcul(10 ** coef))}~~ =~~ ${miseEnEvidence(texNombre2(resultat), 'blue')}$`\n\n          break\n\n        case 2:\n          tabrep = [`$${texNombre2(calcul(10 ** coef))}$`, `$${texNombre2(calcul(10 ** (coef - 1)))}$`, `$${texNombre2(calcul(10 ** (coef + 1)))}$`, `$${texNombre2(calcul(10 ** (-coef)))}$`]\n          tabicone = [1, 0, 0, 0]\n          this.qcm[1].push([`Que doit-on écrire à la place des pointillés ? $${texNombre2(nombre)} \\\\times \\\\ldots\\\\ldots\\\\ldots~~ = ~~${texNombre2(resultat)}$.\\\\\\\\ \\n Réponses possibles`,\n            tabrep,\n            tabicone])\n          texte = `$${texNombre2(nombre)} \\\\times \\\\ldots\\\\ldots\\\\ldots~~ = ~~${texNombre2(resultat)}$`\n          if (this.modeQcm) {\n            shuffle2tableaux(tabrep, tabicone)\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n            break\n          }\n          texteCorr = `Quand on multiplie par $${texNombre2(10 ** coef)}=${texFraction(1, 10 ** (-coef))}$ chaque chiffre prend une valeur $${texNombre2(10 ** (-coef))}$ fois plus petite.<br>`\n          texteCorr += `Le chiffre des unités se positionne donc dans les ${rang[3 + coef]} :<br>`\n          texteCorr = `$${texNombre2(nombre)} \\\\times ${miseEnEvidence(texNombre2(10 ** coef), 'blue')} ~~=~~ ${texNombre2(resultat)}$`\n\n          break\n\n        case 3:\n          tabrep = [`$${texNombre2(nombre)}$`, `$${texNombre2(calcul(nombre / 10))}$`, `$${texNombre2(calcul(nombre * 10))}$`, `$${texNombre2(calcul(nombre * 10 ** (-coef + 1)))}$`]\n          tabicone = [1, 0, 0, 0]\n          this.qcm[1].push([`Que doit-on écrire à la place des pointillés ? $\\\\ldots\\\\ldots\\\\ldots\\\\ldots \\\\times ${texNombre2(10 ** coef)}~~ = ~~${texNombre2(resultat)}$.\\\\\\\\ \\n Réponses possibles`,\n            tabrep,\n            tabicone])\n\n          texte = `$\\\\ldots\\\\ldots\\\\ldots\\\\ldots \\\\times ${texNombre2(10 ** coef)}~~ = ~~${texNombre2(resultat)}$`\n          if (this.modeQcm) {\n            shuffle2tableaux(tabrep, tabicone)\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n            break\n          }\n          texteCorr = `Quand on multiplie par $${texNombre2(10 ** coef)}=${texFraction(1, 10 ** (-coef))}$ chaque chiffre prend une valeur $${texNombre2(10 ** (-coef))}$ fois plus petite.<br>`\n          texteCorr += `Le chiffre des unités se positionne donc dans les ${rang[3 + coef]} :<br>`\n          texteCorr = `$${miseEnEvidence(texNombre2(nombre), 'blue')} \\\\times ${texNombre2(10 ** coef)} = ${texNombre2(resultat)}$`\n\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  gestionQcmInteractif(this)\n  this.besoinFormulaireCaseACocher = ['Nombres entiers', true]\n  this.besoinFormulaire2Numerique = ['Type de question', 4, '1 : Résultat à calculer\\n 2 : Nombre à retrouver\\n 3 : Fraction décimale à retrouver\\n 4 : Alternance des 3 types de question']\n  // this.besoinFormulaire3CaseACocher =['Mode QCM',false]\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n"],"sourceRoot":""}