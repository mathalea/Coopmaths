{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ReconnaitreQuadrilatereParticulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","context","correctionDetaillee","nouvelleVersion","listeQuestions","listeCorrections","listeDeQuestions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","tabrep","tabicone","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","codageAngleDroit","segment","pointilles","autoCorrection","enonce","propositions","statut","feedback","options","ordered","lastChoice","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","type","querySelectorAll","uicheck","exerciceQcm","espace","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","message","level","includes","div","cssIcon","remove","divTitre","messageUtilisateur","code","width"],"mappings":"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","file":"js/1406.fd2d115b405605e754c9.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, choice, shuffle } from '../../modules/outils.js'\nimport { point, segment, polygone, codageAngleDroit, codeSegments, mathalea2d } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 // QCM \nexport const interactifReady = true\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @Auteur Rémi Angot\n * Référence 6G33\n*/\nexport default function ReconnaitreQuadrilatereParticulier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true\n  context.isHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeDeQuestions = shuffle([choice(['losange1', 'losange2']), choice(['rectangle1', 'rectangle2']), choice(['carre1', 'carre2', 'carre3'])])\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = ''\n      texteCorr = ''\n      let A, B, C, D, O, ABCD, codage, codage1, codage2, codage3, sAC, sBD, marquesDemiDiagonales, marquesDemiDiagonales1, marquesDemiDiagonales2, marquesCotes, tabrep, tabicone\n      switch (listeDeQuestions[i]) {\n        case 'losange1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\"\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          // codage = codageAngleDroit(C, O, B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'losange2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [1, 0, 0, 0, 0]\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, B)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales1 = codeSegments('|', 'blue', O, A, O, C)\n          marquesDemiDiagonales2 = codeSegments('|||', 'blue', O, B, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, codage, sAC, sBD, marquesDemiDiagonales1, marquesDemiDiagonales2) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'rectangle1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'rectangle2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          // codage1 = codageAngleDroit(A,B,C);\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'carre1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, D)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre3':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(A, B, C)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n      }\n      // if (this.modeQcm && !context.isAmc) {\n      //   if (texteCorr.lastIndexOf('\\n') > 0) {\n      //     texteCorr = texteCorr.substring(0, texteCorr.lastIndexOf('\\n'))\n      //   }\n      //   this.tableauSolutionsDuQcm[i] = tabicone\n      //   texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n      //   texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      // }\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Losange',\n          statut: false,\n          feedback: 'Tous les losanges ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n        },\n        {\n          texte: 'Rectangle',\n          statut: false,\n          feedback: 'Tous les rectangles ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n\n        },\n        {\n          texte: 'Carré',\n          statut: false,\n          feedback: 'Tous les carrés ont 4 angles droits, ce sont donc aussi des rectangles. Tous les carrés ont 4 côtés de même longueur, ce sont donc aussi des losanges.'\n\n        },\n        {\n          texte: 'Trapèze',\n          statut: false\n        },\n        {\n          texte: 'Parallélogramme',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: true,\n        lastChoice: 5\n      }\n      if (listeDeQuestions[i] === 'losange1' || listeDeQuestions[i] === 'losange2') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'rectangle1' || listeDeQuestions[i] === 'rectangle2') {\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'carre1' || listeDeQuestions[i] === 'carre2' || listeDeQuestions[i] === 'carre3') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[2].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n// function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n// }\n\n// Référence 6C23\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.',',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n\n\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (var prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n// Module regroupant les fonctions de gestions des erreurs.\n\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} erreur\n * @param {string} [erreur.message]\n * @param {string} [erreur.level]\n * @param {string} [erreur.titre]\n */\nexport function addFeedback (container, { message = 'Une erreur est survenue', level = 'erreur', titre = 'Erreur interne' } = {}) {\n  if (!types.includes(level)) {\n    console.error(Error(`type de message inconnu : ${level}`))\n    level = 'error'\n  }\n  const cssDiv = level === 'info' ? '' : level\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = level === 'error'\n    ? 'frown outline'\n    : (level === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  addText(div, message)\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        level: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} data\n * @param {string} data.id id du div conteneur à utiliser\n * @param {string} data.texte Le texte à afficher\n * @param {string} data.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  if (!id || !texte) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message: texte, level: type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}