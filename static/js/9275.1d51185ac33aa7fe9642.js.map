{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Construire_par_symetrie.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["Construire_par_Symetrie","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","sup","sup2","figure","nouvelleVersion","type_de_questions_disponibles","parseInt","Xmin","Xmax","Ymin","Ymax","sc","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","A","AA","cA","sA","B","C","CC","cC","sC","sCE","D","DD","cD","sD","sDE","E","EE","cE","sE","sED","sEC","inter","d","enonce","correction","g","carreaux","k","p1","p2","p1nom","objets_enonce","objets_correction","i","cpt","length","creerNomDePolygone","point","choice","droiteParPointEtPente","droiteVerticaleParPoint","pointSurDroite","isVisible","epaisseur","positionLabel","randint","symetrieAxiale","codageMediatrice","segment","droite","pointilles","push","tracePoint","labelPoint","numAlpha","Math","floor","min","x","ceil","max","y","rotation","codageMilieu","polygone","listePoints","nom","sommets","nommePolygone","pointIntersectionDD","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","seyes","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/9275.1d51185ac33aa7fe9642.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,creerNomDePolygone,numAlpha} from '../../modules/outils.js'\nimport {point,tracePoint,pointSurDroite,pointIntersectionDD,labelPoint,droite,droiteVerticaleParPoint,droiteParPointEtPente,codageMediatrice,codageMilieu,segment,polygone,nommePolygone,rotation,symetrieAxiale,grille,seyes,mathalea2d} from '../../modules/2d.js'\n\n/**\n * @Auteur Jean-Claude Lhote\n * Fonction générale pour les exercices de construction de symétriques (centrale/axiale et points/triangles)\n * références  6G24-1, 6G24-2, 5G10-1, 5G10-2, 5G11-1 et 5G11-2\n * Permet une sortie html/pdf sur petits carreaux/gros carreaux/papier blanc\n */\n\nexport default function Construire_par_Symetrie() {\n\t\"use strict\";\n\tExercice.call(this);\n\tthis.titre = \"Construire par Symétrie...\";\n\tthis.nbQuestions = 1;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\tthis.sup = 2;\n\tthis.sup2 = 1;\n\tthis.figure = false\n\tthis.nouvelleVersion = function () {\n\t\tlet type_de_questions_disponibles;\n\t\tif (this.sup == 3) \t  //Symétrie axiale ou centrale\n\t\t\tif (this.figure == false) type_de_questions_disponibles = [0, 1, 2]; // points\n\t\t\telse type_de_questions_disponibles = [3, 4, 5] // triangle\n\n\t\telse\n\t\t\tif (this.figure == false) type_de_questions_disponibles = [parseInt(this.sup)]; // Le choix 1 ou 2 : points\n\t\t\telse type_de_questions_disponibles = [parseInt(this.sup) + 3] //figures\n\n\t\tlet listeTypeDeQuestions = combinaisonListes(\n\t\t\ttype_de_questions_disponibles,\n\t\t\tthis.nbQuestions\n\t\t);\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tlet Xmin, Xmax, Ymin, Ymax, sc;\n\t\tif (this.sup2 == 2) sc = 0.8;\n\t\telse sc = 0.5;\n\n\t\tlet A, AA, cA, sA,\n\t\t\tB,\n\t\t\tC, CC, cC, sC, sCE,\n\t\t\tD, DD, cD, sD, sDE,\n\t\t\tE, EE, cE, sE, sED,\n\t\t\tsEC, inter,\n\t\t\td, enonce,\n\t\t\tcorrection,\n\t\t\tg,\n\t\t\tcarreaux,\n\t\t\tk,\n\t\t\tobjets_enonce = [],\n\t\t\tobjets_correction = [],\n\t\t\tp1, p2, p1nom;\n\t\tfor (\n\t\t\tlet i = 0, cpt = 0;\n\t\t\ti < this.nbQuestions && cpt < 50;\n\n\t\t) {\n\t\t\tobjets_enonce.length = 0\n\t\t\tobjets_correction.length = 0\n\t\t\tswitch (listeTypeDeQuestions[i]) {\n\t\t\t\tcase 0: // 3 symétries axiales simples de points (6ème)\n\t\t\t\t\tp1nom = creerNomDePolygone(5, \"PQ\")\n\t\t\t\t\tA = point(0, 0, `${p1nom[0]}`, 'above');\n\t\t\t\t\tk = choice([-1, 0, 1, 2])\n\n\t\t\t\t\tif (k < 2) d = droiteParPointEtPente(A, k);\n\t\t\t\t\telse d = droiteVerticaleParPoint(A)\n\t\t\t\t\tB = pointSurDroite(d, 6, `${p1nom[1]}`, 'above');\n\t\t\t\t\td.isVisible = true;\n\t\t\t\t\td.epaisseur = 1\n\t\t\t\t\tif (k == 2) {\n\t\t\t\t\t\tA.positionLabel = 'left'\n\t\t\t\t\t\tB.positionLabel = 'left'\n\t\t\t\t\t}\n\t\t\t\t\tC = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left');\n\t\t\t\t\tD = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right');\n\t\t\t\t\t//\t\t\tdB = droiteParPointEtPerpendiculaire(B, d);\n\t\t\t\t\tE = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, \"left\");\n\t\t\t\t\t//F = point(E.x+1,5-B.y,'F','above left');\n\t\t\t\t\tCC = symetrieAxiale(C, d, `${p1nom[2]}\\'`, 'below left')\n\t\t\t\t\tDD = symetrieAxiale(D, d, `${p1nom[3]}\\'`, 'above right')\n\t\t\t\t\tEE = symetrieAxiale(E, d, `${p1nom[4]}\\'`, 'left')\n\t\t\t\t\t//FF=symetrieAxiale(F,d,'F\\'','below left')\n\t\t\t\t\tcC = codageMediatrice(C, CC, 'red', '|')\n\t\t\t\t\tcD = codageMediatrice(D, DD, 'blue', 'X')\n\t\t\t\t\tcE = codageMediatrice(E, EE, 'green', 'O')\n\t\t\t\t\t//cF=codageMediatrice(F,FF,'purple','V')\n\t\t\t\t\tsC = segment(C, CC)\n\t\t\t\t\tsD = segment(D, DD)\n\t\t\t\t\tsE = segment(E, EE)\n\t\t\t\t\t//sF=segment(F,FF)\n\t\t\t\t\tsCE = droite(CC, EE, '', 'gray')\n\t\t\t\t\tsCE.pointilles = true\n\t\t\t\t\tsED = droite(EE, D, '', 'gray')\n\t\t\t\t\tsED.pointilles = true\n\t\t\t\t\tsDE = droite(DD, E, '', 'gray')\n\t\t\t\t\tsDE.pointilles = true\n\t\t\t\t\tsEC = droite(C, E, '', 'gray')\n\t\t\t\t\tsEC.pointilles = true\n\n\n\n\t\t\t\t\tobjets_correction.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n\t\t\t\t\tobjets_enonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d);\n\t\t\t\t\tenonce = numAlpha(0) + ` Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le point $${p1nom[2]}\\'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Construire le point $${p1nom[3]}\\'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(3) + ` Construire le point $${p1nom[4]}\\'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(5) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n\n\t\t\t\t\tcorrection = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1: // 3 symétries axiales de points\n\t\t\t\t\tp1nom = creerNomDePolygone(5)\n\t\t\t\t\tA = point(0, randint(-1, 1), `${p1nom[0]}`, 'above');\n\t\t\t\t\tB = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above');\n\t\t\t\t\td = droite(A, B);\n\t\t\t\t\td.isVisible = true;\n\t\t\t\t\td.epaisseur = 1\n\t\t\t\t\tC = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left');\n\t\t\t\t\tD = point(randint(10, 13), randint(-4, -3), `${p1nom[3]}`, 'below right');\n\t\t\t\t\t//\t\t\tdB = droiteParPointEtPerpendiculaire(B, d);\n\t\t\t\t\tE = point(randint(6, 8), randint(-8, -5), `${p1nom[4]}`, \"left\");\n\t\t\t\t\t//F = point(E.x+1,5-B.y,'F','above left');\n\t\t\t\t\tCC = symetrieAxiale(C, d, `${p1nom[2]}\\'`, 'below left')\n\t\t\t\t\tDD = symetrieAxiale(D, d, `${p1nom[3]}\\'`, 'above right')\n\t\t\t\t\tEE = symetrieAxiale(E, d, `${p1nom[4]}\\'`, 'left')\n\t\t\t\t\t//FF=symetrieAxiale(F,d,'F\\'','below left')\n\t\t\t\t\tcC = codageMediatrice(C, CC, 'red', '|')\n\t\t\t\t\tcD = codageMediatrice(D, DD, 'blue', 'X')\n\t\t\t\t\tcE = codageMediatrice(E, EE, 'green', 'O')\n\t\t\t\t\t//cF=codageMediatrice(F,FF,'purple','V')\n\t\t\t\t\tsC = segment(C, CC)\n\t\t\t\t\tsD = segment(D, DD)\n\t\t\t\t\tsE = segment(E, EE)\n\t\t\t\t\t//sF=segment(F,FF)\n\t\t\t\t\tsCE = segment(CC, EE, 'gray')\n\t\t\t\t\tsCE.pointilles = true\n\t\t\t\t\tsED = segment(EE, D, 'gray')\n\t\t\t\t\tsED.pointilles = true\n\t\t\t\t\tsDE = segment(DD, E, 'gray')\n\t\t\t\t\tsDE.pointilles = true\n\t\t\t\t\tsEC = segment(C, E, 'gray')\n\t\t\t\t\tsEC.pointilles = true\n\n\n\n\t\t\t\t\tobjets_correction.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n\t\t\t\t\tobjets_enonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d);\n\t\t\t\t\tenonce = numAlpha(0) + ` Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le point $${p1nom[2]}\\'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Construire le point $${p1nom[3]}\\'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(3) + ` Construire le point $${p1nom[4]}\\'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(5) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n\n\t\t\t\t\tcorrection = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // 3 symétries centrales de points\n\t\t\t\t\tp1nom = creerNomDePolygone(4)\n\t\t\t\t\tA = point(0, randint(-1, 4), `${p1nom[0]}`, 'left');\n\t\t\t\t\tB = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above');\n\t\t\t\t\tC = point(randint(2, 3), randint(-4, -2), `${p1nom[2]}`, 'left');\n\t\t\t\t\tD = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right');\n\t\t\t\t\tCC = rotation(C, B, 180, `${p1nom[2]}\\'`, 'right')\n\t\t\t\t\tDD = rotation(D, B, 180, `${p1nom[3]}\\'`, 'above left')\n\t\t\t\t\tAA = rotation(A, B, 180, `${p1nom[0]}\\'`, 'right')\n\t\t\t\t\tcC = codageMilieu(C, CC, 'red', '|', false)\n\t\t\t\t\tcD = codageMilieu(D, DD, 'blue', '||', false)\n\t\t\t\t\tcA = codageMilieu(A, AA, 'green', '|||', false)\n\t\t\t\t\tsC = segment(C, CC)\n\t\t\t\t\tsD = segment(D, DD)\n\t\t\t\t\tsA = segment(A, AA)\n\n\t\t\t\t\tobjets_correction.push(tracePoint(A, C, D, CC, DD, AA), labelPoint(A, B, C, D, CC, DD, AA), cC, cD, cA, sC, sD, sA)\n\t\t\t\t\tobjets_enonce.push(tracePoint(A, B, C, D), labelPoint(A, B, C, D));\n\t\t\t\t\tenonce = numAlpha(0) + ` Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le point $${p1nom[2]}\\'$ symétrique de $${p1nom[2]}$ par rapport au point $${p1nom[1]}$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Construire le point $${p1nom[3]}\\'$ symétrique de $${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n\t\t\t\t\tenonce += numAlpha(3) + ` Construire le point $${p1nom[0]}\\'$ symétrique de $${p1nom[0]}$ par rapport au point $${p1nom[1]}$.<br>`\n\t\t\t\t\tenonce += numAlpha(4) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) + 1)\n\t\t\t\t\tcorrection = ''\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // symétrie axiale simple d'un triangle\n\t\t\t\t\tp1nom = creerNomDePolygone(5, \"PQ\")\n\t\t\t\t\tA = point(0, 0, `${p1nom[0]}`, 'above');\n\t\t\t\t\tk = choice([-1, 0, 1, 2])\n\n\t\t\t\t\tif (k < 2) d = droiteParPointEtPente(A, k);\n\t\t\t\t\telse d = droiteVerticaleParPoint(A)\n\t\t\t\t\tB = pointSurDroite(d, 6, `${p1nom[1]}`, 'above');\n\t\t\t\t\td.isVisible = true;\n\t\t\t\t\td.epaisseur = 1\n\t\t\t\t\tC = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left');\n\t\t\t\t\tD = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right');\n\t\t\t\t\t//\t\t\tdB = droiteParPointEtPerpendiculaire(B, d);\n\t\t\t\t\tE = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, \"left\");\n\t\t\t\t\tp1 = polygone(C, D, E)\n\t\t\t\t\tp2 = symetrieAxiale(p1, d)\n\t\t\t\t\tp2.listePoints[0].nom = `${p1nom[2]}\\'`\n\t\t\t\t\tp2.listePoints[1].nom = `${p1nom[3]}\\'`\n\t\t\t\t\tp2.listePoints[2].nom = `${p1nom[4]}\\'`\n\t\t\t\t\t//CC=nommePolygone(p1)\n\t\t\t\t\t//DD=nommePolygone(p2)\n\t\t\t\t\tcC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n\t\t\t\t\tcD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n\t\t\t\t\tcE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n\t\t\t\t\tsC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n\t\t\t\t\tsD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n\t\t\t\t\tsE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\t\t\t\t\tsCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n\t\t\t\t\tsCE.pointilles = true\n\t\t\t\t\tsED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n\t\t\t\t\tsED.pointilles = true\n\t\t\t\t\tobjets_correction.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p1.sommets, p2, p2.sommets, sCE, sED)\n\t\t\t\t\tobjets_enonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1);\n\t\t\t\t\tenonce = numAlpha(0) + `Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le triangle  $${p1nom[2]}\\'${p1nom[3]}\\'${p1nom[4]}\\'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\t\t\t\t\tcorrection = ''\n\n\t\t\t\t\tbreak\n\t\t\t\tcase 4: // symetrie axiale d'un triangle\n\t\t\t\t\tp1nom = creerNomDePolygone(5)\n\n\n\t\t\t\t\tA = point(0, randint(-1, 1), `${p1nom[0]}`, 'above');\n\t\t\t\t\tB = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above');\n\t\t\t\t\td = droite(A, B);\n\t\t\t\t\td.isVisible = true;\n\t\t\t\t\td.epaisseur = 1\n\t\t\t\t\tC = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left');\n\t\t\t\t\tD = point(randint(10, 13), randint(-4, -2), `${p1nom[3]}`, 'below right');\n\t\t\t\t\tE = point(randint(6, 8), randint(-8, -6), `${p1nom[4]}`, \"left\");\n\t\t\t\t\tp1 = polygone(C, D, E)\n\t\t\t\t\tp2 = symetrieAxiale(p1, d)\n\t\t\t\t\tp2.listePoints[0].nom = `${p1nom[2]}\\'`\n\t\t\t\t\tp2.listePoints[1].nom = `${p1nom[3]}\\'`\n\t\t\t\t\tp2.listePoints[2].nom = `${p1nom[4]}\\'`\n\t\t\t\t\tCC = nommePolygone(p1)\n\t\t\t\t\tDD = nommePolygone(p2)\n\t\t\t\t\tcC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n\t\t\t\t\tcD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n\t\t\t\t\tcE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n\t\t\t\t\tsC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n\t\t\t\t\tsD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n\t\t\t\t\tsE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\t\t\t\t\tsCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n\t\t\t\t\tsCE.pointilles = true\n\t\t\t\t\tsED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n\t\t\t\t\tsED.pointilles = true\n\t\t\t\t\tinter = pointIntersectionDD(sCE, sED)\n\t\t\t\t\tobjets_correction.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p2, sCE, sED)\n\t\t\t\t\tobjets_enonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1);\n\t\t\t\t\tenonce = numAlpha(0) + `Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le triangle  $${p1nom[2]}\\'${p1nom[3]}\\'${p1nom[4]}\\'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\n\t\t\t\t\tcorrection = `Contrôler la figure en vérifiant que les côtés des deux triangles se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tp1nom = creerNomDePolygone(4)\n\t\t\t\t\tA = point(0, randint(-1, 4), `${p1nom[0]}`, 'left');\n\t\t\t\t\tB = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above');\n\t\t\t\t\tC = point(randint(2, 3), randint(-6, -4), `${p1nom[2]}`, 'left');\n\t\t\t\t\tD = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right');\n\t\t\t\t\tp1 = polygone(A, C, D)\n\t\t\t\t\tp2 = rotation(p1, B, 180)\n\t\t\t\t\tp2.listePoints[0].nom = `${p1nom[0]}\\'`\n\t\t\t\t\tp2.listePoints[1].nom = `${p1nom[2]}\\'`\n\t\t\t\t\tp2.listePoints[2].nom = `${p1nom[3]}\\'`\n\t\t\t\t\tCC = nommePolygone(p1)\n\t\t\t\t\tDD = nommePolygone(p2)\n\t\t\t\t\tcC = codageMilieu(p1.listePoints[0], p2.listePoints[0], 'red', '|', false)\n\t\t\t\t\tcD = codageMilieu(p1.listePoints[1], p2.listePoints[1], 'blue', 'X', false)\n\t\t\t\t\tcA = codageMilieu(p1.listePoints[2], p2.listePoints[2], 'green', 'O', false)\n\t\t\t\t\tsA = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n\t\t\t\t\tsC = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n\t\t\t\t\tsD = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\n\t\t\t\t\tobjets_correction.push(tracePoint(B), labelPoint(B), cC, cD, cA, sC, sD, sA, DD, CC, p1, p2)\n\t\t\t\t\tobjets_enonce.push(tracePoint(B), labelPoint(B), CC, p1);\n\t\t\t\t\tenonce = numAlpha(0) + `Reproduire la figure ci-dessous.<br>`\n\t\t\t\t\tenonce += numAlpha(1) + ` Construire le triangle  $${p1nom[0]}\\'${p1nom[2]}\\'${p1nom[3]}\\'$ symétrique de $${p1nom[0]}${p1nom[2]}${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n\t\t\t\t\tenonce += numAlpha(2) + ` Coder la figure.<br>`;\n\t\t\t\t\tXmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n\t\t\t\t\tXmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n\t\t\t\t\tYmin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n\t\t\t\t\tYmax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\t\t\t\t\tcorrection = ''\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlet params = {\n\t\t\t\txmin: Xmin,\n\t\t\t\tymin: Ymin,\n\t\t\t\txmax: Xmax,\n\t\t\t\tymax: Ymax,\n\t\t\t\tpixelsParCm: 20,\n\t\t\t\tscale: sc,\n\t\t\t}\n\t\t\tif (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, \"gray\", 0.7);\n\t\t\telse g = ''\n\t\t\tif (this.sup2 == 2) {\n\t\t\t\tk = 0.8;\n\t\t\t\tcarreaux = seyes(Xmin, Ymin, Xmax, Ymax);\n\t\t\t} else {\n\t\t\t\tk = 0.5;\n\t\t\t\tcarreaux = \"\";\n\t\t\t}\n\t\t\tobjets_enonce.push(g, carreaux)\n\t\t\tobjets_correction.push(g, carreaux)\n\t\t\tenonce += mathalea2d(params\n\t\t\t\t,\n\t\t\t\tobjets_enonce\n\t\t\t);\n\t\t\tcorrection += mathalea2d(\n\t\t\t\tparams,\n\t\t\t\tobjets_correction\n\t\t\t);\n\t\t\tif (this.listeQuestions.indexOf(enonce) == -1) {\n\t\t\t\t// Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(enonce + \"<br>\");\n\t\t\t\tthis.listeCorrections.push(correction + \"<br>\");\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\tthis.besoinFormulaireNumerique = ['Type de questions', 4, `0 : symétries axiales simples\\n 1 : Symétrie axiale\\n 2 : Symétrie centrale\\n 3 : Mélange`]\n\tthis.besoinFormulaire2Numerique = [\n\t\t\"Type de cahier\",\n\t\t3,\n\t\t`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`,\n\t];\n}\n\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}