{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","CriteresDeDivisibilite","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","qcmDisponible","modeQcm","nouvelleVersion","listeExercicesDisponibles","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","n","u","texte","texteCorr","sommeString","i","cpt","autoCorrection","enonce","propositions","statut","options","ordered","randint","texNombre","choice","toString","sommeDesChiffres","calcul","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","feedback","type","querySelectorAll","uicheck","classList","add","espace","context","undefined","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/4595.37ab556f1a29af45ab28.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, sommeDesChiffres, calcul, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\nexport const titre = 'Critères de divisibilité'\n\n/**\n * Un nombre est-il divisible par :\n *\n * * 2, 5, 10 ?\n * * 3, 9 ?\n * * 2, 3, 5, 9, 10 ?\n * * 2, 3, 5, 9, 10  et un autre nombre qui peut être 7, 13, 17, ou 19 ?\n * @Auteur Rémi Angot\n * 6N43\n */\nexport default function CriteresDeDivisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4 // Correspond au facteur commun\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.amcType = amcType\n  this.consigne = 'Répondre aux questions suivantes en justifiant.'\n  this.spacing = 2\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeExercicesDisponibles\n    if (this.sup === 1) {\n      listeExercicesDisponibles = [2, 5, 10]\n    }\n    if (this.sup === 2) {\n      listeExercicesDisponibles = [3, 9]\n    }\n    if (this.sup === 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10]\n    }\n    if (this.sup > 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10, 'autre']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      listeExercicesDisponibles,\n      this.nbQuestions\n    )\n    for (let i = 0, n, u, texte, texteCorr, sommeString, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) {\n        case 2:\n          u = randint(1, 2)\n          n = randint(10, 999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $2$ ?`\n          if (u % 2 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $2$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $2$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 3:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $3$ ?`\n          if (calcul(sommeString) % 3 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${calcul(sommeString) / 3\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $3$ donc $${texNombre(\n              n\n            )}$ est divisible par $3$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${(calcul(sommeString) - (calcul(sommeString) % 3)) / 3\n              }+${calcul(sommeString) % 3}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 9:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $9$ ?`\n          if (calcul(sommeString) % 9 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${calcul(sommeString) / 9\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $9$ donc $${texNombre(\n              n\n            )}$ est divisible par $9$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${(calcul(sommeString) - (calcul(sommeString) % 9)) / 9\n              }+${calcul(sommeString) % 9}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 5:\n          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]) // 1 fois sur 2 ça sera divisible par 5\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $5$ ?`\n          if (u % 5 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $5$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $5$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 10:\n          u = choice([randint(1, 9), 0]) // 1 fois sur 2 ça sera divisible par 10\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $10$ ?`\n          if (u === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $10$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $10$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 'autre':\n          n = randint(100, 999)\n          u = choice([7, 7, 7, 7, 13, 17, 19])\n          if (u === 7) {\n            n = choice(\n              [randint(10, 99) * 10 + 7],\n              7 * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par 7, un divisible par 7, un au hasard\n          } else {\n            n = choice(\n              [randint(10, 99) * 100 + u],\n              u * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par u, un divisible par u, un au hasard\n          }\n          texte = `$${texNombre(n)}$ est-il divisible par $${u}$ ?`\n          texteCorr = `On ne connait pas de critère de divisibilité par $${u}$, on calcule donc la division euclidienne de $${texNombre(\n            n\n          )}$ par $${u}$.<br>`\n          if (n % u === 0) {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${texNombre(\n              n / u\n            )}$<br>`\n            texteCorr += `Le reste de la division euclidienne est nul donc $${texNombre(\n              n\n            )}$ est divisible par $${u}$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${(n - (n % u)) / u}+${n % u\n              }$<br>`\n            texteCorr += `Le reste de la division euclidienne n'est pas nul donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $${u}$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Choix des questions', 4, '1 : Critères de divisibilité par 2, 5, 10\\n2 : Critères de divisibilité par 3,9\\n3 : Critères de divisibilité par 2, 3, 5, 9, 10\\n4 : Avec ou sans critère de divisibilité']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}