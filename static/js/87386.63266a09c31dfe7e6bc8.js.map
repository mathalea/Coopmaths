{"version":3,"file":"js/87386.63266a09c31dfe7e6bc8.js","mappings":"+RAGO,MAAMA,EAAQ,oFACRC,GAAkB,EAClBC,EAAiB,WACjBC,GAAW,EACXC,EAAU,SAEVC,EAAwB,aAUtB,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,YAAc,EACnBD,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAKI,KAAM,EACXJ,KAAKK,MAAO,EACZL,KAAKM,KAAO,EACZN,KAAKO,KAAO,EAEZP,KAAKQ,gBAAkB,WACrBR,KAAKM,KAAOG,OAAOT,KAAKM,MACxBN,KAAKO,KAAOE,OAAOT,KAAKO,MACxBP,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAKY,eAAiB,GACtB,IAAIC,EAAuB,GACvBb,KAAKK,KACPL,KAAKc,SAAW,yCAEhBd,KAAKc,SAAW,aAEdd,KAAKK,OAAQL,KAAKM,KAAO,GAE3BO,EADgB,IAAdb,KAAKM,MAKgB,IAAdN,KAAKM,MAJSS,EAAAA,EAAAA,KACrB,CAAC,GACDf,KAAKC,cAQgBc,EAAAA,EAAAA,KACrB,CAAC,EAAG,EAAG,EAAG,EAAG,GACbf,KAAKC,aAGT,IAAK,IAAWe,EAAOC,EAAWC,EAAGC,EAAGC,EAAOC,EAAOC,EAA7CC,EAAI,EAAkDC,EAAM,EAAGD,EAAIvB,KAAKC,aAAeuB,EAAM,IAAK,CACzG,MAAMC,EAAQ,CACZ,SACA,WACA,YACA,WACA,oBACA,qBACA,WACA,uBACA,wBACA,YACA,wBACA,0BAEEzB,KAAKI,KACPc,GAAIQ,EAAAA,EAAAA,KAAQ,EAAG,GACfP,GAAIO,EAAAA,EAAAA,KAAQ,EAAG,EAAG,CAACR,MAEnBA,EAAoB,IAAhBQ,EAAAA,EAAAA,KAAQ,EAAG,IAAUA,EAAAA,EAAAA,KAAQ,EAAG,GACpCP,EAAoB,IAAhBO,EAAAA,EAAAA,KAAQ,EAAG,IAAUA,EAAAA,EAAAA,KAAQ,EAAG,IAElC1B,KAAKK,KACPe,GAAQM,EAAAA,EAAAA,KAAQ,EAAG,IAEnBJ,GAAUI,EAAAA,EAAAA,KAAQ,EAAiB,IAAd1B,KAAKO,KAAa,EAAI,GAC3Ca,GAAQM,EAAAA,EAAAA,KAAQJ,EAAuB,IAAdtB,KAAKO,KAAa,EAAI,IAI/Cc,EAD8B,IAA5BR,EAAqBU,IACfG,EAAAA,EAAAA,KAAQN,EAAQ,EAAiB,IAAdpB,KAAKO,KAAa,EAAI,IAEzCa,EAAQ,EAEdpB,KAAKK,MACPW,EAAS,WAAUG,MAAMM,EAAMJ,SAAaH,KAAKO,EAAML,OACvDH,EAAa,IAAGE,aAAaM,EAAMJ,UAAcH,aAAaO,EAAML,WAC5DO,EAAAA,EAAAA,KAAUR,EAAIS,KAAKC,IAAI,GAAIR,UAAaM,EAAAA,EAAAA,KAAUT,EAAKU,KAAKC,IAAI,GAAIT,SAAaO,EAAAA,EAAAA,KACvFR,EAAIS,KAAKC,IAAI,GAAIR,GAASH,EAAIU,KAAKC,IAAI,GAAIT,SAG7CJ,EAAS,WAAUG,MAAMM,EAAMJ,SAAaH,KAAKO,EAAML,wBACvDJ,GAAUhB,KAAK8B,WAA8G,GAAhG,2EAA0EL,EAAMH,QAC7GL,EAAa,IAAGE,aAAaM,EAAMJ,UAAcH,aAAaO,EAAML,qBAEpEH,GAAc,KAAGU,EAAAA,EAAAA,KAAUR,EAAIS,KAAKC,IAAI,GAAIR,EAAQC,OAAaG,EAAMH,SAAcK,EAAAA,EAAAA,KAAUT,EAAKU,KAAKC,IAAI,GAAIT,EAAQE,OAAcG,EAAMH,QAAaK,EAAAA,EAAAA,KACxJR,EAAIS,KAAKC,IAAI,GAAIR,EAAQC,GAAWJ,EAAIU,KAAKC,IAAI,GAAIT,EAAQE,OAC1DG,EAAMH,SAG+B,IAAxCtB,KAAKU,eAAeqB,QAAQf,KAE1BhB,KAAKK,OACP2B,EAAAA,EAAAA,IAAWhC,KAAMuB,EAAGJ,EAAIS,KAAKC,IAAI,GAAIR,GAASH,EAAIU,KAAKC,IAAI,GAAIT,GAAQ,CAAEa,OAAQ,IACjFjB,IAASkB,EAAAA,EAAAA,IAAyBlC,KAAMuB,EAAG,uBAE3CS,EAAAA,EAAAA,IAAWhC,KAAMuB,EAAGJ,EAAIS,KAAKC,IAAI,GAAIR,EAAQC,GAAWJ,EAAIU,KAAKC,IAAI,GAAIT,EAAQE,GAAU,CAAEW,OAAQ,IACrGjB,IAASkB,EAAAA,EAAAA,IAAyBlC,KAAMuB,EAAG,mBAAoB,CAAEY,WAAa,YAAWV,EAAMH,WAEjGtB,KAAKU,eAAe0B,KAAKpB,GACzBhB,KAAKW,iBAAiByB,KAAKnB,GAC3BM,KAEFC,KAEFa,EAAAA,EAAAA,KAAwBrC,OAE1BA,KAAKsC,4BAA8B,CAAC,mDACpCtC,KAAKuC,6BAA+B,CAAC,iCACrCvC,KAAKwC,2BAA6B,CAAC,4BAA6B,EAAG,uFACnExC,KAAKyC,2BAA6B,CAAC,WAAY,EAAG,+E,gBC1HrC,SAAS1C,IAItBC,KAAKR,MAAQ,GACbQ,KAAK0C,YAAa,EAclB1C,KAAKc,SAAW,GAChBd,KAAK2C,mBAAqB,GAC1B3C,KAAK4C,aAAe,GACpB5C,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAK6C,QAAU,GACf7C,KAAK8C,kBAAoB,GACzB9C,KAAKY,eAAiB,GACtBZ,KAAK+C,sBAAwB,GAK7B/C,KAAKgD,QAAU,EACfhD,KAAKiD,YAAc,EAKnBjD,KAAKkD,mBAAoB,EACzBlD,KAAKmD,cAAgB,GACrBnD,KAAKoD,oBAAqB,EAC1BpD,KAAKqD,uBAAwB,EAC7BrD,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAKsD,kBAAmB,EACxBtD,KAAKuD,sBAAuB,EAC5BvD,KAAKwD,mBAAoB,EACzBxD,KAAKyD,uBAAwB,EAM7BzD,KAAK0D,QAAS,EACd1D,KAAK2D,gBAAkB,EAKvB3D,KAAKC,YAAc,GACnBD,KAAK4D,mBAAqB,EAC1B5D,KAAK6D,+BAAgC,EACrC7D,KAAK8D,qBAAsB,EAC3B9D,KAAK+D,oBAAqB,EAC1B/D,KAAKgE,MAAQ,GAEbhE,KAAK8B,YAAa,EAClB9B,KAAKiE,uBAAwB,EAE7BjE,KAAKkE,2BAA4B,EACjClE,KAAKmE,uBAAwB,EAC7BnE,KAAKsC,6BAA8B,EAEnCtC,KAAKoE,4BAA6B,EAClCpE,KAAKqE,wBAAyB,EAC9BrE,KAAKuC,8BAA+B,EAEpCvC,KAAKwC,4BAA6B,EAClCxC,KAAKsE,wBAAyB,EAC9BtE,KAAKuE,8BAA+B,EAEpCvE,KAAKyC,4BAA6B,EAClCzC,KAAKwE,wBAAyB,EAC9BxE,KAAKyE,8BAA+B,EAMpCzE,KAAK0E,cAAe,EASpB1E,KAAK2E,eAAiB,GAMtB3E,KAAKQ,gBAAkB,SAAUoE,KAQjC5E,KAAK6E,oBAAsB,SAAUtD,KAAMuD,GAC/B,IAANvD,IAASvB,KAAK2E,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIlF,KAAK2E,eAAe5C,QAAQgD,IAAmB,KAGjD/E,KAAK2E,eAAevC,KAAK2C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/6e/6N10-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, texNombre } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Écrire un nombre à partir de son nombre de dizaines, de centaines, de milliers...'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n\nexport const dateDeModifImportante = '07/11/2021'\n\n/**\n * Le nombre de dizaines, centaines et milliers étant donné, il faut écrire le nombre.\n *\n * 2 fois sur 5 il y a chevauchement entre les classes\n * @author Rémi Angot (complété par Eric Elter pour mettre des niveaux de difficulté)\n * 6N10-1\n * Relecture : Novembre 2021 par EE\n */\nexport default function ExerciceNumerationEntier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = false\n  this.sup2 = true\n  this.sup3 = 3\n  this.sup4 = 1\n\n  this.nouvelleVersion = function () {\n    this.sup3 = Number(this.sup3)\n    this.sup4 = Number(this.sup4)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let listeTypeDeQuestions = []\n    if (this.sup2) { // Vers les unités\n      this.consigne = 'Écrire en chiffres chacun des nombres.'\n    } else { // Vers les dizaines, centaines, milliers....\n      this.consigne = 'Compléter.'\n    }\n    if (this.sup2) { this.sup3 = 1 } // Si entiers à 1 chiffres choisis, chevauchement impossible.\n    if (this.sup3 === 1) { // Sans chevauchement\n      listeTypeDeQuestions = combinaisonListes(\n        [1],\n        this.nbQuestions\n      )\n    } else if (this.sup3 === 2) { // Avec chevauchement\n      listeTypeDeQuestions = combinaisonListes(\n        [1],\n        this.nbQuestions\n      )\n    } else {\n      listeTypeDeQuestions = combinaisonListes( // Avec et sans chevauchement (2 sur 5 sont chevauchees)\n        [1, 1, 1, 2, 2], // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n        this.nbQuestions\n      )\n    }\n    for (let i = 0, texte, texteCorr, a, b, rangA, rangB, rangRef, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const rangs = [\n        'unités',\n        'dizaines',\n        'centaines',\n        'milliers',\n        'dizaines de mille',\n        'centaines de mille',\n        'millions',\n        'dizaines de millions',\n        'centaines de millions',\n        'milliards',\n        'dizaines de milliards',\n        'centaines de milliards'\n      ]\n      if (this.sup) { // Un chiffre ou deux chiffres ?\n        a = randint(2, 9)\n        b = randint(2, 9, [a])\n      } else {\n        a = randint(2, 8) * 10 + randint(1, 5)\n        b = randint(2, 8) * 10 + randint(1, 5)\n      }\n      if (this.sup2) { // Vers les unités\n        rangA = randint(0, 2)\n      } else { // Vers les dizaines, centaines, milliers....\n        rangRef = randint(1, this.sup4 === 1 ? 4 : 9)\n        rangA = randint(rangRef, this.sup4 === 1 ? 4 : 9)\n      }\n\n      if (listeTypeDeQuestions[i] === 1) { // Sans chevauchement\n        rangB = randint(rangA + 2, this.sup4 === 1 ? 6 : 11)\n      } else { // Avec chevauchement\n        rangB = rangA + 1\n      }\n      if (this.sup2) {\n        texte = `$\\\\text{${b}  ${rangs[rangB]} et ${a} ${rangs[rangA]}}$`\n        texteCorr = `$${b} \\\\text{ ${rangs[rangB]} et }${a} \\\\text{ ${rangs[rangA]\n        } : } ${texNombre(b * Math.pow(10, rangB))} + ${texNombre(a * (Math.pow(10, rangA)))} =${texNombre(\n          b * Math.pow(10, rangB) + a * Math.pow(10, rangA)\n        )}$`\n      } else {\n        texte = `$\\\\text{${b}  ${rangs[rangB]} et ${a} ${rangs[rangA]} correspondent à }$`\n        texte += !this.interactif ? `$\\\\text{\\\\ldots\\\\ldots\\\\ldots\\\\ldots\\\\ldots\\\\ldots\\\\ldots\\\\ldots\\\\ldots ${rangs[rangRef]}.}$` : ''\n        texteCorr = `$${b} \\\\text{ ${rangs[rangB]} et }${a} \\\\text{ ${rangs[rangA]\n        } correspondent à`\n        texteCorr += ` ${texNombre(b * Math.pow(10, rangB - rangRef))} ${rangs[rangRef]} + ${texNombre(a * (Math.pow(10, rangA - rangRef)))} ${rangs[rangRef]} =${texNombre(\n          b * Math.pow(10, rangB - rangRef) + a * Math.pow(10, rangA - rangRef)\n        )} ${rangs[rangRef]}}$`\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (this.sup2) {\n          setReponse(this, i, b * Math.pow(10, rangB) + a * Math.pow(10, rangA), { digits: 0 })\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n        } else {\n          setReponse(this, i, b * Math.pow(10, rangB - rangRef) + a * Math.pow(10, rangA - rangRef), { digits: 0 })\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: `$\\\\text{ ${rangs[rangRef]}.}$` })\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Décomposition avec que des entiers à un chiffre']\n  this.besoinFormulaire2CaseACocher = ['Décomposition vers les unités']\n  this.besoinFormulaire3Numerique = ['Chevauchement des classes', 3, '1 : Sans chevauchement des classes\\n2 : Avec chevauchement des classes\\n3 : Mélange']\n  this.besoinFormulaire4Numerique = ['Variante', 3, '1 : Jusqu\\'aux millions\\n2 : Jusqu\\'aux centaines de milliards\\n3 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","dateDeModifImportante","ExerciceNumerationEntier","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","sup3","sup4","nouvelleVersion","Number","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","consigne","combinaisonListes","texte","texteCorr","a","b","rangA","rangB","rangRef","i","cpt","rangs","randint","texNombre","Math","pow","interactif","indexOf","setReponse","digits","ajouteChampTexteMathLive","texteApres","push","listeQuestionsToContenu","besoinFormulaireCaseACocher","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire4Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}