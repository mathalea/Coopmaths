{"version":3,"file":"js/75295.d6c1f096c87afea35aed.js","mappings":"2LAGO,MAAMA,EAAQ,2CAQN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,YAAc,EAEnBD,KAAKE,0BAA4B,CAAC,YAAa,EAAG,wGAClDF,KAAKG,IAAM,EACXH,KAAKI,6BAA+B,CAAC,yEACrCJ,KAAKK,MAAO,EACZL,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAElBP,KAAKQ,gBAAkB,SAAUC,GAI/B,IAAIC,EAA6BC,EAHjCX,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,GACxBb,KAAKG,IAAMW,SAASd,KAAKG,KAGvBO,EADe,IAAbV,KAAKG,IACuB,CAAC,cACT,IAAbH,KAAKG,IACgB,CAAC,eAED,CAAC,aAAc,eAE/C,MAAMY,GAAuBC,EAAAA,EAAAA,KAAkBN,EAA6BV,KAAKC,aAMjF,IAAIgB,EAAGC,EAAGC,EAAGC,EAAGC,EAAWC,EAAWC,EAAWC,EAAcC,EAAeC,EAC1EC,EAAcC,EAAkBC,EAAcC,EALhDnB,GADgB,IAAdX,KAAKK,MACgBW,EAAAA,EAAAA,KAAkB,EAAC,GAAM,GAAQhB,KAAKC,cAEtCe,EAAAA,EAAAA,KAAkB,EAAC,GAAOhB,KAAKC,aAIxD,IAAK,IAAW8B,EAAOC,EAAdC,EAAI,EAAqBC,EAAM,EAAGD,EAAIjC,KAAKC,aAAeiC,EAAM,IAAK,CAE5EP,EAAe,GACfC,EAAmB,GACnBX,GAAIkB,EAAAA,EAAAA,KAAM,EAAG,EAAG,IAAK,SACrBjB,GAAIkB,EAAAA,EAAAA,KAAenB,GAAGoB,EAAAA,EAAAA,KAAQ,GAAI,IAAM,IAAIA,EAAAA,EAAAA,KAAQ,EAAG,IAAK,KAC5Db,GAAec,EAAAA,EAAAA,KAAWrB,EAAGC,EAAG,GAAI,OAGlCC,GADEkB,EAAAA,EAAAA,KAAQ,EAAG,IAAM,IACfE,EAAAA,EAAAA,KAAoBf,GAAcgB,EAAAA,EAAAA,KAAOvB,GAAGoB,EAAAA,EAAAA,KAAQ,GAAI,IAAM,IAAK,IAAK,IAExEE,EAAAA,EAAAA,KAAoBf,GAAcgB,EAAAA,EAAAA,KAAOvB,GAAGoB,EAAAA,EAAAA,KAAQ,GAAI,IAAM,IAAK,IAAK,GAEzE1B,EAAqBsB,KAAId,GAAIgB,EAAAA,EAAAA,KAAMhB,EAAEsB,GAAIJ,EAAAA,EAAAA,MAAS,EAAG,EAAG,GAAK,GAAIlB,EAAEuB,GAAIL,EAAAA,EAAAA,MAAS,EAAG,EAAG,GAAK,GAAI,IAAK,UACzGhB,GAAYsB,EAAAA,EAAAA,KAAQ1B,EAAGC,GACvBI,GAAYqB,EAAAA,EAAAA,KAAQ1B,EAAGE,GACvBI,GAAYoB,EAAAA,EAAAA,KAAQzB,EAAGC,GACvBG,EAAUsB,WAAa,EACvBrB,EAAUqB,WAAa,EAEnBzB,EAAEuB,EAAIzB,EAAEyB,GACVjB,GAAgBoB,EAAAA,EAAAA,KAAuB5B,EAAGE,EAAG,QAAS,IACtDO,GAAgBmB,EAAAA,EAAAA,KAAuB1B,EAAGD,EAAG,QAAS,MAEtDO,GAAgBoB,EAAAA,EAAAA,KAAuB1B,EAAGF,EAAG,QAAS,IACtDS,GAAgBmB,EAAAA,EAAAA,KAAuB3B,EAAGC,EAAG,QAAS,KAGxB,eAA5BJ,EAAqBkB,IACvBN,EAAamB,KAAKxB,EAAWC,EAAWE,EAAeC,GACvDK,EAAQ,gFAERX,GAAI2B,EAAAA,EAAAA,KAAoBvB,GAAcwB,EAAAA,EAAAA,KAAO/B,EAAGC,IAC5CC,EAAEsB,EAAIxB,EAAEwB,EACVb,EAAiBkB,MAAKG,EAAAA,EAAAA,KAAiBhC,EAAGG,EAAGD,EAAG,MAAO,KAEvDS,EAAiBkB,MAAKG,EAAAA,EAAAA,KAAiB9B,EAAGC,EAAGH,EAAG,MAAO,KAEzDW,EAAiBkB,MAAKI,EAAAA,EAAAA,KAAajC,EAAGC,EAAG,MAAO,MAAM,GAAQM,GAC1Db,EAAqBsB,IACvBD,EAAa,eAAamB,EAAAA,EAAAA,MAAUC,EAAAA,EAAAA,MAAQC,EAAAA,EAAAA,KAASlC,EAAGF,GAAI,2DAC5De,GAAa,4FACbA,GAAa,qEAEbA,EAAa,UAAQmB,EAAAA,EAAAA,MAAUC,EAAAA,EAAAA,MAAQC,EAAAA,EAAAA,KAASlC,EAAGF,GAAI,yBAAwBkC,EAAAA,EAAAA,MAAUC,EAAAA,EAAAA,MAAQC,EAAAA,EAAAA,KAASlC,EAAGD,GAAI,2DACjHc,GAAa,0GACbA,GAAa,uEAEsB,gBAA5BjB,EAAqBkB,KAC9BL,EAAiBkB,KAAKxB,EAAWC,EAAWE,EAAeC,GAC3DK,EAAQ,0DAERX,GAAI2B,EAAAA,EAAAA,KAAoBvB,GAAcwB,EAAAA,EAAAA,KAAO/B,EAAGC,IAC5CC,EAAEsB,EAAIxB,EAAEwB,EACVd,EAAamB,MAAKG,EAAAA,EAAAA,KAAiBhC,EAAGG,EAAGD,EAAG,MAAO,KAEnDQ,EAAamB,MAAKG,EAAAA,EAAAA,KAAiB9B,EAAGC,EAAGH,EAAG,MAAO,KAErDU,EAAamB,MAAKI,EAAAA,EAAAA,KAAajC,EAAGC,EAAG,MAAO,MAAM,GAAQM,GACtDb,EAAqBsB,IACvBD,EAAY,6DACZA,GAAa,+GACbA,GAAa,+CAEbA,EAAY,mEACZA,GAAa,2HACbA,GAAa,qDAIjBL,EAAamB,MAAKQ,EAAAA,EAAAA,KAAWrC,EAAGC,EAAGC,IAAIoC,EAAAA,EAAAA,KAAWtC,EAAGC,EAAGC,GAAIE,GAC5DM,EAAa6B,SAAQC,IACnB7B,EAAiBkB,KAAKW,MAExB,MAAMC,EAAOC,KAAKC,IAAI3C,EAAEwB,EAAGvB,EAAEuB,EAAGtB,EAAEsB,GAAK,EACjCoB,EAAOF,KAAKG,IAAI7C,EAAEwB,EAAGvB,EAAEuB,EAAGtB,EAAEsB,GAAK,EAIvCZ,EAAe,CAAE6B,KAAMA,EAAMK,KAHhBJ,KAAKC,IAAI3C,EAAEyB,EAAGxB,EAAEwB,EAAGvB,EAAEuB,GAAK,EAGEmB,KAAMA,EAAMG,KAFxCL,KAAKG,IAAI7C,EAAEyB,EAAGxB,EAAEwB,EAAGvB,EAAEuB,GAAK,EAE0BuB,YAAa,GAAIC,MAAO,GAEzFpC,EAAmBD,EAEnBE,IAASoC,EAAAA,EAAAA,KAAWtC,EAAcF,GAElCK,IAAamC,EAAAA,EAAAA,KAAWrC,EAAkBF,IACE,IAAxC5B,KAAKY,eAAewD,QAAQrC,KAC9B/B,KAAKY,eAAekC,KAAKf,GACzB/B,KAAKa,iBAAiBiC,KAAKd,GAC3BC,KAEFC,KAEFmC,EAAAA,EAAAA,KAAwBrE,S,gBCjIb,SAASD,IAItBC,KAAKH,MAAQ,GACbG,KAAKsE,YAAa,EAclBtE,KAAKuE,SAAW,GAChBvE,KAAKwE,mBAAqB,GAC1BxE,KAAKyE,aAAe,GACpBzE,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,GACxBb,KAAK0E,QAAU,GACf1E,KAAK2E,kBAAoB,GACzB3E,KAAK4E,eAAiB,GACtB5E,KAAK6E,sBAAwB,GAK7B7E,KAAK8E,QAAU,EACf9E,KAAK+E,YAAc,EAKnB/E,KAAKgF,mBAAoB,EACzBhF,KAAKiF,cAAgB,GACrBjF,KAAKkF,oBAAqB,EAC1BlF,KAAKmF,uBAAwB,EAC7BnF,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAKoF,kBAAmB,EACxBpF,KAAKqF,sBAAuB,EAC5BrF,KAAKsF,mBAAoB,EACzBtF,KAAKuF,uBAAwB,EAM7BvF,KAAKwF,QAAS,EACdxF,KAAKyF,gBAAkB,GAKvBzF,KAAKC,YAAc,GACnBD,KAAK0F,+BAAgC,EACrC1F,KAAK2F,qBAAsB,EAC3B3F,KAAK4F,MAAQ,GAEb5F,KAAK6F,YAAa,EAClB7F,KAAK8F,uBAAwB,EAE7B9F,KAAKE,2BAA4B,EACjCF,KAAK+F,uBAAwB,EAC7B/F,KAAKgG,6BAA8B,EAEnChG,KAAKiG,4BAA6B,EAClCjG,KAAKkG,wBAAyB,EAC9BlG,KAAKI,8BAA+B,EAEpCJ,KAAKmG,4BAA6B,EAClCnG,KAAKoG,wBAAyB,EAC9BpG,KAAKqG,8BAA+B,EAMpCrG,KAAKsG,cAAe,EAMpBtG,KAAKuG,eAAiB,GAEtBvG,KAAKQ,gBAAkB,SAAUC,KAQjCT,KAAKwG,oBAAsB,SAAUvE,KAAMwE,GAC/B,IAANxE,IAASjC,KAAKuG,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI7G,KAAKuG,eAAenC,QAAQsC,IAAmB,KAGjD1G,KAAKuG,eAAezD,KAAK4D,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/5e/5G22-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, texNombre, arrondi } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, mathalea2d, segment, mediatrice, pointAdistance, pointIntersectionLC, cercle, longueur, afficheLongueurSegment, pointIntersectionDD, droite, codageAngleDroit, codageMilieu } from '../../modules/2d.js'\nexport const titre = 'Utiliser les propriétés de la médiatrice'\n\n/**\n * Utiliser les propriétés de la médiatrice\n * @author Guillaume Valmont\n * Référence 5G22-1\n * Date de publication 05/08/2021\n*/\nexport default function ProprietesMediatrice () {\n  Exercice.call(this)\n  this.nbQuestions = 4\n\n  this.besoinFormulaireNumerique = ['Situation', 3, '1 : C appartenant (ou pas) à la médiatrice\\n2 : C équidistant (ou pas) à A et B\\n3 : L\\'un ou l\\'autre']\n  this.sup = 3\n  this.besoinFormulaire2CaseACocher = ['Inclure des situations où le point C n\\'appartient pas à la médiatrice']\n  this.sup2 = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.sup = parseInt(this.sup)\n    let typesDeQuestionsDisponibles, listeSurLaMediatrice\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = ['appartient']\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = ['equidistant']\n    } else {\n      typesDeQuestionsDisponibles = ['appartient', 'equidistant']\n    }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2 === true) {\n      listeSurLaMediatrice = combinaisonListes([true, false], this.nbQuestions)\n    } else {\n      listeSurLaMediatrice = combinaisonListes([true], this.nbQuestions)\n    }\n    let A, B, C, D, segmentAB, segmentAC, segmentBC, mediatriceAB, affLongueurAC, affLongueurBC\n    let objetsEnonce, objetsCorrection, paramsEnonce, paramsCorrection\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Construction des objets\n      objetsEnonce = []\n      objetsCorrection = []\n      A = point(0, 0, 'A', 'below')\n      B = pointAdistance(A, randint(30, 60) / 10, randint(0, 45), 'B')\n      mediatriceAB = mediatrice(A, B, '', 'red')\n      // Le point C est au dessus ou en dessous une fois sur deux\n      if (randint(0, 99) > 50) {\n        C = pointIntersectionLC(mediatriceAB, cercle(A, randint(30, 60) / 10), 'C', 1)\n      } else {\n        C = pointIntersectionLC(mediatriceAB, cercle(A, randint(30, 60) / 10), 'C', 2)\n      }\n      if (!listeSurLaMediatrice[i]) C = point(C.x + randint(-5, 5, 0) / 10, C.y + randint(-5, 5, 0) / 10, 'C', 'above') // s'il ne doit pas être sur la médiatrice, on l'en éloigne\n      segmentAB = segment(A, B)\n      segmentAC = segment(A, C)\n      segmentBC = segment(B, C)\n      segmentAC.pointilles = 2\n      segmentBC.pointilles = 2\n      // Affiche les longueurs au-dessous ou en dessous selon si C est au-dessus ou en dessous de A\n      if (C.y > A.y) {\n        affLongueurAC = afficheLongueurSegment(A, C, 'black', 0.5)\n        affLongueurBC = afficheLongueurSegment(C, B, 'black', 0.5)\n      } else {\n        affLongueurAC = afficheLongueurSegment(C, A, 'black', 0.5)\n        affLongueurBC = afficheLongueurSegment(B, C, 'black', 0.5)\n      }\n      // Construction des énoncés et des corrections\n      if (listeTypeDeQuestions[i] === 'appartient') {\n        objetsEnonce.push(segmentAC, segmentBC, affLongueurAC, affLongueurBC) // On affiche les longueurs dans l'énoncé\n        texte = 'Le point $C$ appartient-il à la médiatrice du segment [$AB$] ? Justifier.<br>'\n        // On construit et code la médiatrice puis on la push dans la correction\n        D = pointIntersectionDD(mediatriceAB, droite(A, B))\n        if (C.x > A.x) {\n          objetsCorrection.push(codageAngleDroit(A, D, C, 'red', 0.4))\n        } else {\n          objetsCorrection.push(codageAngleDroit(C, D, A, 'red', 0.4))\n        }\n        objetsCorrection.push(codageMilieu(A, B, 'red', '||', false), mediatriceAB)\n        if (listeSurLaMediatrice[i]) { // S'il est sur la médiatrice\n          texteCorr = `$CA = CB = ${texNombre(arrondi(longueur(C, A), 1))}$ donc le point $C$ est équidistant à $A$ et $B$.<br>`\n          texteCorr += 'Comme un point équidistant à $A$ et $B$ appartient à la médiatrice du segment [$AB$],<br>'\n          texteCorr += 'alors, le point $C$ appartient à la médiatrice du segment [$AB$]'\n        } else { // Si le point C doit ne pas être sur la médiatrice,\n          texteCorr = `$CA = ${texNombre(arrondi(longueur(C, A), 1))}$ alors que $CB = ${texNombre(arrondi(longueur(C, B), 1))}$ donc le point C n'est pas équidistant à A et B.<br>`\n          texteCorr += 'Comme un point qui n\\'est pas équidistant à A et B n\\'appartient pas à la médiatrice du segment [AB],<br>'\n          texteCorr += 'alors, le point C n\\'appartient pas à la médiatrice du segment [AB]'\n        }\n      } else if (listeTypeDeQuestions[i] === 'equidistant') {\n        objetsCorrection.push(segmentAC, segmentBC, affLongueurAC, affLongueurBC) // On affiche les longueurs dans la correction\n        texte = 'Le point C est-il équidistant à A et B ? Justifier.<br>'\n        // On construit et code la médiatrice puis on la push dans l'énoncé\n        D = pointIntersectionDD(mediatriceAB, droite(A, B))\n        if (C.x > A.x) {\n          objetsEnonce.push(codageAngleDroit(A, D, C, 'red', 0.4))\n        } else {\n          objetsEnonce.push(codageAngleDroit(C, D, A, 'red', 0.4))\n        }\n        objetsEnonce.push(codageMilieu(A, B, 'red', '||', false), mediatriceAB)\n        if (listeSurLaMediatrice[i]) { // S'il est sur la médiatrice\n          texteCorr = 'Le point C appartient à la médiatrice du segment [AB].<br>'\n          texteCorr += 'Comme un point qui appartient à la médiatrice d\\'un segment est équidistant aux extrémités de ce segment,<br>'\n          texteCorr += 'alors le point C est équidistant à A et B.'\n        } else { // Si le point C doit ne pas être sur la médiatrice,\n          texteCorr = 'Le point C n\\'appartient pas à la médiatrice du segment [AB].<br>'\n          texteCorr += 'Comme un point qui n\\'appartient pas à la médiatrice d\\'un segment n\\'est pas équidistant aux extrémités de ce segment,<br>'\n          texteCorr += 'alors le point C n\\'est pas équidistant à A et B.'\n        }\n      }\n      // On push les objets\n      objetsEnonce.push(tracePoint(A, B, C), labelPoint(A, B, C), segmentAB)\n      objetsEnonce.forEach(obj => {\n        objetsCorrection.push(obj)\n      })\n      const xmin = Math.min(A.x, B.x, C.x) - 2\n      const xmax = Math.max(A.x, B.x, C.x) + 2\n      const ymin = Math.min(A.y, B.y, C.y) - 2\n      const ymax = Math.max(A.y, B.y, C.y) + 2\n      // paramètres de la fenêtre Mathalea2d pour l'énoncé normal\n      paramsEnonce = { xmin: xmin, ymin: ymin, xmax: xmax, ymax: ymax, pixelsParCm: 20, scale: 1 }\n      // paramètres de la fenêtre Mathalea2d pour la correction\n      paramsCorrection = paramsEnonce\n      // On ajoute au texte de l'énoncé, la figure à main levée et la figure de l'enoncé.\n      texte += mathalea2d(paramsEnonce, objetsEnonce)\n      // On ajoute au texte de la correction, la figure de la correction\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ProprietesMediatrice","Exercice","this","nbQuestions","besoinFormulaireNumerique","sup","besoinFormulaire2CaseACocher","sup2","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","typesDeQuestionsDisponibles","listeSurLaMediatrice","listeQuestions","listeCorrections","parseInt","listeTypeDeQuestions","combinaisonListes","A","B","C","D","segmentAB","segmentAC","segmentBC","mediatriceAB","affLongueurAC","affLongueurBC","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","texte","texteCorr","i","cpt","point","pointAdistance","randint","mediatrice","pointIntersectionLC","cercle","x","y","segment","pointilles","afficheLongueurSegment","push","pointIntersectionDD","droite","codageAngleDroit","codageMilieu","texNombre","arrondi","longueur","tracePoint","labelPoint","forEach","obj","xmin","Math","min","xmax","max","ymin","ymax","pixelsParCm","scale","mathalea2d","indexOf","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}