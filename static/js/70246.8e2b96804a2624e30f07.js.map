{"version":3,"file":"js/70246.8e2b96804a2624e30f07.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3L11-5.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, shuffle, combinaisonListesSansChangerOrdre, texNombre, texteGras, warnMessage } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Calcul mental et calcul littéral'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * * Calcul mental autour des identités remarquables\n * * numéro de l'exo ex : 3L11-5\n * * publié le  14/11/2020\n * * décliné en 2N40-6 => 07/10/2021\n * * décliné en can2C04 => 08/10/2021\n * * décliné en can2C05 => 10/10/2021\n * @author Sébastien Lozano\n */\nexport default function identitesCalculs () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false // pour avoir la correction et l'enoncé en même temps\n  this.can = false // pour décliner en version CAN\n  this.canVersion = '' // Pour distinguer les déclinaisons\n  // 'v1' Pour une version simple type 29² 31² ou 29x31, seulement 1 d'écart par rapport à la dizaine ou à la centaine\n  // 'v2' Pour une version type (30-2)² (30+2)² ou (30-2)x(30+2), écart par rapport à la dizaine ou à la centaine de 1 à 4\n  this.sup = 1\n  if (this.debug) {\n    this.nbQuestions = 3\n  } else {\n    this.nbQuestions = 3\n  };\n\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = 'Faire les calculs suivants sans calculatrice. Utiliser la double distributivité ou les identités remarquables.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 1 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 1 : this.spacingCorr = 1\n\n  this.listePackages = 'bclogo'\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    // une fonction pour gérer un \\hfill dans la sortie LaTeX\n    function myhfill () {\n      if (context.isHtml) {\n        return '<br><br>'\n      } else {\n        return '\\\\hfill'\n      }\n    };\n    switch (Number(this.sup)) {\n      case 1:\n        typesDeQuestionsDisponibles = [0, 0, 0] // shuffle([choice([1,3]),choice([2,3]),0]);\n        this.introduction = warnMessage('$(a+b)^2=a^2+2ab+b^2$', 'nombres', 'Coup de pouce')\n        break\n      case 2:\n        typesDeQuestionsDisponibles = [1, 1, 1] // shuffle([choice([1,3]),choice([2,3]),0]);\n        this.introduction = warnMessage('$(a-b)^2 = a^2-2ab+b^2$', 'nombres', 'Coup de pouce')\n        break\n      case 3:\n        typesDeQuestionsDisponibles = [2, 2, 2] // shuffle([choice([1,3]),choice([2,3]),0]);\n        this.introduction = warnMessage('$(a+b)(a-b)=a^2-b^2$', 'nombres', 'Coup de pouce')\n        break\n      case 4:\n        typesDeQuestionsDisponibles = shuffle([0, 1, 2]) // shuffle([choice([1,3]),choice([2,3]),0]);\n        this.introduction = warnMessage(`$(a+b)^2 = a^2 +2ab + b^2$ ${myhfill()} $(a-b)^2 = a^2-2ab+b^2$ ${myhfill()} $(a+b)(a-b)=a^2-b^2$`, 'nombres', 'Coup de pouce')\n        break\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour gérer l'affichage sous forme de carré\n      // a et b  sont les facteurs du produit, s'ils sont égaux on affiche sous forme de carré\n      function ifIsCarreAfficheCarre (a, b, canV2 = false) {\n        if (!canV2) {\n          if (a === b) {\n            return `${a}^2`\n          } else {\n            return `${a}\\\\times ${b}`\n          }\n        } else {\n          if (a === b) {\n            return `(${a})^2`\n          } else {\n            return `(${a})\\\\times (${b})`\n          }\n        }\n      }\n\n      // une fonction pour afficher le double terme rectangle ou pas\n      function ifIsCarreAfficheDblProd (bool, dblTermeRect) {\n        if (bool) {\n          return dblTermeRect\n        } else {\n          return ''\n        }\n      };\n\n      const a = randint(2, 9)\n      let bSomme, bDifference, bSomDif\n      if (!this.can) {\n        bSomme = randint(1, 4)\n        bDifference = randint(1, 4)\n        bSomDif = randint(1, 9)\n      } else {\n        switch (this.canVersion) {\n          case 'v1' :\n            bSomme = 1\n            bDifference = 1\n            bSomDif = 1\n            break\n          case 'v2' :\n            bSomme = randint(1, 4)\n            bDifference = randint(1, 4)\n            bSomDif = randint(1, 9)\n            break\n        }\n      }\n      const coeff = choice([10, 100])\n      const coeffSomDif = 100\n      const signesSomDif = choice([[{ str: '-', nb: -1 }, { str: '+', nb: 1 }], [{ str: '+', nb: 1 }, { str: '-', nb: -1 }]])\n      const lettres = choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      const situations = [\n        {\n          lettre: lettres,\n          a: a,\n          b: bSomme,\n          coeff: coeff,\n          a_coeff: a * coeff,\n          operations: [{ str: '+', nb: 1 }, { str: '+', nb: 1 }],\n          facteurs: [{ str: `${texNombre(a * coeff)}+${bSomme}`, nb: texNombre(a * coeff + bSomme) }, { str: `${texNombre(a * coeff)}+${bSomme}`, nb: texNombre(a * coeff + bSomme) }],\n          carre_de_a_coeff: texNombre(coeff * coeff * a * a),\n          // carre_de_coeff:coeff*coeff,\n          carre_de_b: texNombre(bSomme * bSomme),\n          termes_rectangles: [texNombre(coeff * a * bSomme), texNombre(coeff * a * bSomme)],\n          somme_terme_rect: texNombre(2 * coeff * a * bSomme),\n          signes_dbl_dist: ['+', '+', '+'],\n          carre: true,\n          resultat: texNombre(a * a * coeff * coeff + bSomme * bSomme + 2 * a * coeff * bSomme),\n          resultatNumerique: a * a * coeff * coeff + bSomme * bSomme + 2 * a * coeff * bSomme\n        },\n        {\n          lettre: lettres,\n          a: a,\n          b: bDifference,\n          coeff: coeff,\n          a_coeff: a * coeff,\n          operations: [{ str: '-', nb: -1 }, { str: '-', nb: -1 }],\n          facteurs: [{ str: `${texNombre(a * coeff)}-${bDifference}`, nb: texNombre(a * coeff - bDifference) }, { str: `${texNombre(a * coeff)}-${bDifference}`, nb: texNombre(a * coeff - bDifference) }],\n          carre_de_a_coeff: texNombre(coeff * coeff * a * a),\n          // carre_de_coeff:coeff*coeff,\n          carre_de_b: texNombre(bDifference * bDifference),\n          termes_rectangles: [texNombre(coeff * a * bDifference), texNombre(coeff * a * bDifference)],\n          somme_terme_rect: texNombre(2 * coeff * a * bDifference),\n          signes_dbl_dist: ['+', '-', '-'],\n          carre: true,\n          resultat: texNombre(a * a * coeff * coeff + bDifference * bDifference - 2 * a * coeff * bDifference),\n          resultatNumerique: a * a * coeff * coeff + bDifference * bDifference - 2 * a * coeff * bDifference\n        },\n        {\n          lettre: lettres,\n          a: a,\n          b: bSomDif,\n          coeff: coeffSomDif,\n          a_coeff: a * coeffSomDif,\n          operations: signesSomDif,\n          facteurs: [{ str: `${texNombre(a * coeffSomDif)} ${signesSomDif[0].str} ${bSomDif}`, nb: texNombre(a * coeffSomDif + signesSomDif[0].nb * bSomDif) }, { str: `${texNombre(a * coeffSomDif)} ${signesSomDif[1].str} ${bSomDif}`, nb: texNombre(a * coeffSomDif + signesSomDif[1].nb * bSomDif) }],\n          carre_de_a_coeff: texNombre(coeffSomDif * coeffSomDif * a * a),\n          // carre_de_coeff:coeff*coeff,\n          carre_de_b: texNombre(bSomDif * bSomDif),\n          termes_rectangles: [texNombre(coeffSomDif * a * bSomDif), texNombre(coeffSomDif * a * bSomDif)],\n          somme_terme_rect: 0,\n          signes_dbl_dist: ['-', '+', '-'],\n          carre: false,\n          resultat: texNombre(a * a * coeffSomDif * coeffSomDif - bSomDif * bSomDif),\n          resultatNumerique: a * a * coeffSomDif * coeffSomDif - bSomDif * bSomDif\n        }\n      ]\n\n      const enonces = []\n      for (let k = 0; k < situations.length; k++) {\n        enonces.push({\n          enonce: `\n                     $${situations[k].lettre}=${ifIsCarreAfficheCarre(situations[k].facteurs[0].nb, situations[k].facteurs[1].nb)}$\n                    `,\n          question: '',\n          correction1: `\n                        ${texteGras('Avec la double distributivité')}<br>\n                        $${situations[k].lettre} = ${ifIsCarreAfficheCarre(situations[k].facteurs[0].nb, situations[k].facteurs[1].nb)}$<br>\n                        $${situations[k].lettre} = (${situations[k].facteurs[0].str})\\\\times (${situations[k].facteurs[1].str})$<br>\n                        $${situations[k].lettre} = ${situations[k].a_coeff}^2 ${situations[k].signes_dbl_dist[1]} ${situations[k].a_coeff}\\\\times ${situations[k].b} ${situations[k].signes_dbl_dist[2]} ${situations[k].b}\\\\times ${situations[k].a_coeff} ${situations[k].signes_dbl_dist[0]} ${situations[k].b}^2$<br>\n                        $${situations[k].lettre} = ${situations[k].carre_de_a_coeff} ${situations[k].signes_dbl_dist[1]} ${situations[k].termes_rectangles[0]} ${situations[k].signes_dbl_dist[2]} ${situations[k].termes_rectangles[1]}   ${situations[k].signes_dbl_dist[0]} ${situations[k].carre_de_b}$<br>\n                        $${situations[k].lettre} = ${situations[k].carre_de_a_coeff} ${ifIsCarreAfficheDblProd(situations[k].carre, `${situations[k].signes_dbl_dist[1]} ${situations[k].somme_terme_rect}`)} ${situations[k].signes_dbl_dist[0]} ${situations[k].carre_de_b}$<br>\n                        $${situations[k].lettre} = ${situations[k].resultat}$\n                    `,\n          correction2: `\n                    ${texteGras('Avec une identité')}<br>\n                    $${situations[k].lettre} = ${ifIsCarreAfficheCarre(situations[k].facteurs[0].nb, situations[k].facteurs[1].nb)}$<br>\n                    $${situations[k].lettre} = ${ifIsCarreAfficheCarre(`(${situations[k].facteurs[0].str})`, `(${situations[k].facteurs[1].str})`)} $<br>\n                    $${situations[k].lettre} = ${situations[k].a_coeff}^2 ${ifIsCarreAfficheDblProd(situations[k].carre, `${situations[k].signes_dbl_dist[1]} 2\\\\times ${situations[k].a_coeff} \\\\times ${situations[k].b}`)} ${situations[k].signes_dbl_dist[0]}  ${situations[k].b}^2$<br>\n                    $${situations[k].lettre} = ${situations[k].carre_de_a_coeff} ${ifIsCarreAfficheDblProd(situations[k].carre, `${situations[k].signes_dbl_dist[1]} 2\\\\times ${situations[k].termes_rectangles[0]}`)} ${situations[k].signes_dbl_dist[0]}  ${situations[k].carre_de_b}$<br>\n                    $${situations[k].lettre} = ${situations[k].carre_de_a_coeff} ${ifIsCarreAfficheDblProd(situations[k].carre, `${situations[k].signes_dbl_dist[1]} ${situations[k].somme_terme_rect}`)} ${situations[k].signes_dbl_dist[0]} ${situations[k].carre_de_b}$<br>\n                    $${situations[k].lettre} = ${situations[k].resultat}$            \n                `,\n          enonceCanV1: `$${ifIsCarreAfficheCarre(situations[k].facteurs[0].nb, situations[k].facteurs[1].nb)}=$`,\n          enonceCanV2: `$${ifIsCarreAfficheCarre(situations[k].facteurs[0].str, situations[k].facteurs[1].str, true)}=$`,\n          resultatCan: `${situations[k].resultatNumerique}`\n\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0: // carré d'une somme\n          if (!this.can) {\n            texte = `${enonces[0].enonce}`\n            if (this.debug) {\n              texte += '<br>'\n              texte += `<br> =====CORRECTION======<br>${enonces[0].correction1}<br>${enonces[0].correction2}`\n              texteCorr = ''\n            } else {\n              if (context.isHtml) {\n                texteCorr = `${enonces[0].correction1}<br><br>${enonces[0].correction2}`\n              } else {\n                texteCorr = 'Détaillons deux méthodes : <br><br>'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[0].correction1\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '\\\\hfill \\\\vrule \\\\hfill'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[0].correction2\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '<br>'\n              };\n            };\n            setReponse(this, i, situations[0].resultatNumerique)\n          } else {\n            switch (this.canVersion) {\n              case 'v1' :\n                this.question = `${enonces[0].enonceCanV1}`\n                this.correction = `${enonces[0].correction1} <br><br> ${enonces[0].correction2}`\n                this.reponse = `${enonces[0].resultatCan}`\n                break\n              case 'v2' :\n                this.question = `${enonces[0].enonceCanV2}`\n                this.correction = `${enonces[0].correction1} <br><br> ${enonces[0].correction2}`\n                this.reponse = `${enonces[0].resultatCan}`\n                break\n            }\n          }\n          break\n        case 1: // carré d'une différence\n          if (!this.can) {\n            texte = `${enonces[1].enonce}`\n            if (this.debug) {\n              texte += '<br>'\n              texte += `<br> =====CORRECTION======<br>${enonces[1].correction1}<br>${enonces[1].correction2}`\n              texteCorr = ''\n            } else {\n              if (context.isHtml) {\n                texteCorr = `${enonces[1].correction1}<br><br>${enonces[1].correction2}`\n              } else {\n                texteCorr = 'Détaillons deux méthodes : <br><br>'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[1].correction1\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '\\\\hfill \\\\vrule \\\\hfill'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[1].correction2\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '<br>'\n              };\n            };\n            setReponse(this, i, situations[1].resultatNumerique)\n          } else {\n            switch (this.canVersion) {\n              case 'v1' :\n                this.question = `${enonces[1].enonceCanV1}`\n                this.correction = `${enonces[1].correction1} <br><br> ${enonces[1].correction2}`\n                this.reponse = `${enonces[1].resultatCan}`\n                break\n              case 'v2' :\n                this.question = `${enonces[1].enonceCanV2}`\n                this.correction = `${enonces[1].correction1} <br><br> ${enonces[1].correction2}`\n                this.reponse = `${enonces[1].resultatCan}`\n                break\n            }\n          }\n          break\n        case 2: // Produit somme différence\n          if (!this.can) {\n            texte = `${enonces[2].enonce}`\n            if (this.debug) {\n              texte += '<br>'\n              texte += `<br> =====CORRECTION======<br>${enonces[2].correction1}<br>${enonces[2].correction2}`\n              texteCorr = ''\n            } else {\n              if (context.isHtml) {\n                texteCorr = `${enonces[2].correction1}<br><br>${enonces[2].correction2}`\n              } else {\n                texteCorr = 'Détaillons deux méthodes : <br><br>'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[2].correction1\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '\\\\hfill \\\\vrule \\\\hfill'\n                texteCorr += '\\\\begin{minipage}{8cm}'\n                texteCorr += enonces[2].correction2\n                texteCorr += '\\\\end{minipage}'\n                texteCorr += '<br>'\n              };\n            };\n            setReponse(this, i, situations[2].resultatNumerique)\n          } else {\n            switch (this.canVersion) {\n              case 'v1' :\n                this.question = `${enonces[2].enonceCanV1}`\n                this.correction = `${enonces[2].correction1} <br><br> ${enonces[2].correction2}`\n                this.reponse = `${enonces[2].resultatCan}`\n                break\n              case 'v2' :\n                this.question = `${enonces[2].enonceCanV2}`\n                this.correction = `${enonces[2].correction1} <br><br> ${enonces[2].correction2}`\n                this.reponse = `${enonces[2].resultatCan}`\n                break\n            }\n          }\n          break\n      };\n      if (!this.can) {\n        texte += ajouteChampTexteMathLive(this, i)\n      } else {\n        // comment\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        let mybool = false\n        this.listeQuestions.forEach(elt => {\n          if (texte.split('$')[1].substr(2).indexOf(elt.split('$')[1].substr(2)) !== -1) {\n            mybool = true\n          }\n        })\n        if (!mybool) {\n          this.listeQuestions.push(texte)\n          this.listeCorrections.push(texteCorr)\n          i++\n        }\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 4, \"1 : Carré d'une somme\\n2 : Carré d'une différence\\n3 : Produit de la somme et de la différence\\n4 : Mélange\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","identitesCalculs","typesDeQuestionsDisponibles","Exercice","this","debug","can","canVersion","sup","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","listePackages","nouvelleVersion","myhfill","Number","introduction","warnMessage","shuffle","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","ifIsCarreAfficheCarre","a","b","canV2","ifIsCarreAfficheDblProd","bool","dblTermeRect","randint","bSomme","bDifference","bSomDif","coeff","choice","coeffSomDif","signesSomDif","str","nb","lettres","situations","lettre","a_coeff","operations","facteurs","texNombre","carre_de_a_coeff","carre_de_b","termes_rectangles","somme_terme_rect","signes_dbl_dist","carre","resultat","resultatNumerique","enonces","k","length","push","enonce","question","correction1","texteGras","correction2","enonceCanV1","enonceCanV2","resultatCan","correction","reponse","setReponse","ajouteChampTexteMathLive","indexOf","mybool","forEach","elt","split","substr","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}