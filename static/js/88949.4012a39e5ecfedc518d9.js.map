{"version":3,"file":"js/88949.4012a39e5ecfedc518d9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G25-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { arrondi, choice, combinaisonListes, listeQuestionsToContenu, randint, stringNombre, texteEnCouleur } from '../../modules/outils.js'\nimport { centreGraviteTriangle, droite, mathalea2d, point, polygone, rotation, symetrieAnimee, symetrieAxiale, texteParPointEchelle, translation, vecteur } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Utiliser des symétries axiales en pavage triangulaire'\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const amcReady = true\nexport const amcType = 'qcmMono'\n\n/**\n* Relecture : Novembre 2021 par EE\n*/\n\nexport default function SymetrieAxialePavageTriangulaire () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = 'Symétrie axiale dans un pavage de triangles équilatéraux'\n  this.nbQuestions = 1 // Ici le nombre de questions (une seule pour cet exercice non modifiable)\n  this.nbQuestionsModifiable = false // désactive le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n  context.fenetreMathalea2d = [0, -0.1, 15, 10]\n  this.sup = 1\n  this.sup2 = 1\n  this.amcReady = amcReady\n  this.interactifReady = interactifReady\n  this.amcType = amcType\n  this.interactifType = interactifType\n\n  // on Choisit trois axes parmi les possibilités prédéfinies... 6 types d'axes laissant le pavage invariant\n  // un axe horizontal passe par les sommets 0 de deux triangles d'indices 2n et 2n+2 (sauf si 2n%14=12)\n  // un axe vertical passe par les centres de gravités de deux triangles d'indice i et i+13 (sauf si i%14=0)\n  // un axe parallèle à [AC] passe par les sommets 0 de deux triangles d'indices 2n et 2n+14\n  // un axe parallèle à [BC] passe par les sommets 0 de deux triangles d'indices 2n et 2n+12 (sauf si 2n%14=0)\n  // un axe perpendiculaire à [BC] passe par les centres de gravité de deux triangles d'indice 2n et 2n+1\n  // un axe perpendiculaire à [AC] passe par les centres de gravité de deux triangles d'indice 2n+1 et 2n+2 (sauf si (2n+1)%14=13)\n\n  const axes = [ // contient des couples de numéros dont seront tirés les deux points servant à définir l'axe\n    [[32, 34], [46, 48], [60, 62], [74, 76]], // axes horizontaux\n    [[46, 59], [47, 60], [48, 61], [49, 62], [50, 63], [51, 64]], // axes verticaux\n    [[32, 46], [34, 48], [36, 50], [38, 52]], // axes // à [AC]\n    [[44, 56], [46, 58], [48, 60], [50, 62], [52, 64], [54, 66]], // axes // à [BC]\n    [[4, 5], [2, 3], [0, 1], [14, 15], [28, 29]], // axes perpendiculaires à [BC]\n    [[42, 31], [43, 44], [56, 45], [57, 58], [70, 59], [71, 72]] // axes perpendiculaires à [AC]\n  ]\n  // fonction qui choisit un triangle selon le type d'axe et sa position retourne le triangle choisi, son image et des distracteurs pour un QCM\n  const choisitTriangle = function (typeAxe, index) { // retourne {antecedent: number, image: number, distracteurs: [number]}\n    let figA\n    let antecedent\n    let rangM // rangée de l'antécédent\n    let rangN // rangée de l'image\n    let rangA // rangée de l'axe\n    let deltaRang\n    let image\n    const distracteurs = []\n    switch (typeAxe) {\n      case 0:\n        figA = axes[typeAxe][index][0] - axes[typeAxe][index][0] % 14 // figA est le triangle en tête de rangée dont le point A définit l'axe\n        rangA = Math.floor(figA / 14)\n        if (rangA < 4) { // On est avec un axe bas...\n          if (rangA < 3) {\n            antecedent = randint(0, rangA - 1) * 14 + randint(6, 13)\n          } else {\n            antecedent = randint(1, rangA - 1) * 14 + randint(8, 13)\n          }\n        } else { // on est avec un axe haut ...\n          if (rangA > 4) {\n            antecedent = randint(rangA, 6) * 14 + randint(0, 7)\n          } else {\n            antecedent = randint(rangA, 5) * 14 + randint(0, 7)\n          }\n        }\n        rangM = Math.floor(antecedent / 14)\n        deltaRang = rangA - rangM\n        if (deltaRang > 0) { // l'axe est au dessus de l'antécédent\n          image = antecedent + (deltaRang - 1) * 26 + 13\n          distracteurs.push(image - 13)\n          if (image + 13 < 98) distracteurs.push(image + 13)\n          distracteurs.push(image - deltaRang * 2 + 1, image + deltaRang * 2 - 1)\n        } else { // l'axe est en dessous de l'antécédent\n          image = antecedent + deltaRang * 26 - 13\n          distracteurs.push(image + 13)\n          if (image - 13 > 0) distracteurs.push(image - 13)\n          distracteurs.push(image + deltaRang * 2 - 1, image - deltaRang * 2 + 1)\n        }\n\n        break\n      case 1:\n        figA = axes[typeAxe][index][0] % 13 // figA est le triangle en pied de verticale dont le centre de gravité est sur l'axe\n        rangA = figA // le numéro c'est aussi le rang de gauche à droite\n        // sur la rangée rangM, rangA + rangM*13 est le numéro de la figure croisée par l'axe\n        rangM = randint(2, 5) // on choisit la rangée de l'antécédent\n        if (rangA < 10) { // On est avec un axe à gauche\n        // l'antécédent doit être choisit entre rangM*14 et rangA +rangM*13\n          antecedent = randint(rangM * 14 + 1, rangA + rangM * 13 - 1)\n        } else { // on est avec un axe à droite\n        // l'antécédent doit être choisit entre rangA +rangM*13 et rangM*14-1\n          antecedent = randint(rangA + rangM * 13 + 1, rangA + rangM * 14)\n        }\n        deltaRang = rangA + rangM * 13 - antecedent\n        if (deltaRang > 0) { // l'axe est à droite de l'antécédent\n          image = rangA + rangM * 13 + deltaRang\n          distracteurs.push(image - 1)\n          if (image + 13 < 98) distracteurs.push(image + 13)\n          if (image - 13 > 0) {\n            if (image % 14 === 13) {\n              distracteurs.push(image - 2)\n            } else {\n              if (choice([false, true])) {\n                distracteurs.push(image - 13)\n              } else {\n                distracteurs.push(image - 14)\n              }\n            }\n          }\n          if (image % 14 !== 13) distracteurs.push(image + 1)\n        } else { // l'axe est à gauche de l'antécédent\n          image = rangA + rangM * 13 + deltaRang\n          distracteurs.push(image + 1)\n          if (image + 14 < 98) {\n            if (image % 14 === 0) {\n              distracteurs.push(image + 14)\n            } else {\n              distracteurs.push(image + 13)\n            }\n          }\n          if (image - 13 > 0) distracteurs.push(image - 13)\n          if (image % 14 !== 0) distracteurs.push(image - 1)\n        }\n\n        break\n      case 2: // axe parallèle à [AC]\n        figA = axes[typeAxe][index][0] % 14 // figA est le triangle de la première rangée dont le côté [AC] définit l'axe\n        rangA = figA >> 1 // le rang de gauche à droite est le numéro de la figure divisé par 2 car il n'y a que les figures paires qui comptent ici\n        // sur la rangée rangM, rangA + rangM*13 est le numéro de la figure croisée par l'axe\n        rangM = randint(rangA, 6 - rangA) // on choisit la rangée verticale de l'antécédent\n        if (rangA < 4) { // On est avec un axe à gauche\n        // l'antécédent doit être choisit entre rangM*14 et 2*(rangA-1) + rangM*14\n          antecedent = randint(rangM * 14, (rangA - 1) * 2 + rangM * 14)\n        } else { // on est avec un axe à droite\n        // l'antécédent doit être choisit entre rangA*2 + 1 + rangM*14 et rangM*14+(rangA+1)*2\n          antecedent = randint(rangA * 2 + 1 + rangM * 14, rangM * 14 + (rangA + 1) * 2)\n        }\n        deltaRang = rangA - ((antecedent % 14 - antecedent % 2) >> 1)\n        // console.log('delta : ', deltaRang, ' rangM : ', rangM, ' rangA : ', rangA)\n        // l'axe est à droite de l'antécédent\n        image = antecedent - 10 * deltaRang - 1 + 12 * (antecedent % 2) // ne me demandez pas d'où je sors ça !!!\n        distracteurs.push(image - 1)\n        if (deltaRang > 0) {\n          distracteurs.push(antecedent + 2 * (deltaRang + 1))\n        } else {\n          distracteurs.push(antecedent + 3 * (deltaRang - 1))\n        }\n        if (image - 13 > 0) {\n          if (image % 14 === 13) {\n            distracteurs.push(image - 2)\n          } else {\n            distracteurs.push(image - 13)\n          }\n        } else {\n          distracteurs.push(image + 13)\n        }\n\n        if (image % 14 !== 13) distracteurs.push(image + 1)\n\n        break\n      case 3:\n        figA = axes[typeAxe][index][0] // figA un nombre pair entre 44 et 54 inclus. l'axe passe par son sommet gauche\n        rangA = (figA - 42) >> 1 // le rang de gauche à droite. rangA va de 1 à 6 inclus\n        if (rangA < 4) { // l'antécédent sera à gauche de l'axe\n          rangM = randint(0, Math.min(2 + rangA, 6)) // on choisit la rangée verticale de l'antécédent\n          // l'antécédent doit être choisit entre 0 et ?\n          antecedent = rangM * 14 + 2 * randint(0, 2 + rangA - rangM)\n        } else { // l'antécédent sera à droite de l'axe\n          rangM = randint(rangA - 2, 6) // on choisit la rangée verticale de l'antécédent\n          // l'antécédent doit être choisit entre rangA*2 + 1 + rangM*14 et rangM*14+(rangA+1)*2\n          antecedent = rangM * 14 + randint(rangA * 2, 13)\n        }\n        rangN = antecedent % 14\n        rangN -= rangN % 2\n        rangN = rangN / 2\n        deltaRang = rangA - rangN + 3 - rangM\n        // l'axe est à droite de l'antécédent\n        image = antecedent + 16 * deltaRang - 15 - 2 * (antecedent % 2) // ne me demandez pas d'où je sors ça !!!\n        if (image > 0) {\n          distracteurs.push(image - 1)\n        }\n        if (image < 97) {\n          distracteurs.push(image + 1)\n        }\n        if (image - 13 > 0) {\n          if (image % 14 === 13) {\n            distracteurs.push(image - 2)\n          } else {\n            distracteurs.push(image - 13)\n          }\n        } else {\n          distracteurs.push(image + 14)\n        }\n        if (image + 13 < 97) {\n          if (image % 14 === 0) {\n            distracteurs.push(image + 2)\n          } else {\n            distracteurs.push(image + 13)\n          }\n        }\n        break\n      case 4:\n        figA = axes[typeAxe][index][0] // figA un nombre pair entre 44 et 54 inclus. l'axe passe par son sommet gauche\n        rangA = figA % 14 // le rang de gauche à droite. rangA va de 1 à 6 inclus\n        if (index < 2) { // l'antécédent sera sous l'axe qui est sous la diagonale\n          rangM = randint(0, 3 + index) // on choisit la rangée verticale de l'antécédent\n          antecedent = rangM * 14 + randint((3 + rangM - index) * 2, 13)\n        } else if (index > 2) { // l'antécédent sera au dessus de l'axe qui est au dessus\n          rangM = randint(index, 6) // on choisit la rangée verticale de l'antécédent\n          antecedent = rangM * 14 + randint(0, rangM + 2 * (4 - index))\n        } else { // l'antécédent est partout sauf sur la diagonale car c'est l'axe\n          rangM = randint(0, 6)\n          antecedent = rangM * 14 + randint(0, 13, [rangM * 2, rangM * 2 + 1, rangM * 2 - 1])\n        }\n        deltaRang = 4 - index * 2 + 16 * rangM - (antecedent >> 1) * 2 // Vaudrait mieux que ça marche... je ne sais pas où je vais chercher tout ça !\n        if (deltaRang > 0) {\n          deltaRang >>= 1\n        } else {\n          deltaRang = -((-deltaRang) >> 1)\n        }\n        // l'axe est à droite de l'antécédent\n        image = antecedent - 12 * deltaRang\n        if (image > 0) {\n          distracteurs.push(image - 1)\n        }\n        if (image < 97) {\n          distracteurs.push(image + 1)\n        }\n        if (image - 13 > 0) {\n          if (image % 14 === 13) {\n            distracteurs.push(image - 2)\n          } else {\n            distracteurs.push(image - 13)\n          }\n        } else {\n          distracteurs.push(image + 14)\n        }\n        if (image + 13 < 97) {\n          if (image % 14 === 0) {\n            distracteurs.push(image + 2)\n          } else {\n            distracteurs.push(image + 13)\n          }\n        }\n        break\n      case 5:\n        figA = axes[typeAxe][index][0] // figA un nombre pair entre 44 et 54 inclus. l'axe passe par son sommet gauche\n        rangA = Math.floor(figA / 14) // le rang de gauche à droite. rangA va de 1 à 6 inclus\n        if (index < 4) { // l'antécédent sera sous l'axe\n          rangM = randint(1, rangA - 2) // on choisit la rangée verticale de l'antécédent\n          rangN = randint(rangA - rangM, 4 * (rangA - rangM) + 2 * (figA % 2) - 2)\n          antecedent = rangM * 14 + rangN\n        } else { // l'antécédent sera au dessus de l'axe\n          rangM = randint(rangA - 1, 5) // on choisit la rangée verticale de l'antécédent\n          rangN = randint(4 * (rangA - rangM) + 2 * (figA % 2) + 2, 12)\n          antecedent = rangM * 14 + rangN\n        }\n        deltaRang = 44 + 14 * (index >> 1) + 2 * (index % 2) + 10 * (rangM - rangA) - (antecedent >> 1) * 2 // Vaudrait mieux que ça marche... je ne sais pas où je vais chercher tout ça !\n        if (deltaRang > 0) {\n          deltaRang >>= 1\n        } else {\n          deltaRang = -((-deltaRang) >> 1)\n        }\n        // l'axe est à droite de l'antécédent\n        image = antecedent + 14 * deltaRang - 14 * (1 + antecedent % 2)\n        if (image > 0) {\n          distracteurs.push(image - 1)\n        }\n        if (image < 97) {\n          distracteurs.push(image + 1)\n        }\n        if (image - 13 > 0) {\n          if (image % 14 === 13) {\n            distracteurs.push(image - 2)\n          } else {\n            distracteurs.push(image - 13)\n          }\n        } else {\n          distracteurs.push(image + 14)\n        }\n        if (image + 13 < 97) {\n          if (image % 14 === 0) {\n            distracteurs.push(image + 2)\n          } else {\n            distracteurs.push(image + 13)\n          }\n        }\n        break\n    }\n    return { antecedent: antecedent, image: image, distracteurs: distracteurs }\n  }\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    this.autocorrection = []\n    const objetsEnonce = []\n    let paramsEnonce = {}\n    let texte = ''\n    let texteCorr = ''\n    let typesDeQuestionsDisponibles\n    const scaleFigure = arrondi(parseFloat(this.sup2), 1)\n    // construction du pavage triangulaire\n    const triAngles = [{}] // tableau des triangles { tri: polygone (le triangle), gra: point(son centre de gravité), num: texteParPoint(son numéro)} l'indice du triangle est son numéro\n    const images = []\n    const A = point(0, 0, '')\n    const B = point(1.2, 0, '')\n    const C = rotation(B, A, 60, '')\n    const v = vecteur(1.2, 0)\n    const w = rotation(vecteur(1.2, 0), A, 60)\n    triAngles[0] = { tri: polygone(A, B, C), gra: centreGraviteTriangle(A, B, C) }\n    triAngles[1] = { tri: rotation(triAngles[0].tri, B, -60), gra: rotation(triAngles[0].gra, B, -60) }\n    for (let i = 0; i < 7; i++) {\n      if (i !== 0) {\n        triAngles[i * 2] = { tri: translation(triAngles[(i - 1) * 2].tri, v), gra: translation(triAngles[(i - 1) * 2].gra, v) }\n        triAngles[i * 2 + 1] = { tri: translation(triAngles[(i - 1) * 2 + 1].tri, v), gra: translation(triAngles[(i - 1) * 2 + 1].gra, v) }\n      }\n      for (let j = 1; j < 7; j++) {\n        triAngles[i * 2 + j * 14] = { tri: translation(triAngles[i * 2 + (j - 1) * 14].tri, w), gra: translation(triAngles[i * 2 + (j - 1) * 14].gra, w) }\n        triAngles[i * 2 + 1 + j * 14] = { tri: translation(triAngles[i * 2 + 1 + (j - 1) * 14].tri, w), gra: translation(triAngles[i * 2 + 1 + (j - 1) * 14].gra, w) }\n      }\n    }\n    for (let i = 0; i < triAngles.length; i++) {\n      triAngles[i].n = texteParPointEchelle(stringNombre(i), triAngles[i].gra, 'milieu', 'black', 0.5)\n      objetsEnonce.push(triAngles[i].tri, triAngles[i].n)\n    }\n    paramsEnonce = { xmin: 0, ymin: -0.1, xmax: 15, ymax: 10, pixelsParCm: 30 * scaleFigure, scale: scaleFigure, mainlevee: false }\n    if (parseInt(this.sup) === 1) {\n      this.nbQuestions = 3\n      typesDeQuestionsDisponibles = [0, 1, 2]\n    } else {\n      this.nbQuestions = 6\n      typesDeQuestionsDisponibles = [0, 1, 2, 3, 4, 5]\n    }\n    const listeTypesDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, 3)\n    const couleurs = ['blue', 'green', 'red', 'grey', 'magenta', 'purple']\n    let M\n    let N\n    const d = []\n    const question = []\n    let choix\n    for (let i = 0; i < this.nbQuestions; i++) {\n      choix = randint(0, axes[listeTypesDeQuestions[i]].length - 1)\n      switch (listeTypesDeQuestions[i]) { // ici on définit les 3 axes\n        case 0: // axe horizontal\n        case 2: // axe parallèle à [AC]\n        case 3: // axe parallèle à [BC]\n          M = triAngles[axes[listeTypesDeQuestions[i]][choix][0]].tri.listePoints[0]\n          N = triAngles[axes[listeTypesDeQuestions[i]][choix][1]].tri.listePoints[0]\n          d[i] = droite(M, N, `$(d_${i + 1})$`, couleurs[i])\n          d[i].epaisseur = 3\n          d[i].opacite = 0.6\n          break\n        case 1: // axe vertical\n        case 4: // axe perpendicualire à [BC]\n        case 5: // axe perpendicualire à [AC]\n          M = triAngles[axes[listeTypesDeQuestions[i]][choix][0]].gra\n          N = triAngles[axes[listeTypesDeQuestions[i]][choix][1]].gra\n          d[i] = droite(M, N, `$(d_${i + 1})$`, couleurs[i])\n          d[i].epaisseur = 3\n          d[i].opacite = 0.6\n          break\n      }\n      objetsEnonce.push(d[i])\n      // ici on choisit les figures et on crée les questions\n      question[i] = choisitTriangle(listeTypesDeQuestions[i], choix)\n      triAngles[question[i].antecedent].tri.couleurDeRemplissage = couleurs[i]\n      triAngles[question[i].antecedent].tri.opaciteDeRemplissage = 0.7\n      //  triAngles[question[i].image].tri.couleurDeRemplissage = couleurs[i]\n      //  triAngles[question[i].image].tri.opaciteDeRemplissage = 0.2\n      /* for (let j = 0; j < question[i].distracteurs.length; j++) {\n        triAngles[question[i].distracteurs[j]].tri.couleurDeRemplissage = 'brown'\n        triAngles[question[i].distracteurs[j]].tri.opaciteDeRemplissage = 0.3\n      } */\n    }\n    this.introduction = mathalea2d(paramsEnonce, objetsEnonce)\n    for (let i = 0; i < this.nbQuestions; i++) {\n      texte = `${texteEnCouleur(\"Quelle est l'image de la figure \" + question[i].antecedent + \" par la symétrie axiale d'axe \" + d[i].nom + ' ?', couleurs[i])}`\n      texteCorr = `${texteEnCouleur(\"L'image de la figure \" + question[i].antecedent + \" par la symétrie axiale d'axe \" + d[i].nom + ' est la figure ' + question[i].image + '.', couleurs[i])}`\n      this.autoCorrection[i] = {\n        enonce: texte,\n        propositions: [{\n          texte: question[i].image,\n          statut: true,\n          feedback: ''\n        }\n        ]\n      }\n      for (let j = 0; j < question[i].distracteurs.length; j++) {\n        this.autoCorrection[i].propositions.push({\n          texte: question[i].distracteurs[j],\n          statut: false,\n          feedback: ''\n        })\n      }\n      objetsEnonce.push(symetrieAnimee(triAngles[question[i].antecedent].tri, d[i], `id=\"anim${numeroExercice}-${i}\" dur=\"2s\" repeatCount=\"2\" `))\n      images[i] = symetrieAxiale(triAngles[question[i].antecedent].tri, d[i])\n      images[i].couleurDeRemplissage = couleurs[i]\n      images[i].opaciteDeRemplissage = 0.3\n      objetsEnonce.push(images[i])\n      // On ajoute au texte de la correction, la figure de la correction\n      // texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n      if (this.interactif && !context.isAmc) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n    this.contenuCorrection += '<br>' + mathalea2d(paramsEnonce, objetsEnonce)\n    if (context.isHtml) {\n      for (let i = 0; i < this.nbQuestions; i++) {\n        this.contenuCorrection += `<br><button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}-${i}').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation de la symétrie par rapport à ${d[i].nom}</button>`\n      }\n    }\n  }\n  this.besoinFormulaireNumerique = ['Nombre d\\'axes de symétrie ', 2, '1 : 3\\n2 : 6']\n  this.besoinFormulaire2Texte = ['Échelle de la figure (nombre avec un point comme séparateur décimal)']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","SymetrieAxialePavageTriangulaire","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","context","sup","sup2","axes","choisitTriangle","typeAxe","index","figA","antecedent","rangM","rangN","rangA","deltaRang","image","distracteurs","Math","floor","randint","push","choice","min","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","autocorrection","objetsEnonce","typesDeQuestionsDisponibles","paramsEnonce","texte","texteCorr","scaleFigure","arrondi","parseFloat","triAngles","images","A","point","B","C","rotation","v","vecteur","w","tri","polygone","gra","centreGraviteTriangle","i","translation","j","length","n","texteParPointEchelle","stringNombre","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","parseInt","listeTypesDeQuestions","combinaisonListes","couleurs","M","N","d","question","choix","listePoints","droite","epaisseur","opacite","couleurDeRemplissage","opaciteDeRemplissage","introduction","mathalea2d","texteEnCouleur","nom","autoCorrection","enonce","propositions","statut","feedback","symetrieAnimee","symetrieAxiale","interactif","propositionsQcm","listeQuestionsToContenu","contenuCorrection","besoinFormulaireNumerique","besoinFormulaire2Texte","boutonAide","consigne","consigneCorrection","contenu","tableauSolutionsDuQcm","spacing","spacingCorr","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}