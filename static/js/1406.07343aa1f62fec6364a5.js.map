{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","ReconnaitreQuadrilatereParticulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","sortieHtml","correctionDetaillee","qcmDisponible","modeQcm","nouvelleVersion","qcm","listeQuestions","listeCorrections","listeDeQuestions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","tabrep","tabicone","push","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","codageAngleDroit","segment","pointilles","mathalea","sortieAMC","lastIndexOf","substring","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","indexOf","listeQuestionsToContenu","gestionQcmInteractif","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","autoCorrection","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","a","b","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","length","elimineDoublons","reponses","statuts","reponsesEpurees","slice","statutsEpures","j","console","log","splice"],"mappings":"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","file":"js/1406.07343aa1f62fec6364a5.js","sourcesContent":["/* global sortieHtml mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, choice, shuffle } from '../../modules/outils.js'\nimport { point, segment, polygone, codageAngleDroit, codeSegments, mathalea2d } from '../../modules/2d.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @Auteur Rémi Angot\n * Référence 6G33\n*/\nexport default function ReconnaitreQuadrilatereParticulier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true\n  sortieHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function () {\n    this.qcm = ['6G33', [], \"Trouver la nature d'un quadrilatère.\", 1]\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeDeQuestions = shuffle([choice(['losange1', 'losange2']), choice(['rectangle1', 'rectangle2']), choice(['carre1', 'carre2', 'carre3'])])\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = ''\n      texteCorr = ''\n      let A, B, C, D, O, ABCD, codage, codage1, codage2, codage3, sAC, sBD, marquesDemiDiagonales, marquesDemiDiagonales1, marquesDemiDiagonales2, marquesCotes, tabrep, tabicone\n      switch (listeDeQuestions[i]) {\n        case 'losange1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [1, 0, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant 4 côtés de même longueur ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          // codage = codageAngleDroit(C, O, B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'losange2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [1, 0, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, B)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales1 = codeSegments('|', 'blue', O, A, O, C)\n          marquesDemiDiagonales2 = codeSegments('|||', 'blue', O, B, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, codage, sAC, sBD, marquesDemiDiagonales1, marquesDemiDiagonales2) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'rectangle1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant 3 angles droits ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'rectangle2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          // codage1 = codageAngleDroit(A,B,C);\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'carre1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, D)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre3':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(A, B, C)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n      }\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        if (texteCorr.lastIndexOf('\\n') > 0) {\n          texteCorr = texteCorr.substring(0, texteCorr.lastIndexOf('\\n'))\n        }\n        this.tableauSolutionsDuQcm[i] = tabicone\n        texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n        texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  gestionQcmInteractif(this)\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n// function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n// }\n\n// Référence 6C23\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un objet {reponse=[a,b,c,d,e],statuts=[1,0,0,0,0]}\n * élimine les doublons de réponses et les statuts associés avant de retourner l'objet épuré.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (reponses, statuts) { // fonction qui va éliminer les doublons si il y en a\n  const reponsesEpurees = reponses.slice()\n  const statutsEpures = statuts.slice()\n  for (let i = 0; i < reponsesEpurees.length - 1; i++) {\n    for (let j = i + 1; j < reponsesEpurees.length;) {\n      if (reponsesEpurees[i] === reponsesEpurees[j]) {\n        console.log('doublon trouvé', reponsesEpurees[i], reponsesEpurees[j]) // les réponses i et j sont les mêmes\n\n        if (statutsEpures[i] === 1) { // si la réponse i est bonne, on vire la j\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        } else if (statutsEpures[j] === 1) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n          statutsEpures[i] = 1\n        } else { // Les deux réponses sont mauvaises\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return [reponsesEpurees, statutsEpures]\n}\n"],"sourceRoot":""}