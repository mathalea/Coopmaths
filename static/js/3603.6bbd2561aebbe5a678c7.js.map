{"version":3,"sources":["webpack://mathalea/./src/js/exercices/CM/CM003.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["titre","amcReady","interactifReady","amcType","TablesMultiplicationsDivisions","tablesParDefaut","Exercice","this","sup","sup2","consigne","spacing","tailleDiaporama","nouvelleVersion","listeQuestions","listeCorrections","tables","split","couples","creerCouples","nbQuestions","listeTypeDeQuestions","combinaisonListes","operation","typesDeQuestions","a","b","texte","texteCorr","i","setReponse","interactif","ajouteChampTexte","length","randint","choice","context","replace","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","propositions","statut","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","feedback","type","querySelectorAll","uicheck","exerciceQcm","propositionsQcm","espace","undefined","options","ordered","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","texteApres","inline","numeric","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","message","level","includes","div","cssIcon","remove","divTitre","messageUtilisateur","code","width"],"mappings":"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","file":"js/3603.6bbd2561aebbe5a678c7.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, creerCouples, choice, combinaisonListes, randint } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Tables de multiplications et de divisions'\nexport const amcReady = true\nexport const interactifReady = true\nexport const amcType = 4\n\n/**\n * Tables de multiplications et de divisions classiques, à trou ou un mélange des deux.\n *\n * Par défaut ce sont les tables de 2 à 9 mais on peut choisir les tables que l'on veut\n * @Auteur Rémi Angot\n * Référence CM003\n */\nexport default function TablesMultiplicationsDivisions (\n  tablesParDefaut = '2-3-4-5-6-7-8-9'\n) {\n  // Multiplier ou diviser deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.sup2 = 1 // classique|a_trous|melange\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = 'Calculer'\n  this.spacing = 2\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    let tables = []\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des ;\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    const listeTypeDeQuestions = combinaisonListes(\n      ['classique', 'a_trous'],\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const operation = combinaisonListes(['x', 'div'], this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let typesDeQuestions\n    for (let i = 0, a, b, texte, texteCorr; i < this.nbQuestions; i++) {\n      a = couples[i][0]\n      b = couples[i][1]\n      if (this.sup2 === 1) {\n        typesDeQuestions = 'classique'\n      } else if (this.sup2 === 2) {\n        typesDeQuestions = 'a_trous'\n      } else {\n        typesDeQuestions = listeTypeDeQuestions[i]\n      }\n\n      if (operation[i] === 'x') {\n        if (typesDeQuestions === 'classique') {\n          // classique\n          texte = '$ ' + a + ' \\\\times ' + b + ' = \\\\dotfill $'\n          setReponse(this, i, a * b)\n          if (this.interactif) texte = `$${a} \\\\times ${b} = $` + ajouteChampTexte(this, i)\n          texteCorr = '$ ' + a + ' \\\\times ' + b + ' = ' + a * b + ' $'\n        } else {\n          if (tables.length > 2) {\n            // Si pour le premier facteur il y a plus de 2 posibilités on peut le chercher\n            if (randint(1, 2) === 1) {\n              texte = '$ ' + a + ' \\\\times \\\\ldots\\\\ldots = ' + a * b + ' $'\n              if (this.interactif) texte = `$ ${a} \\\\times $` + ajouteChampTexte(this, i) + `$ = ${a * b} $`\n            } else {\n              texte = '$ \\\\ldots\\\\ldots' + ' \\\\times ' + b + ' = ' + a * b + ' $'\n              if (this.interactif) texte = ajouteChampTexte(this, i) + `$ \\\\times ${b}  = ${a * b} $`\n            }\n            setReponse(this, i, a)\n          } else {\n            // Sinon on demande forcément le 2e facteur\n            texte = '$ ' + a + ' \\\\times \\\\ldots\\\\ldots = ' + a * b + ' $'\n            if (this.interactif) texte = ajouteChampTexte(this, i) + `$ \\\\times ${b}  = ${a * b} $`\n            setReponse(this, i, b)\n          }\n          texteCorr = '$ ' + a + ' \\\\times ' + b + ' = ' + a * b + ' $'\n        }\n      } else {\n        if (typesDeQuestions === 'classique') {\n          // classique\n          texte = '$ ' + a * b + ' \\\\div ' + b + ' = \\\\dotfill $'\n          setReponse(this, i, a)\n          if (this.interactif) texte = `$${a * b} \\\\div ${b} = $` + ajouteChampTexte(this, i)\n        } else {\n          // a trous\n          if (choice([true, false])) {\n            texte = `$ ${a * b} \\\\div \\\\ldots\\\\ldots = ${a}$`\n            setReponse(this, i, b)\n            if (this.interactif) texte = `$${a * b} \\\\div $` + ajouteChampTexte(this, i) + `$ = ${a}$`\n          } else {\n            texte = `$ \\\\ldots\\\\ldots \\\\div ${b}  = ${a}$`\n            setReponse(this, i, a * b)\n            if (this.interactif) texte = ajouteChampTexte(this, i) + `$\\\\div ${b} = ${a}$`\n          }\n        }\n        texteCorr = `$ ${a * b} \\\\div ${b} = ${a}$`\n      }\n      if (context.isDiaporama) {\n        texte = texte.replace('= \\\\dotfill', '')\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n  this.besoinFormulaire2Numerique = [\n    'Style de questions',\n    3,\n    '1 : Classique\\n2: À trous\\n3: Mélangé'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.',',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n\n\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (var prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n// Module regroupant les fonctions de gestions des erreurs.\n\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} erreur\n * @param {string} [erreur.message]\n * @param {string} [erreur.level]\n * @param {string} [erreur.titre]\n */\nexport function addFeedback (container, { message = 'Une erreur est survenue', level = 'erreur', titre = 'Erreur interne' } = {}) {\n  if (!types.includes(level)) {\n    console.error(Error(`type de message inconnu : ${level}`))\n    level = 'error'\n  }\n  const cssDiv = level === 'info' ? '' : level\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = level === 'error'\n    ? 'frown outline'\n    : (level === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  addText(div, message)\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        level: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        level: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} data\n * @param {string} data.id id du div conteneur à utiliser\n * @param {string} data.texte Le texte à afficher\n * @param {string} data.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  if (!id || !texte) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message: texte, level: type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}