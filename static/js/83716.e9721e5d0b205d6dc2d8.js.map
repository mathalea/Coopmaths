{"version":3,"file":"js/83716.e9721e5d0b205d6dc2d8.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G24-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { point, pointAdistance, rotation, similitude, translation, vecteur, barycentre, codeSegment, codeAngle, nommePolygone, mathalea2d, triangle2points2longueurs, longueur, angle, polygone } from '../../modules/2d.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, choisitLettresDifferentes, shuffleLettres } from '../../modules/outils.js'\nexport const titre = 'Triangles égaux et côtés homologues'\n\n/**\n * Deux triangles égaux sont codés, il faut reconnaitre les côtés homologues\n * @author Rémi Angot\n * Référence 5G24-1\n*/\nexport default function TrianglesEgaux () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Compléter les phrases suivantes.'\n  this.nbQuestions = 3\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 50 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.spacing = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    let typeQuestionsDisponibles = ['rotation', 'similitude', 'rotation2', 'similitude2', 'rotation3', 'similitude3']\n    if (this.nbQuestions === 3) {\n      typeQuestionsDisponibles = ['similitude', 'rotation2', 'similitude3']\n    } else if (this.nbQuestions === 4) {\n      typeQuestionsDisponibles = ['rotation', 'rotation2', 'similitude2', 'rotation3', 'similitude3']\n    }\n    const listeTypeQuestions = combinaisonListes(typeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      let l1 = randint(40, 70)\n      let l2 = randint(40, 80, l1)\n      let l3 = randint(40, l1 + l2 - 10, [l1, l2])\n      l1 /= 10\n      l2 /= 10\n      l3 /= 10\n      const A = point(0, 0)\n      const B = pointAdistance(A, l1)\n      const p1 = triangle2points2longueurs(A, B, l2, l3)\n      const C = p1.listePoints[2]\n      const O = barycentre(p1)\n      const v = vecteur(longueur(A, B) + 2, 0)\n      const O2 = translation(O, v)\n      // const p2 = similitude(p1, O2, randint(160, 200), 1)\n      let p2, D, E, F, code1, code2, code3, code4, code5, code6, codeA1, codeA2, codeA3, codeA4, codeA5, codeA6, nom1, nom2, nommeP1, nommeP2, Anom, Bnom, Cnom, Dnom, Enom, Fnom\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'rotation':\n          p2 = rotation(p1, A, angle(C, A, B) + randint(10, 100))\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom1 = nom1 + ' ' + choisitLettresDifferentes(2, nom1)\n          nom1 = nom1.replaceAll(',', '')\n          nommeP1 = nommePolygone(polygone(A, B, C, D, E, F), nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom1[0]\n          Enom = nom1[4]\n          Fnom = nom1[5]\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, code3, code4, code5, code6, codeA1, codeA2, codeA3, codeA4, codeA5, codeA6, nommeP1)\n          texteCorr = `Correction ${i + 1} de type 1`\n          break\n        case 'similitude':\n          p2 = similitude(p1, O2, randint(160, 200), 1)\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom2 = choisitLettresDifferentes(3, nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom2[0]\n          Enom = nom2[1]\n          Fnom = nom2[2]\n          nommeP1 = nommePolygone(p1, nom1)\n          nommeP2 = nommePolygone(p2, nom2)\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, code3, code4, code5, code6, codeA1, codeA2, codeA3, codeA4, codeA5, codeA6, nommeP1, nommeP2)\n          break\n        case 'rotation2':\n          p2 = rotation(p1, A, angle(C, A, B) + randint(10, 100))\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom1 = nom1 + ' ' + choisitLettresDifferentes(2, nom1)\n          nom1 = nom1.replaceAll(',', '')\n          nommeP1 = nommePolygone(polygone(A, B, C, D, E, F), nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom1[0]\n          Enom = nom1[4]\n          Fnom = nom1[5]\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, code3, code4, codeA1, codeA2, nommeP1)\n          texteCorr = `Correction ${i + 1} de type 1`\n          break\n        case 'similitude2':\n          p2 = similitude(p1, O2, randint(160, 200), 1)\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom2 = choisitLettresDifferentes(3, nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom2[0]\n          Enom = nom2[1]\n          Fnom = nom2[2]\n          nommeP1 = nommePolygone(p1, nom1)\n          nommeP2 = nommePolygone(p2, nom2)\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, code3, code4, codeA1, codeA2, nommeP1, nommeP2)\n          break\n        case 'rotation3':\n          p2 = rotation(p1, A, angle(C, A, B) + randint(10, 100))\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom1 = nom1 + ' ' + choisitLettresDifferentes(2, nom1)\n          nom1 = nom1.replaceAll(',', '')\n          nommeP1 = nommePolygone(polygone(A, B, C, D, E, F), nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom1[0]\n          Enom = nom1[4]\n          Fnom = nom1[5]\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, codeA1, codeA2, codeA5, codeA6, nommeP1)\n          texteCorr = `Correction ${i + 1} de type 1`\n          break\n        case 'similitude3':\n          p2 = similitude(p1, O2, randint(160, 200), 1)\n          D = p2.listePoints[0]\n          E = p2.listePoints[1]\n          F = p2.listePoints[2]\n          code1 = codeSegment(A, B, '|')\n          code2 = codeSegment(D, E, '|')\n          code3 = codeSegment(B, C, '||')\n          code4 = codeSegment(E, F, '||')\n          code5 = codeSegment(C, A, '|||')\n          code6 = codeSegment(F, D, '|||')\n          codeA1 = codeAngle(A, B, C)\n          codeA2 = codeAngle(D, E, F)\n          codeA3 = codeAngle(B, C, A, 0.8, 'X')\n          codeA4 = codeAngle(E, F, D, 0.8, 'X')\n          codeA5 = codeAngle(C, A, B, 0.8, '||')\n          codeA6 = codeAngle(F, D, E, 0.8, '||')\n          nom1 = choisitLettresDifferentes(3)\n          nom2 = choisitLettresDifferentes(3, nom1)\n          Anom = nom1[0]\n          Bnom = nom1[1]\n          Cnom = nom1[2]\n          Dnom = nom2[0]\n          Enom = nom2[1]\n          Fnom = nom2[2]\n          nommeP1 = nommePolygone(p1, nom1)\n          nommeP2 = nommePolygone(p2, nom2)\n          texte = `Ci-dessous les triangles $${shuffleLettres(Anom + Bnom + Cnom)}$ et $${shuffleLettres(Dnom + Enom + Fnom)}$ sont égaux.<br>`\n          texte += `$[${Anom + Bnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Bnom + Cnom}]$ et ............ sont homologues.<br>`\n          texte += `$[${Cnom + Anom}]$ et ............ sont homologues.<br>`\n          texte += mathalea2d({\n            xmin: Math.min(A.x, B.x, C.x, D.x, E.x, F.x) - 3,\n            ymin: Math.min(A.y, B.y, C.y, D.y, E.y, F.y) - 3,\n            xmax: Math.max(A.x, B.x, C.x, D.x, E.x, F.x) + 3,\n            ymax: Math.max(A.y, B.y, C.y, D.y, E.y, F.y) + 3,\n            scale: 0.5\n          },\n          p1, p2, code1, code2, codeA1, codeA2, codeA5, codeA6, nommeP1, nommeP2)\n          break\n      }\n      texteCorr = `$[${Anom + Bnom}]$ et $[${Dnom + Enom}]$ sont homologues.<br>`\n      texteCorr += `$[${Bnom + Cnom}]$ et $[${Enom + Fnom}]$ sont homologues.<br>`\n      texteCorr += `$[${Cnom + Anom}]$ et $[${Fnom + Dnom}]$ sont homologues.<br>`\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TrianglesEgaux","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","spacing","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","typeQuestionsDisponibles","listeTypeQuestions","combinaisonListes","texte","texteCorr","i","cpt","l1","randint","l2","l3","A","point","B","pointAdistance","p1","triangle2points2longueurs","C","listePoints","O","barycentre","v","vecteur","longueur","O2","translation","p2","D","E","F","code1","code2","code3","code4","code5","code6","codeA1","codeA2","codeA3","codeA4","codeA5","codeA6","nom1","nom2","nommeP1","nommeP2","Anom","Bnom","Cnom","Dnom","Enom","Fnom","rotation","angle","codeSegment","codeAngle","choisitLettresDifferentes","replaceAll","nommePolygone","polygone","shuffleLettres","mathalea2d","xmin","Math","min","x","ymin","y","xmax","max","ymax","scale","similitude","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}