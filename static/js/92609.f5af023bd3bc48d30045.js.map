{"version":3,"file":"js/92609.f5af023bd3bc48d30045.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G41.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { texNombrec, choice, texteGras, listeQuestionsToContenu, randint, arrondi, calcul, choisitLettresDifferentes, lettreDepuisChiffre, texNombre, miseEnEvidence } from '../../modules/outils.js'\nimport { cercle, demiDroite, droite, cercleCentrePoint, pointIntersectionDD, codeSegments, texteParPosition, pointAdistance, codageAngleDroit, afficheMesureAngle, afficheLongueurSegment, point, labelPoint, similitude, polygoneAvecNom, tracePoint, segment, traceCompas, dansLaCibleCarree, cibleCarree, rotation, longueur, mathalea2d, milieu, pointIntersectionCC } from '../../modules/2d.js'\n\nexport const titre = 'Construire des quadrilatères particuliers'\n\n/**\n * Construction de quadrilatères avec dispositif d'auto-correction aléatoire\n * Ref 4G41\n * @author Jean-Claude Lhote\n * Publié le 3/02/2020\n */\nexport default function ConstructionsParallelogrammesParticuliers () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.correctionDetaillee = false\n  this.correctionDetailleeDisponible = true\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let texte = ''; let texteCorr = ''\n    const celluleAlea = function (rang) {\n      const lettre = lettreDepuisChiffre(randint(1, rang))\n      const chiffre = Number(randint(1, rang)).toString()\n      return lettre + chiffre\n    }\n    // On prépare la figure...\n    const noms = choisitLettresDifferentes(5, 'QO', true) // on choisit 5 lettres, les 4 premières sont les sommets, la 5e est le centre\n    const nom = `$${noms[0] + noms[1] + noms[2] + noms[3]}$`\n    let A, B, C, D, O, d1, d2, c1, c2, c3, c4, alpha, tri, t1, t2, t3, t4, t5, dd1, dd2\n    const objetsEnonce = []; const objetsCorrection = []\n    let typesDeQuestionsDisponibles\n    let xm, ym, xM, yM\n    if (this.sup === 1) typesDeQuestionsDisponibles = [1, 2, 3]\n    else if (this.sup === 2) typesDeQuestionsDisponibles = [4, 5, 6, 7]\n    else typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7]\n\n    const typeDeQuestion = choice(typesDeQuestionsDisponibles)\n    switch (typeDeQuestion) {\n      case 1:\n        A = point(0, 0, noms[0])\n        c1 = randint(20, 25) * 2 // AB\n        c4 = calcul(randint(20, 30, c1 / 2) / 5) // AD\n        c1 = calcul(c1 / 10)\n        d1 = 5 * (Math.abs(c4 - c1) + 2)\n        d2 = 5 * (c1 + c4 - 3)\n        d1 = calcul(randint(Math.min(d1, d2), Math.max(d1, d2)) / 5) // BD\n        B = pointAdistance(A, c1, randint(-30, 30), noms[1])\n        D = pointIntersectionCC(cercle(A, c4), cercle(B, d1), noms[3])\n        O = milieu(B, D, noms[4])\n        C = rotation(A, O, 180, noms[2])\n        texte = `${nom} est un parallélogramme tel que `\n        texte += `$${noms[0] + noms[1]}=${texNombre(c1)}$ cm, $${noms[0] + noms[3]}=${texNombre(c4)}$ cm, $${noms[1] + noms[3]}=${texNombre(d1)}$ cm.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, B), labelPoint(A, B))\n        if (this.correctionDetaillee) {\n          texteCorr += `Comme ${nom} est un parallélogramme, ses diagonales se coupent en leur milieu.<br>`\n          texteCorr += `Soit $${noms[4]}$ le milieu de $[${noms[1] + noms[3]}]$. $${noms[2]}$ est le symétrique de $${noms[0]}$ par rapport à $${noms[4]}$.`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[3]}$.<br>Puis $${noms[4]}$, le milieu de $[${noms[1] + noms[3]}]$ et enfin le point $${noms[2]}$.<br>`\n        }\n        if (longueur(B, D) !== longueur(A, C)) {\n          texteCorr += `Comme $${noms[0] + noms[3]}\\\\ne ${noms[0] + noms[1]}$ et que $${noms[0] + noms[2]}\\\\ne ${noms[3] + noms[1]}$, le paralélogramme ${nom} n'est ni un losange, ni un rectangle.<br>`\n          texteCorr += `${nom} ${texteGras('est un simple paraléllogramme')}.<br>`\n        } else {\n          texteCorr += `Comme $$${noms[0] + noms[2]} = ${noms[3] + noms[1]}$ et que $${noms[0] + noms[3]}\\\\ne ${noms[0] + noms[1]}$, le paralélogramme ${nom} est un rectangle.<br>`\n        }\n        objetsCorrection.push(afficheLongueurSegment(A, B, 'black', -0.5), afficheLongueurSegment(A, D, 'black', 0.5))\n        t1 = traceCompas(A, D, 15)\n        t2 = traceCompas(B, D, 15)\n        t3 = traceCompas(O, C, 20)\n        tri = polygoneAvecNom(A, B, D)\n        xm = Math.min(A.x, B.x, D.x) - 0.8\n        ym = Math.min(A.y, B.y, D.y) - 0.8\n        xM = Math.max(A.x, B.x, D.x) + 0.8\n        yM = Math.max(A.y, B.y, D.y) + 0.8\n        break\n      case 2:\n        O = point(0, 0, noms[4])\n        c1 = randint(25, 35) * 2 // AC\n        c4 = calcul(randint((c1 + 4) / 2, 45) / 5) // BD\n        c1 = calcul(c1 / 10)\n        alpha = randint(100, 130)\n\n        A = pointAdistance(O, c1 / 2, randint(-30, 30), noms[0])\n        B = similitude(A, O, alpha, c4 / c1, noms[1])\n        D = rotation(B, O, 180, noms[3])\n        C = rotation(A, O, 180, noms[2])\n        texte = `${nom} est un parallélogramme de centre $${noms[4]}$ tel que `\n        texte += `$${noms[0] + noms[2]}=${texNombre(c1)}$ cm, $${noms[1] + noms[3]}=${texNombre(c4)}$ cm et $\\\\widehat{${noms[0] + noms[4] + noms[1]}}=${alpha}\\\\degree$  dans le sens inverse des aiguilles d'une montre.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, O), labelPoint(A, O))\n        if (this.correctionDetaillee) {\n          texteCorr += `Comme ${nom} est un parallélogramme, ses diagonales se coupent en leur milieu $${noms[4]}$.<br>`\n          texteCorr += `$${noms[2]}$ est le symétrique de $${noms[0]}$ par rapport à $${noms[4]}$. La distance ${noms[4] + noms[1]} est égale à la moitié de ${noms[1] + noms[3]}.<br>`\n          texteCorr += `Construisons tout d'abord le point $${noms[2]}$ symétrique de $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `Construisons ensuite un angle $\\\\widehat{${noms[0] + noms[4] + 'x'}}$ de mesure $${alpha}\\\\degree$ dans le sens inverse des aiguilles d'une montre.<br>`\n          texteCorr += `Puis le point $${noms[1]}$ sur $[${noms[4]}x)$ et son symétrique $${noms[3]}$ par rapport à $${noms[4]}$ situés tous les deux à $${texNombrec(arrondi(c4 / 2))}$ cm de $${noms[4]}$.<br>`\n        }\n        xm = Math.min(A.x, B.x, C.x) - 0.8\n        ym = Math.min(A.y, B.y, C.y) - 0.8\n        xM = Math.max(A.x, B.x, C.x) + 0.8\n        yM = Math.max(A.y, B.y, C.y) + 0.8\n        break\n      case 3:\n        A = point(0, 0, noms[0])\n        c1 = randint(26, 40) * 2 // AB\n        c4 = calcul(randint(15, 25) / 5) // AD\n        c1 = calcul(c1 / 10)\n\n        B = pointAdistance(A, c1, randint(-30, 30), noms[1])\n        D = similitude(B, A, 90, c4 / c1, noms[3])\n        O = milieu(B, D, noms[4])\n        C = rotation(A, O, 180, noms[2])\n        texte = `${nom} est un parallélogramme tel que `\n        texte += `$${noms[0] + noms[1]}=${texNombre(c1)}$ cm, $${noms[0] + noms[3]}=${texNombre(c4)}$ cm, $${noms[1] + noms[3]}=${noms[0] + noms[2]}$.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, B), labelPoint(A, B))\n\n        texteCorr += `Comme ${nom} est un parallélogramme, ses diagonales se coupent en leur milieu et comme de plus elles ont la même longueur, ${texteGras(nom)} ${texteGras(' est donc un rectangle')}.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Soit $${noms[4]}$ le milieu de $[${noms[1] + noms[3]}]$. $${noms[2]}$ est le symétrique de $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[3]}$ puis $${noms[4]}$ au milieu de $[${noms[1] + noms[3]}]$.<br>`\n          texteCorr += `Les quatre sommets de ${nom} sont sur le cercle de centre $${noms[4]}$ passant par $${noms[0]}$. $[${noms[0]}${noms[2]}]$ et $[${noms[1]}${noms[3]}]$ sont des diamètres de ce cercle.<br>`\n        }\n        objetsCorrection.push(afficheLongueurSegment(A, B, 'black', -0.5), afficheLongueurSegment(A, D, 'black', 0.5))\n        t1 = cercleCentrePoint(O, A)\n        t1.color = 'gray'\n        t1.opacite = 0.5\n        t3 = traceCompas(O, C, 20)\n        tri = polygoneAvecNom(A, B, D)\n        xm = Math.min(A.x, B.x, D.x) - 0.8\n        ym = Math.min(A.y, B.y, D.y) - 0.8\n        xM = Math.max(A.x, B.x, D.x) + 0.8\n        yM = Math.max(A.y, B.y, D.y) + 0.8\n\n        break\n      case 4:\n        A = point(0, 0, noms[0])\n        c1 = randint(15, 30) // AB\n        c4 = calcul(randint(15, 20, c1) / 5) // BD\n        c1 = calcul(c1 / 5)\n\n        B = pointAdistance(A, c1, randint(-30, 30), noms[1])\n        D = pointIntersectionCC(cercle(A, c1), cercle(B, c4), noms[3])\n        O = milieu(B, D, noms[4])\n        C = rotation(A, O, 180, noms[2])\n\n        texte = `${nom} est un parallélogramme tel que `\n        texte += `$${noms[0] + noms[1]}=${texNombre(c1)}$ cm, $${noms[1] + noms[3]}=${texNombre(c4)}$ cm, $[${noms[0] + noms[2]}]\\\\perp [${noms[1] + noms[3]}]$.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, B), labelPoint(A, B))\n\n        texteCorr += `Comme ${nom} est un parallélogramme dont les diagonales $[${noms[0] + noms[2]}]$ et $[${noms[1] + noms[3]}]$ sont perpendiculaires, ${nom}${texteGras(' est un losange')}.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Il en résulte que le triangle $${noms[0] + noms[1] + noms[3]}$ est isoclèle en $${noms[0]}$.<br>`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[3]}$ puis $${noms[4]}$, le milieu de $[${noms[1] + noms[3]}]$ et enfin le point $${noms[2]}$.<br>`\n        }\n        objetsCorrection.push(afficheLongueurSegment(A, B, 'black', -0.5), afficheLongueurSegment(A, D, 'black', 0.5))\n        t1 = traceCompas(A, D, 15)\n        t2 = traceCompas(B, D, 15)\n        t3 = traceCompas(O, C, 20)\n        tri = polygoneAvecNom(A, B, D)\n        xm = Math.min(A.x, B.x, D.x) - 0.8\n        ym = Math.min(A.y, B.y, D.y) - 0.8\n        xM = Math.max(A.x, B.x, D.x) + 0.8\n        yM = Math.max(A.y, B.y, D.y) + 0.8\n        break\n      case 5:\n        A = point(0, 0, noms[0])\n        c1 = randint(20, 35) * 2 // AC\n        c4 = calcul(randint((c1 - 4) / 2, 35) / 5) // AD\n        c1 = calcul(c1 / 10)\n        alpha = randint(95, 120)\n        B = pointAdistance(A, c1, randint(-30, 30), noms[1])\n        D = similitude(B, A, alpha, c4 / c1, noms[3])\n        O = milieu(B, D, noms[4])\n        C = rotation(A, O, 180, noms[2])\n        texte = `${nom} est un parallélogramme de centre $${noms[4]}$ tel que `\n        texte += `$${noms[0] + noms[1]}=${texNombre(c1)}$ cm, $${noms[0] + noms[3]}=${texNombre(c4)}$ cm et $\\\\widehat{${noms[1] + noms[2] + noms[3]}}=${alpha}\\\\degree$  dans le sens inverse des aiguilles d'une montre.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, B), labelPoint(A, B))\n        if (this.correctionDetaillee) {\n          texteCorr += `Comme ${nom} est un parallélogramme, ses angles opposés ont la même mesure, donc $\\\\widehat{${noms[3] + noms[0] + noms[1]}}=${alpha}\\\\degree$.<br>`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[3]}$.<br>`\n          texteCorr += `Puis le point $${noms[2]}$ symétrique  de $${noms[0]}$ par rapport à $${noms[4]}$, milieu de $[${noms[1] + noms[3]}]$.<br>`\n        }\n        texteCorr += `Comme ${nom} est un parallélogramme qui ne possède pas d'angle droit et que ses côtés consécutifs sont de longueurs différentes, ${texteGras('c\\'est un simple parallélogramme')}.<br>`\n        t1 = traceCompas(A, D, 15)\n        t2 = traceCompas(A, B, 15)\n        t3 = traceCompas(O, C, 20)\n        tri = polygoneAvecNom(A, B, D)\n        xm = Math.min(A.x, B.x, D.x) - 0.8\n        ym = Math.min(A.y, B.y, D.y) - 0.8\n        xM = Math.max(A.x, B.x, D.x) + 0.8\n        yM = Math.max(A.y, B.y, D.y) + 0.8\n        break\n      case 6:\n        A = point(0, 0, noms[0])\n        c1 = randint(20, 35) * 2 // AC\n        c2 = randint(15, 20) * 2 // AO\n        c3 = calcul(c1 + randint(5, 10) * 2) - c2 // BO\n        c1 = calcul(c1 / 10)\n        c2 = calcul(c2 / 10)\n        c3 = calcul(c3 / 10)\n\n        B = pointAdistance(A, c1, randint(-30, 30), noms[1])\n        O = pointIntersectionCC(cercle(A, c2), cercle(B, c3), noms[4])\n        C = rotation(A, O, 180, noms[2])\n        D = rotation(B, O, 180, noms[3])\n        texte = `${nom} est un parallélogramme de centre $${noms[4]}$ tel que `\n        texte += `$${noms[0] + noms[1]}=${texNombre(c1)}$ cm, $${noms[4] + noms[2]}=${texNombre(c2)}$ cm et $${noms[4] + noms[3]}=${texNombre(c3)}$ cm.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, B), labelPoint(A, B))\n        if (this.correctionDetaillee) {\n          texteCorr += `Comme ${nom} est un parallélogramme, ses diagonales se coupent en leur milieu $${noms[4]}$.<br>`\n          texteCorr += `On en déduit que $${noms[0] + noms[4]}=${noms[4] + noms[2]}=${texNombre(c2)}$ cm et que $${noms[1] + noms[4]}=${noms[4] + noms[3]}=${texNombre(c3)}$ cm.<br>`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[4]}$.<br>`\n          texteCorr += `Puis les points $${noms[2]}$ et $${noms[3]}$ symétriques respectifs de $${noms[0]}$ et $${noms[1]}$ par rapport à $${noms[4]}$.<br>`\n        }\n        if (c1 * c1 !== (c2 * c2 + c3 * c3)) {\n          texteCorr += `le triangle $${noms[0] + noms[1] + noms[4]}$ n'est pas un triangle rectangle, donc les diagonales ne sont pas perpendiculaires.<br>`\n          if (c2 === c3) texteCorr += `Les diagonales ont la même longueur. ${nom} est un parallélogramme dont les diagonales sont de même longueur, ${texteGras('c\\'est donc un rectangle')}.<br>`\n          else texteCorr += `De plus elles n'ont pas la même longueur, donc ${nom} ${texteGras('est un simple parallélogramme')}.<br>`\n        } else {\n          texteCorr += `Le triangle $${noms[0] + noms[1] + noms[4]}$ est un triangle rectangle, donc les diagonales sont perpendiculaires.<br>`\n          if (c2 === c3) texteCorr += `de plus les diagonales ont même longueur. ${nom} est un parallélogramme dont les diagonales sont perpendiculaires et de même longueur, ${texteGras('c\\'est donc un carré')}.<br>`\n        }\n        t1 = traceCompas(A, O, 20)\n        t2 = traceCompas(B, O, 20)\n        t3 = traceCompas(O, C, 30)\n        t4 = traceCompas(O, D, 30)\n\n        tri = polygoneAvecNom(A, B, O)\n        xm = Math.min(A.x, B.x, O.x) - 0.8\n        ym = Math.min(A.y, B.y, O.y) - 0.8\n        xM = Math.max(A.x, B.x, O.x) + 0.8\n        yM = Math.max(A.y, B.y, O.y) + 0.8\n        break\n      case 7:\n        A = point(0, 0, noms[0])\n        c1 = calcul(randint(30, 40) / 5) // AC\n        c2 = randint(25, 40)// angle OAB\n        c3 = randint(30, 45, c2) // angle OCB\n\n        C = pointAdistance(A, c1, randint(-30, 30), noms[2])\n        O = milieu(A, C, noms[4])\n        B = rotation(C, A, c2)\n        dd1 = droite(A, B)\n        D = rotation(A, C, -c3)\n        dd2 = droite(C, D)\n        B = pointIntersectionDD(dd1, dd2, noms[1])\n        D = rotation(B, O, 180, noms[3])\n        texte = `${nom} est un parallélogramme de centre $${noms[4]}$ tel que `\n        texte += `$${noms[0] + noms[2]}=${texNombre(c1)}$ cm.<br>$\\\\widehat{${noms[4] + noms[0] + noms[1]}}=${c2}\\\\degree$  dans le sens inverse des aiguilles d'une montre.<br>$\\\\widehat{${noms[4] + noms[2] + noms[1]}}=${c3}\\\\degree$  dans le sens des aiguilles d'une montre.<br>`\n        texte += `Construire le parallélogramme ${nom} et préciser si c'est un paraléllogramme particulier.<br>`\n        objetsEnonce.push(tracePoint(A, C), labelPoint(A, C))\n        if (this.correctionDetaillee) {\n          texteCorr += `Comme ${nom} est un parallélogramme, ses côtés opposés sont parallèles.<br>`\n          texteCorr += `La diagonale $[${noms[0]}${noms[2]}]$ forme des angles $\\\\widehat{${noms[4] + noms[0] + noms[1]}}$ et $\\\\widehat{${noms[4] + noms[2] + noms[3]}}$ alternes-internes égaux.<br>`\n          texteCorr += `De même les angles $\\\\widehat{${noms[4] + noms[0] + noms[3]}}$ et $\\\\widehat{${noms[4] + noms[2] + noms[1]}}$ sont alternes-internes égaux eux aussi.<br>`\n          texteCorr += `On en déduit que $\\\\widehat{${noms[4] + noms[0] + noms[3]}}=\\\\widehat{${noms[4] + noms[2] + noms[1]}}=${miseEnEvidence(c3, 'red')}\\\\degree$ et que $\\\\widehat{${noms[4] + noms[0] + noms[1]}}=\\\\widehat{${noms[4] + noms[2] + noms[3]}}=${miseEnEvidence(c2, 'blue')}\\\\degree$.<br>`\n          texteCorr += `Construisons tout d'abord le triangle $${noms[0] + noms[1] + noms[2]}$.<br>`\n          texteCorr += `Puis le points $${noms[3]}$ symétrique de $${noms[1]}$ par rapport à $${noms[4]}$.<br>`\n        }\n\n        texteCorr += `Le triangle $${noms[0] + noms[1] + noms[2]}$ n'est pas un triangle isocèle car ses angles ne sont pas égaux.<br>`\n        texteCorr += `De plus dans ce triangle  l'angle $\\\\widehat{${noms[0] + noms[1] + noms[2]}}$ mesure $${180 - c2 - c3}\\\\degree$ donc ${nom} ${texteGras('est un simple parallélogramme')}.<br>`\n        t1 = afficheMesureAngle(O, A, B, 'blue', 1, texNombre(c2) + '°')\n        t2 = afficheMesureAngle(O, C, B, 'red', 1, texNombre(c3) + '°')\n        t3 = traceCompas(O, D, 30)\n        t5 = tracePoint(O)\n        t5.style = '+'\n        objetsCorrection.push(t1, t2)\n        tri = polygoneAvecNom(A, B, C)\n        xm = Math.min(A.x, B.x, C.x) - 0.8\n        ym = Math.min(A.y, B.y, C.y) - 0.8\n        xM = Math.max(A.x, B.x, C.x) + 0.8\n        yM = Math.max(A.y, B.y, C.y) + 0.8\n        break\n    }\n    const p = polygoneAvecNom(A, B, C, D)\n\n    const xMin = Math.min(A.x, B.x, C.x, D.x) - 2\n    const yMin = Math.min(A.y, B.y, C.y, D.y) - 2\n    const xMax = Math.max(A.x, B.x, C.x, D.x) + 2\n    const yMax = Math.max(A.y, B.y, C.y, D.y) + 2\n\n    const cellule1 = celluleAlea(5)\n    const cellule2 = celluleAlea(5)\n    const cellule3 = celluleAlea(5)\n    const result1 = dansLaCibleCarree(B.x, B.y, 5, 0.3, cellule3)\n    const result2 = dansLaCibleCarree(C.x, C.y, 5, 0.3, cellule1)\n    const result3 = dansLaCibleCarree(D.x, D.y, 5, 0.3, cellule2)\n    const cible1 = cibleCarree({ x: result1[0], y: result1[1], rang: 5, num: '', taille: 0.4 })\n    cible1.taille = 0.3\n    cible1.color = 'gray'\n    cible1.opacite = 0.7\n    const cible2 = cibleCarree({ x: result2[0], y: result2[1], rang: 5, num: '', taille: 0.4 })\n    cible2.taille = 0.3\n    cible2.color = 'gray'\n    cible2.opacite = 0.7\n    const cible3 = cibleCarree({ x: result3[0], y: result3[1], rang: 5, num: '', taille: 0.4 })\n    cible3.taille = 0.3\n    cible3.color = 'gray'\n    cible3.opacite = 0.7\n    dd1 = segment(O, A)\n    dd2 = segment(O, B)\n    const dd3 = segment(O, C)\n    const dd4 = segment(O, D)\n\n    switch (typeDeQuestion) {\n      case 1:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, objetsCorrection, t1, t2, tri[0], tri[1], afficheLongueurSegment(D, B)) + '<br>'\n        objetsEnonce.push(cible3, cible2)\n        objetsCorrection.push(p[0], p[1], t3)\n        objetsCorrection.push(cible3, cible2, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D), afficheLongueurSegment(O, B))\n        break\n      case 2:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, codeSegments('||', 'red', A, O, O, C), t3, dd1, dd3, dd2, afficheMesureAngle(A, O, B, 'black', 1, alpha + '°'), tracePoint(A, O, C), labelPoint(A, O, C), texteParPosition('x', B.x - 0.5, B.y), afficheLongueurSegment(A, O), afficheLongueurSegment(O, C)) + '<br>'\n        objetsEnonce.push(cible3, cible2, cible1)\n        objetsCorrection.push(p[0], p[1], t3, afficheLongueurSegment(O, D))\n        objetsCorrection.push(cible3, cible2, cible1, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D), afficheMesureAngle(A, O, B, 'black', 1, alpha + '°'))\n\n        break\n      case 3:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, objetsCorrection, tri[0], tri[1], codageAngleDroit(D, A, B)) + '<br>'\n        objetsEnonce.push(cible3, cible2)\n        objetsCorrection.push(p[0], p[1], t1, t3)\n        objetsCorrection.push(cible3, cible2, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('||', 'red', B, O, O, D))\n\n        break\n      case 4:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, objetsCorrection, tri[0], tri[1], afficheLongueurSegment(D, B), t2, traceCompas(A, B, 60), traceCompas(A, D, 60)) + '<br>'\n        objetsEnonce.push(cible3, cible2)\n        objetsCorrection.push(p[0], p[1], t3, afficheLongueurSegment(O, B))\n        objetsCorrection.push(codageAngleDroit(A, O, D), cible3, cible2, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D))\n        break\n      case 5:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, tri[0], tri[1], demiDroite(A, B), demiDroite(A, D), afficheMesureAngle(B, A, D, 'black', 1, alpha + '°'), afficheLongueurSegment(A, B), afficheLongueurSegment(A, D)) + '<br>'\n        objetsEnonce.push(cible3, cible2)\n        objetsCorrection.push(p[0], p[1], t3)\n        objetsCorrection.push(cible3, cible2, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D), afficheMesureAngle(B, A, D, 'black', 1, alpha + '°'), afficheLongueurSegment(B, A), afficheLongueurSegment(A, D), afficheLongueurSegment(C, B), afficheLongueurSegment(D, C))\n\n        break\n      case 6:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, objetsCorrection, tri[0], tri[1], afficheLongueurSegment(B, A), afficheLongueurSegment(O, B), afficheLongueurSegment(A, O), t1, t2, t5) + '<br>'\n        objetsEnonce.push(cible3, cible2)\n        objetsCorrection.push(p[0], p[1], t3, t4)\n        objetsCorrection.push(cible3, cible2, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D))\n        break\n      case 7:\n        if (this.correctionDetaillee) texteCorr += mathalea2d({ xmin: xm, ymin: ym, xmax: xM, ymax: yM, pixelsParCm: 25, scale: 1 }, objetsCorrection, tri[0], tri[1], afficheLongueurSegment(C, O), afficheLongueurSegment(O, A), labelPoint(O), t5, codeSegments('||', 'red', A, O, O, C)) + '<br>'\n        objetsEnonce.push(cible3, cible1)\n        objetsCorrection.push(p[0], p[1], t3)\n        objetsCorrection.push(cible3, t1, t2, t3, cible1, dd1, dd2, dd3, dd4, labelPoint(O), codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D), afficheMesureAngle(O, A, D, 'red', 1, texNombre(c3) + '°'), afficheMesureAngle(O, C, D, 'blue', 1, texNombre(c2) + '°'))\n        break\n    }\n    texte += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 25, scale: 1 }, objetsEnonce)\n    texteCorr += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 25, scale: 1 }, objetsCorrection)\n\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de diffculté', 3, '1 : Figures faciles\\n2 : Figures plus difficiles\\n3 : Mélange']\n  // this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConstructionsParallelogrammesParticuliers","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","sup","correctionDetaillee","correctionDetailleeDisponible","nouvelleVersion","parseInt","listeQuestions","listeCorrections","autoCorrection","texte","texteCorr","celluleAlea","rang","lettreDepuisChiffre","randint","Number","toString","noms","choisitLettresDifferentes","nom","A","B","C","D","O","d1","d2","c1","c2","c3","c4","alpha","tri","t1","t2","t3","t4","t5","dd1","dd2","objetsEnonce","objetsCorrection","typesDeQuestionsDisponibles","xm","ym","xM","yM","typeDeQuestion","choice","point","calcul","Math","abs","min","max","pointAdistance","pointIntersectionCC","cercle","milieu","rotation","texNombre","push","tracePoint","labelPoint","longueur","texteGras","afficheLongueurSegment","traceCompas","polygoneAvecNom","x","y","similitude","texNombrec","arrondi","cercleCentrePoint","color","opacite","droite","pointIntersectionDD","miseEnEvidence","afficheMesureAngle","style","p","xMin","yMin","xMax","yMax","cellule1","cellule2","cellule3","result1","dansLaCibleCarree","result2","result3","cible1","cibleCarree","num","taille","cible2","cible3","segment","dd3","dd4","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","codeSegments","texteParPosition","codageAngleDroit","demiDroite","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","indexOf"],"sourceRoot":""}