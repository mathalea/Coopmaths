{"version":3,"file":"js/78978.0e29c923d7cbc67926c6.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/betaEq2eDegAvecParam.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { xcas, listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Equation du second degré avec paramètre'\n\n/**\n * Description didactique de l'exercice\n * @author Eric Schrafstetter\n * Référence\n*/\nexport default function equationDuSecondDegreAvecUnParametre () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Discutez, suivant la valeur du paramètre $m$, le $\\\\underline{\\\\text{nombre de solutions}}$ de l\\'équation du second degré'\n  this.nbQuestions = 2\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.typeExercice = 'XCas'\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = ['type1'] // On créé 3 types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, etape,texteCorr, a,a2,b2,c2,f, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n        a = randint(-5,5,0)\n        etape = [\n          `a:=${a}`,\n          `b:=randint(-2,2)*m+randint(-3,3)`,\n          `c:=randint(-2,2)*m+randint(-3,3)`,\n          `P:= a*x^2+b*x+c`,\n          `D:=b^2-4*a*c`,\n          `a2:=coeff(D,m,2)`,\n          `b2:=coeff(D,m,1)`,\n          `c2:=coeff(D,m,0)`,\n          `d2:=simplify(b2^2-4*a2*c2)`\n        ].forEach(e => `${xcas(e)}`) \n        // Enoncé                    \n        texte = `$${xcas(`expand(P)`)}=0$`\n        // Corrigé\n        texteCorr = `Ecrivons l'équation sous la forme $ax^2+bx+c=0$ :`\n        texteCorr += `<br>$${xcas(`P`)}=0$`         \n        texteCorr += `<br>On a donc $a=${xcas(`a`)}$, $b=${xcas(`b`)}$ et $c=${xcas(`c`)}$`\n        texteCorr += `<br>Le discriminant vaut $\\\\Delta=b^2-4\\\\times a\\\\times c = ${xcas(`D`)}$`\n        texteCorr += `<br>Ou encore, sous forme développée : $\\\\Delta = ${xcas(`simplify(D)`)}$`   \n        a2 = +`${xcas(`a2`)}` // coefficient \"a\" dans l'écriture de Delta\n        b2 = +`${xcas(`b2`)}` // coefficient \"b\" dans l'écriture de Delta        \n        if (a2 == 0) { // Eq du 1er degré\n          etape = `${xcas(`m1:=simplify(-c2/b2)`)}` \n          if (b2 > 0) { // Delta est une droite croissante\n              texteCorr += `<br>Cherchons la valeur de $m$ qui annule cette expression du premier degré : $m=${xcas(`m1`)}$` \n              texteCorr += `<br>$\\\\Delta$ est une droite croissante de coefficient directeur $${xcas(`b2`)}$.`\n              texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ :` \n              texteCorr += `<br>- Si $m < ${xcas(`m1`)}$, l'équation n'a pas de solution réelle;`  \n              texteCorr += `<br>- Si $m = ${xcas(`m1`)}$, l'équation a une unique solution réelle;`  \n              texteCorr += `<br>- Si $m > ${xcas(`m1`)}$, l'équation a 2 solutions réelles;`                  \n          } else if (b2 <0) { // Delta est une droite décroissante\n              texteCorr += `<br>Cherchons la valeur de $m$ qui annule cette expression du premier degré : $m=${xcas(`m1`)}$` \n              texteCorr += `<br>$\\\\Delta$ est une droite décroissante de coefficient directeur $${xcas(`b2`)}$.`\n              texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ :` \n              texteCorr += `<br>- Si $m < ${xcas(`m1`)}$, l'équation a 2 solutions réelles;`  \n              texteCorr += `<br>- Si $m = ${xcas(`m1`)}$, l'équation a une unique solution réelle;`  \n              texteCorr += `<br>- Si $m > ${xcas(`m1`)}$, l'équation n'a pas de solution réelle;`    \n          } else { // Delta est constant\n              c2 = +`${xcas(`c2`)}` // coefficient \"c\" dans l'écriture de Delta  \n              if (c2 == 0) {\n                  texteCorr += `<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est nul. L'équation du départ admet donc toujours une unique solution.`\n              } else if (c2 > 0) {\n                  texteCorr += `<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est strictement positif. L'équation du départ admet donc toujours 2 solutions.`\n                } else {\n                  texteCorr += `<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est strictement négatif. L'équation du départ admet jamais de solution réelle.`                    \n                }\n          }\n        } else {\n\n          texteCorr += `<br>Cherchons les valeurs de $m$ qui annulent cette expression du second degré :` \n          texteCorr += `<br>Le discriminant $\\\\Delta^\\\\prime$ vaut : $\\\\Delta^\\\\prime =${xcas(`d2`)}$` \n          a = +`${xcas(`d2`)}` // valeur de Delta'\n          f = eval(`${xcas(`ifactors(d2)`)}`).some((v,i) => v > 1 && i%2==1) // Y a-t-il des carrés dans Delta' ?\n          if (f && a > 0) {\n              texteCorr += ` (Remarquons que $\\\\sqrt{\\\\Delta^\\\\prime} =${xcas(`simplify(sqrt(d2))`)}$)`\n          }\n          if (a < 0) {\n              texteCorr += `<br>Celui-ci étant strictement négatif, l'équation n'a pas de solution et $\\\\Delta$ ne change pas de signe.` \n              if (a2 > 0) {\n                  texteCorr += `<br>Comme le coefficient devant $m^2$ est positif, $\\\\Delta > 0$.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : L'équation du départ admet toujours 2 solutions.`                \n              } else {\n                  texteCorr += `<br>Comme le coefficient devant $m^2$ est négatif, $\\\\Delta < 0$.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : L'équation du départ n'a pas de solution réelle.`  \n              }         \n\n          } else if (a == 0) {\n\n              etape = `${xcas(`m1:=simplify(-b2/(2*a2))`)}`   \n              texteCorr += `<br>Celui-ci étant nul, l'équation $\\\\Delta = 0$ a une unique solution $m=\\\\dfrac{-b}{2a}=${xcas(`m1`)}$.`\n              if (a2 > 0) {\n                  texteCorr += `<br>De plus le coefficient $${xcas(`a2`)}$ devant $m^2$ étant positif, $\\\\Delta > 0$ si $m\\\\neq${xcas(`m1`)}$.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : Si $m=${xcas(`m1`)}$ l'équation admet une unique solution, sinon l'équation admet 2 solutions.`                \n              } else {\n                  texteCorr += `<br>De plus le coefficient $${xcas(`a2`)}$ devant $m^2$ étant négatif, $\\\\Delta < 0$ si $m\\\\neq${xcas(`m1`)}$.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : Si $m=${xcas(`m1`)}$ l'équation admet une unique solution, sinon l'équation n'admet pas de solution.`  \n              }              \n          } else {\n\n              etape = `${xcas(`m1:=min((-b2-sqrt(d2))/(2*a2),(-b2+sqrt(d2))/(2*a2))`)}`   \n              etape = `${xcas(`m2:=max((-b2-sqrt(d2))/(2*a2),(-b2+sqrt(d2))/(2*a2))`)}`   \n              texteCorr += `<br>Celui-ci étant strictement positif, l'équation $\\\\Delta = 0$ a 2 solutions :`\n              texteCorr += `<br>$m_1=${xcas(`m1`)}\\\\simeq${xcas(`approx(m1,4)`)}$ et $m_2=${xcas(`m2`)}\\\\simeq${xcas(`approx(m2,4)`)}$`\n              if (a2 > 0) {\n                  texteCorr += `<br>De plus le coefficient devant $m^2$ est positif, $\\\\Delta$ est donc une parabole avec ses branches dirigées vers le haut.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ :<br> - Si $m=m_1$ ou $m_2$, l'équation admet une unique solution,`  \n                  texteCorr += `<br>- Si $m\\\\in \\]m_1,m_2\\[$, l'équation n'a pas de solution réelle,` \n                  texteCorr += `<br>- Si $m\\\\in \\]-\\\\infty,m_1\\[\\\\cup\\]m_2,+\\\\infty\\[$, l'équation admet 2 solutions réelles`                \n              } else {\n                  texteCorr += `<br>De plus le coefficient devant $m^2$ est négatif, $\\\\Delta$ est donc une parabole avec ses branches dirigées vers le bas.` \n                  texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ :<br> - Si $m=m_1$ ou $m_2$, l'équation admet une unique solution,`  \n                  texteCorr += `<br>- Si $m\\\\in \\]m_1,m_2\\[$, l'équation admet 2 solutions réelles,` \n                  texteCorr += `<br>- Si $m\\\\in \\]-\\\\infty,m_1\\[\\\\cup\\]m_2,+\\\\infty\\[$, l'équation admet n'a pas de solution réelle`              }           \n          }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté', 3]\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","equationDuSecondDegreAvecUnParametre","sup","typeExercice","context","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","texte","etape","texteCorr","a","a2","b2","c2","f","cpt","randint","forEach","e","xcas","eval","some","v","listeQuestionsToContenu"],"sourceRoot":""}