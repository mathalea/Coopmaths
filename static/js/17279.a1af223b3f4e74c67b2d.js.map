{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6M22.js","webpack://mathalea/./src/js/exercices/6e/_Exercice_perimetres_et_aires.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Reglages6M22","ExercicePerimetresEtAires","this","sup","difficulte","Exercice","consigne","spacing","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","tripletsPythagoriciens","typesDeQuestions","partieDecimale1","partieDecimale2","typesDeQuestionsDisponibles","sup2","calcul","randint","enleveElement","nbCols","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","cote","nomCarre","L","l","nomRectangle","a","b","c","nomTriangle","triplet","R","donneLeDiametre","i","cpt","creerNomDePolygone","choice","texNombre","texNombrec","arrondiVirgule","Math","PI","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbColsCorr","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/17279.a1af223b3f4e74c67b2d.js","sourcesContent":["import ExercicePerimetresEtAires from './_Exercice_perimetres_et_aires.js'\n\nexport const titre = 'Périmètres et aires de disques (à partir d’un texte).'\n\n/** */\n// Référence 6M22\nexport default function Reglages6M22 () {\n  ExercicePerimetresEtAires.call(this)\n  this.sup = 2\n  this.titre = titre\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, combinaisonListes, arrondiVirgule, calcul, texNombrec, creerNomDePolygone, texNombre } from '../../modules/outils.js'\n\n/**\n * Déterminer le périmètre et l'aire d'un carré, d'un rectangle, d'un triangle rectangle, d'un cercle\n *\n * * 1 : Carré, rectangle et triangle rectangle\n * * 2: Uniquement des cercles\n * * 3 : Les 4 sont demandés\n * @author Rémi Angot// modifié par Mireille Gain pour le support des décimaux\n */\nexport default function ExercicePerimetresEtAires (difficulte = 1) {\n  // Calculer le périmètre et l'aire de figures\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = difficulte\n  this.titre = \"Calculs de périmètres et d'aires\"\n  this.consigne =\n    'Pour chacune des figures, calculer son périmètre puis son aire (valeur exacte et si nécessaire valeur approchée au dixième près).'\n  this.spacing = 1\n  this.nbQuestions = 4\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const tripletsPythagoriciens = [\n      [3, 4, 5],\n      [6, 8, 10],\n      [15, 8, 17],\n      [24, 10, 26],\n      [5, 12, 13],\n      [12, 16, 20],\n      [21, 20, 29],\n      [9, 40, 41]\n    ]\n    let typesDeQuestionsDisponibles = [\n      'carre',\n      'rectangle',\n      'triangle_rectangle',\n      'cercle'\n    ]; let typesDeQuestions\n    let partieDecimale1, partieDecimale2\n    if (this.sup2) {\n      partieDecimale1 = calcul(randint(1, 9) / 10)\n      partieDecimale2 = calcul(randint(1, 9) / 10)\n    } else {\n      partieDecimale1 = 0\n      partieDecimale2 = 0\n    }\n\n    if (this.sup === 1) {\n      enleveElement(typesDeQuestionsDisponibles, 'cercle')\n      this.nbCols = 1\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = ['cercle']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cote, nomCarre, L, l, nomRectangle, a, b, c, nomTriangle, triplet, R, donneLeDiametre, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 'carre':\n          cote = calcul(randint(2, 11) + partieDecimale1)\n          nomCarre = creerNomDePolygone(4)\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un carré $${nomCarre}$ de $${texNombre(cote)}$ cm de côté .`\n          } else {\n            texte = `Un carré $${nomCarre}$ tel que $${nomCarre[0] + nomCarre[1]} = ${texNombre(cote)}$ cm.`\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nomCarre}}=4\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(4 * cote)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomCarre}}=${texNombre(cote)}~\\\\text{cm}\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(cote * cote)}~\\\\text{cm}^2$`\n          break\n        case 'rectangle':\n          L = calcul(randint(3, 11) + partieDecimale2)\n          l = randint(2, L - 1)\n          nomRectangle = creerNomDePolygone(4)\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un rectangle $${nomRectangle}$ de $${texNombre(L)}$ cm de longueur et de $${l}$ cm de largeur.`\n          } else {\n            texte = `Un rectangle $${nomRectangle}$ tel que $${nomRectangle[0] + nomRectangle[1] + ' = ' + texNombre(L)}$ cm et $${nomRectangle[1] + nomRectangle[2] + ' = ' + l}$ cm.`\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nomRectangle}}=(${texNombre(L)}~\\\\text{cm}+${l}~\\\\text{cm})\\\\times2=${texNombrec((L + l) * 2)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomRectangle}}=${texNombre(L)}~\\\\text{cm}\\\\times${l}~\\\\text{cm}=${texNombrec(L * l)}~\\\\text{cm}^2$`\n          break\n        case 'triangle_rectangle':\n          triplet = choice(tripletsPythagoriciens)\n          enleveElement(tripletsPythagoriciens, triplet)\n          a = calcul(triplet[0] * (1 + partieDecimale1))\n          b = calcul(triplet[1] * (1 + partieDecimale1))\n          c = calcul(triplet[2] * (1 + partieDecimale1))\n          nomTriangle = creerNomDePolygone(3)\n          if (choice([true, false])) {\n            texte = `Un triangle $${nomTriangle}$ rectangle en $${nomTriangle[1]}$ tel que $${nomTriangle[0] + nomTriangle[1] + ' = ' + texNombre(a)}$ cm, $${nomTriangle[1] + nomTriangle[2] + ' = ' + texNombre(b)}$ cm\\\n et $${nomTriangle[0] + nomTriangle[2] + ' = ' + texNombre(c)}$ cm.`\n          } else {\n            texte = `Un triangle rectangle $${nomTriangle}$ a pour côtés : $${texNombre(a)}$ cm, $${texNombre(c)}$ cm et $${texNombre(b)}$ cm.`\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nomTriangle}}=${texNombre(a)}~\\\\text{cm}+${texNombre(b)}\n          ~\\\\text{cm}+${texNombre(c)}~\\\\text{cm}=${texNombre(a + b + c)}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}_{${nomTriangle}}=${texNombre(a)}~\\\\text{cm}\\\\times${texNombre(b)}~\\\\text{cm}\\\\div2=${texNombrec(a * b / 2)}~\\\\text{cm}^2$`\n          break\n        case 'cercle':\n          R = randint(3, 11)\n          donneLeDiametre = choice([true, false])\n          if (donneLeDiametre) {\n            texte = `Un cercle de $${2 * R}$ cm de diamètre.`\n            texteCorr = `Le diamètre est de $${2 * R}$ cm donc le rayon est de $${R}$ cm.<br>`\n          } else {\n            texte = `Un cercle de $${R}$ cm de rayon.`\n            texteCorr = ''\n          }\n\n          texteCorr += `$\\\\mathcal{P}=2\\\\times${R}\\\\times\\\\pi~\\\\text{cm}=${2 * R}\\\\pi~\\\\text{cm}\\\\approx${arrondiVirgule(\n            2 * R * Math.PI,\n            1\n          )}~\\\\text{cm}$<br>`\n          texteCorr += `$\\\\mathcal{A}=${R}\\\\times${R}\\\\times\\\\pi~\\\\text{cm}^2=${R * R}\\\\pi~\\\\text{cm}^2\\\\approx${arrondiVirgule(\n            R * R * Math.PI,\n            1\n          )}~\\\\text{cm}^2$`\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    3,\n    '1 : Carré, rectangle et triangle rectangle\\n2: Cercles\\n3: Mélangé'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des décimaux', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}