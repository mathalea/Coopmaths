{"version":3,"file":"js/51877.3d257fd13a34c6e545cb.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/Profs/P011.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { mathalea2d, polygoneAvecNom, codeSegments, codageAngleDroit, afficheMesureAngle, afficheLongueurSegment } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Construis mon triangle'\n\nexport default function ConstruisMonTriangle () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 1 // Ici le nombre de questions\n  this.nbQuestionsModifiable = false // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = true // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.sup = 1\n  this.sup2 = 'ABC'\n  this.sup3 = '3 4 5'\n  this.typeExercice = 'IEP'\n\n  this.nouvelleVersion = function () {\n    const params = this.sup3.split(' ')\n    const type = parseInt(this.sup)\n    const nom = this.sup2\n    const anim = new Alea2iep()\n    let triangle\n    const objetsEnonceml = []\n    for (let i = 0; i < params.length; i++) {\n      params[i] = parseFloat(params[i])\n    }\n    switch (type) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n      case 1:\n\n        triangle = anim.triangle3longueurs(nom, params[0], params[1], params[2], true, true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[1], triangle[0]), afficheLongueurSegment(triangle[2], triangle[1]), afficheLongueurSegment(triangle[0], triangle[2]))\n        break\n\n      case 2:\n        triangle = anim.triangle1longueur2angles(nom, params[0], params[1], params[2], true, true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[1], triangle[0]), afficheMesureAngle(triangle[2], triangle[0], triangle[1]), afficheMesureAngle(triangle[0], triangle[1], triangle[2]))\n\n        break\n\n      case 3:\n        triangle = anim.triangleRectangle2Cotes(nom, params[0], params[1], true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[1], triangle[0]), afficheLongueurSegment(triangle[2], triangle[1]), codageAngleDroit(triangle[0], triangle[1], triangle[2]))\n        break\n\n      case 4:\n        triangle = anim.triangleRectangleCoteHypotenuse(nom, params[0], params[1], true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[1], triangle[0]), afficheLongueurSegment(triangle[0], triangle[2]), codageAngleDroit(triangle[0], triangle[1], triangle[2]))\n        break\n\n      case 5:\n        triangle = anim.triangleEquilateral(nom, params[0], true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[1], triangle[0]), codeSegments('||', 'red', triangle[0], triangle[1], triangle[2], triangle[0], triangle[1], triangle[2]))\n        break\n\n      case 6:\n        triangle = anim.triangle2longueurs1angle(nom, params[0], params[1], params[2], true)\n        objetsEnonceml.push(afficheLongueurSegment(triangle[0], triangle[1]), afficheLongueurSegment(triangle[0], triangle[2]), afficheMesureAngle(triangle[1], triangle[0], triangle[2]))\n        break\n    }\n    const poly = polygoneAvecNom(triangle)\n    objetsEnonceml.push(poly[0], poly[1])\n    const paramsEnonce = {\n      xmin: Math.min(triangle[0].x - 1, triangle[1].x - 1, triangle[2].x - 1),\n      ymin: Math.min(triangle[0].y - 1, triangle[1].y - 1, triangle[2].y - 1),\n      xmax: Math.max(triangle[0].x + 1, triangle[1].x + 1, triangle[2].x + 1),\n      ymax: Math.max(triangle[0].y + 1, triangle[1].y + 1, triangle[2].y + 1),\n      pixelsParCm: 20,\n      scale: 1,\n      mainlevee: true,\n      amplitude: 0.5\n    }\n    const texte = mathalea2d(paramsEnonce, objetsEnonceml) + '<br>' + anim.htmlBouton(this.numeroExercice)\n    this.contenu = texte\n  }\n  this.besoinFormulaireNumerique = ['Type de triangle', 6, '1 : Triangle par 3 longueurs\\n 2 : Triangle par 1 longueur et 2 angles\\n 3 : Triangle rectangle 2 côtés angle droit\\n 4 : Triangle rectangle 1 coté et l\\'hypoténuse\\n 5 : Triangle équilatéral\\n 6 : Triangle 2 longueurs et l\\'angle entre ces côtés']\n  this.besoinFormulaire2Texte = ['Nom du triangle', 'ABC par exemple']\n  this.besoinFormulaire3Texte = ['paramètres séparés par des espaces', '3 4 5']\n} // Fin de l'exercice.\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","ConstruisMonTriangle","pas_de_version_HMTL","sup","sup2","sup3","typeExercice","params","split","type","parseInt","nom","anim","Alea2iep","triangle","objetsEnonceml","length","parseFloat","triangle3longueurs","afficheLongueurSegment","triangle1longueur2angles","afficheMesureAngle","triangleRectangle2Cotes","codageAngleDroit","triangleRectangleCoteHypotenuse","triangleEquilateral","codeSegments","triangle2longueurs1angle","poly","polygoneAvecNom","paramsEnonce","xmin","Math","min","x","ymin","y","xmax","max","ymax","pixelsParCm","scale","mainlevee","amplitude","texte","mathalea2d","htmlBouton"],"sourceRoot":""}