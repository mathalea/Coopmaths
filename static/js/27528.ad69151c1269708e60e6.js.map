{"version":3,"file":"js/27528.ad69151c1269708e60e6.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C32-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, choice, calcul, randint, texNombre, modalTexteCourt } from '../../modules/outils.js'\nexport const titre = 'Puissances de 10 et préfixes kilo, méga, giga, téra'\n\n/**\n * Utiliser les puissances de 10 et les préfixes kilo, Méga, Giga, Téra\n * @author Rémi Angot\n * Référence 4C32-2\n * 2021-02-05\n*/\nexport default function ConversionsPuissancesDe10 (numeroExercice) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Compléter'\n  this.nbQuestions = 10\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  // this.sup = 1; // Niveau de difficulté\n  // this.tailleDiaporama = 3; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.correction_detaille_disponible = true\n  this.correctionDetaillee = !!context.isHtml\n\n  this.boutonAide = modalTexteCourt(numeroExercice,\n    `Téra : mille-milliards $\\\\times10^{12}$<br>\nGiga : milliard $\\\\times10^9$<br>\nMéga : millions $\\\\times10^6$<br>\nkilo : mille $\\\\times10^{3}$<br>\nmilli : millième $\\\\times10^{-3}$<br>\nmicro : millionième $\\\\times10^{-6}$<br>\nnano : milliardième $\\\\times10^{-9}$<br>\n`, 'Signification des préfixes'\n  )\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = ['m>km', 'u>M', 'u>G', 'g>t', 'M>G', 'M>T', 'G>T', 'm>mm', 'm>um', 'm>nm'] // On créé 3 types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    const listeDeSens = combinaisonListes(['div', 'fois'], this.nbQuestions)\n    for (let i = 0, a, n, unite, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      a = choice([calcul(randint(1, 9) + randint(1, 9) / 10), calcul(randint(11, 99) + randint(1, 9) / 10 + randint(1, 9) / 100), calcul(randint(11, 999) + randint(1, 9) / 10)], calcul(randint(10000, 99999) / 100))\n      texte = ''\n      texteCorr = ''\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'm>km':\n          n = randint(6, 12)\n          if (listeDeSens[i] === 'div') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{km}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Il faut $1~000$ m pour 1 km, on va donc diviser par $1~000$, c'est-à-dire multiplier par $10^{-3}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}\\\\times10^{${n - 3}}~\\\\text{km}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{km} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{m}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"$1~\\\\text{km}=1~000~\\\\text{km}$, on va donc multiplier par $1~000$, c'est-à-dire multiplier par $10^{3}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{km} = ${texNombre(a)}\\\\times10^{${n + 3}}~\\\\text{m}$`\n          }\n          break\n        case 'u>M':\n          n = randint(11, 20)\n          unite = choice([['W', 'watts'], ['Wh', 'watts-heure']])\n          if (listeDeSens[i] === 'div') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{M${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Il faut 1 million de ${unite[1]} pour 1 M${unite[0]}, on va donc diviser par 1 million, c'est-à-dire multiplier par $10^{-6}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{${unite[0]}} = ${texNombre(a)}\\\\times10^{${n - 6}}~\\\\text{M${unite[0]}}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `1 M${unite[0]} c'est un million de ${unite[1]}, on va donc multiplier par 1 million, c'est-à-dire multiplier par $10^{6}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}\\\\times10^{${n + 6}}~\\\\text{${unite[0]}}$`\n          }\n          break\n        case 'u>G':\n          unite = choice([['W', 'watts'], ['Wh', 'watts-heure']])\n          if (listeDeSens[i] === 'div') {\n            n = randint(13, 20)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{G${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Il faut 1 milliard de ${unite[1]} pour 1 G${unite[0]}, on va donc diviser par 1 milliard, c'est-à-dire multiplier par $10^{-9}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{${unite[0]}} = ${texNombre(a)}\\\\times10^{${n - 9}}~\\\\text{G${unite[0]}}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(4, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `1 G${unite[0]} c'est un milliard de ${unite[1]}, on va donc multiplier par 1 milliard, c'est-à-dire multiplier par $10^{9}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}\\\\times10^{${n + 9}}~\\\\text{${unite[0]}}$`\n          }\n          break\n        case 'g>t':\n          if (listeDeSens[i] === 'div') {\n            n = randint(13, 20)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{g} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{t}$`\n            if (this.correctionDetaillee) {\n              texteCorr += 'Il faut 1 million de grammes pour 1 tonne, on va donc diviser par 1 million, c\\'est-à-dire multiplier par $10^{-6}$.<br>'\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{g} = ${texNombre(a)}\\\\times10^{${n - 6}}~\\\\text{t}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(4, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{t} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{g}$`\n            if (this.correctionDetaillee) {\n              texteCorr += 'Une tonne c\\'est un million de grammes, on va donc multiplier par 1 million, c\\'est-à-dire multiplier par $10^{6}$.<br>'\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{t} = ${texNombre(a)}\\\\times10^{${n + 6}}~\\\\text{g}$`\n          }\n          break\n        case 'M>G':\n          unite = choice([['W', 'watts'], ['Wh', 'watts-heure']])\n          if (listeDeSens[i] === 'div') {\n            n = randint(8, 12)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{G${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Il faut mille-millions de ${unite[1]} pour faire 1 milliard de ${unite[1]}, on va donc diviser par mille, c'est-à-dire multiplier par $10^{-3}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}\\\\times10^{${n - 3}}~\\\\text{G${unite[0]}}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(4, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{M${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Un milliard de ${unite[1]} c'est mille-millions de ${unite[1]}, on va donc multiplier par mille, c'est-à-dire multiplier par $10^{3}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}\\\\times10^{${n + 3}}~\\\\text{M${unite[0]}}$`\n          }\n          break\n        case 'M>T':\n          unite = choice([['W', 'watts'], ['Wh', 'watts-heure']])\n          if (listeDeSens[i] === 'div') {\n            n = randint(9, 15)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{T${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Il faut mille  méga-${unite[1]} pour faire un giga-${unite[1]} et mille giga-${unite[1]} pour faire un téra-${unite[1]}, on va donc diviser par un million, c'est-à-dire multiplier par $10^{-6}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{M${unite[0]}} = ${texNombre(a)}\\\\times10^{${n - 6}}~\\\\text{T${unite[0]}}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(4, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{T${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{M${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Un téra-${unite[1]} c'est mille giga-${unite[1]} donc un million de méga-${unite[1]}, on va donc multiplier par un million, c'est-à-dire multiplier par $10^{6}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{T${unite[0]}} = ${texNombre(a)}\\\\times10^{${n + 6}}~\\\\text{M${unite[0]}}$`\n          }\n          break\n        case 'G>T':\n          unite = choice([['W', 'watts'], ['Wh', 'watts-heure']])\n          if (listeDeSens[i] === 'div') {\n            n = randint(8, 12)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{T${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Il faut mille-milliards de ${unite[1]} pour faire 1 T${unite[0]}, on va donc diviser par mille, c'est-à-dire multiplier par $10^{-3}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{G${unite[0]}} = ${texNombre(a)}\\\\times10^{${n - 3}}~\\\\text{T${unite[0]}}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(4, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{T${unite[0]}} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{G${unite[0]}}$`\n            if (this.correctionDetaillee) {\n              texteCorr += `Un téra-${unite[1]} c'est mille-milliards de ${unite[1]}, on va donc multiplier par mille, c'est-à-dire multiplier par $10^{3}$.<br>`\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{T${unite[0]}} = ${texNombre(a)}\\\\times10^{${n + 3}}~\\\\text{G${unite[0]}}$`\n          }\n          break\n        case 'm>mm':\n          n = randint(6, 12)\n          if (listeDeSens[i] === 'div') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{mm} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{m}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Il faut $1~000$ mm pour 1 m, on va donc diviser par $1~000$, c'est-à-dire multiplier par $10^{-3}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{mm} = ${texNombre(a)}\\\\times10^{${n - 3}}~\\\\text{m}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{mm}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"$1~\\\\text{m}=1~000~\\\\text{mm}$, on va donc multiplier par $1~000$, c'est-à-dire multiplier par $10^{3}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}\\\\times10^{${n + 3}}~\\\\text{mm}$`\n          }\n          break\n        case 'm>um':\n          if (listeDeSens[i] === 'div') {\n            n = randint(3, 10)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\mu\\\\text{m} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{m}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Il faut un million de $\\\\mu\\\\text{m}$ pour 1 m, on va donc diviser par un million, c'est-à-dire multiplier par $10^{-6}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\mu\\\\text{m} = ${texNombre(a)}\\\\times10^{${n - 6}}~\\\\text{m}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(3, 10, [6]) * (-1)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\mu\\\\text{m}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Un mètre équivaut à un million de micro-mètres, on va donc multiplier par un million, c'est-à-dire multiplier par $10^{6}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}\\\\times10^{${n + 6}}~\\\\mu\\\\text{m}$`\n          }\n          break\n        case 'm>nm':\n          if (listeDeSens[i] === 'div') {\n            n = randint(3, 8)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{nm} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{m}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Il faut un milliard de nano-mètres pour 1 m, on va donc diviser par un milliard, c'est-à-dire multiplier par $10^{-9}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{nm} = ${texNombre(a)}\\\\times10^{${n - 9}}~\\\\text{m}$`\n          }\n          if (listeDeSens[i] === 'fois') {\n            n = randint(3, 12, [9, 11]) * (-1)\n            texte = `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}~\\\\ldots\\\\ldots~\\\\text{nm}$`\n            if (this.correctionDetaillee) {\n              texteCorr += \"Un mètre équivaut à un milliard de nano-mètres, on va donc multiplier par un milliard, c'est-à-dire multiplier par $10^{9}$.<br>\"\n            }\n            texteCorr += `$${texNombre(a)}\\\\times10^{${n}}~\\\\text{m} = ${texNombre(a)}\\\\times10^{${n + 9}}~\\\\text{nm}$`\n          }\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConversionsPuissancesDe10","numeroExercice","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","video","correction_detaille_disponible","correctionDetaillee","context","boutonAide","modalTexteCourt","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","listeDeSens","a","n","unite","texte","texteCorr","i","cpt","choice","calcul","randint","texNombre","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}