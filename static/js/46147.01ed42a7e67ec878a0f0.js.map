{"version":3,"file":"js/46147.01ed42a7e67ec878a0f0.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6C11-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes2, texNombre, texteEnCouleurEtGras, rangeMinMax, combinaisonListes, choice, range, contraindreValeur, enleveElementNo, enleveElement } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { max, min, mod } from 'mathjs'\nexport const titre = \"Trouver le vocabulaire associé aux termes de l'égalité issue de la division euclidienne\"\n\nexport const amcReady = true\nexport const amcType = 'AMCOpen'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n// Gestion de la date de publication initiale\nexport const dateDePublication = '25/10/2021'\n\n/**\n * Détermination du vocabulaire associé à l'égalité issue de la division euclidienne\n *\n * @author Eric ELTER\n * Référence 6C11-2\n */\nexport default function VocabulaireDivisionEuclidienne () {\n  Exercice.call(this)\n  this.titre = titre\n  this.spacing = 1\n  this.nbQuestions = 5\n  this.sup = 1\n  this.sup2 = 1\n  this.sup3 = 1\n  this.sup4 = 3\n\n  this.nouvelleVersion = function () {\n    this.consigne = 'En utilisant le vocabulaire associé à la division euclidienne, détermine, '\n    this.consigne += this.nbQuestions === 1 ? \"pour l'égalité proposée, \" : 'pour chaque égalité proposée, '\n    this.consigne += 'le mot adapté au nombre désigné.'\n    this.autoCorrection = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const QuestionsDisponibles = range(3)\n    if (this.sup) {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est que le nombre a été saisi dans la barre d'adresses\n        enleveElementNo(QuestionsDisponibles, contraindreValeur(-1, 3, this.sup - 1, -1))\n      } else {\n        const QuestionsDisponibles2 = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n        for (let i = 0; i < QuestionsDisponibles2.length; i++) { // on a un tableau avec des strings : ['1', '1', '2']\n          if (QuestionsDisponibles.length > 2) {\n            enleveElement(QuestionsDisponibles, contraindreValeur(-1, 3, parseInt(QuestionsDisponibles2[i]) - 1, -1))\n          }\n        }\n      }\n    }\n    const ChoixReponses = ['dividende', 'diviseur', 'quotient', 'reste']\n    const ChoixQuestions = this.sup2 === 2 ? combinaisonListes2(QuestionsDisponibles, this.nbQuestions) : combinaisonListes(QuestionsDisponibles, this.nbQuestions)\n    let ReponsesCorrectes = []\n    const Nbutilises = []\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b, q, r; i < this.nbQuestions && cpt < 50;) {\n      Nbutilises[0] = 0\n      Nbutilises[1] = randint(5, 99)\n      switch (this.sup4) {\n        case 1 :\n          Nbutilises[2] = randint(4, Nbutilises[1] - 1)\n          Nbutilises[3] = randint(Nbutilises[2], Nbutilises[1] - 1)\n          break\n        case 2 :\n          Nbutilises[2] = randint(5, 99, [Nbutilises[1]])\n          Nbutilises[3] = randint(4, min(Nbutilises[2], Nbutilises[1]) - 1)\n          break\n        default :\n          Nbutilises[2] = randint(5, 99, [Nbutilises[1]])\n          Nbutilises[3] = randint(4, max(Nbutilises[2], Nbutilises[1]) - 1, [min(Nbutilises[2], Nbutilises[1])])\n          break\n      }\n      Nbutilises[0] = Nbutilises[2] * Nbutilises[1] + Nbutilises[3]\n      const TabCorrection = []\n      TabCorrection[0] = `$${texNombre(Nbutilises[0])}$ est le dividende`\n      TabCorrection[1] = ''\n      TabCorrection[2] = ''\n      TabCorrection[3] = `$${Nbutilises[3]}$ est le reste`\n      const TabEgaliteDivEuclidienne = []\n      TabEgaliteDivEuclidienne[0] = `$${texNombre(Nbutilises[0])} = ${Nbutilises[1]} \\\\times ${Nbutilises[2]} + ${Nbutilises[3]}$`\n      TabEgaliteDivEuclidienne[1] = `$${texNombre(Nbutilises[0])} = ${Nbutilises[3]} + ${Nbutilises[1]} \\\\times ${Nbutilises[2]}$`\n      TabEgaliteDivEuclidienne[2] = `$${Nbutilises[1]} \\\\times ${Nbutilises[2]} + ${Nbutilises[3]} = ${texNombre(Nbutilises[0])}$`\n      TabEgaliteDivEuclidienne[3] = `$${Nbutilises[3]} + ${Nbutilises[1]} \\\\times ${Nbutilises[2]} = ${texNombre(Nbutilises[0])}$`\n      let EgaliteDivEuclidienne\n      switch (this.sup3) {\n        case 1 :\n          EgaliteDivEuclidienne = TabEgaliteDivEuclidienne[0]\n          break\n        case 2 :\n          EgaliteDivEuclidienne = TabEgaliteDivEuclidienne[choice(rangeMinMax(1, 3))]\n          break\n        default :\n          EgaliteDivEuclidienne = TabEgaliteDivEuclidienne[choice(range(3))]\n          break\n      }\n      texte = 'Dans ' + EgaliteDivEuclidienne + `, quel nom porte $${texNombre(Nbutilises[ChoixQuestions[i]])}$ lorsque l'égalité est associée à une division euclidienne ?<br>`\n      if (Nbutilises[3] < Nbutilises[1]) {\n        if (Nbutilises[3] < Nbutilises[2]) {\n          texteCorr = `$${Nbutilises[3]}$ est inférieur à $${Nbutilises[1]}$ et à $${Nbutilises[2]}$ donc l'égalité ` + EgaliteDivEuclidienne + ' peut être associée à deux divisions euclidiennes différentes :<br>'\n          TabCorrection[1] = `$${Nbutilises[1]}$ est le diviseur`\n          TabCorrection[2] = `$${Nbutilises[2]}$ est le quotient`\n          texteCorr += ` 1. la division euclidienne de $ ${texNombre(Nbutilises[0])} $ par $ ${Nbutilises[1]} $. Alors, `\n          for (let kk = 0; kk < 3; kk++) {\n            texteCorr += kk === ChoixQuestions[i] ? texteEnCouleurEtGras(TabCorrection[kk]) : TabCorrection[kk]\n            texteCorr += kk < 2 ? ', ' : ' et '\n          }\n          texteCorr += ChoixQuestions[i] === 3 ? texteEnCouleurEtGras(TabCorrection[3]) : TabCorrection[3]\n          texteCorr += '.<br>'\n          TabCorrection[1] = `$${Nbutilises[1]}$ est le quotient`\n          TabCorrection[2] = `$${Nbutilises[2]}$ est le diviseur`\n          TabCorrection[ChoixQuestions[i]] = texteEnCouleurEtGras(TabCorrection[ChoixQuestions[i]])\n          texteCorr += ` 2. la division euclidienne de $ ${texNombre(Nbutilises[0])} $ par $ ${Nbutilises[2]} $. Alors, `\n          for (let kk = 0; kk < 3; kk++) {\n            texteCorr += kk === ChoixQuestions[i] ? texteEnCouleurEtGras(TabCorrection[kk]) : TabCorrection[kk]\n            texteCorr += kk < 2 ? ', ' : ' et '\n          }\n          texteCorr += ChoixQuestions[i] === 3 ? texteEnCouleurEtGras(TabCorrection[3]) : TabCorrection[3]\n          texteCorr += '.<br>'\n          if (mod(ChoixQuestions[i], 3) === 0) {\n            ReponsesCorrectes = [ChoixReponses[ChoixQuestions[i]]]\n          } else {\n            ReponsesCorrectes = ['diviseur', 'quotient']\n          }\n        } else {\n          texteCorr = `$${Nbutilises[3]}$ est inférieur à $${Nbutilises[1]}$ mais pas à $${Nbutilises[2]}$ donc l'égalité ` + EgaliteDivEuclidienne + ' est associée à'\n          TabCorrection[1] = `$${Nbutilises[1]}$ est le diviseur`\n          TabCorrection[2] = `$${Nbutilises[2]}$ est le quotient`\n          texteCorr += ` la division euclidienne de $ ${texNombre(Nbutilises[0])} $ par $ ${Nbutilises[1]} $. Alors, `\n          for (let kk = 0; kk < 3; kk++) {\n            texteCorr += kk === ChoixQuestions[i] ? texteEnCouleurEtGras(TabCorrection[kk]) : TabCorrection[kk]\n            texteCorr += kk < 2 ? ', ' : ' et '\n          }\n          texteCorr += ChoixQuestions[i] === 3 ? texteEnCouleurEtGras(TabCorrection[3]) : TabCorrection[3]\n          texteCorr += '.<br>'\n          ReponsesCorrectes = [ChoixReponses[ChoixQuestions[i]]]\n        }\n      } else {\n        texteCorr = `$${Nbutilises[3]}$ est inférieur à $${Nbutilises[2]}$ mais pas à $${Nbutilises[1]}$ donc l'égalité ` + EgaliteDivEuclidienne + ' est associée à'\n        TabCorrection[1] = `$${Nbutilises[1]}$ est le diviseur`\n        TabCorrection[2] = `$${Nbutilises[2]}$ est le quotient`\n        TabCorrection[ChoixQuestions[i]] = texteEnCouleurEtGras(TabCorrection[ChoixQuestions[i]])\n        texteCorr += ` la division euclidienne de $ ${texNombre(Nbutilises[0])} $ par $ ${Nbutilises[2]} $. Alors, `\n        for (let kk = 0; kk < 3; kk++) {\n          texteCorr += kk === ChoixQuestions[i] ? texteEnCouleurEtGras(TabCorrection[kk]) : TabCorrection[kk]\n          texteCorr += kk < 2 ? ', ' : ' et '\n        }\n        texteCorr += ChoixQuestions[i] === 3 ? texteEnCouleurEtGras(TabCorrection[3]) : TabCorrection[3]\n        texteCorr += '.<br>'\n        ReponsesCorrectes = [ChoixReponses[ChoixQuestions[i]]]\n      }\n      if (this.questionJamaisPosee(this, i, a, b, q, r)) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (this.interactif) {\n          texte += '<br>' + ajouteChampTexteMathLive(this, i, 'largeur 20 inline')\n        }\n        setReponse(this, i, ReponsesCorrectes, { formatInteractif: 'ignorerCasse' })\n        if (context.isAmc) {\n          this.autoCorrection[i].propositions = [{ texte: this.listeCorrections[i], statut: '1' }] // Ici, une seule ligne pour chaque zone de texte\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Choix des mots à enlever',\n    \"(Nombres séparés par des tirets)\\nAu maximum, seuls les deux premiers entiers non nuls différents seront retenus.\\n0 : Pour enlever aucun mot\\n1 : Pour enlever 'dividende' du choix des mots\\n2 : Pour enlever 'diviseur' du choix des mots\\n3 : Pour enlever 'quotient' du choix des mots\\n4 : Pour enlever 'reste' du choix des mots\"\n  ]\n  this.besoinFormulaire2Numerique = [\n    'Choix sur les mots à trouver',\n    2,\n    '1 : Les mots à trouver sont répartis au hasard, mais de façon cyclique.\\n2 : Les mots à trouver sont tous présents et répartis au hasard mais les mots ne sont pas répartis forcément équitablement.'\n  ]\n  this.besoinFormulaire3Numerique = [\n    \"Choix sur l'égalité\",\n    2,\n    '1 : Égalité classique (a=bq+r ou a=qb+r)\\n2 : Égalité moins classique (par exemple, a=r+bq ou qb+r=a)\\n3 : Mélange'\n  ]\n  this.besoinFormulaire4Numerique = [\n    'Choix sur le nombre de divisions euclidiennes associées à chaque égalité',\n    2,\n    '1 : Une seule division euclidienne associée\\n2 : Deux divisions euclidiennes associées\\n3 : Mélange'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","dateDePublication","VocabulaireDivisionEuclidienne","Exercice","this","spacing","nbQuestions","sup","sup2","sup3","sup4","nouvelleVersion","consigne","autoCorrection","listeQuestions","listeCorrections","QuestionsDisponibles","range","enleveElementNo","contraindreValeur","QuestionsDisponibles2","split","i","length","enleveElement","parseInt","ChoixReponses","ChoixQuestions","combinaisonListes2","combinaisonListes","ReponsesCorrectes","Nbutilises","texte","texteCorr","a","b","q","r","cpt","randint","min","max","TabCorrection","texNombre","TabEgaliteDivEuclidienne","EgaliteDivEuclidienne","choice","rangeMinMax","kk","texteEnCouleurEtGras","mod","questionJamaisPosee","interactif","ajouteChampTexteMathLive","setReponse","formatInteractif","context","propositions","statut","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire3Numerique","besoinFormulaire4Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}