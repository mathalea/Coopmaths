{"version":3,"file":"js/11813.35ec597ea52020d3ef3e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N10-5.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, miseEnEvidence, texteEnCouleurEtGras, calcul } from '../../modules/outils.js'\nimport { mathalea2d, labyrinthe } from '../../modules/2d.js'\nexport const titre = 'Parcourir un labyrinthe de numération décimale'\n\n/**\n * @author Jean-Claude Lhote\n * Publié le 9/12/2020\n * Ref 6N10-5\n * Sortir du labyrinthe en utilisant la numération décimale.\n */\nexport default function ExerciceLabyrintheNumeration () {\n  Exercice.call(this)\n  this.consigne = ''\n  this.niveau = '6e'\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.sup = 3\n\n  // this.consigne=`Trouve la sortie en ne passant que par les cases contenant un nombre divisible par $${parseInt(this.sup)}$.`\n\n  this.nouvelleVersion = function () {\n    this.listeCorrections = []\n    this.listeQuestions = []\n    this.autoCorrection = []\n    const tailleChiffre = 0.7\n    let texte, texteCorr, trouve\n    const laby = labyrinthe({ taille: tailleChiffre })\n    laby.niveau = parseInt(this.sup) // Le niveau (de 1 à 6=mélange) définit le nombre d'étapes\n    laby.chemin = laby.choisitChemin(laby.niveau) // On choisi un chemin\n    laby.murs2d = laby.construitMurs(laby.chemin) // On construit le labyrinthe\n    laby.chemin2d = laby.traceChemin(laby.chemin) // On trace le chemin solution\n    const monchemin = laby.chemin\n    const positions = ['unités', 'dixièmes', 'centièmes', 'millièmes', 'dizaines', 'centaines', 'unités de mille', 'dix-millièmes', 'dizaines de mille']\n    let hasard\n    const listeNombresOK = []; let index = 0; let rangMax\n    if (this.niveau === 'CM') {\n      rangMax = 5\n    } else {\n      if (!this.sup) {\n        rangMax = 6\n      } else {\n        rangMax = 8\n      }\n    }\n    const rang = randint(0, rangMax - 1)\n    const chiffre = randint(0, 9)\n    texte = `${texteEnCouleurEtGras(`Trouve la sortie en ne passant que par les cases contenant un nombre dont le chiffre des ${positions[rang]} est un `, 'black')}$${miseEnEvidence(chiffre, 'black')}$.<br>`\n    texteCorr = `${texteEnCouleurEtGras(`Voici le chemin en marron et la sortie était la numéro $${2 - monchemin[monchemin.length - 1][1] + 1}$.`, 'black')}<br>`\n    // Zone de construction du tableau de nombres : Si ils sont sur monchemin et seulement si, ils doivent vérifier la consigne\n    let Dm, Um, C, D, U, d, c, m, dm, nombretemp\n    for (let i = 0; i <= 30; i++) {\n      if (positions[rang] !== 'dizaines de mille') {\n        if (rangMax > 6) {\n          Dm = randint(0, 9, chiffre)\n        } else {\n          Dm = 0\n        }\n      } else {\n        Dm = chiffre\n      }\n      if (positions[rang] !== 'unités de mille') {\n        if (rangMax > 5) {\n          Um = randint(0, 9, chiffre)\n        } else {\n          Um = 0\n        }\n      } else {\n        Um = chiffre\n      }\n\n      if (positions[rang] !== 'centaines') {\n        C = randint(0, 9, chiffre)\n      } else {\n        C = chiffre\n      }\n      if (positions[rang] !== 'dizaines') {\n        D = randint(0, 9, chiffre)\n      } else {\n        D = chiffre\n      }\n      if (positions[rang] !== 'unités') {\n        U = randint(0, 9, chiffre)\n      } else {\n        U = chiffre\n      }\n      if (positions[rang] !== 'dixièmes') {\n        d = randint(0, 9, chiffre)\n      } else {\n        d = chiffre\n      }\n      if (positions[rang] !== 'centièmes') {\n        c = randint(0, 9, chiffre)\n      } else {\n        c = chiffre\n      }\n      if (positions[rang] !== 'millièmes') {\n        m = randint(0, 9, chiffre)\n      } else {\n        m = chiffre\n      }\n      if (rangMax > 6) {\n        if (positions[rang] !== 'dix-millièmes') {\n          dm = randint(0, 9, chiffre)\n        } else {\n          dm = chiffre\n        }\n      } else {\n        dm = 0\n      }\n      if (i > 12) {\n        hasard = randint(0, rangMax, rang) // on met le chiffre au hasard à un autre endroit du nombre\n        switch (hasard) {\n          case 8:\n            if (rangMax > 7) { Dm = chiffre } else {\n              Dm = 0\n              if (rang !== 0) {\n                U = chiffre\n              } else {\n                d = chiffre\n              }\n            }\n            break\n          case 6: Um = chiffre\n            break\n          case 5: C = chiffre\n            break\n          case 4: D = chiffre\n            break\n          case 0: U = chiffre\n            break\n          case 1: d = chiffre\n            break\n          case 2: c = chiffre\n            break\n          case 3: m = chiffre\n            break\n          case 7:\n            if (rangMax > 6) { dm = chiffre } else {\n              dm = 0\n              if (rang !== 1) {\n                d = chiffre\n              } else {\n                c = chiffre\n              }\n            }\n            break\n        }\n        hasard = randint(0, 9, chiffre)\n        switch (rang) { // On met autre chose au rang choisi\n          case 8: Dm = hasard\n            break\n          case 6: Um = hasard\n            break\n          case 5: C = hasard\n            break\n          case 4: D = hasard\n            break\n          case 0: U = hasard\n            break\n          case 1: d = hasard\n            break\n          case 2: c = hasard\n            break\n          case 3: m = hasard\n            break\n          case 7: dm = hasard\n            break\n        }\n      }\n      nombretemp = calcul(Dm * 10000 + Um * 1000 + C * 100 + D * 10 + U + d * 0.1 + c * 0.01 + m * 0.001 + dm * 0.0001)\n      listeNombresOK.push(nombretemp)\n    }\n    for (let a = 1; a < 7; a++) {\n      laby.nombres.push([0, 0, 0])\n    }\n    for (let a = 1; a < 7; a++) {\n      for (let b = 0; b < 3; b++) {\n        trouve = false\n        for (let k = 0; k < monchemin.length; k++) {\n          if (monchemin[k][0] === a && monchemin[k][1] === b) trouve = true\n        }\n        if (!trouve) {\n          laby.nombres[a - 1][b] = listeNombresOK[index + 13]\n        } else {\n          laby.nombres[a - 1][b] = listeNombresOK[index]\n          index++\n        }\n      }\n    } // Le tableau de nombre étant fait, on place les objets nombres.\n    laby.nombres2d = laby.placeNombres(laby.nombres, tailleChiffre)\n    const params = { xmin: -4, ymin: 0, xmax: 22, ymax: 11, pixelsParCm: 20, scale: 0.7 }\n    texte += mathalea2d(params, laby.murs2d, laby.nombres2d)\n    texteCorr += mathalea2d(params, laby.murs2d, laby.nombres2d, laby.chemin2d)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireCaseACocher = [\"Avec des dizaines de mille et des dix-millièmes\"]\n  //  this.besoinFormulaire2Numerique = [\"Critère de divisibilité supplémentaire \",6,'1 : Aucun\\n2 : Par 2\\n3 : Par 3\\n4 : Par 4\\n5 : Par 5\\n6 : Par 9'];\n  this.besoinFormulaireNumerique = ['Niveau de rapidité', 6, ' 1 : Escargot\\n 2 : Tortue\\n 3 : Lièvre\\n 4 : Antilope\\n 5 : Guépard\\n 6 : Au hasard']\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ExerciceLabyrintheNumeration","Exercice","this","consigne","niveau","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","nouvelleVersion","listeCorrections","listeQuestions","autoCorrection","texte","texteCorr","trouve","laby","labyrinthe","taille","parseInt","chemin","choisitChemin","murs2d","construitMurs","chemin2d","traceChemin","monchemin","positions","hasard","listeNombresOK","rangMax","index","rang","randint","chiffre","Dm","Um","C","D","U","d","c","m","dm","nombretemp","texteEnCouleurEtGras","miseEnEvidence","length","i","calcul","push","a","nombres","b","k","nombres2d","placeNombres","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","mathalea2d","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}