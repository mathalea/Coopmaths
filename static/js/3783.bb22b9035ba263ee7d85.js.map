{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3A10.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","DivisionEuclidienne_multiplesDiviseurs_Criteres","Exercice","this","consigne","sortieHtml","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","type_de_questions","boutonAide","modalPdf","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","dividende","diviseur","quotient","reste","randint","Math","trunc","nombre_avec_espace","rg_diviseur","listeDiviseurs","length","candidats_diviseurs","shuffle","egal","diviseurs","multiplicateurs","multiples","quotients","textes","textes_corr","j","n1","p1","n2","p2","texteEnCouleur","shuffle2tableaux","tableau_de_choix","tableau_de_choix_3chiffres","m","push","N","rg_N","rg_Nb_3chiffres","sqrt","w","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","listePackages"],"mappings":"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","file":"js/3783.bb22b9035ba263ee7d85.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,egal,randint,shuffle,shuffle2tableaux,combinaisonListesSansChangerOrdre,nombre_avec_espace,texteEnCouleur,modalPdf,listeDiviseurs} from '../../modules/outils.js'\n\nexport const titre = 'Division Euclidienne - Diviseurs - Multiples'\n\n/**\n * 3A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano\n */\nexport default function DivisionEuclidienne_multiplesDiviseurs_Criteres() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.titre = titre;\n\t// pas de différence entre la version html et la version latex pour la consigne\n\tthis.consigne = `Divisions euclidiennes - Diviseurs - Multiples.`;\n\t//sortieHtml ? this.spacing = 3 : this.spacing = 2;\n\tsortieHtml ? this.spacing = 1 : this.spacing = 2;\n\t//sortieHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n\tsortieHtml ? this.spacingCorr = 2 : this.spacingCorr = 2;\n\tthis.nbQuestions = 5;\n\t//this.correctionDetailleeDisponible = true;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\n\tthis.nouvelleVersion = function (numeroExercice) {\n\t\tlet type_de_questions;\n\t\tif (sortieHtml) { // les boutons d'aide uniquement pour la version html\n\t\t\t//this.boutonAide = '';\n\t\t\tthis.boutonAide = modalPdf(numeroExercice, \"assets/pdf/FicheArithmetique-3A10.pdf\", \"Aide mémoire sur la division euclidienne (Sébastien Lozano)\", \"Aide mémoire\");\n\t\t\t//this.boutonAide += modalVideo('conteMathsNombresPremiers','/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n\t\t} else { // sortie LaTeX\n\t\t};\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tthis.contenu = ''; // Liste de questions\n\t\tthis.contenuCorrection = ''; // Liste de questions corrigées\n\n\t\tlet type_de_questions_disponibles = [1, 2, 3, 4, 5];\n\t\t//let type_de_questions_disponibles = [1];\n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions);\n\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\ttype_de_questions = listeTypeDeQuestions[i];\n\n\t\t\tvar dividende;\n\t\t\tvar diviseur;\n\t\t\tvar quotient;\n\t\t\tvar reste;\n\n\t\t\tswitch (type_de_questions) {\n\t\t\t\tcase 1: // plus grand reste dans une division euclidienne\n\t\t\t\t\tdiviseur = randint(2, 99);\n\t\t\t\t\ttexte = `Dire quel est le plus grand reste possible dans une division euclidienne par ${diviseur}.`;\n\t\t\t\t\ttexteCorr = `Si on divise par ${diviseur}, il ne peut pas rester plus de ${diviseur - 1}, sinon c'est qu'on peut encore ajouter au moins 1 fois ${diviseur} dans le dividende et donc 1 au quotient.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // quotient et reste d'une division euclidienne donnée\n\t\t\t\t\tdiviseur = randint(2, 99);\n\t\t\t\t\tdividende = randint(1001, 99999);\n\t\t\t\t\tquotient = Math.trunc(dividende / diviseur);\n\t\t\t\t\treste = dividende % diviseur;\n\n\t\t\t\t\ttexte = `On a ${nombre_avec_espace(dividende)}=${nombre_avec_espace(diviseur)}$\\\\times$${nombre_avec_espace(quotient)} $+$ ${nombre_avec_espace(reste)}`;\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\ttexte += `Écrire le quotient et le reste de la division euclidienne de ${nombre_avec_espace(dividende)} par ${diviseur}.`;\n\t\t\t\t\ttexteCorr = `Dans la division euclidienne de ${nombre_avec_espace(dividende)} par ${diviseur}, le quotient vaut ${nombre_avec_espace(quotient)} et le reste ${reste}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: // caractérisation des multiples et diviseurs par le reste de la division euclidienne\n\t\t\t\t\tdividende = randint(101, 9999);\n\t\t\t\t\tlet rg_diviseur; // rang du diviseur choisi\n\t\t\t\t\tif (listeDiviseurs(dividende).length % 2 == 0) { //si il y a un nombre pair de diviseurs on prend le (n/2+1) eme\n\t\t\t\t\t\trg_diviseur = listeDiviseurs(dividende).length / 2 + 1;\n\t\t\t\t\t} else { // il y a nbre impair de diviseurs on prend le ((n-1)/2 +1) eme\n\t\t\t\t\t\trg_diviseur = (listeDiviseurs(dividende).length - 1) / 2 + 1;\n\t\t\t\t\t}\n\t\t\t\t\tdiviseur = listeDiviseurs(dividende)[rg_diviseur - 1]; // on choisit le diviseur central de dividende, ATTENTION rang des tableaux commence à 0 \n\t\t\t\t\tlet candidats_diviseurs = [diviseur - 1, diviseur, diviseur + 1]; // on prend l'entier précédent et le successeur de ce diviseur\n\n\t\t\t\t\t// Faut-il que je conditionne pour éviter le diviseur 1 ?\n\t\t\t\t\tcandidats_diviseurs = shuffle(candidats_diviseurs); // on mélange le tableau\n\t\t\t\t\ttexte = 'Les trois divisions euclidiennes suivantes sont exactes : <br>';\n\t\t\t\t\ttexte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[0])}$\\\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[0]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[0])}`;\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\ttexte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[1])}$\\\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[1]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[1])}`;\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\ttexte += `${nombre_avec_espace(dividende)} = ${nombre_avec_espace(candidats_diviseurs[2])}$\\\\times$${nombre_avec_espace(Math.trunc(dividende / candidats_diviseurs[2]))} $+$ ${nombre_avec_espace(dividende % candidats_diviseurs[2])}`;\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\ttexte += `Sans calculer, dire si les nombres ${nombre_avec_espace(candidats_diviseurs[0])}; ${nombre_avec_espace(candidats_diviseurs[1])}; ${nombre_avec_espace(candidats_diviseurs[2])} sont des diviseurs de ${nombre_avec_espace(dividende)}. Justifier.`;\n\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\tif (egal(dividende % candidats_diviseurs[0], 0)) { //egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[0])} vaut 0 donc ${nombre_avec_espace(candidats_diviseurs[0])} est un diviseur de ${nombre_avec_espace(dividende)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[0])} ne vaut pas 0 donc ${nombre_avec_espace(candidats_diviseurs[0])} n'est pas un diviseur de ${nombre_avec_espace(dividende)}`;\n\t\t\t\t\t}\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tif (egal(dividende % candidats_diviseurs[1], 0)) { //egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[1])} vaut 0 donc ${nombre_avec_espace(candidats_diviseurs[1])} divise ${nombre_avec_espace(dividende)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[1])} ne vaut pas 0 donc ${nombre_avec_espace(candidats_diviseurs[1])} ne divise pas ${nombre_avec_espace(dividende)}`;\n\t\t\t\t\t}\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tif (egal(dividende % candidats_diviseurs[2], 0)) { //egal() est une fonction de JC pour éviter les problèmes de virgule flottante\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[2])} vaut 0 donc ${nombre_avec_espace(dividende)} est divisible par ${nombre_avec_espace(candidats_diviseurs[2])}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `Le reste de la division euclienne de ${nombre_avec_espace(dividende)} par ${nombre_avec_espace(candidats_diviseurs[2])} ne vaut pas 0 donc ${nombre_avec_espace(dividende)} n'est pas divisible par ${nombre_avec_espace(candidats_diviseurs[2])}`;\n\t\t\t\t\t}\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4: // vocabulaire diviseurs et multiples\n\t\t\t\t\t// on déclare des tableaux utiles \n\t\t\t\t\tlet diviseurs = [];\n\t\t\t\t\tlet multiplicateurs = [];\n\t\t\t\t\tlet multiples = [];\n\t\t\t\t\tlet quotients = [];\n\t\t\t\t\tlet textes = [];\n\t\t\t\t\tlet textes_corr = [];\n\t\t\t\t\t// on tire au hasard 4 diviseurs différents entre 2 et 999 et 4 multiplicateurs différents entre 2 et 9 \n\t\t\t\t\tdiviseurs = [randint(2, 999), randint(2, 999, [diviseurs[0]]), randint(2, 999, [diviseurs[0], diviseurs[1]]), randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2]])];\n\t\t\t\t\tmultiplicateurs = [randint(2, 9), randint(2, 9, [multiplicateurs[0]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1]]), randint(2, 9, [multiplicateurs[0], multiplicateurs[1], multiplicateurs[2]])];\n\t\t\t\t\t// on calcule les multiples\n\t\t\t\t\tfor (let j = 0; j < 4; j++) {\n\t\t\t\t\t\tmultiples[j] = diviseurs[j] * multiplicateurs[j];\n\t\t\t\t\t\tquotients[j] = multiples[j] / diviseurs[j];\n\t\t\t\t\t\tdiviseurs[j] = nombre_avec_espace(diviseurs[j]);\n\t\t\t\t\t\tmultiples[j] = nombre_avec_espace(multiples[j]);\n\t\t\t\t\t\tquotients[j] = nombre_avec_espace(quotients[j]);\n\t\t\t\t\t};\n\t\t\t\t\t// on crée les phrases \n\t\t\t\t\ttextes[0] = `${diviseurs[0]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[0]}`;\n\t\t\t\t\ttextes_corr[0] = `${diviseurs[0]} est un diviseur de ${multiples[0]} car ${multiples[0]}=${diviseurs[0]}$\\\\times$${quotients[0]}`;\n\t\t\t\t\ttextes[1] = `${diviseurs[1]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${multiples[1]}`;\n\t\t\t\t\ttextes_corr[1] = `${diviseurs[1]} est un diviseur de ${multiples[1]} car ${multiples[1]}=${diviseurs[1]}$\\\\times$${quotients[1]}`;\n\t\t\t\t\ttextes[2] = `${multiples[2]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[2]}`;\n\t\t\t\t\ttextes_corr[2] = `${multiples[2]} est un multiple de ${diviseurs[2]} car ${multiples[2]}=${diviseurs[2]}$\\\\times$${quotients[2]}`;\n\t\t\t\t\ttextes[3] = `${multiples[3]} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${diviseurs[3]}`;\n\t\t\t\t\ttextes_corr[3] = `${multiples[3]} est un multiple de ${diviseurs[3]} car ${multiples[3]}=${diviseurs[3]}$\\\\times$${quotients[3]}`;\n\t\t\t\t\t// on ajoute deux cas ni multiple ni diviseur\n\t\t\t\t\t// on choisit deux nombres\n\t\t\t\t\tlet n1 = nombre_avec_espace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3]]));\n\t\t\t\t\tlet p1 = nombre_avec_espace(randint(2, 999, [diviseurs[0], diviseurs[1], diviseurs[2], diviseurs[3], n1]));\n\t\t\t\t\t// on choisit un autre qui n'est pas dans la liste des diviseurs de n1\n\t\t\t\t\tlet n2 = nombre_avec_espace(randint(2, 999, listeDiviseurs(n1)));\n\t\t\t\t\tlet p2 = nombre_avec_espace(randint(2, 999, listeDiviseurs(p1)));\n\t\t\t\t\ttextes[4] = `${n1} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${n2}`;\n\t\t\t\t\ttextes_corr[4] = `${n1} n'est ni un multiple ni un diviseur de ${n2} car ${n1}=${n2}$\\\\times$${Math.trunc(n1 / n2)}+${texteEnCouleur(n1 % n2)} et ${n2}=${n1}$\\\\times$${Math.trunc(n2 / n1)}+${texteEnCouleur(n2 % n1)}`;\n\t\t\t\t\ttextes[5] = `${p2} $\\\\ldots\\\\ldots\\\\ldots\\\\ldots$ ${p1}`;\n\t\t\t\t\ttextes_corr[5] = `${p2} n'est ni un multiple ni un diviseur de ${p1} car ${p1}=${p2}$\\\\times$${Math.trunc(p1 / p2)}+${texteEnCouleur(p1 % p2)} et ${p2}=${p1}$\\\\times$${Math.trunc(p2 / p1)}+${texteEnCouleur(p2 % p1)}`;\n\t\t\t\t\t// on mélange pour que l'ordre change!\n\t\t\t\t\tshuffle2tableaux(textes, textes_corr);\n\t\t\t\t\ttexte = `Avec la calculatrice, compléter chaque phrase avec \"est un diviseur de\" ou \"est un multiple de\" ou \"n'est ni un diviseur ni un multiple de\".`;\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\tfor (let j = 0; j < 5; j++) {\n\t\t\t\t\t\ttexte += textes[j];\n\t\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\t\ttexteCorr += textes_corr[j];\n\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += textes[5];\n\t\t\t\t\t//texte +=`<br>`;\n\t\t\t\t\ttexteCorr += textes_corr[5];\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5: // liste des diviseurs\n\t\t\t\t\t// on définit un tableau pour les choix du nombre dont on veut les diviseurs\n\t\t\t\t\t// 3 parmis 2,99 y compris les premiers et 1 parmis les entiers à 3 chiffres ayant au moins 8 diviseurs, il y en a 223 !\n\t\t\t\t\tlet tableau_de_choix = [];\n\t\t\t\t\ttableau_de_choix = [randint(2, 99), randint(2, 99, [tableau_de_choix[0]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1], tableau_de_choix[2]])];\n\t\t\t\t\tlet tableau_de_choix_3chiffres = [];\n\t\t\t\t\tfor (let m = 101; m < 999; m++) {\n\t\t\t\t\t\tif (listeDiviseurs(m).length > 8) {\n\t\t\t\t\t\t\ttableau_de_choix_3chiffres.push(m);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t// on ajoute un nombre à trois chiffre avec au moins 8 diviseurs dans les choix possibles\n\t\t\t\t\tlet rg_Nb_3chiffres = randint(0, (tableau_de_choix_3chiffres.length - 1));\n\t\t\t\t\ttableau_de_choix.push(tableau_de_choix_3chiffres[rg_Nb_3chiffres]);\n\t\t\t\t\tlet N; // on déclare le nombre dont on va chercher les diviseurs\n\t\t\t\t\tlet rg_N; // pour tirer le rang du nombre dans le tableau des choix\n\t\t\t\t\trg_N = randint(0, (tableau_de_choix.length - 1));\n\t\t\t\t\tN = tableau_de_choix[rg_N];\n\t\t\t\t\ttexte = `Écrire la liste de tous les diviseurs de ${N}.`;\n\t\t\t\t\ttexteCorr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En écrivant toujours le plus petit facteur en premier.<br>`;\n\t\t\t\t\ttexteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\\\times$${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N)) * Math.trunc(Math.sqrt(N))}<${N}`;\n\t\t\t\t\ttexteCorr += ` et ${Math.trunc(Math.sqrt(N)) + 1}$\\\\times$${Math.trunc(Math.sqrt(N)) + 1} = ${(Math.trunc(Math.sqrt(N)) + 1) * (Math.trunc(Math.sqrt(N)) + 1)}>${N} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(N))}.`;\n\t\t\t\t\ttexteCorr += ` En effet, si ${N} est le produit de deux entiers p$\\\\times$q avec p < q alors si p$\\\\times$p > ${N} c'est que q$\\\\times$q < ${N} mais dans ce cas p serait supérieur à q sinon p$\\\\times$q serait inférieur à ${N} ce qui ne doit pas être le cas.<br>`;\n\t\t\t\t\tif (listeDiviseurs(N).length % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(N).length / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times$` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + ` = ${N}<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(N).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times$` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + `<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + `$\\\\times$` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + ` = ${N}<br>`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`;\n\t\t\t\t\ttexteCorr += `La liste des diviseurs de ${N} est donc `;\n\t\t\t\t\ttexteCorr += `1`;\n\t\t\t\t\tfor (let w = 1; w < listeDiviseurs(N).length; w++) {\n\t\t\t\t\t\ttexteCorr += ` ; ` + listeDiviseurs(N)[w];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\tbreak;\n\t\t\t};\n\n\t\t\tif (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\t//this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"]; \n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}