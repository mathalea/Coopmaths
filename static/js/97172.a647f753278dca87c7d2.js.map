{"version":3,"file":"js/97172.a647f753278dca87c7d2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A13.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, decompositionFacteursPremiers, modalPdf, katexPopup2, numAlpha, warnMessage, lampeMessage, ppcm, choice } from '../../modules/outils.js'\nimport { svgEngrenages } from '../../modules/macroSvgJs.js'\nexport const titre = 'Engrenages'\n\n/**\n * 3A13 - ppcmEngrenages\n * les deux on besoin de la def partielle serie : stlX\n * pb dans la sortie LaTeX, revoir comment user de la fonction katexPopup2() pour affichage d'une note hors texte !\n * @author Sébastien Lozano\n */\nexport default function ppcmEngrenages () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = ''\n  context.isHtml ? this.spacing = 2 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 4\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.listePackages = 'bclogo'\n  this.sup = false\n\n  const numEx = '3A13' // pour rendre unique les id des SVG, en cas d'utilisation dans plusieurs exercices y faisant appel\n\n  if (context.isHtml) {\n    // eslint-disable-next-line no-var\n    var pourcentage = '100%' // pour l'affichage des svg. On a besoin d'une variable globale\n  } else { // sortie LaTeX\n  };\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A13.pdf', 'Aide mémoire sur les fonctions (Sébastien Lozano)', 'Aide mémoire')\n      // this.boutonAide += modalVideo('conteMathsNombresPremiers','https://coopmaths.fr/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4]\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n    let txtIntro = 'Boîte de vitesse, transmission de vélo, de moto, perceuse electrique, tout ça fonctionne avec des engrenages ! Mais au fait, comment ça marche, les engrenages ?'\n    if (context.isHtml) {\n      const idUnique = `${numEx}_${Date.now()}`\n      const idDivIntro = `divIntro${idUnique}`\n      txtIntro += warnMessage('Attention, les roues ci-dessous ne comportent pas le nombre de dents de l\\'énoncé !', 'nombres', 'Coup de pouce')\n      txtIntro += `<div id=\"${idDivIntro}\" style=\"width: ${pourcentage}; height: 50px; display : table \"></div>`\n      svgEngrenages(idDivIntro, 200, 200)\n    };\n\n    this.introduction = lampeMessage({\n      titre: 'Arithmétique des engrenages',\n      texte: txtIntro,\n      couleur: 'nombres'\n    })\n\n    for (let i = 0, texte, texteCorr, k, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      let nbDentsr1\n      let nbDentsr2\n      let txtPopup = 'Étant donnés deux nombres entiers a et b, lorsque le plus petit multiple commun à $a$ et $b$ vaut $a \\\\times b$ ( $ppcm(a,b)=a\\\\times b$ ), on dit que '\n      if (context.isHtml) {\n        txtPopup += '<b>les nombres a et b sont premiers entre eux</b>'\n      } else {\n        txtPopup += '$\\\\textbf{les nombres a et b sont premiers entre eux}$'\n      };\n\n      switch (typesDeQuestions) {\n        case 1:\n          { // avec de petits nombres on calcule les mutliples\n            nbDentsr1 = randint(5, 30)\n            nbDentsr2 = randint(5, 30, nbDentsr1)\n            texte = `La roue n$\\\\degree$1 possède $${nbDentsr1}$ dents et la roue n$\\\\degree$2 a $${nbDentsr2}$ dents.`\n            texte += '<br>' + numAlpha(0) + ` Écrire la liste des multiples de $${nbDentsr1}$ et de $${nbDentsr2}$.`\n            if (ppcm(nbDentsr1, nbDentsr2) === (nbDentsr1 * nbDentsr2)) {\n              texte += `<br>Pourquoi peut-on en déduire que ${nbDentsr1} et ${nbDentsr2} sont des `\n              texte += katexPopup2(\n                numeroExercice + 1,\n                1,\n                'nombres premiers entre eux ?',\n                'Définition : Nombres premiers entre eux',\n                txtPopup\n              )\n            };\n            texte += '<br>' + numAlpha(1) + ' En déduire le nombre de tours de chaque roue avant le retour à leur position initiale.'\n            texteCorr = numAlpha(0) + ` Liste des premiers multiples de $${nbDentsr1}$ : <br>`\n            // on va faire en sorte de toujours avoir un nombre de multiples multiple de 5\n            let nbMarge = 5 - (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1) % 5\n            let kMax = (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 + nbMarge)\n            for (let k = 1; k < kMax + 1; k++) {\n              texteCorr += `$${k}\\\\times${nbDentsr1} = `\n              if (k === (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1)) {\n                texteCorr += miseEnEvidence(texNombre(k * nbDentsr1))\n                texteCorr += '$ ; '\n              } else {\n                texteCorr += `${texNombre(k * nbDentsr1)}$ ; `\n              };\n              if (k % 5 === 0) {\n                texteCorr += '<br>'\n              }\n            };\n            texteCorr += '$\\\\ldots$ '\n            texteCorr += '<br>'\n            texteCorr += ` Liste des premiers multiples de ${nbDentsr2} : <br>`\n            // on va faire en sorte de toujours avoir un nombre de multiples multiple de 5\n            nbMarge = 5 - (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2) % 5\n            kMax = (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2 + nbMarge)\n            for (let k = 1; k < kMax + 1; k++) {\n              texteCorr += `$${k}\\\\times${nbDentsr2} = `\n              if (k === (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2)) {\n                texteCorr += miseEnEvidence(texNombre(k * nbDentsr2))\n                texteCorr += '$ ; '\n              } else {\n                texteCorr += `${texNombre(k * nbDentsr2)}$ ; `\n              };\n              if (k % 5 === 0) {\n                texteCorr += '<br>'\n              }\n            };\n            texteCorr += '$\\\\ldots$ '\n            texteCorr += '<br>'\n            texteCorr += `Le plus petit multiple commun à $${nbDentsr1}$ et $${nbDentsr2}$ vaut donc $ppcm(${nbDentsr1},${nbDentsr2}) = ${ppcm(nbDentsr1, nbDentsr2)}$.`\n            texteCorr += '<br>'\n            if (ppcm(nbDentsr1, nbDentsr2) === (nbDentsr1 * nbDentsr2)) {\n              texteCorr += 'Le $ppcm(' + nbDentsr1 + ';' + nbDentsr2 + ')=' + nbDentsr1 + '\\\\times' + nbDentsr2 + `$ donc $${nbDentsr1}$ et $${nbDentsr2}$ sont des `\n              texteCorr += katexPopup2(\n                numeroExercice + 2,\n                1,\n                'nombres premiers entre eux.',\n                'Définition : Nombres premiers entre eux',\n                txtPopup // `Étant donnés deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\\\times b$, on dit que ${texteGras('les nombres a et b sont premiers entre eux')}.`\n              )\n            };\n            texteCorr += '<br><br>' + numAlpha(1) + ` Chaque roue doit tourner de $ppcm(${nbDentsr1},${nbDentsr2})=${texNombre(ppcm(nbDentsr1, nbDentsr2))}$ dents.`\n            texteCorr += `<br> Cela correspond à $(${ppcm(nbDentsr1, nbDentsr2)}\\\\text{ dents})\\\\div (${nbDentsr1}\\\\text{ dents/tour}) = ${ppcm(nbDentsr1, nbDentsr2) / nbDentsr1}$`\n            if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 === 1) {\n              texteCorr += ' tour '\n            } else {\n              texteCorr += ' tours '\n            };\n            texteCorr += 'pour la roue n$\\\\degree$1.'\n            texteCorr += `<br>Cela correspond à $(${ppcm(nbDentsr1, nbDentsr2)}\\\\text{ dents})\\\\div (${nbDentsr2}\\\\text{ dents/tour}) = ${ppcm(nbDentsr1, nbDentsr2) / nbDentsr2}$`\n            if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2 === 1) {\n              texteCorr += ' tour '\n            } else {\n              texteCorr += ' tours '\n            };\n            texteCorr += 'pour la roue n$\\\\degree$2.'\n          }\n          break\n        case 2: // avec de plus grands nombre, c'est mieux de décomposer en facteurs premiers\n          if (this.sup) {\n            nbDentsr1 = randint(51, 100)\n            nbDentsr2 = randint(51, 100, nbDentsr1)\n          } else {\n            nbDentsr1 = randint(31, 80)\n            nbDentsr2 = randint(31, 80, nbDentsr1)\n          }\n\n          texte = `La roue n$\\\\degree$1 possède $${nbDentsr1}$ dents et la roue n$\\\\degree$2 a $${nbDentsr2}$ dents.`\n          texte += '<br>' + numAlpha(0) + ` Décomposer $${nbDentsr1}$ et $${nbDentsr2}$ en produit de facteurs premiers.`\n          if (ppcm(nbDentsr1, nbDentsr2) === (nbDentsr1 * nbDentsr2)) {\n            texte += `<br>Pourquoi peut-on en déduire que ${nbDentsr1} et ${nbDentsr2} sont des `\n            texte += katexPopup2(\n              numeroExercice + 3,\n              1,\n              'nombres premiers entre eux',\n              'Définition : Nombres premiers entre eux',\n              txtPopup // `Étant donnés deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\\\times b$, on dit que ${texteGras('les nombres a et b sont premiers entre eux')}.`\n            )\n          };\n          texte += '<br>' + numAlpha(1) + ' En déduire le nombre de tours de chaque roue avant le retour à leur position initiale.'\n          texteCorr = 'Pour un nombre de dents plus élevé, il est plus commode d\\'utiliser les décompositions en produit de facteurs premiers.'\n          texteCorr += '<br>' + numAlpha(0) + ` Décomposition de $${nbDentsr1}$ en produit de facteurs premiers :  $${nbDentsr1} = ${decompositionFacteursPremiers(nbDentsr1)}$.`\n          texteCorr += `<br> Décomposition de $${nbDentsr2}$ en produit de facteurs premiers :  $${nbDentsr2} = ${decompositionFacteursPremiers(nbDentsr2)}$.`\n          texteCorr += `<br> D'où $ppcm(${nbDentsr1},${nbDentsr2})= ${decompositionFacteursPremiers(ppcm(nbDentsr1, nbDentsr2))}$.<br>`\n          if (ppcm(nbDentsr1, nbDentsr2) === (nbDentsr1 * nbDentsr2)) {\n            texteCorr += 'Le $ppcm(' + nbDentsr1 + ';' + nbDentsr2 + ')=' + nbDentsr1 + '\\\\times' + nbDentsr2 + `$ donc $${nbDentsr1}$ et $${nbDentsr2}$ sont des `\n            texteCorr += katexPopup2(\n              numeroExercice + 4,\n              1,\n              'nombres premiers entre eux.',\n              'Définition : Nombres premiers entre eux',\n              txtPopup // `Étant donnés deux nombres entiers a et b, lorsque $ppcm(a,b)=a\\\\times b$, on dit que ${texteGras('les nombres a et b sont premiers entre eux')}.`\n            )\n          };\n          texteCorr += '<br><br>' + numAlpha(1) + ` Chaque roue doit tourner de $ppcm(${nbDentsr1},${nbDentsr2})=${texNombre(ppcm(nbDentsr1, nbDentsr2))}$ dents.`\n          texteCorr += `<br> Cela correspond à $(${texNombre(ppcm(nbDentsr1, nbDentsr2))}\\\\text{ dents})\\\\div (${nbDentsr1}\\\\text{ dents/tour}) = ${ppcm(nbDentsr1, nbDentsr2) / nbDentsr1}$`\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 === 1) {\n            texteCorr += ' tour '\n          } else {\n            texteCorr += ' tours '\n          };\n          texteCorr += 'pour la roue n$\\\\degree$1.'\n          texteCorr += `<br> Cela correspond à $(${texNombre(ppcm(nbDentsr1, nbDentsr2))}\\\\text{ dents})\\\\div (${nbDentsr2}\\\\text{ dents/tour}) = ${ppcm(nbDentsr1, nbDentsr2) / nbDentsr2}$`\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2 === 1) {\n            texteCorr += ' tour '\n          } else {\n            texteCorr += ' tours '\n          };\n          texteCorr += 'pour la roue n$\\\\degree$2.'\n          break\n        case 3: // déterminer le nombre de dents d'une roue connaissant l'autre et le nombre de tours necessaires à la re-synchro\n          if (this.sup) k = choice([2, 3, 4, 5, 6])\n          else k = choice([2, 3])\n          nbDentsr1 = randint(5, 15)\n          nbDentsr2 = randint(5, 80, nbDentsr1)\n          nbDentsr1 *= k\n          nbDentsr2 *= k\n          texte = `La roue n$\\\\degree$2 a maintenant $${nbDentsr2}$ dents.`\n          texte += ` Déterminer le nombre de dents de la roue n$\\\\degree$1 qui ferait $${ppcm(nbDentsr1, nbDentsr2) / nbDentsr1}$ `\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 === 1) {\n            texte += ' tour '\n          } else {\n            texte += ' tours '\n          };\n          texte += ` pendant que la roue n$\\\\degree$2 en fait $${ppcm(nbDentsr1, nbDentsr2) / nbDentsr2}$.`\n          texteCorr = `Puisque la roue n$\\\\degree$2, qui a $${nbDentsr2}$ dents, fait $${ppcm(nbDentsr1, nbDentsr2) / nbDentsr2}$ `\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr2 === 1) {\n            texteCorr += ' tour '\n          } else {\n            texteCorr += ' tours '\n          };\n          texteCorr += `, cela représente $${texNombre(ppcm(nbDentsr1, nbDentsr2))}$ dents.`\n          texteCorr += `<br>La roue n$\\\\degree$1 doit donc aussi tourner de $${texNombre(ppcm(nbDentsr1, nbDentsr2))}$ dents, ceci en $${ppcm(nbDentsr1, nbDentsr2) / nbDentsr1}$ `\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 === 1) {\n            texteCorr += ' tour '\n          } else {\n            texteCorr += ' tours '\n          };\n          texteCorr += '.'\n          texteCorr += `<br> on obtient donc $(${texNombre(ppcm(nbDentsr1, nbDentsr2))}\\\\text{ dents})\\\\div (${ppcm(nbDentsr1, nbDentsr2) / nbDentsr1}\\\\text{`\n          if (ppcm(nbDentsr1, nbDentsr2) / nbDentsr1 === 1) {\n            texteCorr += ' tour '\n          } else {\n            texteCorr += ' tours '\n          };\n          texteCorr += `}) = ${nbDentsr1} \\\\text{ dents/tour}.$`\n          texteCorr += `<br>La roue n$\\\\degree$1 a donc : $${nbDentsr1}$ dents.`\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["titre","ppcmEngrenages","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","sup","pourcentage","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","txtIntro","idDivIntro","Date","now","warnMessage","svgEngrenages","introduction","lampeMessage","texte","couleur","texteCorr","k","i","cpt","nbDentsr1","nbDentsr2","txtPopup","randint","numAlpha","ppcm","katexPopup2","nbMarge","kMax","miseEnEvidence","texNombre","decompositionFacteursPremiers","choice","indexOf","push","listeQuestionsToContenu"],"sourceRoot":""}