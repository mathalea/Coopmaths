{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C30-3.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["amcReady","amcType","titre","MultiplicationMentalDecimaux","Exercice","this","consigne","nbQuestions","video","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","qcmDisponible","modeQcm","nouvelleVersion","qcm","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","a","b","tabrep","tabicone","randint","texNombre2","calcul","elimineDoublons","push","slice","shuffle2tableaux","mathalea","sortieAMC","tableauSolutionsDuQcm","propositionsQcm","numeroExercice","indexOf","listeQuestionsToContenu","gestionQcmInteractif","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","tailleDiaporama","autoCorrection","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length","reponses","statuts","reponsesEpurees","statutsEpures","j","console","log","splice"],"mappings":"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","file":"js/441.bdfd1d665f0475e48799.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, texNombre2, calcul, shuffle2tableaux } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm, elimineDoublons } from '../../modules/gestionQcm.js'\n\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Opérations avec les nombres décimaux'\n\n/**\n * Reconnaître une fonction affine\n* @auteur Erwan Duplessy\n* 6C30-1\n* Trouver la réposne exacte. 4 cas :\n* - somme de deux entiers\n* - produit de deux entiers\n* - somme de deux décimaux\n* - produit de deux décimaux\n* date : 2021/02/15\n*/\n\nexport default function MultiplicationMentalDecimaux () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = 'Trouver la réponse exacte du calcul parmi les réponses proposées.'\n  this.nbQuestions = 4 // Ici le nombre de questions\n  this.video = ''\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.qcmDisponible = true\n  this.modeQcm = false\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n\n    this.qcm = ['6C30-3', [], 'Opérations avec les nombres décimaux', 1] // Ajouté par Jean-Claude Lhote : ceci est un exercice à QCM this.qcm permet de l'exporter vers AMC\n\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const typeDeQuestionsDisponibles = ['add', 'mul', 'add_deci', 'mul_deci'] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n      let a = 0; let b = 0; let tabrep = []; let tabicone = [] // les deux opérandes\n\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 'add':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n\n          tabrep = [`$${texNombre2(calcul(a + b))}$`, `$${texNombre2(calcul(a * b))}$`, `$${texNombre2(calcul((a + b) / 10))}$`, `$${texNombre2(calcul(10 * (a + b)))}$`, `$${texNombre2(calcul(a + b + 1))}$`] // réponses possibles\n          tabicone = [1, 0, 0, 0, 0]; // 1 pour la bonne réponse\n          [tabrep, tabicone] = elimineDoublons(tabrep, tabicone)\n           /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${a}+${b}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${a} + ${b}$. <br>`\n\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${a} + ${b}=${texNombre2(calcul(a + b))}$`\n          }\n          break\n\n        case 'mul':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n          tabrep = [`$${texNombre2(a * b)}$`, `$${texNombre2(10 * a * b)}$`, `$${texNombre2(a * b / 10)}$`, `$${texNombre2(a + b)}$`, `$${texNombre2(a * b + 1)}$`]\n          tabicone = [1, 0, 0, 0, 0];\n          [tabrep, tabicone] = elimineDoublons(tabrep, tabicone)\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${a} \\\\times ${b}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${a} \\\\times ${b}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${a} \\\\times ${b}=${texNombre2(calcul(a * b))}$`\n          }\n          break\n\n        case 'add_deci':\n          a = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          b = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          tabrep = [`$${texNombre2(calcul((a + b) / 100))}$`, `$${texNombre2(calcul((a * b) / 100))}$`, `$${texNombre2(calcul((a + b) / 1000))}$`, `$${texNombre2(calcul(10 * (a + b) / 100))}$`, `$${texNombre2(calcul((a + b + 1) / 100))}$`]\n          tabicone = [1, 0, 0, 0, 0];\n          [tabrep, tabicone] = elimineDoublons(tabrep, tabicone)\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${texNombre2(a / 100)}+${texNombre2(b / 100)}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${texNombre2(a / 100)} + ${texNombre2(b / 100)}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += ` $${texNombre2(a / 100)} + ${texNombre2(b / 100)}=${texNombre2(calcul(a / 100 + b / 100))}$. <br>`\n          }\n          break\n\n        case 'mul_deci':\n          // a et b sont des nombres à 4 chiffres, dont 2 avant la virgule\n          // on multiplie par 100 pour travailler avec des nombres entiers. Par ex : 6547 plutôt que 65.47\n          a = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9, [2, 5]) // on évite le 2*5 avec les derniers chiffres\n          b = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9)\n          tabrep = [`$${texNombre2(calcul((a * b) / 10000))}$`, `$${texNombre2(calcul((10 * a * b) / 10000))}$`, `$${texNombre2(calcul((a * b) / 100000))}$`, `$${texNombre2(calcul((a + b) / 100))}$`, `$${texNombre2(calcul((a * b + 1) / 10000))}$`]\n          tabicone = [1, 0, 0, 0, 0];\n          [tabrep, tabicone] = elimineDoublons(tabrep, tabicone)\n          /**********************************************************************/\n          // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n          this.qcm[1].push([`Calcul : $${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}$.\\\\\\\\ \\n Réponses possibles`, tabrep.slice(0), tabicone.slice(0)])\n          // tableau pour la fonction exportQcmAmc\n          /**********************************************************************/\n\n          texte += `Calcul : $${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}$. <br>`\n          shuffle2tableaux(tabrep, tabicone)\n          if (this.modeQcm && !mathalea.sortieAMC) {\n            this.tableauSolutionsDuQcm[i] = tabicone\n            texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n            texteCorr += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n          } else {\n            texteCorr += `$${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}=${texNombre2(calcul(a * b / 10000))}$. <br>`\n          }\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  gestionQcmInteractif(this)\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  // this.besoinFormulaireCaseACocher = ['Mode QCM',true]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un objet {reponse=[a,b,c,d,e],statuts=[1,0,0,0,0]}\n * élimine les doublons de réponses et les statuts associés avant de retourner l'objet épuré.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (reponses, statuts) { // fonction qui va éliminer les doublons si il y en a\n  const reponsesEpurees = reponses.slice()\n  const statutsEpures = statuts.slice()\n  for (let i = 0; i < reponsesEpurees.length - 1; i++) {\n    for (let j = i + 1; j < reponsesEpurees.length;) {\n      if (reponsesEpurees[i] === reponsesEpurees[j]) {\n        console.log('doublon trouvé', reponsesEpurees[i], reponsesEpurees[j]) // les réponses i et j sont les mêmes\n\n        if (statutsEpures[i] === 1) { // si la réponse i est bonne, on vire la j\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        } else if (statutsEpures[j] === 1) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n          statutsEpures[i] = 1\n        } else { // Les deux réponses sont mauvaises\n          reponsesEpurees.splice(j, 1)\n          statutsEpures.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return [reponsesEpurees, statutsEpures]\n}\n"],"sourceRoot":""}