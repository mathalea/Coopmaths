/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_4e_4L13-0_js"],{

/***/ "./src/js/exercices/4e/4L13-0.js":
/*!***************************************!*\
  !*** ./src/js/exercices/4e/4L13-0.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Mettre_en_equation_sans_resoudre)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n\n\n\nconst titre = 'Mettre en équation un problème sans objectif de résolution'\n\n/**\n * Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue afin de mettre en équation un problème\n * à partir de figure géométriques élémentaires\n * * 4L13-0\n * @author Sébastien Lozano\n */\nfunction Mettre_en_equation_sans_resoudre() {\n  'use strict';\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n  this.debug = false;\n  this.sup = 1;\n  if (this.debug) {\n    this.nb_questions = 9;\n  } else {\n    this.nb_questions = 2;\n  };\n\n  this.titre = titre;\n  this.consigne = \"Donner une équation qui permet de résoudre le problème.<br>On ne demande pas de résoudre l'équation.\";\n\n  this.nb_cols = 1;\n  this.nb_cols_corr = 1;\n  //this.nb_questions_modifiable = false;\n  //sortie_html? this.spacing = 3 : this.spacing = 2; \n  //sortie_html? this.spacing_corr = 3 : this.spacing_corr = 2;\n\n  let type_de_questions_disponibles;\n\n  this.nouvelle_version = function () {\n    if (this.debug) {\n      type_de_questions_disponibles = [1];\n    } else {\n      type_de_questions_disponibles = [1, 2];\n    };\n\n    this.liste_questions = []; // Liste de questions\n    this.liste_corrections = []; // Liste de questions corrigées\n\n    type_de_questions_disponibles = [1];\n\n    let liste_type_de_questions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaison_listes)(type_de_questions_disponibles, this.nb_questions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    //let liste_type_de_questions = combinaison_listes_sans_changer_ordre(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {\n\n      // une fonction pour dire le nom du polygone\n      function myPolyName(n) {\n        let sortie = {\n          article: ``,\n          name: ``,\n          nameParSommets: ``,\n        };\n        switch (n) {\n          case 3:\n            sortie.article = `du `;\n            sortie.name = `triangle équilatéral`;\n            sortie.nameParSommets = `ABC`;\n            break;\n          case 4:\n            sortie.article = `du `;\n            sortie.name = `carré`;\n            sortie.nameParSommets = `ABCD`;\n            break;\n          case 5:\n            sortie.article = `du `;\n            sortie.name = `pentagone régulier`;\n            sortie.nameParSommets = `ABCDE`;\n            break;\n          case 6:\n            sortie.article = `de l'`;\n            sortie.name = `hexagone régulier`;\n            sortie.nameParSommets = `ABCDEF`;\n            break;\n          case 7:\n            sortie.article = `de l'`;\n            sortie.name = `heptagone régulier`;\n            sortie.nameParSommets = `ABCDEFG`;\n            break;\n          case 8:\n            sortie.article = `de l'`;\n            sortie.name = `octogone régulier`;\n            sortie.nameParSommets = `ABCDEFGH`;\n            break;\n        }\n        return sortie;\n      }\n\n      // on choisit le nombre de côtés su polygone\n      let n = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(3, 8);\n      //on choisit un nom pour la variable\n      let variables = ['t', 'u', 'v', 'w', 'y', 'z'];\n      let inc = variables[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, variables.length - 1)];\n      //on choisit une unité\n      let unites = [\"mm\", \"cm\", \"dm\", \"m\", \"dam\", \"hm\", \"km\"];\n      let unite = unites[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, unites.length - 1)];\n      //on prépare le polygone\n      let po = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneRegulierParCentreEtRayon)((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.point)(0, 0), 4, n);\n      po.opacite = 0.5;\n      po.epaisseur = 2;\n      //on pépare la côte\n      let s = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(po.listePoints[0], po.listePoints[1]);\n      s.styleExtremites = `<->`;\n      // on fait un test pour coder les angles droits du carré\n      let anglesDroitsIfIsCarre;\n      if (n == 4) {\n        anglesDroitsIfIsCarre = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codageCarre)(po)\n      } else {\n        anglesDroitsIfIsCarre = {}\n      };\n      // on finit les appels\n      let mesAppels = [\n        po,\n        (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('X', 'blue', po.listePoints),\n        (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.afficheCoteSegment)(s, `${inc}`, 1, 'red', 2, 0.5, 'black'),\n        (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.nommePolygone)(po, myPolyName(n).nameParSommets),\n        anglesDroitsIfIsCarre\n      ];\n      // on prépare l'objet polygone\n      let polygone = {\n        nb_cotes: n,\n        unite: unite,\n        article: myPolyName(n).article,\n        nom: myPolyName(n).name,\n        let_cote: inc,\n        perimetre: (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(200, 500),\n        fig: (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(\n          {\n            xmin: -7,\n            ymin: -5,\n            xmax: 7,\n            ymax: 5,\n            pixelsParCm: 20,\n            scale: 0.5//0.7\n          },\n          mesAppels\n        )\n      };\n\n      let enonces = [];\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.prenom)()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: ``,\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      });\n      // pour être sûr d'avoir deux figures différentes\n      let p = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(3, 8, [n]);\n      polygone.nb_cotes = p;\n      enonces.push({\n        enonce: `On considère la figure suivante où l'unité est le $${polygone.unite}$.<br>${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.prenom)()} se demande pour quelle valeur de ${polygone.let_cote}, exprimée en $${polygone.unite}$, le périmètre ${polygone.article}${polygone.nom} est égal à $${polygone.perimetre}$ $${polygone.unite}$ .<br> ${polygone.fig}`,\n        question: ``,\n        correction: `La figure est un ${polygone.nom}, il a donc ${polygone.nb_cotes} côtés de même longueur.<br>\n        Cette longueur est notée ${polygone.let_cote}, le périmètre de la figure, exprimé en fonction de ${polygone.let_cote}, vaut donc $${polygone.nb_cotes}\\\\times$ ${polygone.let_cote}.<br>\n        D'après l'énoncé, ce périmètre vaut $${polygone.perimetre}$ $${polygone.unite}$.<br>\n        L'équation suivante permet donc de résoudre le problème : <br>\n        ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)(`$${polygone.nb_cotes}\\\\times$ ${polygone.let_cote} $= ${polygone.perimetre}$.`)}`\n      })\n\n      switch (liste_type_de_questions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texte_corr = ``;\n          } else {\n            texte_corr = `${enonces[0].correction}`;\n          };\n          break;\n        case 2:\n          texte = `${enonces[1].enonce}`;\n          if (this.debug) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;\n            texte_corr = ``;\n          } else {\n            texte_corr = `${enonces[1].correction}`;\n          };\n          break;\n      }\n\n\n      if (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.liste_questions.push(texte);\n        this.liste_corrections.push(texte_corr);\n        i++;\n      }\n      cpt++;\n    }\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n\n  }\n  //this.besoin_formulaire_numerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  //this.besoin_formulaire2_case_a_cocher = [\"Avec des équations du second degré\"];\t\n}\n\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/4e/4L13-0.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);