{"version":3,"file":"js/9553.0fe0f3bae484a178b44e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/can/1e/can1P01.js","webpack://mathalea/./src/js/modules/arbres.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../../Exercice.js'\nimport { listeQuestionsToContenu, randint } from '../../../modules/outils.js'\nimport { number } from 'mathjs'\nimport { Arbre, texProba } from '../../../modules/arbres.js'\nimport { mathalea2d } from '../../../modules/2d.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../../modules/gestionInteractif.js'\nimport { context } from '../../../modules/context.js'\nexport const titre = 'Arbre de probabilité'\nexport const dateDePublication = '25/12/2021'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcTpe = 'AMCNum'\n\n/**\n * On donne un arbre de probabilité et on doit calculer une probabilité partielle manquante\n * @author Jean-Claude Lhote\n * Référence can2P03\n*/\nexport default function CalculProbaArbre2e () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = true\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  // this.sup = 1; // Niveau de difficulté\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    for (let i = 0, cpt = 0, pA, pB, pAC, pBC, omega, texte, texteCorr, objets, pC; i < this.nbQuestions && cpt < 50;) {\n      objets = []\n      // On choisit les probas de l'arbre\n      pA = number(randint(2, 8) / 10)\n      pB = number(1 - pA)\n      pAC = number(randint(2, 8) / 10)\n      pBC = number(randint(2, 8) / 10)\n      // On définit l'arbre complet\n      omega = new Arbre({\n        racine: true,\n        rationnel: false,\n        nom: '',\n        proba: 1,\n        visible: false,\n        alter: '',\n        enfants: [\n          new Arbre(\n            {\n              rationnel: false,\n              nom: 'A',\n              proba: pA,\n              enfants: [new Arbre(\n                {\n                  rationnel: false,\n                  nom: 'C',\n                  proba: pAC\n                }),\n              new Arbre(\n                {\n                  rationnel: false,\n                  nom: '\\\\bar C',\n                  proba: number(1 - pAC)\n                })\n              ]\n            }),\n          new Arbre({\n            rationnel: false,\n            nom: '\\\\bar A',\n            proba: number(1 - pA),\n            enfants: [new Arbre({\n              rationnel: false,\n              nom: 'C',\n              proba: pBC,\n              visible: false,\n              alter: 'x'\n            }),\n            new Arbre({\n              rationnel: false,\n              nom: '\\\\bar C',\n              proba: number(1 - pBC),\n              visible: false,\n              alter: ''\n            })\n            ]\n          })\n        ]\n      })\n\n      omega.setTailles() // On calcule les tailles des arbres.\n      objets = omega.represente(0, 7, 0, 1.5, true, 1) // On crée l'arbre complet echelle 1.4 feuilles verticales sens gauche-droite\n      pC = omega.getProba('C', false) // on calcule P(C) décimale.\n      texte = `On donne l'arbre de probabilités ci dessous et $P(C)=${texProba(pC)}$.<br>$\\\\phantom{1. On donne ceci}$`\n      texte += mathalea2d({ xmin: -0.1, xmax: 14, ymin: 0, ymax: 7, style: 'inline' }, ...objets)\n      texte += `<br>$\\\\phantom{1. On donne ceci}x=$ ${(this.interactif || !context.isHtml) ? ajouteChampTexteMathLive(this, i, 'largeur10 inline') : '\\\\ldots'}`\n      texteCorr = 'Comme $A$ et $\\\\bar A$ forment une partition de l\\'univers, d\\'après la loi des probabilités totales :<br>'\n      texteCorr += '$P(C)=P(A \\\\cap C)+P(\\\\bar{A} \\\\cap C)$.<br>'\n      texteCorr += `Or $P(\\\\bar{A} \\\\cap C)=P(\\\\bar{A}) \\\\times P_{\\\\bar{A}}(C)=${texProba(pB, false)}x$.<br>`\n      texteCorr += `Donc $${texProba(pB, false)}x=P(C)-P(A \\\\cap C)=${texProba(pC, false)}-${texProba(pA, false)}\\\\times ${texProba(pAC, false)}=${texProba(pC, false)}-${texProba(pA * pAC, false)}=${texProba(pC - pA * pAC, false)}$.<br>`\n      texteCorr += `Donc $x=\\\\dfrac{${texProba(pC - pA * pAC, false)}}{${texProba(pB, false)}}=${texProba(pBC)}$`\n      setReponse(this, i, pBC)\n      if (this.questionJamaisPosee(i, pA, pAC, pBC)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Proba rationnelle', true]\n}\n","import { add, number, multiply } from 'mathjs'\nimport { barycentre, latexParPoint, milieu, point, polygone, segment } from './2d'\nimport { fraction } from './fractions'\nimport { arrondi, calcul } from './outils'\n\nexport function texProba (proba, rationnel, precision) {\n  return rationnel ? fraction(proba).toLatex() : number(arrondi(proba, precision)).toString().replace('.', '{,}')\n}\n/**\n * classe pour faire des arbres de probabilités\n * @author Jean-Claude Lhote\n * la classe Arbre permet de définir un arbre de probabilité.\n * à son sommet, il y a un Arbre qui parent = null\n * Ses enfants sont eux-mêmes Arbre(s) qui l'ont comme parent.\n * Un Arbre possède un nom (de type string) qui l'identifie de façon unique (c'est important si on veut éviter des proba aléatoires)\n * chaque Arbre possède une proba. C'est la probabilité qu'on a d'atteindre cet arbre à partir de son parent.\n * Exemple: const pin = new Arbre(null, 'pin', 1) (c'est une forêt de pins)\n */\nexport class Arbre {\n  constructor ({ nom, proba, enfants, rationnel, visible, alter, racine } = {}) {\n    this.racine = racine !== undefined ? Boolean(racine) : false\n    this.enfants = enfants !== undefined ? Array(...enfants) : []\n    this.nom = nom !== undefined ? String(nom) : ''\n    this.rationnel = rationnel !== undefined ? Boolean(rationnel) : true\n    this.proba = proba !== undefined ? (rationnel ? fraction(proba) : number(proba)) : 0\n    this.visible = visible !== undefined ? visible : true\n    this.alter = alter !== undefined ? String(alter) : ''\n    this.taille = 0\n    this.pos = 0\n  }\n\n  // questionnement : est-ce qu'on vérifie à chaque ajout que la somme des probabilités ne dépasse pas 1 ?\n  /**\n   * @param {String} nom Le nom de cet Arbre-fils\n   * @param {Number} proba La probabilité d'aller à ce fils depuis le père.\n   * @returns l'Arbre-fils créé\n   * Exemple : const sylvestre = pin.setFils('sylvestre', 0.8) un 'pin' a une probabilité de 0.8 d'être 'sylvestre'.\n   */\n  setFils (nom, proba, rationnel) {\n    const arbre = new Arbre(this, nom, proba, (rationnel || this.rationnel))\n    this.enfants.push(arbre)\n    return arbre\n  }\n\n  /**\n   * Fonction récursive qui cherche dans la descendance complète un arbre nommé.\n   * @param {String} nom Le nom de l'Arbre recherché dans les fils\n   * @returns l'Arbre descendant portant ce nom.\n   * Exemple : const unArbre = pin.getFils('sylvestre')\n   */\n  getFils (nom) {\n    const monArbre = []\n    for (const arbre of this.enfants) {\n      if (arbre.nom === nom) return [arbre]\n      else {\n        monArbre.push(...arbre.getFils(nom))\n      }\n    }\n    return monArbre\n  }\n\n  // est-ce qu'on vérifie si la somme des probabilités ne dépasse pas 1 ?\n  /**\n   *\n   * @param {String} nom Le nom de l'Arbre recherché dans les fils\n   * @param {Number} proba La probabilité du fils pour le père.\n   * @returns l'Arbre-fils.\n   */\n  setFilsProba (nom, proba, rationnel) { // si le fils nommé nom existe, on fixe sa proba (en gros, on la modifie)\n    let arbre = this.getFils(nom)\n    if (arbre) {\n      arbre.proba = (rationnel || this.rationnel) ? fraction(proba) : number(proba)\n    } else { // sinon on ajoute ce fils.\n      arbre = new Arbre(this, nom, proba, (rationnel || this.rationnel))\n      this.enfants.push(arbre)\n    }\n    return arbre\n  }\n\n  // Essai de fonction récursive pour calculer la probabilité d'un événement.\n  /**\n   *\n   * @param {String} nom Le nom d'un descendant ou pas\n   * @param {Number} proba facultatif : Si elle est fixée à 1, alors on obtient la probabilité conditionnelle.\n   * Si elle n'est pas fixée, c'est la probabilité de l'arbre duquel on part qui est pris pour le calcul.\n   * @returns Probabilité conditionnelle ou pas d'atteindre l'arbre nommé à partir du père.\n   * Exemple : si pin.getFilsProba('sylvestre')===0.8 et si sylvestre.getFilsProba('malade')===0.5\n   * alors pin.getProba('malade')===0.4 et sylvestre.getProba('malade')===0.4 aussi ! par contre\n   * sylvestre.getProba('malade', 1)= 0.5\n   */\n  getProba (nom, rationnel) {\n    let p = rationnel ? fraction(0, 1) : 0\n    let probaArbre = rationnel ? fraction(0, 1) : 0\n    if (this.nom === nom) return (rationnel || this.rationnel) ? fraction(this.proba) : number(this.proba)\n    else {\n      for (const arbre of this.enfants) {\n        if (arbre.nom === nom) p = add(p, (rationnel || this.rationnel) ? fraction(arbre.proba) : number(arbre.proba))\n        else {\n          if (rationnel) {\n            probaArbre = add(fraction(probaArbre), multiply(fraction(arbre.proba), fraction(arbre.getProba(nom, true))))\n          } else {\n            probaArbre = number(probaArbre) + number(multiply(arbre.proba, number(arbre.getProba(nom, false))))\n          }\n        }\n      }\n      p = add(p, (rationnel || this.rationnel) ? fraction(probaArbre) : number(probaArbre))\n    }\n    return rationnel ? fraction(p) : number(p)\n  }\n\n  // méthode pour compter les descendants de l'arbre (le nombre de feuilles terminales).\n  branches () {\n    let nbBranches = 0\n    if (this.enfants.length === 0) return 1\n    else {\n      for (const enfant of this.enfants) {\n        nbBranches += enfant.branches()\n      }\n    }\n    return nbBranches\n  }\n\n  // Methode à appeler avant de représenter l'arbre car elle va récursivement définir toutes les tailles...\n  setTailles () {\n    try {\n      this.taille = this.branches()\n      for (const arbre of this.enfants) {\n        arbre.setTailles()\n      }\n    } catch (error) {\n      console.log(error)\n      return false\n    }\n    return true\n  }\n\n  /**\n   * xOrigine et yOrigine définissent le point de référence de l'arbre... c'est un angle du cadre dans lequel l'arbre est construit par la position de la racine\n   * decalage vaut 0 lors de l'appel initial... cette valeur est modifiée pendant le parcours de l'arbre.\n   * echelle est à fixé à 3 si on utilise des fractions et peut être déscendu à 2 si on utilise des nombres décimaux... echelle peut être décimal.\n   * vertical est un booléen. Si true, alors l'arbre sera construit de bas en haut ou de haut en bas, sinon, il sera construit de gauche à droite ou de droite à gauche.\n   * sens indique la direction de pousse : 1 positif, -1 négatif.\n   */\n  represente (xOrigine = 0, yOrigine = 0, decalage = 0, echelle = 1, vertical = false, sens = -1) {\n    const objets = []\n    const A = point(vertical\n      ? xOrigine\n      : xOrigine + decalage + this.taille * echelle / 2\n    , vertical\n      ? yOrigine + decalage - this.taille * echelle / 2\n      : yOrigine\n    , '', 'center')\n    const B = point(vertical\n      ? xOrigine - sens * 5\n      : xOrigine\n    , vertical\n      ? yOrigine\n      : yOrigine - sens * 5\n    )\n    const labelA = latexParPoint(this.nom, A, 'black', 8 * this.nom.length, 20, 'white', 10)\n    const positionProba = vertical ? barycentre(polygone(A, A, A, B, B), '', 'center') : milieu(A, B, '', 'center') // Proba au 2/5 de [AB] en partant de A.\n    const probaA = this.visible\n      ? latexParPoint(texProba(this.proba, this.rationnel, 2), positionProba, 'black', 20, 24, 'white', 8)\n      : latexParPoint(this.alter, positionProba, 'black', 20, 24, 'white', 8)\n    if (this.enfants.length === 0) {\n      return [segment(B, A), labelA, probaA]\n    } else {\n      for (let i = 0; i < this.enfants.length; i++) {\n        objets.push(...this.enfants[i].represente(vertical\n          ? xOrigine + sens * 5\n          : xOrigine + decalage + this.taille * echelle / 2\n        , vertical\n          ? yOrigine + decalage - this.taille * echelle / 2\n          : yOrigine + sens * 5\n        , vertical\n          ? calcul(echelle * ((this.enfants.length / 2 - i) * this.enfants[i].taille))\n          : calcul(echelle * ((i - this.enfants.length / 2) * this.enfants[i].taille)),\n        echelle, vertical, sens))\n      }\n      if (this.racine) {\n        objets.push(labelA)\n      } else {\n        objets.push(segment(B, A), labelA, probaA)\n      }\n    }\n    return objets\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","dateDePublication","interactifReady","interactifType","amcReady","amcTpe","CalculProbaArbre2e","sup","pA","pB","pAC","pBC","omega","texte","texteCorr","objets","pC","cpt","number","randint","Arbre","racine","rationnel","nom","proba","visible","alter","enfants","setTailles","represente","getProba","texProba","mathalea2d","xmin","xmax","ymin","ymax","style","context","ajouteChampTexteMathLive","setReponse","listeQuestionsToContenu","precision","fraction","toLatex","arrondi","replace","constructor","Boolean","Array","String","taille","pos","setFils","arbre","getFils","monArbre","setFilsProba","p","probaArbre","add","multiply","branches","nbBranches","length","enfant","error","console","log","xOrigine","yOrigine","decalage","echelle","vertical","sens","A","point","B","labelA","latexParPoint","positionProba","barycentre","polygone","milieu","probaA","segment","calcul"],"sourceRoot":""}