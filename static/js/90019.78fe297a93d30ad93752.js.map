{"version":3,"file":"js/90019.78fe297a93d30ad93752.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3I1-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { texteEnCouleurEtGras, listeQuestionsToContenu, combinaisonListesSansChangerOrdre, randint, calcul, modalYoutube, lampeMessage, enumerateSansPuceSansNumero, texteGras } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\n\nimport { mathalea2d, repere2, traceGraphiqueCartesien, point, segment, latexParCoordonnees } from '../../modules/2d.js'\n\nexport const titre = 'Conjecture de Syracuse'\n\n/**\n * @class Syracuse\n * @classdesc Outils pour les suites de Syracuse\n * @author Sébastien Lozano\n */\n\nfunction Syracuse ({ N }) {\n  // Pour déterminer les éléments de la suite de Syracuse jusqu'au premier 1\n  this.suiteDeSyracuse = function () {\n    let sortie = [N]\n    let u = N\n    if (N === 1) {\n      sortie = [1, 4, 2, 1]\n    } else {\n      while (u !== 1) {\n        if (u % 2 === 0) {\n          u = u / 2\n        } else {\n          u = 3 * u + 1\n        };\n        sortie.push(u)\n      };\n    }\n    return sortie\n  }\n\n  // Pour créer les coordonées à placer dans un graphique cartésien d'une suite de Syracuse\n  this.coordonneesSuiteDeSyracuse = function (suite) {\n    const sortie = []\n    for (let i = 0; i < suite.length; i++) {\n      sortie.push([i, suite[i]])\n    };\n    return sortie\n  }\n\n  // Pour déterminer la valeur maximale de la suite jusqu'au premier 1\n  this.altitudeMaximale = function () {\n    const entier = N\n    return Math.max(...this.suiteDeSyracuse(entier))\n  }\n\n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1\n  // sans compter la valeur initiale\n  this.tempsDeVol = function () {\n    const entier = N\n    return this.suiteDeSyracuse(entier).length - 1\n  }\n\n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1\n  // qui sont strictement supérieurs à la valeur initiale sans la compter !\n  this.tempsDeVolEnAltitude = function () {\n    const entier = N\n    let compteur = 1\n    while (this.suiteDeSyracuse(entier)[compteur] > this.suiteDeSyracuse(entier)[0]) {\n      compteur += 1\n    };\n    return compteur - 1\n  }\n};\n\nfunction syracuse ({ N = '1' }) {\n  return new Syracuse({ N: N })\n};\n\nexport default function ConjectureDeSyracuse () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 5 // Ici le nombre de questions\n  this.nbQuestionsModifiable = false // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.correctionDetailleeDisponible = true\n  this.listePackages = 'bclogo'\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n\n  //  this.sup = false; // A décommenter : valeur par défaut d'un premier paramètre\n  //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n  //  this.sup3 = false; // A décommenter : valeur par défaut d'un troisième paramètre\n\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function (numeroExercice) {\n    this.boutonAide = modalYoutube(\n      numeroExercice,\n      'https://youtu.be/aRe4ARtQiJY',\n      'Conjecture de Syracuse',\n      'En vidéo sur Maths-et-tiques'\n    )\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n    // On choisit un entier pour l'étude de la suite de Syracuse correspondante\n    // On contraint le temps de vol entre 5 et 25\n    // On contraint l'altitude maximale en dessous de 100\n    // let entier = 15;\n    let entier = randint(1, 200)\n    while (syracuse({ N: entier }).tempsDeVol() > 25 || syracuse({ N: entier }).tempsDeVol() < 5 || syracuse({ N: entier }).altitudeMaximale() > 100) {\n      entier = randint(1, 200)\n    };\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Petite intro connaissances\n      let stringIntro = `En mathématiques, on appelle conjecture une proposition qui n'est pas encore démontrée.\n        On a éventuellement vérifié cette proposition sur beaucoup d'exemples mais cela ne garantit pas qu'elle soit toujours vraie.<br>\n        Nous allons nous intéresser à la ${texteGras('conjecture de Syracuse')} découverte par le mathématicien allemand ${texteGras('Lothar Collatz')} en 1930\n        à l'université de Syracuse.`\n      if (context.isHtml) {\n        stringIntro += '<br><br>'\n      } else {\n        stringIntro += '\\\\par\\\\vspace{0.5cm}'\n      };\n      stringIntro += `${texteGras('Algorithme de Syracuse :')}`\n      if (context.isHtml) {\n        stringIntro += '<br>'\n      };\n      stringIntro += `        \n        ${enumerateSansPuceSansNumero([\n          'On choisit un nombre entier strictement positif.',\n          '$\\\\leadsto$ Si l\\'entier choisi est pair on le divise par 2.',\n          '$\\\\leadsto$ Si l\\'entier choisi est impair on le multiplie par 3 et on ajoute 1.',\n          'On recommence avec le nouvel entier trouvé tant qu\\'il ne vaut pas 1.'\n        ])}<br>                    \n        `\n      stringIntro += `${texteGras('Conjecture de Syracuse :')}<br>`\n      stringIntro += `Encore appelée conjecture de ${texteGras('Collatz')}, conjecture ${texteGras('d\\'Ulam')},\n        conjecture ${texteGras('tchèque')} ou ${texteGras('problème 3x + 1')}, est l'hypothèse mathématique selon laquelle\n        la suite de Syracuse de n'importe quel entier strictement positif atteint 1.<br>\n        En dépit de la simplicité de son énoncé, cette conjecture défie depuis de nombreuses années les mathématiciens.\n        `\n\n      this.introduction = lampeMessage({\n        titre: 'Introduction',\n        texte: stringIntro,\n        couleur: 'nombres'\n      })\n\n      // Pour les objets de mathALEA2D\n      const objetsCorrection = []; const objetsCorrectionPlus = []; let paramsCorrection = {}\n      // On crée la liste de coordonnées de la suite de Syracuse\n      const coordSyracuse = syracuse({ N: entier }).coordonneesSuiteDeSyracuse(syracuse({ N: entier }).suiteDeSyracuse())\n\n      // Pour ajouter le graphique et le repère\n      const yCoeff = 5\n      const xCoeff = 2\n\n      // Le repère\n      const r2 = repere2({\n        axesEpaisseur: 3,\n        grille: false,\n        xMin: -1,\n        yMin: -1,\n        xMax: syracuse({ N: entier }).tempsDeVol() + 1,\n        yMax: syracuse({ N: entier }).altitudeMaximale() + 5,\n        yThickMin: 0,\n        yThickDistance: 1 * yCoeff,\n        yUnite: 1 / yCoeff,\n        xUnite: 1 / xCoeff,\n        xThickMin: 0,\n        xThickDistance: 1 * xCoeff,\n        xLegende: 'Applications de l\\'algorithme',\n        xLegendePosition: [calcul((syracuse({ N: entier }).tempsDeVol() + 2) / xCoeff), 0],\n        yLegende: 'Altitude',\n        yLegendePosition: [-1, calcul((syracuse({ N: entier }).altitudeMaximale() + 8) / yCoeff)]\n      })\n\n      // Le graphique cartésien\n      const g = traceGraphiqueCartesien(coordSyracuse, r2)\n\n      // On pousse tout ça dans les objets, le repère aussi coño !!!\n      objetsCorrection.push(r2, g)\n\n      const A = point(0, syracuse({ N: entier }).suiteDeSyracuse()[0] / yCoeff)\n      const B = point(syracuse({ N: entier }).tempsDeVol() / xCoeff, syracuse({ N: entier }).suiteDeSyracuse()[0] / yCoeff)\n      const s = segment(A, B, 'red')\n      // let t = texteParPoint('mon texte',B);\n      const t = latexParCoordonnees(\n        '\\\\text{Altitude initiale}',\n        syracuse({ N: entier }).tempsDeVol() / xCoeff,\n        syracuse({ N: entier }).suiteDeSyracuse()[0] / yCoeff,\n        'red',\n        200,\n        25,\n        'white'\n      )\n\n      objetsCorrectionPlus.push(r2, g, s, t)\n\n      // On fixe la fenetre pour le SVG/Tikz\n      paramsCorrection = {\n        xmin: -2,\n        ymin: -2,\n        xmax: calcul((syracuse({ N: entier }).tempsDeVol() + 20) / xCoeff),\n        ymax: calcul((syracuse({ N: entier }).altitudeMaximale() + 10) / yCoeff),\n        pixelsParCm: 30,\n        // scale: 0.7,\n        optionsTikz: [`xscale=${18 / calcul((syracuse({ N: entier }).tempsDeVol() + 20) / xCoeff)}`, `yscale=${7 / calcul((syracuse({ N: entier }).altitudeMaximale() + 10) / yCoeff)}`],\n        mainlevee: false\n      }\n\n      const stringConnaissance = {\n        cas1: {\n          titre: 'Cycle trivial',\n          texte: `Après que le nombre 1 a été atteint, la suite des valeurs (4,2,1) se répète indéfiniment.\n            C'est pourquoi on ne s'intéresse qu'à la liste des entiers jusqu'au premier 1.`\n        },\n        cas2: {\n          titre: `Vol de la suite de Syracuse ${entier}`,\n          texte: `Les graphiques font penser à la chute chaotique d'un grêlon ou bien à la trajectoire d'une feuille emportée par le vent.\n            Sur le graphique ci-dessous, on peut observer le vol de la suite de Syracuse ${entier}.`\n        },\n        cas3: {\n          titre: `Altitude maximale de la suite de Syracuse ${entier}`,\n          texte: 'Si on file la métaphore, la valeur maximale atteinte par les valeurs trouvées serait désignée par l\\'altitude maximale du vol. '\n        },\n        cas4: {\n          titre: `Temps de vol de la suite de Syracuse ${entier}`,\n          texte: 'C\\'est le plus petit nombre de fois qu\\'il faut appliquer l\\'algorithme pour atteindre la valeur 1 pour la première fois.'\n        },\n        cas5: {\n          titre: `Temps de vol en altitude de la suite de Syracuse ${entier}`,\n          texte: `C'est le plus petit nombre de fois qu'il faut appliquer l'algorithme avant que la valeur suivante soit strictement inférieure\n            à la valeur initiale. ${texteGras('Attention')} cela ne signifie pas que l'on ne repassera jamais au dessus de la valeur initiale.\n            `\n        }\n      }\n\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 1: // étude du cas N = 1\n          texte = 'On choisit le nombre entier 1. Quels sont tous les entiers déterminés par cet algorithme ?'\n          texteCorr = `Si on choisit le nombre 1 au départ la suite de Syracuse est : ${texteGras(syracuse({ N: 1 }).suiteDeSyracuse())}<br><br>`\n          texteCorr += texteEnCouleurEtGras('Remarque - ' + stringConnaissance.cas1.titre) + ' : ' + stringConnaissance.cas1.texte\n          break\n        case 2: // suite de Syracuse pour un entier aléatoire\n          texte = `Déterminer tous les entiers issus de cet algorithme lorsqu'on choisit ${entier}.`\n          texteCorr = `La suite de Syracuse du nombre ${entier} est : <br>\n            ${texteGras(syracuse({ N: entier }).suiteDeSyracuse())}<br><br>`\n          texteCorr += texteEnCouleurEtGras('Remarque - ' + stringConnaissance.cas2.titre) + ' : ' + stringConnaissance.cas2.texte + '<br><br>'\n\n          if (this.correctionDetaillee) {\n            texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n          }\n          break\n        case 3:// altitude max\n          texte = 'Quelle est la valeur maximale de cette liste d\\'entiers ?'\n          texteCorr = `La valeur maximale atteinte vaut : ${texteGras(syracuse({ N: entier }).altitudeMaximale())}<br><br>`\n          texteCorr += texteEnCouleurEtGras('Remarque - ' + stringConnaissance.cas3.titre) + ' : ' + stringConnaissance.cas3.texte\n          break\n        case 4:// temps de vol\n          texte = 'Combien de fois au minimum faut-il appliquer l\\'algorithme pour trouver la valeur 1 ?'\n          texteCorr = `Il faut  appliquer au minimum ${texteGras(syracuse({ N: entier }).tempsDeVol())} fois l'algorithme pour trouver la valeur 1.<br><br>`\n          texteCorr += texteEnCouleurEtGras('Remarque - ' + stringConnaissance.cas4.titre) + ' : ' + stringConnaissance.cas4.texte\n          break\n        case 5:// temps de vol en altitude\n          texte = 'Au bout de combien d\\'application minimum de l\\'algorithme la valeur calculée suivante sera-t-elle strictement inférieure à la valeur initiale ?'\n          // `Quelle est le nombre d'éléments de cette liste d'entiers qui sont strictement supérieurs à la valeur initiale, sans compter cette valeur initiale ?`;\n          if (syracuse({ N: entier }).tempsDeVolEnAltitude() === 0) {\n            texteCorr = 'Dès la première application de l\\'algorithme la valer trouvée est inférieure à la valeur initiale.'\n          } else {\n            texteCorr = `Il faut appliquer au minimum ${texteGras(syracuse({ N: entier }).tempsDeVolEnAltitude())} fois l'algorithme pour que la valeur calculée suivante soit strictement inférieure à la valeur initiale.`\n          };\n          texteCorr += '<br><br>'\n          // texteCorr += `${syracuse({N:entier}).tempsDeVolEnAltitude()}<br><br>`;\n          texteCorr += texteEnCouleurEtGras('Remarque - ' + stringConnaissance.cas5.titre) + ' : ' + stringConnaissance.cas5.texte + '<br><br>'\n\n          if (this.correctionDetaillee) {\n            texteCorr += mathalea2d(paramsCorrection, objetsCorrectionPlus)\n          }\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  // this.besoinFormulaireNumerique = ['Type de questions', 3, `1 : Perpendiculaires\\n 2 : Parallèles\\n 3 : Mélange`]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Syracuse","N","this","suiteDeSyracuse","sortie","u","push","coordonneesSuiteDeSyracuse","suite","i","length","altitudeMaximale","entier","Math","max","tempsDeVol","tempsDeVolEnAltitude","compteur","syracuse","ConjectureDeSyracuse","Exercice","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","correctionDetailleeDisponible","listePackages","nouvelleVersion","numeroExercice","boutonAide","modalYoutube","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","randint","texte","texteCorr","cpt","stringIntro","texteGras","context","enumerateSansPuceSansNumero","introduction","lampeMessage","couleur","objetsCorrection","objetsCorrectionPlus","paramsCorrection","coordSyracuse","yCoeff","xCoeff","r2","repere2","axesEpaisseur","grille","xMin","yMin","xMax","yMax","yThickMin","yThickDistance","yUnite","xUnite","xThickMin","xThickDistance","xLegende","xLegendePosition","calcul","yLegende","yLegendePosition","g","traceGraphiqueCartesien","A","point","B","s","segment","t","latexParCoordonnees","xmin","ymin","xmax","ymax","pixelsParCm","optionsTikz","mainlevee","stringConnaissance","cas1","cas2","cas3","cas4","cas5","texteEnCouleurEtGras","correctionDetaillee","mathalea2d","indexOf","listeQuestionsToContenu","consigneCorrection","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}