{"version":3,"file":"js/84801.ec200bae689a52c1a1cf.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Tables_de_multiplications.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, creerCouples, choice, texNombre, randint } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n/**\n * Tables de multiplications classiques, à trou ou un mélange des deux.\n *\n * Par défaut ce sont les tables de 2 à 9 mais on peut choisir les tables que l'on veut\n * @author Rémi Angot\n * Référence 6C10-1\n */\nexport default function TablesDeMultiplications (tablesParDefaut = '2-3-4-5-6-7-8-9') {\n  // Multiplier deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.sup2 = 1 // classique|a_trous|melange\n  this.titre = 'Tables de multiplications'\n  this.consigne = 'Calculer : '\n  this.spacing = 2\n\n  this.nouvelleVersion = function () {\n    this.sup2 = parseInt(this.sup2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    let tables = []\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des -\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    let typesDeQuestions = 'a_trous'\n    for (let i = 0, a, b, texte, texteCorr; i < this.nbQuestions; i++) {\n      a = couples[i][0]\n      b = couples[i][1]\n      if (parseInt(this.sup2) === 1) {\n        typesDeQuestions = 'classique'\n      } else if (parseInt(this.sup2) === 2) {\n        typesDeQuestions = 'a_trous'\n      } else {\n        typesDeQuestions = choice(['classique', 'a_trous'])\n      }\n      if (typesDeQuestions === 'classique') {\n        // classique\n        if (choice([true, false])) {\n          texte = `$ ${texNombre(a)} \\\\times ${texNombre(b)} = `\n          texte += (this.interactif && context.isHtml) ? '$' + ajouteChampTexte(this, i, { numeric: true }) : '\\\\dotfill$'\n          texteCorr = `$ ${texNombre(a)} \\\\times ${texNombre(b)} = ${texNombre(a * b)}$`\n        } else {\n          texte = `$ ${texNombre(b)} \\\\times ${texNombre(a)} = `\n          texte += (this.interactif && context.isHtml) ? '$' + ajouteChampTexte(this, i, { numeric: true }) : '\\\\dotfill$'\n          texteCorr = `$ ${texNombre(b)} \\\\times ${texNombre(a)} = ${texNombre(a * b)}$`\n        }\n        setReponse(this, i, a * b)\n      } else {\n        // a trous\n        if (tables.length > 2) {\n          // Si pour le premier facteur il y a plus de 2 posibilités on peut le chercher\n          if (randint(1, 2) === 1) {\n            texte = '$ ' + a + ' \\\\times '\n            texte += (this.interactif && context.isHtml) ? '$' + ajouteChampTexte(this, i, { numeric: true, texteApres: `$ = ${a * b} $` }) : `   \\\\ldots\\\\ldots = ${a * b}$`\n            setReponse(this, i, b)\n          } else {\n            texte = (this.interactif && context.isHtml) ? ajouteChampTexte(this, i, { numeric: true, texteApres: `$\\\\times ${b} = ${a * b}$` }) : `$ \\\\ldots\\\\ldots \\\\times ${b} = ${a * b}$`\n            setReponse(this, i, a)\n          }\n        } else {\n          // Sinon on demande forcément le 2e facteur\n          texte = `$${a} \\\\times `\n          texte += (this.interactif && context.isHtml) ? '$' + ajouteChampTexte(this, i, { numeric: true, texteApres: ` = ${a * b}` }) + '$' : `\\\\ldots\\\\ldots = ${a * b}$`\n          setReponse(this, i, b)\n        }\n        texteCorr = `$${a} \\\\times ${b} = ${a * b}$`\n      }\n      if (context.isDiaporama) {\n        texte = texte.replace('= \\\\dotfill', '')\n      }\n      if (context.isAmc) {\n        this.autoCorrection[i].reponse.param = { digits: 2, decimals: 0, signe: false, exposantNbChiffres: 0, exposantSigne: false, approx: 0 }\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n  this.besoinFormulaire2Numerique = [\n    'Type de questions',\n    3,\n    '1 : Classique\\n2 : À trous\\n3 : Mélange'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","TablesDeMultiplications","tablesParDefaut","Exercice","this","sup","sup2","titre","consigne","spacing","nouvelleVersion","parseInt","listeQuestions","listeCorrections","autoCorrection","tables","split","couples","creerCouples","nbQuestions","typesDeQuestions","a","b","texte","texteCorr","i","choice","texNombre","interactif","context","ajouteChampTexte","numeric","setReponse","length","randint","texteApres","replace","reponse","param","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}