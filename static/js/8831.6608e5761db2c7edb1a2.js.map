{"version":3,"sources":["webpack://mathalea/./src/js/exercices/1e/1N11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Terme_d_une_suite_definie_par_recurrence","Exercice","this","consigne","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","u","a","b","k","i","cpt","randint","choice","ecritureAlgebrique","indice","miseEnEvidence","arcenciel","ecritureParentheseSiNegatif","signe","texNombre","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/8831.6608e5761db2c7edb1a2.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,ecritureAlgebrique,ecritureParentheseSiNegatif,signe,texNombre,miseEnEvidence,arcenciel} from '../../modules/outils.js'\n\nexport const titre = 'Déterminer les termes d’une suite définie par récurrence'\n\n/**\n * 1N11\n * @author Gaelle Morvan\n */\nexport default function Terme_d_une_suite_definie_par_recurrence() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"Une suite étant donnée, calculer le terme demandé.\";\n  this.nbQuestions = 4;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Vide la liste de questions\n    this.listeCorrections = []; // Vide la liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = [1, 2, 3, 4];\n    let listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, texteCorr, cpt = 0, u, a, b, k; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1: //suite arithmétique\n          a = randint(1, 10) * choice([-1, 1]);\n          u = randint(0, 10) * choice([-1, 1]);\n          k = randint(2, 10);\n\n          texte = `Soit $(u_n)$ une suite définie par $u_0=${u}$ et pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_{n+1} = u_n ${ecritureAlgebrique(a)}$.`;\n\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `On calcule successivent les termes jusqu'à obtenir $u_{${k}}$ :`;\n          for (let indice = 0; indice < k; indice++) {\n            texteCorr += `<br> $u_{${indice + 1}} = ${miseEnEvidence('u_{' + indice + '}', arcenciel(indice, true))} ${ecritureAlgebrique(a)} = \n              ${miseEnEvidence(u, arcenciel(indice, true))} + ${a} = ${miseEnEvidence(u + a, arcenciel(indice + 1, true))}$`;\n            u = u + a;\n          }\n          break;\n\n        case 2: //suite géométrique\n          a = randint(2, 5) * choice([-1, 1]);\n          u = randint(1, 9) * choice([-1, 1]);\n          k = randint(2, 6);\n\n          texte = `Soit $(u_n)$ une suite définie par $u_0=${u}$ et pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_{n+1} = u_n \\\\times ${ecritureParentheseSiNegatif(a)}$.`;\n\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `On calcule successivent les termes jusqu'à obtenir $u_${k}$ :`;\n          for (let indice = 0; indice < k; indice++) {\n            texteCorr += `<br> $u_{${indice + 1}} = ${miseEnEvidence('u_{' + indice + '}', arcenciel(indice, true))} \\\\times ${ecritureParentheseSiNegatif(a)} = \n              ${miseEnEvidence(u, arcenciel(indice, true))} \\\\times ${ecritureParentheseSiNegatif(a)} = ${miseEnEvidence(u * a, arcenciel(indice + 1, true))}$`;\n            u = u * a;\n          }\n          break;\n\n        case 3: //suite arithmético-géométrique\n          a = randint(2, 5) * choice([-1, 1]);\n          b = randint(1, 5) * choice([-1, 1]);\n          u = randint(1, 5) * choice([-1, 1]);\n          k = randint(2, 6);\n\n          texte = `Soit $(u_n)$ une suite définie par $u_0=${u}$ et pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_{n+1} = ${a} u_n ${ecritureAlgebrique(b)}$.`;\n\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `On calcule successivent les termes jusqu'à obtenir $u_${k}$ :`;\n          for (let indice = 0; indice < k; indice++) {\n            texteCorr += `<br> $u_{${indice + 1}} = ${a}\\\\times ${miseEnEvidence('u_{' + indice + '}', arcenciel(indice, true))} ${ecritureAlgebrique(b)}=`;\n            texteCorr += `${a} \\\\times ${ecritureParentheseSiNegatif(miseEnEvidence(u, arcenciel(indice, true)))} ${ecritureAlgebrique(b)} = \n            ${miseEnEvidence(a * u + b, arcenciel(indice + 1, true))}$`;\n            u = u * a + b;\n          }\n          break;\n\n        case 4: // suite de la forme u(n+1) = a +- u(n)^2\n          a = randint(1, 5) * choice([-1, 1]);\n          b = choice([-1, 1]);\n          u = randint(1, 5) * choice([-1, 1]);\n          k = randint(2, 3);\n\n          texte = `Soit $(u_n)$ une suite définie par $u_0=${u}$ et pour tout entier $n\\\\in\\\\mathbb{N}$ par $u_{n+1} = ${a} ${signe(b)} u_n^2$.`;\n\n          texte += `<br>Calculer $u_{${k}}$.`;\n\n          texteCorr = `On calcule successivent les termes jusqu'à obtenir $u_${k}$ :`;\n          for (let indice = 0; indice < k; indice++) {\n            texteCorr += `<br> $u_{${indice + 1}} = ${a} ${signe(b)} (${miseEnEvidence('u_{' + indice + '}', arcenciel(indice, true))})^2=`;\n            texteCorr += `${a} ${signe(b)} ${ecritureParentheseSiNegatif(miseEnEvidence(u, arcenciel(indice, true)))}^2 = \n              ${miseEnEvidence(texNombre(a + b * u * u), arcenciel(indice + 1, true))}$`;\n            u = a + b * u * u;\n          }\n          break;\n      }\n\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte); // Sinon on enregistre la question dans listeQuestions\n        this.listeCorrections.push(texteCorr); // On fait pareil pour la correction\n        i++; // On passe à la question suivante\n      }\n      cpt++; // Sinon on incrémente le compteur d'essai pour avoir une question nouvelle\n    }\n    listeQuestionsToContenu(this); // La liste de question et la liste de la correction\n  };\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}