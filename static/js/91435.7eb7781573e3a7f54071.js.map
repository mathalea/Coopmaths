{"version":3,"file":"js/91435.7eb7781573e3a7f54071.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N12-2.js","webpack://mathalea/./src/js/exercices/4e/4C30-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import PuissancesEncadrement from '../4e/4C30-1.js'\nexport const titre = 'Décomposition en facteurs premiers'\nexport const dateDeModifImportante = '2/11/2021'\nexport { interactifReady, interactifType } from '../4e/4C30-1.js'\n/**\n * Clone de 4C30-1 pour les 2nde\n *\n * @author Jean-Claude Lhote\n */\n\nexport default function PuissancesEncadrement2nde () {\n  PuissancesEncadrement.call(this)\n  this.sup = 5\n  this.besoinFormulaireNumerique = false\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, sp } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const titre = 'Encadrer avec des puissances de 10'\n\n/**\n * Encadrer par des puissances de 10\n * 4C30-1\n * @author Sébastien Lozano (Modifications apportées par Eric Elter)\n */\nexport default function PuissancesEncadrement () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4\n  this.nbQuestions = 6\n  this.titre = titre\n\n  this.consigne = 'Encadrer les nombres suivants par deux puissances de 10 d\\'exposants consécutifs.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n\n  let typesDeQuestionsDisponibles\n  let signeChange\n\n  this.nouvelleVersion = function () {\n    this.sup = Number(this.sup) // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !\n    signeChange = false\n    switch (this.sup) {\n      case 1: // nombre enier positif\n        typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6]\n        // this.nbQuestions = typesDeQuestionsDisponibles.length;\n        // this.nbQuestions = 3;\n        break\n      case 2: // nombre décimal positif\n        typesDeQuestionsDisponibles = [7, 8, 9, 10]\n        // this.nbQuestions = typesDeQuestionsDisponibles.length;\n        // this.nbQuestions = 3;\n        break\n      case 3: // nombre décimal positif inférieur à 1\n        typesDeQuestionsDisponibles = [11, 12, 13, 14]\n        // this.nbQuestions = typesDeQuestionsDisponibles.length;\n        // this.nbQuestions = 3;\n        break\n      case 4: // Mélange\n        typesDeQuestionsDisponibles = [\n          choice([1, 2, 3]),\n          choice([4, 5, 6]),\n          choice([7, 8]),\n          choice([9, 10]),\n          choice([11, 12]),\n          choice([13, 14])\n        ]\n        // this.nbQuestions = typesDeQuestionsDisponibles.length;\n        break\n      case 5: // Mélange\n        typesDeQuestionsDisponibles = [\n          choice([1, 2, 3]),\n          choice([4, 5, 6]),\n          choice([7, 8]),\n          choice([9, 10]),\n          choice([11, 12]),\n          choice([13, 14])\n        ]\n        signeChange = true\n        // this.nbQuestions = typesDeQuestionsDisponibles.length;\n        break\n    }\n\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    // let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (\n      let i = 0, signe, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      // nombre entier positif, entre 1 et 10, puis 10 et 100 puis ....100 000 et 1 000 000\n      const entPos = []\n      const nombreEntier = []\n      const nombreDecimal = []\n      const nombreDecInfUn = []\n      for (let i = 0; i < 6; i++) {\n        signe = signeChange ? choice([-1, 1]) : 1\n        entPos.push({\n          val: `${texNombre(signe * randint(10 ** i + 1, 10 ** (i + 1) - 1))}`,\n          puissance_inf: signe === 1 ? `10^{${i}}` : `-10^{${i + 1}}`,\n          puissance_sup: signe === 1 ? `10^{${i + 1}}` : `-10^{${i}}`,\n          puissance_inf_num: signe === 1 ? `${texNombre(10 ** i)}` : `$${texNombre(-1 * 10 ** (i + 1))}`,\n          puissance_sup_num: signe === 1 ? `${texNombre(10 ** (i + 1))}` : `$${texNombre(-1 * 10 ** i)}`\n        })\n        nombreEntier.push(signe * randint(10 ** i + 1, 10 ** (i + 1)))\n      }\n\n      // nombre décimal positif 1 et 10 000 avec 1,2,3 puis 4 décimales\n      const decPos = []\n      for (let i = 0; i < 4; i++) {\n        decPos.push({\n          val: `${texNombre(calcul(signe * randint(10001, 99999) / 10 ** (4 - i)))}`,\n          puissance_inf: signe === 1 ? `10^{${i}}` : `-10^{${i + 1}}`,\n          puissance_sup: signe === 1 ? `10^{${i + 1}}` : `-10^{${i}}`,\n          puissance_inf_num: signe === 1 ? `${texNombre(10 ** i)}` : `${texNombre(-1 * 10 ** (i + 1))}`,\n          puissance_sup_num: signe === 1 ? `${texNombre(10 ** (i + 1))}` : `${texNombre(-1 * 10 ** i)}`\n        })\n        nombreDecimal.push(calcul(signe * randint(10001, 99999) / 10 ** (4 - i)))\n      }\n      // nombre décimal positif inférieur à 1, entre 0,1 et 1 puis entre 0,01 et 0,1 puis 0,001 et 0,0001\n      const decPosInfUn = []\n      for (let i = 0; i < 4; i++) {\n        decPosInfUn.push({\n          val: `${texNombre(calcul(signe * randint(10 ** (4 - i - 1) + 1, 10 ** (4 - i) - 1) / 10000))}`,\n          puissance_inf: signe === 1 ? `10^{${-(i + 1)}}` : `-10^{${-i}}`,\n          puissance_sup: signe === 1 ? `10^{${-i}}` : `-10^{${-(i + 1)}}`,\n          puissance_inf_num: signe === 1 ? `${texNombre(calcul(10 ** -(i + 1)))}` : `${texNombre(calcul(-1 * 10 ** -i))}`,\n          puissance_sup_num: signe === 1 ? `${texNombre(calcul(10 ** -i))}` : `${texNombre(calcul(-1 * 10 ** -(i + 1)))}`\n        })\n        nombreDecInfUn.push(calcul(randint(signe * 10 ** (4 - i - 1) + 1, 10 ** (4 - i)) / 10000))\n      }\n      if (listeTypeDeQuestions[i] < 7) { // nombre entier positif\n        texte = this.interactif\n          ? ajouteChampTexteMathLive(this, 2 * i, 'largeur15 inline', { texteApres: sp(10) }) + `$\\\\leqslant ${entPos[listeTypeDeQuestions[i] - 1].val}\\\\leqslant $` + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur15 inline')\n          : `$\\\\dots\\\\dots\\\\dots${sp(1)}\\\\leqslant ${entPos[listeTypeDeQuestions[i] - 1].val}\\\\leqslant${sp(1)}\\\\dots\\\\dots\\\\dots$`\n        setReponse(this, 2 * i, entPos[listeTypeDeQuestions[i] - 1].puissance_inf, { formatInteractif: 'puissance' })\n        setReponse(this, 2 * i + 1, entPos[listeTypeDeQuestions[i] - 1].puissance_sup, { formatInteractif: 'puissance' })\n        texteCorr = `$${entPos[listeTypeDeQuestions[i] - 1].puissance_inf} \\\\leqslant ${entPos[listeTypeDeQuestions[i] - 1].val} \\\\leqslant ${entPos[listeTypeDeQuestions[i] - 1].puissance_sup}$`\n        texteCorr += ` car $${entPos[listeTypeDeQuestions[i] - 1].puissance_inf} = ${entPos[listeTypeDeQuestions[i] - 1].puissance_inf_num}$ et $${entPos[listeTypeDeQuestions[i] - 1].puissance_sup} = ${entPos[listeTypeDeQuestions[i] - 1].puissance_sup_num}.$`\n      } else if (listeTypeDeQuestions[i] < 11) { // nombre décimal positif\n        texte = this.interactif\n          ? ajouteChampTexteMathLive(this, 2 * i, 'largeur15 inline', { texteApres: sp(10) }) + `$\\\\leqslant ${decPos[listeTypeDeQuestions[i] - 7].val}\\\\leqslant $` + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur15 inline')\n          : `$\\\\dots\\\\dots\\\\dots${sp(1)}\\\\leqslant ${decPos[listeTypeDeQuestions[i] - 7].val}\\\\leqslant${sp(1)}\\\\dots\\\\dots\\\\dots$`\n        setReponse(this, 2 * i, decPos[listeTypeDeQuestions[i] - 7].puissance_inf, { formatInteractif: 'puissance' })\n        setReponse(this, 2 * i + 1, decPos[listeTypeDeQuestions[i] - 7].puissance_sup, { formatInteractif: 'puissance' })\n        texteCorr = `$${decPos[listeTypeDeQuestions[i] - 7].puissance_inf} \\\\leqslant ${decPos[listeTypeDeQuestions[i] - 7].val} \\\\leqslant ${decPos[listeTypeDeQuestions[i] - 7].puissance_sup}$`\n        texteCorr += ` car $${decPos[listeTypeDeQuestions[i] - 7].puissance_inf} = ${decPos[listeTypeDeQuestions[i] - 7].puissance_inf_num}$ et $${decPos[listeTypeDeQuestions[i] - 7].puissance_sup} = ${decPos[listeTypeDeQuestions[i] - 7].puissance_sup_num}.$`\n      } else { // nombre décimal positif inferieur à 1\n        texte = this.interactif\n          ? ajouteChampTexteMathLive(this, 2 * i, 'largeur15 inline', { texteApres: sp(10) }) + `$\\\\leqslant ${decPosInfUn[0].val}\\\\leqslant $` + ajouteChampTexteMathLive(this, 2 * i + 1, 'largeur15 inline')\n          : `$\\\\dots\\\\dots\\\\dots${sp(1)}\\\\leqslant ${decPosInfUn[listeTypeDeQuestions[i] - 11].val}\\\\leqslant${sp(1)}\\\\dots\\\\dots\\\\dots$`\n        setReponse(this, 2 * i, decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_inf, { formatInteractif: 'puissance' })\n        setReponse(this, 2 * i + 1, decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_sup, { formatInteractif: 'puissance' })\n        texteCorr = `$${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_inf} \\\\leqslant ${decPosInfUn[listeTypeDeQuestions[i] - 11].val} \\\\leqslant ${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_sup}$`\n        texteCorr += ` car $${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_inf} = ${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_inf_num}$ et $${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_sup} = ${decPosInfUn[listeTypeDeQuestions[i] - 11].puissance_sup_num}.$`\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    4,\n    '1 : Nombre entier positif\\n2 : Nombre décimal positif\\n3 : Nombre entier positif inférieur à 1\\n4 : Mélange'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDeModifImportante","PuissancesEncadrement2nde","PuissancesEncadrement","this","sup","besoinFormulaireNumerique","interactifReady","interactifType","typesDeQuestionsDisponibles","signeChange","Exercice","nbQuestions","consigne","nbCols","nbColsCorr","nouvelleVersion","Number","choice","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","signe","texte","texteCorr","i","cpt","entPos","nombreEntier","nombreDecimal","nombreDecInfUn","push","val","texNombre","randint","puissance_inf","puissance_sup","puissance_inf_num","puissance_sup_num","decPos","calcul","decPosInfUn","interactif","ajouteChampTexteMathLive","texteApres","sp","setReponse","formatInteractif","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}