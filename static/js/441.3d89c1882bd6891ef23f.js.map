{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C30-3.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["amcReady","amcType","titre","Multiplication_mental_decimaux","Exercice","this","consigne","nbQuestions","video","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","qcmDisponible","modeQcm","nouvelleVersion","qcm","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","espace","sortieHtml","texte","texteCorr","i","cpt","a","b","tabrep","tabicone","randint","texNombre2","calcul","push","slice","mathalea","sortieAMC","shuffle2tableaux","length","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","tailleDiaporama","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/441.3d89c1882bd6891ef23f.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {exportQcmAmc,listeQuestionsToContenu,combinaisonListes, randint,texNombre2, calcul,shuffle2tableaux} from '../../modules/outils.js'\n\nexport const amcReady = true\nexport const amcType = 1 // type de question AMC\n\nexport const titre = 'Opérations avec les nombres décimaux'\n\n/**\n * Reconnaître une fonction affine\n* @auteur Erwan Duplessy\n* 6C30-1\n* Trouver la réposne exacte. 4 cas :\n* - somme de deux entiers\n* - produit de deux entiers\n* - somme de deux décimaux\n* - produit de deux décimaux\n* date : 2021/02/15\n*/\n\nexport default function Multiplication_mental_decimaux() {\n    \"use strict\"     \n    Exercice.call(this)\n    this.titre = titre;\n    this.consigne = \"Trouver la réponse exacte du calcul parmi les réponses proposées.\";\n    this.nbQuestions = 4; // Ici le nombre de questions\n    this.video = \"\";\n    this.nbQuestionsModifiable=true // Active le formulaire nombre de questions\n    this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n    this.nbColsCorr = 1;// Le nombre de colonne pour la correction LaTeX\n    this.pasDeVersionLatex=false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n    this.pas_de_version_HMTL=false // mettre à true si on ne veut pas de l'exercice en ligne\n       this.qcmDisponible=false\n    this.modeQcm=true;\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n\n  \n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n    this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n \n    this.qcm=['6C30-3',[],\"Opérations avec les nombres décimaux\",1] // Ajouté par Jean-Claude Lhote : ceci est un exercice à QCM this.qcm permet de l'exporter vers AMC\n \n    this.listeQuestions = [] // tableau contenant la liste des questions \n    this.listeCorrections = []\n    let type_de_questions_disponibles=[\"add\", \"mul\", \"add_deci\", \"mul_deci\"] // tableau à compléter par valeurs possibles des types de questions\n    let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles, this.nbQuestions)\n    \n    // on définit l'espace horizontal entre les réponses en fonction de la sortie html/LaTeX :\n    let espace =``;\n    if (sortieHtml) {\n      espace = `&emsp;`;\n    } else {\n      espace = `\\\\qquad`;\n    }\n      for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n        texte = `` // Nous utilisons souvent cette variable pour construire le texte de la question.\n        texteCorr = `` // Idem pour le texte de la correction.\n        let a=0, b=0, tabrep=[], tabicone=[]; // les deux opérandes\n\n        switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n          case \"add\":\n               a = 10*randint(1,9)+randint(1,9);\n               b = 10*randint(1,9)+randint(1,9);\n\n               tabrep = [`$${texNombre2(calcul(a+b))}$`, `$${texNombre2(calcul(a*b))}$`, `$${texNombre2(calcul((a+b)/10))}$`, `$${texNombre2(calcul(10*(a+b)))}$`, `$${texNombre2(calcul(a+b+1))}$`]; // réponses possibles\n               tabicone = [1,0,0,0,0]; // 1 pour la bonne réponse\n               /**********************************************************************/\n               // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n               this.qcm[1].push([`Calcul : $${a}+${b}$.\\\\\\\\ \\n Réponses possibles`,tabrep.slice(0),tabicone.slice(0)]) \n               // tableau pour la fonction exportQcmAmc\n               /**********************************************************************/\n\n               texte += `Calcul : $${a} + ${b}$. <br>`;\n         \n               if (this.modeQcm&&!mathalea.sortieAMC){\n                texteCorr += `Calcul : $${a} + ${b}$. <br>`;\n               texte += `Réponses possibles : <br>`;\n               shuffle2tableaux(tabrep, tabicone); // on mélange les deux tableaux avec la même permutation\n               for (let i=0; i<tabrep.length; i++) {\n                 texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n                if (tabicone[i]==1) {\n                  texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n                } else {\n                  texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n                }\n              }\n            }\n            else {\n              texteCorr+=`$${a} + ${b}=${texNombre2(calcul(a+b))}$`\n            }\n          break;\n  \n          case \"mul\":\n            a = 10*randint(1,9)+randint(1,9);\n            b = 10*randint(1,9)+randint(1,9);\n            tabrep = [`$${texNombre2(a*b)}$`, `$${texNombre2(10*a*b)}$`, `$${texNombre2(a*b/10)}$`, `$${texNombre2(a+b)}$`, `$${texNombre2(a*b+1)}$`];\n            tabicone = [1,0,0,0,0];\n            /**********************************************************************/\n               // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n               this.qcm[1].push([`Calcul : $${a} \\\\times ${b}$.\\\\\\\\ \\n Réponses possibles`,tabrep.slice(0),tabicone.slice(0)]) \n               // tableau pour la fonction exportQcmAmc\n               /**********************************************************************/\n\n            texte += `Calcul : $${a} \\\\times ${b}$. <br>`\n            if (this.modeQcm){\n              texte += `Réponses possibles : <br>`;\n              texteCorr += `Calcul : $${a} \\\\times ${b}$. <br>`\n              shuffle2tableaux(tabrep, tabicone);\n              for (let i=0; i<tabrep.length; i++) {\n                texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n               if (tabicone[i]==1) {\n                 texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n               } else {\n                 texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n               }\n             }\n            }\n            else {\n              texteCorr+=`$${a} \\\\times ${b}=${texNombre2(calcul(a*b))}$`\n            }\n       break\n          \n          case \"add_deci\":\n            a = 1000*randint(1,9)+100*randint(0,9,[3,4,5,6,7])+10*randint(0,9)+randint(0,9);\n            b = 1000*randint(1,9)+100*randint(0,9,[3,4,5,6,7])+10*randint(0,9)+randint(0,9);\n            tabrep = [`$${texNombre2(calcul((a+b)/100))}$`, `$${texNombre2(calcul((a*b)/100))}$`, `$${texNombre2(calcul((a+b)/1000))}$`, `$${texNombre2(calcul(10*(a+b)/100))}$`,`$${texNombre2(calcul((a+b+1)/100))}$`]; \n            tabicone = [1,0,0,0,0]; \n            /**********************************************************************/\n               // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n               this.qcm[1].push([`Calcul : $${texNombre2(a/100)}+${texNombre2(b/100)}$.\\\\\\\\ \\n Réponses possibles`,tabrep.slice(0),tabicone.slice(0)]) \n               // tableau pour la fonction exportQcmAmc\n               /**********************************************************************/\n\n            texte += `Calcul : $${texNombre2(a/100)} + ${texNombre2(b/100)}$. <br>`\n            if (this.modeQcm){\n            texteCorr += `Calcul : $${texNombre2(a/100)} + ${texNombre2(b/100)}$. <br>`\n            texte += `Réponses possibles : <br>`;\n            shuffle2tableaux(tabrep, tabicone); \n            for (let i=0; i<tabrep.length; i++) {\n              texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n             if (tabicone[i]==1) {\n               texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n             } else {\n               texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n             }\n           }\n          }\n          else {\n            texteCorr += ` $${texNombre2(a/100)} + ${texNombre2(b/100)}=${texNombre2(calcul(a/100+b/100))}$. <br>`\n          }\n          break \n\n          case \"mul_deci\":\n            // a et b sont des nombres à 4 chiffres, dont 2 avant la virgule\n            // on multiplie par 100 pour travailler avec des nombres entiers. Par ex : 6547 plutôt que 65.47\n            a = 1000*randint(1,9)+100*randint(1,9,[3,4,5,6,7])+10*randint(1,9)+randint(0,9,[2,5]); // on évite le 2*5 avec les derniers chiffres\n            b = 1000*randint(1,9)+100*randint(1,9,[3,4,5,6,7])+10*randint(1,9)+randint(0,9);\n            tabrep = [`$${texNombre2(calcul((a*b)/10000))}$`,`$${texNombre2(calcul((10*a*b)/10000))}$`,`$${texNombre2(calcul((a*b)/100000))}$`,`$${texNombre2(calcul((a+b)/100))}$`,`$${texNombre2(calcul((a*b+1)/10000))}$`];\n            tabicone = [1,0,0,0,0];\n            /**********************************************************************/\n               // ajouté par Jean-Caude Lhote pour générer des QCM AMC\n               this.qcm[1].push([`Calcul : $${texNombre2(a/100)} \\\\times ${texNombre2(b/100)}$.\\\\\\\\ \\n Réponses possibles`,tabrep.slice(0),tabicone.slice(0)]) \n               // tableau pour la fonction exportQcmAmc\n               /**********************************************************************/\n\n            texte += `Calcul : $${texNombre2(a/100)} \\\\times ${texNombre2(b/100)}$. <br>`\n            if (this.modeQcm){\n            texteCorr += `Calcul : $${texNombre2(a/100)} \\\\times ${texNombre2(b/100)}$. <br>`\n            texte += `Réponses possibles : <br>`;\n  \n            shuffle2tableaux(tabrep, tabicone);\n            for (let i=0; i<tabrep.length; i++) {\n              texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n             if (tabicone[i]==1) {\n               texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n             } else {\n               texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n             }\n           }\n          }\n          else {\n            texteCorr += `$${texNombre2(a/100)} \\\\times ${texNombre2(b/100)}=${texNombre2(calcul(a*b/10000))}$. <br>`\n          }\n          break\n        }\n\n        if (this.listeQuestions.indexOf(texte) == -1) {\n          // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n          this.listeQuestions.push(texte);\n          this.listeCorrections.push(texteCorr);\n          i++;\n        }\n        cpt++;\n      }\n      listeQuestionsToContenu(this); // On envoie l'exercice à la fonction de mise en page\n    };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  \n  //\tthis.besoinFormulaireCaseACocher = ['Mode QCM',true]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]  \n  } // Fin de l'exercice.\n  ","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}