{"version":3,"file":"js/52191.95e7a312bf8efb2d6f04.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G43.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint } from '../../modules/outils.js'\nimport { mathalea2d } from '../../modules/2d.js'\nimport { cube } from '../../modules/3d.js'\n\nexport const titre = 'Représentation de solides'\n\n/**\n* Compter des cubes\n* @author Erwan DUPLESSY\n* 6G43\n* mars 2021\n* Source : http://cache.media.education.gouv.fr/file/Geometrie_et_espace/47/1/RA16_C4_MATH_geo_espace_flash_567471.pdf\n* Compter des cubes dans un empilement de cubes\n*/\n\nexport default function DenombrerCubes () {\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 3 // Ici le nombre de questions\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.sup = 1 // A décommenter : valeur par défaut d'un premier paramètre\n  this.sup2 = 1 // A décommenter : valeur par défaut d'un deuxième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    let typesDeQuestionsDisponibles = [] // tableau à compléter par valeurs possibles des types de questions\n    switch (parseInt(this.sup)) {\n      case 1:\n        typesDeQuestionsDisponibles = [1]\n        break\n      case 2:\n        typesDeQuestionsDisponibles = [2]\n        break\n      case 3:\n        typesDeQuestionsDisponibles = [1, 2]\n        break\n    }\n\n    function empilementCubes (long, larg, hmax) {\n      const tabHauteurs = new Array(larg)\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i] = new Array(long)\n      }\n      // premiere ligne\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][0] = randint(0, 1)\n      }\n      // deuxième ligne et suivantes\n      for (let i = 0; i < larg; i++) {\n        for (let j = 1; j < long; j++) {\n          tabHauteurs[i][j] = Math.min(tabHauteurs[i][j - 1] + randint(0, 2), hmax)\n        }\n      }\n      // Vérification Dernière Ligne : ne pas être vide.\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i][long - 1] = Math.max(1, tabHauteurs[i][long - 1])\n      }\n      // Ajoute les cubes dans un tableau une dimension\n      // il faut trier les cubes : x décroissant puis y décroissant, puis z croissant\n      const lstCoordonneesCubes = []\n      for (let i = larg - 1; i > -1; i = i - 1) {\n        for (let j = long - 1; j > -1; j = j - 1) {\n          for (let k = 0; k < tabHauteurs[i][j]; k++) { lstCoordonneesCubes.push([i, j, k]) }\n        }\n      }\n      return lstCoordonneesCubes\n    }\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let objetsEnonce, objetsCorrection, paramsEnonce, paramsCorrection\n    const longueur = 2 + parseInt(this.sup2) // longueur de l'empilement\n    const largeur = longueur // largeur de l'empilement\n    const hauteur = longueur // hauteur de l'empilement\n\n    for (let q = 0, texte, texteCorr, cpt = 0; q < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objetsCorrection = [] // Idem pour la correction\n\n      texte = 'Un empilement de cubes est représenté ci-dessous. <br>' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n\n      let L, alpha, beta, cosa, cosb, sina, sinb\n\n      // début de l'exercice\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          texte += 'Combien de petits cubes contient cet empilement de cubes ? <br>'\n          L = empilementCubes(longueur, largeur, hauteur) // crée un empilement aléatoire\n          // dessin 1\n          alpha = 30 // choix de la projection\n          beta = -25 // choix de la projection\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          // dessin 2\n          alpha = 15\n          beta = -30\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' <br>'\n          // correction :\n          texteCorr += \"On peut représenter l'empilement par tranches : <br>\"\n          alpha = 30\n          beta = -25\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -3 * sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: 3 * cosa * longueur + 0.5,\n            ymax: -sina * sinb * 3 * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(cube(3 * L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n          texteCorr += `Il y a au total ${L.length} cubes.`\n          break\n\n        case 2:\n          texte += `Combien de petits cubes manque-t-il pour reconstruire un grand cube de côté ${longueur} ? <br>`\n          L = empilementCubes(longueur, largeur, hauteur)\n          // dessin 1\n          alpha = 30\n          beta = -25\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + ' '\n          // dessin 2\n          alpha = 15\n          beta = -30\n          objetsEnonce = []\n          for (let i = 0; i < L.length; i++) {\n            objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsEnonce = {\n            xmin: -sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: cosa * longueur + 0.5,\n            ymax: -sina * sinb * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          texte += mathalea2d(paramsEnonce, objetsEnonce) + '<br>'\n          // correction :\n          texteCorr += \"On peut, par exemple, représenter l'empilement par tranches : <br>\"\n          alpha = 30\n          beta = -25\n          cosa = Math.cos(alpha * Math.PI / 180)\n          sina = Math.sin(alpha * Math.PI / 180)\n          cosb = Math.cos(beta * Math.PI / 180)\n          sinb = Math.sin(beta * Math.PI / 180)\n          paramsCorrection = {\n            xmin: -3 * sina * largeur - 0.5,\n            ymin: -0.5,\n            xmax: 3 * cosa * longueur + 0.5,\n            ymax: -sina * sinb * 3 * longueur - cosa * sinb * largeur + cosb * hauteur + 0.5,\n            pixelsParCm: 20,\n            scale: 1,\n            mainlevee: false\n          }\n          objetsCorrection = []\n          for (let i = 0; i < L.length; i++) {\n            objetsCorrection.push(cube(3 * L[i][0], L[i][1], L[i][2], alpha, beta, {}))\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + '<br>'\n          texteCorr += `Il y a au total $${L.length}$ cubes. On en veut $${longueur}\\\\times ${largeur} \\\\times ${hauteur} = ${longueur * largeur * hauteur}$. <br>`\n          texteCorr += `Il manque $${longueur * largeur * hauteur - L.length}$ cubes.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        q++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  this.besoinFormulaireNumerique = ['Type de questions', 3, '1 : compter les cubes\\n2 : compter les cubes manquants\\n3 un mélange des deux']\n  this.besoinFormulaire2Numerique = [\"Taille de l'empilement\", 5, '3 \\n4 \\n5 \\n6 \\n7']\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n"],"names":["titre","DenombrerCubes","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","parseInt","empilementCubes","long","larg","hmax","tabHauteurs","Array","i","randint","j","Math","min","max","lstCoordonneesCubes","k","push","listeTypeDeQuestions","combinaisonListes","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","longueur","largeur","hauteur","texte","texteCorr","q","cpt","L","alpha","beta","cosa","cosb","sina","sinb","length","cube","cos","PI","sin","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique"],"sourceRoot":""}