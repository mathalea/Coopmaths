{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3Algo1-2.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Syracuse","N","this","suiteDeSyracuse","sortie","u","push","coordonneesSuiteDeSyracuse","suite","i","length","altitudeMaximale","entier","Math","max","tempsDeVol","tempsDeVolEnAltitude","compteur","syracuse","Exercice_zero_mathalea","Exercice","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","correctionDetailleeDisponible","listePackages","nouvelleVersion","numeroExercice","boutonAide","modalYoutube","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","randint","texte","texteCorr","cpt","string_intro","texteGras","sortieHtml","enumerateSansPuceSansNumero","introduction","lampeMessage","couleur","objets_correction","objets_correction_plus","params_correction","coord_Syracuse","y_coeff","x_coeff","r2","repere2","axesEpaisseur","grille","xMin","yMin","xMax","yMax","yThickMin","yThickDistance","yUnite","xUnite","xThickMin","xThickDistance","xLegende","xLegendePosition","calcul","yLegende","yLegendePosition","g","traceGraphiqueCartesien","A","point","B","s","segment","t","latexParCoordonnees","xmin","ymin","xmax","ymax","pixelsParCm","optionsTikz","mainlevee","string_connaissance","cas1","cas2","cas3","cas4","cas5","texteEnCouleurEtGras","correctionDetaillee","mathalea2d","indexOf","listeQuestionsToContenu","consigneCorrection","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","tailleDiaporama","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable"],"mappings":"yLAQO,MAAMA,EAAQ,yBAQrB,SAASC,GAAS,EAACC,IAGjBC,KAAKC,gBAAkB,WACrB,IAAIC,EAAS,CAACH,GACVI,EAAIJ,EACR,GAAO,GAAHA,EACFG,EAAS,CAAC,EAAE,EAAE,EAAE,QAEhB,KAAW,GAAJC,GACDA,EAAE,GAAK,EACTA,GAAM,EAENA,EAAI,EAAEA,EAAE,EAEVD,EAAOE,KAAKD,GAGhB,OAAOD,GAITF,KAAKK,2BAA6B,SAASC,GACzC,IAAIJ,EAAS,GACb,IAAK,IAAIK,EAAE,EAAGA,EAAED,EAAME,OAAOD,IAC3BL,EAAOE,KAAK,CAACG,EAAED,EAAMC,KAEvB,OAAOL,GAITF,KAAKS,iBAAmB,WACtB,IAAIC,EAASX,EACb,OAAOY,KAAKC,OAAOZ,KAAKC,gBAAgBS,KAK1CV,KAAKa,WAAa,WAChB,IAAIH,EAASX,EACb,OAAOC,KAAKC,gBAAgBS,GAAQF,OAAO,GAK7CR,KAAKc,qBAAuB,WAC1B,IAAIJ,EAASX,EACTgB,EAAW,EACf,KAAOf,KAAKC,gBAAgBS,GAAQK,GAAUf,KAAKC,gBAAgBS,GAAQ,IACzEK,GAAU,EAEZ,OAAOA,EAAS,GAIpB,SAASC,GAAS,EAAEjB,EAAE,MACpB,OAAO,IAAID,EAAS,CAAEC,EAAGA,IAKZ,SAASkB,IAEpBC,eAAclB,MACdA,KAAKH,MAAQA,EACbG,KAAKmB,SAAW,GAChBnB,KAAKoB,YAAc,EACnBpB,KAAKqB,uBAAsB,EAC3BrB,KAAKsB,OAAS,EACdtB,KAAKuB,WAAa,EAClBvB,KAAKwB,mBAAkB,EACvBxB,KAAKyB,qBAAoB,EACzBzB,KAAK0B,+BAA8B,EACnC1B,KAAK2B,cAAiB,SAQtB3B,KAAK4B,gBAAkB,SAAUC,GAC/B7B,KAAK8B,YAAaC,SAChBF,EACA,+BACA,yBACA,gCAKF7B,KAAKgC,eAAiB,GACtBhC,KAAKiC,iBAAmB,GACxB,IACIC,GAAuBC,SADO,CAAC,EAAE,EAAE,EAAE,EAAE,GACiDnC,KAAKoB,aAK7FV,GAAS0B,SAAQ,EAAE,KACvB,KAAOpB,EAAS,CAACjB,EAAEW,IAASG,aAAa,IAAMG,EAAS,CAACjB,EAAEW,IAASG,aAAa,GAAKG,EAAS,CAACjB,EAAEW,IAASD,mBAAmB,KAC5HC,GAAS0B,SAAQ,EAAE,KAGrB,IAAK,IAAWC,EAAOC,EAAd/B,EAAI,EAAqBgC,EAAM,EAAGhC,EAAIP,KAAKoB,aAAemB,EAAM,IAAK,CAG5E,IAAIC,EAAgB,gRAEeC,SAAU,uEAAsEA,SAAU,iEAEzHC,WACFF,GAAgB,WAEhBA,GAAiB,uBAEnBA,GAAiB,IAAEC,SAAU,8BACzBC,aACFF,GAAgB,QAElBA,GAAiB,sBACfG,SAA4B,CAC3B,mDACA,8DACA,kFACA,6GAGHH,GAAiB,IAAEC,SAAU,kCAC7BD,GAAiB,iCAA+BC,SAAU,2BAA0BA,SAAU,mCACjFA,SAAU,kBAAiBA,SAAU,+RAKlDzC,KAAK4C,cAAeC,SAAa,CAC/BhD,MAAQ,eACRwC,MAAOG,EACPM,QAAU,YAKZ,IAAIC,EAAmB,GAAIC,EAAyB,GAAIC,EAAoB,GAExEC,EAAiBlC,EAAS,CAACjB,EAAEW,IAASL,2BAA2BW,EAAS,CAACjB,EAAEW,IAAST,mBAGtFkD,EAAU,EACVC,EAAU,EAGVC,GAAKC,SAAQ,CACfC,cAAgB,EAChBC,QAAO,EACPC,MAAO,EACPC,MAAO,EACPC,KAAM3C,EAAS,CAACjB,EAAEW,IAASG,aAAa,EACxC+C,KAAM5C,EAAS,CAACjB,EAAEW,IAASD,mBAAmB,EAC9CoD,UAAW,EACXC,eAAgB,EAAEX,EAClBY,OAAO,EAAEZ,EACTa,OAAO,EAAEZ,EACTa,UAAW,EACXC,eAAe,EAAEd,EACjBe,SAAU,+BACVC,iBAAmB,EAACC,UAAQrD,EAAS,CAACjB,EAAEW,IAASG,aAAa,GAAGuC,GAAU,GAC3EkB,SAAU,WACVC,iBAAmB,EAAE,GAAGF,UAAQrD,EAAS,CAACjB,EAAEW,IAASD,mBAAmB,GAAG0C,MAIzEqB,GAAIC,SAAwBvB,EAAeG,GAG/CN,EAAkB3C,KAAKiD,EAAGmB,GAE1B,IAAIE,GAAIC,SAAM,EAAE3D,EAAS,CAACjB,EAAEW,IAAST,kBAAkB,GAAGkD,GACtDyB,GAAID,SAAM3D,EAAS,CAACjB,EAAEW,IAASG,aAAauC,EAAQpC,EAAS,CAACjB,EAAEW,IAAST,kBAAkB,GAAGkD,GAC9F0B,GAAIC,SAAQJ,EAAEE,EAAE,OAEhBG,GAAIC,SACN,4BACAhE,EAAS,CAACjB,EAAEW,IAASG,aAAauC,EAClCpC,EAAS,CAACjB,EAAEW,IAAST,kBAAkB,GAAGkD,EAC1C,MACA,IACA,GACA,SAGFH,EAAuB5C,KAAKiD,EAAGmB,EAAEK,EAAEE,GAGnC9B,EAAoB,CACjBgC,MAAO,EACPC,MAAO,EACPC,MAAKd,UAAQrD,EAAS,CAACjB,EAAEW,IAASG,aAAa,IAAIuC,GACnDgC,MAAMf,UAAQrD,EAAS,CAACjB,EAAEW,IAASD,mBAAmB,IAAI0C,GAC1DkC,YAAa,GAEbC,YAAa,CAAE,UAAS,IAAGjB,UAAQrD,EAAS,CAACjB,EAAEW,IAASG,aAAa,IAAIuC,GAAY,UAAS,GAAEiB,UAAQrD,EAAS,CAACjB,EAAEW,IAASD,mBAAmB,IAAI0C,IACpJoC,WAAW,GAId,IAAIC,EAAoB,CACtBC,KAAM,CACJ5F,MAAO,gBACPwC,MAAO,yLAGTqD,KAAM,CACJ7F,MAAO,+BAA8Ba,IACrC2B,MAAO,sNACwE3B,MAEjFiF,KAAM,CACJ9F,MAAO,6CAA4Ca,IACnD2B,MAAO,kIAETuD,KAAM,CACJ/F,MAAO,wCAAuCa,IAC9C2B,MAAO,0HAETwD,KAAM,CACJhG,MAAO,oDAAmDa,IAC1D2B,MAAO,qKACiBI,SAAU,kHAKtC,OAAQP,EAAqB3B,IAC3B,KAAK,EACH8B,EAAS,6FACTC,EAAa,mEAAiEG,SAAUzB,EAAS,CAACjB,EAAE,IAAIE,6BACxGqC,IAAYwD,SAAqB,cAAcN,EAAoBC,KAAK5F,OAAO,MAAO2F,EAAoBC,KAAKpD,MAC/G,MACF,KAAK,EACHA,EAAS,yEAAwE3B,KACjF4B,EAAa,kCAAiC5B,8BAC5C+B,SAAUzB,EAAS,CAACjB,EAAEW,IAAST,6BACjCqC,IAAYwD,SAAqB,cAAcN,EAAoBE,KAAK7F,OAAO,MAAO2F,EAAoBE,KAAKrD,MAAM,WAEjHrC,KAAK+F,sBACPzD,IAAa0D,SAAW/C,EAAmBF,IAE7C,MACF,KAAK,EACHV,EAAS,2DACTC,EAAa,uCAAqCG,SAAUzB,EAAS,CAACjB,EAAEW,IAASD,8BACjF6B,IAAYwD,SAAqB,cAAcN,EAAoBG,KAAK9F,OAAO,MAAO2F,EAAoBG,KAAKtD,MAC/G,MACF,KAAK,EACHA,EAAS,uFACTC,EAAa,kCAAgCG,SAAUzB,EAAS,CAACjB,EAAEW,IAASG,oEAC5EyB,IAAYwD,SAAqB,cAAcN,EAAoBI,KAAK/F,OAAO,MAAO2F,EAAoBI,KAAKvD,MAC/G,MACF,KAAK,EACHA,EAAS,iJAGPC,EAD+C,GAA7CtB,EAAS,CAACjB,EAAEW,IAASI,uBACV,oGAEA,iCAA+B2B,SAAUzB,EAAS,CAACjB,EAAEW,IAASI,mIAE7EwB,GAAa,WAEbA,IAAYwD,SAAqB,cAAcN,EAAoBK,KAAKhG,OAAO,MAAO2F,EAAoBK,KAAKxD,MAAM,WAEjHrC,KAAK+F,sBACPzD,IAAa0D,SAAW/C,EAAmBD,KAKN,GAAvChD,KAAKgC,eAAeiE,QAAQ5D,KAE9BrC,KAAKgC,eAAe5B,KAAKiC,GACzBrC,KAAKiC,iBAAiB7B,KAAKkC,GAC3B/B,KAEFgC,KAEF2D,SAAwBlG,S,6BCvSf,SAASkB,IAEtBlB,KAAKH,MAAQ,GACbG,KAAKmB,SAAW,GAChBnB,KAAKmG,mBAAqB,GAC1BnG,KAAKgC,eAAiB,GACtBhC,KAAKiC,iBAAmB,GACxBjC,KAAK4C,aAAe,GACpB5C,KAAKoG,QAAU,GACfpG,KAAKqG,kBAAoB,GACzBrG,KAAKoB,YAAc,GACnBpB,KAAKsB,OAAS,EACdtB,KAAKuB,WAAa,EAClBvB,KAAKsG,QAAU,EACftG,KAAKuG,YAAc,EACnBvG,KAAKwG,QAAS,EAEdxG,KAAKyG,2BAA4B,EACjCzG,KAAK0G,uBAAwB,EAC7B1G,KAAK2G,6BAA8B,EACnC3G,KAAK4G,oBAAqB,EAC1B5G,KAAKqB,uBAAwB,EAC7BrB,KAAK6G,kBAAmB,EACxB7G,KAAK8G,sBAAuB,EAC5B9G,KAAK+G,mBAAoB,EACzB/G,KAAKgH,uBAAwB,EAC7BhH,KAAK0B,+BAAgC,EACrC1B,KAAK+F,qBAAsB,EAC3B/F,KAAKiH,MAAQ,GACbjH,KAAK8B,YAAa,EAClB9B,KAAKkH,gBAAkB,GAMvBlH,KAAKwB,mBAAoB,EACzBxB,KAAKmH,KAAM,EACXnH,KAAKoH,eAAgB,EACrBpH,KAAKqH,SAAU,EACfrH,KAAKsH,eAAiB,GACtBtH,KAAKuH,sBAAwB,GAC7BvH,KAAKwH,cAAe,EACpBxH,KAAK4B,gBAAkB,SAAUC,KACjC7B,KAAK2B,cAAgB,G","file":"js/2229.02a7e6c761b56bf9f464.js","sourcesContent":["import { texteEnCouleurEtGras } from '../../modules/outils.js';\nimport Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,combinaisonListesSansChangerOrdre} from '../../modules/outils.js'\nimport {mathalea2d,repere2,traceGraphiqueCartesien,point,segment,latexParCoordonnees} from '../../modules/2d.js'\nimport {randint,calcul,modalYoutube} from '../../modules/outils.js';\nimport {lampeMessage} from '../../modules/outils.js';\nimport {enumerateSansPuceSansNumero,texteGras} from '../../modules/outils.js';\n\nexport const titre = 'Conjecture de Syracuse'\n\n/**\n * @class Syracuse\n * @classdesc Outils pour les suites de Syracuse \n * @author Sébastien Lozano\n */\n\nfunction Syracuse({N}) {\n\n  // Pour déterminer les éléments de la suite de Syracuse jusqu'au premier 1\n  this.suiteDeSyracuse = function() {\n    let sortie = [N];\n    let u = N;\n    if (N==1) {\n      sortie = [1,4,2,1];\n    } else {\n      while (u !=1) {\n        if (u%2 == 0) {\n          u = u/2;        \n        } else {\n          u = 3*u+1;        \n        };\n        sortie.push(u);\n      };\n    }\n    return sortie;\n  };\n\n  // Pour créer les coordonées à placer dans un graphique cartésien d'une suite de Syracuse\n  this.coordonneesSuiteDeSyracuse = function(suite) {\n    let sortie = [];\n    for (let i=0; i<suite.length;i++) {\n      sortie.push([i,suite[i]]);\n    };\n    return sortie;\n  };\n\n  // Pour déterminer la valeur maximale de la suite jusqu'au premier 1\n  this.altitudeMaximale = function() {\n    let entier = N;    \n    return Math.max(...this.suiteDeSyracuse(entier));\n  };\n  \n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1 \n  // sans compter la valeur initiale\n  this.tempsDeVol = function() {\n    let entier = N;    \n    return this.suiteDeSyracuse(entier).length-1;\n  };\n\n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1\n  // qui sont strictement supérieurs à la valeur initiale sans la compter !\n  this.tempsDeVolEnAltitude = function() {\n    let entier = N;    \n    let compteur = 1;\n    while (this.suiteDeSyracuse(entier)[compteur]>this.suiteDeSyracuse(entier)[0]) {\n      compteur+=1;\n    };\n    return compteur-1;    \n  };\n};\n\nfunction syracuse({ N='1'}) {\n  return new Syracuse({ N: N })\n};\n\n\n\nexport default function Exercice_zero_mathalea() {\n    \"use strict\"\n    Exercice.call(this)\n    this.titre = titre;\n    this.consigne = \"\";        \n    this.nbQuestions = 5; // Ici le nombre de questions\n    this.nbQuestionsModifiable=false // Active le formulaire nombre de questions\n    this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n    this.nbColsCorr = 1;// Le nombre de colonne pour la correction LaTeX\n    this.pasDeVersionLatex=false; // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n    this.pas_de_version_HMTL=false; // mettre à true si on ne veut pas de l'exercice en ligne\n    this.correctionDetailleeDisponible=true;\n    this.listePackages = `bclogo`;\n    // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n  \n    //  this.sup = false; // A décommenter : valeur par défaut d'un premier paramètre\n    //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n    //  this.sup3 = false; // A décommenter : valeur par défaut d'un troisième paramètre\n    \n    // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n    this.nouvelleVersion = function (numeroExercice) {\n      this.boutonAide = modalYoutube(\n        numeroExercice,\n        'https://youtu.be/aRe4ARtQiJY',\n        'Conjecture de Syracuse',\n        'En vidéo sur Maths-et-tiques'\n      );\n      // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n      // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n      \n      this.listeQuestions = [] // tableau contenant la liste des questions \n      this.listeCorrections = []\n      let type_de_questions_disponibles=[1,2,3,4,5] // tableau à compléter par valeurs possibles des types de questions\n      let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions)\n      // On choisit un entier pour l'étude de la suite de Syracuse correspondante\n      // On contraint le temps de vol entre 5 et 25\n      // On contraint l'altitude maximale en dessous de 100\n      //let entier = 15;\n      let entier = randint(1,200);      \n      while (syracuse({N:entier}).tempsDeVol()>25 || syracuse({N:entier}).tempsDeVol()<5 || syracuse({N:entier}).altitudeMaximale()>100) {\n        entier = randint(1,200);\n      };\n\n      for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\n        // Petite intro connaissances\n        let string_intro = `En mathématiques, on appelle conjecture une proposition qui n'est pas encore démontrée.\n        On a éventuellement vérifié cette proposition sur beaucoup d'exemples mais cela ne garantit pas qu'elle soit toujours vraie.<br>\n        Nous allons nous intéresser à la ${texteGras('conjecture de Syracuse')} découverte par le mathématicien allemand ${texteGras('Lothar Collatz')} en 1930\n        à l'université de Syracuse.`\n        if (sortieHtml) {\n          string_intro +=`<br><br>`;\n        } else {\n          string_intro += `\\\\par\\\\vspace{0.5cm}`\n        };\n        string_intro += `${texteGras('Algorithme de Syracuse :')}`;\n        if (sortieHtml) {\n          string_intro +=`<br>`;\n        };\n        string_intro += `        \n        ${enumerateSansPuceSansNumero([\n          `On choisit un nombre entier strictement positif.`,\n          `$\\\\leadsto$ Si l'entier choisi est pair on le divise par 2.`,\n          `$\\\\leadsto$ Si l'entier choisi est impair on le multiplie par 3 et on ajoute 1.`,\n          `On recommence avec le nouvel entier trouvé tant qu'il ne vaut pas 1.`\n        ])}<br>                    \n        `;        \n        string_intro += `${texteGras('Conjecture de Syracuse :')}<br>`;\n        string_intro += `Encore appelée conjecture de ${texteGras('Collatz')}, conjecture ${texteGras('d\\'Ulam')},\n        conjecture ${texteGras('tchèque')} ou ${texteGras('problème 3x + 1')}, est l'hypothèse mathématique selon laquelle\n        la suite de Syracuse de n'importe quel entier strictement positif atteint 1.<br>\n        En dépit de la simplicité de son énoncé, cette conjecture défie depuis de nombreuses années les mathématiciens.\n        `;\n\n        this.introduction = lampeMessage({\n          titre: `Introduction`,\n          texte: string_intro,\n          couleur: `nombres`\n        });\n\n       \n        // Pour les objets de mathALEA2D\n        let objets_correction= [], objets_correction_plus = [], params_correction = {};        \n        // On crée la liste de coordonnées de la suite de Syracuse \n        let coord_Syracuse = syracuse({N:entier}).coordonneesSuiteDeSyracuse(syracuse({N:entier}).suiteDeSyracuse());\n\n        // Pour ajouter le graphique et le repère\n        let y_coeff = 5;\n        let x_coeff = 2;\n\n        // Le repère\n        let r2 = repere2({\n          axesEpaisseur : 3,\n          grille:false,          \n          xMin: -1,\n          yMin: -1,\n          xMax: syracuse({N:entier}).tempsDeVol()+1,\n          yMax: syracuse({N:entier}).altitudeMaximale()+5,         \n          yThickMin: 0,\n          yThickDistance: 1*y_coeff,\n          yUnite:1/y_coeff,\n          xUnite:1/x_coeff,\n          xThickMin: 0,\n          xThickDistance:1*x_coeff,\n          xLegende: 'Applications de l\\'algorithme',\n          xLegendePosition : [calcul((syracuse({N:entier}).tempsDeVol()+2)/x_coeff), 0],\n          yLegende: 'Altitude',\n          yLegendePosition : [-1, calcul((syracuse({N:entier}).altitudeMaximale()+8)/y_coeff)],                    \n        });\n        \n        // Le graphique cartésien\n        let g = traceGraphiqueCartesien(coord_Syracuse,r2)\n        \n        // On pousse tout ça dans les objets, le repère aussi coño !!!\n        objets_correction.push(r2,g);\n        \n        let A = point(0,syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff);\n        let B = point(syracuse({N:entier}).tempsDeVol()/x_coeff,syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff);\n        let s = segment(A,B,'red');\n        //let t = texteParPoint('mon texte',B);\n        let t = latexParCoordonnees(\n          '\\\\text{Altitude initiale}',\n          syracuse({N:entier}).tempsDeVol()/x_coeff,\n          syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff,\n          'red',\n          200,\n          25,\n          'white'\n        );\n        \n        objets_correction_plus.push(r2,g,s,t);\n\n        // On fixe la fenetre pour le SVG/Tikz\n        params_correction = {\n           xmin: -2,\n           ymin: -2,\n           xmax:calcul((syracuse({N:entier}).tempsDeVol()+20)/x_coeff),\n           ymax: calcul((syracuse({N:entier}).altitudeMaximale()+10)/y_coeff),\n           pixelsParCm: 30,           \n           //scale: 0.7,\n           optionsTikz: [`xscale=${18/calcul((syracuse({N:entier}).tempsDeVol()+20)/x_coeff)}`,`yscale=${7/calcul((syracuse({N:entier}).altitudeMaximale()+10)/y_coeff)}`],\n           mainlevee: false \n        }\n                \n\n        let string_connaissance={\n          cas1 :{\n            titre:`Cycle trivial`,\n            texte:`Après que le nombre 1 a été atteint, la suite des valeurs (4,2,1) se répète indéfiniment.\n            C'est pourquoi on ne s'intéresse qu'à la liste des entiers jusqu'au premier 1.`\n          },\n          cas2 :{\n            titre:`Vol de la suite de Syracuse ${entier}`,\n            texte:`Les graphiques font penser à la chute chaotique d'un grêlon ou bien à la trajectoire d'une feuille emportée par le vent.\n            Sur le graphique ci-dessous, on peut observer le vol de la suite de Syracuse ${entier}.`\n          },\n          cas3 :{\n            titre:`Altitude maximale de la suite de Syracuse ${entier}`,\n            texte:`Si on file la métaphore, la valeur maximale atteinte par les valeurs trouvées serait désignée par l'altitude maximale du vol. `\n          },\n          cas4 :{\n            titre:`Temps de vol de la suite de Syracuse ${entier}`,\n            texte:`C'est le plus petit nombre de fois qu'il faut appliquer l'algorithme pour atteindre la valeur 1 pour la première fois.`\n          },\n          cas5 :{\n            titre:`Temps de vol en altitude de la suite de Syracuse ${entier}`,\n            texte:`C'est le plus petit nombre de fois qu'il faut appliquer l'algorithme avant que la valeur suivante soit strictement inférieure\n            à la valeur initiale. ${texteGras('Attention')} cela ne signifie pas que l'on ne repassera jamais au dessus de la valeur initiale.\n            `\n          },\n        };\n\n        switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n          case 1: //étude du cas N = 1\n            texte = `On choisit le nombre entier 1. Quels sont tous les entiers déterminés par cet algorithme ?`\n            texteCorr = `Si on choisit le nombre 1 au départ la suite de Syracuse est : ${texteGras(syracuse({N:1}).suiteDeSyracuse())}<br><br>`;            \n            texteCorr+= texteEnCouleurEtGras('Remarque - '+string_connaissance.cas1.titre)+' : '+ string_connaissance.cas1.texte;              \n            break;\n          case 2: //suite de Syracuse pour un entier aléatoire          \n            texte = `Déterminer tous les entiers issus de cet algorithme lorsqu'on choisit ${entier}.`;\n            texteCorr = `La suite de Syracuse du nombre ${entier} est : <br>\n            ${texteGras(syracuse({N:entier}).suiteDeSyracuse())}<br><br>`;            \n            texteCorr+= texteEnCouleurEtGras('Remarque - '+string_connaissance.cas2.titre)+' : '+ string_connaissance.cas2.texte+'<br><br>';              \n\n            if (this.correctionDetaillee) {\n              texteCorr += mathalea2d(params_correction, objets_correction)\n            }            \n            break;\n          case 3://altitude max\n            texte = `Quelle est la valeur maximale de cette liste d'entiers ?`;\n            texteCorr = `La valeur maximale atteinte vaut : ${texteGras(syracuse({N:entier}).altitudeMaximale())}<br><br>`;            \n            texteCorr+= texteEnCouleurEtGras('Remarque - '+string_connaissance.cas3.titre)+' : '+ string_connaissance.cas3.texte;              \n            break;\n          case 4://temps de vol\n            texte = `Combien de fois au minimum faut-il appliquer l'algorithme pour trouver la valeur 1 ?`;\n            texteCorr = `Il faut  appliquer au minimum ${texteGras(syracuse({N:entier}).tempsDeVol())} fois l'algorithme pour trouver la valeur 1.<br><br>`;            \n            texteCorr+= texteEnCouleurEtGras('Remarque - '+string_connaissance.cas4.titre)+' : '+ string_connaissance.cas4.texte;              \n            break;            \n          case 5://temps de vol en altitude\n            texte = `Au bout de combien d'application minimum de l'algorithme la valeur calculée suivante sera-t-elle strictement inférieure à la valeur initiale ?`;\n            //`Quelle est le nombre d'éléments de cette liste d'entiers qui sont strictement supérieurs à la valeur initiale, sans compter cette valeur initiale ?`;            \n            if (syracuse({N:entier}).tempsDeVolEnAltitude()==0) {\n              texteCorr = `Dès la première application de l'algorithme la valer trouvée est inférieure à la valeur initiale.`\n            } else {\n              texteCorr = `Il faut appliquer au minimum ${texteGras(syracuse({N:entier}).tempsDeVolEnAltitude())} fois l'algorithme pour que la valeur calculée suivante soit strictement inférieure à la valeur initiale.`\n            };\n            texteCorr +=`<br><br>`;\n            //texteCorr += `${syracuse({N:entier}).tempsDeVolEnAltitude()}<br><br>`;            \n            texteCorr+= texteEnCouleurEtGras('Remarque - '+string_connaissance.cas5.titre)+' : '+ string_connaissance.cas5.texte+'<br><br>';              \n\n            if (this.correctionDetaillee) {\n              texteCorr += mathalea2d(params_correction, objets_correction_plus)\n            } \n            break;\n        };         \n\n        if (this.listeQuestions.indexOf(texte) == -1) {\n          // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n          this.listeQuestions.push(texte);\n          this.listeCorrections.push(texteCorr);\n          i++;\n        }\n        cpt++;\n      }\n      listeQuestionsToContenu(this); // On envoie l'exercice à la fonction de mise en page\n    };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  \n  //\tthis.besoinFormulaireNumerique = ['Type de questions', 3, `1 : Perpendiculaires\\n 2 : Parallèles\\n 3 : Mélange`]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n  \n  } // Fin de l'exercice.\n  ","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}