{"version":3,"file":"js/96294.d46ac7af1cc27ae29013.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N43-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, sommeDesChiffres, calcul, texNombre, randint, choice } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const titre = 'Reconnaître diviseur, multiple, divisible'\n\n/**\n * Vrai ou faux sur les notions de diviseur ou multiple\n * @author Rémi Angot\n * Référence 6N43-3\n*/\nexport default function ExerciceVraiFauxDivisibleMultipleDiviseur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Pour chaque affirmation, indiquer si elle est vraie ou fausse.'\n  this.nbQuestions = 5\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  function justification (N, a, booleen) {\n    let result\n    if (booleen === true) {\n      if (N === 2) {\n        result = ', car son chiffre des unités est $0$, $2$, $4$, $6$ ou $8$.'\n      } else if (N === 5) {\n        result = ', car son chiffre des unités est $0$, ou $5$.'\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui est divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${calcul(a / N)}$.`\n      }\n    }\n    if (booleen === false) {\n      if (N === 2) {\n        result = \", car son chiffre des unités n'est pas $0$, $2$, $4$, $6$ ou $8$.\"\n      } else if (N === 5) {\n        result = \", car son chiffre des unités n'est pas $0$, ou $5$.\"\n      } else if (N === 3 || N === 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui n'est pas divisible par $${N}$.`\n      } else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${Math.floor(a / N)}+ ${a % N}$.`\n      }\n    }\n    return result\n  }\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    let typeDeQuestionsDisponibles = ['Ndiviseur', 'divisibleParN', 'multipleDeN', 'NdiviseurF', 'divisibleParNF', 'multipleDeNF', 'NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers']\n    if (this.nbQuestions < 8) {\n      typeDeQuestionsDisponibles = [choice(['Ndiviseur', 'divisibleParN']), 'multipleDeN', choice(['NdiviseurF', 'divisibleParNF']), 'multipleDeNF', choice(['NdiviseurEnvers', 'divisibleParNEnvers', 'multipleDeNEnvers'])]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let listeDeNDisponibles\n    if (this.sup === 1) {\n      listeDeNDisponibles = [2, 5]\n    }\n    if (this.sup === 2) {\n      listeDeNDisponibles = [2, 3, 5, 9]\n    }\n    if (this.sup === 3) {\n      listeDeNDisponibles = [7, 11, 13, 20, 30, 25]\n    }\n    const listeDeN = combinaisonListes(listeDeNDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, N, a, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      N = listeDeN[i]\n      a = randint(199, 999) * N\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'Ndiviseur':\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'divisibleParN':\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'multipleDeN':\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Vrai'\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[0].statut = true\n          break\n        case 'NdiviseurF':\n          a += randint(1, N - 1)\n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNF':\n          a += randint(1, N - 1)\n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += justification(N, a, false)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'NdiviseurEnvers':\n          texte = `$${texNombre(a)}$ est un diviseur de $${N}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${N}$ est un diviseur de $${texNombre(a)}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'divisibleParNEnvers':\n          texte = `$${N}$ est divisible par $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${texNombre(a)}$ est divisible par $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n        case 'multipleDeNEnvers':\n          texte = `$${N}$ est un multiple de $${texNombre(a)}$.`\n          texteCorr = texte.replace('.', ' ') + ' : Faux'\n          texteCorr += `, il faudrait plutôt dire $${a}$ est un multiple de $${N}$`\n          texteCorr += justification(N, a, true)\n          this.autoCorrection[i].propositions[1].statut = true\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, '1 : Critères de divisibilité par 2 et 5\\n2 : Critères de divisibilité par 2, 3, 5 et 9\\n3 : Sans critère de divisibilité']\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","ExerciceVraiFauxDivisibleMultipleDiviseur","justification","N","a","booleen","result","sommeDesChiffres","toString","calcul","texNombre","Math","floor","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","nouvelleVersion","parseInt","sup2","listeQuestions","listeCorrections","autoCorrection","typeDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","listeDeNDisponibles","listeDeN","texte","texteCorr","i","cpt","randint","enonce","propositions","statut","options","ordered","replace","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}