{"version":3,"file":"js/19191.89041e62cbfaddcb746b.js","mappings":"uOAKO,MAAMA,GAAkB,EAElBC,EAAQ,uEAON,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,4EAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,YAAc,EACnBL,KAAKM,IAAM,EAEXN,KAAKO,gBAAkB,WACrBP,KAAKQ,eAAiB,GACtBR,KAAKS,iBAAmB,GACpBT,KAAKU,aACPV,KAAKC,UAAY,SAEnB,MAAMU,GAAuBC,EAAAA,EAAAA,KAAkB,EAAC,GAAM,GAAM,GAAQZ,KAAKE,aACzE,IAAK,IAAWW,EAAOC,EAAWC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIC,EAAIC,EAAUC,EAAUC,EAAUC,EAAUC,EAAIC,EAAIC,EAAGC,EAAOC,EAAxGC,EAAI,EAA2GC,EAAM,EAAGD,EAAI9B,KAAKE,aAAe6B,EAAM,KAC5JhB,EAAGC,EAAGW,IAAKK,EAAAA,EAAAA,IAAYrB,EAAqBmB,IAC7CV,GAAKa,EAAAA,EAAAA,IAASN,EAAGZ,GACjBG,GAAKe,EAAAA,EAAAA,IAASjB,EAAGD,GACjBc,GAAQI,EAAAA,EAAAA,IAASjB,EAAG,EAAID,GACxBa,EAAQZ,EAAIA,EAAI,EAAID,EAAIY,EACxBR,GAAKc,EAAAA,EAAAA,IAASL,EAAO,EAAIb,EAAIA,GAAGmB,YAChCrB,EAAS,4CAA0CsB,EAAAA,EAAAA,KAAQpB,SAAQqB,EAAAA,EAAAA,KAAwBpB,OAAMqB,EAAAA,EAAAA,KAAmBV,uCACpHd,GAAS,qDACTC,EAAa,oDAAkDqB,EAAAA,EAAAA,KAAQpB,SAAQqB,EAAAA,EAAAA,KAAwBpB,OAAMqB,EAAAA,EAAAA,KAAmBV,kBAChIb,GAAa,+EACbA,GAAa,iKAGH,IAANC,IACFD,GAAc,kGAAiGC,MAC/GD,GAAc,2BAAgD,IAAtBI,EAAGoB,eAAuB,MAA8B,IAAvBpB,EAAGoB,eAAwB,KAAOpB,EAAGgB,YAAYG,wBAAwBjB,EAAGc,YAAYG,yBAOnKvB,GAAa,yDACbA,GAAc,iBAAgBe,EAAMK,YAAYG,+BAGhDvB,GAAc,QAAmB,IAAZe,EAAMU,EAAU,IAAM,MAAMC,KAAKC,IAAc,EAAVZ,EAAMa,KAAWF,KAAKC,IAAIZ,EAAMc,GAAK,GAAKd,EAAMe,gBAAgB,GAAGC,gBAAgBX,YAAYY,gBAAgBjB,EAAMkB,gBAAgBlB,GAAOK,YAAYY,gBAElNhC,GAAa,2BACbA,GAAc,QAAmB,IAAZe,EAAMU,EAAU,IAAM,MAAMC,KAAKC,IAAc,EAAVZ,EAAMa,KAAWF,KAAKC,IAAIZ,EAAMc,GAAK,GAAKd,EAAMe,gBAAgB,GAAGC,gBAAgBX,YAAYY,0BAA0BjB,EAAMK,YAAYG,mCAAmCR,EAAMkB,gBAAgBlB,GAAOmB,SAASd,YAAYG,uBAE1RvB,GAAa,uBACbA,GAAc,mCAAwD,IAAtBI,EAAGoB,eAAuB,MAA8B,IAAvBpB,EAAGoB,eAAwB,KAAOpB,EAAGgB,YAAYG,wBAAwBjB,EAAGc,YAAYG,wBACzKvB,GAAc,8BAA6Be,EAAMK,YAAYG,mCAAmCR,EAAMkB,gBAAgBlB,GAAOmB,SAASd,YAAYG,qBAAqBjB,EAAGc,YAAYG,wBAEtLvB,GAAc,8BAA6Be,EAAMK,YAAYG,mCAAmClB,EAAGe,YAAYc,SAASX,wBAEpHT,EAAQ,GACVd,GAAa,sHACbA,GAAa,uCACJc,EAAQ,IACjBd,GAAa,sDACbA,GAAc,0BAAyBe,EAAMK,YAAYG,+BACzDvB,GAAc,UAASK,EAAG8B,iBAAgB,MAC1CnC,GAAa,gDACbA,GAAc,kBAAiBe,EAAMK,YAAYG,sBAAsBlB,EAAG8B,qCAAqCpB,EAAMK,YAAYG,sBAAsBlB,EAAG8B,+BAExJhC,GADEiC,EAAAA,EAAAA,KAAKV,KAAKC,IAAIzB,GAAIwB,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,QAASmC,EAAAA,EAAAA,MAAKE,EAAAA,EAAAA,KAAqBxB,GAAO,GAAIY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,MACtGmC,EAAAA,EAAAA,KAAKV,KAAKC,IAAIzB,GAAIwB,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,KAEtC,EAEFI,EAAGkC,aACL5B,EAAKI,EAAMK,YAAYoB,cAAcnC,EAAGoC,eAAerB,YAAYc,UAAUd,YAC7ER,EAAKG,EAAMK,YAAYoB,cAAcnC,EAAGoC,eAAerB,aAAaA,YAElEb,EAAWI,EAAGY,mBACdd,EAAWE,EAAGuB,SAASF,YACvBxB,EAAWI,EAAGW,mBACdb,EAAWE,EAAGsB,SAASF,aAQrB/B,EAAI,EACFC,EAAI,GACDwC,EAAAA,EAAAA,KAAKhB,KAAKC,IAAI,EAAI1B,GAAKE,EAAG,IAM7BI,EAAY,KAAG8B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MAC1HL,EAAY,IAAEY,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAOuB,EAAAA,EAAAA,MAAQnC,EAAIC,KAC1HK,EAAY,KAAG6B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MAC1HJ,EAAY,IAAE2B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QARxHP,EAAY,aAAW8B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAClKM,EAAY,YAAUY,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAOuB,EAAAA,EAAAA,MAAQnC,EAAIC,OAAOuB,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKK,EAAY,aAAW6B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAClKO,EAAY,YAAU2B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,SAQ7JuC,EAAAA,EAAAA,KAAKhB,KAAKC,IAAI,EAAI1B,GAAKE,EAAG,IAM7BK,EAAY,KAAG6B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACzHJ,EAAY,IAAE2B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACxHP,EAAY,KAAG8B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACzHL,EAAY,IAAE4B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QARxHN,EAAY,aAAW6B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKO,EAAY,YAAU2B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAChKI,EAAY,aAAW8B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKM,EAAY,YAAU4B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,QAShKD,EAAI,GACDwC,EAAAA,EAAAA,KAAKhB,KAAKC,IAAI,EAAI1B,GAAKE,EAAG,IAM7BK,EAAY,KAAG6B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MAC1HJ,EAAY,IAAE2B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACzHP,EAAY,KAAG8B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MAC1HL,EAAY,IAAE4B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QARzHP,EAAY,aAAW8B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAClKM,EAAY,YAAU4B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKK,EAAY,aAAW6B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAClKO,EAAY,YAAU2B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,SAQ9JuC,EAAAA,EAAAA,KAAKhB,KAAKC,IAAI,EAAI1B,GAAKE,EAAG,IAM7BI,EAAY,KAAG8B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACzHL,EAAY,IAAEY,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAOuB,EAAAA,EAAAA,KAAOnC,EAAIC,KACzHK,EAAY,KAAG6B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,MACzHJ,EAAY,IAAE2B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QARzHP,EAAY,aAAWc,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAOuB,EAAAA,EAAAA,KAAOnC,EAAIC,OAAOuB,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKM,EAAY,YAAUY,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAOuB,EAAAA,EAAAA,KAAOnC,EAAIC,OAAOuB,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OAChKK,EAAY,aAAW6B,EAAAA,EAAAA,KAAOnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,OACjKO,EAAY,YAAU2B,EAAAA,EAAAA,MAAQnC,EAAIC,OAAMkB,EAAAA,EAAAA,MAAQgB,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAqBxB,GAAO,IAAMX,aAAYmC,EAAAA,EAAAA,KAAqBxB,GAAO,QAAQY,KAAKC,KAAIU,EAAAA,EAAAA,KAAO,EAAIpC,EAAIE,SAUpKuC,EAAAA,EAAAA,KAAKhB,KAAKC,IAAI,EAAI1B,GAAKE,EAAG,KAC7BH,GAAc,kBAAiBO,qBAA4BC,gBAE7DR,GAAa,iDACbA,GAAc,gBAAeO,kBAAyBC,OACtDR,GAAc,kBAAiBS,kBAAyBC,KACxDV,GAAc,qBAAoBU,KAAYD,gBAKhDV,IAAS4C,EAAAA,EAAAA,IAAyBzD,KAAM8B,GACpC9B,KAAK0D,oBAAoB5B,EAAGf,EAAGC,EAAGW,KACpC3B,KAAKQ,eAAemD,KAAK9C,GACzBb,KAAKS,iBAAiBkD,KAAK7C,GAC3BgB,KAEFC,KAEF6B,EAAAA,EAAAA,KAAwB5D,S,gBCrKb,SAASD,IAItBC,KAAKH,MAAQ,GACbG,KAAK6D,YAAa,EAclB7D,KAAKC,SAAW,GAChBD,KAAK8D,mBAAqB,GAC1B9D,KAAK+D,aAAe,GACpB/D,KAAKQ,eAAiB,GACtBR,KAAKS,iBAAmB,GACxBT,KAAKgE,QAAU,GACfhE,KAAKiE,kBAAoB,GACzBjE,KAAKkE,eAAiB,GACtBlE,KAAKmE,sBAAwB,GAK7BnE,KAAKoE,QAAU,EACfpE,KAAKK,YAAc,EAKnBL,KAAKqE,mBAAoB,EACzBrE,KAAKsE,cAAgB,GACrBtE,KAAKuE,oBAAqB,EAC1BvE,KAAKwE,uBAAwB,EAC7BxE,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKyE,kBAAmB,EACxBzE,KAAK0E,sBAAuB,EAC5B1E,KAAK2E,mBAAoB,EACzB3E,KAAK4E,uBAAwB,EAM7B5E,KAAK6E,QAAS,EACd7E,KAAK8E,gBAAkB,EAKvB9E,KAAKE,YAAc,GACnBF,KAAK+E,mBAAqB,EAC1B/E,KAAKgF,+BAAgC,EACrChF,KAAKiF,qBAAsB,EAC3BjF,KAAKkF,oBAAqB,EAC1BlF,KAAKmF,MAAQ,GAEbnF,KAAKU,YAAa,EAClBV,KAAKoF,uBAAwB,EAE7BpF,KAAKqF,2BAA4B,EACjCrF,KAAKsF,uBAAwB,EAC7BtF,KAAKuF,6BAA8B,EAEnCvF,KAAKwF,4BAA6B,EAClCxF,KAAKyF,wBAAyB,EAC9BzF,KAAK0F,8BAA+B,EAEpC1F,KAAK2F,4BAA6B,EAClC3F,KAAK4F,wBAAyB,EAC9B5F,KAAK6F,8BAA+B,EAEpC7F,KAAK8F,4BAA6B,EAClC9F,KAAK+F,wBAAyB,EAC9B/F,KAAKgG,8BAA+B,EAMpChG,KAAKiG,cAAe,EASpBjG,KAAKkG,eAAiB,GAMtBlG,KAAKO,gBAAkB,SAAU4F,KAQjCnG,KAAK0D,oBAAsB,SAAU5B,KAAMsE,GAC/B,IAANtE,IAAS9B,KAAKkG,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIxG,KAAKkG,eAAeO,QAAQJ,IAAmB,KAGjDrG,KAAKkG,eAAevC,KAAK0C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/1e/1E11-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, rienSi1, ecritureAlgebrique, ecritureAlgebriqueSauf1, extraireRacineCarree, pgcd, calcul, egal } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\nimport { fraction } from '../../modules/fractions.js'\nimport { choisiDelta } from '../../modules/fonctionsMaths.js'\nexport const interactifReady = false\n// export const interactifType = 'mathLive'\nexport const titre = 'Résoudre une équation du second degré à partir de la forme canonique'\n\n/**\n * Calcul de discriminant pour identifier la forme graphique associée (0 solution dans IR, 1 ou 2)\n * @author Stéphane Guyon\n * Référence 1E11\n*/\nexport default function Resolutionavecformecanonique () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Utiliser la forme canonique pour résoudre une équation du second degré : '\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacingCorr = 3\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (this.interactif) {\n      this.consigne += '<br> '\n    }\n    const listeTypeDeQuestions = combinaisonListes([true, true, false], this.nbQuestions)\n    for (let i = 0, texte, texteCorr, a, b, p, b1, b2, c1, x1String, x2String, stringX1, stringX2, x1, x2, c, delta, alpha, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      [a, b, c] = choisiDelta(listeTypeDeQuestions[i])\n      c1 = fraction(c, a)\n      b1 = fraction(b, a)\n      alpha = fraction(b, 2 * a)\n      delta = b * b - 4 * a * c\n      b2 = fraction(delta, 4 * a * a).simplifie() // terme b² dans l'expression a²-b²\n      texte = `Résoudre dans $\\\\mathbb{R}$ l'équation $${rienSi1(a)}x^2${ecritureAlgebriqueSauf1(b)}x${ecritureAlgebrique(c)}=0$ sans utiliser le discriminant,`\n      texte += ' mais en utilisant la forme canonique du polynôme.'\n      texteCorr = `On veut résoudre dans $\\\\mathbb{R}$ l'équation $${rienSi1(a)}x^2${ecritureAlgebriqueSauf1(b)}x${ecritureAlgebrique(c)}=0\\\\quad(1)$.`\n      texteCorr += '<br>On reconnaît une équation du second degré sous la forme $ax^2+bx+c = 0$.'\n      texteCorr += '<br>La consigne nous amène à commencer par écrire le polynôme du second degré sous forme canonique, <br>c\\'est à dire sous la forme :  $a(x-\\\\alpha)^2+\\\\beta$,'\n\n      // On simplifie par a si a !==1\n      if (a !== 1) {\n        texteCorr += `<br>On commence par diviser les deux membres de l'égalité par le coefficient $a$ qui vaut ici $${a}$.`\n        texteCorr += `<br>$(1)\\\\iff\\\\quad x^2 ${b1.valeurDecimale === 1 ? '+ ' : b1.valeurDecimale === -1 ? '- ' : b1.simplifie().ecritureAlgebrique} x ${c1.simplifie().ecritureAlgebrique}=0$`\n\n        // fin du test si a<>1\n      }\n      // ******************************************************************************************************************\n      // ******************      Reconnaissance de l'identité remarquable :    ********************************************\n      // ******************************************************************************************************************\n      texteCorr += '<br>On reconnaît le début d\\'une identité remarquable :'\n      texteCorr += `<br>$\\\\left(x ${alpha.simplifie().ecritureAlgebrique}\\\\right)^2`\n      // texteCorr += `${alpha.s === 1 ? '+' : '-'}2\\\\times ${alpha.valeurAbsolue().simplifie().texFraction}\\\\times x +${alpha.simplifie().d === 1 ? alpha.simplifie().valeurAbsolue().texFraction : '\\\\left(' + alpha.simplifie().valeurAbsolue().texFraction + '\\\\right)'}^2$`\n      // 2èmeligne correction On développe IR\n      texteCorr += `=x^2 ${alpha.s === 1 ? '+' : '-'}${Math.abs(alpha.n * 2) === Math.abs(alpha.d) ? '' : alpha.multiplieEntier(2).valeurAbsolue().simplifie().texFraction}x+${alpha.produitFraction(alpha).simplifie().texFraction} $`\n      // 3èmeligne correction On réécrrit l'expression en fct de l'IR\n      texteCorr += '<br>On en déduit que :  '\n      texteCorr += `$x^2 ${alpha.s === 1 ? '+' : '-'}${Math.abs(alpha.n * 2) === Math.abs(alpha.d) ? '' : alpha.multiplieEntier(2).valeurAbsolue().simplifie().texFraction}x= \\\\left(x ${alpha.simplifie().ecritureAlgebrique}\\\\right)^2    ${alpha.produitFraction(alpha).oppose().simplifie().ecritureAlgebrique} $`\n      // 3èmeligne correction On transforme l'équation avec l'IR\n      texteCorr += '<br>Il vient alors :'\n      texteCorr += `<br>$\\\\phantom{\\\\iff}\\\\quad x^2 ${b1.valeurDecimale === 1 ? '+ ' : b1.valeurDecimale === -1 ? '- ' : b1.simplifie().ecritureAlgebrique} x ${c1.simplifie().ecritureAlgebrique}=0$`\n      texteCorr += `<br>$\\\\iff\\\\quad  \\\\left(x ${alpha.simplifie().ecritureAlgebrique}\\\\right)^2    ${alpha.produitFraction(alpha).oppose().simplifie().ecritureAlgebrique}${c1.simplifie().ecritureAlgebrique}=0$`\n      // 4èmeligne correction : On factorise pour obtenir équation produit-nul\n      texteCorr += `<br>$\\\\iff\\\\quad  \\\\left(x ${alpha.simplifie().ecritureAlgebrique}\\\\right)^2    ${b2.simplifie().oppose().ecritureAlgebrique}=0$`\n      // test des solutions\n      if (delta < 0) {\n        texteCorr += '<br>L\\'équation revient à ajouter deux nombres positifs, dont un non-nul. Cette somme ne peut pas être égale à zéro.'\n        texteCorr += '<br>On en déduit que $S=\\\\emptyset$'\n      } else if (delta > 0) { // Cas des deux solutions :\n        texteCorr += '<br>On reconnaît l\\'identité remarquable $a^2-b^2$ :'\n        texteCorr += `<br>avec  $a= \\\\left(x ${alpha.simplifie().ecritureAlgebrique}\\\\right)$ `\n        texteCorr += `et $b =${b2.texRacineCarree(true)}$`// = ${b3.simplifie().texFraction} why ?\n        texteCorr += '<br>L\\'équation à résoudre est équivalente à :'\n        texteCorr += `<br> $\\\\left(x ${alpha.simplifie().ecritureAlgebrique}-${b2.texRacineCarree()}\\\\right)\\\\left(x ${alpha.simplifie().ecritureAlgebrique}+${b2.texRacineCarree()}\\\\right)=0$`\n        if (pgcd(Math.abs(b), Math.abs(calcul(2 * a))) === pgcd(extraireRacineCarree(delta)[0], Math.abs(calcul(2 * a)))) {\n          p = pgcd(Math.abs(b), Math.abs(calcul(2 * a)))\n        } else {\n          p = 1\n        }\n        if (b2.estParfaite) { // pas de radical, calcul rationnel\n          x1 = alpha.simplifie().sommeFraction(b2.racineCarree().simplifie().oppose()).simplifie()\n          x2 = alpha.simplifie().sommeFraction(b2.racineCarree().simplifie()).simplifie()\n          if (a < 0) {\n            x1String = x1.ecritureAlgebrique\n            stringX1 = x1.oppose().texFraction\n            x2String = x2.ecritureAlgebrique\n            stringX2 = x2.oppose().texFraction\n          } else {\n            x1String = x1.ecritureAlgebrique\n            stringX1 = x1.oppose().texFraction\n            x2String = x2.ecritureAlgebrique\n            stringX2 = x2.oppose().texFraction\n          }\n        } else { // présence d'un radical x1String contient ce qui est après x dans le facteur 1 stringX1 contient son opposé (transposé dans l'autre membre) Idem pour x2String et stringX2\n          if (a < 0) {\n            if (b < 0) { // a et b négatifs\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `+\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(-b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `+\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x1String = `+${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(-b / p)}`\n                x2String = `+${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            } else { // a négatif, b positif\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x2String = `-\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                x1String = `-\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x2String = `-${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                x1String = `-${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            }\n          } else {\n            if (b < 0) { // a positif b négatif\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `-\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `-\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x2String = `-${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                x1String = `-${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            } else { // a et b positifs\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `-\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `+\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x1String = `+${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}`\n                x2String = `+${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            }\n          }\n        }\n        if (!egal(Math.abs(2 * a) / p, 1)) { // présence de traits de fraction donc réécriture du produit nul\n          texteCorr += `<br> $\\\\left(x ${x1String}\\\\right)\\\\left(x ${x2String}\\\\right)=0$`\n        }\n        texteCorr += '<br> On applique la propriété du produit nul :' // fin de la rédaction\n        texteCorr += `<br> Soit $x ${x1String}=0$ , soit $x ${x2String}=0$` // on isole les facteurs nuls\n        texteCorr += `<br> Soit $x = ${stringX1}$ , soit $x = ${stringX2}$`// on écrit les solutions\n        texteCorr += `<br> $S =\\\\left\\\\{${stringX2};${stringX1}\\\\right\\\\}$` // Solution\n      } else { // cas de delta  = 0\n        // pour l'instant pas de delta nul avec choisiDelta\n      }\n\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.questionJamaisPosee(i, a, b, c)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","titre","Resolutionavecformecanonique","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","spacingCorr","sup","nouvelleVersion","listeQuestions","listeCorrections","interactif","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","p","b1","b2","c1","x1String","x2String","stringX1","stringX2","x1","x2","c","delta","alpha","i","cpt","choisiDelta","fraction","simplifie","rienSi1","ecritureAlgebriqueSauf1","ecritureAlgebrique","valeurDecimale","s","Math","abs","n","d","multiplieEntier","valeurAbsolue","texFraction","produitFraction","oppose","texRacineCarree","pgcd","calcul","extraireRacineCarree","estParfaite","sommeFraction","racineCarree","egal","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}