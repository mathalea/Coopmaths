{"version":3,"file":"js/52774.d8e3c20364be912a28bb.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6C30-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, texNombre2, calcul } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\n\nexport const amcReady = true\nexport const amcType = 'qcmMono' // QCM\nexport const interactifReady = true\nexport const interactifType = 'qcm'\n\nexport const titre = 'Opérations avec les nombres décimaux'\n\n/**\n* @author Erwan Duplessy\n* 6C30-1\n* Trouver la réposne exacte. 4 cas :\n* - somme de deux entiers\n* - produit de deux entiers\n* - somme de deux décimaux\n* - produit de deux décimaux\n* date : 2021/02/15\n*/\n\nexport default function MultiplicationMentalDecimaux () {\n  Exercice.call(this)\n  this.titre = titre\n  this.interactifObligatoire = true // Il n'existe pas de version non QCM\n  this.interactif = true\n  this.consigne = 'Trouver la réponse exacte du calcul parmi les réponses proposées.'\n  this.nbQuestions = 4 // Ici le nombre de questions\n  this.video = ''\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const typeDeQuestionsDisponibles = ['add', 'mul', 'add_deci', 'mul_deci'] // tableau à compléter par valeurs possibles des types de questions\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n      let a = 0\n      let b = 0 // les deux opérandes\n\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 'add':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n          texte += `Calcul : $${a} + ${b}$.`\n          texteCorr += `$${a} + ${b}=${texNombre2(calcul(a + b))}$`\n\n          this.autoCorrection[i] = {}\n          this.autoCorrection[i].enonce = `${texte}\\n`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: `$${texNombre2(calcul(a + b))}$`,\n              statut: true\n            },\n            {\n              texte: `$${texNombre2(calcul(a * b))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a + b) / 10))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul(10 * (a + b)))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul(a + b + 1))}$`,\n              statut: false\n            }\n          ]\n          this.autoCorrection[i].options = {\n            ordered: false,\n            lastChoice: 5\n          }\n          break\n\n        case 'mul':\n          a = 10 * randint(1, 9) + randint(1, 9)\n          b = 10 * randint(1, 9) + randint(1, 9)\n          texte += `Calcul : $${a} \\\\times ${b}$.`\n          texteCorr += `$${a} \\\\times ${b}=${texNombre2(calcul(a * b))}$`\n          this.autoCorrection[i] = {}\n          this.autoCorrection[i].enonce = `${texte}\\n`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: `$${texNombre2(a * b)}$`,\n              statut: true\n            },\n            {\n              texte: `$${texNombre2(10 * a * b)}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(a * b / 10)}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(a + b)}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(a * b + 1)}$`,\n              statut: false\n            }\n          ]\n          this.autoCorrection[i].options = {\n            ordered: false,\n            lastChoice: 5\n          }\n          break\n\n        case 'add_deci':\n          a = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          b = 1000 * randint(1, 9) + 100 * randint(0, 9, [3, 4, 5, 6, 7]) + 10 * randint(0, 9) + randint(0, 9)\n          texte += `Calcul : $${texNombre2(a / 100)} + ${texNombre2(b / 100)}$.`\n          texteCorr += ` $${texNombre2(a / 100)} + ${texNombre2(b / 100)}=${texNombre2(calcul(a / 100 + b / 100))}$.`\n          this.autoCorrection[i] = {}\n          this.autoCorrection[i].enonce = `${texte}\\n`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: `$${texNombre2(calcul((a + b) / 100))}$`,\n              statut: true\n            },\n            {\n              texte: `$${texNombre2(calcul((a * b) / 100))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a + b) / 1000))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul(10 * (a + b) / 100))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a + b + 1) / 100))}$`,\n              statut: false\n            }\n          ]\n          this.autoCorrection[i].options = {\n            ordered: false,\n            lastChoice: 5\n          }\n          break\n\n        case 'mul_deci':\n          // a et b sont des nombres à 4 chiffres, dont 2 avant la virgule\n          // on multiplie par 100 pour travailler avec des nombres entiers. Par ex : 6547 plutôt que 65.47\n          a = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9, [2, 5]) // on évite le 2*5 avec les derniers chiffres\n          b = 1000 * randint(1, 9) + 100 * randint(1, 9, [3, 4, 5, 6, 7]) + 10 * randint(1, 9) + randint(0, 9)\n          texte += `Calcul : $${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}$.`\n          texteCorr += `$${texNombre2(a / 100)} \\\\times ${texNombre2(b / 100)}=${texNombre2(calcul(a * b / 10000))}$.`\n          this.autoCorrection[i] = {}\n          this.autoCorrection[i].enonce = `${texte}\\n`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: `$${texNombre2(calcul((a * b) / 10000))}$`,\n              statut: true\n            },\n            {\n              texte: `$${texNombre2(calcul((10 * a * b) / 10000))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a * b) / 100000))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a + b) / 100))}$`,\n              statut: false\n            },\n            {\n              texte: `$${texNombre2(calcul((a * b + 1) / 10000))}$`,\n              statut: false\n            }\n          ]\n          this.autoCorrection[i].options = {\n            ordered: false,\n            lastChoice: 5\n          }\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  // this.besoinFormulaireCaseACocher = ['Mode QCM',true]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["amcReady","amcType","interactifReady","interactifType","titre","MultiplicationMentalDecimaux","Exercice","this","interactifObligatoire","interactif","consigne","nbQuestions","video","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","a","b","randint","texNombre2","calcul","autoCorrection","enonce","propositions","statut","options","ordered","lastChoice","propositionsQcm","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}