{"version":3,"file":"js/14109.5eaab5cb468aced773f4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/1e/1E13.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, ecritureParentheseSiNegatif, rienSi1, ecritureAlgebrique, ecritureAlgebriqueSauf1, extraireRacineCarree, pgcd, calcul, egal } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\nimport { fraction } from '../../modules/fractions.js'\nimport { choisiDelta } from '../../modules/fonctionsMaths.js'\nexport const interactifReady = false\n// export const interactifType = 'mathLive'\nexport const titre = 'Factoriser, si possible, un polynôme du second degré'\n\n/**\n *\n * @author Stéphane Guyon\n * Référence 1E13\n*/\nexport default function Resolutionavecformecanonique () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Factoriser un polynôme de degré 2: '\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacingCorr = 3\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (this.interactif) {\n      this.consigne += '<br> '\n    }\n    const listeTypeDeQuestions = combinaisonListes([true, true, false], this.nbQuestions)\n    for (let i = 0, texte, texteCorr, a, b, p, b2, x1String, x2String, stringX1, stringX2, x1, x2, c, delta, alpha, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      [a, b, c] = choisiDelta(listeTypeDeQuestions[i])\n      alpha = fraction(b, 2 * a)\n      delta = b * b - 4 * a * c\n      b2 = fraction(delta, 4 * a * a).simplifie() // terme b² dans l'expression a²-b²\n      texte = `Facroriser, si cela est possible :  $${rienSi1(a)}x^2${ecritureAlgebriqueSauf1(b)}x${ecritureAlgebrique(c)}$. `\n      texteCorr = `Facroriser, si cela est possible : $${rienSi1(a)}x^2${ecritureAlgebriqueSauf1(b)}x${ecritureAlgebrique(c)}$.`\n      texteCorr += '<br>On reconnaît un polynôme du second degré sous la forme $ax^2+bx+c$.'\n      texteCorr += '<br>On cherche les éventuelles racine(s) du polynôme.'\n      texteCorr += '<br>On commence par calculer le discriminant : $\\\\Delta = b^2-4ac$'\n      texteCorr += `<br>$\\\\Delta = ${b}^2-4 \\\\times ${ecritureParentheseSiNegatif(a)} \\\\times ${ecritureParentheseSiNegatif(c)}=${delta}$`\n\n      // test des solutions\n      if (delta < 0) {\n        texteCorr += '<br>Le discriminant étant négatif, d\\'après le cours, le polynôme n\\'admet aucune racine réelle.'\n        texteCorr += '<br>On en déduit que $S=\\\\emptyset$'\n      } else if (delta > 0) { // Cas des deux solutions :\n        texteCorr += '<br>Le discriminant étant positif, d\\'après le cours, le polynôme admet deux racines réelles :'\n        texteCorr += '<br>$x_1=\\\\dfrac{-b-\\\\sqrt{\\\\Delta}}{2a}$ et $x_2=\\\\dfrac{-b+\\\\sqrt{\\\\Delta}}{2a}$'\n        texteCorr += `<br>$x_1=\\\\dfrac{-${ecritureParentheseSiNegatif(b)}-\\\\sqrt{${delta}}}{2\\\\times${ecritureParentheseSiNegatif(a)}}$ et $x_2=\\\\dfrac{-${ecritureParentheseSiNegatif(b)}+\\\\sqrt{${delta}}}{2\\\\times${ecritureParentheseSiNegatif(a)}}$`\n\n        if (pgcd(Math.abs(b), Math.abs(calcul(2 * a))) === pgcd(extraireRacineCarree(delta)[0], Math.abs(calcul(2 * a)))) {\n          p = pgcd(Math.abs(b), Math.abs(calcul(2 * a)))\n        } else {\n          p = 1\n        }\n        if (b2.estParfaite) { // pas de radical, calcul rationnel\n          x1 = alpha.simplifie().sommeFraction(b2.racineCarree().simplifie().oppose()).simplifie()\n          x2 = alpha.simplifie().sommeFraction(b2.racineCarree().simplifie()).simplifie()\n          if (a < 0) {\n            x1String = x1.ecritureAlgebrique\n            stringX1 = x1.oppose().texFraction\n            x2String = x2.ecritureAlgebrique\n            stringX2 = x2.oppose().texFraction\n          } else {\n            x1String = x1.ecritureAlgebrique\n            stringX1 = x1.oppose().texFraction\n            x2String = x2.ecritureAlgebrique\n            stringX2 = x2.oppose().texFraction\n          }\n        } else { // présence d'un radical x1String contient ce qui est après x dans le facteur 1 stringX1 contient son opposé (transposé dans l'autre membre) Idem pour x2String et stringX2\n          if (a < 0) {\n            if (b < 0) { // a et b négatifs\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `+\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(-b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `+\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x1String = `+${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(-b / p)}`\n                x2String = `+${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            } else { // a négatif, b positif\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x2String = `-\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                x1String = `-\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x2String = `-${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                x1String = `-${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            }\n          } else {\n            if (b < 0) { // a positif b négatif\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `-\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `-\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x2String = `-${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                x1String = `-${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${calcul(-b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            } else { // a et b positifs\n              if (!egal(Math.abs(2 * a) / p, 1)) { // présence d'un dénominateur\n                x1String = `-\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX1 = `\\\\dfrac{${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}}{${Math.abs(calcul(2 * a / p))}}`\n                x2String = `+\\\\dfrac{${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n                stringX2 = `\\\\dfrac{${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}}{${Math.abs(calcul(2 * a / p))}}`\n              } else { // absence de trait de fraction\n                x1String = `+${calcul(b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX1 = `${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}-${calcul(b / p)}`\n                x2String = `+${calcul(b / p)}+${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n                stringX2 = `${calcul(-b / p)}-${rienSi1(calcul(extraireRacineCarree(delta)[0]) / p)}\\\\sqrt{${extraireRacineCarree(delta)[1]}}`\n              }\n            }\n          }\n        }\n        texteCorr += `<br> Après simplification, on obtient : $x_1= ${stringX1}$ et  $x_2=${stringX2}$` // Solution\n        texteCorr += '<br> d\\'après le cours, on sait que le polynôme se factorise alors sous la forme : $a(x-x_1)(x-x_2)$'\n        if (!egal(Math.abs(2 * a) / p, 1)) { // présence de traits de fraction donc réécriture du produit nul\n          texteCorr += `<br> Finalement, $${rienSi1(a)}x^2${ecritureAlgebriqueSauf1(b)}x${ecritureAlgebrique(c)}=${rienSi1(a)}\\\\left(x ${x1String}\\\\right)\\\\left(x ${x2String}\\\\right)$`\n        }\n      } else { // cas de delta  = 0\n        // pour l'instant pas de delta nul avec choisiDelta\n      }\n\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.questionJamaisPosee(i, a, b, c)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","titre","Resolutionavecformecanonique","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","spacingCorr","sup","nouvelleVersion","listeQuestions","listeCorrections","interactif","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","p","b2","x1String","x2String","stringX1","stringX2","x1","x2","c","delta","alpha","i","cpt","choisiDelta","fraction","simplifie","rienSi1","ecritureAlgebriqueSauf1","ecritureAlgebrique","ecritureParentheseSiNegatif","pgcd","Math","abs","calcul","extraireRacineCarree","estParfaite","sommeFraction","racineCarree","oppose","texFraction","egal","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}