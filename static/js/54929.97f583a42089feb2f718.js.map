{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N10.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/c3/c3N10.js"],"names":["titre","EcrireNombresEntiers","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","nombre","tranche","i","cpt","splice","j","randint","push","choice","context","texNombre","nombreEnLettres","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","EcrireEntiersCycle3"],"mappings":"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","file":"js/54929.97f583a42089feb2f718.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, texNombre, nombreEnLettres } from '../../modules/outils.js'\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10\n */\n\nexport default function EcrireNombresEntiers () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 3\n  this.nouvelleVersion = function () {\n    if (parseInt(this.sup) === 2) { this.consigne = 'Écrire le nombre en chiffres' } else { this.consigne = 'Écrire le nombre en lettres' }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    if (parseInt(this.sup2) === 1) typesDeQuestionsDisponibles = [1, 1, 1, 2, 2]\n    else if (parseInt(this.sup2) === 2) typesDeQuestionsDisponibles = [1, 2, 2, 2, 3]\n    else if (parseInt(this.sup2) === 3) typesDeQuestionsDisponibles = [2, 2, 3, 3, 4]\n    else typesDeQuestionsDisponibles = [2, 3, 3, 4, 4]\n\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          nombre += tranche[j] * 10 ** (j * 3)\n        }\n        if (tranche[listeTypeDeQuestions[i] - 1] === 0) nombre = 0\n      }\n      if (parseInt(this.sup) === 1) {\n        if (!context.isDiaporama) texte = `$${texNombre(nombre)}$ : \\\\dotfill`\n        else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}.`\n        else texteCorr = `${nombreEnLettres(nombre)}.`\n      } else {\n        if (!context.isDiaporama) texte = `${nombreEnLettres(nombre)} : \\\\dotfill`\n        else texte = `${nombreEnLettres(nombre)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(nombre)} : $${texNombre(nombre)}$.`\n        else texteCorr = `$${texNombre(nombre)}$.`\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercice', 2, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres']\n  this.besoinFormulaire2Numerique = ['Niveau', 4, '1 : Élémentaire\\n2 : Facile\\n3 : Moyen\\n4 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","import EcrireNombresEntiers from '../6e/6N10.js'\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10\n */\nexport default function EcrireEntiersCycle3 () {\n  EcrireNombresEntiers.call(this)\n  this.titre = titre\n  this.sup2 = 0\n  this.sup = 1\n}\n"],"sourceRoot":""}