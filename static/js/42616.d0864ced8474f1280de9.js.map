{"version":3,"file":"js/42616.d0864ced8474f1280de9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N10-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, texNombre, nombreEnLettres } from '../../modules/outils.js'\n\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10-0 (anciennement 6N10)\n */\n\nexport default function EcrireNombresEntiers () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 3\n  this.nouvelleVersion = function () {\n    let typeDeConsigne = []\n    if (parseInt(this.sup) === 1) {\n      this.consigne = 'Écrire le nombre en lettres.'\n      typeDeConsigne = combinaisonListes([1], this.nbQuestions)\n    }\n    if (parseInt(this.sup) === 2) {\n      this.consigne = 'Écrire le nombre en chiffres.'\n      typeDeConsigne = combinaisonListes([2], this.nbQuestions)\n    }\n    if (parseInt(this.sup) === 3) {\n      this.consigne = 'Passer de l\\'écriture en chiffres à celle en lettres et inversement.'\n      typeDeConsigne = combinaisonListes([1, 2], this.nbQuestions)\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles\n    if (parseInt(this.sup2) === 1) typesDeQuestionsDisponibles = [1, 1, 1, 2, 2]\n    else if (parseInt(this.sup2) === 2) typesDeQuestionsDisponibles = [1, 2, 2, 2, 3]\n    else if (parseInt(this.sup2) === 3) typesDeQuestionsDisponibles = [2, 2, 3, 3, 4]\n    else typesDeQuestionsDisponibles = [2, 3, 3, 4, 4]\n\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          nombre += tranche[j] * 10 ** (j * 3)\n        }\n        if (tranche[listeTypeDeQuestions[i] - 1] === 0) nombre = 0\n      }\n      if (typeDeConsigne[i] === 1) {\n        setReponse(this, i, nombreEnLettres(nombre))\n        if (!context.isDiaporama) texte = `$${texNombre(nombre)} ${!this.interactif ? ' : \\\\dotfill $' : '$ <br>' + ajouteChampTexteMathLive(this, i)}`\n        else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}`\n        else texteCorr = `${nombreEnLettres(nombre)}`\n      } else {\n        setReponse(this, i, nombre)\n        if (!context.isDiaporama) texte = `${nombreEnLettres(nombre)} ${!this.interactif ? ' : \\\\dotfill $' : '<br>' + ajouteChampTexteMathLive(this, i)}`\n        else texte = `${nombreEnLettres(nombre)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(nombre)} : $${texNombre(nombre)}$`\n        else texteCorr = `$${texNombre(nombre)}$`\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercices', 3, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres\\n3 : Passer d\\'une écriture à l\\'autre']\n  this.besoinFormulaire2Numerique = ['Niveau', 4, '1 : Élémentaire (jusqu\\'à la classe des milliers) \\n2 : Facile (jusqu\\'à la classe des millions)\\n3 : Moyen (jusqu\\'à la classe des milliards)\\n4 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","EcrireNombresEntiers","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","typesDeQuestionsDisponibles","typeDeConsigne","parseInt","consigne","combinaisonListes","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","texte","texteCorr","a","b","c","nombre","tranche","i","cpt","splice","j","randint","push","choice","setReponse","nombreEnLettres","context","texNombre","interactif","ajouteChampTexteMathLive","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}