{"version":3,"file":"js/94501.a60ca8c1282fa8af8e69.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N23-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, nombreEnLettres } from '../../modules/outils.js'\nexport const titre = 'Écrire un nombre décimal en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * 6N23-0\n */\n\nexport default function EcrireNombresDecimal () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.nouvelleVersion = function () {\n    if (parseInt(this.sup) === 2) { this.consigne = 'Écrire le nombre en chiffres' } else { this.consigne = 'Écrire le nombre en lettres' }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const typesDeQuestionsDisponibles = [parseInt(this.sup2) + 1] // <1 000, <1 000 000)\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, partEnt, partDec, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        partEnt = 0\n        partDec = 0\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 1; j < listeTypeDeQuestions[i]; j++) {\n          partEnt += tranche[j] * 10 ** ((j - 1) * 3)\n          // nombre += tranche[j] * 10 ** ((j-1)*3)\n        }\n        partDec = tranche[0]\n        nombre = calcul(partEnt + partDec / 1000)\n        // if (tranche[listeTypeDeQuestions[i]-1]==0) nombre=0\n        if (tranche[1] < 2) nombre = 0\n        if (tranche[0] === 0) nombre = 0\n      }\n      if (parseInt(this.sup) === 1) {\n        if (!context.isDiaporama) texte = `$${texNombre(nombre)}$ : \\\\dotfill`\n        else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}.`\n        else texteCorr = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)}.`\n      } else {\n        if (!context.isDiaporama) texte = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)} : \\\\dotfill`\n        else texte = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)} : $${texNombre(nombre)}$.`\n        else texteCorr = `$${texNombre(nombre)}$.`\n      }\n      texte = texte.replace('et-un unités', 'et-une unités')\n      texteCorr = texteCorr.replace('et-un unités', 'et-une unités')\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercice', 2, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres']\n  this.besoinFormulaire2Numerique = ['Classe maximum', 2, '1 : Unités\\n2 : Milliers']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","EcrireNombresDecimal","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","parseInt","consigne","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","nombre","tranche","partEnt","partDec","i","cpt","splice","j","randint","push","choice","calcul","context","texNombre","nombreEnLettres","replace","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}