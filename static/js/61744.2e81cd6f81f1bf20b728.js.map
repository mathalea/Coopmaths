{"version":3,"file":"js/61744.2e81cd6f81f1bf20b728.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5P11-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, choice, prenomF, prenomM, texNombre, nombreAvecEspace, calcul, minToHour } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Problème de vitesse'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Recherche de la vitesse, du temps ou de la distance en utilisant un tableau de proportionnalité et le produit en croix\n * @author Rémi Angot\n * Référence 5P11-1\n*/\nexport default function VitesseDistanceTemps () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.consigneCorrection = ' À vitesse constante, la distance et le temps du trajet sont proportionnels. On peut donc utiliser la technique du produit en croix.'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    const typesDeQuestionsDisponibles = ['vitesse', 'temps', 'distance']\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, d, v, t, pronomgenre, prenom, destination, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      v = randint(8, 26, [12]) * 5 // On évite le 60 km/h trop trivial\n      if (v % 2 === 0) {\n        t = randint(5, 39) * 3\n      } else {\n        t = randint(2, 19) * 6\n      } // On s'assure que le produit v*t est divisible par 6\n      d = calcul(v * t / 60)\n      pronomgenre = choice(['il', 'elle'])\n      if (pronomgenre === 'il') {\n        prenom = prenomM()\n      } else {\n        prenom = prenomF()\n      }\n      if (d < 60) {\n        destination = choice(['à son travail', \"à l'école de ses enfants\", 'au cinéma', 'au centre de loisirs'])\n      } else {\n        destination = choice([\"jusqu'à sa location de vacances\", 'dans la maison de ses parents', 'à une conférence'])\n      }\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'vitesse':\n          texte = `${prenom} met ${minToHour(t)} pour aller ${destination} qui est à une distance de ${nombreAvecEspace(d)} km. Déterminer sa vitesse moyenne.`\n          if (context.isHtml) {\n            texteCorr = '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|l|c|c|}\\n'\n          } else {\n            texteCorr = '$\\\\begin{array}{|l|c|c|}\\n'\n          }\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Distance (en km)} & ${texNombre(d)} & v\\\\\\\\ \\n`\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Temps (en min)} & ${t} & 60 \\\\\\\\ \\n`\n          texteCorr += '\\\\hline\\n'\n          texteCorr += '\\\\end{array}$'\n          texteCorr += '<br><br>'\n          texteCorr += `$v=\\\\dfrac{${texNombre(d)}\\\\times 60}{${t}}=${v}$ \\n`\n          texteCorr += '<br><br>'\n          texteCorr += `Sa vitesse moyenne est de ${v} km/h.`\n          setReponse(this, i, v)\n          break\n        case 'temps':\n          texte = `Si ${prenom} roule à ${v} km/h. Combien de temps lui faudra-t-il  pour aller ${destination} qui est à une distance de ${nombreAvecEspace(d)} km ?`\n          if (this.interactif && context.isHtml) texte += '<br><em>Donner le nombre de minutes.</em>'\n          if (context.isHtml) {\n            texteCorr = '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|l|c|c|}\\n'\n          } else {\n            texteCorr = '$\\\\begin{array}{|l|c|c|}\\n'\n          }\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Distance (en km)} & ${texNombre(d)} & ${v}\\\\\\\\ \\n`\n          texteCorr += '\\\\hline\\n'\n          texteCorr += '\\\\text{Temps (en min)} & t & 60 \\\\\\\\ \\n'\n          texteCorr += '\\\\hline\\n'\n          texteCorr += '\\\\end{array}$'\n          texteCorr += '<br><br>'\n          texteCorr += `$t=\\\\dfrac{${texNombre(d)}\\\\times 60}{${v}}=${t}$ \\n`\n          texteCorr += '<br><br>'\n          texteCorr += `${pronomgenre.charAt(0).toUpperCase() + pronomgenre.slice(1)} mettra ${minToHour(t)} minutes pour aller ${destination}.`\n          setReponse(this, i, t)\n          break\n        case 'distance':\n          texte = `${prenom} roule à ${v} km/h de moyenne pendant ${minToHour(t)}. Calculer la distance parcourue.`\n          if (context.isHtml) {\n            texteCorr = '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|l|c|c|}\\n'\n          } else {\n            texteCorr = '$\\\\begin{array}{|l|c|c|}\\n'\n          }\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Distance (en km)} & d & ${v}\\\\\\\\ \\n`\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Temps (en min)} & ${t} & 60 \\\\\\\\ \\n`\n          texteCorr += '\\\\hline\\n'\n          texteCorr += '\\\\end{array}$'\n          texteCorr += '<br><br>'\n          texteCorr += `$d=\\\\dfrac{${texNombre(t)}\\\\times ${v}}{60}=${texNombre(d)}$ \\n`\n          texteCorr += '<br><br>'\n          texteCorr += `${pronomgenre.charAt(0).toUpperCase() + pronomgenre.slice(1)} a donc parcouru ${texNombre(d)} km.`\n          setReponse(this, i, d)\n          break\n      }\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 3]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","VitesseDistanceTemps","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","consigneCorrection","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","d","v","t","pronomgenre","prenom","destination","texte","texteCorr","i","cpt","randint","calcul","choice","prenomM","prenomF","minToHour","nombreAvecEspace","context","texNombre","setReponse","interactif","charAt","toUpperCase","slice","ajouteChampTexteMathLive","indexOf","push","listeQuestionsToContenu","boutonAide","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}