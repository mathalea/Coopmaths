{"version":3,"file":"js/31786.8470f6efde27c553bff4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C22-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, choice, combinaisonListes, pgcd, texFractionReduite, texNombrec, texFraction, sp } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport Fraction from '../../modules/Fraction.js'\nexport const titre = 'Trouver l’inverse d’un nombre'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * * Calcul de l'inverse d'un nombre.\n *\n * Paramétrages possibles :\n * * 1 : inverse d'un nombre entier\n * * 2 : inverse d'une fraction\n * * 3 : inverse d'un nombre décimal\n * * 4 : mélange des trois autres niveaux\n * @author Jean-Claude Lhote\n * 4C22-1\n */\nexport default function ExerciceTrouverInverse () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1 // Avec ou sans relatifs\n  this.titre = titre\n  this.consigne =\n    \"Calculer l'inverse et donner la réponse sous forme décimale ou de fraction simplifiée quand c'est impossible\"\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    const listeEntiers = [\n      [1, 1],\n      [2, 0.5],\n      [3, 0],\n      [4, 0.25],\n      [5, 0.2],\n      [6, 0],\n      [7, 0],\n      [8, 0.125],\n      [9, 0],\n      [10, 0.1],\n      [11, 0],\n      [12, 0],\n      [13, 0],\n      [14, 0],\n      [15, 0],\n      [20, 0.05],\n      [50, 0.02],\n      [100, 0.01]\n    ]\n    // [n,0] si l'inverse de n n'est pas décimal [n,1/n] si il est décimal.\n    const listeDecimaux = [\n      [0.1, 10, 1],\n      [0.2, 5, 1],\n      [0.3, 10, 3],\n      [0.4, 10, 4],\n      [0.5, 2, 1],\n      [0.6, 10, 6],\n      [0.75, 100, 75],\n      [0.8, 10, 8],\n      [1.2, 10, 12],\n      [1.5, 10, 15],\n      [2.5, 10, 25],\n      [3.5, 10, 35],\n      [4.8, 10, 48],\n      [7.5, 10, 75]\n    ]\n    // [x,n,d] n/d = inverse de x fraction à réduire si besoin ... d=1 si l'inverse de x est entier.\n    const listeFractions = [\n      [3, 4, false],\n      [5, 2, true],\n      [4, 5, true],\n      [5, 7, true],\n      [7, 3, false],\n      [16, 6, true],\n      [12, 18, true],\n      [9, 4, false],\n      [4, 6, true],\n      [8, 7, true],\n      [5, 9, true],\n      [9, 7, false],\n      [13, 6, false],\n      [7, 2, false]\n    ]\n    // [n,d,bol] inverse d/n à simplifier si besoin. si bol = true, alors d/n est décimal.\n    let couplesDInverses\n    if (this.sup === 4) {\n      typesDeQuestionsDisponibles = [1, 1, 2, 2, 3]// nombre entier,fraction,décimal]\n    } else {\n      typesDeQuestionsDisponibles = [parseInt(this.sup)]\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    for (let i = 0,\n      nombreChoisi,\n      nombreInverse,\n      nombreInverseNum,\n      nombreInverseDen,\n      texte,\n      texteCorr,\n      typesDeQuestions,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // inverse d'entier\n          couplesDInverses = choice(listeEntiers)\n          nombreChoisi = couplesDInverses[0]\n          nombreInverse = couplesDInverses[1]\n          if (choice([true, false])) {\n            // nombre entier positif\n            if (nombreInverse !== 0) {\n              // inverse décimal\n              texteCorr = `L'inverse de $${nombreChoisi}$ est $${texNombrec(\n                nombreInverse\n              )} \\\\:$ car $\\\\: ${nombreChoisi}   \\\\times   ${texNombrec(\n                nombreInverse\n              )} =  1$.`\n            } else {\n              // inverse non décimal\n              texteCorr = `L'inverse de $${nombreChoisi}$ est $${texFraction(\n                1,\n                nombreChoisi\n              )} \\\\:$ car $\\\\: ${nombreChoisi}   \\\\times   ${texFraction(\n                1,\n                nombreChoisi\n              )} =  1$.`\n            }\n          } else {\n            // nombre entier négatif\n            nombreChoisi = -nombreChoisi\n            if (nombreInverse !== 0) {\n              // inverse décimal\n              texteCorr = `L'inverse de $${nombreChoisi}$ est $${texNombrec(\n                -nombreInverse\n              )} \\\\:$`\n              texteCorr += ` car $\\\\: ${nombreChoisi}  \\\\times  \\\\left(-${texNombrec(\n                nombreInverse\n              )}\\\\right)  =  1$.`\n            } else {\n              // inverse non décimal\n              texteCorr = `L'inverse de $${nombreChoisi}$ est $-${texFraction(\n                1,\n                -nombreChoisi\n              )} \\\\:$ car $\\\\: ${nombreChoisi}   \\\\times   \\\\left(-${texFraction(\n                1,\n                -nombreChoisi\n              )}\\\\right) =  1$.`\n            }\n          }\n          texte = `Quel est l'inverse de $${texNombrec(nombreChoisi)}$ ?` + ajouteChampTexteMathLive(this, i, 'largeur10 inline', { texte: sp(5) })\n          setReponse(this, i, new Fraction(1, nombreChoisi), { formatInteractif: 'fractionEgale' })\n          break\n        case 2:\n          couplesDInverses = choice(listeDecimaux)\n          nombreChoisi = couplesDInverses[0]\n          nombreInverseNum = couplesDInverses[1]\n          nombreInverseDen = couplesDInverses[2]\n          if (choice([true, false])) {\n            // nombre positif\n            setReponse(this, i, new Fraction(nombreInverseNum, nombreInverseDen), { formatInteractif: 'fractionEgale' })\n            if (pgcd(nombreInverseNum, nombreInverseDen) === 1) {\n              // non simplifiable après inversion\n              texteCorr = `Comme $${texNombrec(nombreChoisi)}=${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}$, l'inverse de $${texNombrec(\n                nombreChoisi\n              )}$ est $${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\:$ car $\\\\: ${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}   \\\\times   ${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )} =  1$.`\n            } else {\n              // à simplifier après inversion\n              texteCorr = `Comme $${texNombrec(nombreChoisi)}=${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}=${texFractionReduite(\n                nombreInverseDen,\n                nombreInverseNum\n              )}$, l'inverse de $${texNombrec(\n                nombreChoisi\n              )}$ est $${texFractionReduite(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\:$ car $\\\\: ${texFractionReduite(\n                nombreInverseDen,\n                nombreInverseNum\n              )}  \\\\times   ${texFractionReduite(\n                nombreInverseNum,\n                nombreInverseDen\n              )} =  1$.`\n            }\n          } else {\n            // nombre négatif\n            nombreChoisi = -nombreChoisi\n            setReponse(this, i, new Fraction(-nombreInverseNum, nombreInverseDen), { formatInteractif: 'fractionEgale' })\n            if (pgcd(nombreInverseNum, nombreInverseDen) === 1) {\n              // non simplifiable après inversion\n              texteCorr = `L'inverse de $${texNombrec(\n                nombreChoisi\n              )}$ est $-${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\:$ car $\\\\: ${texNombrec(\n                nombreChoisi\n              )}   \\\\times   \\\\left(-${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}\\\\right) =  1$.`\n              texteCorr = `Comme $${texNombrec(\n                nombreChoisi\n              )}=-${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}$, l'inverse de $${texNombrec(\n                nombreChoisi\n              )}$ est $-${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\:$ car $\\\\: -${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}   \\\\times  \\\\left(- ${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}\\\\right) =  1$.`\n            } else {\n              // à simplifier après inversion\n              texteCorr = `Comme $${texNombrec(\n                nombreChoisi\n              )}=-${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}=-${texFractionReduite(\n                nombreInverseDen,\n                nombreInverseNum\n              )}$, l'inverse de $${texNombrec(\n                nombreChoisi\n              )}$ est $-${texFractionReduite(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\:$ car $\\\\: -${texFractionReduite(\n                nombreInverseDen,\n                nombreInverseNum\n              )}  \\\\times  \\\\left(- ${texFractionReduite(\n                nombreInverseNum,\n                nombreInverseDen\n              )} \\\\right)=  1$.`\n            }\n          }\n          texte = `Quel est l'inverse de $${texNombrec(nombreChoisi)}$ ?`\n          break\n        case 3:\n          couplesDInverses = choice(listeFractions)\n          nombreInverseNum = couplesDInverses[0]\n          nombreInverseDen = couplesDInverses[1]\n          if (choice([true, false])) {\n            setReponse(this, i, new Fraction(nombreInverseNum, nombreInverseDen), { formatInteractif: 'fractionEgale' })\n            // fraction positive\n            if (couplesDInverses[2] === true) {\n              // inverse décimal\n              texteCorr = `L'inverse de $${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}$ est $${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}=${texNombrec(\n                nombreInverseDen / nombreInverseNum\n              )} \\\\:$ car $\\\\: ${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}   \\\\times   ${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )} =  1$.`\n            } else {\n              // inverse non décimal\n              texteCorr = `L'inverse de $${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}$ est $${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )} \\\\:$ car $\\\\: ${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}   \\\\times   ${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )} =  1$.`\n            }\n            texte = `Quel est l'inverse de $${texFraction(\n              nombreInverseNum,\n              nombreInverseDen\n            )}$ ?`\n          } else {\n            // fraction négative\n            setReponse(this, i, new Fraction(-nombreInverseNum, nombreInverseDen), { formatInteractif: 'fractionEgale' })\n            if (couplesDInverses[2] === true) {\n              // inverse décimal\n              texteCorr = `L'inverse de $-${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}$ est $-${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}=-${texNombrec(\n                nombreInverseDen / nombreInverseNum\n              )} \\\\:$ car $\\\\: -${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}   \\\\times  \\\\left(- ${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )}\\\\right) =  1$.`\n            } else {\n              // inverse non décimal\n              texteCorr = `L'inverse de $-${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}$ est $-${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )} \\\\:$ car $\\\\: -${texFraction(\n                nombreInverseNum,\n                nombreInverseDen\n              )}   \\\\times  \\\\left(- ${texFraction(\n                nombreInverseDen,\n                nombreInverseNum\n              )} \\\\right)=  1$.`\n            }\n            texte = `Quel est l'inverse de $-${texFraction(\n              nombreInverseNum,\n              nombreInverseDen\n            )}$ ?`\n          }\n\n          break\n      }\n\n      if (this.questionJamaisPosee(i, typesDeQuestions, nombreChoisi)) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    4,\n    '1 : Nombres entiers\\n 2 : Fractions\\n 3 : Nombres décimaux\\n 4 : Mélange des 3 niveaux'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","ExerciceTrouverInverse","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","listeEntiers","listeDecimaux","listeFractions","couplesDInverses","parseInt","listeTypeDeQuestions","combinaisonListes","nombreChoisi","nombreInverse","nombreInverseNum","nombreInverseDen","texte","texteCorr","typesDeQuestions","i","cpt","choice","texNombrec","texFraction","ajouteChampTexteMathLive","sp","setReponse","Fraction","formatInteractif","pgcd","texFractionReduite","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}