{"version":3,"file":"js/93383.d189e8fa279a8b5e1123.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G10-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { combinaisonListes, listeQuestionsToContenu, randint, choice, creerNomDePolygone, calcul } from '../../modules/outils.js'\nimport { mathalea2d, point, tracePointSurDroite, droite, demiDroite, labelPoint, segment } from '../../modules/2d.js'\n\nexport const titre = 'Donner description et notation de droites, segments et demi-droites'\n\n/**\n * Utiliser les notations des segments, droites et demi-droites\n * @author Rémi Angot\n * Référence 6G10-1\n */\nexport default function DescriptionSegmentDroiteDemiDroite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Faire une phrase pour décrire le plus précisément possible la figure et donner sa notation mathématique.'\n  this.nbQuestions = 3\n  this.nbCols = 3\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    const typesDeQuestionsDisponibles = [1, 4, choice([2, 3])]\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const p = creerNomDePolygone(2, 'P')\n      const A = point(0, calcul(randint(0, 20) / 10), p[0])\n      const B = point(4, calcul(randint(0, 20) / 10), p[1])\n      const t1 = tracePointSurDroite(A, B)\n      const t2 = tracePointSurDroite(B, A)\n      function creerDroiteDemiSegment (A, B) {\n        let trait, correction\n        switch (listeTypeDeQuestions[i]) {\n          case 1:\n            trait = droite(A, B)\n            correction = `La droite qui passe par les points $${A.nom}$ et $${B.nom}$ notée $(${A.nom}${B.nom})$.`\n            break\n          case 2:\n            trait = demiDroite(A, B)\n            correction = `La demi-droite d'origine $${A.nom}$ passant par $${B.nom}$ notée $[${A.nom}${B.nom})$.`\n            break\n          case 3:\n            trait = demiDroite(B, A)\n            correction = `La demi-droite d'origine $${B.nom}$ passant par $${A.nom}$ notée $[${A.nom}${B.nom})$.`\n            break\n          case 4:\n            trait = segment(A, B)\n            correction = `Le segment d'extrémités $${A.nom}$ et $${B.nom}$ noté $[${A.nom}${B.nom}]$.`\n            break\n        }\n        return [trait, correction]\n      }\n      const [dAB, dABCorr] = creerDroiteDemiSegment(A, B)\n      const labels = labelPoint(A, B)\n      texte = mathalea2d(\n        { xmin: -2, ymin: -1, xmax: 7, ymax: 3, pixelsParCm: 40, scale: 0.6 },\n        dAB,\n        t1,\n        t2,\n        labels\n      )\n      texteCorr = dABCorr\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","DescriptionSegmentDroiteDemiDroite","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","autoCorrection","typesDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","p","creerNomDePolygone","A","point","calcul","randint","B","t1","tracePointSurDroite","t2","creerDroiteDemiSegment","trait","correction","droite","nom","demiDroite","segment","dAB","dABCorr","labels","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}