{"version":3,"file":"js/34169.0ccfa4495082adb76cf4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4I1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, shuffle, calcul, texteEnCouleur, combinaisonListes } from '../../modules/outils.js'\nimport { creerLutin, avance, baisseCrayon, leveCrayon, tournerD, allerA, mathalea2d, scratchblock } from '../../modules/2d.js'\n\nexport const titre = 'Dessiner avec scratch'\n\n/**\n * * Dessiner selon un programme scratch\n * * 4Algo1-0\n * @author Sébastien Lozano\n * mise à plat du big ouaille suite au passage à la V2\n * implémentation fonction scratchblock par Jean-Claude Lhote\n * la fonction gère la sortie Latex ou html du code scratch\n */\n\nexport default function TracerAvecScratch () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Laquelle des 4 figures ci-dessous va être tracée avec le script fourni ?'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.listePackages = 'scratch3'\n  this.typeExercice = 'Scratch'\n\n  let typesDeQuestionsDisponibles\n  this.nbQuestions = 3\n  this.debug = false\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    } else {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const fenetreMathalea2D = { xmin: -10, ymin: -15, xmax: 60, ymax: 2, pixelsParCm: 10, scale: 0.2 }\n    const pixelsParCm = fenetreMathalea2D.pixelsParCm * 5// 100;\n    //    var unitesLutinParCm = 100;\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    // let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour gérer la sortie HTML/LaTeX\n      // code est un string contenant le code svg ou tikz\n\n      // une fonction pour dire le nom du polygone\n      function myPolyName (n) {\n        const sortie = {\n          name: '',\n          nameParSommets: '',\n          nbPas: ''\n        }\n        switch (n) {\n          case 2:\n            sortie.name = 'segment'\n            sortie.nameParSommets = 'AB'\n            sortie.nbPas = 400\n            break\n          case 3:\n            sortie.name = 'triangle équilatéral'\n            sortie.nameParSommets = 'ABC'\n            sortie.nbPas = 400\n            break\n          case 4:\n            sortie.name = 'carré'\n            sortie.nameParSommets = 'ABCD'\n            sortie.nbPas = 400\n            break\n          case 5:\n            sortie.name = 'pentagone régulier'\n            sortie.nameParSommets = 'ABCDE'\n            sortie.nbPas = 300\n            break\n          case 6:\n            sortie.name = 'hexagone régulier'\n            sortie.nameParSommets = 'ABCDEF'\n            sortie.nbPas = 250\n            break\n          case 7:\n            sortie.name = 'heptagone régulier'\n            sortie.nameParSommets = 'ABCDEFG'\n            sortie.nbPas = 200\n            break\n          case 8:\n            sortie.name = 'octogone régulier'\n            sortie.nameParSommets = 'ABCDEFGH'\n            sortie.nbPas = 200\n            break\n          case 9:\n            sortie.name = 'ennéagone régulier'\n            sortie.nameParSommets = 'ABCDEFGHI'\n            sortie.nbPas = 200\n            break\n        }\n        return sortie\n      }\n\n      // une fonction pour renvoyer une situation\n      // n définit le nombre de côtés du polygone régulier\n      function mySituation (n) {\n        const situations = [\n          { // polygones réguliers\n            nbCotes: n,\n            nom: myPolyName(n).name,\n            codeScratch: `\\\\begin{scratch}\n\\\\blockinit{quand \\\\greenflag est cliqué}\n\\\\blockpen{stylo en position d’écriture} \n\\\\blockrepeat{répéter \\\\ovalnum{${n}} fois}\n{\n\\\\blockmove{avancer de \\\\ovalnum{${myPolyName(n).nbPas}} pas}\n\\\\blockmove{tourner \\\\turnright{} de \\\\ovaloperator{\\\\ovalnum{360}/\\\\ovalnum{${n}}} degrés}\n}\n\\\\end{scratch}`,\n            fig: '',\n            fig_corr: ''\n          }\n        ]\n\n        let tabAbsDemLutin2\n        if (n === 6) {\n          tabAbsDemLutin2 = [0, 3 * myPolyName(n).nbPas, 6 * myPolyName(n).nbPas, 9 * myPolyName(n).nbPas]\n        } else if (n === 8) {\n          tabAbsDemLutin2 = [0, 4 * myPolyName(n).nbPas, 8 * myPolyName(n).nbPas, 12 * myPolyName(n).nbPas]\n        } else {\n          tabAbsDemLutin2 = [0, 2 * myPolyName(n).nbPas, 4 * myPolyName(n).nbPas, 6 * myPolyName(n).nbPas]\n        };\n        // on mélange tout ça !\n        tabAbsDemLutin2 = shuffle(tabAbsDemLutin2)\n        // Les figures de l'énoncé\n        // le lutin2  trace le cadre en pointillés\n        const lutin2 = creerLutin()\n        lutin2.color = 'black'\n        lutin2.pointilles = true\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin2)\n        baisseCrayon(lutin2)\n        allerA(fenetreMathalea2D.xmax * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin2)\n        allerA(fenetreMathalea2D.xmax * pixelsParCm, fenetreMathalea2D.ymin * pixelsParCm, lutin2)\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymin * pixelsParCm, lutin2)\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin2)\n        leveCrayon(lutin2)\n        // le lutin2 fait la bonne figure\n        lutin2.pointilles = false\n        lutin2.color = 'blue'\n        allerA(tabAbsDemLutin2[0], 0, lutin2)\n        baisseCrayon(lutin2)\n        for (let k = 1; k < n + 1; k++) {\n          avance(myPolyName(n).nbPas, lutin2)\n          tournerD(calcul(360 / n), lutin2)\n        };\n        // le lutin2 fait un polygone régulier avec un côté de plus\n        leveCrayon(lutin2)\n        allerA(tabAbsDemLutin2[1], 0, lutin2)\n        baisseCrayon(lutin2)\n        for (let k = 1; k < n + 1 + 1; k++) {\n          avance(myPolyName(n + 1).nbPas, lutin2)\n          tournerD(calcul(360 / (n + 1)), lutin2)\n        };\n\n        // le lutin2 fait un polygone régulier avec un côté de moins\n        leveCrayon(lutin2)\n        allerA(tabAbsDemLutin2[2], 0, lutin2)\n        baisseCrayon(lutin2)\n        for (let k = 1; k < n; k++) {\n          avance(myPolyName(n - 1).nbPas, lutin2)\n          tournerD(calcul(360 / (n - 1)), lutin2)\n        };\n\n        // le lutin2 fait une figure ouverte à n côtés\n        leveCrayon(lutin2)\n        allerA(tabAbsDemLutin2[3], 0, lutin2)\n        baisseCrayon(lutin2)\n        for (let k = 1; k < n + 1; k++) {\n          avance(myPolyName(n).nbPas, lutin2)\n          tournerD(calcul((360 / n) - 10), lutin2)\n        };\n        allerA(tabAbsDemLutin2[3], 0, lutin2)\n\n        const mesAppelsEnonce = [\n          lutin2\n        ]\n        situations[0].fig = mathalea2d(\n          fenetreMathalea2D,\n          mesAppelsEnonce\n        )\n\n        // les figures de la correction\n        // le lutin3  trace le cadre\n        const lutin3 = creerLutin()\n        lutin3.color = 'black'\n        lutin3.pointilles = true\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin3)\n        baisseCrayon(lutin3)\n        allerA(fenetreMathalea2D.xmax * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin3)\n        allerA(fenetreMathalea2D.xmax * pixelsParCm, fenetreMathalea2D.ymin * pixelsParCm, lutin3)\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymin * pixelsParCm, lutin3)\n        allerA(fenetreMathalea2D.xmin * pixelsParCm, fenetreMathalea2D.ymax * pixelsParCm, lutin3)\n        leveCrayon(lutin3)\n        // le lutin3 fait la bonne figure\n        lutin3.pointilles = false\n        lutin3.color = 'green'\n        allerA(tabAbsDemLutin2[0], 0, lutin3)\n        baisseCrayon(lutin3)\n        for (let k = 1; k < n + 1; k++) {\n          avance(myPolyName(n).nbPas, lutin3)\n          tournerD(calcul(360 / n), lutin3)\n        };\n        // le lutin3 fait un polygone régulier avec un côté de plus\n        lutin3.color = 'red'\n        leveCrayon(lutin3)\n        allerA(tabAbsDemLutin2[1], 0, lutin3)\n        baisseCrayon(lutin3)\n        for (let k = 1; k < n + 1 + 1; k++) {\n          avance(myPolyName(n + 1).nbPas, lutin3)\n          tournerD(calcul(360 / (n + 1)), lutin3)\n        };\n\n        // le lutin3 fait un polygone régulier avec un côté de moins\n        leveCrayon(lutin3)\n        allerA(tabAbsDemLutin2[2], 0, lutin3)\n        baisseCrayon(lutin3)\n        for (let k = 1; k < n; k++) {\n          avance(myPolyName(n - 1).nbPas, lutin3)\n          tournerD(calcul(360 / (n - 1)), lutin3)\n        };\n\n        // le lutin3 fait une figure ouverte à n côtés\n        leveCrayon(lutin3)\n        allerA(tabAbsDemLutin2[3], 0, lutin3)\n        baisseCrayon(lutin3)\n        for (let k = 1; k < n + 1; k++) {\n          avance(myPolyName(n).nbPas, lutin3)\n          tournerD(calcul((360 / n) - 10), lutin3)\n        };\n        allerA(tabAbsDemLutin2[3], 0, lutin3)\n\n        const mesAppelsCorr = [\n          lutin3\n        ]\n        situations[0].fig_corr = mathalea2d(\n          fenetreMathalea2D,\n          mesAppelsCorr\n        )\n\n        const enonces = []\n        enonces.push({\n          enonce: `\n          ${scratchblock(situations[0].codeScratch)}\n          <br> \n          ${situations[0].fig}\n          `,\n          question: '',\n          correction: `\n          <br> Les figures rouges sont erronées.\n          <br> La figure tracée par le programme a ${situations[0].nbCotes} côtés de même longueur et ${situations[0].nbCotes} angles de même mesure, c'est un ${situations[0].nom}.\n          <br>${texteEnCouleur('La bonne figure est donc la figure verte.')}\n          <br><br>\n          ${situations[0].fig_corr}\n          `\n        })\n\n        return enonces\n      }\n\n      const enonces = []\n      enonces.push(mySituation(3)[0])\n      enonces.push(mySituation(4)[0])\n      enonces.push(mySituation(5)[0])\n      enonces.push(mySituation(6)[0])\n      enonces.push(mySituation(8)[0])\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[1].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n        case 3:\n          texte = `${enonces[2].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[2].correction}`\n          };\n          break\n        case 4:\n          texte = `${enonces[3].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[3].correction}`\n          };\n          break\n        case 5:\n          texte = `${enonces[4].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[4].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TracerAvecScratch","typesDeQuestionsDisponibles","Exercice","this","consigne","nbCols","nbColsCorr","listePackages","typeExercice","nbQuestions","debug","nouvelleVersion","listeQuestions","listeCorrections","fenetreMathalea2D","xmin","ymin","xmax","ymax","pixelsParCm","scale","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","myPolyName","n","sortie","name","nameParSommets","nbPas","mySituation","situations","nbCotes","nom","codeScratch","fig","fig_corr","tabAbsDemLutin2","shuffle","lutin2","creerLutin","color","pointilles","allerA","baisseCrayon","leveCrayon","k","avance","tournerD","calcul","mesAppelsEnonce","mathalea2d","lutin3","mesAppelsCorr","enonces","push","enonce","scratchblock","question","correction","texteEnCouleur","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}