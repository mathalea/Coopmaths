{"version":3,"file":"js/9851.6225b1bd9fdab55b3c89.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G10-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { combinaisonListes, lettreDepuisChiffre, listeQuestionsToContenu, randint, shuffle } from '../../modules/outils.js'\nimport { demiDroite, droite, labelPoint, mathalea2d, point, segmentAvecExtremites } from '../../modules/2d.js'\nexport const titre = 'Choisir la bonne figure'\nexport const interactifReady = true\nexport const interactifType = 'cliqueFigure'\n\n/**\n * Plusieurs éléments sont proposés, il faut cliquer sur le bon\n * @author ANGOT Rémi\n * Référence\n*/\nexport default function cliqueFigure () {\n  Exercice.call(this)\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.interactif = true\n\n  this.nouvelleVersion = function () {\n    this.consigne = (this.interactif) ? 'Cliquer sur la bonne figure.' : 'Entourer la bonne figure.'\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.figures = [] // Liste des objets de toutes les figures sur lesquelles on pourra cliquer avec leur id et un booléen de réponse\n    const typesDeQuestions = combinaisonListes(['segment', 'droite', 'demidroite', 'demidroite2'], this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const numeroLettre = randint(1, 20)\n      const A = point(0, 0)\n      const B = point(4, randint(-1, 3))\n      A.nom = lettreDepuisChiffre(numeroLettre)\n      B.nom = lettreDepuisChiffre(numeroLettre + 1)\n      const labels = labelPoint(A, B)\n      this.figures[i] = [{ id: `figure0Ex${this.numeroExercice}Q${i}`, solution: false },\n        { id: `figure1Ex${this.numeroExercice}Q${i}`, solution: false },\n        { id: `figure2Ex${this.numeroExercice}Q${i}`, solution: false },\n        { id: `figure3Ex${this.numeroExercice}Q${i}`, solution: false }\n      ]\n      switch (typesDeQuestions[i]) {\n        case 'segment':\n          texte = `Le segment d'extrémités $${A.nom}$ et $${B.nom}$.`\n          this.figures[i][0].solution = true\n          break\n        case 'droite':\n          texte = `La droite passant par les points $${A.nom}$ et $${B.nom}$.`\n          this.figures[i][1].solution = true\n          break\n        case 'demidroite':\n          texte = `La demi-droite d'origine $${A.nom}$ passant par $${B.nom}$.`\n          this.figures[i][2].solution = true\n          break\n        case 'demidroite2':\n          texte = `La demi-droite d'origine $${B.nom}$ passant par $${A.nom}$.`\n          this.figures[i][3].solution = true\n          break\n      }\n\n      texte += '<br>'\n      const figSegment = mathalea2d({ xmin: -2, xmax: 6, ymin: -2, style: '', id: `figure0Ex${this.numeroExercice}Q${i}` }, labels, segmentAvecExtremites(A, B))\n      const figDroite = mathalea2d({ xmin: -2, xmax: 6, ymin: -2, style: '', id: `figure1Ex${this.numeroExercice}Q${i}` }, labels, segmentAvecExtremites(A, B), droite(A, B))\n      const figDemiDroite = mathalea2d({ xmin: -2, xmax: 6, ymin: -2, style: '', id: `figure2Ex${this.numeroExercice}Q${i}` }, labels, segmentAvecExtremites(A, B), demiDroite(A, B))\n      const figDemiDroite2 = mathalea2d({ xmin: -2, xmax: 6, ymin: -2, style: '', id: `figure3Ex${this.numeroExercice}Q${i}` }, labels, segmentAvecExtremites(A, B), demiDroite(B, A))\n      const figures = shuffle([figSegment, figDroite, figDemiDroite, figDemiDroite2])\n      texte += figures.join('')\n      texte += `<span id=\"resultatCheckEx${this.numeroExercice}Q${i}\"></span>`\n      texteCorr = mathalea2d({ xmin: -4, xmax: 6, ymin: -1, style: '', id: `figure3Ex${this.numeroExercice}Q${i}` }, labels, segmentAvecExtremites(A, B), segmentAvecExtremites(A, B))\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","cliqueFigure","Exercice","this","nbQuestions","nbCols","nbColsCorr","interactif","nouvelleVersion","consigne","listeQuestions","listeCorrections","figures","typesDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","numeroLettre","randint","A","point","B","nom","lettreDepuisChiffre","labels","labelPoint","id","numeroExercice","solution","figSegment","mathalea2d","xmin","xmax","ymin","style","segmentAvecExtremites","figDroite","droite","figDemiDroite","demiDroite","figDemiDroite2","shuffle","join","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}