/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_5e_5G40_js-node_modules_pnpm_framagit_org_Sesamath_instrumenpoche_9897363c7a-69dc5f"],{

/***/ "./src/js/exercices/5e/5G40.js":
/*!*************************************!*\
  !*** ./src/js/exercices/5e/5G40.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Constructions_parallelogrammes)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n/* harmony import */ var _modules_Alea2iep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../modules/Alea2iep.js */ \"./src/js/modules/Alea2iep.js\");\n\n\n\n\n\nconst titre = 'Construire des parallélogrammes avec dispositif d’auto-correction'\n\n/**\n * Terminer la construction d'un parallélogramme\n * Ref 5G40\n * @Auteur Jean-Claude Lhote (exercice) et Rémi Angot (animations)\n * Publié le 30/11/2020\n */\nfunction Constructions_parallelogrammes () {\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nb_questions = 1\n  this.nb_questions_modifiable = false\n  this.nb_cols = 1\n  this.nb_cols_corr = 1\n  this.sup = 5\n  this.correction_detaillee = false\n  this.correction_detaillee_disponible = true\n  this.type_exercice = 'IEP'\n  this.nouvelle_version = function (numeroExercice) {\n    this.liste_questions = [] // Liste de questions\n    this.liste_corrections = [] // Liste de questions corrigées\n    let texte = ''\n    let texte_corr = ''\n    const celluleAlea = function (rang) {\n      const lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.lettre_depuis_chiffre)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, rang))\n      const chiffre = Number((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, rang)).toString()\n      return lettre + chiffre\n    }\n    // On prépare la figure...\n    const noms = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choisit_lettres_differentes)(5, 'QO', true) // on choisit 5 lettres, les 4 premières sont les sommets, la 5e est le centre\n    let type_de_question\n    if (this.sup < 5) type_de_question = parseInt(this.sup)\n    else type_de_question = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 4)\n    const nom = `${noms[0] + noms[1] + noms[2] + noms[3]}`\n    const objets_enonce = []\n    const objets_correction = []\n    // Préparation de la figure aléatoire et des objets 2d utiles\n    const O = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.point)(0, 0, noms[4])\n    const A = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.rotation)((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointAdistance)(O, (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(50, 70) / 10)), O, (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 179) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([-1, 1]), noms[0])\n    const C = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.rotation)(A, O, 180, noms[2])\n    const B = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.similitude)(A, O, (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(40, 80) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([-1, 1]), (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(4, 7, 5) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([-1, 1]) / 5, noms[1])\n    const D = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.rotation)(B, O, 180, noms[3])\n    const p = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneAvecNom)(A, B, C, D)\n    const d1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, A)\n    const d2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, B)\n    const d3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, C)\n    const d4 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, D)\n    const c1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(A, B)\n    const c2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(B, C)\n    const c3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(C, D)\n    const c4 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(D, A)\n    const dd1 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.droite)(A, B)\n    const dd2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.droite)(A, D)\n    const dd3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.droite)(C, D)\n    const dd4 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.droite)(C, B)\n    const cellule = celluleAlea(5)\n    const cellule2 = celluleAlea(5)\n    const cellule3 = celluleAlea(5)\n\n    const result = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.dansLaCibleCarree)(C.x, C.y, 5, 0.5, cellule)\n    const result2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.dansLaCibleCarree)(D.x, D.y, 5, 0.5, cellule2)\n    const result3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.dansLaCibleCarree)(B.x, B.y, 5, 0.5, cellule3)\n\n    const cible = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.cibleCarree)({ x: result[0], y: result[1], rang: 5, num: 1, taille: 0.5 })\n    cible.color = 'gray'\n    cible.opacite = 0.7\n    const cible2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.cibleCarree)({ x: result2[0], y: result2[1], rang: 5, num: 2, taille: 0.5 })\n    cible2.color = 'gray'\n    cible2.opacite = 0.7\n    const cible3 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.cibleCarree)({ x: result3[0], y: result3[1], rang: 5, num: 3, taille: 0.5 })\n    cible3.color = 'gray'\n    cible3.opacite = 0.7\n    const xMin = Math.min(A.x, B.x, C.x, D.x) - 3\n    const yMin = Math.min(A.y, B.y, C.y, D.y) - 3\n    const xMax = Math.max(A.x, B.x, C.x, D.x) + 3\n    const yMax = Math.max(A.y, B.y, C.y, D.y) + 3\n\n    let P\n    const animIEP = new _modules_Alea2iep_js__WEBPACK_IMPORTED_MODULE_3__.default()\n    animIEP.recadre(xMin, yMax) // Il faut recadrer en première étape pour bien calculer les coordonnées des points\n\n    switch (type_de_question) {\n      case 1: // deux côtés consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texte_corr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correction_detaillee) {\n          texte_corr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texte_corr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texte_corr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texte_corr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texte_corr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texte_corr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n\n        c1.styleExtremites = '-|'\n        c4.styleExtremites = '|-'\n        P = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneAvecNom)(D, A, B)\n        objets_enonce.push(c1, c4, P[1], cible)\n        objets_correction.push(p[0], p[1], cible, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.traceCompas)(D, C, 30), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.traceCompas)(B, C, 30), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('||', 'red', A, B, D, C), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('///', 'blue', A, D, B, C))\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        break\n      case 2: // trois sommets consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texte_corr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correction_detaillee) {\n          texte_corr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texte_corr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texte_corr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texte_corr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texte_corr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texte_corr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n        P = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneAvecNom)(D, A, B)\n        animIEP.pointCreer(D, D.nom, 0)\n        animIEP.pointCreer(A, A.nom, 0)\n        animIEP.pointCreer(B, B.nom, 0)\n        animIEP.regleSegment(D, A)\n        animIEP.regleSegment(A, B)\n        animIEP.regleMasquer(0)\n        animIEP.crayonMasquer(0)\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        objets_enonce.push((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.tracePoint)(A, B, D), P[1], cible)\n        objets_correction.push(p[0], p[1], cible, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.traceCompas)(D, C, 30), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.traceCompas)(B, C, 30), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('||', 'red', A, B, D, C), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('///', 'blue', A, D, B, C))\n\n        break\n      case 3: // deux sommmets consécutifs plus le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre $${noms[4]}$.`\n        texte_corr += `O est le centre de symétrie du parallélogramme $${nom}$.<br>`\n        if (this.correction_detaillee) {\n          texte_corr += `Le point $${noms[3]}$ est le symétrique du point $${noms[1]}$ par rapport à $${noms[4]}$.<br>`\n          texte_corr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n        }\n        texte_corr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texte_corr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        P = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneAvecNom)(O, A, B)\n        animIEP.parallelogramme2sommetsConsecutifsCentre(A, B, O)\n        objets_enonce.push((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.tracePoint)(A, B, O), P[1], cible, cible2)\n        objets_correction.push(p[0], p[1], (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.labelPoint)(O), cible, cible2, d1, d2, d3, d4, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('||', 'red', A, O, O, C), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('|||', 'blue', B, O, O, D))\n\n        break\n      case 4: // Un angle formé par deux demi-droites et le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre ${noms[4]}.`\n        texte += `Le point $${noms[3]}$ est sur la demi-droite $[${noms[0]}x)$ et le point $${noms[1]}$ est sur la demi-droite $[${noms[0]}y)$.<br>`\n        if (this.correction_detaillee) {\n          texte_corr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n          texte_corr += `La symétrique de la droite $(${noms[0] + noms[1]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[1]})$.<br>`\n          texte_corr += `La symétrique de la droite $(${noms[0] + noms[3]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[3]})$.<br>`\n        }\n        texte_corr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texte_corr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        animIEP.regleZoom(200)\n        animIEP.equerreZoom(200)\n        animIEP.parallelogrammeAngleCentre(D, A, B, O)\n        objets_enonce.push(dd1, dd2, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.tracePoint)(O), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.labelPoint)(O, A), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.texteParPoint)('x', (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointIntersectionCC)((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.cercleCentrePoint)(A, D), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.cercle)(D, 0.5), 1)), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.texteParPoint)('y', (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.similitude)(B, A, 4, 1.3)), cible, cible2, cible3)\n        objets_correction.push(dd1, dd2, dd3, dd4, p[0], p[1], (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.tracePoint)(O), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.labelPoint)(O), cible, cible2, cible3, d1, d3, (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codeSegments)('||', 'red', A, O, O, C))\n\n        break\n    }\n    texte += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objets_enonce)\n    texte_corr += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objets_correction)\n    texte_corr += animIEP.htmlBouton(numeroExercice)\n    this.liste_questions.push(texte)\n    this.liste_corrections.push(texte_corr)\n    ;(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this)\n  }\n  this.besoin_formulaire_numerique = ['Type de questions', 5, '1 : Deux côtés consécutifs\\n2 : Trois sommets consécutifs\\n3 : Deux sommets consécutifs et le centre\\n4 : Un angle et le centre\\n5 : Une des configuration au hasard']\n  // this.besoin_formulaire2_case_a_cocher = [\"Avec des points de part et d'autre\"];\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/5e/5G40.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);