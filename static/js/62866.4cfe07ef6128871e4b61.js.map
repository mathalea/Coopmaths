{"version":3,"file":"js/62866.4cfe07ef6128871e4b61.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5R20-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListesSansChangerOrdre, calcul, prenomF, prenomM, texteEnCouleur, texteGras, texPrix, numAlpha } from '../../modules/outils.js'\nexport const titre = 'Résoudre un problème en utilisant une somme algébrique de relatifs'\n\n/**\n * * résoudre un problème additif avec des relatifs\n * * 5R20-4\n * @author Sébastien Lozano\n */\n\nexport default function ProblemesAdditifsRelatifs5e () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.sup = 1\n  if (this.debug) {\n    this.nbQuestions = 1\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.titre = titre\n  this.consigne = ''\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [0]\n    } else {\n      //   typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = [0]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    // typesDeQuestionsDisponibles=[1];\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let gainPerteUnitaire // pour le gain/perte unitaire\n      let gainMultiple // pour le gain multiple\n      // on veut des multiples de 5 pour n'avoir que des demis entiers ou des entiers\n      do {\n        gainPerteUnitaire = randint(10, 30)\n        gainMultiple = randint(10, 30)\n      } while (gainPerteUnitaire % 5 !== 0 || gainMultiple % 5 !== 0 || gainMultiple <= gainPerteUnitaire)\n\n      const nombreTotalDeLancers = randint(10, 15) // nombre totale de lancers\n      let nombreDeGainsUnitaires // nb de gains untitaires\n      let nombreDePertes // nb de pertes\n      do {\n        nombreDeGainsUnitaires = randint(2, 10)\n        nombreDePertes = randint(2, 10)\n      } while (nombreDeGainsUnitaires + nombreDePertes >= nombreTotalDeLancers)\n\n      // on échange parfois le nombre de gain unitaire et le nombre de perte pour avoir un bilan négatif plus souvent\n      if (nombreDePertes < nombreDeGainsUnitaires) {\n        if (randint(0, 1) === 0) {\n          const temp = nombreDePertes\n          nombreDePertes = nombreDeGainsUnitaires\n          nombreDeGainsUnitaires = temp\n        };\n      };\n\n      const prenoms = [[prenomF(), 'Elle', 'elle'], [prenomM(), 'Il', 'il']]\n      const currentPrenom = choice(prenoms)\n\n      // une fonction pour écrire les chaine correctives\n      function myGainPerteString (nb, type, valeur) {\n        let sortie = ''\n        switch (type) {\n          case 'gain':\n            sortie = `(+${texPrix(valeur)}$€$)`\n            for (let m = 1; m < nb; m++) {\n              sortie += `+(+${texPrix(valeur)}$€$)`\n            };\n            break\n          case 'perte':\n            sortie = `(-${texPrix(valeur)}$€$)`\n            for (let m = 1; m < nb; m++) {\n              sortie += `+(-${texPrix(valeur)}$€$)`\n            };\n            break\n        };\n        return sortie\n      }\n\n      // une fonction pour dire si le bilan est positif ou négatif\n      function isBilanPositif (tot) {\n        if (tot >= 0) {\n          return true\n        } else {\n          return false\n        };\n      };\n\n      let bilan\n      if (isBilanPositif(calcul((nombreTotalDeLancers - nombreDeGainsUnitaires - nombreDePertes) * calcul(gainMultiple / 10)) + calcul(nombreDeGainsUnitaires * calcul(gainPerteUnitaire / 10)) - calcul(nombreDePertes * calcul(gainPerteUnitaire / 10)))) {\n        bilan = ['Globalement, le montant des gains', 'est supérieur au montant des pertes', `${texteEnCouleur('Le bilan est donc positif.')}`, 'a gagné', texPrix(calcul((nombreTotalDeLancers - nombreDeGainsUnitaires - nombreDePertes) * calcul(gainMultiple / 10)) + calcul(nombreDeGainsUnitaires * calcul(gainPerteUnitaire / 10)) - calcul(nombreDePertes * calcul(gainPerteUnitaire / 10)))]\n      } else {\n        bilan = ['Globalement, le montant des gains', 'est inférieur au montant des pertes', `${texteEnCouleur('Le bilan est donc négatif.')}`, 'a perdu', texPrix((-1) * (calcul((nombreTotalDeLancers - nombreDeGainsUnitaires - nombreDePertes) * calcul(gainMultiple / 10)) + calcul(nombreDeGainsUnitaires * calcul(gainPerteUnitaire / 10)) - calcul(nombreDePertes * calcul(gainPerteUnitaire / 10))))]\n      }\n      // pour les situations\n      const situations = [\n        { // case 0 --> les quilles\n          nb_tot_lancers: nombreTotalDeLancers,\n          nb_gains_unitaires: nombreDeGainsUnitaires,\n          nb_pertes: nombreDePertes,\n          nb_gains: nombreTotalDeLancers - nombreDeGainsUnitaires - nombreDePertes,\n          perte: calcul(gainPerteUnitaire / 10),\n          gain_unitaire: calcul(gainPerteUnitaire / 10),\n          gain_multiple: calcul(gainMultiple / 10),\n          enonce_1: 'lancer une balle sur des quilles.',\n          enonce_2: '- Si la balle touche plusieurs quilles, le joueur gagne ',\n          enonce_3: '- Si la balle ne touche qu\\'une quille, le joueur gagne ',\n          enonce_4: '- Si la balle ne touche aucune quille, le joueur perd ',\n          enonce_5: 'a lancé',\n          enonce_6: 'la balle',\n          correction_1: 'touché plusieurs quilles',\n          correction_2: 'touché qu\\'une seule quille',\n          prenom: currentPrenom[0], // prenoms[choice([0,1])][0],\n          pronomMaj: currentPrenom[1], // prenoms[choice([0,1])][1],\n          pronomMin: currentPrenom[2], // prenoms[choice([0,1])][2],\n          bilan: bilan\n        }\n      ]\n\n      const enonces = []\n      let indexSousQuestion\n      let indexSousQuestionCorr\n      for (let k = 0; k < situations.length; k++) {\n        indexSousQuestion = 0\n        indexSousQuestionCorr = 0\n        enonces.push({\n          enonce: `\nUn jeu consiste à ${situations[k].enonce_1}\n<br>${situations[0].enonce_2} $${texPrix(situations[0].gain_multiple)}$€.\n<br>${situations[0].enonce_3} $${texPrix(situations[0].gain_unitaire)}$€.\n<br>${situations[0].enonce_4} $${texPrix(situations[0].perte)}$€.\n<br>${situations[k].prenom} ${situations[k].enonce_5} $${situations[k].nb_tot_lancers}$ fois ${situations[k].enonce_6}.\n${situations[k].pronomMaj} a perdu de l'argent $${situations[k].nb_pertes}$ fois et a gagné $${situations[k].nb_gains_unitaires}$ fois $${texPrix(situations[k].gain_unitaire)}$€.\n<br> ${numAlpha(indexSousQuestion++)} A-t-${situations[k].pronomMin} globalement gagné ou perdu de l'argent ?\n<br> ${numAlpha(indexSousQuestion++)} Combien a-t-${situations[k].pronomMin} globalement gagné ou perdu ?\n`,\n          question: '',\n          correction: `\n${situations[k].prenom} ${situations[k].enonce_5} $${situations[k].nb_tot_lancers}$ fois ${situations[k].enonce_6},\nsur les $${situations[k].nb_tot_lancers}$ lancers, on sait combien de fois ${situations[k].pronomMin} a perdu de l'argent et combien de fois ${situations[k].pronomMin} a gagné $${texPrix(situations[k].gain_unitaire)}$€, les autres lancers correspondent donc au nombre de fois où ${situations[k].pronomMin} a ${situations[k].correction_1} et qu'${situations[k].pronomMin} a gagné $${texPrix(situations[k].gain_multiple)}$€ \n<br> $${situations[k].nb_tot_lancers}-${situations[k].nb_pertes}-${situations[k].nb_gains_unitaires} = ${situations[k].nb_tot_lancers - situations[k].nb_pertes - situations[k].nb_gains_unitaires}$,\n${situations[k].pronomMin} a donc ${situations[k].correction_1} $${situations[k].nb_gains}$ fois.\n\n<br>${texteGras(`Gains lorsqu'${situations[k].pronomMin} a ${situations[k].correction_1} :`)}\n<br>$${myGainPerteString(situations[k].nb_gains, 'gain', situations[k].gain_multiple)} = ${situations[k].nb_gains}\\\\times (+${texPrix(situations[k].gain_multiple)}$€$) = +${texPrix(situations[k].nb_gains * situations[k].gain_multiple)}$€\n\n<br>${texteGras(`Gains lorsqu'${situations[k].pronomMin} n'a ${situations[k].correction_2} :`)}\n<br>$${myGainPerteString(situations[k].nb_gains_unitaires, 'gain', situations[k].gain_unitaire)} = ${situations[k].nb_gains_unitaires}\\\\times (+${texPrix(situations[k].gain_unitaire)}$€$) = +${texPrix(situations[k].nb_gains_unitaires * situations[k].gain_unitaire)}$€\n\n<br>${texteGras('Pertes :')}\n<br>$${myGainPerteString(situations[k].nb_pertes, 'perte', situations[k].perte)} = ${situations[k].nb_pertes}\\\\times (-${texPrix(situations[k].perte)}$€$) = -${texPrix(situations[k].nb_pertes * situations[k].perte)}$€\n\n<br>${numAlpha(indexSousQuestionCorr++)} ${situations[k].bilan[0]}, $(+${texPrix(situations[k].nb_gains * situations[k].gain_multiple)}$€$)$ et $(+${texPrix(situations[k].nb_gains_unitaires * situations[k].gain_unitaire)}$€$)$, ${situations[k].bilan[1]}, $(-${texPrix(situations[k].nb_pertes * situations[k].perte)}$€$)$.\n<br> ${situations[k].bilan[2]}   \n\n<br>${numAlpha(indexSousQuestionCorr++)} \n$(+${texPrix(situations[k].nb_gains * situations[k].gain_multiple)}$€$)+(+${texPrix(situations[k].nb_gains_unitaires * situations[k].gain_unitaire)}$€$)+(-${texPrix(situations[k].nb_pertes * situations[k].perte)}$€$) = (${texPrix(situations[k].nb_gains * situations[k].gain_multiple + situations[k].nb_gains_unitaires * situations[k].gain_unitaire - situations[k].nb_pertes * situations[k].perte)}$€$)$\n<br>${texteEnCouleur(`Globalement ${situations[k].prenom} ${situations[k].bilan[3]} $${situations[k].bilan[4]}$€`)} \n\n`\n        })\n      };\n\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  // this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\n};\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ProblemesAdditifsRelatifs5e","typesDeQuestionsDisponibles","Exercice","this","debug","sup","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","gainPerteUnitaire","gainMultiple","randint","nombreTotalDeLancers","nombreDeGainsUnitaires","nombreDePertes","temp","prenoms","prenomF","prenomM","currentPrenom","choice","myGainPerteString","nb","type","valeur","sortie","texPrix","m","bilan","calcul","texteEnCouleur","situations","nb_tot_lancers","nb_gains_unitaires","nb_pertes","nb_gains","perte","gain_unitaire","gain_multiple","enonce_1","enonce_2","enonce_3","enonce_4","enonce_5","enonce_6","correction_1","correction_2","prenom","pronomMaj","pronomMin","enonces","indexSousQuestion","indexSousQuestionCorr","k","length","push","enonce","numAlpha","question","correction","texteGras","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}