{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G25-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Pavage_et_reflexion2d","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetaillee","correctionDetailleeDisponible","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","P1","P2","P3","t","videcouples","tableau","k","length","j","splice","comparenbsommets","poly1","poly2","listePoints","compare2sommets","sommet1","sommet2","egal","x","y","comparesommets","trouve","trouves","P","M","refleccion","pavage","d","numero","pol","poly","polygones","sympoly","symetrieAxiale","objets","objetsCorrection","codes","taillePavage","parseInt","listeCorrections","listeQuestions","Nx","Ny","index1","index2","A","B","image","monpavage","fenetre","nombreTentatives","couples","tailles","texte","texteCorr","type_de_pavage","nombrePavageTestes","randint","construit","xmin","ymin","xmax","ymax","Math","floor","nb_polygones","ceil","mediatrice","epaisseur","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","barycentres","tracesCentres","mathalea2d","color","texcolors","couleurDeRemplissage","opaciteDeRemplissage","symetrieAnimee","tracePoint","segment","codageMediatrice","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/3905.621581e7f0ec325104aa.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,egal,randint,shuffle,nombreAvecEspace,texcolors} from '../../modules/outils.js'\nimport {tracePoint,mediatrice,codageMediatrice,segment,symetrieAxiale,symetrieAnimee,texteParPosition,mathalea2d,pavage} from '../../modules/2d.js'\nexport const titre = 'Trouver l’image d’une figure par une symétrie axiale dans un pavage'\n\n/**\n * @author Jean-Claude Lhote\n * publié le 14/12/2020\n * Réf : 6G25-3\n * Trouver une figure symétrique dans un pavage. Symétrie axiale. 6 pavages différents.\n */\nexport default function Pavage_et_reflexion2d() {\n  \"use strict\";\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"\";\n  this.nbQuestions = 3;\n  this.nbQuestionsModifiable = true;\n  this.correctionDetaillee=true;\n  this.correctionDetailleeDisponible=true;\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.sup = 1; // 1 pour des pavages modestes, 2 pour des plus grand.\n  this.sup2=false // On cache les centres par défaut.\n  this.sup3=7;\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5);\n  this.nouvelleVersion = function () {\n    let videcouples=function(tableau){\n      for (let k=0;k<tableau.length;k++){\n        for (let j=k+1;j<tableau.length;j++){\n          if (tableau[k][1]==tableau[j][0]) {\n            tableau.splice(j,1)\n          }\n        }\n      }\n      return tableau\n    }\n    let compare2polys=function(poly1,poly2){\n      if (comparenbsommets(poly1,poly2)) {\n        if (comparesommets(poly1,poly2)) \n          return true\n        else\n          return false\n      }\n      else \n        return false \n      }\n      let comparenbsommets = function(poly1,poly2){\n        if (poly1.listePoints.length==poly2.listePoints.length){\n          return true\n        }\n        else return false\n      }\n      \n      let compare2sommets=function(sommet1,sommet2){\n        if (egal(sommet1.x,sommet2.x,0.1)&&egal(sommet1.y,sommet2.y,0.1)) {\n          return true\n        }\n        else return false\n      }\n      let comparesommets = function(poly1,poly2){\n        let trouve=false,trouves=0\n        if (comparenbsommets(poly1,poly2))\n        for (let P of poly1.listePoints) {\n          for (let M of poly2.listePoints) {\n            if (compare2sommets(M,P)) {\n              trouve=true\n            }\n            if (trouve) break\n          }\n          if (trouve) {\n            trouves++\n            trouve=false\n          }\n          else {\n            trouves-=100\n          }\n          if (trouves<0)\n          break\n        }\n        if (trouves==poly1.listePoints.length)\n          return true\n        else return false\n      }\n /*     let associesommets=function(poly1,poly2,d){ //Pour chercher les indices des symétriques dans leur polygone respectif\n        let binomes=[],P,M   \n        for (let k=0;k<poly1.listePoints.length;k++) { // afin éventuellement de faire clignoter ces paires de points lors de la correction\n          P=symetrieAxiale(poly1.listePoints[k],d)\n          for (let l=0;l<poly2.listePoints.length;l++) {\n            M=poly2.listePoints[l]\n            if (compare2sommets(M,P)) {\n              binomes.push([k,l])\n              break\n            }\n          }\n        }\n        return binomes\n      }\n  */  \n    let refleccion = function (pavage, d, numero) { // retourne le numero du polygone symétrique ou -1 si il n'existe pas\n      let poly=pavage.polygones[numero-1],pol\n      let result=-1\n      let sympoly=symetrieAxiale(poly,d)\n      for (let k= 0;k<pavage.polygones.length;k++) {\n        pol=pavage.polygones[k]\n        if (compare2polys(sympoly,pol)) {\n          return k+1\n        }\n      }\n      return result\n    } \n\n    let objets=[],objetsCorrection=[],P1,P2,P3,t\n    let codes=['/','//','///','o','w','X','U','*']\n    let taillePavage=parseInt(this.sup)\n    if (taillePavage<1||taillePavage>2) {\n      taillePavage=1\n    }\n    if (this.nbQuestions>5) {\n      taillePavage=2\n    }\n    this.listeCorrections = []\n    this.listeQuestions = []\n    let Nx,Ny,index1,index2,A,B,d,image,couples=[],tailles=[],monpavage,fenetre\n    let texte = \"\", texteCorr = \"\", type_de_pavage = parseInt(this.sup)\n    let nombreTentatives,nombrePavageTestes=1\n    if (this.sup3==8) {\n      type_de_pavage =  randint(1,7)\n    }\n    else {\n      type_de_pavage=parseInt(this.sup3)\n    }\n    while (couples.length<this.nbQuestions&&nombrePavageTestes<7){\n      nombreTentatives=0\n    monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n    tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2],[3,2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2],[5,3]]]\n    Nx = tailles[taillePavage-1][type_de_pavage-1][0]\n    Ny = tailles[taillePavage-1][type_de_pavage-1][1]\n    monpavage.construit(type_de_pavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n    fenetre=monpavage.fenetre\n    context.fenetreMathalea2d=[fenetre.xmin,fenetre.ymin,fenetre.xmax,fenetre.ymax]\n    while (couples.length<this.nbQuestions+2&&nombreTentatives<3) { // On cherche d pour avoir suffisamment de couples\n    couples=[] // On vide la liste des couples pour une nouvelle recherche\n    index1=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3)) // On choisit 2 points dans 2 polygones distincts.\n    index2=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3),index1) \n    A=monpavage.polygones[index1].listePoints[randint(0,2)] // On les choisit dans les trois premiers\n    B=monpavage.polygones[index2].listePoints[randint(0,2)] // points pour éviter un point qui n'éxiste pas\n    while (compare2sommets(A,B)){ // On vérifie qu'ils sont bien distincts sinon, on change.\n      index1=randint(0,monpavage.nb_polygones-1) \n      index2=randint(0,monpavage.nb_polygones-1,index1)\n      A=monpavage.polygones[index1].listePoints[randint(0,2)] // idem ci-dessus\n      B=monpavage.polygones[index2].listePoints[randint(0,2)] // mais à la sortie du While A!=B\n    }\n    d=mediatrice(A,B,'(d)','red') // l'axe sera la droite passant par ces deux points si ça fonctionne\n    d.epaisseur=3\n    for (let i=1;i<= monpavage.nb_polygones; i++){ //on crée une liste des couples (antécédents, images)\n      image=refleccion(monpavage,d,i)\n      if (image!=-1){ // si l'image du polygone i existe, on ajoute le couple à la liste\n        couples.push([i,image])\n      }\n    }\n    couples=videcouples(couples) //supprime tous les couples en double (x,y)=(y,x)\n    nombreTentatives++ \n    }\n    if (couples.length<this.nbQuestions){\n    if (this.sup3==7) {\n      type_de_pavage=(type_de_pavage+1)%5+1\n    }\n    nombrePavageTestes++\n    }\n  }\n  if (couples.length<this.nbQuestions){\n    console.log('trop de questions, augmentez la taille du pavage')\n    return\n  }\n\n    objets.push(d) // la droite d est trouvée\n    couples=shuffle(couples) // on mélange les couples\n    for (let i = 0; i < monpavage.nb_polygones; i++) {\n      objets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n    }\n    if (this.sup2) { // Doit-on montrer les centres des figures ?\n      for (let i = 0; i < monpavage.nb_polygones; i++) {\n        objets.push(monpavage.tracesCentres[i])\n      }\n    }\n    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n      objets.push(monpavage.polygones[i])\n    }\n    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n    texte+=`<br>`\n    for (let i=0;i<this.nbQuestions;i++){  \n      texte+=`Quel est l'image de la figure $${couples[i][0]}$ dans la symétrie d'axe $(d)$ ?<br>`\n      texteCorr+=`L'image de la figure $${couples[i][0]}$ dans la symétrie d'axe $(d)$ est la figure ${couples[i][1]}<br>`\n//      symetriques=associesommets(monpavage.polygones[couples[i][0]-1],monpavage.polygones[couples[i][1]-1],d)\n      if (this.correctionDetaillee){\n        t=this.nbQuestions*3;\n        A=monpavage.barycentres[couples[i][0]-1]\n        B=monpavage.barycentres[couples[i][1]-1]\n        P1=monpavage.polygones[couples[i][0]-1]\n        P1.color=texcolors(i)\n        P1.couleurDeRemplissage=texcolors(i)\n        P1.opaciteDeRemplissage=0.5\n        P1.epaisseur=2\n        P2=monpavage.polygones[couples[i][1]-1]\n        P2.color=texcolors(i)\n        P2.couleurDeRemplissage=texcolors(i)\n        P2.opaciteDeRemplissage=0.5\n        P2.epaisseur=2\n        P3=symetrieAnimee(P1,d,`begin=\"${i*3}s;${i*3+t}s;${i*3+t*2}s\" end=\"${i*3+2}s;${i*3+t+2}s;${i*3+t*2+2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9*this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n        P3.color=texcolors(i)\n        P3.epaisseur=2\n        objetsCorrection.push(tracePoint(A,B),segment(A,B,texcolors(i)),codageMediatrice(A,B,texcolors(i),codes[i]),P1,P2,P3)\n      }\n    }\n    if (this.correctionDetaillee){\n      texteCorr+=mathalea2d(fenetre, objets,objetsCorrection)\n    }\n    this.listeQuestions.push(texte);\n    this.listeCorrections.push(texteCorr);\n    listeQuestionsToContenu(this)\n  }\n\tthis.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, '1 : Taille modeste\\n 2 : Grande taille'];\n  this.besoinFormulaire2CaseACocher=[\"Montrer les centres\"]\n  this.besoinFormulaire3Numerique=['Choix du pavage',8,'1 : Pavage de triangles équilatéraux\\n2 : Pavage de carrés\\n3 : Pavage d\\'hexagones réguliers\\n4 : Pavage 3².4.3.4\\n5 : Pavage 8².4\\n 6 : Pavage de losanges (hexagonal d\\'écolier)\\n7 : Pavage 6.3.6.3\\n8 : Un des sept pavages au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}