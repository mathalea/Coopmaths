{"version":3,"file":"js/50158.49e48317ae2460f88fa1.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G25-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, shuffle, nombreAvecEspace, texcolors } from '../../modules/outils.js'\nimport { tracePoint, mediatrice, codageMediatrice, segment, symetrieAxiale, symetrieAnimee, texteParPosition, mathalea2d, pavage } from '../../modules/2d.js'\nexport const titre = 'Trouver l’image d’une figure par une symétrie axiale dans un pavage'\n\n// Gestion de la date de publication initiale\nexport const dateDePublication = '14/12/2020'\n\n/**\n * Trouver une figure symétrique dans un pavage. Symétrie axiale. 6 pavages différents.\n * @author Jean-Claude Lhote\n * Réf : 6G25-3\n * Relecture : Novembre 2021 par EE\n */\nexport default function PavageEtReflexion2d () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = true\n  this.correctionDetaillee = true\n  this.correctionDetailleeDisponible = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1 // 1 pour des pavages modestes, 2 pour des plus grands.\n  this.sup2 = false // On cache les centres par défaut.\n  this.sup3 = 7\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function () {\n    const videcouples = function (tableau) {\n      for (let k = 0; k < tableau.length; k++) {\n        for (let j = k + 1; j < tableau.length; j++) {\n          if (tableau[k][1] === tableau[j][0]) {\n            tableau.splice(j, 1)\n          }\n        }\n      }\n      return tableau\n    }\n    const compare2polys = function (poly1, poly2) {\n      if (comparenbsommets(poly1, poly2)) {\n        if (comparesommets(poly1, poly2)) { return true } else { return false }\n      } else { return false }\n    }\n    const comparenbsommets = function (poly1, poly2) {\n      if (poly1.listePoints.length === poly2.listePoints.length) {\n        return true\n      } else return false\n    }\n\n    const compare2sommets = function (sommet1, sommet2) {\n      if (egal(sommet1.x, sommet2.x, 0.1) && egal(sommet1.y, sommet2.y, 0.1)) {\n        return true\n      } else return false\n    }\n    const comparesommets = function (poly1, poly2) {\n      let trouve = false; let trouves = 0\n      if (comparenbsommets(poly1, poly2)) {\n        for (const P of poly1.listePoints) {\n          for (const M of poly2.listePoints) {\n            if (compare2sommets(M, P)) {\n              trouve = true\n            }\n            if (trouve) break\n          }\n          if (trouve) {\n            trouves++\n            trouve = false\n          } else {\n            trouves -= 100\n          }\n          if (trouves < 0) { break }\n        }\n      }\n      if (trouves === poly1.listePoints.length) { return true } else return false\n    }\n    /*     let associesommets=function(poly1,poly2,d){ //Pour chercher les indices des symétriques dans leur polygone respectif\n        let binomes=[],P,M\n        for (let k=0;k<poly1.listePoints.length;k++) { // afin éventuellement de faire clignoter ces paires de points lors de la correction\n          P=symetrieAxiale(poly1.listePoints[k],d)\n          for (let l=0;l<poly2.listePoints.length;l++) {\n            M=poly2.listePoints[l]\n            if (compare2sommets(M,P)) {\n              binomes.push([k,l])\n              break\n            }\n          }\n        }\n        return binomes\n      }\n  */\n    const refleccion = function (pavage, d, numero) { // retourne le numero du polygone symétrique ou -1 si il n'existe pas\n      const poly = pavage.polygones[numero - 1]; let pol\n      const result = -1\n      const sympoly = symetrieAxiale(poly, d)\n      for (let k = 0; k < pavage.polygones.length; k++) {\n        pol = pavage.polygones[k]\n        if (compare2polys(sympoly, pol)) {\n          return k + 1\n        }\n      }\n      return result\n    }\n\n    const objets = []; const objetsCorrection = []; let P1; let P2; let P3; let t\n    const codes = ['/', '//', '///', 'o', 'w', 'X', 'U', '*']\n    let taillePavage = parseInt(this.sup)\n    if (taillePavage < 1 || taillePavage > 2) {\n      taillePavage = 1\n    }\n    if (this.nbQuestions > 5) {\n      taillePavage = 2\n    }\n    this.listeCorrections = []\n    this.listeQuestions = []\n    this.autoCorrection = []\n    let Nx; let Ny; let index1; let index2; let A; let B; let d; let image; let couples = []; let tailles = []; let monpavage; let fenetre\n    let texte = ''; let texteCorr = ''; let typeDePavage = parseInt(this.sup)\n    let nombreTentatives; let nombrePavageTestes = 1\n    if (this.sup3 === 8) {\n      typeDePavage = randint(1, 7)\n    } else {\n      typeDePavage = parseInt(this.sup3)\n    }\n    while (couples.length < this.nbQuestions && nombrePavageTestes < 7) {\n      nombreTentatives = 0\n      monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n      tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2], [3, 2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2], [5, 3]]]\n      Nx = tailles[taillePavage - 1][typeDePavage - 1][0]\n      Ny = tailles[taillePavage - 1][typeDePavage - 1][1]\n      monpavage.construit(typeDePavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n      fenetre = monpavage.fenetre\n      context.fenetreMathalea2d = [fenetre.xmin, fenetre.ymin, fenetre.xmax, fenetre.ymax]\n      while (couples.length < this.nbQuestions + 2 && nombreTentatives < 3) { // On cherche d pour avoir suffisamment de couples\n        couples = [] // On vide la liste des couples pour une nouvelle recherche\n        index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 2 points dans 2 polygones distincts.\n        index2 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3), index1)\n        A = monpavage.polygones[index1].listePoints[randint(0, 2)] // On les choisit dans les trois premiers\n        B = monpavage.polygones[index2].listePoints[randint(0, 2)] // points pour éviter un point qui n'éxiste pas\n        while (compare2sommets(A, B)) { // On vérifie qu'ils sont bien distincts sinon, on change.\n          index1 = randint(0, monpavage.nb_polygones - 1)\n          index2 = randint(0, monpavage.nb_polygones - 1, index1)\n          A = monpavage.polygones[index1].listePoints[randint(0, 2)] // idem ci-dessus\n          B = monpavage.polygones[index2].listePoints[randint(0, 2)] // mais à la sortie du While A!=B\n        }\n        d = mediatrice(A, B, '(d)', 'red') // l'axe sera la droite passant par ces deux points si ça fonctionne\n        d.epaisseur = 3\n        for (let i = 1; i <= monpavage.nb_polygones; i++) { // on crée une liste des couples (antécédents, images)\n          image = refleccion(monpavage, d, i)\n          if (image !== -1) { // si l'image du polygone i existe, on ajoute le couple à la liste\n            couples.push([i, image])\n          }\n        }\n        couples = videcouples(couples) // supprime tous les couples en double (x,y)=(y,x)\n        nombreTentatives++\n      }\n      if (couples.length < this.nbQuestions) {\n        if (this.sup3 === 7) {\n          typeDePavage = (typeDePavage + 1) % 5 + 1\n        }\n        nombrePavageTestes++\n      }\n    }\n    if (couples.length < this.nbQuestions) {\n      console.log('trop de questions, augmentez la taille du pavage')\n      return\n    }\n\n    objets.push(d) // la droite d est trouvée\n    couples = shuffle(couples) // on mélange les couples\n    for (let i = 0; i < monpavage.nb_polygones; i++) {\n      objets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n    }\n    if (this.sup2) { // Doit-on montrer les centres des figures ?\n      for (let i = 0; i < monpavage.nb_polygones; i++) {\n        objets.push(monpavage.tracesCentres[i])\n      }\n    }\n    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n      objets.push(monpavage.polygones[i])\n    }\n    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n    texte += '<br>'\n    for (let i = 0; i < this.nbQuestions; i++) {\n      texte += `Quelle est l'image de la figure $${couples[i][0]}$ dans la symétrie d'axe $(d)$ ?<br>`\n      texteCorr += `L'image de la figure $${couples[i][0]}$ dans la symétrie d'axe $(d)$ est la figure ${couples[i][1]}<br>`\n      //      symetriques=associesommets(monpavage.polygones[couples[i][0]-1],monpavage.polygones[couples[i][1]-1],d)\n      if (this.correctionDetaillee) {\n        t = this.nbQuestions * 3\n        A = monpavage.barycentres[couples[i][0] - 1]\n        B = monpavage.barycentres[couples[i][1] - 1]\n        P1 = monpavage.polygones[couples[i][0] - 1]\n        P1.color = texcolors(i)\n        P1.couleurDeRemplissage = texcolors(i)\n        P1.opaciteDeRemplissage = 0.5\n        P1.epaisseur = 2\n        P2 = monpavage.polygones[couples[i][1] - 1]\n        P2.color = texcolors(i)\n        P2.couleurDeRemplissage = texcolors(i)\n        P2.opaciteDeRemplissage = 0.5\n        P2.epaisseur = 2\n        P3 = symetrieAnimee(P1, d, `begin=\"${i * 3}s;${i * 3 + t}s;${i * 3 + t * 2}s\" end=\"${i * 3 + 2}s;${i * 3 + t + 2}s;${i * 3 + t * 2 + 2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9 * this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n        P3.color = texcolors(i)\n        P3.epaisseur = 2\n        objetsCorrection.push(tracePoint(A, B), segment(A, B, texcolors(i)), codageMediatrice(A, B, texcolors(i), codes[i]), P1, P2, P3)\n      }\n    }\n    if (this.correctionDetaillee) {\n      texteCorr += mathalea2d(fenetre, objets, objetsCorrection)\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, ' 1 : Taille modeste\\n 2 : Grande taille']\n  this.besoinFormulaire2CaseACocher = ['Montrer les centres']\n  this.besoinFormulaire3Numerique = ['Choix du pavage', 8, '1 : Triangles équilatéraux\\n2 : Carrés\\n3 : Hexagones réguliers\\n4 : Carrés et triangles équilatéraux\\n5 : Octogones et carrés\\n 6 : Losanges (pavage hexagonal d\\'écolier)\\n7 : Hexagones et triangles équilatéraux\\n8 : Un des sept pavages au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDePublication","PavageEtReflexion2d","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetaillee","correctionDetailleeDisponible","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","videcouples","tableau","k","length","j","splice","comparenbsommets","poly1","poly2","listePoints","compare2sommets","sommet1","sommet2","egal","x","y","comparesommets","trouve","trouves","P","M","refleccion","pavage","d","numero","poly","polygones","pol","sympoly","symetrieAxiale","objets","objetsCorrection","P1","P2","P3","t","codes","Nx","Ny","index1","index2","A","B","image","taillePavage","parseInt","listeCorrections","listeQuestions","autoCorrection","monpavage","fenetre","nombreTentatives","couples","tailles","texte","texteCorr","typeDePavage","nombrePavageTestes","randint","construit","xmin","ymin","xmax","ymax","Math","floor","nb_polygones","ceil","mediatrice","epaisseur","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","barycentres","tracesCentres","mathalea2d","color","texcolors","couleurDeRemplissage","opaciteDeRemplissage","symetrieAnimee","tracePoint","segment","codageMediatrice","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}