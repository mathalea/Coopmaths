{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4C32-1.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js","webpack://mathalea/./src/js/modules/gestionQcm.js"],"names":["titre","CalculsAvecPuissancesDeDix","Exercice","this","sup","sup2","nbCols","nbColsCorr","nbQuestions","qcmDisponible","modeQcm","nouvelleVersion","numeroExercice","parseInt","qcm","typeDeQuestionsDisponibles","tabrep","tabicone","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","mantisse1","exp1","decalage","mantisse","exp","decimalstring","scientifiquestring","i","cpt","randint","calcul","choice","texNombrec","texNombre","miseEnEvidence","mathalea","sortieAMC","shuffle2tableaux","tableauSolutionsDuQcm","propositionsQcm","indexOf","push","listeQuestionsToContenu","gestionQcmInteractif","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","mg32Editable","listePackages","exercice","document","addEventListener","$","checkbox","button","querySelector","event","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","reduce","a","b","spanReponseLigne","forEach","solution","rep","label","check","style","backgroundColor","checked","innerHTML","color","fontSize","querySelectorAll","uicheck","classList","add","espace","sortieHtml","length"],"mappings":"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","file":"js/4273.e64874716ebac3d4a14f.js","sourcesContent":["/* global mathalea */\nimport Exercice from '../ClasseExercice.js'\nimport { shuffle2tableaux, listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec, texNombre, miseEnEvidence } from '../../modules/outils.js'\nimport { gestionQcmInteractif, propositionsQcm } from '../../modules/gestionQcm.js'\nexport const titre = 'Calcul avec les puissances de dix'\n\n/**\n * type 1 : Un nombre est donné par le produit d'un décimal par une puissance de dix, il faut l'écrire en notation scientifique\n * type 2 : On donne la notation scientifique d'un nombre et on doit trouver l'exposant manquant de 10 dans le membre de gauche.\n * @Auteur Jean-Claude Lhote\n * 4C32-1\n */\nexport default function CalculsAvecPuissancesDeDix () {\n  Exercice.call(this)\n  this.sup = 1\n  this.sup2 = 1\n  this.titre = titre\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestions = 5\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.numeroExercice = numeroExercice\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.qcm = ['4C32-1', [], 'Calcul avec les puissances de dix', 1]\n    let tabrep = []\n    let tabicone = [1, 0, 0, 0]\n\n    if (this.sup === 1) this.consigne = 'Donner l\\'écriture scientifique des nombres suivants.'\n    else this.consigne = 'Compléter l\\'égalité des nombres suivants.'\n    let typeDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (this.sup2 === 1) typeDeQuestionsDisponibles = [0, 0, 0, 1, 1]\n    else if (this.sup2 === 2) typeDeQuestionsDisponibles = [0, 1, 1, 2, 2]\n    else typeDeQuestionsDisponibles = [2, 2, 3, 3, 3]\n\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, mantisse1, exp1, decalage, mantisse, exp, decimalstring, scientifiquestring, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) {\n      //        nombre=calcul(randint(1001,9999)/10**randint(1,6))\n      //      mantisse=calcul(nombre/10**(Math.floor(Math.log10(nombre))))\n      //        exp=Math.floor(Math.log10(nombre))\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          decalage = randint(-1, 1, 0)\n          mantisse = randint(1, 9)\n          exp = randint(1, 5)\n          break\n        case 1:\n          decalage = randint(-2, 2, 0)\n          mantisse = calcul(randint(11, 99) / 10)\n          exp = randint(1, 5)\n          break\n        case 2:\n          decalage = randint(-3, 3, 0)\n          if (randint(0, 1) === 1) mantisse = calcul(randint(111, 999) / 100)\n          else mantisse = calcul((randint(1, 9) * 100 + randint(1, 9)) / 100)\n          exp = randint(1, 7) * choice([-1, 1])\n          break\n        case 3:\n          decalage = randint(-4, 4, 0)\n          if (randint(0, 1) === 1) mantisse = calcul((randint(1, 9) * 1000 + randint(1, 19) * 5) / 1000)\n          else mantisse = calcul(randint(1111, 9999) / 1000)\n          exp = randint(3, 7) * choice([-1, 1])\n          break\n      }\n      // nombre = calcul(mantisse * 10 ** exp)\n      mantisse1 = calcul(mantisse * 10 ** decalage)\n      exp1 = exp - decalage\n\n      decimalstring = `${texNombrec(mantisse1)} \\\\times 10^{${exp1}}`\n      scientifiquestring = `${texNombre(mantisse)} \\\\times 10^{${exp}}`\n      tabicone = [1, 0, 0, 0]\n      if (this.sup === 1) {\n        texte = `$${decimalstring}$`\n        texteCorr = `$${miseEnEvidence(`${texNombrec(mantisse1)}`, 'blue')}\\\\times ${miseEnEvidence(`10^{${exp1}}`)} = ${miseEnEvidence(`${texNombre(mantisse)}\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} = ${scientifiquestring}$`\n        tabrep = [`$${scientifiquestring}$`, `$${texNombre(mantisse)} \\\\times 10^{${exp - 1}}$`, `$${texNombre(mantisse)} \\\\times 10^{${exp + 1}}$`, `$${texNombre(mantisse)} \\\\times 10^{${-exp}}$`]\n      } else {\n        texteCorr = `$${miseEnEvidence(texNombre(mantisse1), 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)}=${miseEnEvidence(texNombre(mantisse) + `\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} =${scientifiquestring}$`\n        texte = `$${texNombre(mantisse1)}\\\\times 10^{${miseEnEvidence('....')}}=${scientifiquestring}$`\n        tabrep = [`$${exp1}$`, `$${exp1 - 1}$`, `$${exp1 + 1}$`, `$${-exp1}$`]\n      }\n\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        texteCorr = ''\n        shuffle2tableaux(tabrep, tabicone)\n        this.tableauSolutionsDuQcm[i] = tabicone\n        texte += propositionsQcm(numeroExercice, i, tabrep, tabicone).texte\n        texteCorr += propositionsQcm(numeroExercice, i, tabrep, tabicone).texteCorr\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        this.qcm[1].push([`${texte}\\n`, tabrep, tabicone])\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  gestionQcmInteractif(this)\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 2, '1 : Traduire en notation scientifique\\n2 : Exercice à trou']\n  this.besoinFormulaire2Numerique = ['Niveaux de difficulté', 3, '1 : Facile\\n2 : Moyen\\n3 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ mathalea sortieHtml */\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function gestionQcmInteractif (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          const nbBonnesReponsesAttendues = exercice.tableauSolutionsDuQcm[i].reduce((a, b) => a + b, 0)\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.tableauSolutionsDuQcm[i].forEach((solution, rep) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${rep}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${rep}`)\n            if (solution === 1) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n            }\n          })\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '✔︎'\n            spanReponseLigne.style.color = 'green'\n          } else {\n            spanReponseLigne.innerHTML = '✖︎'\n            spanReponseLigne.style.color = 'red'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (numeroExercice, i, tabrep, tabicone) {\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (sortieHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  if (!mathalea.sortieAMC) {\n    if (sortieHtml) {\n      texte += `<br>  <form id=\"formEx${numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < tabrep.length; rep++) {\n      if (sortieHtml) {\n        texte += `<div class=\"ui checkbox ex${numeroExercice}\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${numeroExercice}Q${i}R${rep}\">${tabrep[rep] + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n      if (tabicone[rep] === 1) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[rep]}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${tabrep[rep]}` + espace\n      }\n    }\n    if (sortieHtml) {\n      texte += `<span id=\"resultatCheckEx${numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n"],"sourceRoot":""}