{"version":3,"file":"js/89707.4d33288106b6068573d6.js","mappings":"yRAMO,MAAMA,EAAQ,2CACRC,GAAkB,EAClBC,EAAiB,MACjBC,GAAW,EACXC,EAAU,aAOR,SAASC,IAEtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKP,MAAQA,EACbO,KAAKC,YAAc,EACnBD,KAAKE,uBAAwB,EAC7BF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,mBAAoB,EACzBL,KAAKM,qBAAsB,EAC3BN,KAAKO,IAAM,EACXP,KAAKQ,KAAO,EAGZR,KAAKS,gBAAkB,WAIrB,IAAIC,EAHJV,KAAKQ,KAAOG,SAASX,KAAKQ,MAC1BR,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,GAGtBH,EADEV,KAAKQ,KAAO,EACgB,CAACR,KAAKQ,MAEN,CAAC,EAAG,EAAG,EAAG,GAE1C,MACMM,GAAcC,EAAAA,EAAAA,KADa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACG,GAC1DC,GAAuBD,EAAAA,EAAAA,KAAkBL,EAA6BV,KAAKC,aACjF,IACIgB,EAEAC,EACAC,EAGAC,EAAcC,EAAMC,EAAGC,EAAiBC,EACxCC,EAAUC,EAAUC,EAAOC,EAAOC,EAASC,EAASC,EACpDC,EATAC,EAAI,EAEJC,EAAY,EAGZC,EAAS,GAKb,MAAMC,EAAa,CAAC,UAAW,SAAU,QAAS,UAAW,WAAY,aAAc,aAAc,WAAY,WAAY,SAAU,UAAW,UAAW,eACvJC,EAAa,CAAC,SAAU,WAAY,WAAY,OAAQ,SAAU,YAAa,YAAa,QAAS,YAAa,QAAS,SAAU,WACzI,WAAY,cAAe,UAAW,WAAY,cAAe,aAAc,UAAW,SAAU,WAAY,WAAY,SAC9H,IAAIC,EAAGC,EAAGC,EAAGC,EAAOC,EAAGC,EAASC,EAAcC,EAAUC,EAAIC,EAAGC,EAC/D,IAAK,IAAWC,EAAOC,EAAdC,EAAI,EAAqBA,EAAInD,KAAKC,aAAc,CAcvD,OAbA+B,EAAS,GACTG,EAAS,GACTjB,EAAgB,GAChBC,EAAoB,GACfiC,EAAAA,GAAAA,MAIHpD,KAAKqD,eAAeF,GAAK,IAHzBnD,KAAKqD,eAAmB,EAAJF,GAAS,GAC7BnD,KAAKqD,eAAmB,EAAJF,EAAQ,GAAK,IAKnCF,EAAQ,4BAA6BK,EAAAA,EAAAA,KAAOjB,GAAc,gHAC1Da,EAAY,GACJvC,SAASX,KAAKO,MACpB,KAAK,EAAG2B,EAAY,EAAG,MACvB,KAAK,EAAGA,EAAY,EAAG,MACvB,KAAK,EAAGA,EAAY,EAAG,MACvB,QAASA,EAAY,EAEvB,IAAK,IAAIqB,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BtB,GAAIuB,EAAAA,EAAAA,KAAQ,EAAG,GAAIrB,GACnBhB,EAAkBsC,KAAKxB,GACvBE,EAASA,EAAOuB,OAAO,CAACzB,EAAI,EAAGA,EAAI,EAAGA,EAAGA,EAAI,EAAGA,EAAI,IAEtD,IAAI0B,EAAgB,EACpB,IAAK,IAAIJ,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BI,GAAiBxC,EAAkBoC,GAErC,IAAK,IAAIA,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BtC,GAAMqC,EAAAA,EAAAA,KAAOlB,EAAYlB,GACzBA,EAAcuC,KAAKxC,GAErB,OAAQD,EAAqBmC,IAC3B,KAAK,EACHb,GAAIsB,EAAAA,EAAAA,KAAM,EAAG,GACbrB,GAAIqB,EAAAA,EAAAA,KAAM,EAAG,GACbpB,GAAIoB,EAAAA,EAAAA,KAAM,EAAG,GACbd,GAAKe,EAAAA,EAAAA,KAAkBvB,EAAGC,EAAG,SAC7BP,EAAOyB,KAAKX,GACZE,EAAQ,GAERD,GAAIe,EAAAA,EAAAA,KAAWxB,GACfS,EAAEgB,MAAQ,IACV/B,EAAOyB,KAAKV,GAEZ,IAAK,IAAIQ,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7Bd,EAAQ,IAAMtB,EAAkBoC,GAAKI,EACrCjB,GAAIsB,EAAAA,EAAAA,MAAIC,EAAAA,EAAAA,KAAS1B,EAAGD,EAAGU,GAAQV,EAAGG,GAAO,GAAMyB,EAAAA,EAAAA,KAAUX,EAAI,GAAI,QAAS,IAC1EV,GAAWsB,EAAAA,EAAAA,KAAOrD,EAAYyC,IAC9Bb,EAAEG,SAAWA,EACbH,EAAE0B,sBAAuBF,EAAAA,EAAAA,KAAUX,EAAI,GACvCb,EAAE2B,mBAAqB3B,EAAE0B,qBACzBpC,EAAOyB,KAAKf,GACZM,GAASP,EACTE,GAAU2B,EAAAA,EAAAA,MAAMC,EAAAA,EAAAA,KAAY/B,GAAGgC,EAAAA,EAAAA,KAAQ,EAAG,IAAMjB,KAAKgB,EAAAA,EAAAA,KAAY/B,GAAGgC,EAAAA,EAAAA,KAAQ,EAAG,IAAMjB,IAAK,SAC1FZ,EAAQyB,qBAAuB1B,EAAE0B,qBACjCzB,EAAQ0B,mBAAqB3B,EAAE2B,mBAC/B1B,EAAQE,SAAWA,EACnBF,EAAQ8B,qBAAuB,GAC/B7B,GAAe8B,EAAAA,EAAAA,KAAiBxD,EAAcqC,GAAI,IAAS,IAAJA,EAAU,GAAK,EAAG,QAAS,IAAK,UAAU,GACjGvB,EAAOyB,KAAKd,EAASC,GACrBxB,EAAe,CAAEuD,MAAO,IAAKC,MAAO,IAAKC,KAAM,GAAIC,KAAM,IAAKC,YAAa,GAAIC,MAAO,GAAKC,WAAW,GAExG,MACF,KAAK,EACH3C,GAAIsB,EAAAA,EAAAA,KAAM,EAAG,GACbrB,GAAIqB,EAAAA,EAAAA,KAAM,EAAG,GACbpB,GAAIoB,EAAAA,EAAAA,KAAM,EAAG,GACbd,GAAKkB,EAAAA,EAAAA,KAAIzB,EAAGD,EAAG,KAAK,EAAM,QAAS,SACnCN,EAAOyB,KAAKX,GACZE,EAAQ,EACRD,GAAIe,EAAAA,EAAAA,KAAWxB,GACfS,EAAEgB,MAAQ,IACV/B,EAAOyB,KAAKV,GAEZ,IAAK,IAAIQ,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7Bd,EAAQ,IAAMtB,EAAkBoC,GAAKI,EACrCjB,GAAIsB,EAAAA,EAAAA,MAAIC,EAAAA,EAAAA,KAAS1B,EAAGD,EAAGU,GAAQV,EAAGG,GAAO,GAAMyB,EAAAA,EAAAA,KAAUX,EAAI,GAAI,QAAS,IAC1EV,GAAWsB,EAAAA,EAAAA,KAAOrD,EAAYyC,IAC9Bb,EAAEG,SAAWA,EACbH,EAAE0B,sBAAuBF,EAAAA,EAAAA,KAAUX,EAAI,GACvCb,EAAE2B,mBAAqB3B,EAAE0B,qBACzBpC,EAAOyB,KAAKf,GACZM,GAASP,EACTE,GAAU2B,EAAAA,EAAAA,MAAMC,EAAAA,EAAAA,KAAY/B,GAAGgC,EAAAA,EAAAA,KAAQ,EAAG,IAAMjB,KAAKgB,EAAAA,EAAAA,KAAY/B,GAAGgC,EAAAA,EAAAA,KAAQ,EAAG,IAAMjB,IAAK,SAC1FZ,EAAQyB,qBAAuB1B,EAAE0B,qBACjCzB,EAAQ0B,mBAAqB3B,EAAE2B,mBAC/B1B,EAAQE,SAAWA,EACnBF,EAAQ8B,qBAAuB,GAC/B7B,GAAe8B,EAAAA,EAAAA,KAAiBxD,EAAcqC,GAAI,IAAS,IAAJA,EAAU,GAAK,EAAG,QAAS,IAAK,UAAU,GACjGvB,EAAOyB,KAAKd,EAASC,GACrBxB,EAAe,CAAEuD,MAAO,IAAKC,MAAO,GAAKC,KAAM,GAAIC,KAAM,IAAKC,YAAa,GAAIC,MAAO,GAAKC,WAAW,GAExG,MACF,KAAK,EAEH,OADA5D,EAAO,EACCV,SAASX,KAAKQ,OACpB,KAAK,EACHa,EAAO,EACP,MACF,KAAK,EACHA,EAAO,GAGXC,GAAI4D,EAAAA,EAAAA,KAAQ,CACVC,SAAS,EACTC,QAAS,aACTC,YAAa,GACbC,YAAa,GACbC,OAAQ,GAAMlE,EACdmE,eAAgB,GAAKnE,EACrBoE,KAAM,GAAKpE,EACXqE,KAAM,EACNC,KAAM,GACNC,KAAM,EACNC,UAAW,GACXC,SAAU,uBAGZvE,EAAkB,GAClB,IAAK,IAAIgC,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BvB,EAAOyB,MAAKsC,EAAAA,EAAAA,MAAczE,EAAEqE,KAAOrE,EAAEoE,OAASxD,EAAY,IAAOqB,EAAI,GAAKpC,EAAkBoC,IAAIyC,EAAAA,EAAAA,KAA0B9E,EAAcqC,IAAK,CAAE0C,MAAO,GAAM5E,EAAM+C,sBAAsBF,EAAAA,EAAAA,KAAUX,EAAI,GAAIV,SAAU,sBAEtNb,EAAOyB,KAAKnC,GACZF,EAAe,CAAEuD,MAAO,IAAKC,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,YAAa,GAAIC,MAAO,GAAKC,WAAW,GAElG,MAEF,KAAK,EAEH,OADA5D,EAAO,EACCV,SAASX,KAAKQ,OACpB,KAAK,EACHa,EAAO,EACP,MACF,KAAK,EACHA,EAAO,GAGXC,GAAI4D,EAAAA,EAAAA,KAAQ,CACVC,SAAS,EACTC,QAAS,aACTC,YAAa,GACbC,YAAa,GACbC,OAAQ,GAAMlE,EACdmE,eAAgB,GAAKnE,EACrBoE,KAAM,GAAKpE,EACXqE,KAAM,EACNC,KAAM,GACNC,KAAM,EACNC,UAAW,GACXC,SAAU,uBAGZvE,EAAkB,GAClB,IAAK,IAAIgC,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BhC,EAAgBkC,KAAK,CAAW,GAATF,EAAI,GAAQpC,EAAkBoC,KACrDvB,EAAOyB,MAAKiB,EAAAA,EAAAA,KAAiBxD,EAAcqC,GAAc,GAATA,EAAI,IAAS,GAAK,GAAI,QAAS,EAAG,WAClFvB,EAAOyB,MAAKyC,EAAAA,EAAAA,KAAkB,GAAT3C,EAAI,IAAS,GAAe,GAATA,EAAI,GAAQ,KAEtD/B,GAAI2E,EAAAA,EAAAA,KAAwB5E,EAAiBD,EAAG,CAC9C8E,iBAAkB,MAClBC,eAAgB,YAChBC,aAAc,GACdC,iBAAkB,EAClBC,eAAgB,IAChBC,gBAAiB,IAGnBzE,EAAOyB,KAAKnC,EAAGE,GAEfJ,EAAe,CAAEuD,MAAO,IAAKC,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,YAAa,GAAIC,MAAO,GAAKC,WAAW,GActG,GAVAtD,EAAQ+E,KAAKC,OAAOxF,GACpBS,EAAQ8E,KAAKE,OAAOzF,GACpBM,EAAWP,EAAcC,EAAkB0F,QAAQlF,IACnDD,EAAWR,EAAcC,EAAkB0F,QAAQjF,IACnDqB,IAAS6D,EAAAA,EAAAA,KAAW1F,EAAcY,GAC9BoB,EAAAA,GAAAA,QACFH,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,8CACzB9D,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,6CACzB9D,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,8CAEtB3D,EAAAA,GAAAA,MAgCE,CACLpD,KAAKqD,eAAeF,GAAG6D,OAAU,GAAE/D,MACnCjD,KAAKqD,eAAeF,GAAG8D,aAAe,CACpC,CACEC,KAAM,UACND,aAAc,GACdE,QAAS,IAEX,CACED,KAAM,UACND,aAAc,GACdE,QAAS,IAEX,CACED,KAAM,UACND,aAAc,GACdE,QAAS,KAEb,IAAK,IAAI5D,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BvD,KAAKqD,eAAeF,GAAG8D,aAAa,GAAGA,aAAaxD,KAAK,CACvDR,MAAQ,GAAE/B,EAAcqC,KACxB6D,OAAQ3F,IAAaP,EAAcqC,GACnC8D,QAAe,IAAN9D,EAAU,CAAEN,MAAO,2BAA8B,KAE5DjD,KAAKqD,eAAeF,GAAG8D,aAAa,GAAGA,aAAaxD,KAAK,CACvDR,MAAQ,GAAE/B,EAAcqC,KACxB6D,OAAQ1F,IAAaR,EAAcqC,GACnC8D,QAAe,IAAN9D,EAAU,CAAEN,MAAO,0BAA6B,KAG7DjD,KAAKqD,eAAeF,GAAG8D,aAAa,GAAGA,aAAe,CAAC,CACrDhE,MAAO,gCACPmE,OAAQxF,EAAQ+B,EAAgB,EAChC0D,QAAS,CAAEpE,MAAO,4CAEpB,CACEA,MAAO,iCACPmE,OAAQxF,EAAQ+B,EAAgB,GAElC,CACEV,MAAO,wBACPmE,OAAQxF,KAAU0F,EAAAA,EAAAA,KAAO3D,EAAgB,KAG3C3D,KAAKqD,eAAeF,GAAG8D,aAAa,GAAGE,QAAU,CAAEI,SAAS,GAC5DvH,KAAKqD,eAAeF,GAAG8D,aAAa,GAAGE,QAAU,CAAEI,SAAS,OA7E1C,CAClBvH,KAAKqD,eAAmB,EAAJF,GAAO8D,aAAe,GAC1C,IAAK,IAAI1D,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BvD,KAAKqD,eAAmB,EAAJF,GAAO8D,aAAaxD,KAAK,CAC3CR,MAAQ,GAAE/B,EAAcqC,KACxB6D,OAAQ3F,IAAaP,EAAcqC,KAGvCvD,KAAKqD,eAAmB,EAAJF,EAAQ,GAAG8D,aAAe,GAC9C,IAAK,IAAI1D,EAAI,EAAGA,EAAIrB,EAAWqB,IAC7BvD,KAAKqD,eAAmB,EAAJF,EAAQ,GAAG8D,aAAaxD,KAAK,CAC/CR,MAAQ,GAAE/B,EAAcqC,KACxB6D,OAAQ1F,IAAaR,EAAcqC,KAGvCvD,KAAKqD,eAAmB,EAAJF,EAAQ,GAAG8D,aAAe,GAC9CjH,KAAKqD,eAAmB,EAAJF,EAAQ,GAAG8D,aAAe,CAAC,CAC7ChE,MAAO,gCACPmE,OAAQxF,EAAQ+B,EAAgB,GAElC,CACEV,MAAO,iCACPmE,OAAQxF,EAAQ+B,EAAgB,GAElC,CACEV,MAAO,wBACPmE,OAAQxF,KAAU0F,EAAAA,EAAAA,KAAO3D,EAAgB,KAG3C3D,KAAKqD,eAAmB,EAAJF,GAAOgE,QAAU,GACrCnH,KAAKqD,eAAmB,EAAJF,EAAQ,GAAGgE,QAAU,GACzCnH,KAAKqD,eAAmB,EAAJF,EAAQ,GAAGgE,QAAU,GAgD3CtF,GAAU2F,EAAAA,EAAAA,IAAgBxH,KAAU,EAAJmD,GAChCrB,GAAU0F,EAAAA,EAAAA,IAAgBxH,KAAU,EAAJmD,EAAQ,GACxCpB,GAAUyF,EAAAA,EAAAA,IAAgBxH,KAAU,EAAJmD,EAAQ,GACnCC,EAAAA,GAAAA,QACHH,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,8CAAgDlF,EAAQoB,MACjFA,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,6CAA+CjF,EAAQmB,MAChFA,GAAU,QAAM8D,EAAAA,EAAAA,KAAS,6CAA+ChF,EAAQkB,MAChFC,EAAa,QAAM6D,EAAAA,EAAAA,KAAS,yDAA2DlF,EAAQqB,UAC/FA,GAAc,QAAM6D,EAAAA,EAAAA,KAAS,uDAAyDjF,EAAQoB,UAC9FA,GAAc,QAAM6D,EAAAA,EAAAA,KAAS,uDAAyDhF,EAAQmB,WAG5FlD,KAAKyH,oBAAoBtE,KAAMhC,EAAmBwC,KACpD3D,KAAKY,eAAe6C,KAAKR,GACzBjD,KAAKa,iBAAiB4C,KAAKP,GAC3BC,MAGJuE,EAAAA,EAAAA,KAAwB1H,OAE1BA,KAAK2H,0BAA4B,CAAC,+BAAiC,EAAG,+CACtE3H,KAAK4H,2BAA6B,CAAC,oBAAqB,EAAG,8H,gBCjV9C,SAAS7H,IAItBC,KAAKP,MAAQ,GACbO,KAAK6H,YAAa,EAclB7H,KAAK8H,SAAW,GAChB9H,KAAK+H,mBAAqB,GAC1B/H,KAAKgI,aAAe,GACpBhI,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,GACxBb,KAAKiI,QAAU,GACfjI,KAAKkI,kBAAoB,GACzBlI,KAAKqD,eAAiB,GACtBrD,KAAKmI,sBAAwB,GAK7BnI,KAAKoI,QAAU,EACfpI,KAAKqI,YAAc,EAKnBrI,KAAKK,mBAAoB,EACzBL,KAAKsI,cAAgB,GACrBtI,KAAKuI,oBAAqB,EAC1BvI,KAAKE,uBAAwB,EAC7BF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKwI,kBAAmB,EACxBxI,KAAKyI,sBAAuB,EAC5BzI,KAAK0I,mBAAoB,EACzB1I,KAAK2I,uBAAwB,EAM7B3I,KAAK4I,QAAS,EACd5I,KAAK6I,gBAAkB,GAKvB7I,KAAKC,YAAc,GACnBD,KAAK8I,+BAAgC,EACrC9I,KAAK+I,qBAAsB,EAC3B/I,KAAKgJ,MAAQ,GAEbhJ,KAAKiJ,YAAa,EAClBjJ,KAAKkJ,uBAAwB,EAE7BlJ,KAAK2H,2BAA4B,EACjC3H,KAAKmJ,uBAAwB,EAC7BnJ,KAAKoJ,6BAA8B,EAEnCpJ,KAAK4H,4BAA6B,EAClC5H,KAAKqJ,wBAAyB,EAC9BrJ,KAAKsJ,8BAA+B,EAEpCtJ,KAAKuJ,4BAA6B,EAClCvJ,KAAKwJ,wBAAyB,EAC9BxJ,KAAKyJ,8BAA+B,EAMpCzJ,KAAK0J,cAAe,EAMpB1J,KAAK2J,eAAiB,GAEtB3J,KAAKS,gBAAkB,SAAUmJ,KAQjC5J,KAAKyH,oBAAsB,SAAUlE,KAAMsG,GAC/B,IAANtG,IAASvD,KAAK2J,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIjK,KAAK2J,eAAe9C,QAAQiD,IAAmB,KAGjD9J,KAAK2J,eAAelG,KAAKqG,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/6e/6S10-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { premiereLettreEnMajuscule, texcolors, combinaisonListes, choice, randint, listeQuestionsToContenu, numAlpha, calcul } from '../../modules/outils.js'\nimport { traceGraphiqueCartesien, segment, mathalea2d, arc, point, rotation, motifs, tracePoint, vecteur, translation, carre, texteParPosition, repere2, traceBarre, cercleCentrePoint } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\n\nexport const titre = 'Représenter des données par un diagramme'\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Lecture de diagrammes\n * @author Jean-Claude Lhote\n * Référence 6S10-1\n */\nexport default function LireUnDiagramme () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 2\n  this.nbQuestionsModifiable = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.sup = 3\n  this.sup2 = 5\n\n  //  this.sup2 = false;\n  this.nouvelleVersion = function () {\n    this.sup2 = parseInt(this.sup2)\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let typesDeQuestionsDisponibles\n    if (this.sup2 < 5) {\n      typesDeQuestionsDisponibles = [this.sup2]\n    } else {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4]\n    }\n    const listeHachuresDisponibles = [0, 1, 3, 4, 5, 6, 7, 8, 9, 10]\n    const listeMotifs = combinaisonListes(listeHachuresDisponibles, 4)\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let N = 0\n    let nom\n    let nbAnimaux = 4 // nombre d'animaux différents dans l'énoncé\n    let lstAnimauxExo // liste des animaux uniquement cités dans l'exercice\n    let lstNombresAnimaux // liste des effectifs de chaque animal\n    let lstVal = [] // liste des valeurs à éviter pour les effectifs\n\n    let paramsEnonce, coef, r, lstElementGraph, g\n    let reponse1, reponse2, nbMin, nbMax, monQcm1, monQcm2, monQcm3\n    let objets\n    const lstAnimaux = ['girafes', 'zèbres', 'gnous', 'buffles', 'gazelles', 'crocodiles', 'rhinocéros', 'léopards', 'guépards', 'hyènes', 'lycaons', 'servals', 'phacochères']\n    const lstNomParc = ['Dramve', 'Fatenmin', 'Batderfa', 'Vihi', 'Genser', 'Barbetdou', 'Dramrendu', 'Secai', 'Cipeudram', 'Cigel', 'Lisino', 'Fohenlan',\n      'Farnfoss', 'Kinecardine', 'Zeffari', 'Barmwich', 'Swadlincote', 'Swordbreak', 'Loshull', 'Ruyron', 'Fluasall', 'Blueross', 'Vlane']\n    let A, B, T, angle, a, legende, textelegende, hachures, a0, t, alpha\n    for (let q = 0, texte, texteCorr; q < this.nbQuestions;) {\n      objets = []\n      lstVal = []\n      lstAnimauxExo = []\n      lstNombresAnimaux = []\n      if (!context.isAmc) {\n        this.autoCorrection[q * 2] = {}\n        this.autoCorrection[q * 2 + 1] = {}\n      } else {\n        this.autoCorrection[q] = {}\n      }\n\n      texte = 'Dans le parc naturel de ' + choice(lstNomParc) + ', il y a beaucoup d’animaux.<br> Voici un diagramme qui représente les effectifs de quelques espèces.<br><br>'\n      texteCorr = ''\n      switch (parseInt(this.sup)) {\n        case 1: nbAnimaux = 2; break\n        case 2: nbAnimaux = 3; break\n        case 3: nbAnimaux = 4; break\n        default: nbAnimaux = 4\n      }\n      for (let i = 0; i < nbAnimaux; i++) {\n        N = randint(5, 40, lstVal) // choisit un nombre entre 5 et 40 sauf dans les valeurs à éviter\n        lstNombresAnimaux.push(N)\n        lstVal = lstVal.concat([N - 2, N - 1, N, N + 1, N + 2]) // valeurs à supprimer pour éviter des valeurs proches\n      }\n      let effectiftotal = 0\n      for (let i = 0; i < nbAnimaux; i++) {\n        effectiftotal += lstNombresAnimaux[i]\n      }\n      for (let i = 0; i < nbAnimaux; i++) {\n        nom = choice(lstAnimaux, lstAnimauxExo) // choisit un animal au hasard sauf parmi ceux déjà utilisés\n        lstAnimauxExo.push(nom)\n      }\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          A = point(0, 0)\n          B = point(6, 0)\n          T = point(7, 0)\n          a0 = cercleCentrePoint(A, B, 'black')\n          objets.push(a0)\n          alpha = 90\n\n          t = tracePoint(A)\n          t.style = '+'\n          objets.push(t)\n\n          for (let i = 0; i < nbAnimaux; i++) {\n            angle = 360 * lstNombresAnimaux[i] / effectiftotal\n            a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n            hachures = motifs(listeMotifs[i])\n            a.hachures = hachures\n            a.couleurDeRemplissage = texcolors(i + 1)\n            a.couleurDesHachures = a.couleurDeRemplissage\n            objets.push(a)\n            alpha += angle\n            legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n            legende.couleurDeRemplissage = a.couleurDeRemplissage\n            legende.couleurDesHachures = a.couleurDesHachures\n            legende.hachures = hachures\n            legende.opaciteDeRemplissage = 0.7\n            textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + 0.5, 0, 'black', 1.5, 'gauche', false)\n            objets.push(legende, textelegende)\n            paramsEnonce = { xmin: -6.5, ymin: -6.5, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n          }\n          break\n        case 2:\n          A = point(0, 0)\n          B = point(6, 0)\n          T = point(7, 0)\n          a0 = arc(B, A, 180, true, 'white', 'black')\n          objets.push(a0)\n          alpha = 0\n          t = tracePoint(A)\n          t.style = '+'\n          objets.push(t)\n\n          for (let i = 0; i < nbAnimaux; i++) {\n            angle = 180 * lstNombresAnimaux[i] / effectiftotal\n            a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n            hachures = motifs(listeMotifs[i])\n            a.hachures = hachures\n            a.couleurDeRemplissage = texcolors(i + 1)\n            a.couleurDesHachures = a.couleurDeRemplissage\n            objets.push(a)\n            alpha += angle\n            legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n            legende.couleurDeRemplissage = a.couleurDeRemplissage\n            legende.couleurDesHachures = a.couleurDesHachures\n            legende.hachures = hachures\n            legende.opaciteDeRemplissage = 0.7\n            textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + 0.5, 0, 'black', 1.5, 'gauche', false)\n            objets.push(legende, textelegende)\n            paramsEnonce = { xmin: -6.5, ymin: -0.2, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n          }\n          break\n        case 3:\n          coef = 1\n          switch (parseInt(this.sup2)) {\n            case 1:\n              coef = 1\n              break\n            case 2:\n              coef = 10\n              break\n          }\n          r = repere2({\n            grilleX: false,\n            grilleY: 'pointilles',\n            xThickListe: [],\n            xLabelListe: [],\n            yUnite: 0.1 / coef,\n            yThickDistance: 10 * coef,\n            yMax: 60 * coef,\n            xMin: 0,\n            xMax: 10,\n            yMin: 0,\n            axeXStyle: '',\n            yLegende: \"Nombre d'individus\"\n          })\n\n          lstElementGraph = []\n          for (let i = 0; i < nbAnimaux; i++) {\n            objets.push(traceBarre((((r.xMax - r.xMin) / (nbAnimaux + 1)) * (i + 1)), lstNombresAnimaux[i], premiereLettreEnMajuscule(lstAnimauxExo[i]), { unite: 0.1 / coef, couleurDeRemplissage: texcolors(i + 1), hachures: 'north east lines' }))\n          }\n          objets.push(r)\n          paramsEnonce = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n\n          break\n\n        case 4:\n          coef = 1\n          switch (parseInt(this.sup2)) {\n            case 1:\n              coef = 1\n              break\n            case 2:\n              coef = 10\n              break\n          }\n          r = repere2({\n            grilleX: false,\n            grilleY: 'pointilles',\n            xThickListe: [],\n            xLabelListe: [],\n            yUnite: 0.1 / coef,\n            yThickDistance: 10 * coef,\n            yMax: 60 * coef,\n            xMin: 0,\n            xMax: 10,\n            yMin: 0,\n            axeXStyle: '',\n            yLegende: \"Nombre d'individus\"\n          })\n\n          lstElementGraph = []\n          for (let i = 0; i < nbAnimaux; i++) {\n            lstElementGraph.push([(i + 1) * 2, lstNombresAnimaux[i]])\n            objets.push(texteParPosition(lstAnimauxExo[i], (i + 1) * 2, -0.2, 66, 'black', 1, 'gauche'))\n            objets.push(segment((i + 1) * 2, -0.1, (i + 1) * 2, 0.1))\n          }\n          g = traceGraphiqueCartesien(lstElementGraph, r, {\n            couleurDesPoints: 'red',\n            couleurDuTrait: 'lightgray',\n            styleDuTrait: '', // plein par défaut\n            epaisseurDuTrait: 1,\n            styleDesPoints: 'o', // croix par défaut\n            tailleDesPoints: 3\n          })\n\n          objets.push(r, g)\n\n          paramsEnonce = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7, pixelsParCm: 20, scale: 0.5, mainlevee: false }\n\n          break\n      }\n      nbMin = Math.min(...lstNombresAnimaux)\n      nbMax = Math.max(...lstNombresAnimaux)\n      reponse1 = lstAnimauxExo[lstNombresAnimaux.indexOf(nbMin)]\n      reponse2 = lstAnimauxExo[lstNombresAnimaux.indexOf(nbMax)]\n      texte += mathalea2d(paramsEnonce, objets)\n      if (context.isAmc) {\n        texte += `<br>${numAlpha(0)} Quelle est l'espèce la moins nombreuse ?`\n        texte += `<br>${numAlpha(1)} Quelle est l'espèce la plus nombreuse ?`\n        texte += `<br>${numAlpha(2)} L'espèce la plus nombreuse représente ?`\n      }\n      if (!context.isAmc) {\n        this.autoCorrection[q * 3].propositions = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          this.autoCorrection[q * 3].propositions.push({\n            texte: `${lstAnimauxExo[i]}`,\n            statut: reponse1 === lstAnimauxExo[i]\n          })\n        }\n        this.autoCorrection[q * 3 + 1].propositions = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          this.autoCorrection[q * 2 + 1].propositions.push({\n            texte: `${lstAnimauxExo[i]}`,\n            statut: reponse2 === lstAnimauxExo[i]\n          })\n        }\n        this.autoCorrection[q * 3 + 2].propositions = []\n        this.autoCorrection[q * 3 + 2].propositions = [{\n          texte: 'Plus de la moitié des animaux',\n          statut: nbMax > effectiftotal / 2\n        },\n        {\n          texte: 'Moins de la moitié des animaux',\n          statut: nbMax < effectiftotal / 2\n        },\n        {\n          texte: 'La moitié des animaux',\n          statut: nbMax === calcul(effectiftotal / 2)\n        }\n        ]\n        this.autoCorrection[q * 3].options = {}\n        this.autoCorrection[q * 3 + 1].options = {}\n        this.autoCorrection[q * 3 + 2].options = {}\n      } else {\n        this.autoCorrection[q].enonce = `${texte}\\n`\n        this.autoCorrection[q].propositions = [\n          {\n            type: 'qcmMono',\n            propositions: [],\n            options: {}\n          },\n          {\n            type: 'qcmMono',\n            propositions: [],\n            options: {}\n          },\n          {\n            type: 'qcmMono',\n            propositions: [],\n            options: {}\n          }]\n        for (let i = 0; i < nbAnimaux; i++) {\n          this.autoCorrection[q].propositions[0].propositions.push({\n            texte: `${lstAnimauxExo[i]}`,\n            statut: reponse1 === lstAnimauxExo[i],\n            reponse: i === 0 ? { texte: 'a) Les moins nombreux :' } : {}\n          })\n          this.autoCorrection[q].propositions[1].propositions.push({\n            texte: `${lstAnimauxExo[i]}`,\n            statut: reponse2 === lstAnimauxExo[i],\n            reponse: i === 0 ? { texte: 'b) Les plus nombreux :' } : {}\n          })\n        }\n        this.autoCorrection[q].propositions[2].propositions = [{\n          texte: 'Plus de la moitié des animaux',\n          statut: nbMax > effectiftotal / 2,\n          reponse: { texte: 'c) Part de l’espèce la plus nombreuse :' }\n        },\n        {\n          texte: 'Moins de la moitié des animaux',\n          statut: nbMax < effectiftotal / 2\n        },\n        {\n          texte: 'La moitié des animaux',\n          statut: nbMax === calcul(effectiftotal / 2)\n        }\n        ]\n        this.autoCorrection[q].propositions[0].options = { ordered: true }\n        this.autoCorrection[q].propositions[1].options = { ordered: false }\n      }\n      monQcm1 = propositionsQcm(this, q * 3)\n      monQcm2 = propositionsQcm(this, q * 3 + 1)\n      monQcm3 = propositionsQcm(this, q * 3 + 2)\n      if (!context.isAmc) {\n        texte += `<br>${numAlpha(0)} Quelle est l'espèce la moins nombreuse ?` + monQcm1.texte\n        texte += `<br>${numAlpha(1)} Quelle est l'espèce la plus nombreuse ?` + monQcm2.texte\n        texte += `<br>${numAlpha(2)} L'espèce la plus nombreuse représente ?` + monQcm3.texte\n        texteCorr = `<br>${numAlpha(0)} L'animal le moins nombreux parmi ces espèces est : ` + monQcm1.texteCorr\n        texteCorr += `<br>${numAlpha(1)} L'animal le plus nombreux parmi ces espèces est :` + monQcm2.texteCorr\n        texteCorr += `<br>${numAlpha(2)} L'animal le plus nombreux parmi ces espèces est :` + monQcm3.texteCorr\n      }\n\n      if (this.questionJamaisPosee(q, ...lstNombresAnimaux, effectiftotal)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        q++\n      }\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  this.besoinFormulaireNumerique = ['Nombre d\\'espèces différentes', 3, '1 : 2 espèces\\n2 : 3 espèces\\n3 : 4 espèces']\n  this.besoinFormulaire2Numerique = ['Type de diagramme', 5, '1 : Diagramme circulaire\\n2 : Diagramme semi-circulaire\\n3 : Diagramme en barres\\n4 : Diagramme cartésien\\n5 : Au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","LireUnDiagramme","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","listeQuestions","listeCorrections","listeMotifs","combinaisonListes","listeTypeDeQuestions","nom","lstAnimauxExo","lstNombresAnimaux","paramsEnonce","coef","r","lstElementGraph","g","reponse1","reponse2","nbMin","nbMax","monQcm1","monQcm2","monQcm3","objets","N","nbAnimaux","lstVal","lstAnimaux","lstNomParc","A","B","T","angle","a","legende","textelegende","hachures","a0","t","alpha","texte","texteCorr","q","context","autoCorrection","choice","i","randint","push","concat","effectiftotal","point","cercleCentrePoint","tracePoint","style","arc","rotation","texcolors","motifs","couleurDeRemplissage","couleurDesHachures","carre","translation","vecteur","opaciteDeRemplissage","texteParPosition","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","repere2","grilleX","grilleY","xThickListe","xLabelListe","yUnite","yThickDistance","yMax","xMin","xMax","yMin","axeXStyle","yLegende","traceBarre","premiereLettreEnMajuscule","unite","segment","traceGraphiqueCartesien","couleurDesPoints","couleurDuTrait","styleDuTrait","epaisseurDuTrait","styleDesPoints","tailleDesPoints","Math","min","max","indexOf","mathalea2d","numAlpha","enonce","propositions","type","options","statut","reponse","calcul","ordered","propositionsQcm","questionJamaisPosee","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}