{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Construire_par_symetrie.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["ConstruireParSymetrie","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","sup","sup2","figure","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","listeTypeDeQuestions","combinaisonListes","Xmin","Xmax","Ymin","Ymax","sc","A","AA","cA","sA","B","C","CC","cC","sC","sCE","D","DD","cD","sD","sDE","E","EE","cE","sE","sED","sEC","inter","d","enonce","correction","g","carreaux","k","listeQuestions","listeCorrections","objetsEnonce","objetsCorrection","p1","p2","p1nom","i","cpt","length","creerNomDePolygone","point","choice","droiteParPointEtPente","droiteVerticaleParPoint","pointSurDroite","isVisible","epaisseur","positionLabel","randint","symetrieAxiale","codageMediatrice","segment","droite","pointilles","push","tracePoint","labelPoint","numAlpha","Math","floor","min","x","ceil","max","y","rotation","codageMilieu","polygone","listePoints","nom","nommePolygone","sommets","pointIntersectionDD","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","seyes","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/75746.adab95f8555e8f98f7da.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, creerNomDePolygone, numAlpha } from '../../modules/outils.js'\nimport { point, tracePoint, pointSurDroite, pointIntersectionDD, labelPoint, droite, droiteVerticaleParPoint, droiteParPointEtPente, codageMediatrice, codageMilieu, segment, polygone, nommePolygone, rotation, symetrieAxiale, grille, seyes, mathalea2d } from '../../modules/2d.js'\n\n/**\n * @author Jean-Claude Lhote\n * Fonction générale pour les exercices de construction de symétriques (centrale/axiale et points/triangles)\n * références  6G24-1, 6G24-2, 5G10-1, 5G10-2, 5G11-1 et 5G11-2\n * Permet une sortie html/pdf sur petits carreaux/gros carreaux/papier blanc\n */\n\nexport default function ConstruireParSymetrie () {\n  Exercice.call(this)\n  this.titre = 'Construire par Symétrie...'\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 2\n  this.sup2 = 1\n  this.figure = false\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    let typesDeQuestionsDisponibles\n    if (this.sup === 3) { // Symétrie axiale ou centrale\n      if (this.figure === false) typesDeQuestionsDisponibles = [0, 1, 2] // points\n      else typesDeQuestionsDisponibles = [3, 4, 5]\n    } else { // triangle\n      if (this.figure === false) typesDeQuestionsDisponibles = [parseInt(this.sup)] // Le choix 1 ou 2 : points\n      else typesDeQuestionsDisponibles = [parseInt(this.sup) + 3] // figures\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, sc\n    if (this.sup2 === 2) sc = 0.8\n    else sc = 0.5\n\n    let A; let AA; let cA; let sA\n    let B\n    let C; let CC; let cC; let sC; let sCE\n    let D; let DD; let cD; let sD; let sDE\n    let E; let EE; let cE; let sE; let sED\n    let sEC; let inter\n    let d; let enonce\n    let correction\n    let g\n    let carreaux\n    let k\n    const objetsEnonce = []\n    const objetsCorrection = []\n    let p1; let p2; let p1nom\n    for (\n      let i = 0, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      objetsEnonce.length = 0\n      objetsCorrection.length = 0\n      switch (listeTypeDeQuestions[i]) {\n        case 0: // 3 symétries axiales simples de points (6ème)\n          p1nom = creerNomDePolygone(5, 'PQ')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 0, 1, 2])\n\n          if (k < 2) d = droiteParPointEtPente(A, k)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          d.isVisible = true\n          d.epaisseur = 1\n          if (k === 2) {\n            A.positionLabel = 'left'\n            B.positionLabel = 'left'\n          }\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, 'left')\n          // F = point(E.x+1,5-B.y,'F','above left');\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'below left')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above right')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'left')\n          // FF=symetrieAxiale(F,d,'F'','below left')\n          cC = codageMediatrice(C, CC, 'red', '|')\n          cD = codageMediatrice(D, DD, 'blue', 'X')\n          cE = codageMediatrice(E, EE, 'green', 'O')\n          // cF=codageMediatrice(F,FF,'purple','V')\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sE = segment(E, EE)\n          // sF=segment(F,FF)\n          sCE = droite(CC, EE, '', 'gray')\n          sCE.pointilles = true\n          sED = droite(EE, D, '', 'gray')\n          sED.pointilles = true\n          sDE = droite(DD, E, '', 'gray')\n          sDE.pointilles = true\n          sEC = droite(C, E, '', 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d)\n          enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(5) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n\n          break\n        case 1: // 3 symétries axiales de points\n          p1nom = creerNomDePolygone(5)\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(10, 13), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 8), randint(-8, -5), `${p1nom[4]}`, 'left')\n          // F = point(E.x+1,5-B.y,'F','above left');\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'below left')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above right')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'left')\n          // FF=symetrieAxiale(F,d,'F'','below left')\n          cC = codageMediatrice(C, CC, 'red', '|')\n          cD = codageMediatrice(D, DD, 'blue', 'X')\n          cE = codageMediatrice(E, EE, 'green', 'O')\n          // cF=codageMediatrice(F,FF,'purple','V')\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sE = segment(E, EE)\n          // sF=segment(F,FF)\n          sCE = segment(CC, EE, 'gray')\n          sCE.pointilles = true\n          sED = segment(EE, D, 'gray')\n          sED.pointilles = true\n          sDE = segment(DD, E, 'gray')\n          sDE.pointilles = true\n          sEC = segment(C, E, 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d)\n          enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(5) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n          break\n        case 2: // 3 symétries centrales de points\n          p1nom = creerNomDePolygone(4)\n          A = point(0, randint(-1, 4), `${p1nom[0]}`, 'left')\n          B = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          C = point(randint(2, 3), randint(-4, -2), `${p1nom[2]}`, 'left')\n          D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right')\n          CC = rotation(C, B, 180, `${p1nom[2]}'`, 'right')\n          DD = rotation(D, B, 180, `${p1nom[3]}'`, 'above left')\n          AA = rotation(A, B, 180, `${p1nom[0]}'`, 'right')\n          cC = codageMilieu(C, CC, 'red', '|', false)\n          cD = codageMilieu(D, DD, 'blue', '||', false)\n          cA = codageMilieu(A, AA, 'green', '|||', false)\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sA = segment(A, AA)\n\n          objetsCorrection.push(tracePoint(A, C, D, CC, DD, AA), labelPoint(A, B, C, D, CC, DD, AA), cC, cD, cA, sC, sD, sA)\n          objetsEnonce.push(tracePoint(A, B, C, D), labelPoint(A, B, C, D))\n          enonce = numAlpha(0) + ' Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(3) + ` Construire le point $${p1nom[0]}'$ symétrique de $${p1nom[0]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(4) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) + 1)\n          correction = ''\n          break\n\n        case 3: // symétrie axiale simple d'un triangle\n          p1nom = creerNomDePolygone(5, 'PQ')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 0, 1, 2])\n\n          if (k < 2) d = droiteParPointEtPente(A, k)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, 'left')\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          objetsCorrection.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p1.sommets, p2, p2.sommets, sCE, sED)\n          objetsEnonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1)\n          enonce = numAlpha(0) + 'Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = ''\n\n          break\n        case 4: // symetrie axiale d'un triangle\n          p1nom = creerNomDePolygone(5)\n\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(10, 13), randint(-4, -2), `${p1nom[3]}`, 'below right')\n          E = point(randint(6, 8), randint(-8, -6), `${p1nom[4]}`, 'left')\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          inter = pointIntersectionDD(sCE, sED)\n          objetsCorrection.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p2, sCE, sED)\n          objetsEnonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1)\n          enonce = numAlpha(0) + 'Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les côtés des deux triangles se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n          break\n        case 5:\n          p1nom = creerNomDePolygone(4)\n          A = point(0, randint(-1, 4), `${p1nom[0]}`, 'left')\n          B = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          C = point(randint(2, 3), randint(-6, -4), `${p1nom[2]}`, 'left')\n          D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right')\n          p1 = polygone(A, C, D)\n          p2 = rotation(p1, B, 180)\n          p2.listePoints[0].nom = `${p1nom[0]}'`\n          p2.listePoints[1].nom = `${p1nom[2]}'`\n          p2.listePoints[2].nom = `${p1nom[3]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMilieu(p1.listePoints[0], p2.listePoints[0], 'red', '|', false)\n          cD = codageMilieu(p1.listePoints[1], p2.listePoints[1], 'blue', 'X', false)\n          cA = codageMilieu(p1.listePoints[2], p2.listePoints[2], 'green', 'O', false)\n          sA = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sC = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sD = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\n          objetsCorrection.push(tracePoint(B), labelPoint(B), cC, cD, cA, sC, sD, sA, DD, CC, p1, p2)\n          objetsEnonce.push(tracePoint(B), labelPoint(B), CC, p1)\n          enonce = numAlpha(0) + 'Reproduire la figure ci-dessous.<br>'\n          enonce += numAlpha(1) + ` Construire le triangle  $${p1nom[0]}'${p1nom[2]}'${p1nom[3]}'$ symétrique de $${p1nom[0]}${p1nom[2]}${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = ''\n          break\n      }\n\n      const params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: 20,\n        scale: sc\n      }\n      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (this.sup2 === 2) {\n        k = 0.8\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        k = 0.5\n        carreaux = ''\n      }\n      objetsEnonce.push(g, carreaux)\n      objetsCorrection.push(g, carreaux)\n      enonce += mathalea2d(params\n        ,\n        objetsEnonce\n      )\n      correction += mathalea2d(\n        params,\n        objetsCorrection\n      )\n      if (this.listeQuestions.indexOf(enonce) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(enonce + '<br>')\n        this.listeCorrections.push(correction + '<br>')\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 4, '0 : symétries axiales simples\\n 1 : Symétrie axiale\\n 2 : Symétrie centrale\\n 3 : Mélange']\n  this.besoinFormulaire2Numerique = [\n    'Type de cahier',\n    3,\n    '1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}