{"version":3,"file":"js/82952.e17e6bcd5d2ab51d8480.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N23-2.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/c3/c3N22.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, shuffle, calcul, choisitLettresDifferentes, texNombre, texFraction, numAlpha, nombreDeChiffresDansLaPartieEntiere, nombreDeChiffresDansLaPartieDecimale, nombreDeChiffresDe } from '../../modules/outils.js'\nimport { droiteGraduee2, mathalea2d } from '../../modules/2d.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Lire des abscisses décimales sous trois formes'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * 6N23-2\n */\nexport default function LireAbscisseDecimaleTroisFormes () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.niveau = 'sixième'\n  this.consigne = ''\n  if (context.isHtml) {\n    this.spacing = 2\n    this.spacingCorr = 3\n  } else {\n    this.spacing = 1\n    this.spacingCorr = 1\n  }\n  this.vspace = -1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    let d1; let texte = ''; let texteCorr = ''; let extremite; const noms = choisitLettresDifferentes(3, 'Q')\n    let x1 = 0; let x2 = 0; let x3 = 0; let thickOff; let tableau = []; let xmin; let xmax\n    if (parseInt(this.sup) === 1) {\n      if (this.niveau === 'CM') {\n        xmin = 0\n        thickOff = 0\n      } else {\n        xmin = randint(1, 15)\n        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))\n      }\n      if (xmin === 0) extremite = '|->'\n      else extremite = '->'\n      xmax = xmin + 9\n      x1 = xmin * 10 + randint(0, 2) * 10 + randint(2, 8)\n      x2 = xmin * 10 + randint(3, 5) * 10 + randint(2, 8)\n      x3 = xmin * 10 + randint(6, 8) * 10 + randint(2, 8)\n      x1 = calcul(x1 / 10)\n      x2 = calcul(x2 / 10)\n      x3 = calcul(x3 / 10)\n\n      tableau = shuffle([x1, x2, x3])\n      x1 = tableau[0]\n      x2 = tableau[1]\n      x3 = tableau[2]\n\n      d1 = droiteGraduee2({\n        x: 0,\n        y: 0,\n        Min: xmin,\n        axePosition: 'H',\n        Max: xmax,\n        thickSec: true,\n        thickTer: false,\n        Unite: 3,\n        thickOffset: thickOff,\n        thickCouleur: 'black',\n        axeCouleur: 'black',\n        axeHauteur: 4,\n        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],\n        pointTaille: 6,\n        pointOpacite: 0.8,\n        pointCouleur: 'blue',\n        pointStyle: '|',\n        pointEpaisseur: 2,\n        axeStyle: extremite\n      })\n      texte = `${numAlpha(0)} Donner l'abscisse de $${noms[0]}$ en écriture décimale.` + ajouteChampTexteMathLive(this, 0, 'largeur10 inline', { texte: ` $${noms[0]}($`, texteApres: '$)$' })\n      texte += `<br>${numAlpha(1)} Donner l'abscisse de $${noms[1]}$ comme la somme d'un nombre entier et d'une fraction décimale.` + ajouteChampTexteMathLive(this, 1, 'largeur10 inline', { texte: ` $${noms[1]}($`, texteApres: '+' }) + ajouteChampTexteMathLive(this, 2, 'largeur10 inline', { texteApres: '$)$' })\n      texte += `<br>${numAlpha(2)} Donner l'abscisse de $${noms[2]}$ sous la forme d'une fraction décimale.` + ajouteChampTexteMathLive(this, 3, 'largeur10 inline', { texte: ` $${noms[2]}($`, texteApres: '$)$' })\n      texteCorr = `${numAlpha(0)} L'abscisse de $${noms[0]}$ est : $${texNombre(x1)}$.<br>`\n      texteCorr += `${numAlpha(1)} L'abscisse de $${noms[1]}$ est : $${texNombre(Math.floor(x2))} + ${texFraction(calcul(10 * (x2 - Math.floor(x2))), 10)}$.<br>`\n      texteCorr += `${numAlpha(2)} L'abscisse de $${noms[2]}$ est : $${texFraction(calcul(x3 * 10), 10)}$.`\n      if (!context.isAmc) {\n        setReponse(this, 0, x1, { formatInteractif: 'calcul' })\n        setReponse(this, 1, Math.floor(x2), { formatInteractif: 'calcul' })\n        setReponse(this, 2, fraction(calcul(10 * (x2 - Math.floor(x2))), 10), { formatInteractif: 'fraction' })\n        setReponse(this, 3, fraction(calcul(x3 * 10), 10), { formatInteractif: 'fraction' })\n      } else {\n        this.autoCorrection[0] = {\n          enonce: '', // on le remplira à la fin.\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: `a)${noms[0]} : valeur décimale`,\n                  valeur: x1,\n                  param: {\n                    digits: nombreDeChiffresDe(x1),\n                    decimals: nombreDeChiffresDansLaPartieDecimale(x1),\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie entière`,\n                  valeur: Math.floor(x2),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(x2),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie fractionnaire \\\\dfrac{\\\\ldots}{10}`,\n                  valeur: calcul(10 * (x2 - Math.floor(x2))),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(10 * (x2 - Math.floor(x2)))),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `c)${noms[2]} : fraction décimale \\\\dfrac{\\\\ldots}{10}`,\n                  valeur: calcul(x3 * 10),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(x3 * 10)),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            }\n          ]\n        }\n      }\n    } else if (parseInt(this.sup) === 2) {\n      if (this.niveau === 'CM') {\n        xmin = 0\n        thickOff = 0\n      } else {\n        xmin = randint(1, 15) - 0.1\n        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))\n      }\n      if (xmin === 0) extremite = '|->'\n      else extremite = '->'\n      xmax = calcul(xmin + 1.5)\n      x1 = 10 + xmin * 100 + randint(1, 3) * 10 + randint(2, 8)\n      x2 = 10 + xmin * 100 + randint(4, 6) * 10 + randint(2, 8)\n      x3 = 10 + xmin * 100 + randint(7, 9) * 10 + randint(2, 8)\n\n      x1 = calcul(x1 / 100)\n      x2 = calcul(x2 / 100)\n      x3 = calcul(x3 / 100)\n      tableau = shuffle([x1, x2, x3])\n      x1 = tableau[0]\n      x2 = tableau[1]\n      x3 = tableau[2]\n\n      d1 = droiteGraduee2({\n        x: 0,\n        y: 0,\n        Min: xmin,\n        axePosition: 'H',\n        Max: xmax,\n        thickSec: true,\n        thickTer: true,\n        Unite: 20,\n        thickOffset: thickOff,\n        thickCouleur: 'black',\n        axeCouleur: 'black',\n        axeHauteur: 4,\n        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],\n        pointTaille: 6,\n        pointOpacite: 0.8,\n        pointCouleur: 'blue',\n        pointStyle: '|',\n        pointEpaisseur: 2,\n        axeStyle: extremite\n      })\n      texte = `${numAlpha(0)} Donner l'abscisse de $${noms[0]}$ en écriture décimale.` + ajouteChampTexteMathLive(this, 0, 'largeur10 inline', { texte: ` $${noms[0]}($`, texteApres: '$)$' })\n      texte += `<br>${numAlpha(1)} Donner l'abscisse de $${noms[1]}$ comme la somme d'un entier et d'une fraction décimale.` + ajouteChampTexteMathLive(this, 1, 'largeur10 inline', { texte: ` $${noms[1]}($`, texteApres: '+' }) + ajouteChampTexteMathLive(this, 2, 'largeur10 inline', { texteApres: '$)$' })\n      texte += `<br>${numAlpha(2)} Donner l'abscisse de $${noms[2]}$ sous la forme d'une fraction décimale.` + ajouteChampTexteMathLive(this, 3, 'largeur10 inline', { texte: ` $${noms[2]}($`, texteApres: '$)$' })\n      texteCorr = `${numAlpha(0)} L'abscisse de $${noms[0]}$ est : $${texNombre(x1)}$.<br>`\n      texteCorr += `${numAlpha(1)} L'abscisse de $${noms[1]}$ est : $${texNombre(Math.floor(x2))} + ${texFraction(calcul(100 * (x2 - Math.floor(x2))), 100)}$.<br>`\n      texteCorr += `${numAlpha(2)} L'abscisse de $${noms[2]}$ est : $${texFraction(calcul(x3 * 100), 100)}$.`\n      if (!context.isAmc) {\n        setReponse(this, 0, x1)\n        setReponse(this, 1, Math.floor(x2))\n        setReponse(this, 2, fraction(calcul(100 * (x2 - Math.floor(x2))), 100), { formatInteractif: 'fraction' })\n        setReponse(this, 3, fraction(calcul(x3 * 100), 100), { formatInteractif: 'fraction' })\n      } else {\n        this.autoCorrection[0] = {\n          enonce: '', // on le remplira à la fin.\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: `a)${noms[0]} : valeur décimale`,\n                  valeur: x1,\n                  param: {\n                    digits: nombreDeChiffresDe(x1),\n                    decimals: nombreDeChiffresDansLaPartieDecimale(x1),\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie entière`,\n                  valeur: Math.floor(x2),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(x2),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie fractionnaire $\\\\dfrac{\\\\ldots}{100}$`,\n                  valeur: calcul(100 * (x2 - Math.floor(x2))),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(100 * (x2 - Math.floor(x2)))),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `c)${noms[2]} : fraction décimale $\\\\dfrac{\\\\ldots}{100}$`,\n                  valeur: calcul(x3 * 100),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(x3 * 100)),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            }\n          ]\n        }\n      }\n    } else if (parseInt(this.sup) === 3) {\n      if (this.niveau === 'CM') {\n        xmin = 0\n        thickOff = 0\n      } else {\n        xmin = calcul(randint(0, 15) + randint(0, 9) * 0.1)\n        thickOff = calcul(2 / (10 ** (parseInt(this.sup))))\n      }\n      if (xmin === 0) extremite = '|->'\n      else extremite = '->'\n      xmax = calcul(xmin + 0.15)\n\n      x1 = xmin * 1000 + randint(1, 5) * 10 + randint(2, 8)\n      x2 = xmin * 1000 + randint(6, 9) * 10 + randint(2, 8)\n      x3 = xmin * 1000 + randint(11, 14) * 10 + randint(2, 8)\n      x1 = calcul(x1 / 1000)\n      x2 = calcul(x2 / 1000)\n      x3 = calcul(x3 / 1000)\n\n      tableau = shuffle([x1, x2, x3])\n      x1 = tableau[0]\n      x2 = tableau[1]\n      x3 = tableau[2]\n      d1 = droiteGraduee2({\n        x: 0,\n        y: 0,\n        Min: xmin,\n        axePosition: 'H',\n        Max: xmax,\n        thickSec: true,\n        thickTer: true,\n        Unite: 200,\n        thickOffset: thickOff,\n        thickDistance: 0.1,\n        thickSecDist: 0.01,\n        thickTerDist: 0.001,\n        thickCouleur: 'black',\n        axeCouleur: 'black',\n        axeHauteur: 4,\n        pointListe: [[x1, `${noms[0]}`], [x2, `${noms[1]}`], [x3, `${noms[2]}`]],\n        labelListe: [[xmin + 0.09, texNombre(calcul(xmin + 0.09))], [xmin + 0.1, texNombre(calcul(xmin + 0.1))]],\n        pointTaille: 6,\n        pointOpacite: 0.8,\n        pointCouleur: 'blue',\n        pointStyle: '|',\n        pointEpaisseur: 2,\n        axeStyle: extremite\n      })\n\n      texte = `${numAlpha(0)} Donner l'abscisse de ${noms[0]} en écriture décimale.` + ajouteChampTexteMathLive(this, 0, 'largeur10 inline', { texte: ` ${noms[0]}(`, texteApres: ')' })\n      texte += `<br>${numAlpha(1)} Donner l'abscisse de ${noms[1]} comme la somme d'un entier et d'une fraction décimale.` + ajouteChampTexteMathLive(this, 1, 'largeur10 inline', { texte: ` ${noms[1]}(`, texteApres: '+' }) + ajouteChampTexteMathLive(this, 2, 'largeur10 inline', { texteApres: ')' })\n      texte += `<br>${numAlpha(2)} Donner l'abscisse de ${noms[2]} sous la forme d'une fraction décimale.` + ajouteChampTexteMathLive(this, 3, 'largeur10 inline', { texte: ` ${noms[2]}(`, texteApres: ')' })\n      texteCorr = `${numAlpha(0)} L'abscisse de ${noms[0]} est : $${texNombre(x1)}$.<br>`\n      texteCorr += `${numAlpha(1)} L'abscisse de ${noms[1]} est : $${texNombre(Math.floor(x2))} + ${texFraction(calcul(1000 * (x2 - Math.floor(x2))), 1000)}$.<br>`\n      texteCorr += `${numAlpha(2)} L'abscisse de ${noms[2]} est : $${texFraction(calcul(x3 * 1000), 1000)}$.`\n      if (!context.isAmc) {\n        setReponse(this, 0, x1)\n        setReponse(this, 1, Math.floor(x2))\n        setReponse(this, 2, fraction(calcul(1000 * (x2 - Math.floor(x2))), 1000), { formatInteractif: 'fraction' })\n        setReponse(this, 3, fraction(calcul(x3 * 1000), 1000), { formatInteractif: 'fraction' })\n      } else {\n        this.autoCorrection[0] = {\n          enonce: '', // on le remplira à la fin.\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: `a)${noms[0]} : valeur décimale`,\n                  valeur: x1,\n                  param: {\n                    digits: nombreDeChiffresDe(x1),\n                    decimals: nombreDeChiffresDansLaPartieDecimale(x1),\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie entière`,\n                  valeur: Math.floor(x2),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(x2),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `b)${noms[1]} : partie fractionnaire $\\\\dfrac{\\\\ldots}{1000}$`,\n                  valeur: calcul(1000 * (x2 - Math.floor(x2))),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(1000 * (x2 - Math.floor(x2)))),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: '',\n                statut: '',\n                reponse: {\n                  texte: `c)${noms[2]} : fraction décimale $\\\\dfrac{\\\\ldots}{1000}$`,\n                  valeur: calcul(x3 * 1000),\n                  param: {\n                    digits: nombreDeChiffresDansLaPartieEntiere(calcul(x3 * 1000)),\n                    decimals: 0,\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            }\n          ]\n        }\n      }\n    }\n    texte += '<br>' + mathalea2d({ xmin: -1.5, xmax: 35, ymin: -1.5, ymax: 1.5, pixelsParCm: 25, scale: 0.5 }, d1)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    if (context.isAmc) {\n      this.autoCorrection[0].enonce = texte\n    }\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, '1 : Au dixième\\n2 : Au centième\\n3 : Au millième']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import LireAbscisseDecimaleTroisFormes from '../6e/6N23-2.js'\nexport const titre = 'Lire abscisse décimale sous trois formes'\nexport { interactifReady, interactifType, amcReady, amcType } from '../6e/6N23-2.js'\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10\n */\nexport default function LireAbscisseDecimaleTroisFormesCM () {\n  LireAbscisseDecimaleTroisFormes.call(this)\n  this.titre = titre\n  this.niveau = 'CM'\n  this.sup = 1\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","LireAbscisseDecimaleTroisFormes","Exercice","this","niveau","consigne","context","spacing","spacingCorr","vspace","nbCols","nbColsCorr","sup","nbQuestions","nbQuestionsModifiable","nouvelleVersion","d1","listeQuestions","listeCorrections","autoCorrection","extremite","texte","texteCorr","noms","choisitLettresDifferentes","thickOff","xmin","xmax","x1","x2","x3","tableau","parseInt","randint","calcul","shuffle","droiteGraduee2","x","y","Min","axePosition","Max","thickSec","thickTer","Unite","thickOffset","thickCouleur","axeCouleur","axeHauteur","pointListe","pointTaille","pointOpacite","pointCouleur","pointStyle","pointEpaisseur","axeStyle","numAlpha","ajouteChampTexteMathLive","texteApres","texNombre","Math","floor","texFraction","enonce","propositions","type","statut","reponse","valeur","param","digits","nombreDeChiffresDe","decimals","nombreDeChiffresDansLaPartieDecimale","signe","approx","nombreDeChiffresDansLaPartieEntiere","setReponse","formatInteractif","fraction","thickDistance","thickSecDist","thickTerDist","labelListe","mathalea2d","ymin","ymax","pixelsParCm","scale","push","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","LireAbscisseDecimaleTroisFormesCM"],"sourceRoot":""}