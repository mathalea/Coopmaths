{"version":3,"sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/betaExercice_constructions_basiques.js"],"names":["Exercice","this","titre","consigne","consigneCorrection","listeQuestions","listeCorrections","introduction","contenu","contenuCorrection","nbQuestions","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","nouvelleVersion","numeroExercice","listePackages","Exercice_constructions_basiques","pas_de_version_HMTL","A","B","C","D","traces1","traces2","labels1","labels2","kare","aA","aB","aC","aD","objetsEnonce","objetsEnonceml","objetsCorrection","paramsEnonce","paramsEnonceml","paramsCorrection","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","point","randint","rotation","tracePoint","labelPoint","carre","epaisseur","codageAngleDroit","push","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","amplitude","mathalea2d","indexOf","listeQuestionsToContenu"],"mappings":"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","file":"js/87647.81d14647464e44ab9e92.js","sourcesContent":["/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListes} from '../../modules/outils.js'\nimport {point,tracePoint,labelPoint,carre,rotation,codageAngleDroit,mathalea2d} from '../../modules/2d.js'\nexport const titre = 'Programmes de constructions (en chantier)'\n\n/**\n * Non Publié : base servant à faire des tutoriels vidéos\n * @author Jean-Claude Lhote\n * Réf : betaExoConstruction\n * publié le 1/12/2020\n */\nexport default function Exercice_constructions_basiques() {\n  \"use strict\";\n  Exercice.call(this);\n  this.titre = titre;\n  this.nbQuestions = 1; // Ici le nombre de questions\n  this.nbQuestionsModifiable = false; // Active le formulaire nombre de questions\n  this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1; // Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false; // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false; // mettre à true si on ne veut pas de l'exercice en ligne\n\n  // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n  //  this.sup = false; // A décommenter : valeur par défaut d'un premier paramètre\n  //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n  //  this.sup3 = false; // A décommenter : valeur par défaut d'un troisième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n    this.listeQuestions = []; // tableau contenant la liste des questions \n    this.listeCorrections = [];\n    let typesDeQuestionsDisponibles = [1]; // tableau à compléter par valeurs possibles des types de questions\n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions);\n    // Ci-dessus On crée une liste aléatoire comprenant nbQuestions parmi les types disponibles.\n    /* Un exemple ci-dessous : si la classe est 6, alors les types dispo sont 1 et 2 sinon , 1,2,3 et 4.\n    if (this.classe == 6) typesDeQuestionsDisponibles = [1, 2]\n        else typesDeQuestionsDisponibles = [1, 2, 3,4]\n    listeTypeDeQuestions = combin,aison_listes(typesDeQuestionsDisponibles, this.nbQuestions)\n    */\n    // boucle pour fabriquer les nbQuestions questions en s'assurant que si il n'y a pas nbQuestions différentes\n    // La boucle s'arrête après 50 tentatives.\n    let A, B, C, D, traces1, traces2, labels1, labels2, kare, aA, aB, aC, aD;\n    let objetsEnonce, objetsEnonceml, objetsCorrection, paramsEnonce, paramsEnonceml, paramsCorrection;\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = []; // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objetsEnonceml = []; // Idem pour l'enoncé à main levée si besoin\n      objetsCorrection = []; // Idem pour la correction\n\n      texte = `Construire le carré $ABCD$.<br>`; // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = `Pour cette construction on peut utiliser la règle et l'équerre.<br>`; // Idem pour le texte de la correction.\n\n\n      //      nom = creerNomDePolygone(3, \"PQ\")\n      // fonction permettant de choisir un nom de polygone, soit ici 3 lettres qui se suivent à l'exclusion de la séquence PQ\n      switch (listeTypeDeQuestions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n        case 1:\n          A = point(0, 0, 'A', 'below');\n          B = point(5, randint(-30, 30) / 10, 'B', 'below');\n          C = rotation(A, B, -90, 'C', 'above');\n          D = rotation(B, A, 90, 'D', 'above');\n          traces1 = tracePoint(A, B);\n          labels1 = labelPoint(A, B);\n          traces2 = tracePoint(A, B, C, D);\n          labels2 = labelPoint(A, B, C, D);\n          kare = carre(A, B);\n          kare.epaisseur = 2;\n          aA = codageAngleDroit(B, A, D);\n          aB = codageAngleDroit(A, B, C);\n          aC = codageAngleDroit(B, C, D);\n          aD = codageAngleDroit(C, D, A);\n\n          objetsEnonce.push(traces1, labels1);\n          objetsEnonceml.push(traces2, labels2, kare, aA, aB, aC, aD);\n          objetsCorrection.push(traces2, labels2, kare, aA, aB, aC, aD);\n          //ici sont créés les texte, tex_corr, objets mathalea2d divers entrant dans le contenu de l'exercice\n          break;\n\n        case 2:\n\n          // Idem Cas1 mais avec d'autres texte, texteCorr...\n          break;\n\n        case 3:\n\n          break;\n\n        case 4:\n\n          break;\n\n      }\n      //  objetsEnonce.push () // On rempli les tableaux d'objets Mathalea2d\n      //  objetsEnonceml.push()\n      //  objetsCorrection.push()\n      //paramètres de la fenêtre Mathalea2d pour l'énoncé main levée\n      paramsEnonceml = { xmin: -5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1, mainlevee: true, amplitude: 1 };\n      //paramètres de la fenêtre Mathalea2d pour l'énoncé normal\n      paramsEnonce = { xmin: -5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1, mainlevee: false };\n      //paramètres de la fenêtre Mathalea2d pour la correction\n      paramsCorrection = { xmin: -5, ymin: -5, xmax: 9, ymax: 9, pixelsParCm: 20, scale: 1 };\n      // On ajoute au texte de l'énoncé, la figure à main levée et la figure de l'enoncé.\n      texte += mathalea2d(paramsEnonceml, objetsEnonceml) + mathalea2d(paramsEnonce, objetsEnonce);\n      // On ajoute au texte de la correction, la figure de la correction\n      texteCorr += mathalea2d(paramsCorrection, objetsCorrection);\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this); // On envoie l'exercice à la fonction de mise en page\n  };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  //\tthis.besoinFormulaireNumerique = ['Type de questions', 3, `1 : Perpendiculaires\\n 2 : Parallèles\\n 3 : Mélange`]\n  //  this.besoinFormulaire2Numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n} // Fin de l'exercice.\n\n"],"sourceRoot":""}