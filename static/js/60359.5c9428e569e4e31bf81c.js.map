{"version":3,"file":"js/60359.5c9428e569e4e31bf81c.js","mappings":"2LAGO,MAAMA,EAAQ,6CAeN,SAASC,IAEtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,IAAM,EACXD,KAAKH,MAAQA,EACbK,EAAAA,GAAAA,OACKF,KAAKG,SAAW,wCAChBH,KAAKG,SAAW,8BACrBD,EAAAA,GAAAA,OAAkBF,KAAKI,QAAU,EAAMJ,KAAKI,QAAU,EACtDF,EAAAA,GAAAA,OAAkBF,KAAKK,YAAc,EAAML,KAAKK,YAAc,EAC9DL,KAAKM,YAAc,EACnBN,KAAKO,+BAAgC,EACrCP,KAAKQ,WAAa,EAClBR,KAAKC,IAAM,EAEXD,KAAKS,cAAgB,SAErBT,KAAKU,gBAAkB,SAAUC,GAC/B,IAAIC,EACJZ,KAAKa,YAAaC,EAAAA,EAAAA,KAChBH,EACA,sCACA,qDACA,gBAGFX,KAAKe,eAAiB,GACtBf,KAAKgB,iBAAmB,GAExB,IAAIC,EAA8B,GAClB,GAAZjB,KAAKC,IACPgB,EAA8B,CAAC,GACV,GAAZjB,KAAKC,IACdgB,EAA8B,CAAC,GACV,GAAZjB,KAAKC,IACdgB,EAA8B,CAAC,GACV,GAAZjB,KAAKC,IACdgB,EAA8B,CAAC,GACV,GAAZjB,KAAKC,MACdgB,EAA8B,CAAC,EAAG,EAAG,EAAG,IAG1C,IAAIC,GAAuBC,EAAAA,EAAAA,KACzBF,EACAjB,KAAKM,aAIHc,EAAQ,MACRC,EAAQ,OAEZ,IACE,IACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAZIC,EAAI,EAaRC,EAAM,EACND,EAAIlC,KAAKM,aAAe6B,EAAM,IAE9B,CAEA,SAASC,EAAoBZ,EAAMC,EAAYY,GAC7C,IAAIC,EAAS,GAUb,OATId,EAAO,GAAKa,EAAW,GAAK,IAC9BC,GAAW,OACXA,GAAW,IAAEC,EAAAA,EAAAA,KAAU,wHAAuHC,EAAAA,EAAAA,KAAiBhB,EAAMa,sBAA6BZ,MAAeY,OAE/Mb,EAAO,GAAKa,EAAW,GAAK,IAC9BC,GAAW,QACXA,GAAW,IAAEC,EAAAA,EAAAA,KAAU,kIAAiIC,EAAAA,EAAAA,KAAiBhB,EAAMa,uBAA8BZ,MAAeY,OAGvNC,EAoBT,OAjBA1B,EAAmBM,EAAqBgB,GAExCV,GAAOiB,EAAAA,EAAAA,KAAQ,EAAG,IAAKC,EAAAA,EAAAA,KAAO,EAAE,EAAG,IACnChB,GAAOe,EAAAA,EAAAA,KAAQ,EAAG,GAClBd,GAAOc,EAAAA,EAAAA,KAAQ,EAAG,EAAG,CAACf,IACtBE,EAAM,CAACF,EAAMC,GACbI,GAASY,EAAAA,EAAAA,KAAoBT,EAAI,GAG/BT,EADED,EAAO,EACI,IAAMA,EAAO,IAEbA,EAIfS,EAAa,GAELrB,GACN,KAAK,EACHoB,EAAS,IAAGD,KAAUN,KAAcG,EAAI,aAAaH,KAAcG,EAAI,MAEvEK,GAAc,IAAGF,KAAUN,KAAcG,EAAI,aAAaH,KAAcG,EAAI,MACxE5B,KAAK4C,sBACPX,GAAc,OACdA,GAAc,IAAGF,MAAUc,EAAAA,EAAAA,KACzBpB,EACAG,EAAI,GACJR,eACWyB,EAAAA,EAAAA,KAAgBpB,EAAYG,EAAI,GAAIP,OAEnDY,GAAc,OACdA,GAAc,sCAA0CL,EAAI,uCAA2CA,EAAI,gCAAgCH,KAC3IQ,GAAc,OACdA,GAAc,IAAGF,KAAUN,MAAeG,EAAI,MAAMA,EAAI,SAASH,MAAeG,EAAI,GAAKA,EAAI,OAGxFJ,EAAO,IAAQI,EAAI,GAAKA,EAAI,IAAM,GAAK,IAC1CK,GAAc,MAAIO,EAAAA,EAAAA,KAAiBhB,EAAMI,EAAI,GAAKA,EAAI,QAExDK,GAAaG,EAAoBZ,EAAMC,EAAYG,EAAI,GAAKA,EAAI,IAChEK,GAAc,OAEd,MACF,KAAK,EAECa,KAAKC,IAAInB,EAAI,GAAIA,EAAI,KAAOA,EAAI,IAClCC,EAAYT,EACZU,EAAYT,IAEZQ,EAAYR,EACZS,EAAYV,GAGdY,EAAS,IAAGD,aAAkBN,KAAcG,EAAI,OAAOH,KAAcG,EAAI,OAEzEK,GAAc,IAAGF,aAAkBN,KAAcG,EAAI,OAAOH,KAAcG,EAAI,OAC1E5B,KAAK4C,sBACPX,GAAc,WACdA,GAAc,IAAGF,cAAkBc,EAAAA,EAAAA,KAAgBpB,EAAYG,EAAI,GAAIC,QAAegB,EAAAA,EAAAA,KAAgBpB,EAAYG,EAAI,GAAIE,QAE5HG,GAAc,WACdA,GAAc,uCAA0Ca,KAAKE,IAAIpB,EAAI,GAAIA,EAAI,+BAA+BH,gBACxGzB,KAAK4C,sBACPX,GAAc,YAEZL,EAAI,GAAKA,EAAI,IAAM,GACjB5B,KAAK4C,sBACPX,GAAc,IAAGF,cAAkBc,EAAAA,EAAAA,KAChC,YAAWpB,KACZG,EAAI,GACJC,QACIgB,EAAAA,EAAAA,KACH,YAAWpB,KACZG,EAAI,GACJE,QAGJG,GAAc,WACdA,GAAc,IAAGF,QACRH,EAAI,GAAKA,EAAI,GAAK,GACvB5B,KAAK4C,sBACPX,GAAc,IAAGF,cAAkBc,EAAAA,EAAAA,KAChC,YAAWpB,KACZG,EAAI,GACJC,QACIgB,EAAAA,EAAAA,KACH,YAAWpB,KACZG,EAAI,GACJE,aACSe,EAAAA,EAAAA,KACTpB,EACAG,EAAI,GAAKA,EAAI,GACbE,QAGJG,GAAc,WACdA,GAAc,IAAGF,gBAAqBN,MAAeG,EAAI,MAAMA,EAAI,mBAAmBH,MAAeG,EAAI,GAAKA,EAAI,QAE7GJ,EAAO,IAAQI,EAAI,GAAKA,EAAI,IAAM,GAAK,EAC1CK,GAAc,iBAAeO,EAAAA,EAAAA,KAC3BhB,EACAI,EAAI,GAAKA,EAAI,SAETY,EAAAA,EAAAA,KAAiBhB,EAAMI,EAAI,GAAKA,EAAI,OAE1CK,GAAc,KAAIR,MAAeG,EAAI,GAAKA,EAAI,SAG5C5B,KAAK4C,sBACPX,GAAc,IAAGF,cAAkBc,EAAAA,EAAAA,KAChC,YAAWpB,KACZG,EAAI,GACJC,aACSgB,EAAAA,EAAAA,KACTpB,EACAG,EAAI,GAAKA,EAAI,GACbC,QACIgB,EAAAA,EAAAA,KACH,YAAWpB,KACZG,EAAI,GACJE,QAGJG,GAAc,WACdA,GAAc,IAAGF,KAAUN,MAAeG,EAAI,MAAMA,EAAI,OAAOH,MAAeG,EAAI,GAAKA,EAAI,OAEtFJ,EAAO,IAAQI,EAAI,GAAKA,EAAI,IAAM,GAAK,IAC1CK,GAAc,MAAIO,EAAAA,EAAAA,KAAiBhB,EAAMI,EAAI,GAAKA,EAAI,SAG1DK,GAAaG,EAAoBZ,EAAMC,EAAYG,EAAI,GAAKA,EAAI,IAChEK,GAAc,OACd,MACF,KAAK,EACHL,EAAM,EAACa,EAAAA,EAAAA,KAAQ,EAAG,IAAIA,EAAAA,EAAAA,KAAQ,EAAG,IACjCT,EAAS,IAAGD,MAAWN,KAAcG,EAAI,QAAQA,EAAI,OAErDK,GAAc,IAAGF,MAAWN,KAAcG,EAAI,QAAQA,EAAI,OACtD5B,KAAK4C,sBACPX,GAAc,OACdA,GAAc,IAAGF,gCAAyCc,EAAAA,EAAAA,KACvD,IAAGpB,KAAcG,EAAI,MACtBA,EAAI,GACJR,QACKQ,EAAI,oCACXK,GAAc,OACdA,GAAc,IAAGF,gCAAyCc,EAAAA,EAAAA,KACvD,gCAAkCA,EAAAA,EAAAA,KACjCpB,EACAG,EAAI,GACJP,QACKO,EAAI,gDACXA,EAAI,GACJR,QACKQ,EAAI,0BAA8BA,EAAI,sDAG/CK,GAAc,OACdA,GAAc,sCAA0CL,EAAI,6CAAiDA,EAAI,gCAAgCH,KACjJQ,GAAc,OACdA,GAAc,IAAGF,KAAUN,MAAeG,EAAI,YAAYA,EAAI,SACrDH,MAAeG,EAAI,GAAKA,EAAI,OAEhCJ,EAAO,GAAQI,EAAI,GAAKA,EAAI,GAAM,GAAK,IAC1CK,GAAc,OAAKO,EAAAA,EAAAA,KAAiBhB,EAAMI,EAAI,GAAKA,EAAI,QAEzDK,GAAaG,EAAoBZ,EAAMC,EAAYG,EAAI,GAAKA,EAAI,IAChEK,GAAc,OACd,MACF,KAAK,EACHX,GAAQmB,EAAAA,EAAAA,KAAQ,EAAG,EAAG,CAAC,EAAG,IAC1BlB,GAAQkB,EAAAA,EAAAA,KAAQ,EAAG,EAAG,CAAC,EAAG,EAAGnB,IAC7BE,EAAO,CAACF,EAAOC,GACfK,GAAMa,EAAAA,EAAAA,KAAQ,EAAG,EAAG,GACpBT,EAAS,IAAGD,KAAUP,EAAK,MAAMI,YAAcJ,EAAK,MAAMI,KAC1DK,GAAc,OACdA,GAAc,IAAGF,KAAUP,EAAK,MAAMI,YAAcJ,EAAK,MAAMI,KAC3D5B,KAAK4C,sBACPX,GAAc,OACdA,GAAc,IAAGF,MAAUc,EAAAA,EAAAA,KACzBrB,EAAK,GACLI,EACAR,eACWyB,EAAAA,EAAAA,KAAgBrB,EAAK,GAAII,EAAKP,MAC3CY,GAAc,OACdA,GAAc,IAAGF,MAAUkB,EAAAA,EAAAA,KACzBzB,EAAK,GACLA,EAAK,GACLI,EACAR,EACAC,OAGJY,GAAc,OACdA,GAAc,IAAGF,6BAAuCP,EAAK,uDACFA,EAAK,yBACvCI,OAASJ,EAAK,GAAKA,EAAK,MAAMI,KACvDK,GAAc,QAI0B,IAAxCjC,KAAKe,eAAemC,QAAQlB,KAE9BhC,KAAKe,eAAeoC,KAAKnB,GACzBhC,KAAKgB,iBAAiBmC,KAAKlB,GAC3BC,KAEFC,KAEFiB,EAAAA,EAAAA,KAAkCpD,OAEpCA,KAAKqD,0BAA4B,CAC/B,qBACA,EACA,oL,gBCtTW,SAAStD,IAItBC,KAAKH,MAAQ,GACbG,KAAKa,YAAa,EAclBb,KAAKG,SAAW,GAChBH,KAAKsD,mBAAqB,GAC1BtD,KAAKuD,aAAe,GACpBvD,KAAKe,eAAiB,GACtBf,KAAKgB,iBAAmB,GACxBhB,KAAKwD,QAAU,GACfxD,KAAKyD,kBAAoB,GACzBzD,KAAK0D,eAAiB,GACtB1D,KAAK2D,sBAAwB,GAK7B3D,KAAKI,QAAU,EACfJ,KAAKK,YAAc,EAKnBL,KAAK4D,mBAAoB,EACzB5D,KAAKS,cAAgB,GACrBT,KAAK6D,oBAAqB,EAC1B7D,KAAK8D,uBAAwB,EAC7B9D,KAAK+D,OAAS,EACd/D,KAAKQ,WAAa,EAClBR,KAAKgE,kBAAmB,EACxBhE,KAAKiE,sBAAuB,EAC5BjE,KAAKkE,mBAAoB,EACzBlE,KAAKmE,uBAAwB,EAM7BnE,KAAKoE,QAAS,EACdpE,KAAKqE,gBAAkB,GAKvBrE,KAAKM,YAAc,GACnBN,KAAKO,+BAAgC,EACrCP,KAAK4C,qBAAsB,EAC3B5C,KAAKsE,MAAQ,GAEbtE,KAAKuE,YAAa,EAClBvE,KAAKwE,uBAAwB,EAE7BxE,KAAKqD,2BAA4B,EACjCrD,KAAKyE,uBAAwB,EAC7BzE,KAAK0E,6BAA8B,EAEnC1E,KAAK2E,4BAA6B,EAClC3E,KAAK4E,wBAAyB,EAC9B5E,KAAK6E,8BAA+B,EAEpC7E,KAAK8E,4BAA6B,EAClC9E,KAAK+E,wBAAyB,EAC9B/E,KAAKgF,8BAA+B,EAMpChF,KAAKiF,cAAe,EAMpBjF,KAAKkF,eAAiB,GAEtBlF,KAAKU,gBAAkB,SAAUC,KAQjCX,KAAKmF,oBAAsB,SAAUjD,KAAMkD,GAC/B,IAANlD,IAASlC,KAAKkF,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIxF,KAAKkF,eAAehC,QAAQmC,IAAmB,KAGjDrF,KAAKkF,eAAe/B,KAAKkC,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/4e/4C33-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenuSansNumero,randint,choice,combinaisonListes,lettreDepuisChiffre,texteGras,simpNotPuissance,eclatePuissance,reorganiseProduitPuissance,modalPdf} from '../../modules/outils.js'\nexport const titre = 'Puissances : Le sens des règles de calculs'\n\n/**\n * Puissances d'un relatif (1)\n * * L’objectif est de travailler le sens des règles de calcul sur les puissances plutôt que les formules magiques\n *\n * Paramétrages possibles :\n * * 1 : produit de puissances de même base\n * * 2 : quotient de puissances de même base\n * * 3 : puissance de puissance\n * * 4 : produit de puissances de même exposant\n * * 5 : mélange des trois autres niveaux\n * @author Sébastien Lozano\n * 4C33-1\n */\nexport default function Puissances_d_un_relatif_1() {\n  \"use strict\";\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = 1;\n  this.titre = titre;\n  context.isHtml\n    ? (this.consigne = \"Écrire sous la forme $\\\\mathbf{a^n}$.\")\n    : (this.consigne = \"Écrire sous la forme $a^n$.\");\n  context.isHtml ? (this.spacing = 3) : (this.spacing = 2);\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1);\n  this.nbQuestions = 5;\n  this.correctionDetailleeDisponible = true;\n  this.nbColsCorr = 1;\n  this.sup = 5;\n\n  this.listePackages = 'bclogo';\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions;\n    this.boutonAide = modalPdf(\n      numeroExercice,\n      \"assets/pdf/FichePuissances-4N21.pdf\",\n      \"Aide mémoire sur les puissances (Sébastien Lozano)\",\n      \"Aide mémoire\"\n    );\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = [];\n    if (this.sup == 1) {\n      typesDeQuestionsDisponibles = [1]; // produit de puissances de même base\n    } else if (this.sup == 2) {\n      typesDeQuestionsDisponibles = [2]; // quotient de puissances de même base\n    } else if (this.sup == 3) {\n      typesDeQuestionsDisponibles = [3]; // puissance de puissance\n    } else if (this.sup == 4) {\n      typesDeQuestionsDisponibles = [4]; // produit de puissances de même exposant\n    } else if (this.sup == 5) {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4]; // mélange\n    }\n\n    let listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    );\n\n    // pour pouvoir adapter les couleurs en cas de besoin\n    let coul0 = \"red\";\n    let coul1 = \"blue\";\n\n    for (\n      let i = 0,\n      base0,\n      base1,\n      base,\n      base_utile,\n      exp0,\n      exp1,\n      exp,\n      coul_exp0,\n      coul_exp1,\n      lettre,\n      texte,\n      texteCorr,\n      cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      // une fonction pour des infos supp sur les exposants\n      function remarquesPuissances(base, base_utile, exposant) {\n        let sortie = '';\n        if (base < 0 && exposant % 2 == 0) {\n          sortie += `<br>`;\n          sortie += `${texteGras('Remarque : ')} Dans ce cas comme les puissances d'exposant pair de deux nombres opposés sont égaux, on peut écrire $${simpNotPuissance(base, exposant)}$ à la place de $${base_utile}^{${exposant}}$`;\n        };\n        if (base < 0 && exposant % 2 == 1) {\n          sortie += `$<br>`;\n          sortie += `${texteGras('Remarque : ')} Dans ce cas comme les puissances d'exposant impair de deux nombres négatifs sont opposées, on pourrait écrire $${simpNotPuissance(base, exposant)}$  à la place de $${base_utile}^{${exposant}}$`;\n        };\n\n        return sortie;\n      };\n\n      typesDeQuestions = listeTypeDeQuestions[i];\n\n      base = randint(2, 9) * choice([-1, 1]); // on choisit une base sauf 1 ... penser à gérer le cas des bases qui sont des puissances\n      exp0 = randint(1, 9);\n      exp1 = randint(1, 9, [exp0]);\n      exp = [exp0, exp1]; // on choisit deux exposants différents c'est mieux\n      lettre = lettreDepuisChiffre(i + 1); // on utilise des lettres pour les calculs\n\n      if (base < 0) {\n        base_utile = \"(\" + base + \")\"; // on définit une base avec des parenthèses pour l'affichage du cas negatif\n      } else {\n        base_utile = base;\n      }\n\n\n      texteCorr = ``;\n\n      switch (typesDeQuestions) {\n        case 1: // produit de puissances de même base\n          texte = `$${lettre}=${base_utile}^${exp[0]}\\\\times ${base_utile}^${exp[1]}$`;\n\n          texteCorr += `$${lettre}=${base_utile}^${exp[0]}\\\\times ${base_utile}^${exp[1]}$`;\n          if (this.correctionDetaillee) {\n            texteCorr += `<br>`;\n            texteCorr += `$${lettre}=${eclatePuissance(\n              base_utile,\n              exp[0],\n              coul0\n            )} \\\\times ${eclatePuissance(base_utile, exp[1], coul1)}$`;\n          }\n          texteCorr += `<br>`;\n          texteCorr += `Il y a donc $\\\\mathbf{\\\\color{${coul0}}{${exp[0]}}~\\\\color{black}{+}~\\\\color{${coul1}}{${exp[1]}}}$ facteurs tous égaux à $${base_utile}$`;\n          texteCorr += `<br>`;\n          texteCorr += `$${lettre}=${base_utile}^{${exp[0]}+${exp[1]}} = ${base_utile}^{${exp[0] + exp[1]}}$`;\n          // attention la base_utile est de type str alors que la fonction switch sur un type number\n          //if (simpNotPuissance(base, exp[0] + exp[1]) != ` `) {\n          if ((base < 0) && ((exp[1] + exp[0]) % 2 == 0)) {\n            texteCorr += `$=${simpNotPuissance(base, exp[1] + exp[0])}$`;\n          };\n          texteCorr += remarquesPuissances(base, base_utile, exp[1] + exp[0]);\n          texteCorr += `<br>`;\n\n          break;\n        case 2: // quotient de puissances de même base\n          // Pour que la couleur de la base associée à l'exposant max soit toujours rouge.\n          if (Math.max(exp[0], exp[1]) == exp[0]) {\n            coul_exp0 = coul0;\n            coul_exp1 = coul1;\n          } else {\n            coul_exp0 = coul1;\n            coul_exp1 = coul0;\n          };\n\n          texte = `$${lettre}=\\\\dfrac{${base_utile}^${exp[0]}}{${base_utile}^${exp[1]}}$`;\n\n          texteCorr += `$${lettre}=\\\\dfrac{${base_utile}^${exp[0]}}{${base_utile}^${exp[1]}}$`;\n          if (this.correctionDetaillee) {\n            texteCorr += `<br><br>`;\n            texteCorr += `$${lettre}=\\\\dfrac{${eclatePuissance(base_utile, exp[0], coul_exp0)}}{${eclatePuissance(base_utile, exp[1], coul_exp1)}}$`;\n          }\n          texteCorr += `<br><br>`;\n          texteCorr += `Il y a donc $\\\\mathbf{\\\\color{${coul1}}{${Math.min(exp[0], exp[1])}}}$ simplifications par $${base_utile}$ possibles.`;\n          if (this.correctionDetaillee) {\n            texteCorr += `<br><br>`;\n          }\n          if (exp[0] - exp[1] == 0) {\n            if (this.correctionDetaillee) {\n              texteCorr += `$${lettre}=\\\\dfrac{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[0],\n                coul_exp0\n              )}}{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[0],\n                coul_exp1\n              )}}$`;\n            }\n            texteCorr += `<br><br>`;\n            texteCorr += `$${lettre}=1$`;\n          } else if (exp[0] - exp[1] < 0) {\n            if (this.correctionDetaillee) {\n              texteCorr += `$${lettre}=\\\\dfrac{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[0],\n                coul_exp0\n              )}}{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[0],\n                coul_exp1\n              )}\\\\times${eclatePuissance(\n                base_utile,\n                exp[1] - exp[0],\n                coul_exp1\n              )}}$`;\n            }\n            texteCorr += `<br><br>`;\n            texteCorr += `$${lettre}=\\\\dfrac{1}{${base_utile}^{${exp[1]}-${exp[0]}}}=\\\\dfrac{1}{${base_utile}^{${exp[1] - exp[0]}}}$`;\n            //if (simpNotPuissance(base, exp[1] - exp[0]) != ` `) {\n            if ((base < 0) && ((exp[1] - exp[0]) % 2 == 0)) {\n              texteCorr += `$=\\\\dfrac{1}{${simpNotPuissance(\n                base,\n                exp[1] - exp[0]\n                //)}}=${simpNotPuissance(base, exp[0] - exp[1])}`;\n              )}}=${simpNotPuissance(base, exp[0] - exp[1])}$`;\n            } else {\n              texteCorr += `$=${base_utile}^{${exp[0] - exp[1]}}$`;\n            }\n          } else {\n            if (this.correctionDetaillee) {\n              texteCorr += `$${lettre}=\\\\dfrac{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[1],\n                coul_exp0\n              )}\\\\times${eclatePuissance(\n                base_utile,\n                exp[0] - exp[1],\n                coul_exp0\n              )}}{${eclatePuissance(\n                `\\\\cancel{${base_utile}}`,\n                exp[1],\n                coul_exp1\n              )}}$`;\n            }\n            texteCorr += `<br><br>`;\n            texteCorr += `$${lettre}=${base_utile}^{${exp[0]}-${exp[1]}}=${base_utile}^{${exp[0] - exp[1]}}$`;\n            //if (simpNotPuissance(base, exp[0] - exp[1]) != ` `) {\n            if ((base < 0) && ((exp[0] - exp[1]) % 2 == 0)) {\n              texteCorr += `$=${simpNotPuissance(base, exp[0] - exp[1])}$`;\n            }\n          }\n          texteCorr += remarquesPuissances(base, base_utile, exp[0] - exp[1]);\n          texteCorr += `<br>`;\n          break;\n        case 3: // exponentiation\n          exp = [randint(2, 4), randint(2, 4)]; // on redéfinit les deux exposants pour ne pas avoir d'écritures trop longues et pour éviter 1\n          texte = `$${lettre}=(${base_utile}^${exp[0]})^{${exp[1]}}$`;\n\n          texteCorr += `$${lettre}=(${base_utile}^${exp[0]})^{${exp[1]}}$`;\n          if (this.correctionDetaillee) {\n            texteCorr += `<br>`;\n            texteCorr += `$${lettre}=\\\\color{${coul0}}{\\\\underbrace{${eclatePuissance(\n              `(${base_utile}^${exp[0]})`,\n              exp[1],\n              coul0\n            )}}_{${exp[1]}\\\\thickspace\\\\text{facteurs}}}$`;\n            texteCorr += `<br>`;\n            texteCorr += `$${lettre}=\\\\color{${coul0}}{\\\\underbrace{${eclatePuissance(\n              `(\\\\color{${coul1}}{\\\\underbrace{${eclatePuissance(\n                base_utile,\n                exp[0],\n                coul1\n              )}}_{${exp[0]}\\\\thickspace\\\\text{facteurs}}}\\\\color{${coul0}})`,\n              exp[1],\n              coul0\n            )}}_{${exp[1]}\\\\times\\\\color{${coul1}}{${exp[0]\n              }}\\\\thickspace\\\\color{black}{\\\\text{facteurs}}}}$`;\n          }\n          texteCorr += `<br>`;\n          texteCorr += `Il y a donc $\\\\mathbf{\\\\color{${coul0}}{${exp[1]}}~\\\\color{black}{\\\\times}~\\\\color{${coul1}}{${exp[0]}}}$ facteurs tous égaux à $${base_utile}$`;\n          texteCorr += `<br>`;\n          texteCorr += `$${lettre}=${base_utile}^{${exp[0]}\\\\times${exp[1]\n            }} = ${base_utile}^{${exp[0] * exp[1]}}$`;\n          //if (simpNotPuissance(base, exp[0] * exp[1]) != ` `) {\n          if ((base < 0) && ((exp[1] * exp[0]) % 2 == 0)) {\n            texteCorr += `$= ${simpNotPuissance(base, exp[0] * exp[1])}$`;\n          }\n          texteCorr += remarquesPuissances(base, base_utile, exp[0] * exp[1]);\n          texteCorr += `<br>`;\n          break;\n        case 4: // produit de puissances de même exposant\n          base0 = randint(2, 8, [4, 6]);\n          base1 = randint(2, 8, [4, 6, base0]);\n          base = [base0, base1]; // on choisit 2 bases différentes c'est mieux\n          exp = randint(2, 5, 6); // on choisit un exposant\n          texte = `$${lettre}=${base[0]}^${exp}\\\\times ${base[1]}^${exp}$`;\n          texteCorr += `<br>`;\n          texteCorr += `$${lettre}=${base[0]}^${exp}\\\\times ${base[1]}^${exp}$`;\n          if (this.correctionDetaillee) {\n            texteCorr += `<br>`;\n            texteCorr += `$${lettre}=${eclatePuissance(\n              base[0],\n              exp,\n              coul0\n            )} \\\\times ${eclatePuissance(base[1], exp, coul1)}$`;\n            texteCorr += `<br>`;\n            texteCorr += `$${lettre}=${reorganiseProduitPuissance(\n              base[0],\n              base[1],\n              exp,\n              coul0,\n              coul1\n            )}$`;\n          }\n          texteCorr += `<br>`;\n          texteCorr += `$${lettre}= (\\\\color{${coul0}}{\\\\mathbf{${base[0]\n            }}} \\\\color{black}{\\\\times} \\\\color{${coul1}}{\\\\mathbf{${base[1]\n            }}}\\\\color{black}{)^{${exp}}}=${base[0] * base[1]}^${exp}$`;\n          texteCorr += `<br>`;\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenuSansNumero(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Règle à travailler\",\n    5,\n    \"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\",\n  ];\n}\n\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Puissances_d_un_relatif_1","Exercice","this","sup","context","consigne","spacing","spacingCorr","nbQuestions","correctionDetailleeDisponible","nbColsCorr","listePackages","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","coul0","coul1","base0","base1","base","base_utile","exp0","exp1","exp","coul_exp0","coul_exp1","lettre","texte","texteCorr","i","cpt","remarquesPuissances","exposant","sortie","texteGras","simpNotPuissance","randint","choice","lettreDepuisChiffre","correctionDetaillee","eclatePuissance","Math","max","min","reorganiseProduitPuissance","indexOf","push","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}