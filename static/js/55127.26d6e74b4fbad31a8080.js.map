{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N23-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","EcrireNombresDecimal","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","parseInt","consigne","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","nombre","tranche","partEnt","partDec","i","cpt","splice","j","randint","push","choice","calcul","context","texNombre","nombreEnLettres","replace","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/55127.26d6e74b4fbad31a8080.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, nombreEnLettres } from '../../modules/outils.js'\nexport const titre = 'Écrire un nombre décimal en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * 6N23-0\n */\n\nexport default function EcrireNombresDecimal () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.nouvelleVersion = function () {\n    if (parseInt(this.sup) === 2) { this.consigne = 'Écrire le nombre en chiffres' } else { this.consigne = 'Écrire le nombre en lettres' }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const typesDeQuestionsDisponibles = [parseInt(this.sup2) + 1] // <1 000, <1 000 000)\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, partEnt, partDec, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        partEnt = 0\n        partDec = 0\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 1; j < listeTypeDeQuestions[i]; j++) {\n          partEnt += tranche[j] * 10 ** ((j - 1) * 3)\n          // nombre += tranche[j] * 10 ** ((j-1)*3)\n        }\n        partDec = tranche[0]\n        nombre = calcul(partEnt + partDec / 1000)\n        // if (tranche[listeTypeDeQuestions[i]-1]==0) nombre=0\n        if (tranche[1] < 2) nombre = 0\n        if (tranche[0] === 0) nombre = 0\n      }\n      if (parseInt(this.sup) === 1) {\n        if (!context.isDiaporama) texte = `$${texNombre(nombre)}$ : \\\\dotfill`\n        else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}.`\n        else texteCorr = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)}.`\n      } else {\n        if (!context.isDiaporama) texte = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)} : \\\\dotfill`\n        else texte = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(partEnt)} unités et ${nombreEnLettres(partDec)} : $${texNombre(nombre)}$.`\n        else texteCorr = `$${texNombre(nombre)}$.`\n      }\n      texte = texte.replace('et-un unités', 'et-une unités')\n      texteCorr = texteCorr.replace('et-un unités', 'et-une unités')\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercice', 2, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres']\n  this.besoinFormulaire2Numerique = ['Classe maximum', 2, '1 : Unités\\n2 : Milliers']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}