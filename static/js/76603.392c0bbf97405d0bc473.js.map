{"version":3,"file":"js/76603.392c0bbf97405d0bc473.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2G30-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, reduireAxPlusB, ecritureAlgebrique, ecritureParentheseSiNegatif, ecritureAlgebriqueSauf1 } from '../../modules/outils.js'\nexport const titre = 'Déterminer une équation cartésienne de droite à partir de deux points.'\n// totoche\n/**\n * Description didactique de l'exercice\n * @author Stéphane Guyon\n * Référence 2G30-3, ex 2G51\n*/\nexport default function equationcartesienne () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Déterminer une équation cartésienne de la droite $(AB)$'\n  this.nbQuestions = 3\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 2 // Niveau de difficulté\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typeQuestionsDisponibles = ['cartesienne1']\n    const listeTypeQuestions = combinaisonListes(typeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, xA, yA, xB, yB, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'cartesienne1':\n          xA = randint(-5, 5)\n          yA = randint(-5, 5)\n          xB = randint(-5, 5)\n          yB = randint(-5, 5)\n          if (xA === xB & yA === yB) {\n            xB = xB + randint(1, 2)\n            yB = yB - randint(1, 2)\n          }\n          texte = `avec les point $A$ et $B$ de coordonnées : $A(${xA};${yA})$ et $B(${xB};${yB})$ `\n          texteCorr = 'On sait qu\\'une équation cartésienne de la droite $(AB)$ est de la forme :'\n          texteCorr += ' $(AB) : ax+by+c=0$, avec $(a;b)\\\\neq (0;0)$.'\n          texteCorr += '<br>On sait aussi que dans ces conditions, un vecteur directeur de cette droite a pour coordonnées :'\n          texteCorr += ' $\\\\vec {u} \\\\begin{pmatrix}-b\\\\\\\\a\\\\end{pmatrix}$'\n          texteCorr += ' <br>Il suffit donc de trouver un vecteur directeur à cette droite pour déterminer une valeur possible pour les coefficients $a$ et $b$. <br>Or le vecteur $\\\\overrightarrow{AB}$ est un vecteur directeur directeur de la droite, dont on peut calculer les coordonnées :'\n          texteCorr += ' <br>$\\\\overrightarrow{AB}  \\\\begin{pmatrix}x_B-x_A\\\\\\\\y_B-y_A\\\\end{pmatrix}$'\n          texteCorr += ` $\\\\iff\\\\overrightarrow{AB}  \\\\begin{pmatrix} ${xB}-${ecritureParentheseSiNegatif(xA)}\\\\\\\\${yB}-${ecritureParentheseSiNegatif(yA)}\\\\end{pmatrix}$`\n          texteCorr += ` $\\\\iff\\\\overrightarrow{AB}  \\\\begin{pmatrix} ${xB - xA}\\\\\\\\${yB - yA}\\\\end{pmatrix}$`\n          texteCorr += ` <br>On en déduit donc que :$-b = ${xB - xA}$ et $a=${yB - yA}$`\n          texteCorr += ` <br>L'équation cartésienne est donc de la forme : $ ${yB - yA} x ${ecritureAlgebriqueSauf1(xA - xB)} y + c=0$ `\n          texteCorr += `<br>On cherche maintenant la valeur correspondante de $c$. <br>On utilise pour cela que $A(${xA};${yA}) \\\\in(AB)$ `\n          texteCorr += ` <br>$\\\\iff ${yB - yA} \\\\times ${ecritureParentheseSiNegatif(xA)} ${ecritureAlgebriqueSauf1(xA - xB)} \\\\times ${ecritureParentheseSiNegatif(yA)}+ c=0$ `\n          texteCorr += ` <br>$\\\\iff  ${yB * xA - yA * xA} ${ecritureAlgebrique(xA * yA - xB * yA)} + c=0$ `\n          texteCorr += ` <br>$\\\\iff  c= ${-xA * yA + xB * yA - yB * xA + yA * xA}$ `\n          if (-xA * yA + xB * yA - yB * xA + yA * xA !== 0) {\n            if (xB - xA === 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} ${ecritureAlgebrique(-xA * yA + xB * yA - yB * xA + yA * xA)}=0$ ` } else {\n              if (xA - xB === 1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} +y ${ecritureAlgebrique(-xA * yA + xB * yA - yB * xA + yA * xA)}=0$ ` }\n              if (xA - xB === -1 & yB - yA !== 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} -y ${ecritureAlgebrique(-xA * yA + xB * yA - yB * xA + yA * xA)}=0$ ` }\n              if (xA - xB === -1 & yB - yA === 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): y ${ecritureAlgebrique(-xA * yA + xB * yA - yB * xA + yA * xA)}=0$ ` }\n              if (xA - xB !== 0 & xA - xB !== 1 & xA - xB !== -1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (AB): ${reduireAxPlusB(yB - yA, xA - xB)}y ${ecritureAlgebrique(-xA * yA + xB * yA - yB * xA + yA * xA)}=0$ ` }\n            }\n          } else {\n            if (xB - xA === 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} =0$ ` } else {\n              if (xA - xB === 1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} +y =0$ ` }\n              if (xA - xB === -1 & yB - yA !== 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yB - yA, 0)} -y =0$ ` }\n              if (xA - xB === -1 & yB - yA === 0) { texteCorr += ' <br>Une équation cartésienne est donc de la forme : $ (d): y =0$ ' }\n              if (xA - xB !== 0 & xA - xB !== 1 & xA - xB !== -1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (AB): ${reduireAxPlusB(yB - yA, xA - xB)}y =0$ ` }\n            }\n          }\n          break\n      }\n      if (this.questionJamaisPosee(i, xA, yA, xB, yB)) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","equationcartesienne","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","nouvelleVersion","listeQuestions","listeCorrections","listeTypeQuestions","combinaisonListes","xA","yA","xB","yB","texte","texteCorr","i","cpt","randint","ecritureParentheseSiNegatif","ecritureAlgebriqueSauf1","ecritureAlgebrique","reduireAxPlusB","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}