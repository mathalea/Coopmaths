{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G20.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Nommer_et_coder_des_polygones","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","Xmin","Xmax","Ymin","Ymax","ppc","sc","g","carreaux","params","listeQuestions","listeCorrections","context","liste","combinaisonListes","texte","texteCorr","i","cpt","pol","polcode","polsom","polnom","choisir_polygone","n","A","B","C","D","pnom","q","p","pcode","enonce","nom","creerNomDePolygone","point","randint","rotation","polygone","barycentre","listePoints","nommePolygone","codeSegments","codeAngle","similitude","codageAngleDroit","carre","translation","vecteur","homothetie","length","Math","floor","min","x","y","ceil","max","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","seyes","epaisseur","mathalea2d","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/6706.bcb3e33261418879751c.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListes,creerNomDePolygone} from '../../modules/outils.js'\nimport {point,barycentre,vecteur,polygone,carre,nommePolygone,translation,rotation,homothetie,similitude,codageAngleDroit,codeSegments,codeAngle,grille,seyes,mathalea2d} from '../../modules/2d.js'\nexport const titre = 'Nommer et coder des polygones'\n\n/**\n * @author Jean-Claude Lhote\n * Placer les sommets et les égalités de longueur...\n * Référence 6G20\n */\nexport default function Nommer_et_coder_des_polygones() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"Nommer les figures en fonction de l'énoncé puis ajouter le codage.\";\n  this.nbQuestions = 4;\n  this.nbCols = 2;\n  this.nbColsCorr = 2;\n  this.sup = 3;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, ppc, sc, g, carreaux\n    ppc = 40\n    if (context.isHtml) {\n      sc = 0.5\n    } else {\n      sc = 0.4\n    }\n\n    let params\n\n    let liste = combinaisonListes([1, 2, 3, 4, 5, 6, 7, 8], this.nbQuestions);\n\n    for (\n      let i = 0, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      context.pixelsParCm = 40;\n      let pol, polcode, polsom, polnom\n      function choisir_polygone(n) { // n compris entre 1 et 8 (1 à 4 pour un triangle, 5 à 8 pour une quadrilatère)\n        let A, B, C, D\n        let nom = creerNomDePolygone(4, \"PQ\"), pnom, q, p, pcode, enonce\n        switch (n) {\n          case 1: // triangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, randint(25, 80), nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est isocèle en $${nom[0]}$.<br>`\n            break\n          case 2: // triangle équilatéral\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 60, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C, B, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est équilatéral.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 3: // triangle rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = similitude(B, A, 90, randint(30, 100) / 100, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = codageAngleDroit(B, A, C)\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle en $${nom[0]}$.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 4: // triangle rectangle isocèle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(0, 10) / 10, nom[1])\n            C = rotation(B, A, 90, nom[2])\n            q = polygone(A, B, C)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2])\n            pcode = [codeSegments('||', 'blue', A, B, A, C), codageAngleDroit(B, A, C), codeAngle(B, C, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(C, B, A, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le triangle $${nom[0] + nom[1] + nom[2]}$ est rectangle et isocèle en $${nom[0]}$.`\n            break\n          //on choisit un quadrilatère \n          case 5: // carré\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            q = carre(A, B)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, B, C, C, D, D, A), codageAngleDroit(B, A, D), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un carré.<br>$\\\\phantom{et sa longueur est AB}$`\n            break\n          case 6: // rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = similitude(A, B, -90, randint(30, 80) / 100, nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('||', 'blue', A, B, C, D), codeSegments('|', 'red', C, B, A, D), codageAngleDroit(B, A, C), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(A, D, C)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un rectangle et $${nom[0] + nom[1]}$ est sa longueur.`\n            break\n          case 7: // losange\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            C = rotation(A, B, randint(100, 150), nom[2])\n            D = translation(C, vecteur(B, A), nom[3])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codeSegments('O', 'blue', A, B, B, C, C, D, D, A), codeAngle(C, D, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(C, B, A, 0.8, '||', 'red', 2, 0.8, 'red', 0.2), codeAngle(B, C, D, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2), codeAngle(D, A, B, 0.8, '|', 'blue', 2, 0.8, 'blue', 0.2)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un losange et [$${nom[0] + nom[2]}$] est sa plus grande diagonale.`\n            break\n          case 8: // trapèze rectangle\n            A = point(3, randint(0, 20) / 10, nom[0])\n            B = point(randint(7, 8), randint(10, 30) / 10, nom[1])\n            D = similitude(B, A, 90, randint(30, 80) / 100, nom[3])\n            C = translation(D, homothetie(vecteur(A, B), A, randint(30, 80) / 100), nom[2])\n            q = polygone(A, B, C, D)\n            p = rotation(q, barycentre(q), randint(0, 360))\n            A = p.listePoints[0]\n            B = p.listePoints[1]\n            C = p.listePoints[2]\n            D = p.listePoints[3]\n            pnom = nommePolygone(p, nom[0] + nom[1] + nom[2] + nom[3])\n            pcode = [codageAngleDroit(B, A, D), codageAngleDroit(C, D, A)]\n            enonce = `le quadrilatère $${nom[0] + nom[1] + nom[2] + nom[3]}$ est un trapèze rectangle de grande base $${nom[0] + nom[1]}$ de hauteur $${nom[0] + nom[3]}$.`\n            break\n        }\n        return [p, nom, pcode, pnom, enonce]\n      }\n      [pol, polnom, polcode, polsom, texte] = choisir_polygone(liste[i]);\n      if (pol.listePoints.length == 4) {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x, pol.listePoints[3].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y, pol.listePoints[3].y) + 1)\n      }\n      else {\n        Xmin = Math.floor(Math.min(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) - 1)\n        Ymin = Math.floor(Math.min(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) - 1)\n        Xmax = Math.ceil(Math.max(pol.listePoints[0].x, pol.listePoints[1].x, pol.listePoints[2].x) + 1)\n        Ymax = Math.ceil(Math.max(pol.listePoints[0].y, pol.listePoints[1].y, pol.listePoints[2].y) + 1)\n\n      }\n      params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: ppc,\n        scale: sc,\n      }\n      if (this.sup < 3) g = grille(Xmin, Ymin, Xmax, Ymax, \"gray\", 0.7);\n      else g = ''\n      if (this.sup == 2) {\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax);\n      } else {\n        carreaux = \"\";\n      }\n\n      pol.epaisseur = 2\n      texte += `<br>` + mathalea2d(params, pol, polnom, g, carreaux)\n      texteCorr = mathalea2d(params, pol, polnom, polcode, polsom, g, carreaux)\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n    context.pixelsParCm = 20\n  };\n  this.besoinFormulaireNumerique = [\n    \"Type de cahier\",\n    3,\n    `1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`,\n  ];\n}\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}