{"version":3,"file":"js/32649.323928dc0bcd778fddfe.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6M12.js","webpack://mathalea/./src/js/exercices/6e/_ExerciceConversionsLongueurs.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import ExerciceConversionsLongueurs from './_ExerciceConversionsLongueurs.js'\nexport const titre = 'Convertir des longueurs'\nexport { interactifReady, interactifType, amcReady, amcType } from './_ExerciceConversionsLongueurs.js'\n/** */\n// Référence 6M12\nexport default function Reglages6M12 () {\n  ExerciceConversionsLongueurs.call(this)\n  this.titre = titre\n  this.sup = 3\n  this.nbQuestions = 8\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, arrondi, texNombre, texTexte, calcul } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = 'true'\nexport const amcType = 'AMCNum'\n\n/**\n * Conversions de longueur en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * * 1 : De dam, hm, km vers m\n * * 2 : De dm, cm, mm vers m\n * * 3 : Conversions en mètres\n * * 4 : Toutes les conversions de longueurs\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n */\nexport default function ExerciceConversionsLongueurs (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.titre = 'Conversions de longueurs'\n  this.consigne = 'Compléter : '\n  this.spacing = 2\n\n  this.nouvelleVersion = function () {\n    const reponses = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const prefixeMulti = [\n      [' da', 10],\n      [' h', 100],\n      [' k', 1000]\n    ]\n    const prefixeDiv = [\n      [' d', 10],\n      [' c', 100],\n      [' m', 1000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    const listeUnite1 = combinaisonListes([0, 1, 2, 3, 4, 5, 6], this.nbQuestions)\n    const listek = combinaisonListes([0, 1, 2], this.nbQuestions)\n    const listeDeDecimaux = combinaisonListes(['entier', 'XX,X', '0,X', '0,0X', 'X,XX'], this.nbQuestions)\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let typesDeQuestions\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 4)\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = listek[i] // Plutôt que de prendre un préfix au hasard, on alterne entre 10,100 et 1000\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        switch (listeDeDecimaux[i]) {\n          case 'entier':\n            a = randint(1, 99)\n            break\n          case 'XX,X':\n            a = arrondi(randint(1, 19) + randint(1, 9) / 10, 1)\n            break\n          case '0,X':\n            a = arrondi(randint(1, 9) / 10, 1)\n            break\n          case '0,0X':\n            a = arrondi(randint(1, 9) / 100, 2)\n            break\n          case 'X,XX':\n            a = arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        }\n        // entier ou\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        resultat = calcul(a * prefixeMulti[k][1]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte = `$${texNombre(a)} ${texTexte(prefixeMulti[k][0] + unite)} = `\n        texte += (this.interactif && context.isHtml) ? `$${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: '&nbsp;&nbsp;&nbsp; ' + unite })}` : `\\\\dotfill  ${texTexte(unite)}$`\n\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          texNombre(prefixeMulti[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        resultat = calcul(a / prefixeDiv[k][1]).toString() // Attention aux notations scientifiques pour 10e-8\n        texte = `$${texNombre(a)} ${texTexte(prefixeDiv[k][0] + unite)} = `\n        texte += (this.interactif && context.isHtml) ? `$${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: '&nbsp;&nbsp;&nbsp; ' + unite })}` : `\\\\dotfill  ${texTexte(unite)}$`\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\div' +\n          texNombre(prefixeDiv[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '$'\n      } else {\n        // pour type de question = 4\n        let unite1 = listeUnite1[i]\n        let unite2 = randint(Math.max(0, unite1 - 3), Math.min(unite1 + 3, 6), unite1)\n        if (unite1 > unite2) {\n          [unite1, unite2] = [unite2, unite1]\n        }\n        const ecart = unite2 - unite1 // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, ecart))\n          texte = `$${texNombre(a)} ${texTexte(listeUnite[unite2])} = `\n          texte += (this.interactif && context.isHtml) ? `$${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: '&nbsp;&nbsp;&nbsp; ' + listeUnite[unite1] })}` : `\\\\dotfill  ${texTexte(listeUnite[unite1])}$`\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\times' +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(listeUnite[unite1]) +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '$'\n        } else {\n          resultat = calcul(a / Math.pow(10, ecart))\n          texte = `$${texNombre(a)} ${texTexte(listeUnite[unite1])} = `\n          texte += (this.interactif && context.isHtml) ? `$${ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texteApres: '&nbsp;&nbsp;&nbsp; ' + listeUnite[unite2] })}` : `\\\\dotfill  ${texTexte(listeUnite[unite2])}$`\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\div' +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(listeUnite[unite2]) +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '$'\n        }\n      }\n\n      if (reponses.indexOf(resultat) === -1) {\n        reponses[i] = resultat\n        setReponse(this, i, resultat.toString().replace('.', ','))\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 4, ' 1 : De dam, hm, km vers m\\n 2 : De dm, cm, mm vers m\\n 3 : Conversions en mètres\\n4 : Mélange']\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Reglages6M12","ExerciceConversionsLongueurs","this","sup","nbQuestions","interactifReady","interactifType","amcReady","amcType","niveau","Exercice","sup2","consigne","spacing","nouvelleVersion","reponses","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","listeUnite1","combinaisonListes","listek","listeDeDecimaux","a","k","div","resultat","texte","texteCorr","i","cpt","typesDeQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","interactif","context","ajouteChampTexteMathLive","texteApres","unite1","unite2","Math","max","min","ecart","pow","indexOf","setReponse","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}