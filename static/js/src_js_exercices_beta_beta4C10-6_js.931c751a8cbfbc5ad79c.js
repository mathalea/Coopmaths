/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_beta_beta4C10-6_js"],{

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice() {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigneCorrection = '';\n  this.listeQuestions = [];\n  this.listeCorrections = [];\n  this.introduction = '';\n  this.contenu = '';\n  this.contenuCorrection = '';\n  this.nbQuestions = 10;\n  this.nbCols = 2;\n  this.nbColsCorr = 2;\n  this.spacing = 1;\n  this.spacingCorr = 1;\n  this.beamer = false;\n  this.besoinFormulaireNumerique = false; // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n\n  this.besoinFormulaireTexte = false; // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n\n  this.besoinFormulaireCaseACocher = false; // Sinon this.besoinFormulaireCaseACocher = [texte];\n\n  this.consigneModifiable = true;\n  this.nbQuestionsModifiable = true;\n  this.nbColsModifiable = true;\n  this.nbColsCorrModifiable = true;\n  this.spacingModifiable = true;\n  this.spacingCorrModifiable = true;\n  this.correctionDetailleeDisponible = false;\n  this.correctionDetaillee = true;\n  this.video = '';\n  this.boutonAide = false;\n  this.tailleDiaporama = 50; // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  this.pasDeVersionLatex = false;\n  this.qcm = false; // Pour les exercices de type QCM : contient un tableau.\n\n  this.qcmDisponible = false; // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n\n  this.modeQcm = false; // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false; // pas d'interface par défaut pour les figures MG32\n\n  this.nouvelleVersion = function (numeroExercice) {};\n\n  this.listePackages = []; // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZXhlcmNpY2VzL0NsYXNzZUV4ZXJjaWNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0aGFsZWEvLi9zcmMvanMvZXhlcmNpY2VzL0NsYXNzZUV4ZXJjaWNlLmpzP2RiNDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogIENsYXNzZSBwYXJlbnRlIGRlIHRvdXMgbGVzIGV4ZXJjaWNlc1xuICpcbiAqIEBBdXRldXIgUsOpbWkgQW5nb3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXhlcmNpY2UgKCkge1xuICAvLyBDbGFzc2UgcGFyZW50ZSBkZSB0b3VzIGxlcyBleGVyY2ljZXMgcXVpIHNlcm9udCBjcsOpw6lzXG4gIHRoaXMudGl0cmUgPSAnJ1xuICB0aGlzLmNvbnNpZ25lID0gJydcbiAgdGhpcy5jb25zaWduZUNvcnJlY3Rpb24gPSAnJ1xuICB0aGlzLmxpc3RlUXVlc3Rpb25zID0gW11cbiAgdGhpcy5saXN0ZUNvcnJlY3Rpb25zID0gW11cbiAgdGhpcy5pbnRyb2R1Y3Rpb24gPSAnJ1xuICB0aGlzLmNvbnRlbnUgPSAnJ1xuICB0aGlzLmNvbnRlbnVDb3JyZWN0aW9uID0gJydcbiAgdGhpcy5uYlF1ZXN0aW9ucyA9IDEwXG4gIHRoaXMubmJDb2xzID0gMlxuICB0aGlzLm5iQ29sc0NvcnIgPSAyXG4gIHRoaXMuc3BhY2luZyA9IDFcbiAgdGhpcy5zcGFjaW5nQ29yciA9IDFcbiAgdGhpcy5iZWFtZXIgPSBmYWxzZVxuXG4gIHRoaXMuYmVzb2luRm9ybXVsYWlyZU51bWVyaXF1ZSA9IGZhbHNlIC8vIFNpbm9uIHRoaXMuYmVzb2luRm9ybXVsYWlyZU51bWVyaXF1ZSA9IFt0ZXh0ZSxtYXgsdG9vbHRpcCBmYWN1bHRhdGlmXTtcbiAgdGhpcy5iZXNvaW5Gb3JtdWxhaXJlVGV4dGUgPSBmYWxzZSAvLyBTaW5vbiB0aGlzLmJlc29pbkZvcm11bGFpcmVUZXh0ZSA9IFt0ZXh0ZSx0b29sdGlwXTtcbiAgdGhpcy5iZXNvaW5Gb3JtdWxhaXJlQ2FzZUFDb2NoZXIgPSBmYWxzZSAvLyBTaW5vbiB0aGlzLmJlc29pbkZvcm11bGFpcmVDYXNlQUNvY2hlciA9IFt0ZXh0ZV07XG4gIHRoaXMuY29uc2lnbmVNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLm5iUXVlc3Rpb25zTW9kaWZpYWJsZSA9IHRydWVcbiAgdGhpcy5uYkNvbHNNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLm5iQ29sc0NvcnJNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLnNwYWNpbmdNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLnNwYWNpbmdDb3JyTW9kaWZpYWJsZSA9IHRydWVcbiAgdGhpcy5jb3JyZWN0aW9uRGV0YWlsbGVlRGlzcG9uaWJsZSA9IGZhbHNlXG4gIHRoaXMuY29ycmVjdGlvbkRldGFpbGxlZSA9IHRydWVcbiAgdGhpcy52aWRlbyA9ICcnXG4gIHRoaXMuYm91dG9uQWlkZSA9IGZhbHNlXG4gIHRoaXMudGFpbGxlRGlhcG9yYW1hID0gNTAgLy8gVGFpbGxlIGVuIHBpeGVscyBwb3VyIGxlIGNhbGN1bCBjaHJvbm9tw6l0csOpXG4gIC8vIHRoaXMuYm91dG9uQWlkZSA9IG1vZGFsVGV4dGVDb3VydChudW1lcm9FeGVyY2ljZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlXCIsaWNvbmU9XCJpbmZvIGNpcmNsZVwiKVxuICAvLyB0aGlzLmJvdXRvbkFpZGUgPSBtb2RhbFRleHRlTG9uZyhudW1lcm9FeGVyY2ljZSx0aXRyZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlXCIsaWNvbmU9XCJpbmZvIGNpcmNsZVwiKVxuICAvLyB0aGlzLmJvdXRvbkFpZGUgPSBtb2RhbFlvdXR1YmUobnVtZXJvRXhlcmNpY2UsaWRfeW91dHViZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlIC0gVmlkw6lvXCIsaWNvbmU9XCJ5b3V0dWJlXCIpXG4gIC8vIHRoaXMuYm91dG9uQWlkZSA9IG1vZGFsUGRmKG51bWVyb0V4ZXJjaWNlLHVybF9wZGYsdGV4dGU9XCJBaWRlXCIsbGFiZWxfYm91dG9uPVwiQWlkZSAtIFBERlwiLGljb25lPVwiZmlsZSBwZGZcIilcbiAgLy8gdGhpcy52c3BhY2UgPSAtMSAvL0Fqb3V0ZSB1biBcXHZzcGFjZXstMWNtfSBhdmFudCBsJ8Opbm9uY8OpIGNlIHF1aSBwZXV0IMOqdHJlIHByYXRpcXVlIHBvdXIgZGVzIGV4ZXJjaWNlcyBhdmVjIGRlcyBmaWd1cmVzLlxuICB0aGlzLnBhc0RlVmVyc2lvbkxhdGV4ID0gZmFsc2VcbiAgdGhpcy5xY20gPSBmYWxzZSAvLyBQb3VyIGxlcyBleGVyY2ljZXMgZGUgdHlwZSBRQ00gOiBjb250aWVudCB1biB0YWJsZWF1LlxuICB0aGlzLnFjbURpc3BvbmlibGUgPSBmYWxzZSAvLyBQb3VyIGFqb3V0ZXIgdW5lIGNhc2Ugw6AgY29jaGVyIE1vZGUgUUNNIHF1aSBwZXJtZXQgZGUgY2hhbmdlciBsZSBzdGF0dXQgZGUgdGhpcy5tb2RlUWNtXG4gIHRoaXMubW9kZVFjbSA9IGZhbHNlIC8vIFBvdXIgY2hvaXNpciBsYSB2ZXJzaW9uIFFDTSBvdSBsYSB2ZXJzaW9uIGNsYXNzaXF1ZSAoZmFsc2UgPSB2ZXJzaW9uIGNsYXNzaXF1ZSlcblxuICB0aGlzLm1nMzJFZGl0YWJsZSA9IGZhbHNlIC8vIHBhcyBkJ2ludGVyZmFjZSBwYXIgZMOpZmF1dCBwb3VyIGxlcyBmaWd1cmVzIE1HMzJcbiAgdGhpcy5ub3V2ZWxsZVZlcnNpb24gPSBmdW5jdGlvbiAobnVtZXJvRXhlcmNpY2UpIHt9XG4gIHRoaXMubGlzdGVQYWNrYWdlcyA9IFtdIC8vIHN0cmluZyBvdSBsaXN0ZSBkZSBzdHJpbmcgYXZlYyBsZSBub20gZGVzIHBhY2thZ2VzIHNww6ljaWZpcXVlcyDDoCBham91dGVyIGRhbnMgbGUgcHLDqWFtYnVsZVxuICAvLyB0aGlzLnR5cGVFeGVyY2ljZSA9IFwiTUczMlwiO1xuICAvLyB0aGlzLmRpbWVuc2lvbnNEaXZNZzMyID0gWzUwMCwgNDUwXTtcbiAgLy8gdGhpcy50eXBlRXhlcmNpY2UgPSBcIlNjcmF0Y2hcIlxuICAvLyB0aGlzLnFjbT1bXCJRdWVscyBzb250IGxlcyBub21icmVzIHBhaXJzID9cIixbNywxMiwzNCwyNSwxOF0sWzAsMSwxLDAsMV1dID0+W1wiTGEgcXVlc3Rpb25cIixbbGVzIHLDqXBvbnNlc10sW2Jvbm5lPTEgZXQgbWF1dmFpc2U9MF1dXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/exercices/ClasseExercice.js\n");

/***/ }),

/***/ "./src/js/exercices/beta/beta4C10-6.js":
/*!*********************************************!*\
  !*** ./src/js/exercices/beta/beta4C10-6.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Exercice_tableau_multiplications_relatifs)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\nconst titre = 'Multiplications et quotients de relatifs : signe avec une lettre';\n/**\n* Effectuer des multiplications de relatifs dans un tableau à double entrée\n*\n* @Auteur Cédric GROLLEAU\n* 4C10-6\n*/\n\nfunction Exercice_tableau_multiplications_relatifs() {\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n\n  this.sup = 3;\n  this.titre = titre;\n  this.consigne = '';\n  this.correctionDetailleeDisponible = true;\n  this.correctionDetaillee = false;\n  this.spacing = 2;\n  this.nbQuestions = 3;\n  this.nbQuestionsModifiable = true;\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup);\n    this.listeQuestions = []; // Liste de questions\n\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let type_de_questions_disponibles;\n\n    switch (this.sup) {\n      case 1:\n        // multiplications\n        type_de_questions_disponibles = [1];\n        break;\n\n      case 2:\n        // Quotient\n        type_de_questions_disponibles = [2];\n        break;\n\n      case 3:\n        // multiplications et quotients\n        type_de_questions_disponibles = [1, 2];\n        break;\n\n      case 4:\n        // avec puissances\n        type_de_questions_disponibles = [3, 4];\n        break;\n\n      case 5:\n        // mélange\n        type_de_questions_disponibles = [1, 2, 3, 4];\n        break;\n    }\n\n    let listeTypeDeQuestions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaisonListes)(type_de_questions_disponibles, this.nbQuestions);\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // on ne choisit que des nombres compris entre 1 et 20\n      let nbMax = 20; // Le tableau des relatifs necessaires, il m'en faut max 5 !\n\n      let num = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Relatif((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nbMax), (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nbMax), (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nbMax), (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nbMax), (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nbMax));\n      let lettre_tab = ['n', 'x', 'y', 'a', 'm'];\n      let lettre = lettre_tab[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, lettre_tab.length - 1)];\n      let nom_expression = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.lettreDepuisChiffre)(i + 1);\n      let signe_expression = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n      let nb_termes = listeTypeDeQuestions[i] == 1 ? (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(3, 5) : (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(4, 6);\n      let place_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, nb_termes - 1);\n      let liste_nombres = num.relatifs.slice(0, nb_termes - 1);\n      let liste_termes = [];\n\n      for (let indice = 0; indice < liste_nombres.length; indice++) {\n        liste_termes.push((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureNombreRelatif)(liste_nombres[indice]));\n      }\n\n      liste_termes.splice(place_lettre, 0, lettre);\n      let calcul = \"\";\n      let signe_lettre, calcul_nombres;\n      texte = `Donne le signe de $ ${lettre} $ pour que ${nom_expression} soit ${signe_expression == -1 ? 'negatif' : 'positif'}. <br>`;\n      texteCorr = `${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons que \" + lettre + \" soit positif : \")}`;\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          // multiplications\n          calcul += `${liste_termes[0]} `;\n\n          for (let k = 1; k < nb_termes; k++) {\n            calcul += `\\\\times ${liste_termes[k]}`;\n          }\n\n          texte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\n          if (this.correctionDetaillee) {\n            //texteCorr += `<br> $ ${ecritureNombreRelatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n            //for (let k=1; k<nb_termes-2 ; k++) {\n            //\ttexteCorr += `  , $ ${ecritureNombreRelatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n            //}\n            //texteCorr += `  et $ ${ecritureNombreRelatif(liste_nombres[parseInt(nb_termes-2)])} $ est ${num.getSigneString()[parseInt(nb_termes-2)]}`;\n            liste_nombres.push(1);\n            texteCorr += `<br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n            texteCorr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre + \" est positif\", \"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres), \"black\")}.`;\n            texteCorr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons maintenant que \" + lettre + \" soit négatif : \")}`; //texteCorr += ` $ ${ecritureNombreRelatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n            //for (let k=1; k<nb_termes-1 ; k++) {\n            //\ttexteCorr += `  , $ ${ecritureNombreRelatif(liste_nombres[k])} $ est ${num.getSigneString()[k]} `\n            //}\n            //texteCorr += ` et ${lettre} est négatif.`;\n\n            liste_nombres.push(-1);\n            texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n            texteCorr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre + \" est négatif\", \"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres), \"black\")}.`;\n            texteCorr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Conclusion :\")} <br>` + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Il faut donc que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'négatif' : 'positif'} pour que ${nom_expression} soit ${signe_expression == -1 ? 'négatif' : 'positif'}`, \"black\");\n          } else {\n            texteCorr = `<br> Il faut que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'positif' : 'négatif'} pour que ${nom_expression} soit ${signe_expression == -1 ? 'négatif' : 'positif'}.`;\n          }\n\n          break;\n\n        case 2:\n          // quotient de 2 produits\n          calcul += '\\\\dfrac {' + liste_termes[0];\n          let nb_num = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2, nb_termes - 2);\n\n          for (let k = 1; k < nb_num + 1; k++) {\n            calcul += `\\\\times ${liste_termes[k]}`;\n          }\n\n          calcul += '}{' + liste_termes[nb_num + 1];\n\n          for (let denom = nb_num + 2; denom < nb_termes; denom++) {\n            calcul += `\\\\times ${liste_termes[denom]}`;\n          }\n\n          calcul += '}';\n          texte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\n          if (this.correctionDetaillee) {\n            //texteCorr += `$ ${ecritureNombreRelatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n            //for (let k=1; k<nb_termes-1 ; k++) {\n            //\ttexteCorr += `  et $ ${ecritureNombreRelatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n            //}\n            texteCorr += `<br> ${num.setRegleSigneQuotient(...liste_nombres)}`;\n            texteCorr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre + \" est positif\", \"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres), \"black\")}.`;\n            texteCorr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons maintenant que \" + lettre + \" soit négatif : \")}`; //$ ${ecritureNombreRelatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n            //for (let k=1; k<nb_termes-1 ; k++) {\n            //\ttexteCorr += `  et $ ${ecritureNombreRelatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n            //}\n\n            liste_nombres.push(-1);\n            texteCorr += `<br> ${num.setRegleSigneQuotient(...liste_nombres)}`;\n            texteCorr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre + \" est négatif\", \"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres), \"black\")}.`;\n            texteCorr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Conclusion :\")} <br>` + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Il faut donc que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'négatif' : 'positif'} pour que ${nom_expression} soit ${signe_expression == -1 ? 'négatif' : 'positif'}`, \"black\");\n          } else {\n            texteCorr = `<br> Il faut que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'positif' : 'négatif'} pour que ${nom_expression} soit ${signe_expression == -1 ? 'négatif' : 'positif'}.`;\n          }\n\n          break;\n\n        case 3:\n          // produit avec plusieurs fois la lettre\n          signe_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n          texte = `Donne le signe de ${nom_expression} si $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}. <br>`;\n          texteCorr = '';\n          let nb_lettres = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 3);\n          place_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, nb_termes - 1);\n\n          for (let k = 0; k < nb_lettres; k++) {\n            liste_termes.splice(place_lettre, 0, lettre);\n          }\n\n          calcul += `${liste_termes[0]} `;\n\n          for (let k = 1; k < nb_termes + nb_lettres; k++) {\n            calcul += `\\\\times ${liste_termes[k]}`;\n          }\n\n          calcul_nombres = `${liste_nombres[0]} `;\n\n          for (let k = 1; k < nb_termes - 1; k++) {\n            calcul_nombres += `\\\\times ${liste_nombres[k]}`;\n          }\n\n          texte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\n          if (this.correctionDetaillee) {\n            if (nb_lettres == 1 || nb_lettres == 3) {\n              texteCorr += `On trouve ${nb_lettres + 1} fois le facteur $ ${lettre} $.<br> Or ${nb_lettres + 1} est pair donc leur produit sera positif.`;\n              texteCorr += `<br>Le signe de l'expression a donc le signe de : $ ${calcul_nombres} $`;\n              texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n              texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.`, \"black\");\n            } else {\n              texteCorr += `On trouve ${nb_lettres + 1} fois le facteur $ ${lettre} $. <br> Or ${nb_lettres + 1} est impair donc leur produit est du signe de $ ${lettre} $ soit ${signe_lettre == -1 ? 'négatif' : 'positif'}.`;\n\n              if (signe_lettre == -1) {\n                texteCorr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n                texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n                liste_nombres.push(-1);\n                texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}.`, \"black\");\n              } else {\n                texteCorr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n                texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n                texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}.`, \"black\");\n              }\n            }\n          } else {\n            if (nb_lettres == 1 || nb_lettres == 3) {\n              texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.<br>`;\n            } else {\n              if (signe_lettre == -1) {\n                liste_nombres.push(-1);\n                texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est négatif.<br>`;\n              } else {\n                texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est positif.<br>`;\n              }\n            }\n          }\n\n          break;\n\n        case 4:\n          // produit avec plusieurs fois la lettre\n          signe_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n          texte = `Donne le signe de ${nom_expression} si $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}. <br>`;\n          texteCorr = '';\n          let exp_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2, 7);\n\n          if (place_lettre == 0) {\n            calcul += liste_termes[0] + \"^{\" + exp_lettre + \"}\";\n          } else {\n            calcul += liste_termes[0];\n          }\n\n          for (let k = 1; k < nb_termes; k++) {\n            if (k == place_lettre) {\n              calcul += '\\\\times ' + liste_termes[k] + \"^{\" + exp_lettre + \"}\";\n            } else {\n              calcul += '\\\\times ' + liste_termes[k];\n            }\n          }\n\n          calcul_nombres = `${liste_nombres[0]} `;\n\n          for (let k = 1; k < nb_termes - 1; k++) {\n            calcul_nombres += `\\\\times ${liste_nombres[k]}`;\n          }\n\n          texte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\n          if (this.correctionDetaillee) {\n            if (exp_lettre % 2 == 0) {\n              texteCorr += `On trouve ${exp_lettre} fois le facteur $ ${lettre} $.<br> Or ${exp_lettre} est pair donc leur produit sera positif.`;\n              texteCorr += `<br>Le signe de l'expression a donc le signe de : $ ${calcul_nombres} $`;\n              texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n              texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.`, \"black\");\n            } else {\n              texteCorr += `On trouve ${exp_lettre} fois le facteur $ ${lettre} $. <br> Or ${exp_lettre} est impair donc leur produit est du signe de $ ${lettre} $ soit ${signe_lettre == -1 ? 'négatif' : 'positif'}.`;\n\n              if (signe_lettre == -1) {\n                texteCorr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n                texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n                liste_nombres.push(-1);\n                texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}.`, \"black\");\n              } else {\n                texteCorr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n                texteCorr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n                texteCorr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre == -1 ? 'négatif' : 'positif'}.`, \"black\");\n              }\n            }\n          } else {\n            if (exp_lettre % 2 == 0) {\n              texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.<br>`;\n            } else {\n              if (signe_lettre == -1) {\n                liste_nombres.push(-1);\n                texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est négatif.<br>`;\n              } else {\n                texteCorr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est positif.<br>`;\n              }\n            }\n          }\n\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n\n      cpt++;\n    }\n\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.listeQuestionsToContenu)(this);\n  };\n\n  this.besoinFormulaireNumerique = [\"Niveau de difficulté\", 3, '1 : Multiplications\\n2 : Quotients \\n3 : Multiplications et quotients \\n4 : Multiplications avec plusieurs fois la lettre (dont puissances) \\n5 : Mélange '];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/exercices/beta/beta4C10-6.js\n");

/***/ })

}]);