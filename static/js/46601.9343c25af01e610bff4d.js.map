{"version":3,"file":"js/46601.9343c25af01e610bff4d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/1e/1E15.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["/* eslint-disable no-eval */\n/* eslint-disable no-unused-vars */\nimport { xcas, listeQuestionsToContenu, randint } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Equation du second degré avec paramètre'\nexport const dateDePublication = '30/10/2021'\n\n/**\n * Description didactique de l'exercice\n * @author Eric Schrafstetter\n * Référence 1E15\n*/\nexport default function equationDuSecondDegreAvecUnParametre () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Discutez, suivant la valeur du paramètre $m$, le $\\\\underline{\\\\text{nombre de solutions}}$ de l\\'équation du second degré'\n  this.nbQuestions = 2\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.typeExercice = 'XCas'\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (let i = 0, texte, etape, texteCorr, a, a2, b2, c2, f, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      a = randint(-5, 5, 0)\n      etape = [\n          `a:=${a}`,\n          'b:=randint(-2,2)*m+randint(-3,3)',\n          'c:=randint(-2,2)*m+randint(-3,3)',\n          'P:= a*x^2+b*x+c',\n          'D:=b^2-4*a*c',\n          'a2:=coeff(D,m,2)',\n          'b2:=coeff(D,m,1)',\n          'c2:=coeff(D,m,0)',\n          'd2:=simplify(b2^2-4*a2*c2)'\n      ].forEach(e => `${xcas(e)}`)\n      // Enoncé\n      texte = `$${xcas('expand(P)')}=0$`\n      // Corrigé\n      texteCorr = 'Ecrivons l\\'équation sous la forme $ax^2+bx+c=0$ :'\n      texteCorr += `<br>$${xcas('P')}=0$`\n      texteCorr += `<br>On a donc $a=${xcas('a')}$, $b=${xcas('b')}$ et $c=${xcas('c')}$`\n      texteCorr += `<br>Le discriminant vaut $\\\\Delta=b^2-4\\\\times a\\\\times c = ${xcas('D')}$`\n      texteCorr += `<br>Ou encore, sous forme développée : $\\\\Delta = ${xcas('simplify(D)')}$`\n      a2 = +`${xcas('a2')}` // coefficient \"a\" dans l'écriture de Delta\n      b2 = +`${xcas('b2')}` // coefficient \"b\" dans l'écriture de Delta\n      if (a2 === 0) { // Eq du 1er degré\n        etape = `${xcas('m1:=simplify(-c2/b2)')}`\n        if (b2 > 0) { // Delta est une droite croissante\n          texteCorr += `<br>Cherchons la valeur de $m$ qui annule cette expression du premier degré : $m=${xcas('m1')}$`\n          texteCorr += `<br>$\\\\Delta$ est une droite croissante de coefficient directeur $${xcas('b2')}$.`\n          texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ :'\n          texteCorr += `<br>- Si $m < ${xcas('m1')}$, l'équation n'a pas de solution réelle;`\n          texteCorr += `<br>- Si $m = ${xcas('m1')}$, l'équation a une unique solution réelle;`\n          texteCorr += `<br>- Si $m > ${xcas('m1')}$, l'équation a 2 solutions réelles;`\n        } else if (b2 < 0) { // Delta est une droite décroissante\n          texteCorr += `<br>Cherchons la valeur de $m$ qui annule cette expression du premier degré : $m=${xcas('m1')}$`\n          texteCorr += `<br>$\\\\Delta$ est une droite décroissante de coefficient directeur $${xcas('b2')}$.`\n          texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ :'\n          texteCorr += `<br>- Si $m < ${xcas('m1')}$, l'équation a 2 solutions réelles;`\n          texteCorr += `<br>- Si $m = ${xcas('m1')}$, l'équation a une unique solution réelle;`\n          texteCorr += `<br>- Si $m > ${xcas('m1')}$, l'équation n'a pas de solution réelle;`\n        } else { // Delta est constant\n          c2 = +`${xcas('c2')}` // coefficient \"c\" dans l'écriture de Delta\n          if (c2 === 0) {\n            texteCorr += '<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est nul. L\\'équation du départ admet donc toujours une unique solution.'\n          } else if (c2 > 0) {\n            texteCorr += '<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est strictement positif. L\\'équation du départ admet donc toujours 2 solutions.'\n          } else {\n            texteCorr += '<br>Quelque soit $m$ réel, on a $\\\\Delta$ qui est strictement négatif. L\\'équation du départ admet jamais de solution réelle.'\n          }\n        }\n      } else {\n        texteCorr += '<br>Cherchons les valeurs de $m$ qui annulent cette expression du second degré :'\n        texteCorr += `<br>Le discriminant $\\\\Delta^\\\\prime$ vaut : $\\\\Delta^\\\\prime =${xcas('d2')}$`\n        a = +`${xcas('d2')}` // valeur de Delta'\n        f = eval(`${xcas('ifactors(d2)')}`).some((v, i) => v > 1 && i % 2 === 1) // Y a-t-il des carrés dans Delta' ?\n        if (f && a > 0) {\n          texteCorr += ` (Remarquons que $\\\\sqrt{\\\\Delta^\\\\prime} =${xcas('simplify(sqrt(d2))')}$)`\n        }\n        if (a < 0) {\n          texteCorr += '<br>Celui-ci étant strictement négatif, l\\'équation n\\'a pas de solution et $\\\\Delta$ ne change pas de signe.'\n          if (a2 > 0) {\n            texteCorr += '<br>Comme le coefficient devant $m^2$ est positif, $\\\\Delta > 0$.'\n            texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ : L\\'équation du départ admet toujours 2 solutions.'\n          } else {\n            texteCorr += '<br>Comme le coefficient devant $m^2$ est négatif, $\\\\Delta < 0$.'\n            texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ : L\\'équation du départ n\\'a pas de solution réelle.'\n          }\n        } else if (a === 0) {\n          etape = `${xcas('m1:=simplify(-b2/(2*a2))')}`\n          texteCorr += `<br>Celui-ci étant nul, l'équation $\\\\Delta = 0$ a une unique solution $m=\\\\dfrac{-b}{2a}=${xcas('m1')}$.`\n          if (a2 > 0) {\n            texteCorr += `<br>De plus le coefficient $${xcas('a2')}$ devant $m^2$ étant positif, $\\\\Delta > 0$ si $m\\\\neq${xcas('m1')}$.`\n            texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : Si $m=${xcas('m1')}$ l'équation admet une unique solution, sinon l'équation admet 2 solutions.`\n          } else {\n            texteCorr += `<br>De plus le coefficient $${xcas('a2')}$ devant $m^2$ étant négatif, $\\\\Delta < 0$ si $m\\\\neq${xcas('m1')}$.`\n            texteCorr += `<br>$\\\\underline{\\\\text{Conclusion}}$ : Si $m=${xcas('m1')}$ l'équation admet une unique solution, sinon l'équation n'admet pas de solution.`\n          }\n        } else {\n          etape = `${xcas('m1:=min((-b2-sqrt(d2))/(2*a2),(-b2+sqrt(d2))/(2*a2))')}`\n          etape = `${xcas('m2:=max((-b2-sqrt(d2))/(2*a2),(-b2+sqrt(d2))/(2*a2))')}`\n          texteCorr += '<br>Celui-ci étant strictement positif, l\\'équation $\\\\Delta = 0$ a 2 solutions :'\n          texteCorr += `<br>$m_1=${xcas('m1')}\\\\simeq${xcas('approx(m1,4)')}$ et $m_2=${xcas('m2')}\\\\simeq${xcas('approx(m2,4)')}$`\n          if (a2 > 0) {\n            texteCorr += '<br>De plus le coefficient devant $m^2$ est positif, $\\\\Delta$ est donc une parabole avec ses branches dirigées vers le haut.'\n            texteCorr += '<br>$\\\\Delta$ est donc positif à l\\'extérieur des racines et négatif à l\\'intérieur.'\n            texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ :<br> - Si $m=m_1$ ou $m_2$, l\\'équation admet une unique solution,'\n            texteCorr += '<br>- Si $m\\\\in ]m_1,m_2[$, l\\'équation n\\'a pas de solution réelle,'\n            texteCorr += '<br>- Si $m\\\\in ]-\\\\infty,m_1[\\\\cup]m_2,+\\\\infty[$, l\\'équation admet 2 solutions réelles'\n          } else {\n            texteCorr += '<br>De plus le coefficient devant $m^2$ est négatif, $\\\\Delta$ est donc une parabole avec ses branches dirigées vers le bas.'\n            texteCorr += '<br>$\\\\Delta$ est donc négatif à l\\'extérieur des racines et positif à l\\'intérieur.'\n            texteCorr += '<br>$\\\\underline{\\\\text{Conclusion}}$ :<br> - Si $m=m_1$ ou $m_2$, l\\'équation admet une unique solution,'\n            texteCorr += '<br>- Si $m\\\\in ]m_1,m_2[$, l\\'équation admet 2 solutions réelles,'\n            texteCorr += '<br>- Si $m\\\\in ]-\\\\infty,m_1[\\\\cup]m_2,+\\\\infty[$, l\\'équation admet n\\'a pas de solution réelle'\n          }\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 3]\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDePublication","equationDuSecondDegreAvecUnParametre","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","typeExercice","context","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","i","texte","etape","texteCorr","a","a2","b2","c2","f","cpt","randint","forEach","e","xcas","eval","some","v","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}