{"version":3,"file":"js/71242.2db1099cb6ba754afbd4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2G12-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, ecritureParentheseSiNegatif, extraireRacineCarree, texRacineCarree, texNombre } from '../../modules/outils.js'\n\nexport const titre = 'Utiliser la distance entre deux points dans un repère orthonormé'\n\n/**\n * 2G12-1\n * @author Stéphane Guyon\n */\nexport default function Distance () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n\n  this.nbQuestions = 2\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1 //\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles = [1, 2, 3]; let typesDeQuestions\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = [1]\n    }\n    if (this.sup === 2) {\n      typesDeQuestionsDisponibles = [2, 3]\n    }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, ux, uy, xA, yA, xB, yB, xC, yC, AB, XAB, YAB, XAC, YAC, AC, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        // Cas par cas, on définit le type de nombres que l'on souhaite\n        // Combien de chiffres ? Quelles valeurs ?\n        case 1:\n\n          xA = randint(0, 5) * choice([-1, 1])\n          yA = randint(0, 5) * choice([-1, 1])\n          xB = randint(0, 5) * choice([-1, 1])\n          yB = randint(0, 5) * choice([-1, 1])\n          if (xB === xA && yA === yB) { xB = xB + randint(1, 5) * choice([-1, 1]) }\n          XAB = (xB - xA) * (xB - xA)\n          YAB = (yB - yA) * (yB - yA)\n          AB = XAB + YAB\n\n          texte = 'Dans un repère orthonormé $(O,I,J)$, on donne les points suivants :'\n          texte += ` $A\\\\left(${xA};${yA}\\\\right)$ et $B\\\\left(${xB};${yB}\\\\right)$`\n          texte += '<br>Calculer la distance $AB$ en justifiant le calcul.'\n\n          texteCorr = 'On sait d\\'après le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d\\'un repère orthonormé,'\n          texteCorr += ' alors on a : $AB=\\\\sqrt{\\\\left(x_B-x_A\\\\right)^{2}+\\\\left(y_B-y_A\\\\right)^{2}}.$<br>'\n          texteCorr += `On applique la relation à l'énoncé : $AB=\\\\sqrt{\\\\left(${xB}-${ecritureParentheseSiNegatif(xA)}\\\\right)^{2}+\\\\left(${yB}-${ecritureParentheseSiNegatif(yA)}\\\\right)^{2}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${XAB}+${YAB}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${texNombre(XAB + YAB)}}$<br>`\n          if (extraireRacineCarree(AB)[0] !== 1) { texteCorr += `$\\\\phantom{on applique la relation a l'enonce :   } AB=${texRacineCarree(AB)}$<br>` }\n          break\n        case 2:\n\n          xA = randint(0, 5) * choice([-1, 1])\n          yA = randint(0, 9) * choice([-1, 1])\n          ux = randint(0, 9) * choice([-1, 1])\n          uy = randint(0, 9) * choice([-1, 1])\n          xB = xA + ux\n          yB = yA + uy\n          xC = xA + uy * choice([-1, 1])\n          yC = yA + ux * choice([-1, 1])\n\n          XAB = (xB - xA) * (xB - xA)\n          YAB = (yB - yA) * (yB - yA)\n          AB = XAB + YAB\n          XAC = (xC - xA) * (xC - xA)\n          YAC = (yC - yA) * (yC - yA)\n          AC = XAC + YAC\n\n          texte = 'Dans un repère orthonormé (O,I,J), on donne les points suivants :'\n          texte += ` $A\\\\left(${xA};${yA}\\\\right)$ ; $B\\\\left(${xB};${yB}\\\\right)$`\n          texte += `<br>Le point $C\\\\left(${xC};${yC}\\\\right)$ appartient-il au cercle de centre $A$ passant par $B$ ?`\n\n          texteCorr = 'Le point $C$ appartient au cercle de centre $A$ passant par $B$ si et seulement si $CA=CB.$'\n          texteCorr += '<br>On calcule séparément donc ces deux distances :'\n          texteCorr += '<br>On sait d\\'après le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d\\'un repère orthonormé,'\n          texteCorr += ' alors on a : $AB=\\\\sqrt{\\\\left(x_B-x_A\\\\right)^{2}+\\\\left(y_B-y_A\\\\right)^{2}}$<br>'\n          texteCorr += `On applique la relation à l'énoncé : $AB=\\\\sqrt{\\\\left(${xB}-${ecritureParentheseSiNegatif(xA)}\\\\right)^{2}+\\\\left(${yB}-${ecritureParentheseSiNegatif(yA)}\\\\right)^{2}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${XAB}+${YAB}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${texNombre(XAB + YAB)}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :   } AB=${texRacineCarree(AB)}$<br>`\n          texteCorr += `De même : $AC=\\\\sqrt{\\\\left(${xC}-${ecritureParentheseSiNegatif(xA)}\\\\right)^{2}+\\\\left(${yC}-${ecritureParentheseSiNegatif(yA)}\\\\right)^{2}}$<br>`\n          texteCorr += `$\\\\phantom{De même :       } AC=\\\\sqrt{${XAC}+${YAC}}$<br>`\n          texteCorr += `$\\\\phantom{De même :       } AC=\\\\sqrt{${texNombre(XAC + YAC)}}$<br>`\n          if (extraireRacineCarree(AC)[0] !== 1) { texteCorr += `$\\\\phantom{on applique la relation a l'enonce :   } AC=${texRacineCarree(AC)}$<br>` }\n          texteCorr += 'On observe que $AC=AB$ donc le point $A$ est équidistant de $B$ et $C$.'\n          texteCorr += '<br>Le point $C$ appartient bien au cercle de centre $A$ et passant par $B$.'\n          break\n        case 3:\n\n          xA = randint(0, 5) * choice([-1, 1])\n          yA = randint(0, 9) * choice([-1, 1])\n          ux = randint(0, 9) * choice([-1, 1])\n          uy = randint(0, 9) * choice([-1, 1])\n          xB = xA + ux\n          yB = yA + uy\n          xC = xA + uy * choice([-1, 1]) + randint(1, 3)\n          yC = yA + ux * choice([-1, 1])\n\n          XAB = (xB - xA) * (xB - xA)\n          YAB = (yB - yA) * (yB - yA)\n          AB = XAB + YAB\n          XAC = (xC - xA) * (xC - xA)\n          YAC = (yC - yA) * (yC - yA)\n          AC = XAC + YAC\n\n          texte = 'Dans un repère orthonormé (O,I,J), on donne les points suivants :'\n          texte += ` $A\\\\left(${xA};${yA}\\\\right)$ ; $B\\\\left(${xB};${yB}\\\\right).$`\n          texte += `<br>Le point $C\\\\left(${xC};${yC}\\\\right)$ appartient-il au cercle de centre $A$ passant par $B$ ?`\n\n          texteCorr = 'Le point $C$ appartient au cercle de centre $A$ passant par $B$ si et seulement si $CA=CB.$'\n          texteCorr += '<br>On calcule séparément donc ces deux distances :'\n          texteCorr += '<br>On sait d\\'après le cours, que si $A(x_A;y_A)$ et $B(x_B;y_B)$ sont deux points d\\'un repère orthonormé,'\n          texteCorr += ' alors on a : $AB=\\\\sqrt{\\\\left(x_B-x_A\\\\right)^{2}+\\\\left(y_B-y_A\\\\right)^{2}}.$<br>'\n          texteCorr += `On applique la relation à l'énoncé : $AB=\\\\sqrt{\\\\left(${xB}-${ecritureParentheseSiNegatif(xA)}\\\\right)^{2}+\\\\left(${yB}-${ecritureParentheseSiNegatif(yA)}\\\\right)^{2}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${XAB}+${YAB}}$<br>`\n          texteCorr += `$\\\\phantom{on applique la relation a l'enonce :        } AB=\\\\sqrt{${texNombre(XAB + YAB)}}$<br>`\n          if (extraireRacineCarree(AB)[0] !== 1) { texteCorr += `$\\\\phantom{on applique la relation a l'enonce :   } AB=${texRacineCarree(AB)}$<br>` }\n          texteCorr += `De même : $AC=\\\\sqrt{\\\\left(${xC}-${ecritureParentheseSiNegatif(xA)}\\\\right)^{2}+\\\\left(${yC}-${ecritureParentheseSiNegatif(yA)}\\\\right)^{2}}$<br>`\n          texteCorr += `$\\\\phantom{De même :       } AC=\\\\sqrt{${XAC}+${YAC}}$<br>`\n          texteCorr += `$\\\\phantom{De même :       } AC=\\\\sqrt{${texNombre(XAC + YAC)}}$<br>`\n          if (extraireRacineCarree(AC)[0] !== 1) { texteCorr += `$\\\\phantom{on applique la relation a l'enonce :   } AC=${texRacineCarree(AC)}$<br>` }\n          texteCorr += 'On observe que $AC\\\\neq AB$ donc le point $C$ n\\'appartient pas au cercle de centre $A$ et passant par $B$'\n          break\n      }\n      if (this.questionJamaisPosee(i, xA, yA, xB, yB, typesDeQuestions)) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Application directe de la formule 2 : Application en situation']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Distance","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestions","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","ux","uy","xA","yA","xB","yB","xC","yC","AB","XAB","YAB","XAC","YAC","AC","texte","texteCorr","i","cpt","randint","choice","ecritureParentheseSiNegatif","texNombre","extraireRacineCarree","texRacineCarree","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}