{"version":3,"file":"js/97402.4de717a8ea298ff1a65a.js","mappings":"+QAKO,MAAMA,EAAQ,oDAERC,GAAkB,EAClBC,EAAiB,WAGjBC,EAAoB,aAWlB,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,YAAc,EAEnBD,KAAKE,sBAAwB,CAAC,kBAAmB,uLACjDF,KAAKG,IAAM,EACXH,KAAKI,uBAAyB,CAAC,uBAAwB,0NACvDJ,KAAKK,KAAO,EACZL,KAAKM,2BAA6B,CAAC,mBAAqB,EAAG,6IAC3DN,KAAKO,KAAO,EAEZP,KAAKQ,OAAS,EACdR,KAAKS,WAAa,EAClBT,KAAKU,gBAAkB,EACvBV,KAAKW,MAAQ,GAEbX,KAAKY,gBAAkB,WACrB,IAAIC,EAAiB,GACO,IAAxBC,SAASd,KAAKO,QAChBP,KAAKe,SAAW,+BAChBF,GAAiBG,EAAAA,EAAAA,KAAkB,CAAC,GAAIhB,KAAKC,cAEnB,IAAxBa,SAASd,KAAKO,QAChBP,KAAKe,SAAW,gCAChBF,GAAiBG,EAAAA,EAAAA,KAAkB,CAAC,GAAIhB,KAAKC,cAEnB,IAAxBa,SAASd,KAAKO,QAChBP,KAAKe,SAAW,sEAChBF,GAAiBG,EAAAA,EAAAA,KAAkB,CAAC,EAAG,GAAIhB,KAAKC,cAElDD,KAAKiB,eAAiB,GACtBjB,KAAKkB,iBAAmB,GACxBlB,KAAKmB,eAAiB,GAEtB,IAAIC,EAAuB,GACvBH,EAAiB,GACjBI,EAAqB,GACrBC,EAAe,GAEnB,GAAKtB,KAAKG,IAGR,GAA0B,iBAAdH,KAAKG,IACfH,KAAKG,IAAMoB,KAAKC,IAAID,KAAKE,IAAIX,SAASd,KAAKG,KAAM,GAAI,GACrDiB,EAAqB,GAAKpB,KAAKG,QAC1B,CACLiB,EAAuBpB,KAAKG,IAAIuB,MAAM,KACtC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAqBQ,OAAQD,IAC/CP,EAAqBO,IAAKE,EAAAA,EAAAA,KAAkB,EAAG,EAAGf,SAASM,EAAqBO,IAAK,QARzFP,EAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAY5C,GAAKpB,KAAKK,KAGR,GAA2B,iBAAfL,KAAKK,KACfL,KAAKK,KAAOkB,KAAKC,IAAID,KAAKE,IAAIX,SAASd,KAAKK,MAAO,GAAI,GACvDgB,EAAmB,GAAKrB,KAAKK,SACxB,CACLgB,EAAqBrB,KAAKK,KAAKqB,MAAM,KACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAmBO,OAAQD,IAC7CN,EAAmBM,GAAKJ,KAAKC,IAAID,KAAKE,IAAIX,SAASO,EAAmBM,IAAK,GAAI,QARnFN,EAAqB,CAAC,GAYxB,IAAK,IAAIM,EAAIN,EAAmBO,OAAQD,EAAI3B,KAAKC,YAAa0B,IAC5DN,EAAmBM,GAAK,EAG1BV,GAAiBD,EAAAA,EAAAA,KAAkBI,EAAsBpB,KAAKC,aAC9DqB,GAAeQ,EAAAA,EAAAA,KAAQT,GAEvB,IAAK,IAAWU,EAAOC,EAAdL,EAAI,EAAqBM,EAAM,EAAGN,EAAI3B,KAAKC,aAAegC,EAAM,IAAK,CAC5E,IAAIC,EACJ,OAAQZ,EAAaK,IACnB,KAAK,EAEDO,EADEjB,EAAeU,GAAK,GACNQ,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAIJ,KAAKa,IAAI,GAAInB,EAAeU,IAAM,GACpE,IAAtBV,EAAeU,IACRQ,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAI,GAAIb,KAAKa,IAAI,GAAI,GAAK,IAE/CD,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAI,IAAKb,KAAKa,IAAI,GAAI,IAAM,GAEnE,MACF,KAAK,EAEDF,EADEjB,EAAeU,GAAK,EACN,GAAK,IAAMJ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAIJ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAK,IAC9F,IAAtBV,EAAeU,GACR,GAAK,IAAMJ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAI,GAAIb,KAAKa,IAAI,GAAI,GAAK,IAErE,GAAK,IAAMb,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAI,GAAIb,KAAKa,IAAI,GAAI,IAAM,IAExF,MACF,KAAK,EAEDF,EADEjB,EAAeU,GAAK,EACN,IAAKQ,EAAAA,EAAAA,KAAQ,EAAG,IAAM,IAAMZ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAIJ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAK,IACrIV,EAAeU,GAAK,GACzBW,EAAAA,EAAAA,KAAO,EAAC,GAAM,IACAf,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,IAAMZ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAIJ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAK,MAAOQ,EAAAA,EAAAA,KAAQ,EAAG,KAEnK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,IAAM,IAAMZ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAIJ,KAAKa,IAAI,GAAInB,EAAeU,GAAK,GAAK,IAEjH,IAAtBV,EAAeU,GACE,KAAtBW,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,IACAf,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,SAClFG,EAAAA,EAAAA,KAAO,EAAC,GAAM,IACPf,KAAKa,IAAI,GAAI,IAAKD,EAAAA,EAAAA,KAAQ,IAAK,KAAOZ,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,IAAMZ,KAAKc,OAAMF,EAAAA,EAAAA,KAAQ,GAAI,OAAQA,EAAAA,EAAAA,KAAQ,EAAG,KAE/HZ,KAAKa,IAAI,GAAI,IAAKD,EAAAA,EAAAA,KAAQ,OAAQ,SAAW,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,IAGzE,KAAzBG,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,EAAG,IACHf,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,WAC5D,KAAtBG,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,IACPf,KAAKa,IAAI,GAAI,IAAKD,EAAAA,EAAAA,KAAQ,IAAK,KAAOZ,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,SACxHG,EAAAA,EAAAA,KAAO,EAAC,GAAM,IACPf,KAAKa,IAAI,GAAI,IAAKD,EAAAA,EAAAA,KAAQ,OAAQ,QAAUZ,KAAKa,IAAI,GAAI,IAAM,IAAKD,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,KAEvHZ,KAAKa,IAAI,GAAI,IAAKD,EAAAA,EAAAA,KAAQ,UAAW,WAAa,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,IAAM,KAAMA,EAAAA,EAAAA,KAAQ,EAAG,GAG7G,MACF,KAAK,EAEDD,EADEjB,EAAeU,GAAK,EACN,IAAMJ,KAAKc,MAAM,IAAKF,EAAAA,EAAAA,KAAQ,EAAIZ,KAAKa,IAAI,GAAIb,KAAKC,IAAIP,EAAeU,GAAK,GAAI,IAAKJ,KAAKa,IAAI,GAAIb,KAAKC,IAAIP,EAAeU,GAAK,EAAG,IAAM,IAAKQ,EAAAA,EAAAA,KAAQ,EAAG,IACzI,IAAtBlB,EAAeU,GACR,KAAmD,IAA5CQ,EAAAA,EAAAA,KAAQZ,KAAKa,IAAI,GAAI,GAAIb,KAAKa,IAAI,GAAI,KAAWD,EAAAA,EAAAA,KAAQ,EAAG,IAEnE,KAAmD,IAA5CA,EAAAA,EAAAA,KAAQZ,KAAKa,IAAI,GAAI,GAAIb,KAAKa,IAAI,GAAI,KAAWD,EAAAA,EAAAA,KAAQ,EAAG,IAK/D,IAAtBtB,EAAec,KACjBY,EAAAA,EAAAA,IAAWvC,KAAM2B,GAAGa,EAAAA,EAAAA,KAAgBN,IAE/BH,EADAU,EAAAA,GAAAA,YACS,KAAGC,EAAAA,EAAAA,KAAUR,MADQ,KAAGQ,EAAAA,EAAAA,KAAUR,MAAmBlC,KAAK2C,WAAgC,UAAWC,EAAAA,EAAAA,IAAyB5C,KAAM2B,GAA7D,mBAGhFK,EADAS,EAAAA,GAAAA,YACa,IAAED,EAAAA,EAAAA,KAAgBN,KADG,KAAGQ,EAAAA,EAAAA,KAAUR,UAAqBM,EAAAA,EAAAA,KAAgBN,QAGzFK,EAAAA,EAAAA,IAAWvC,KAAM2B,EAAGO,GAEfH,EADAU,EAAAA,GAAAA,YACS,IAAED,EAAAA,EAAAA,KAAgBN,KADG,KAAGM,EAAAA,EAAAA,KAAgBN,MAAmBlC,KAAK2C,WAAgC,UAAWC,EAAAA,EAAAA,IAAyB5C,KAAM2B,GAA7D,mBAGtFK,EADAS,EAAAA,GAAAA,YACa,KAAGC,EAAAA,EAAAA,KAAUR,MADQ,IAAEM,EAAAA,EAAAA,KAAgBN,UAAqBQ,EAAAA,EAAAA,KAAUR,OAKtFlC,KAAK6C,oBAAoBlB,EAAGI,KAC9B/B,KAAKiB,eAAe6B,KAAKf,GACzB/B,KAAKkB,iBAAiB4B,KAAKd,GAC3BL,KAEFM,KAEFc,EAAAA,EAAAA,KAAwB/C,S,gBC3Kb,SAASD,IAItBC,KAAKN,MAAQ,GACbM,KAAKgD,YAAa,EAclBhD,KAAKe,SAAW,GAChBf,KAAKiD,mBAAqB,GAC1BjD,KAAKkD,aAAe,GACpBlD,KAAKiB,eAAiB,GACtBjB,KAAKkB,iBAAmB,GACxBlB,KAAKmD,QAAU,GACfnD,KAAKoD,kBAAoB,GACzBpD,KAAKmB,eAAiB,GACtBnB,KAAKqD,sBAAwB,GAK7BrD,KAAKsD,QAAU,EACftD,KAAKuD,YAAc,EAKnBvD,KAAKwD,mBAAoB,EACzBxD,KAAKyD,cAAgB,GACrBzD,KAAK0D,oBAAqB,EAC1B1D,KAAK2D,uBAAwB,EAC7B3D,KAAKQ,OAAS,EACdR,KAAKS,WAAa,EAClBT,KAAK4D,kBAAmB,EACxB5D,KAAK6D,sBAAuB,EAC5B7D,KAAK8D,mBAAoB,EACzB9D,KAAK+D,uBAAwB,EAM7B/D,KAAKgE,QAAS,EACdhE,KAAKU,gBAAkB,EAKvBV,KAAKC,YAAc,GACnBD,KAAKiE,mBAAqB,EAC1BjE,KAAKkE,+BAAgC,EACrClE,KAAKmE,qBAAsB,EAC3BnE,KAAKoE,oBAAqB,EAC1BpE,KAAKW,MAAQ,GAEbX,KAAK2C,YAAa,EAClB3C,KAAKqE,uBAAwB,EAE7BrE,KAAKsE,2BAA4B,EACjCtE,KAAKE,uBAAwB,EAC7BF,KAAKuE,6BAA8B,EAEnCvE,KAAKwE,4BAA6B,EAClCxE,KAAKI,wBAAyB,EAC9BJ,KAAKyE,8BAA+B,EAEpCzE,KAAKM,4BAA6B,EAClCN,KAAK0E,wBAAyB,EAC9B1E,KAAK2E,8BAA+B,EAEpC3E,KAAK4E,4BAA6B,EAClC5E,KAAK6E,wBAAyB,EAC9B7E,KAAK8E,8BAA+B,EAMpC9E,KAAK+E,cAAe,EASpB/E,KAAKgF,eAAiB,GAMtBhF,KAAKY,gBAAkB,SAAUqE,KAQjCjF,KAAK6C,oBAAsB,SAAUlB,KAAMuD,GAC/B,IAANvD,IAAS3B,KAAKgF,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAItF,KAAKgF,eAAeO,QAAQJ,IAAmB,KAGjDnF,KAAKgF,eAAelC,KAAKqC,IAClB,I,wGC/HN,MAAMzF,EAAQ,6CAQN,SAAS8F,IACtBC,EAAAA,QAAAA,KAA0BzF,MAC1BA,KAAKK,KAAO,EACZL,KAAKG,IAAM","sources":["webpack://mathalea/./src/js/exercices/6e/6N10.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/c3/c3N10.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { randint, listeQuestionsToContenu, texNombre, combinaisonListes, choice, nombreEnLettres, shuffle, contraindreValeur } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Écrire un nombre entier en chiffres ou en lettres'\n\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n// Gestion de la date de publication initiale\nexport const dateDePublication = '19/09/2021'\n\n/**\n * Ecrire en chiffres ou en lettres un nombre entier inférieur à 1 000 000.\n * Avec des paramètres sur le nombre de chiffres des nombres voulus\n * Avec des paramètres sur la présence obligatoire de nombres avec 80 (et ses copains qui n'aiment pas mettre de S dans leur vin) et avec 100 (et ses copains comme ceux de 80)\n * Inspiration de 3A14\n * @author Eric Elter\n * Référence 6N10\n * Relecture : Novembre 2021 par EE\n*/\nexport default function EcrirePetitsNombresEntiers () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n\n  this.besoinFormulaireTexte = ['Type de nombres', ' Choix séparés par des tirets\\n2 : À deux chiffres\\n3 : À trois chiffres\\n4 : À quatre chiffres\\n5 : À cinq chiffres\\n6 : À six chiffres\\n7 : À neuf chiffres\\n8 : À douze chiffres']\n  this.sup = 4 // Valeur du paramètre par défaut\n  this.besoinFormulaire2Texte = ['Demande particulière', ' Choix séparés par des tirets\\n0 : Aucune demande particulière.\\n1 : Au moins un nombre se termine par 80.\\n2 : Au moins un nombre contient entre 81 et 99.\\n3 : Au moins un nombre se termine par un multiple de 100.']\n  this.sup2 = 0 // Valeur du paramètre par défaut\n  this.besoinFormulaire3Numerique = ['Type d\\'exercices', 3, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres\\n3 : Passer d\\'une écriture à l\\'autre']\n  this.sup3 = 1 // Valeur du paramètre par défaut\n\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.tailleDiaporama = 3\n  this.video = ''\n\n  this.nouvelleVersion = function () {\n    let typeDeConsigne = []\n    if (parseInt(this.sup3) === 1) {\n      this.consigne = 'Écrire le nombre en lettres.'\n      typeDeConsigne = combinaisonListes([1], this.nbQuestions)\n    }\n    if (parseInt(this.sup3) === 2) {\n      this.consigne = 'Écrire le nombre en chiffres.'\n      typeDeConsigne = combinaisonListes([2], this.nbQuestions)\n    }\n    if (parseInt(this.sup3) === 3) {\n      this.consigne = 'Passer de l\\'écriture en chiffres à celle en lettres et inversement.'\n      typeDeConsigne = combinaisonListes([1, 2], this.nbQuestions)\n    }\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n\n    let QuestionsDisponibles = []\n    let listeQuestions = []\n    let OptionsDisponibles = [] // Pour envisager les cas particuliers demandés 80, 81... 99 et 100, 200.. 900.\n    let listeOptions = []\n\n    if (!this.sup) { // Si aucune liste n'est saisie\n      QuestionsDisponibles = [2, 3, 4, 5, 6, 7, 8]\n    } else {\n      if (typeof (this.sup) === 'number') { // Je n'ai jamais réussi à rentrer dans ce test.\n        this.sup = Math.max(Math.min(parseInt(this.sup), 8), 2)\n        QuestionsDisponibles[0] = this.sup\n      } else {\n        QuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n        for (let i = 0; i < QuestionsDisponibles.length; i++) { // on a un tableau avec des strings : ['1', '1', '2']\n          QuestionsDisponibles[i] = contraindreValeur(2, 8, parseInt(QuestionsDisponibles[i]), 2)\n        }\n      }\n    }\n    if (!this.sup2) { // Si aucune liste n'est saisie\n      OptionsDisponibles = [0]\n    } else {\n      if (typeof (this.sup2) === 'number') { // Je n'ai jamais réussi à rentrer dans ce test. Ah si, quand on met l'URl dans un navigateur ?\n        this.sup2 = Math.max(Math.min(parseInt(this.sup2), 3), 0)\n        OptionsDisponibles[0] = this.sup2\n      } else {\n        OptionsDisponibles = this.sup2.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n        for (let i = 0; i < OptionsDisponibles.length; i++) { // on a un tableau avec des strings : ['1', '1', '2']\n          OptionsDisponibles[i] = Math.max(Math.min(parseInt(OptionsDisponibles[i]), 3), 0) // parseInt en fait un tableau d'entiers comprise entre 2 et 6\n        }\n      }\n    }\n    for (let i = OptionsDisponibles.length; i < this.nbQuestions; i++) { // on finit de remplir le tableau par des zéros (aucune demande particulière)\n      OptionsDisponibles[i] = 0\n    }\n\n    listeQuestions = combinaisonListes(QuestionsDisponibles, this.nbQuestions)\n    listeOptions = shuffle(OptionsDisponibles)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let NombreAEcrire // Comme la valeur sera modifiée, on la déclare avec let\n      switch (listeOptions[i]) {\n        case 0 :\n          if (listeQuestions[i] < 7) {\n            NombreAEcrire = randint(1 + Math.pow(10, listeQuestions[i] - 1), Math.pow(10, listeQuestions[i]) - 1)\n          } else if (listeQuestions[i] === 7) {\n            NombreAEcrire = randint(1 + Math.pow(10, 8), Math.pow(10, 9) - 1)\n          } else {\n            NombreAEcrire = randint(1 + Math.pow(10, 11), Math.pow(10, 12) - 1)\n          }\n          break\n        case 1 : // Se termine par 80\n          if (listeQuestions[i] < 7) {\n            NombreAEcrire = 80 + 100 * Math.trunc(randint(1 + Math.pow(10, listeQuestions[i] - 3), Math.pow(10, listeQuestions[i] - 2) - 1)) // Se termine par 80\n          } else if (listeQuestions[i] === 7) {\n            NombreAEcrire = 80 + 100 * Math.trunc(randint(1 + Math.pow(10, 6), Math.pow(10, 7) - 1))\n          } else {\n            NombreAEcrire = 80 + 100 * Math.trunc(randint(1 + Math.pow(10, 9), Math.pow(10, 10) - 1))\n          }\n          break\n        case 2 : // Contient 80 et quelques\n          if (listeQuestions[i] < 5) {\n            NombreAEcrire = 80 + randint(1, 19) + 100 * Math.trunc(randint(1 + Math.pow(10, listeQuestions[i] - 3), Math.pow(10, listeQuestions[i] - 2) - 1)) // Se termine par 80\n          } else if (listeQuestions[i] < 7) { // Pour mettre aussi 80 et quelques dans la classe des milliers\n            if (choice([true, false])) {\n              NombreAEcrire = Math.pow(10, 3) * (80 + randint(1, 19) + 100 * Math.trunc(randint(1 + Math.pow(10, listeQuestions[i] - 6), Math.pow(10, listeQuestions[i] - 5) - 1))) + randint(0, 999)\n            } else {\n              NombreAEcrire = 80 + randint(1, 19) + 100 * Math.trunc(randint(1 + Math.pow(10, listeQuestions[i] - 3), Math.pow(10, listeQuestions[i] - 2) - 1)) // Se termine par 80\n            }\n          } else if (listeQuestions[i] === 7) { // Pour mettre aussi 80 et quelques dans la classe des millions\n            if (choice([1, 2, 3]) === 3) {\n              NombreAEcrire = Math.pow(10, 6) * (80 + randint(1, 19) + 100 * randint(1, 9)) + randint(0, 999999)\n            } else if (choice([true, false])) {\n              NombreAEcrire = Math.pow(10, 6) * randint(101, 999) + Math.pow(10, 3) * (80 + randint(1, 19) + 100 * Math.trunc(randint(11, 99))) + randint(0, 999)\n            } else {\n              NombreAEcrire = Math.pow(10, 3) * randint(100001, 999999) + (80 + randint(1, 19) + 100 * randint(1, 9))\n            }\n          } else { // Pour mettre aussi 80 et quelques dans la classe des milliards\n            if (choice([1, 2, 3, 4]) === 4) {\n              NombreAEcrire = Math.pow(10, 9) * (80 + randint(1, 19) + 100 * randint(1, 9)) + randint(0, 999999999)\n            } else if (choice([1, 2, 3]) === 3) {\n              NombreAEcrire = Math.pow(10, 9) * randint(101, 999) + Math.pow(10, 6) * (80 + randint(1, 19) + 100 * randint(1, 9)) + randint(0, 999999)\n            } else if (choice([true, false])) {\n              NombreAEcrire = Math.pow(10, 6) * randint(100001, 999999) + Math.pow(10, 3) * (80 + randint(1, 19) + 100 * randint(1, 9)) + randint(0, 999)\n            } else {\n              NombreAEcrire = Math.pow(10, 3) * randint(100000001, 999999999) + 80 + randint(1, 19) + 100 * randint(1, 9)\n            }\n          }\n          break\n        case 3 : // Se termine par 100\n          if (listeQuestions[i] < 7) {\n            NombreAEcrire = 100 * Math.trunc(10 * randint(1 + Math.pow(10, Math.max(listeQuestions[i] - 4, -1)), Math.pow(10, Math.max(listeQuestions[i] - 3, 0)) - 1) + randint(2, 8)) // Ne pas mettre 9 à la place de 8, sinon on pourrait obtenir 10 pour des nombres à 3 chiffres\n          } else if (listeQuestions[i] === 7) {\n            NombreAEcrire = 100 * (randint(Math.pow(10, 5), Math.pow(10, 6)) * 10 + randint(2, 9))\n          } else {\n            NombreAEcrire = 100 * (randint(Math.pow(10, 8), Math.pow(10, 9)) * 10 + randint(2, 9))\n          }\n          break\n      }\n\n      if (typeDeConsigne[i] === 1) {\n        setReponse(this, i, nombreEnLettres(NombreAEcrire))\n        if (!context.isDiaporama) texte = `$${texNombre(NombreAEcrire)} ${!this.interactif ? ' : \\\\dotfill $' : '$ <br>' + ajouteChampTexteMathLive(this, i)}`\n        else texte = `$${texNombre(NombreAEcrire)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(NombreAEcrire)}$ : ${nombreEnLettres(NombreAEcrire)}`\n        else texteCorr = `${nombreEnLettres(NombreAEcrire)}`\n      } else {\n        setReponse(this, i, NombreAEcrire)\n        if (!context.isDiaporama) texte = `$${nombreEnLettres(NombreAEcrire)} ${!this.interactif ? ' : \\\\dotfill $' : '$ <br>' + ajouteChampTexteMathLive(this, i)}`\n        else texte = `${nombreEnLettres(NombreAEcrire)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(NombreAEcrire)} : $${texNombre(NombreAEcrire)}$`\n        else texteCorr = `$${texNombre(NombreAEcrire)}$`\n      }\n\n      // Si la question n'a jamais été posée, on l'enregistre\n      if (this.questionJamaisPosee(i, texte)) { // <- laisser le i et ajouter toutes les variables qui rendent les exercices différents (par exemple a, b, c et d)\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import EcrireNombresEntiers from '../6e/6N10.js'\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10\n */\nexport default function EcrireEntiersCycle3 () {\n  EcrireNombresEntiers.call(this)\n  this.sup2 = 0\n  this.sup = 1\n}\n"],"names":["titre","interactifReady","interactifType","dateDePublication","EcrirePetitsNombresEntiers","Exercice","this","nbQuestions","besoinFormulaireTexte","sup","besoinFormulaire2Texte","sup2","besoinFormulaire3Numerique","sup3","nbCols","nbColsCorr","tailleDiaporama","video","nouvelleVersion","typeDeConsigne","parseInt","consigne","combinaisonListes","listeQuestions","listeCorrections","autoCorrection","QuestionsDisponibles","OptionsDisponibles","listeOptions","Math","max","min","split","i","length","contraindreValeur","shuffle","texte","texteCorr","cpt","NombreAEcrire","randint","pow","trunc","choice","setReponse","nombreEnLettres","context","texNombre","interactif","ajouteChampTexteMathLive","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf","EcrireEntiersCycle3","EcrireNombresEntiers"],"sourceRoot":""}