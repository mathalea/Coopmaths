{"version":3,"file":"js/62053.c52716e350b31d892107.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6D10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { choice, combinaisonListes, listeQuestionsToContenu, randint, texNombre } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\n\nexport const titre = 'Convertir des durées'\n\n/**\n * Conversions de durées.\n * * 1 : H vers min ou H ou min ou Hmin vers s\n * * 2 : h vers j-h\n * * 3 : s vers HMS\n * * 4 : h vers semaines j h\n * * 5 : toutes les conversions\n * @author Rémi Angot\n * Référence 6D10\n */\nexport default function ConversionsDeDurees () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 5\n  this.titre = titre\n  this.consigne = 'Compléter les égalités suivantes'\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = 2\n  this.nbQuestions = 5\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeSousTypeDeQuestionV1 = combinaisonListes(\n      [1, 2, 3, 4],\n      this.nbQuestions\n    )\n    const listeSousTypeDeQuestionV2 = combinaisonListes(\n      [0, 1, 2],\n      this.nbQuestions\n    )\n    let typesDeQuestions = []\n    if (this.sup < 5) {\n      typesDeQuestions = combinaisonListes([this.sup], this.nbQuestions)\n    }\n    if (parseInt(this.sup) === 5) {\n      typesDeQuestions = combinaisonListes([1, 2, 3, 4], this.nbQuestions)\n    }\n\n    for (\n      let i = 0, h, m, s, j, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      if (typesDeQuestions[i] === 1) {\n        const sousTypeDeQuestion = listeSousTypeDeQuestionV1[i]\n        if (sousTypeDeQuestion === 1) {\n          h = randint(2, 11)\n          texte = `$${h}~\\\\text{h en minutes}$`\n          texteCorr = `$${h}~\\\\text{h} = ${h}\\\\times60~~\\\\text{min} = ${texNombre(\n              h * 60\n            )}~\\\\text{min}$`\n        }\n        if (sousTypeDeQuestion === 2) {\n          h = choice([1, 2, 10, 20])\n          texte = `$${h}~\\\\text{h en secondes}$`\n          texteCorr = `$${h}~\\\\text{h} = ${h}\\\\times3~600~\\\\text{s} = ${texNombre(\n              h * 3600\n            )}~\\\\text{s}$`\n        }\n        if (sousTypeDeQuestion === 3) {\n          m = randint(2, 59)\n          texte = `$${m}~\\\\text{min en secondes}$`\n          texteCorr = `$${m}~\\\\text{min} = ${m}\\\\times60~\\\\text{s} = ${texNombre(\n              m * 60\n            )}~\\\\text{s}$`\n        }\n        if (sousTypeDeQuestion === 4) {\n          h = randint(1, 2)\n          m = randint(2, 59)\n          texte = `$${h}~\\\\text{h}~${m}~\\\\text{min en secondes}$`\n          texteCorr = `$${h}~\\\\text{h}~${m}~\\\\text{min} = ${h}\\\\times3~600~\\\\text{s} + ${m}\\\\times60~\\\\text{s} = ${texNombre(\n              h * 3600\n            )}+${texNombre(m * 60)}~\\\\text{s} = ${texNombre(\n              h * 3600 + m * 60\n            )}~\\\\text{s}$`\n        }\n      }\n      if (typesDeQuestions[i] === 2) {\n        j = randint(1, 6)\n        h = randint(1, 23)\n        texte = `$${texNombre(h + 24 * j)}~\\\\text{h en jours et heures}$`\n        texteCorr = `$${texNombre(\n            h + 24 * j\n          )}~\\\\text{h} = ${j}\\\\times24~\\\\text{h} + ${h}~\\\\text{h} = ${j}~\\\\text{j}~${h}~\\\\text{h}$`\n      }\n\n      if (typesDeQuestions[i] === 3) {\n        h = listeSousTypeDeQuestionV2[i]\n        m = randint(1, 59)\n        s = randint(1, 59)\n        if (h > 0) {\n          texte = `$${texNombre(\n              h * 3600 + m * 60 + s\n            )}~\\\\text{s au format HMS}$`\n          texteCorr = `$${texNombre(\n              h * 3600 + m * 60 + s\n            )}~\\\\text{s} = ${texNombre(h * 3600)}~\\\\text{s}+${\n              m * 60 + s\n            }~\\\\text{s} =${h}~\\\\text{h}+${m}\\\\times60~\\\\text{s}+${s}~\\\\text{s}=${h}~\\\\text{h}~${m}~\\\\text{min}~${s}~\\\\text{s}$`\n        } else {\n          texte = `$${texNombre(m * 60 + s)}~\\\\text{s au format HMS}$`\n          texteCorr = `$${texNombre(\n              m * 60 + s\n            )}~\\\\text{s} = ${m}\\\\times60~\\\\text{s}+${s}~\\\\text{s}=${m}~\\\\text{min}~${s}~\\\\text{s}$`\n        }\n      }\n      if (typesDeQuestions[i] === 4) {\n        s = randint(1, 9) // nombre de semaines\n        j = randint(1, 6)\n        h = randint(1, 23)\n        texte = `$${texNombre(\n            h + 24 * j + 24 * 7 * s\n          )}~\\\\text{h en semaines jours et heures}$`\n        if (s > 1) {\n          // pour la gestion du pluriel de semaines\n          texteCorr = `$${texNombre(h + 24 * j + 24 * 7 * s)}~\\\\text{h} = ${\n              j + 7 * s\n            }\\\\times24~\\\\text{h} + ${h}~\\\\text{h} = ${\n              j + 7 * s\n            }~\\\\text{j}~${h}~\\\\text{h} = ${s}\\\\times7~\\\\text{j} + ${j}~\\\\text{j}~${h}~\\\\text{h} = ${s}~\\\\text{semaines}~${j}~\\\\text{j}~${h}~\\\\text{h}$`\n        } else {\n          texteCorr = `$${texNombre(h + 24 * j + 24 * 7 * s)}~\\\\text{h} = ${\n              j + 7 * s\n            }\\\\times24~\\\\text{h} + ${h}~\\\\text{h} = ${\n              j + 7 * s\n            }~\\\\text{j}~${h}~\\\\text{h} = ${s}\\\\times7~\\\\text{j} + ${j}~\\\\text{j}~${h}~\\\\text{h} = ${s}~\\\\text{semaine}~${j}~\\\\text{j}~${h}~\\\\text{h}$`\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    5,\n    '1 : Conversions en s ou min\\n2 : Conversions en jours-heures \\n3 : Conversions en HMS\\n4 : Conversions en semaines-jours-heures \\n5 : Tous types de conversions'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConversionsDeDurees","Exercice","this","sup","consigne","nbCols","nbColsCorr","spacing","nbQuestions","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","listeSousTypeDeQuestionV1","combinaisonListes","listeSousTypeDeQuestionV2","typesDeQuestions","parseInt","h","m","s","j","texte","texteCorr","i","cpt","sousTypeDeQuestion","randint","texNombre","choice","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}