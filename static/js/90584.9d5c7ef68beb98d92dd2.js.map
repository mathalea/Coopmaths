{"version":3,"file":"js/90584.9d5c7ef68beb98d92dd2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5C12.js","webpack://mathalea/./src/js/exercices/5e/_Ecrire_une_expression_numerique.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { context } from '../../modules/context.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { combinaisonListes, listeQuestionsToContenu, randint, lettreDepuisChiffre } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport choisirExpressionNumerique from './_choisirExpressionNumerique.js'\nimport ChoisirExpressionLitterale from './_Choisir_expression_litterale.js'\nexport { interactifReady, interactifType, amcType, amcReady } from './_Ecrire_une_expression_numerique.js'\nexport const titre = 'Calculer une expression numérique en détaillant les calculs'\n\n/**\n * @author Jean-Claude Lhote\n * Référence 5C12\n */\nexport default function CalculerUneExpressionNumerique () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = false\n  this.sup2 = false // si false alors utilisation de nombres entiers (calcul mental), si true alors utilisation de nombres à un chiffre après la virgule.\n  this.sup3 = true\n  this.sup4 = false\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles = []\n    let reponse\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) { // Si aucune liste n'est saisie\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    } else {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        typesDeQuestionsDisponibles[0] = this.sup % 6\n      } else {\n        typesDeQuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    let expf; let expn; let expc; let decimal; let nbval; let nbOperations; let resultats\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2) {\n      decimal = 10\n    } else {\n      decimal = 1\n    }\n\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      nbOperations = parseInt(listeTypeDeQuestions[i] % 6)\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      if (this.version > 2 && nbOperations === 1 && !this.litteral) nbOperations++\n      if (!this.litteral) { resultats = choisirExpressionNumerique(nbOperations, decimal, this.sup3, !this.sup2) } else { resultats = ChoisirExpressionLitterale(nbOperations, decimal, val1, val2, this.sup3, !this.sup2) }\n      expf = resultats[0]\n      expn = resultats[1]\n      expc = resultats[2]\n      nbval = resultats[3]\n      if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n      this.consigne = 'Calculer en respectant les priorités opératoires.'\n      if (!this.litteral) {\n        if (!this.sup4) {\n          texte = `${expn}`\n        } else {\n          texte = `${lettreDepuisChiffre(i + 1)} = ${expn}`\n        }\n      } else if (nbval === 2) {\n        texte = `Pour $x=${val1}$ et $y=${val2}$, calculer ${expn}.`\n      } else {\n        texte = `Pour $x=${val1}$, calculer ${expn}.`\n      }\n\n      if (!this.litteral) {\n        if (!this.sup4) {\n          texteCorr = `${expc}`\n        } else {\n          texteCorr = ''\n          // On découpe\n          const etapes = expc.split('=')\n          etapes.forEach(function (etape) {\n            etape = etape.replace('$', '')\n            if (context.isHtml) {\n              texteCorr += '<br>'\n            }\n            texteCorr += `${lettreDepuisChiffre(i + 1)} = $${etape}$ <br>`\n          })\n        }\n      } else if (nbval === 2) {\n        texteCorr = `Pour $x=${val1}$ et $y=${val2}$ :<br>${expc}.`\n      } else {\n        texteCorr = `Pour $x=${val1}$ :<br>${expc}.`\n      }\n      reponse = parseInt(expc.split('=')[expc.split('=').length - 1])\n      if (this.questionJamaisPosee(i, expn, expf)) { // Si la question n'a jamais été posée, on en créé une autre\n        if (this.interactif) {\n          texte += '<br>' + ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texte: ' Résultat : ' })\n        } else if (context.isAmc) {\n          texte += '<br>Détailler les calculs dans le cadre et coder le résultat.<br>'\n        }\n        setReponse(this, i, reponse)\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Choix des expressions', 'Nombres séparés par des tirets\\n2 : Expressions à deux opérations\\n3 : Expressions à 3 opérations\\n4 : Expressions à 4 opérations\\n5 : Expressions complexes'] // Texte, tooltip - il faut au moins deux opérations\n  this.besoinFormulaire2CaseACocher = ['Utilisation de décimaux (pas de calcul mental)', false]\n  this.besoinFormulaire3CaseACocher = ['Avec le signe × devant les parenthèses', true]\n  this.besoinFormulaire4CaseACocher = ['Présentation des corrections en colonnes', false]\n}\n","import Exercice from '../Exercice.js'\nimport choisirExpressionNumerique from './_choisirExpressionNumerique.js'\nimport ChoisirExpressionLitterale from './_Choisir_expression_litterale.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, lettreDepuisChiffre } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCOpenNum'\n/**\n* Fonction noyau pour 6 fonctions qui utilisent les mêmes variables et la fonction choisirExpressionNumerique\n* @author Jean-Claude Lhote\n* Référence 5C11, 5C11-1, 5C11-2, 5C12, 5C12-1, 5L13\n*/\nexport default function EcrireUneExpressionNumerique (calculMental) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup2 = false // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n  this.sup = false\n  this.sup3 = true\n  this.version = 1 // 1 pour ecrire une expression, 2 pour écrire la phrase, 3 pour écrire l'expression et la calculer, 4 pour calculer une expression numérique\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles = []\n    let reponse\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) { // Si aucune liste n'est saisie\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    } else {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        typesDeQuestionsDisponibles[0] = this.sup % 6\n      } else {\n        typesDeQuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    let expf; let expn; let expc; let decimal; let nbval; let nbOperations; let resultats\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (!calculMental) {\n      decimal = 10\n    } else {\n      decimal = 1\n    }\n    // pour 5C12-1\n    if (this.sup2) {\n      decimal = 10\n    } else {\n      decimal = 1\n    }\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      nbOperations = parseInt(listeTypeDeQuestions[i] % 6)\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      if (this.version > 2 && nbOperations === 1 && !this.litteral) nbOperations++\n      if (!this.litteral) { resultats = choisirExpressionNumerique(nbOperations, decimal, this.sup3, calculMental) } else { resultats = ChoisirExpressionLitterale(nbOperations, decimal, val1, val2, this.sup3, calculMental) }\n      expf = resultats[0]\n      expn = resultats[1]\n      expc = resultats[2]\n      nbval = resultats[3]\n      switch (this.version) {\n        case 1:\n          this.consigne = 'Traduire la phrase par un calcul (il n’est pas demandé d’effectuer ce calcul).'\n          texte = `${expf}.`\n          texteCorr = `${expf} s'écrit<br>${expn}.`\n          break\n        case 2:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Traduire le calcul par une phrase en français.'\n          texte = `${expn}`\n          expf = 'l' + expf.substring(1)\n          texteCorr = `${expn} est ${expf}.`\n          break\n        case 3:\n          // this.consigne = 'Traduire la phrase par un calcul et effectuer ce calcul en respectant les priorités opératoires.'\n          if (this.interactif) {\n            this.consigne = 'Traduire la phrase par un calcul et effectuer ce calcul au brouillon en respectant les priorités opératoires.<br> Saisir uniquement le résultat.'\n          } else {\n            this.consigne = 'Traduire la phrase par un calcul et effectuer ce calcul en respectant les priorités opératoires.'\n          }\n          if (!this.litteral) texte = `${expf}.`\n          else if (nbval === 2) texte = `${expf} puis calculer pour $x=${val1}$ et $y=${val2}$.` // nbval contient le nombre de valeurs en cas de calcul littéral\n          else texte = `${expf} puis calculer pour $x=${val1}$.`\n          texteCorr = `${expf} s'écrit ${expn}.<br>`\n\n          if (!this.litteral) {\n            if (!this.sup4) {\n              texteCorr = `${expc}`\n            } else {\n              texteCorr = ''\n              // On découpe\n              const etapes = expc.split('=')\n              etapes.forEach(function (etape) {\n                etape = etape.replace('$', '')\n                if (context.isHtml) {\n                  texteCorr += '<br>'\n                }\n                texteCorr += `${lettreDepuisChiffre(i + 1)} = $${etape}$ <br>`\n              })\n            }\n          } else if (nbval === 2) texteCorr += `Pour $x=${val1}$ et $y=${val2}$ :<br> ${expc}.`\n          else texteCorr += `Pour $x=${val1}$ :<br>${expc}.`\n          // reponse = parseInt(expc.split('=')[expc.split('=').length - 1])\n          reponse = expc.split('=')[expc.split('=').length - 1].replace('$', '')\n          break\n        case 4:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Calculer en respectant les priorités opératoires.'\n          if (!this.litteral) texte = `${expn}`\n          else if (nbval === 2) texte = `Pour $x=${val1}$ et $y=${val2}$, calculer ${expn}.`\n          else texte = `Pour $x=${val1}$, calculer ${expn}.`\n          if (!this.litteral) texteCorr = `${expc}`\n          else if (nbval === 2) texteCorr = `Pour $x=${val1}$ et $y=${val2}$ :<br>${expc}.`\n          else texteCorr = `Pour $x=${val1}$ :<br>${expc}.`\n          reponse = parseInt(expc.split('=')[expc.split('=').length - 1])\n          break\n      }\n      if (this.questionJamaisPosee(i, expn, expf)) { // Si la question n'a jamais été posée, on en créé une autre\n        if (this.version > 2) {\n          if (!context.isAmc) {\n            texte += '<br>' + ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texte: ' Résultat : ' })\n          } else {\n            texte += '<br>Détailler les calculs dans le cadre et coder le résultat.<br>'\n          }\n          setReponse(this, i, reponse)\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","CalculerUneExpressionNumerique","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","sup2","sup3","sup4","nouvelleVersion","autoCorrection","reponse","expf","expn","expc","decimal","nbval","nbOperations","resultats","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","split","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","val1","val2","i","cpt","parseInt","randint","version","litteral","ChoisirExpressionLitterale","choisirExpressionNumerique","indexOf","substring","lettreDepuisChiffre","forEach","etape","replace","context","length","questionJamaisPosee","interactif","ajouteChampTexteMathLive","setReponse","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2CaseACocher","besoinFormulaire3CaseACocher","besoinFormulaire4CaseACocher","interactifReady","interactifType","amcReady","amcType","EcrireUneExpressionNumerique","calculMental","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire4Numerique","besoinFormulaire4Texte","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}