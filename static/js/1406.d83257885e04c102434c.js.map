{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["amcReady","amcType","interactifReady","titre","ReconnaitreQuadrilatereParticulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","context","correctionDetaillee","nouvelleVersion","listeQuestions","listeCorrections","listeDeQuestions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","tabrep","tabicone","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","codageAngleDroit","segment","pointilles","autoCorrection","enonce","propositions","statut","feedback","options","ordered","lastChoice","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/1406.d83257885e04c102434c.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, choice, shuffle } from '../../modules/outils.js'\nimport { point, segment, polygone, codageAngleDroit, codeSegments, mathalea2d } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 // QCM \nexport const interactifReady = true\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @author Rémi Angot\n * Référence 6G33\n*/\nexport default function ReconnaitreQuadrilatereParticulier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true\n  context.isHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeDeQuestions = shuffle([choice(['losange1', 'losange2']), choice(['rectangle1', 'rectangle2']), choice(['carre1', 'carre2', 'carre3'])])\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = ''\n      texteCorr = ''\n      let A, B, C, D, O, ABCD, codage, codage1, codage2, codage3, sAC, sBD, marquesDemiDiagonales, marquesDemiDiagonales1, marquesDemiDiagonales2, marquesCotes, tabrep, tabicone\n      switch (listeDeQuestions[i]) {\n        case 'losange1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\"\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          // codage = codageAngleDroit(C, O, B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'losange2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [1, 0, 0, 0, 0]\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, B)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales1 = codeSegments('|', 'blue', O, A, O, C)\n          marquesDemiDiagonales2 = codeSegments('|||', 'blue', O, B, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, codage, sAC, sBD, marquesDemiDiagonales1, marquesDemiDiagonales2) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'rectangle1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'rectangle2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          // codage1 = codageAngleDroit(A,B,C);\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'carre1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, D)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre3':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(A, B, C)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n      }\n      // if (this.modeQcm && !context.isAmc) {\n      //   if (texteCorr.lastIndexOf('\\n') > 0) {\n      //     texteCorr = texteCorr.substring(0, texteCorr.lastIndexOf('\\n'))\n      //   }\n      //   this.tableauSolutionsDuQcm[i] = tabicone\n      //   texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n      //   texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      // }\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Losange',\n          statut: false,\n          feedback: 'Tous les losanges ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n        },\n        {\n          texte: 'Rectangle',\n          statut: false,\n          feedback: 'Tous les rectangles ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n\n        },\n        {\n          texte: 'Carré',\n          statut: false,\n          feedback: 'Tous les carrés ont 4 angles droits, ce sont donc aussi des rectangles. Tous les carrés ont 4 côtés de même longueur, ce sont donc aussi des losanges.'\n\n        },\n        {\n          texte: 'Trapèze',\n          statut: false\n        },\n        {\n          texte: 'Parallélogramme',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: true,\n        lastChoice: 5\n      }\n      if (listeDeQuestions[i] === 'losange1' || listeDeQuestions[i] === 'losange2') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'rectangle1' || listeDeQuestions[i] === 'rectangle2') {\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'carre1' || listeDeQuestions[i] === 'carre2' || listeDeQuestions[i] === 'carre3') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[2].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n// function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n// }\n\n// Référence 6C23\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}