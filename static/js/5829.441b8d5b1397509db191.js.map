{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N31-2.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Ordre_de_grandeur_operations_decimaux","type_de_questions_disponibles","Exercice","this","beta","nbQuestions","consigne","nbCols","nbColsCorr","sortieHtml","spacing","spacingCorr","nouvelleVersion","shuffle","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","cbis","d1bis","ligne_entete","texNombre","ligne_entete_corr","m","randint","c1","c2","c3","c4","d","d1","d2","d3","u","u1","u2","u3","div_aleatoire_ope_3","choice","div_aleatoire_ope_5","mult_aleatoire_ope_4","myOrdreOpe1","c","miseEnEvidence","myOrdreOpe2","myOrdreOpe4","n","sortie","myOrdreOpe5","mult","situations","operation","operation_corr","operation_coche","enonces","k","push","enonce","tableauColonneLigne","question","correction","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/5829.441b8d5b1397509db191.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,shuffle,combinaisonListesSansChangerOrdre,texNombre,miseEnEvidence,tableauColonneLigne} from '../../modules/outils.js'\nexport const titre = 'Ordre de grandeur et opérations sur les décimaux'\n\n/** \n * * Ordre de grandeur d'une opération entre décimaux\n * * 6N31-2\n * @author Sébastien Lozano\n */\n\nexport default function Ordre_de_grandeur_operations_decimaux() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.beta = false;\n  if (this.beta) {\n    this.nbQuestions = 1;\n  } else {\n    this.nbQuestions = 1;\n  };\n\n  this.titre = titre;\n  this.consigne = `Pour chaque opération proposée dans la première colonne, cocher la case correspondant à l'ordre de grandeur du résultat.`;\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  sortieHtml ? this.spacing = 3 : this.spacing = 2;\n  sortieHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5;\n\n  let type_de_questions_disponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      type_de_questions_disponibles = [0];\n    } else {\n      //type_de_questions_disponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      type_de_questions_disponibles = shuffle([0]);\n\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    //let listeTypeDeQuestions  = combinaisonListes(type_de_questions_disponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(type_de_questions_disponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\n      let ligne_entete = ['\\\\text{Opération}', `\\\\phantom{000}` + texNombre('1') + `\\\\phantom{000}`, `\\\\phantom{00}` + texNombre('10') + `\\\\phantom{00}`, `\\\\phantom{00}` + texNombre('100') + `\\\\phantom{00}`, `\\\\phantom{0}` + texNombre('1000') + `\\\\phantom{0}`, texNombre('10000'), texNombre('100000')];\n      let ligne_entete_corr = ['\\\\text{Opération}', `\\\\phantom{000}` + texNombre('1') + `\\\\phantom{000}`, `\\\\phantom{00}` + texNombre('10') + `\\\\phantom{00}`, `\\\\phantom{00}` + texNombre('100') + `\\\\phantom{00}`, `\\\\phantom{0}` + texNombre('1000') + `\\\\phantom{0}`, texNombre('10000'), texNombre('100000')];\n\n      let m = randint(1, 9, [4, 5, 6]),\n        c1 = randint(1, 9),\n        c2 = randint(1, 9),\n        c3 = randint(1, 9, [4, 5, 6]),\n        c4 = randint(1, 4),\n        d = randint(1, 9),\n        d1 = randint(1, 9),\n        d2 = randint(1, 9),\n        d3 = randint(1, 9),\n        u = randint(1, 9),\n        u1 = randint(1, 9),\n        u2 = randint(1, 9),\n        u3 = randint(1, 9);\n\n      let cbis, d1bis;\n      do {\n        cbis = randint(2, 9);\n        d1bis = randint(2, 9);\n      } while (cbis * d1bis > 3 && cbis * d1bis < 7);\n\n      let div_aleatoire_ope_3 = choice([10, 100]);\n      let div_aleatoire_ope_5 = choice([1, 10, 100, 1000]);\n      let mult_aleatoire_ope_4 = choice([0.1, 0.01, 0.001]);\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 1\n      function myOrdreOpe1(c, d) {\n        if (c * d >= 60) {\n          return ['', '', '', '', '', miseEnEvidence(`X`)];\n        } else {\n          return ['', '', '', '', miseEnEvidence(`X`), ''];\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 2\n      function myOrdreOpe2(c1, c2) {\n        if (c1 + c2 / 10 >= 600) {\n          return ['', '', '', miseEnEvidence(`X`), '', ''];\n        } else {\n          return ['', '', miseEnEvidence(`X`), '', '', ''];\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 3\n      function myOrdreOpe3(n) {\n        if (n >= 7) {\n          return ['', '', '', miseEnEvidence(`X`), '', ''];\n        } else {\n          return ['', '', miseEnEvidence(`X`), '', '', ''];\n        };\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 4\n      function myOrdreOpe4(d, n) {\n        let sortie;\n        switch (d) {\n          case 0.1:\n            if (n >= 7) {\n              sortie = ['', '', '', miseEnEvidence(`X`), '', ''];\n            } else {\n              sortie = ['', '', miseEnEvidence(`X`), '', '', ''];\n            };\n            break;\n          case 0.01:\n            if (n >= 7) {\n              sortie = ['', '', miseEnEvidence(`X`), '', '', ''];\n            } else {\n              sortie = ['', miseEnEvidence(`X`), '', '', '', ''];\n            };\n            break;\n          case 0.001:\n            if (n >= 7) {\n              sortie = ['', miseEnEvidence(`X`), '', '', '', ''];\n            } else {\n              sortie = [miseEnEvidence(`X`), '', '', '', '', ''];\n            };\n            break;\n        }\n        return sortie;\n      };\n\n      // une fonction pour ordre de grandeur en fonction de ... opération 5\n      function myOrdreOpe5(mult) {\n        let sortie;\n        switch (mult) {\n          case 1:\n            return sortie = ['', '', '', miseEnEvidence(`X`), '', ''];\n            break;\n          case 10:\n            return sortie = ['', '', miseEnEvidence(`X`), '', '', ''];\n            break;\n          case 100:\n            return sortie = ['', miseEnEvidence(`X`), '', '', '', ''];\n            break;\n          case 1000:\n            return sortie = [miseEnEvidence(`X`), '', '', '', '', ''];\n            break;\n        };\n        return sortie;\n      };\n\n      let situations = [\n        {\n          operation: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1}`,\n          operation_corr: `${cbis * 100 + d * 10 + u * 1}\\\\times ${d1bis * 10 + u1 * 1} \\\\simeq  ${(cbis * 100)}\\\\times ${(d1bis * 10)} \\\\text{ soit } ${texNombre((cbis * 100) * (d1bis * 10))}`,\n          operation_coche: myOrdreOpe1(cbis, d1bis),\n        },\n        {\n          operation: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1}`,\n          operation_corr: `${texNombre((c2 * 100 + d2 * 10 + u1 * 1) / 10)}+${c1 * 100 + d1 * 10 + u1 * 1} \\\\simeq ${c2 * 100 / 10}+${c1 * 100} \\\\text{ soit } ${c2 * 100 / 10 + c1 * 100}`,\n          operation_coche: myOrdreOpe2(c1 * 100, c2 * 100),\n        },\n        {\n          operation: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / div_aleatoire_ope_3)}`,\n          operation_corr: `${c3 * 100 + d3 * 10 + u3 * 1}-${texNombre((c2 * 100 + d2 * 10 + u2 * 1) / div_aleatoire_ope_3)} \\\\simeq ${c3 * 100 + d3 * 10}-${texNombre((c2 * 100) / div_aleatoire_ope_3)} \\\\text{ soit } ${c3 * 100 + d3 * 10 - (c2 * 100) / div_aleatoire_ope_3}`,\n          operation_coche: myOrdreOpe3(c3),\n        },\n        {\n          operation: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(mult_aleatoire_ope_4)}`,\n          operation_corr: `${texNombre(m * 1000 + c3 * 100 + d2 * 10 + u1 * 1)}\\\\times ${texNombre(mult_aleatoire_ope_4)} \\\\simeq ${texNombre(m * 1000)}\\\\times ${texNombre(mult_aleatoire_ope_4)} \\\\text{ soit } ${texNombre(m * 1000 * mult_aleatoire_ope_4)}`,\n          operation_coche: myOrdreOpe4(mult_aleatoire_ope_4, m),\n        },\n        {\n          operation: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / div_aleatoire_ope_5)}\\\\div ${m}`,\n          operation_corr: `${texNombre((m * 1000 + c4 * 100 + d3 * 10 + u * 1) / div_aleatoire_ope_5)}\\\\div ${m} \\\\simeq ${texNombre((m * 1000) / div_aleatoire_ope_5)}\\\\div ${m} \\\\text{ soit } ${texNombre((m * 1000) / div_aleatoire_ope_5 / m)}`,\n          operation_coche: myOrdreOpe5(div_aleatoire_ope_5),\n        },\n\n      ];\n\n      situations = shuffle(situations);\n\n      let enonces = [];\n      for (let k = 0; k < 1; k++) {\n        enonces.push({\n          enonce: `\n          ${tableauColonneLigne(ligne_entete, [situations[0].operation, situations[1].operation, situations[2].operation, situations[3].operation, situations[4].operation],\n            [\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n              '', '', '', '', '', '',\n            ]\n          )}\n          `,\n          question: ``,\n          correction: `\n          Commençons par calculer un ordre de grandeur du résultat de chaque opération dans la première colonne du tableau.\n          <br>\n          ${tableauColonneLigne(ligne_entete_corr, [situations[0].operation_corr, situations[1].operation_corr, situations[2].operation_corr, situations[3].operation_corr, situations[4].operation_corr,],\n            [\n              situations[0].operation_coche[0], situations[0].operation_coche[1], situations[0].operation_coche[2], situations[0].operation_coche[3], situations[0].operation_coche[4], situations[0].operation_coche[5],\n              situations[1].operation_coche[0], situations[1].operation_coche[1], situations[1].operation_coche[2], situations[1].operation_coche[3], situations[1].operation_coche[4], situations[1].operation_coche[5],\n              situations[2].operation_coche[0], situations[2].operation_coche[1], situations[2].operation_coche[2], situations[2].operation_coche[3], situations[2].operation_coche[4], situations[2].operation_coche[5],\n              situations[3].operation_coche[0], situations[3].operation_coche[1], situations[3].operation_coche[2], situations[3].operation_coche[3], situations[3].operation_coche[4], situations[3].operation_coche[5],\n              situations[4].operation_coche[0], situations[4].operation_coche[1], situations[4].operation_coche[2], situations[4].operation_coche[3], situations[4].operation_coche[4], situations[4].operation_coche[5],\n            ]\n          )}\t\t\t\t\n          `\n        });\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texte += `             `\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n      };\n\n      if (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n\n  }\n};\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}