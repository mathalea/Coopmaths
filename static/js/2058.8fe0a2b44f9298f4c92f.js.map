{"version":3,"file":"js/2058.8fe0a2b44f9298f4c92f.js","mappings":"oMAIO,MAAMA,EAAQ,6CAQN,SAASC,IAoBtB,IAAIC,EAlBJC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,OAAQ,EACbD,KAAKE,IAAM,EACPF,KAAKC,MACPD,KAAKG,YAAc,EAKrBH,KAAKJ,MAAQA,EACbI,KAAKI,SAAW,GAEhBJ,KAAKK,OAAS,EACdL,KAAKM,WAAa,EAElBC,EAAAA,GAAAA,OAAiBP,KAAKQ,QAAU,EAAIR,KAAKQ,QAAU,EACnDD,EAAAA,GAAAA,OAAiBP,KAAKS,YAAc,IAAMT,KAAKS,YAAc,EAI7DT,KAAKU,gBAAkB,WAEnBZ,GADEE,KAAKC,MACuB,CAAC,IAMjCD,KAAKW,eAAiB,GACtBX,KAAKY,iBAAmB,GACxBZ,KAAKa,eAAiB,GAGtB,MAAMC,GAAuBC,EAAAA,EAAAA,KAAkCjB,EAA6BE,KAAKG,aAEjG,IAAK,IAAWa,EAAOC,EAAdC,EAAI,EAAqBC,EAAM,EAAGD,EAAIlB,KAAKG,aAAegB,EAAM,IAAK,CAC5E,MAAMC,GAAKC,EAAAA,EAAAA,KAAQ,EAAG,GAChBC,EAAKF,EAAK,EACVG,EAAU,EAALD,EACLE,EAAU,EAALF,EACXtB,KAAKE,IAAMuB,SAASzB,KAAKE,KAEzB,MAAMwB,GAAcC,EAAAA,EAAAA,KAAO,CAAC,MAC5B,IAAIC,EACAC,EACJ,MAAMC,GAAYT,EAAAA,EAAAA,KAAQ,EAAG,GAE7B,IAAIU,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACa,IAAbtC,KAAKE,MACP6B,GAASJ,EAAAA,EAAAA,KAAO,CAAC,CAAC,KAAM,MAAO,CAAC,IAAK,OACrCK,EAAS,CAAE,GAAEZ,IAAO,GAAEE,IAAO,GAAEC,IAAO,GAAEC,KACxCS,EAAY,CAAE,GAAEb,IAAO,GAAEE,IAAO,GAAEC,IAAO,GAAEC,KAC3CU,EAAS,CAAE,GAAEJ,IAAa,GAAI,GAAI,IAClCK,EAAY,CAAE,GAAEL,IAAa,GAAI,GAAI,IACrCM,EAAcL,EAAO,GACrBM,EAAcN,EAAO,GACrBH,EAAkBF,EAClBG,EAAqB,IAAMH,EAC3BY,EAAU,wEAEK,IAAbtC,KAAKE,MACP6B,GAASJ,EAAAA,EAAAA,KAAO,CAAC,CAAC,KAAM,KAAM,CAAC,IAAK,QAClB,OAAdI,EAAO,KACTC,EAAS,CAAE,GAAEZ,IAAO,GAAEE,IAAO,GAAEC,IAAO,GAAEC,KACxCS,EAAY,CAAE,GAAEb,IAAO,GAAEE,IAAO,GAAEC,IAAO,GAAEC,KAC3CU,EAAS,CAAE,GAAEJ,eAAwB,GAAI,GAAI,IAC7CK,EAAY,CAAE,GAAE,IAAML,EAAa,GAAI,GAAI,IAC3CM,EAAcL,EAAO,GACrBM,EAAcN,EAAO,GACrBH,EAAkBF,EAClBG,EAAqB,IAAMH,EAC3BY,EAAU,gHAEM,MAAdP,EAAO,KACTC,EAAS,CAAE,GAAEZ,eAAkB,GAAEE,eAAkB,GAAEC,eAAkB,GAAEC,gBACzES,EAAY,CAAE,GAAE,IAAMb,EAAO,GAAE,IAAME,EAAO,GAAE,IAAMC,EAAO,GAAE,IAAMC,GACnEU,EAAS,CAAE,GAAEJ,IAAa,GAAI,GAAI,IAClCK,EAAY,CAAE,GAAEL,IAAa,GAAI,GAAI,IACrCM,EAAcL,EAAO,GACrBM,EAAcN,EAAO,GACrBH,EAAkBF,EAAc,cAChCG,EAAqB,MAAQH,EAE7BY,EAAU,iHAKd,MAAMC,EAAoB,CAAEC,MAAO,EAAGC,MAAO,EAAGC,KAAM,EAAGC,KAAM,EAAGC,YAAa,GAAIC,MAAO,IACpFC,GAAIC,EAAAA,EAAAA,MAAO,EAAG,GACdC,GAAID,EAAAA,EAAAA,MAAO,GAAI,GACfE,GAAIF,EAAAA,EAAAA,KAAM,GAAI,GACdG,GAAIH,EAAAA,EAAAA,KAAM,EAAG,GACbI,EAAY,EAChBC,EAAAA,EAAAA,KAASN,EAAGE,EAAGC,EAAGC,IAEdG,GAASC,EAAAA,EAAAA,KACbf,EACAY,GAIF,SAASI,EAAiBC,EAAKtD,GAC7B,IAAIuD,EAOJ,OANY,IAARvD,IACFuD,EAAS,IAEC,IAARvD,IACFuD,EAASD,GAEJC,EAIT,MAAMC,EAAa,CACjB,CACE3B,OAAQA,EACRD,UAAWA,EACXJ,YAAaA,EACbiC,SAASC,EAAAA,EAAAA,KAAoB,CAAE,oBAAmBlC,kBAA4BK,EAAO,OAAS,iBAAgBX,kBAAqB,iBAAgBE,kBAAqB,iBAAgBC,kBAAqB,iBAAgBC,mBAAqB,CAAE,sCAAqCO,EAAO,SAC9R,CAAC,GAAI,GAAI,GAAI,KAEf8B,SAAW,QAAOzC,KAAMW,EAAO,gCAAgCD,gBAAwBC,EAAO,+CAA+CX,gBAAiBW,EAAO,QAAQwB,EAAiB,gDAA+CpB,EAAU,iBAAiBE,+CAAwDyB,EAAAA,EAAAA,KAAU7B,EAAU,kBAAkBG,MAAiBpC,KAAKE,8BAA6B4D,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,QACtd2B,SAAW,QAAOzC,KAAMS,EAAO,gCAAgCD,gBAAwBC,EAAO,+CAA+CT,gBAAiBS,EAAO,QAAQwB,EAAiB,gDAA+CpB,EAAU,iBAAiBE,+CAAwDyB,EAAAA,EAAAA,KAAU7B,EAAU,kBAAkBG,MAAiBpC,KAAKE,8BAA6B4D,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,QACtd4B,SAAW,QAAOzC,KAAMQ,EAAO,gCAAgCD,gBAAwBC,EAAO,+CAA+CR,gBAAiBQ,EAAO,QAAQwB,EAAiB,gDAA+CpB,EAAU,iBAAiBE,+CAAwDyB,EAAAA,EAAAA,KAAU7B,EAAU,kBAAkBG,MAAiBpC,KAAKE,8BAA6B4D,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,QACtd6B,SAAW,QAAOzC,KAAMO,EAAO,gCAAgCD,gBAAwBC,EAAO,+CAA+CP,gBAAiBO,EAAO,QAAQwB,EAAiB,gDAA+CpB,EAAU,iBAAiBE,+CAAwDyB,EAAAA,EAAAA,KAAU7B,EAAU,kBAAkBG,MAAiBpC,KAAKE,8BAA6B4D,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,QACtd8B,cAAcN,EAAAA,EAAAA,KAAoB,CAAE,oBAAmBhC,kBAAgCQ,MAAkB,eAAcJ,EAAO,iBAAmB,eAAcA,EAAO,iBAAmB,eAAcA,EAAO,iBAAmB,eAAcA,EAAO,kBACpP,CAAE,qCAAoCK,OACtC,CACX,IAAEyB,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,KAC/D,IAAE0B,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,KAC/D,IAAE0B,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,KAC/D,IAAE0B,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,GAAK,EAAIF,EAAU,kBAAkBG,OAGtD+B,iBAAiBP,EAAAA,EAAAA,KAAoB,CAAE,oBAAmBhC,mBAAiCQ,OAAmB,iBAAgBJ,EAAO,mBAAqB,iBAAgBA,EAAO,oBAC/K,CAAE,qCAAoCK,OACtC,IAOF+B,iBAAiBR,EAAAA,EAAAA,KAAoB,CAAE,oBAAmBhC,mBAAiCQ,OAAmB,iBAAgBJ,EAAO,mBAAqB,iBAAgBA,EAAO,oBAC/K,CAAE,sCAAqCK,QACvC,IAOFgC,SAAW,0BAAyBvC,gBAAwBC,EAAO,+CAA+CL,gBAA0BK,EAAO,QAAQwB,EAAiB,gDAA+CpB,EAAU,iBAAiBE,8CAAwDT,gBAA8BQ,MAAiBpC,KAAKE,8BAA6B4D,EAAAA,EAAAA,KAAU,EAAI3B,EAAU,SAASN,2BAA4CO,MAC5ckC,MAAOhC,EACPiC,IAAKlB,IAIHmB,EAAU,GAChB,IAAIC,EAAoB,EACpBC,EAAwB,EAE5B,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAWkB,OAAQD,IACrCH,EAAQK,KAAK,CACXC,OAAS,sEACgDpB,EAAWiB,GAAG7C,eAAeC,EAAO,0BAA0B2B,EAAWiB,GAAGjD,iBAAiBK,EAAO,aACrK2B,EAAWiB,GAAGJ,aACdQ,EAAAA,EAAAA,KAASN,gDACTf,EAAWiB,GAAGhB,qBACdoB,EAAAA,EAAAA,KAASN,uFAAuGf,EAAWiB,GAAGjD,mBAEtHsD,SAAU,GACVC,WAAa,MACrBF,EAAAA,EAAAA,KAASL,QAA4BhB,EAAWiB,GAAGL,qMAEGpC,EAAO,SAASG,4EAEtEqB,EAAWiB,GAAGd,iBACdH,EAAWiB,GAAGZ,iBACdL,EAAWiB,GAAGX,iBACdN,EAAWiB,GAAGV,4DAEdP,EAAWiB,GAAGT,0BACda,EAAAA,EAAAA,KAASL,0GACRhB,EAAWiB,GAAGN,kBAOX,GACO,IADCvD,EAAqBI,GAEzBF,EAAS,GAAEwD,EAAQ,GAAGM,SAClB9E,KAAKC,OACPe,GAAS,OACTA,GAAU,iCAAgCwD,EAAQ,GAAGS,aACrDjE,GAAS,gBACTC,EAAY,IAEZA,EAAa,GAAEuD,EAAQ,GAAGS,cAKY,IAAxCjF,KAAKW,eAAeuE,QAAQlE,KAC9BhB,KAAKW,eAAekE,KAAK7D,GACzBhB,KAAKY,iBAAiBiE,KAAK5D,GAC3BC,KAEFC,KAEFgE,EAAAA,EAAAA,KAAwBnF,OAE1BA,KAAKoF,0BAA4B,CAAC,uBAAwB,EAAG,kD,gBCtOhD,SAASrF,IAItBC,KAAKJ,MAAQ,GACbI,KAAKqF,YAAa,EAclBrF,KAAKI,SAAW,GAChBJ,KAAKsF,mBAAqB,GAC1BtF,KAAKuF,aAAe,GACpBvF,KAAKW,eAAiB,GACtBX,KAAKY,iBAAmB,GACxBZ,KAAKwF,QAAU,GACfxF,KAAKyF,kBAAoB,GACzBzF,KAAKa,eAAiB,GACtBb,KAAK0F,sBAAwB,GAK7B1F,KAAKQ,QAAU,EACfR,KAAKS,YAAc,EAKnBT,KAAK2F,mBAAoB,EACzB3F,KAAK4F,cAAgB,GACrB5F,KAAK6F,oBAAqB,EAC1B7F,KAAK8F,uBAAwB,EAC7B9F,KAAKK,OAAS,EACdL,KAAKM,WAAa,EAClBN,KAAK+F,kBAAmB,EACxB/F,KAAKgG,sBAAuB,EAC5BhG,KAAKiG,mBAAoB,EACzBjG,KAAKkG,uBAAwB,EAM7BlG,KAAKmG,QAAS,EACdnG,KAAKoG,gBAAkB,EAKvBpG,KAAKG,YAAc,GACnBH,KAAKqG,mBAAqB,EAC1BrG,KAAKsG,+BAAgC,EACrCtG,KAAKuG,qBAAsB,EAC3BvG,KAAKwG,oBAAqB,EAC1BxG,KAAKyG,MAAQ,GAEbzG,KAAK0G,YAAa,EAClB1G,KAAK2G,uBAAwB,EAE7B3G,KAAKoF,2BAA4B,EACjCpF,KAAK4G,uBAAwB,EAC7B5G,KAAK6G,6BAA8B,EAEnC7G,KAAK8G,4BAA6B,EAClC9G,KAAK+G,wBAAyB,EAC9B/G,KAAKgH,8BAA+B,EAEpChH,KAAKiH,4BAA6B,EAClCjH,KAAKkH,wBAAyB,EAC9BlH,KAAKmH,8BAA+B,EAEpCnH,KAAKoH,4BAA6B,EAClCpH,KAAKqH,wBAAyB,EAC9BrH,KAAKsH,8BAA+B,EAMpCtH,KAAKuH,cAAe,EASpBvH,KAAKwH,eAAiB,GAMtBxH,KAAKU,gBAAkB,SAAU+G,KAQjCzH,KAAK0H,oBAAsB,SAAUxG,KAAMyG,GAC/B,IAANzG,IAASlB,KAAKwH,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI/H,KAAKwH,eAAetC,QAAQ0C,IAAmB,KAGjD5H,KAAKwH,eAAe3C,KAAK+C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/5e/5L10-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListesSansChangerOrdre, texNombre, numAlpha, tableauColonneLigne } from '../../modules/outils.js'\nimport { point, polygone, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Produire une formule à partir d’un tableau'\n\n/**\n * * Traduire la dépendance entre deux grandeurs par un tableau de valeurs et produire une formule.\n * * 5L10-4\n * @author Sébastien Lozano\n */\n\nexport default function TableauxEtFonction () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.sup = 1\n  if (this.debug) {\n    this.nbQuestions = 1\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.titre = titre\n  this.consigne = ''\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.debug) {\n      typesDeQuestionsDisponibles = [0]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = [0]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const L1 = randint(3, 7)\n      const L2 = L1 + 1\n      const L3 = L2 * 2\n      const L4 = L2 * 3\n      this.sup = parseInt(this.sup)\n\n      const coteInconnu = choice(['L'])\n      let coteInconnuCorr\n      let coteInconnuCorrNum\n      const coteConnu = randint(3, 7)\n\n      let unites\n      let grandL\n      let grandLNum\n      let petitL\n      let petitLNum\n      let unitegrandL\n      let unitepetitL\n      let txtCorr\n      if (this.sup === 1) { // même unités\n        unites = choice([['cm', 'cm'], ['m', 'm']])\n        grandL = [`${L1}`, `${L2}`, `${L3}`, `${L4}`]\n        grandLNum = [`${L1}`, `${L2}`, `${L3}`, `${L4}`]\n        petitL = [`${coteConnu}`, '', '', '']\n        petitLNum = [`${coteConnu}`, '', '', '']\n        unitegrandL = unites[0]\n        unitepetitL = unites[1]\n        coteInconnuCorr = coteInconnu\n        coteInconnuCorrNum = '2' + coteInconnu\n        txtCorr = 'Les unités sont les mêmes il n\\'est donc pas necessaire de convertir.'\n      };\n      if (this.sup === 2) { // unités différentes\n        unites = choice([['cm', 'm'], ['m', 'cm']])\n        if (unites[0] === 'cm') {\n          grandL = [`${L1}`, `${L2}`, `${L3}`, `${L4}`]\n          grandLNum = [`${L1}`, `${L2}`, `${L3}`, `${L4}`]\n          petitL = [`${coteConnu}\\\\times 100`, '', '', '']\n          petitLNum = [`${100 * coteConnu}`, '', '', '']\n          unitegrandL = unites[0]\n          unitepetitL = unites[0]\n          coteInconnuCorr = coteInconnu\n          coteInconnuCorrNum = '2' + coteInconnu\n          txtCorr = 'Les unités sont différentes, pour plus de confort, nous pouvons les convertir dans la même unité, ici en cm.'\n        };\n        if (unites[0] === 'm') {\n          grandL = [`${L1}\\\\times 100`, `${L2}\\\\times 100`, `${L3}\\\\times 100`, `${L4}\\\\times 100`]\n          grandLNum = [`${100 * L1}`, `${100 * L2}`, `${100 * L3}`, `${100 * L4}`]\n          petitL = [`${coteConnu}`, '', '', '']\n          petitLNum = [`${coteConnu}`, '', '', '']\n          unitegrandL = unites[1]\n          unitepetitL = unites[1]\n          coteInconnuCorr = coteInconnu + '\\\\times 100'\n          coteInconnuCorrNum = '200' + coteInconnu\n\n          txtCorr = 'Les unités sont différentes, pour plus de confort, nous pouvons les convertir dans la même unité, ici en cm.'\n        };\n      };\n\n      // on prépare la fenetre mathalea2d\n      const fenetreMathalea2D = { xmin: -5, ymin: -3, xmax: 5, ymax: 3, pixelsParCm: 20, scale: 0.5 }\n      const A = point(-4, 2)\n      const B = point(-4, -2)\n      const C = point(4, -2)\n      const D = point(4, 2)\n      const mesAppels = [\n        polygone(A, B, C, D)\n      ]\n      const figure = mathalea2d(\n        fenetreMathalea2D,\n        mesAppels\n      )\n\n      // une fonction pour moduler l'affichage d'une étape dans la correction\n      function etapeCorrective (str, sup) {\n        let sortie\n        if (sup === 1) {\n          sortie = ''\n        };\n        if (sup === 2) {\n          sortie = str\n        };\n        return sortie\n      };\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      const situations = [\n        { // case 0 -->\n          unites: unites,\n          coteConnu: coteConnu,\n          coteInconnu: coteInconnu,\n          tableau: tableauColonneLigne([`\\\\text{Longueur $${coteInconnu}$ du côté (en ${unites[0]})}`, `\\\\phantom{000}${L1}\\\\phantom{000}`, `\\\\phantom{000}${L2}\\\\phantom{000}`, `\\\\phantom{000}${L3}\\\\phantom{000}`, `\\\\phantom{000}${L4}\\\\phantom{000}`], [`\\\\text{Périmètre du rectangle (en $${unites[1]}$)}`],\n            ['', '', '', '']\n          ),\n          calculL1: `Pour ${L1} ${unites[0]} : $2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L1} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[0])} \\\\; \\\\text{${unitegrandL}}}`, this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2 * petitLNum[0] + 2 * grandLNum[0])} \\\\; \\\\text{${unitegrandL}}}$.`,\n          calculL2: `Pour ${L2} ${unites[0]} : $2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L2} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[1])} \\\\; \\\\text{${unitegrandL}}}`, this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2 * petitLNum[0] + 2 * grandLNum[1])} \\\\; \\\\text{${unitegrandL}}}$.`,\n          calculL3: `Pour ${L3} ${unites[0]} : $2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L3} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[2])} \\\\; \\\\text{${unitegrandL}}}`, this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2 * petitLNum[0] + 2 * grandLNum[2])} \\\\; \\\\text{${unitegrandL}}}$.`,\n          calculL4: `Pour ${L4} ${unites[0]} : $2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L4} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}`, this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2 * petitLNum[0] + 2 * grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}$.`,\n          tableau_corr: tableauColonneLigne([`\\\\text{Longueur $${coteInconnuCorr}$ du côté (en ${unitegrandL})}`, `\\\\phantom{0}${grandL[0]}\\\\phantom{0}`, `\\\\phantom{0}${grandL[1]}\\\\phantom{0}`, `\\\\phantom{0}${grandL[2]}\\\\phantom{0}`, `\\\\phantom{0}${grandL[3]}\\\\phantom{0}`],\n            [`\\\\text{Périmètre du rectangle (en ${unitepetitL})}`],\n            [\n`${texNombre(2 * petitLNum[0] + 2 * grandLNum[0])} \\\\; \\\\text{${unitegrandL}}`,\n`${texNombre(2 * petitLNum[0] + 2 * grandLNum[1])} \\\\; \\\\text{${unitegrandL}}`,\n`${texNombre(2 * petitLNum[0] + 2 * grandLNum[2])} \\\\; \\\\text{${unitegrandL}}`,\n`${texNombre(2 * petitLNum[0] + 2 * grandLNum[3])} \\\\; \\\\text{${unitegrandL}}`\n            ]\n          ),\n          tableau_corr_p1: tableauColonneLigne([`\\\\text{Longueur $${coteInconnuCorr}$ du côté (en $${unitegrandL}$)}`, `\\\\phantom{000}${grandL[0]}\\\\phantom{000}`, `\\\\phantom{000}${grandL[1]}\\\\phantom{000}`], //, `\\\\phantom{000}${grandL[2]}\\\\phantom{000}`,`\\\\phantom{000}${grandL[3]}\\\\phantom{000}`],\n            [`\\\\text{Périmètre du rectangle (en ${unitepetitL})}`],\n            [\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L1} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[0])} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[0])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L2} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[1])} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[1])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L3} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${grandLNum[2]} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[2])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L4} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${grandLNum[3]} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}`,`2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L4} \\\\; \\\\text{${unites[0]}}} \\\\color{black}{ = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${grandLNum[3]} \\\\; \\\\text{${unitegrandL}} = \\\\color{black}{${texNombre(2*petitLNum[0]+2*grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}}`,\n            ]\n          ),\n          tableau_corr_p2: tableauColonneLigne([`\\\\text{Longueur $${coteInconnuCorr}$ du côté (en $${unitegrandL}$)}`, `\\\\phantom{000}${grandL[2]}\\\\phantom{000}`, `\\\\phantom{000}${grandL[3]}\\\\phantom{000}`], //, `\\\\phantom{000}${grandL[2]}\\\\phantom{000}`,`\\\\phantom{000}${grandL[3]}\\\\phantom{000}`],\n            [`\\\\text{Périmètre du rectangle (en $${unitepetitL}$)}`],\n            [\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L1} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${grandLNum[0]} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[0])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L2} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${grandLNum[1]} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[1])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L3} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[2])} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[2])} \\\\; \\\\text{${unitegrandL}}}`,\n              // `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${L4} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${texNombre(grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}`,this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2*petitLNum[0]+2*grandLNum[3])} \\\\; \\\\text{${unitegrandL}}}`,\n            ]\n          ),\n          secondeQ: `2\\\\times \\\\color{blue}{${coteConnu} \\\\; \\\\text{${unites[1]}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${coteInconnu} \\\\; \\\\text{${unites[0]}}} ${etapeCorrective(`\\\\color{black}{\\\\; = 2\\\\times} \\\\color{blue}{${petitLNum[0]} \\\\; \\\\text{${unitepetitL}}} \\\\color{black}{+2\\\\times} \\\\color{red}{${coteInconnuCorr} \\\\; \\\\text{${unitegrandL}}}`, this.sup)} \\\\color{black}{ \\\\;= ${texNombre(2 * petitLNum[0])} + ${coteInconnuCorrNum} \\\\; \\\\text{exprimé en ${unitegrandL}}}`,\n          intro: txtCorr,\n          fig: figure\n        }\n      ]\n\n      const enonces = []\n      let indexSousQuestion = 0\n      let indexSousQuestionCorr = 0\n\n      for (let k = 0; k < situations.length; k++) {\n        enonces.push({\n          enonce: `\nOn considère le rectangle ci-dessous dont l'un des côtés mesure $${situations[k].coteConnu}$ $${unites[1]}$ et l'autre mesure $${situations[k].coteInconnu}$ $${unites[0]}$.<br>\n${situations[k].fig}<br>\n${numAlpha(indexSousQuestion++)} Compléter le tableau suivant :<br><br>\n${situations[k].tableau}<br><br>\n${numAlpha(indexSousQuestion++)} Quelle formule permet de calculer le périmètre de ce rectangle en fonction de $${situations[k].coteInconnu}$ ?\n`,\n          question: '',\n          correction: `\n${numAlpha(indexSousQuestionCorr++)} ${situations[k].intro}<br>\nIl y a plusieurs façons de calculer le périmètre d'un rectangle, par exemple : <br> $2\\\\times largeur + 2\\\\times Longueur$.<br>\nIci l'un des côtés mesure toujours $\\\\textcolor{blue}{${petitL[0]}}$ $${unitepetitL}$<br>\nCalculons les périmètres pour chacune des valeurs données :<br>\n${situations[k].calculL1}<br>\n${situations[k].calculL2}<br>\n${situations[k].calculL3}<br>\n${situations[k].calculL4}<br>\nNous pouvons alors remplir le tableau<br>\n${situations[k].tableau_corr}<br><br>\n${numAlpha(indexSousQuestionCorr++)} On peut généraliser le raisonnement des calculs du périmètre, et ainsi obtenir une formule.<br>\n$${situations[k].secondeQ}$\n\n`\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.debug) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Les mêmes unités\\n2 : Unités différentes']\n  // this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\n};\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TableauxEtFonction","typesDeQuestionsDisponibles","Exercice","this","debug","sup","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","L1","randint","L2","L3","L4","parseInt","coteInconnu","choice","coteInconnuCorr","coteInconnuCorrNum","coteConnu","unites","grandL","grandLNum","petitL","petitLNum","unitegrandL","unitepetitL","txtCorr","fenetreMathalea2D","xmin","ymin","xmax","ymax","pixelsParCm","scale","A","point","B","C","D","mesAppels","polygone","figure","mathalea2d","etapeCorrective","str","sortie","situations","tableau","tableauColonneLigne","calculL1","texNombre","calculL2","calculL3","calculL4","tableau_corr","tableau_corr_p1","tableau_corr_p2","secondeQ","intro","fig","enonces","indexSousQuestion","indexSousQuestionCorr","k","length","push","enonce","numAlpha","question","correction","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}