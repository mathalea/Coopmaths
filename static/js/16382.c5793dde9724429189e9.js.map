{"version":3,"file":"js/16382.c5793dde9724429189e9.js","mappings":"8QAIO,MAAMA,EAAQ,4CACRC,GAAW,EACXC,EAAU,SACVC,GAAkB,EAClBC,EAAiB,WASf,SAASC,EACtBC,EAAkB,mBAGlBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,IAAMH,EACXE,KAAKE,KAAO,EACZF,KAAKG,SAAW,WAChBH,KAAKI,QAAU,EACfJ,KAAKK,gBAAkB,EAEvBL,KAAKM,gBAAkB,WACrBN,KAAKO,eAAiB,GACtBP,KAAKQ,iBAAmB,GACnBR,KAAKC,MAERD,KAAKC,IAAM,mBAEb,IAAIQ,EAAS,GACW,iBAAbT,KAAKC,IAEdQ,EAAO,GAAKT,KAAKC,IAEjBQ,EAAST,KAAKC,IAAIS,MAAM,KAE1B,MAAMC,GAAUC,EAAAA,EAAAA,KACdH,EACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACzBT,KAAKa,aAEDC,GAAuBC,EAAAA,EAAAA,KAC3B,CAAC,YAAa,WACdf,KAAKa,aAEDG,GAAYD,EAAAA,EAAAA,KAAkB,CAAC,IAAK,OAAQf,KAAKa,aACvD,IAAII,EACJ,IAAK,IAAWC,EAAGC,EAAGC,EAAOC,EAApBC,EAAI,EAA2BA,EAAItB,KAAKa,YAAaS,IAC5DJ,EAAIP,EAAQW,GAAG,GACfH,EAAIR,EAAQW,GAAG,GAEbL,EAD0B,IAAxBM,SAASvB,KAAKE,MACG,YACc,IAAxBqB,SAASvB,KAAKE,MACJ,UAEAY,EAAqBQ,GAGrB,MAAjBN,EAAUM,GACa,cAArBL,GAEFG,EAAQ,KAAOF,EAAI,YAAcC,EAAI,kBACrCK,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGJ,EAAIC,GACpBnB,KAAKyB,aAAYL,EAAS,IAAGF,aAAaC,SAAUO,EAAAA,EAAAA,IAAiB1B,KAAMsB,IAC/ED,EAAY,KAAOH,EAAI,YAAcC,EAAI,MAAQD,EAAIC,EAAI,OAErDV,EAAOkB,OAAS,GAEI,KAAlBC,EAAAA,EAAAA,KAAQ,EAAG,IACbR,EAAQ,KAAOF,EAAI,6BAA+BA,EAAIC,EAAI,KACtDnB,KAAKyB,aAAYL,EAAS,KAAIF,eAAgBQ,EAAAA,EAAAA,IAAiB1B,KAAMsB,GAAM,OAAMJ,EAAIC,SAEzFC,EAAQ,4BAAmCD,EAAI,MAAQD,EAAIC,EAAI,KAC3DnB,KAAKyB,aAAYL,GAAQM,EAAAA,EAAAA,IAAiB1B,KAAMsB,GAAM,aAAYH,QAAQD,EAAIC,SAEpFK,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGJ,KAGpBE,EAAQ,KAAOF,EAAI,6BAA+BA,EAAIC,EAAI,KACtDnB,KAAKyB,aAAYL,GAAQM,EAAAA,EAAAA,IAAiB1B,KAAMsB,GAAM,aAAYH,QAAQD,EAAIC,QAClFK,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGH,IAEtBE,EAAY,KAAOH,EAAI,YAAcC,EAAI,MAAQD,EAAIC,EAAI,OAGlC,cAArBF,GAEFG,EAAQ,KAAOF,EAAIC,EAAI,UAAYA,EAAI,kBACvCK,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGJ,GAChBlB,KAAKyB,aAAYL,EAAS,IAAGF,EAAIC,WAAWA,SAAUO,EAAAA,EAAAA,IAAiB1B,KAAMsB,MAG7EO,EAAAA,EAAAA,KAAO,EAAC,GAAM,KAChBT,EAAS,KAAIF,EAAIC,4BAA4BD,MAC7CM,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGH,GAChBnB,KAAKyB,aAAYL,EAAS,IAAGF,EAAIC,aAAcO,EAAAA,EAAAA,IAAiB1B,KAAMsB,GAAM,OAAMJ,QAEtFE,EAAS,0BAAyBD,QAAQD,MAC1CM,EAAAA,EAAAA,IAAWxB,KAAMsB,EAAGJ,EAAIC,GACpBnB,KAAKyB,aAAYL,GAAQM,EAAAA,EAAAA,IAAiB1B,KAAMsB,GAAM,UAASH,OAAOD,OAG9EG,EAAa,KAAIH,EAAIC,WAAWA,OAAOD,MAErCY,EAAAA,GAAAA,cACFV,EAAQA,EAAMW,QAAQ,cAAe,KAEvC/B,KAAKO,eAAeyB,KAAKZ,GACzBpB,KAAKQ,iBAAiBwB,KAAKX,IAE7BY,EAAAA,EAAAA,KAAwBjC,OAE1BA,KAAKkC,sBAAwB,CAC3B,mBACA,kCAEFlC,KAAKmC,2BAA6B,CAChC,qBACA,EACA,2C,gBCvHW,SAASpC,IAItBC,KAAKR,MAAQ,GACbQ,KAAKoC,YAAa,EAclBpC,KAAKG,SAAW,GAChBH,KAAKqC,mBAAqB,GAC1BrC,KAAKsC,aAAe,GACpBtC,KAAKO,eAAiB,GACtBP,KAAKQ,iBAAmB,GACxBR,KAAKuC,QAAU,GACfvC,KAAKwC,kBAAoB,GACzBxC,KAAKyC,eAAiB,GACtBzC,KAAK0C,sBAAwB,GAK7B1C,KAAKI,QAAU,EACfJ,KAAK2C,YAAc,EAKnB3C,KAAK4C,mBAAoB,EACzB5C,KAAK6C,cAAgB,GACrB7C,KAAK8C,oBAAqB,EAC1B9C,KAAK+C,uBAAwB,EAC7B/C,KAAKgD,OAAS,EACdhD,KAAKiD,WAAa,EAClBjD,KAAKkD,kBAAmB,EACxBlD,KAAKmD,sBAAuB,EAC5BnD,KAAKoD,mBAAoB,EACzBpD,KAAKqD,uBAAwB,EAM7BrD,KAAKsD,QAAS,EACdtD,KAAKK,gBAAkB,EAKvBL,KAAKa,YAAc,GACnBb,KAAKuD,mBAAqB,EAC1BvD,KAAKwD,+BAAgC,EACrCxD,KAAKyD,qBAAsB,EAC3BzD,KAAK0D,oBAAqB,EAC1B1D,KAAK2D,MAAQ,GAEb3D,KAAKyB,YAAa,EAClBzB,KAAK4D,uBAAwB,EAE7B5D,KAAK6D,2BAA4B,EACjC7D,KAAKkC,uBAAwB,EAC7BlC,KAAK8D,6BAA8B,EAEnC9D,KAAKmC,4BAA6B,EAClCnC,KAAK+D,wBAAyB,EAC9B/D,KAAKgE,8BAA+B,EAEpChE,KAAKiE,4BAA6B,EAClCjE,KAAKkE,wBAAyB,EAC9BlE,KAAKmE,8BAA+B,EAEpCnE,KAAKoE,4BAA6B,EAClCpE,KAAKqE,wBAAyB,EAC9BrE,KAAKsE,8BAA+B,EAMpCtE,KAAKuE,cAAe,EASpBvE,KAAKwE,eAAiB,GAMtBxE,KAAKM,gBAAkB,SAAUmE,KAQjCzE,KAAK0E,oBAAsB,SAAUpD,KAAMqD,GAC/B,IAANrD,IAAStB,KAAKwE,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI/E,KAAKwE,eAAeQ,QAAQJ,IAAmB,KAGjD5E,KAAKwE,eAAexC,KAAK4C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/CM/CM003.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, creerCouples, choice, combinaisonListes, randint } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Tables de multiplications et de divisions'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Tables de multiplications et de divisions classiques, à trou ou un mélange des deux.\n *\n * Par défaut ce sont les tables de 2 à 9 mais on peut choisir les tables que l'on veut\n * @author Rémi Angot\n * Référence CM003\n */\nexport default function TablesMultiplicationsDivisions (\n  tablesParDefaut = '2-3-4-5-6-7-8-9'\n) {\n  // Multiplier ou diviser deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.sup2 = 1 // classique|a_trous|melange\n  this.consigne = 'Calculer'\n  this.spacing = 2\n  this.tailleDiaporama = 3\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    let tables = []\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des ;\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    const listeTypeDeQuestions = combinaisonListes(\n      ['classique', 'a_trous'],\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const operation = combinaisonListes(['x', 'div'], this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let typesDeQuestions\n    for (let i = 0, a, b, texte, texteCorr; i < this.nbQuestions; i++) {\n      a = couples[i][0]\n      b = couples[i][1]\n      if (parseInt(this.sup2) === 1) {\n        typesDeQuestions = 'classique'\n      } else if (parseInt(this.sup2) === 2) {\n        typesDeQuestions = 'a_trous'\n      } else {\n        typesDeQuestions = listeTypeDeQuestions[i]\n      }\n\n      if (operation[i] === 'x') {\n        if (typesDeQuestions === 'classique') {\n          // classique\n          texte = '$ ' + a + ' \\\\times ' + b + ' = \\\\dotfill $'\n          setReponse(this, i, a * b)\n          if (this.interactif) texte = `$${a} \\\\times ${b} = $` + ajouteChampTexte(this, i)\n          texteCorr = '$ ' + a + ' \\\\times ' + b + ' = ' + a * b + ' $'\n        } else {\n          if (tables.length > 2) {\n            // Si pour le premier facteur il y a plus de 2 posibilités on peut le chercher\n            if (randint(1, 2) === 1) {\n              texte = '$ ' + a + ' \\\\times \\\\ldots\\\\ldots = ' + a * b + ' $'\n              if (this.interactif) texte = `$ ${a} \\\\times $` + ajouteChampTexte(this, i) + `$ = ${a * b} $`\n            } else {\n              texte = '$ \\\\ldots\\\\ldots' + ' \\\\times ' + b + ' = ' + a * b + ' $'\n              if (this.interactif) texte = ajouteChampTexte(this, i) + `$ \\\\times ${b}  = ${a * b} $`\n            }\n            setReponse(this, i, a)\n          } else {\n            // Sinon on demande forcément le 2e facteur\n            texte = '$ ' + a + ' \\\\times \\\\ldots\\\\ldots = ' + a * b + ' $'\n            if (this.interactif) texte = ajouteChampTexte(this, i) + `$ \\\\times ${b}  = ${a * b} $`\n            setReponse(this, i, b)\n          }\n          texteCorr = '$ ' + a + ' \\\\times ' + b + ' = ' + a * b + ' $'\n        }\n      } else {\n        if (typesDeQuestions === 'classique') {\n          // classique\n          texte = '$ ' + a * b + ' \\\\div ' + b + ' = \\\\dotfill $'\n          setReponse(this, i, a)\n          if (this.interactif) texte = `$${a * b} \\\\div ${b} = $` + ajouteChampTexte(this, i)\n        } else {\n          // a trous\n          if (choice([true, false])) {\n            texte = `$ ${a * b} \\\\div \\\\ldots\\\\ldots = ${a}$`\n            setReponse(this, i, b)\n            if (this.interactif) texte = `$${a * b} \\\\div $` + ajouteChampTexte(this, i) + `$ = ${a}$`\n          } else {\n            texte = `$ \\\\ldots\\\\ldots \\\\div ${b}  = ${a}$`\n            setReponse(this, i, a * b)\n            if (this.interactif) texte = ajouteChampTexte(this, i) + `$\\\\div ${b} = ${a}$`\n          }\n        }\n        texteCorr = `$ ${a * b} \\\\div ${b} = ${a}$`\n      }\n      if (context.isDiaporama) {\n        texte = texte.replace('= \\\\dotfill', '')\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n  this.besoinFormulaire2Numerique = [\n    'Style de questions',\n    3,\n    '1 : Classique\\n2: À trous\\n3: Mélangé'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","TablesMultiplicationsDivisions","tablesParDefaut","Exercice","this","sup","sup2","consigne","spacing","tailleDiaporama","nouvelleVersion","listeQuestions","listeCorrections","tables","split","couples","creerCouples","nbQuestions","listeTypeDeQuestions","combinaisonListes","operation","typesDeQuestions","a","b","texte","texteCorr","i","parseInt","setReponse","interactif","ajouteChampTexte","length","randint","choice","context","replace","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}