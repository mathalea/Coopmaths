{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3A11-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","decompositionFacteursPremiers","Exercice","this","sup","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","listeQuestions","listeCorrections","contenu","contenuCorrection","typesDeQuestionsDisponibles","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","string_rappel","cribleEratostheneN","k","length","introduction","warnMessage","texte","texteCorr","i","cpt","nb_de_premiers","randint","max_premier","rg_max","tab_rangs","tab_rangs_exclus","m","push","tab_premiers","sort","a","b","tab_multiplicites","nombre_a_decomposer","racine_premier_1","Math","trunc","sqrt","texNombre","liste_facteurs_premiers","obtenirListeFacteursPremiers","quotient_intermediaire","miseEnEvidence","r1","premiersEntreBornes","r2","premier1","premier2","p","racine_prem","r","premier","racine_premier","indexOf","listeQuestionsToContenu","consigneCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable"],"mappings":"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","file":"js/8177.86efc244f2612689ece1.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,shuffle,combinaisonListesSansChangerOrdre,obtenirListeFacteursPremiers,texNombre,miseEnEvidence,modalPdf,modalVideo,cribleEratostheneN,premiersEntreBornes,warnMessage} from '../../modules/outils.js'\nexport const titre = 'Décomposition en facteurs premiers d’un entier'\n\n/**\n * 3A11-2 - decompositionFacteursPremiers\n * Décomposer un nombre en facteurs premiers et compter son nombre de diviseurs à partir d'un tableau\n * plusieurs type de nombres à décomposer\n * type 1 : 3 à 5 facteurs premiers max, multiplicités 0,1,2 ou 3 max à préciser\n * type 2 : un produit de deux premiers entre 30 et 100, multiplicité 1 ... suffisamment de possibilités?\n * type 3 : un gros premiers au delà de 1000 et inférieur à 2 000\n * @author Sébastien Lozano\n */\nexport default function decompositionFacteursPremiers() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.sup = 1;\n\tthis.titre = titre;\n\t// pas de différence entre la version html et la version latex pour la consigne\n\tthis.consigne = `À l'aide de la calculatrice, décomposer pas à pas les nombres entiers en produit de facteurs premiers.`;\n\t//this.consigne += `<br>`;\n\tcontext.isHtml ? this.spacing = 3 : this.spacing = 2;\n\tcontext.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n\tthis.nbQuestions = 3;\n\t//this.correctionDetailleeDisponible = true;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\tthis.sup = 1;\n\tthis.listePackages = `bclogo`;\n\n\tthis.nouvelleVersion = function (numeroExercice) {\n\t\tlet typesDeQuestions;\n\t\tif (context.isHtml) { // les boutons d'aide uniquement pour la version html\n\t\t\t//this.boutonAide = '';\n\t\t\tthis.boutonAide = modalPdf(numeroExercice, \"assets/pdf/FicheArithmetique-3A11.pdf\", \"Aide mémoire sur les nombres premiers (Sébastien Lozano)\", \"Aide mémoire\");\n\t\t\tthis.boutonAide += modalVideo('conteMathsNombresPremiers', '/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo');\n\t\t} else { // sortie LaTeX\n\t\t};\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tthis.contenu = ''; // Liste de questions\n\t\tthis.contenuCorrection = ''; // Liste de questions corrigées\n\n\t\tlet typesDeQuestionsDisponibles = [1, 2, 3];\n\t\ttypesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles); // on mélange l'ordre des questions\n\n\t\t//let typesDeQuestionsDisponibles = [1];\n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions);\n\n\t\tlet string_rappel = `Cette liste des nombres premiers inférieurs à 100 pourra être utile : <br>` + cribleEratostheneN(100)[0];\n\t\tfor (let k = 1; k < cribleEratostheneN(100).length; k++) {\n\t\t\tstring_rappel += `, ` + cribleEratostheneN(100)[k];\n\t\t};\n\t\tstring_rappel += `.`;\n\n\t\tthis.introduction = warnMessage(string_rappel, `nombres`, `Coup de pouce`);\n\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\ttypesDeQuestions = listeTypeDeQuestions[i];\n\n\t\t\tswitch (typesDeQuestions) {\n\t\t\t\tcase 1: // 3 à 5 facteurs premiers max compris entre 0 et 30, de multiplicité 1,2 ou 3 max\n\t\t\t\t\t// on fixe le nombre de facteurs premier entre 3 et 5\n\t\t\t\t\tlet nb_de_premiers = randint(3, 5);\n\t\t\t\t\t// on fixe la limite pour le choix des premiers\n\t\t\t\t\tlet max_premier = 11;\n\t\t\t\t\t// on fixe le rang max pour le choix des premiers\n\t\t\t\t\tlet rg_max = cribleEratostheneN(max_premier).length - 1;\n\t\t\t\t\t// on choisit les rangs pour les nombres premiers\n\t\t\t\t\tlet tab_rangs = [];\n\t\t\t\t\tlet tab_rangs_exclus = [];\n\t\t\t\t\tfor (let k = 0; k < (nb_de_premiers); k++) {\n\t\t\t\t\t\tfor (let m = 0; m < k; m++) {\n\t\t\t\t\t\t\ttab_rangs_exclus.push(tab_rangs[m]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttab_rangs[k] = randint(0, rg_max, tab_rangs_exclus);\n\t\t\t\t\t};\n\t\t\t\t\t// on choisit les premiers\n\t\t\t\t\tlet tab_premiers = [];\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\ttab_premiers[k] = cribleEratostheneN(max_premier)[tab_rangs[k]];\n\t\t\t\t\t};\n\t\t\t\t\t// on range les facteurs premiers dans l'ordre croissant\n\t\t\t\t\ttab_premiers.sort(function (a, b) {\n\t\t\t\t\t\treturn a - b;\n\t\t\t\t\t});\n\t\t\t\t\t// on choisit les multiplicités\n\t\t\t\t\tlet tab_multiplicites = [];\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\ttab_multiplicites[k] = randint(1, 2);\n\t\t\t\t\t};\n\t\t\t\t\t// yapluka écrire le nombre dans l'énoncé et sa décomposition dans la correction\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer `;\n\t\t\t\t\tlet nombre_a_decomposer = 1;\n\t\t\t\t\tfor (let k = 0; k < tab_rangs.length; k++) {\n\t\t\t\t\t\tfor (let m = 0; m < tab_multiplicites[k]; m++) {\n\t\t\t\t\t\t\tnombre_a_decomposer = nombre_a_decomposer * tab_premiers[k];\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tlet racine_premier_1 = Math.trunc(Math.sqrt(nombre_a_decomposer));\n\t\t\t\t\ttexte += `$${texNombre(nombre_a_decomposer)}$ en produit de facteurs premiers.`;\n\t\t\t\t\t// correction\t\t\t\t\t\t\n\t\t\t\t\ttexteCorr = `Nous allons successivement tester la divisibilité de $${texNombre(nombre_a_decomposer)}$ par tous les nombres premiers inférieurs à `;\n\t\t\t\t\ttexteCorr += `$${texNombre(nombre_a_decomposer)}$ en commençant par 2, 3, 5, 7, ...<br>`;\n\t\t\t\t\ttexteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(nombre_a_decomposer)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(nombre_a_decomposer)}}$ c'est à dire inférieurs à $${texNombre(racine_premier_1)}$.<br>`;\n\t\t\t\t\ttexteCorr += `Ce sont les nombres de la liste : <br>`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier_1)[0] + ` ; `;\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_premier_1).length; k++) {\n\t\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier_1)[k];\n\t\t\t\t\t\tif (k != cribleEratostheneN(racine_premier_1).length - 1) {\n\t\t\t\t\t\t\ttexteCorr += ` ; `;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (k % 15 == 0) {\n\t\t\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tvar liste_facteurs_premiers = obtenirListeFacteursPremiers(nombre_a_decomposer);\n\t\t\t\t\tvar quotient_intermediaire = nombre_a_decomposer;\n\t\t\t\t\tfor (let k = 0; k < liste_facteurs_premiers.length; k++) {\n\t\t\t\t\t\ttexteCorr += `$${texNombre(quotient_intermediaire)}\\\\div${miseEnEvidence(liste_facteurs_premiers[k])} = ${texNombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;\n\t\t\t\t\t\tquotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `Finalement on obtient la décomposition suivante : $ ${texNombre(nombre_a_decomposer)} = `;\n\t\t\t\t\tif (tab_multiplicites[0] == 1) {\n\t\t\t\t\t\ttexteCorr += `${tab_premiers[0]}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `${tab_premiers[0]}^{${tab_multiplicites[0]}}`;\n\t\t\t\t\t};\n\t\t\t\t\tfor (let k = 1; k < tab_premiers.length; k++) {\n\t\t\t\t\t\tif (tab_multiplicites[k] == 1) {\n\t\t\t\t\t\t\ttexteCorr += `\\\\times ${tab_premiers[k]}`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexteCorr += `\\\\times ${tab_premiers[k]}^{${tab_multiplicites[k]}}`;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `$`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // deux premiers compris entre 30 et 100 de multiplicité 1\n\t\t\t\t\t// on choisit un rang différent pour chaque premier entre 30 et 100\n\t\t\t\t\tlet r1 = randint(0, premiersEntreBornes(30, 100).length - 1);\n\t\t\t\t\tlet r2 = randint(0, premiersEntreBornes(30, 100).length - 1, r1);\n\t\t\t\t\tlet premier1 = premiersEntreBornes(30, 100)[r1];\n\t\t\t\t\tlet premier2 = premiersEntreBornes(30, 100)[r2];\n\t\t\t\t\tif (premier1 > premier2) { // on inverse p1 et p2 si p1 est supérieur à p2\n\t\t\t\t\t\tlet p = premier1;\n\t\t\t\t\t\tpremier1 = premier2;\n\t\t\t\t\t\tpremier2 = p;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer $${texNombre(premier1 * premier2)}$ en produit de facteurs premiers.`;\n\t\t\t\t\tlet racine_prem = Math.trunc(Math.sqrt(premier1 * premier2));\n\t\t\t\t\ttexteCorr = `Il est suffisant de tester la divisibilité de $${texNombre(premier1 * premier2)}$ par tous les nombres premiers inférieurs ou égaux à $\\\\sqrt{${texNombre(premier1 * premier2)}}$ c'est à dire inférieurs à $${texNombre(racine_prem)}$.<br>`;\n\t\t\t\t\ttexteCorr += `Ce sont les nombres de la liste suivante : <br>$`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_prem)[0];\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_prem).length; k++) {\n\t\t\t\t\t\ttexteCorr += `; ` + cribleEratostheneN(racine_prem)[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.$<br>`;\n\t\t\t\t\tliste_facteurs_premiers = obtenirListeFacteursPremiers(premier1 * premier2);\n\t\t\t\t\tquotient_intermediaire = premier1 * premier2;\n\t\t\t\t\tfor (let k = 0; k < liste_facteurs_premiers.length; k++) {\n\t\t\t\t\t\ttexteCorr += `$${texNombre(quotient_intermediaire)}\\\\div${miseEnEvidence(liste_facteurs_premiers[k])} = ${texNombre(quotient_intermediaire / liste_facteurs_premiers[k])}$<br>`;\n\t\t\t\t\t\tquotient_intermediaire = quotient_intermediaire / liste_facteurs_premiers[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += ` D'où $${texNombre(premier1 * premier2)} = ${texNombre(premier1)}\\\\times${texNombre(premier2)}$.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: // un gros premier entre 1000 et 2000\t\t\t\n\t\t\t\t\t// on choisit un rang pour le nombre premier entre 1000 et 2000\n\t\t\t\t\tlet r = randint(0, premiersEntreBornes(1000, 2000).length - 1);\n\t\t\t\t\tlet premier = premiersEntreBornes(1000, 2000)[r];\n\t\t\t\t\tlet racine_premier = Math.trunc(Math.sqrt(premier));\n\t\t\t\t\ttexte = `À l'aide de la calculatrice, décomposer $${texNombre(premier)}$ en produit de facteurs premiers.`;\n\t\t\t\t\ttexteCorr = `En testant la divisibilité de $${texNombre(premier)}$ par tous les nombres premiers inférieurs ou égaux à $${racine_premier}$`;\n\t\t\t\t\ttexteCorr += ` c'est à dire les nombre de la liste $`;\n\t\t\t\t\ttexteCorr += cribleEratostheneN(racine_premier)[0];\n\t\t\t\t\tfor (let k = 1; k < cribleEratostheneN(racine_premier).length; k++) {\n\t\t\t\t\t\ttexteCorr += `; ` + cribleEratostheneN(racine_premier)[k];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `$, `;\n\t\t\t\t\ttexteCorr += `on se rend compte que $${texNombre(premier)}$ est un nombre premier donc `;\n\t\t\t\t\ttexteCorr += `$${texNombre(premier)} = ${texNombre(premier)}$.`;\n\t\t\t\t\tbreak;\n\t\t\t};\n\n\t\t\tif (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\t//this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"]; \n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}