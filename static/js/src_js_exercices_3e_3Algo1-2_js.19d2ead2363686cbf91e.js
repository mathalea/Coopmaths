/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_3e_3Algo1-2_js"],{

/***/ "./src/js/exercices/3e/3Algo1-2.js":
/*!*****************************************!*\
  !*** ./src/js/exercices/3e/3Algo1-2.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Exercice_zero_mathalea)\n/* harmony export */ });\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n\n\n\n\n\n\n\n\nconst titre = 'Conjecture de Syracuse'\n\n/**\n * @class Syracuse\n * @classdesc Outils pour les suites de Syracuse \n * @author Sébastien Lozano\n */\n\nfunction Syracuse({N}) {\n\n  // Pour déterminer les éléments de la suite de Syracuse jusqu'au premier 1\n  this.suiteDeSyracuse = function() {\n    let sortie = [N];\n    let u = N;\n    if (N==1) {\n      sortie = [1,4,2,1];\n    } else {\n      while (u !=1) {\n        if (u%2 == 0) {\n          u = u/2;        \n        } else {\n          u = 3*u+1;        \n        };\n        sortie.push(u);\n      };\n    }\n    return sortie;\n  };\n\n  // Pour créer les coordonées à placer dans un graphique cartésien d'une suite de Syracuse\n  this.coordonneesSuiteDeSyracuse = function(suite) {\n    let sortie = [];\n    for (let i=0; i<suite.length;i++) {\n      sortie.push([i,suite[i]]);\n    };\n    return sortie;\n  };\n\n  // Pour déterminer la valeur maximale de la suite jusqu'au premier 1\n  this.altitudeMaximale = function() {\n    let entier = N;    \n    return Math.max(...this.suiteDeSyracuse(entier));\n  };\n  \n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1 \n  // sans compter la valeur initiale\n  this.tempsDeVol = function() {\n    let entier = N;    \n    return this.suiteDeSyracuse(entier).length-1;\n  };\n\n  // Pour déterminer le nombre d'éléments de la suite de Syracuse jusqu'au premier 1\n  // qui sont strictement supérieurs à la valeur initiale sans la compter !\n  this.tempsDeVolEnAltitude = function() {\n    let entier = N;    \n    let compteur = 1;\n    while (this.suiteDeSyracuse(entier)[compteur]>this.suiteDeSyracuse(entier)[0]) {\n      compteur+=1;\n    };\n    return compteur-1;    \n  };\n};\n\nfunction syracuse({ N='1'}) {\n  return new Syracuse({ N: N })\n};\n\n\n\nfunction Exercice_zero_mathalea() {\n    \"use strict\"\n    _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_1__.default.call(this)\n    this.titre = titre;\n    this.consigne = \"\";        \n    this.nb_questions = 5; // Ici le nombre de questions\n    this.nb_questions_modifiable=false // Active le formulaire nombre de questions\n    this.nb_cols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n    this.nb_cols_corr = 1;// Le nombre de colonne pour la correction LaTeX\n    this.pas_de_version_LaTeX=false; // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n    this.pas_de_version_HMTL=false; // mettre à true si on ne veut pas de l'exercice en ligne\n    this.correction_detaillee_disponible=true;\n    this.liste_packages = `bclogo`;\n    // Voir la Classe Exercice pour une liste exhaustive des propriétés disponibles.\n  \n    //  this.sup = false; // A décommenter : valeur par défaut d'un premier paramètre\n    //  this.sup2 = false; // A décommenter : valeur par défaut d'un deuxième paramètre\n    //  this.sup3 = false; // A décommenter : valeur par défaut d'un troisième paramètre\n    \n    // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n    this.nouvelle_version = function (numero_de_l_exercice) {\n      this.bouton_aide = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.modal_youtube)(\n        numero_de_l_exercice,\n        'https://youtu.be/aRe4ARtQiJY',\n        'Conjecture de Syracuse',\n        'En vidéo sur Maths-et-tiques'\n      );\n      // la variable numero_de_l_exercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n      // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n      \n      this.liste_questions = [] // tableau contenant la liste des questions \n      this.liste_corrections = []\n      let type_de_questions_disponibles=[1,2,3,4,5] // tableau à compléter par valeurs possibles des types de questions\n      let liste_type_de_questions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.combinaison_listes_sans_changer_ordre)(type_de_questions_disponibles, this.nb_questions)\n      // On choisit un entier pour l'étude de la suite de Syracuse correspondante\n      // On contraint le temps de vol entre 5 et 25\n      // On contraint l'altitude maximale en dessous de 100\n      //let entier = 15;\n      let entier = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.randint)(1,200);      \n      while (syracuse({N:entier}).tempsDeVol()>25 || syracuse({N:entier}).tempsDeVol()<5 || syracuse({N:entier}).altitudeMaximale()>100) {\n        entier = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.randint)(1,200);\n      };\n\n      for (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {\n\n        // Petite intro connaissances\n        let string_intro = `En mathématiques, on appelle conjecture une proposition qui n'est pas encore démontrée.\n        On a éventuellement vérifié cette proposition sur beaucoup d'exemples mais cela ne garantit pas qu'elle soit toujours vraie.<br>\n        Nous allons nous intéresser à la ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('conjecture de Syracuse')} découverte par le mathématicien allemand ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('Lothar Collatz')} en 1930\n        à l'université de Syracuse.`\n        if (sortie_html) {\n          string_intro +=`<br><br>`;\n        } else {\n          string_intro += `\\\\par\\\\vspace{0.5cm}`\n        };\n        string_intro += `${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('Algorithme de Syracuse :')}`;\n        if (sortie_html) {\n          string_intro +=`<br>`;\n        };\n        string_intro += `        \n        ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.enumerate_sans_puce_sans_numero)([\n          `On choisit un nombre entier strictement positif.`,\n          `$\\\\leadsto$ Si l'entier choisi est pair on le divise par 2.`,\n          `$\\\\leadsto$ Si l'entier choisi est impair on le multiplie par 3 et on ajoute 1.`,\n          `On recommence avec le nouvel entier trouvé tant qu'il ne vaut pas 1.`\n        ])}<br>                    \n        `;        \n        string_intro += `${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('Conjecture de Syracuse :')}<br>`;\n        string_intro += `Encore appelée conjecture de ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('Collatz')}, conjecture ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('d\\'Ulam')},\n        conjecture ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('tchèque')} ou ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('problème 3x + 1')}, est l'hypothèse mathématique selon laquelle\n        la suite de Syracuse de n'importe quel entier strictement positif atteint 1.<br>\n        En dépit de la simplicité de son énoncé, cette conjecture défie depuis de nombreuses années les mathématiciens.\n        `;\n\n        this.introduction = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.lampe_message)({\n          titre: `Introduction`,\n          texte: string_intro,\n          couleur: `nombres`\n        });\n\n       \n        // Pour les objets de mathALEA2D\n        let objets_correction= [], objets_correction_plus = [], params_correction = {};        \n        // On crée la liste de coordonnées de la suite de Syracuse \n        let coord_Syracuse = syracuse({N:entier}).coordonneesSuiteDeSyracuse(syracuse({N:entier}).suiteDeSyracuse());\n\n        // Pour ajouter le graphique et le repère\n        let y_coeff = 5;\n        let x_coeff = 2;\n\n        // Le repère\n        let r2 = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.repere2)({\n          axesEpaisseur : 3,\n          grille:false,          \n          xMin: -1,\n          yMin: -1,\n          xMax: syracuse({N:entier}).tempsDeVol()+1,\n          yMax: syracuse({N:entier}).altitudeMaximale()+5,         \n          yThickMin: 0,\n          yThickDistance: 1*y_coeff,\n          yUnite:1/y_coeff,\n          xUnite:1/x_coeff,\n          xThickMin: 0,\n          xThickDistance:1*x_coeff,\n          xLegende: 'Applications de l\\'algorithme',\n          xLegendePosition : [(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).tempsDeVol()+2)/x_coeff), 0],\n          yLegende: 'Altitude',\n          yLegendePosition : [-1, (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).altitudeMaximale()+8)/y_coeff)],                    \n        });\n        \n        // Le graphique cartésien\n        let g = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.traceGraphiqueCartesien)(coord_Syracuse,r2)\n        \n        // On pousse tout ça dans les objets, le repère aussi coño !!!\n        objets_correction.push(r2,g);\n        \n        let A = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.point)(0,syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff);\n        let B = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.point)(syracuse({N:entier}).tempsDeVol()/x_coeff,syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff);\n        let s = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(A,B,'red');\n        //let t = texteParPoint('mon texte',B);\n        let t = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.latexParCoordonnees)(\n          '\\\\text{Altitude initiale}',\n          syracuse({N:entier}).tempsDeVol()/x_coeff,\n          syracuse({N:entier}).suiteDeSyracuse()[0]/y_coeff,\n          'red',\n          200,\n          25,\n          'white'\n        );\n        \n        objets_correction_plus.push(r2,g,s,t);\n\n        // On fixe la fenetre pour le SVG/Tikz\n        params_correction = {\n           xmin: -2,\n           ymin: -2,\n           xmax:(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).tempsDeVol()+20)/x_coeff),\n           ymax: (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).altitudeMaximale()+10)/y_coeff),\n           pixelsParCm: 30,           \n           //scale: 0.7,\n           optionsTikz: [`xscale=${18/(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).tempsDeVol()+20)/x_coeff)}`,`yscale=${7/(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.calcul)((syracuse({N:entier}).altitudeMaximale()+10)/y_coeff)}`],\n           mainlevee: false \n        }\n                \n\n        let string_connaissance={\n          cas1 :{\n            titre:`Cycle trivial`,\n            texte:`Après que le nombre 1 a été atteint, la suite des valeurs (4,2,1) se répète indéfiniment.\n            C'est pourquoi on ne s'intéresse qu'à la liste des entiers jusqu'au premier 1.`\n          },\n          cas2 :{\n            titre:`Vol de la suite de Syracuse ${entier}`,\n            texte:`Les graphiques font penser à la chute chaotique d'un grêlon ou bien à la trajectoire d'une feuille emportée par le vent.\n            Sur le graphique ci-dessous, on peut observer le vol de la suite de Syracuse ${entier}.`\n          },\n          cas3 :{\n            titre:`Altitude maximale de la suite de Syracuse ${entier}`,\n            texte:`Si on file la métaphore, la valeur maximale atteinte par les valeurs trouvées serait désignée par l'altitude maximale du vol. `\n          },\n          cas4 :{\n            titre:`Temps de vol de la suite de Syracuse ${entier}`,\n            texte:`C'est le plus petit nombre de fois qu'il faut appliquer l'algorithme pour atteindre la valeur 1 pour la première fois.`\n          },\n          cas5 :{\n            titre:`Temps de vol en altitude de la suite de Syracuse ${entier}`,\n            texte:`C'est le plus petit nombre de fois qu'il faut appliquer l'algorithme avant que la valeur suivante soit strictement inférieure\n            à la valeur initiale. ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)('Attention')} cela ne signifie pas que l'on ne repassera jamais au dessus de la valeur initiale.\n            `\n          },\n        };\n\n        switch (liste_type_de_questions[i]) { // Chaque question peut être d'un type différent, ici 4 cas sont prévus...\n          case 1: //étude du cas N = 1\n            texte = `On choisit le nombre entier 1. Quels sont tous les entiers déterminés par cet algorithme ?`\n            texte_corr = `Si on choisit le nombre 1 au départ la suite de Syracuse est : ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)(syracuse({N:1}).suiteDeSyracuse())}<br><br>`;            \n            texte_corr+= (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_en_couleur_et_gras)('Remarque - '+string_connaissance.cas1.titre)+' : '+ string_connaissance.cas1.texte;              \n            break;\n          case 2: //suite de Syracuse pour un entier aléatoire          \n            texte = `Déterminer tous les entiers issus de cet algorithme lorsqu'on choisit ${entier}.`;\n            texte_corr = `La suite de Syracuse du nombre ${entier} est : <br>\n            ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)(syracuse({N:entier}).suiteDeSyracuse())}<br><br>`;            \n            texte_corr+= (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_en_couleur_et_gras)('Remarque - '+string_connaissance.cas2.titre)+' : '+ string_connaissance.cas2.texte+'<br><br>';              \n\n            if (this.correction_detaillee) {\n              texte_corr += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_correction, objets_correction)\n            }            \n            break;\n          case 3://altitude max\n            texte = `Quelle est la valeur maximale de cette liste d'entiers ?`;\n            texte_corr = `La valeur maximale atteinte vaut : ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)(syracuse({N:entier}).altitudeMaximale())}<br><br>`;            \n            texte_corr+= (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_en_couleur_et_gras)('Remarque - '+string_connaissance.cas3.titre)+' : '+ string_connaissance.cas3.texte;              \n            break;\n          case 4://temps de vol\n            texte = `Combien de fois au minimum faut-il appliquer l'algorithme pour trouver la valeur 1 ?`;\n            texte_corr = `Il faut  appliquer au minimum ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)(syracuse({N:entier}).tempsDeVol())} fois l'algorithme pour trouver la valeur 1.<br><br>`;            \n            texte_corr+= (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_en_couleur_et_gras)('Remarque - '+string_connaissance.cas4.titre)+' : '+ string_connaissance.cas4.texte;              \n            break;            \n          case 5://temps de vol en altitude\n            texte = `Au bout de combien d'application minimum de l'algorithme la valeur calculée suivante sera-t-elle strictement inférieure à la valeur initiale ?`;\n            //`Quelle est le nombre d'éléments de cette liste d'entiers qui sont strictement supérieurs à la valeur initiale, sans compter cette valeur initiale ?`;            \n            if (syracuse({N:entier}).tempsDeVolEnAltitude()==0) {\n              texte_corr = `Dès la première application de l'algorithme la valer trouvée est inférieure à la valeur initiale.`\n            } else {\n              texte_corr = `Il faut appliquer au minimum ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_gras)(syracuse({N:entier}).tempsDeVolEnAltitude())} fois l'algorithme pour que la valeur calculée suivante soit strictement inférieure à la valeur initiale.`\n            };\n            texte_corr +=`<br><br>`;\n            //texte_corr += `${syracuse({N:entier}).tempsDeVolEnAltitude()}<br><br>`;            \n            texte_corr+= (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.texte_en_couleur_et_gras)('Remarque - '+string_connaissance.cas5.titre)+' : '+ string_connaissance.cas5.texte+'<br><br>';              \n\n            if (this.correction_detaillee) {\n              texte_corr += (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)(params_correction, objets_correction_plus)\n            } \n            break;\n        };         \n\n        if (this.liste_questions.indexOf(texte) == -1) {\n          // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n          this.liste_questions.push(texte);\n          this.liste_corrections.push(texte_corr);\n          i++;\n        }\n        cpt++;\n      }\n      (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_0__.liste_de_question_to_contenu)(this); // On envoie l'exercice à la fonction de mise en page\n    };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  \n  //\tthis.besoin_formulaire_numerique = ['Type de questions', 3, `1 : Perpendiculaires\\n 2 : Parallèles\\n 3 : Mélange`]\n  //  this.besoin_formulaire2_numerique = [\"Type de cahier\",3,`1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`];\n  // this.besoin_formulaire3_case_a_cocher =['figure à main levée',true]\n  \n  } // Fin de l'exercice.\n  \n\n//# sourceURL=webpack://mathalea/./src/js/exercices/3e/3Algo1-2.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);