{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4C32.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","interactifReady","interactifType","amcReady","amcType","NotationScientifique","Exercice","this","sup","sup2","nbCols","nbColsCorr","nbQuestions","interactif","nouvelleVersion","reponse","typesDeQuestionsDisponibles","parseInt","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","mantisse","exp","decimalstring","scientifiquestring","i","cpt","randint","context","calcul","choice","texNombrec","ajouteChampTexte","indexOf","push","setReponse","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","strict","vertical","Math","abs","autoCorrection","enonce","options","ordered","lastChoice","propositions","statut","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/47444.97b971135d0b3a4942de.js","sourcesContent":["import { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\n\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Notation scientifique'\nexport const interactifReady = true\nexport const interactifType = 'numerique'\nexport const amcReady = true\nexport const amcType = 'AMCNum' // type de question AMC\n\n/**\n * Ecrire un nombre décimal en notation scientifique et inversement\n * @author Jean-Claude Lhote\n * 4C32\n */\n\nexport default function NotationScientifique () {\n  Exercice.call(this)\n  this.sup = 1\n  this.sup2 = 1\n  this.titre = titre\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestions = 5\n  this.interactif = false\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.amcType = amcType\n  this.amcReady = amcReady\n\n  /********************************************************************/\n  /** Type 4 : questionmultx avec AMCnumericChoices */\n  // Dans ce cas, le tableau des booléens comprend les renseignements nécessaires pour paramétrer \\AMCnumericCoices\n  // {int digits,int decimals,bool signe,int exposantNbChiffres,bool exposantSigne,int approx}\n  // La correction est dans tabQCM[1][0] et la réponse numlérique est dans tabQCM[1][1]\n  /********************************************************************/\n\n  this.nouvelleVersion = function () {\n    let reponse\n    if (parseInt(this.sup) === 1) this.consigne = 'Donner l\\'écriture scientifique des nombres suivants.'\n    else this.consigne = 'Donner l\\'écriture décimale des nombres suivants.'\n    let typesDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (parseInt(this.sup2) === 1) typesDeQuestionsDisponibles = [0, 0, 0, 1, 1]\n    else if (parseInt(this.sup2) === 2) typesDeQuestionsDisponibles = [0, 1, 1, 2, 2]\n    else typesDeQuestionsDisponibles = [2, 2, 3, 3, 3]\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, mantisse, exp, decimalstring, scientifiquestring, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          mantisse = randint(1, 9)\n          if (!context.isAmc) {\n            exp = randint(1, 5)\n          } else {\n            exp = randint(1, 3)\n          }\n\n          break\n        case 1:\n          mantisse = calcul(randint(11, 99) / 10)\n          if (!context.isAmc) {\n            exp = randint(1, 5)\n          } else {\n            exp = randint(1, 3)\n          }\n          break\n        case 2:\n          if (randint(0, 1) === 1) mantisse = calcul(randint(111, 999) / 100)\n          else mantisse = calcul((randint(1, 9) * 100 + randint(1, 9)) / 100)\n          if (!context.isAmc) {\n            exp = randint(1, 7) * choice([-1, 1])\n          } else {\n            exp = randint(1, 3) * choice([-1, 1])\n          }\n          break\n        case 3:\n          if (randint(0, 1) === 1) mantisse = calcul((randint(1, 9) * 1000 + randint(1, 19) * 5) / 1000)\n          else mantisse = calcul(randint(1111, 9999) / 1000)\n          if (!context.isAmc) {\n            exp = randint(1, 7) * choice([-1, 1])\n          } else {\n            exp = randint(1, 3) * choice([-1, 1])\n          }\n          break\n      }\n      reponse = calcul(mantisse * 10 ** exp)\n      decimalstring = texNombrec(mantisse * 10 ** exp)\n      scientifiquestring = `${texNombrec(mantisse)}\\\\times 10^{${exp}}`\n      if (this.sup === 1) {\n        texte = `$${decimalstring}$`\n        texteCorr = `$${decimalstring} = ${scientifiquestring}$`\n        if (this.interactif) {\n          texte = ajouteChampTexte(this, i, {\n            texte: `$${decimalstring} = $`\n          })\n        }\n      } else {\n        texteCorr = `$${scientifiquestring} = ${decimalstring}$`\n        texte = `$${scientifiquestring}$`\n        if (this.interactif) {\n          texte = ajouteChampTexte(this, i, {\n            texte: `$${scientifiquestring} = $`\n          })\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n\n        if (parseInt(this.sup) === 1) {\n          setReponse(this, i, reponse, { digits: listeTypeDeQuestions[i] + 1, decimals: listeTypeDeQuestions[i], signe: false, exposantNbChiffres: 1, exposantSigne: true, approx: 0 })\n        } else {\n          setReponse(this, i, reponse, { strict: false, vertical: false, digits: 2 * Math.abs(exp) + 1, decimals: Math.abs(exp), signe: false, exposantNbChiffres: 0, exposantSigne: false, approx: 0 })\n        }\n        if (context.isAmc) {\n          if (parseInt(this.sup) === 1) {\n            this.amcType = 4\n            this.autoCorrection[i].enonce = \"Donner l'écriture scientifique du nombre \" + texte\n          } else {\n            this.amcType = 1\n            this.autoCorrection[i].enonce = \"Donner l'écriture décimale du nombre \" + texte\n            this.autoCorrection[i].options = {\n              ordered: false,\n              lastChoice: 5\n            }\n            this.autoCorrection[i].propositions = [\n              {\n                texte: `$${decimalstring}$`,\n                statut: true\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (exp - 1))}$`,\n                statut: false\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (exp + 1))}$`,\n                statut: false\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (-exp))}$`,\n                statut: false\n              }\n            ]\n          }\n        }\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 2, '1 : Traduire en notation scientifique\\n2 : Traduire en notation décimale']\n  this.besoinFormulaire2Numerique = ['Niveaux de difficulté', 3, '1 : Facile\\n2 : Moyen\\n3 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}