{"version":3,"file":"js/47781.eacb02a53d6525ccf8fa.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N31-1.js","webpack://mathalea/./src/js/exercices/4e/4C32.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import NotationScientifique from '../4e/4C32.js'\nexport const titre = 'Notation scientifique'\nexport { amcReady, amcType } from '../4e/4C32.js'\nexport { interactifReady, interactifType } from '../4e/4C32.js'\n\n/**\n * Clone de 4C32 pour les 2nde\n * @author Sébastien Lozano\n */\n\nexport default function NotationScientifique2e () {\n  NotationScientifique.call(this)\n}\n","import { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec, scientifiqueToDecimal, sp } from '../../modules/outils.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\n\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Notation scientifique'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum' // type de question AMC\n\n/**\n * Ecrire un nombre décimal en notation scientifique et inversement\n * @author Jean-Claude Lhote\n * 4C32\n */\n\nexport default function NotationScientifique () {\n  Exercice.call(this)\n  this.sup = 1\n  this.sup2 = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestions = 5\n  this.interactif = false\n\n  this.nouvelleVersion = function () {\n    let reponse\n    if (parseInt(this.sup) === 1) this.consigne = 'Donner l\\'écriture scientifique des nombres suivants.'\n    else this.consigne = 'Donner l\\'écriture décimale des nombres suivants.'\n    let typesDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    if (parseInt(this.sup2) === 1) typesDeQuestionsDisponibles = [0, 0, 0, 1, 1]\n    else if (parseInt(this.sup2) === 2) typesDeQuestionsDisponibles = [0, 1, 1, 2, 2]\n    else typesDeQuestionsDisponibles = [2, 2, 3, 3, 3]\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, mantisse, exp, decimalstring, scientifiquestring, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          mantisse = randint(1, 9)\n          if (!context.isAmc) {\n            exp = randint(1, 5)\n          } else {\n            exp = randint(1, 3)\n          }\n\n          break\n        case 1:\n          mantisse = calcul(randint(11, 99) / 10)\n          if (!context.isAmc) {\n            exp = randint(1, 5)\n          } else {\n            exp = randint(1, 3)\n          }\n          break\n        case 2:\n          if (randint(0, 1) === 1) mantisse = calcul(randint(111, 999) / 100)\n          else mantisse = calcul((randint(1, 9) * 100 + randint(1, 9)) / 100)\n          if (!context.isAmc) {\n            exp = randint(1, 7) * choice([-1, 1])\n          } else {\n            exp = randint(1, 3) * choice([-1, 1])\n          }\n          break\n        case 3:\n          if (randint(0, 1) === 1) mantisse = calcul((randint(1, 9) * 1000 + randint(1, 19) * 5) / 1000)\n          else mantisse = calcul(randint(1111, 9999) / 1000)\n          if (!context.isAmc) {\n            exp = randint(1, 7) * choice([-1, 1])\n          } else {\n            exp = randint(1, 3) * choice([-1, 1])\n          }\n          break\n      }\n      reponse = calcul(mantisse * 10 ** exp)\n      // decimalstring = texNombrec(mantisse * 10 ** exp)\n      scientifiquestring = `${texNombrec(mantisse)}\\\\times 10^{${exp}}`\n      decimalstring = scientifiqueToDecimal(mantisse, exp)\n\n      if (this.sup === 1) {\n        if (exp > 9 || exp < 0) {\n          reponse = `${texNombrec(mantisse)}\\\\times10^{${exp}}`\n        } else {\n          reponse = `${texNombrec(mantisse)}\\\\times10^${exp}`\n        }\n        texte = `$${decimalstring}${sp()}=$`\n        texteCorr = `$${decimalstring} = ${scientifiquestring}$`\n        if (this.interactif) {\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n        } else {\n          texte += `$${sp()}\\\\dots$`\n        }\n      } else {\n        reponse = mantisse * 10 ** exp\n        texteCorr = `$${scientifiquestring} = ${decimalstring}$`\n        texte = `$${scientifiquestring}${sp()}=$`\n        if (this.interactif) {\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n        } else {\n          texte += `$${sp()}\\\\dots$`\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        if (parseInt(this.sup) === 1) {\n          setReponse(this, i, reponse.replace(/\\\\thickspace /g, '').replace(/ /g, ''), { formatInteractif: 'ecritureScientifique', digits: listeTypeDeQuestions[i] + 1, decimals: listeTypeDeQuestions[i], signe: false, exposantNbChiffres: 1, exposantSigne: true, approx: 0 })\n        } else {\n          setReponse(this, i, reponse, { formatInteractif: 'calcul' })\n        }\n        if (context.isAmc) {\n          this.autoCorrection[i].reponse.valeur = [calcul(mantisse * 10 ** exp)]\n          if (parseInt(this.sup) === 1) {\n            this.amcType = 'AMCNum'\n            this.autoCorrection[i].enonce = \"Donner l'écriture scientifique du nombre \" + texte + '.'\n          } else {\n            this.amcType = 'qcmMono'\n            this.autoCorrection[i].enonce = \"Donner l'écriture décimale du nombre \" + texte + '.'\n            this.autoCorrection[i].options = {\n              ordered: false,\n              lastChoice: 5\n            }\n            this.autoCorrection[i].propositions = [\n              {\n                texte: `$${decimalstring}$`,\n                statut: true\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (exp - 1))}$`,\n                statut: false\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (exp + 1))}$`,\n                statut: false\n              },\n              {\n                texte: `$${texNombrec(mantisse * 10 ** (-exp))}$`,\n                statut: false\n              }\n            ]\n          }\n        }\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 2, '1 : Traduire en notation scientifique\\n2 : Traduire en notation décimale']\n  this.besoinFormulaire2Numerique = ['Niveau de difficulté', 3, '1 : Facile\\n2 : Moyen\\n3 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","NotationScientifique2e","NotationScientifique","this","interactifReady","interactifType","amcReady","amcType","Exercice","sup","sup2","nbCols","nbColsCorr","nbQuestions","interactif","nouvelleVersion","reponse","typesDeQuestionsDisponibles","parseInt","consigne","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","mantisse","exp","decimalstring","scientifiquestring","i","cpt","randint","context","calcul","choice","texNombrec","scientifiqueToDecimal","sp","ajouteChampTexteMathLive","indexOf","push","setReponse","replace","formatInteractif","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","valeur","enonce","options","ordered","lastChoice","propositions","statut","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}