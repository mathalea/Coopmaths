{"version":3,"file":"js/53951.50157bd1699a83301296.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N33-0.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, pgcd, calcul, texNombrec, texNombre, texFraction } from '../../modules/outils.js'\nimport { mathalea2d } from '../../modules/2d.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Calculer la fraction d’une quantité'\n\n/**\n * Calculer la fracton d'une quantité avec ou sans dessin.\n * @author Jean-Claude Lhote\n * référence 6N33-0\n */\nexport default function FractionDuneQuantite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.nbQuestions = 5\n  this.consigne = 'Calculer :'\n  context.isHtml ? (this.spacingCorr = 3.5) : (this.spacingCorr = 2)\n  context.isHtml ? (this.spacing = 2) : (this.spacing = 2)\n  this.sup = 1\n  this.sup2 = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles\n    let listeTypeDeQuestions = []\n    const choixdenh = combinaisonListes([3, 4, 5, 10, 12, 20, 30], this.nbQuestions)\n    const choixdent = combinaisonListes([20, 24, 30], this.nbQuestions)\n    const choixdenb = combinaisonListes([4, 5, 10, 12], this.nbQuestions)\n\n    if (this.sup < 5) { typesDeQuestionsDisponibles = [parseInt(this.sup)] } else { typesDeQuestionsDisponibles = [1, 2, 3, 4] }\n    listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (\n      let i = 0, den, num, choix, longueur, numIrred, denIrred, k, masse, frac, frac2, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n    ) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          den = choixdenh[i]\n          num = randint(1, den - 1)\n          frac = fraction(num, den)\n          texte = `À combien de minutes correspondent $${frac.texFraction}$ d'heure ?<br>`\n          if (this.sup2) {\n            texte += 'cette fraction est représentée ci dessous :<br>'\n            texte += mathalea2d({ xmin: 0, ymin: 0, xmax: 15, ymax: 5 }, frac.representation(2.5, 2.5, 2, 0, 'gateau', 'blue'))\n          }\n          texteCorr = `Comme l'heure est partagée en ${den} parts égales, chaque part représente $${texFraction(1, den)}$ d'heure, soit $${calcul(60 / den)}$ minutes.<br>`\n          texteCorr += `Ici, il y a $${texFraction(num, den)}$ d'heure, ce qui représente $${num}$ fois plus, soit $${num}\\\\times${calcul(60 / den)}=${calcul(num * 60 / den)}$.<br>`\n          texteCorr += `$${frac.texFraction}$ d'heure correspond donc à $${calcul(num * 60 / den)}$ minutes.`\n          break\n        case 2:\n          den = choixdenh[i]\n          num = randint(1, 3 * den, den)\n          frac = fraction(num, den)\n          texte = `À combien de minutes correspondent $${frac.texFraction}$ d'heure ?<br>`\n          if (this.sup2) {\n            texte += 'Cette fraction est représentée ci dessous :<br>'\n            texte += mathalea2d({ xmin: 0, ymin: 0, xmax: 15, ymax: 5 }, frac.representation(2.5, 2.5, 2, 0, 'gateau', 'blue'))\n          }\n          texteCorr = `Comme l'heure est partagée en ${den} parts égales, chaque part représente $${texFraction(1, den)}$ d'heure, soit $${calcul(60 / den)}$ minutes.<br>`\n          texteCorr += `Ici, il y a $${texFraction(num, den)}$ d'heure, ce qui représente $${num}$ fois plus, soit $${num}\\\\times${calcul(60 / den)}=${calcul(num * 60 / den)}$.<br>`\n          texteCorr += `$${frac.texFraction}$ d'heure correspond donc à $${calcul(num * 60 / den)}$ minutes.`\n          break\n        case 3:\n          masse = choice([120, 180, 240, 300])\n          denIrred = choixdent[i]\n          numIrred = (i * randint(1, denIrred - 1)) % denIrred\n          while (pgcd(denIrred, numIrred) !== 1 || calcul(denIrred / numIrred) === 2) {\n            denIrred = choixdent[i]\n            numIrred = randint(1, denIrred - 1)\n          }\n          frac = fraction(numIrred, denIrred)\n          frac2 = frac.entierMoinsFraction(1)\n          texte = `Voici une tablette de chocolat dont la masse totale est de $${masse}$ grammes. Quelqu'un en a déjà consommé les $${frac.texFractionSimplifiee}$.<br>`\n          choix = randint(1, 2)\n          if (choix === 1) {\n            texte += 'Quelle masse de chocoloat a-t-elle été consommée ?<br>'\n            texteCorr = `Comme la tablette a une masse de $${masse}$ grammes, $${texFraction(1, denIrred)}$ de la tablette représente une masse de $${calcul(masse / denIrred)}$ grammes.<br>`\n            texteCorr += `Ici, il y a $${frac.texFractionSimplifiee}$ de la tablette qui a été consommé, ce qui représente $${numIrred}$ fois plus, soit $${numIrred}\\\\times${calcul(masse / denIrred)}=${calcul(numIrred * masse / denIrred)}$.<br>`\n            texteCorr += `La masse de chocolat consommée est $${calcul(numIrred * masse / denIrred)}$ grammes.`\n          } else {\n            texte += 'Quelle masse de chocolat reste-t-il ?<br>'\n            texteCorr = `Comme la tablette a une masse de $${masse}$ grammes, $${texFraction(1, denIrred)}$ de la tablette représente une masse de $${calcul(masse / denIrred)}$ grammes.<br>`\n            texteCorr += `Ici, il y a $${frac.texFractionSimplifiee}$ de la tablette qui a été consommé, ce qui représente $${numIrred}$ fois plus, soit $${numIrred}\\\\times${calcul(masse / denIrred)}=${calcul(numIrred * masse / denIrred)}$.<br>`\n            texteCorr += `La masse de chocolat consommée est $${calcul(numIrred * masse / denIrred)}$ grammes.<br>`\n            texteCorr += `Il reste donc : $${masse}-${calcul(numIrred * masse / denIrred)}=${calcul(masse - numIrred * masse / denIrred)}$ grammes de chocolat.<br>`\n            texteCorr += `une autre façon de faire est d'utiliser la fraction restante : $${texFraction(denIrred, denIrred)}-${frac.texFractionSimplifiee}=${texFraction(denIrred - numIrred, denIrred)}$.<br>`\n            texteCorr += `$${texFraction(denIrred - numIrred, denIrred)}$ de $${masse}$ grammes c'est $${denIrred - numIrred}$ fois $${calcul(masse / denIrred)}$ grammes.<br>`\n            texteCorr += `Il reste donc : $${denIrred - numIrred}\\\\times${calcul(masse / denIrred)}=${(denIrred - numIrred) * masse / denIrred}$ grammes de chocolat.`\n          }\n          if (this.sup2) {\n            texte += 'La tablette de chocolat est représentée ci dessous :<br>'\n            texte += mathalea2d({ xmin: -0.5, ymin: -0.5, xmax: 5, ymax: 7 }, frac2.representationIrred(0, 0, 4, 0, 'baton', 'brown'))\n          }\n          break\n        case 4:\n          num = randint(1, den - 1)\n          longueur = choice([120, 180, 240, 300])\n          denIrred = choixdenb[i]\n          numIrred = randint(1, denIrred - 1)\n          while (pgcd(denIrred, numIrred) !== 1 || calcul(denIrred / numIrred) === 2) {\n            denIrred = choice([2, 3, 4, 5, 10])\n            numIrred = randint(1, denIrred - 1)\n          }\n          k = calcul(300 / denIrred)\n          den = calcul(denIrred * k)\n          num = calcul(numIrred * k)\n          frac = fraction(num, den)\n          texte = `Un bâton de $${texNombrec(longueur / 100)}$ mètre`\n          if (longueur >= 200) texte += 's'\n          texte += ` de longueur est coupé à $${frac.texFractionSimplifiee}$ de sa longueur.<br>`\n          texte += 'Calculer la longueur de chacun des morceaux en mètres.<br>'\n          if (this.sup2) {\n            texte += 'Ce bâton est représenté ci dessous :<br>'\n            texte += mathalea2d({ xmin: -0.5, ymin: 0, xmax: 10, ymax: 2 }, frac.representationIrred(0, 1, 8, 0, 'segment', 'blue', '0', `${texNombre(calcul(longueur / 100))}`))\n          }\n          texteCorr = `$${texFraction(1, denIrred)}$ de $${texNombrec(longueur / 100)}$ représente $${texNombrec(longueur / 100)} \\\\div ${denIrred} = ${texNombrec(longueur / 100 / denIrred)}$.<br>`\n          texteCorr += `Le premier morceau du bâton correspondant à $${frac.texFractionSimplifiee}$ du bâton mesure : $${numIrred} \\\\times ${texNombrec(longueur / 100 / denIrred)}=${texNombrec(numIrred * longueur / 100 / denIrred)}$ m.<br>`\n          texteCorr += `Le deuxième morceau mesure donc : $${texNombrec(longueur / 100)}-${texNombrec(numIrred * longueur / 100 / denIrred)}=${texNombrec(longueur / 100 - numIrred * longueur / 100 / denIrred)}$ m.`\n\n          break\n      }\n\n      if (this.listeCorrections.indexOf(texteCorr) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 5, \"1 : Heures & minutes (inférieur à 1h)\\n2 : Heures & minutes (jusqu'à 3h)\\n3 : Tablettes de chocolat\\n4 : Bâton cassé\\n5 : Mélange\"]\n  this.besoinFormulaire2CaseACocher = ['Avec dessin', true]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","FractionDuneQuantite","Exercice","this","nbQuestions","consigne","context","spacingCorr","spacing","sup","sup2","nbCols","nbColsCorr","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","choixdenh","combinaisonListes","choixdent","choixdenb","parseInt","den","num","choix","longueur","numIrred","denIrred","k","masse","frac","frac2","texte","texteCorr","i","cpt","randint","fraction","texFraction","mathalea2d","xmin","ymin","xmax","ymax","representation","calcul","choice","pgcd","entierMoinsFraction","texFractionSimplifiee","representationIrred","texNombrec","texNombre","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}