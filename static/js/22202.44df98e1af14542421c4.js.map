{"version":3,"file":"js/22202.44df98e1af14542421c4.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2S20-2.js","webpack://mathalea/./src/js/exercices/4e/4S11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import DeterminerDesMedianes from '../4e/4S11.js'\nexport const titre = 'Calculer des médianes'\nexport { interactifReady, interactifType } from '../4e/4S11.js'\n// export { amcReady, amcType } from '../4e/4S11.js'\n\n/**\n * Clone de 4S11 pour les 2nde\n *\n * @author Sébastien LOZANO\n */\nexport default function DeterminerDesMedianes2nde () {\n  DeterminerDesMedianes.call(this)\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, prenom, tirerLesDes, listeDeNotes, joursParMois, unMoisDeTemperature, nomDuMois, texNombre, texteGras, lampeMessage, combinaisonListes, calcul } from '../../modules/outils.js'\n\nimport { setReponse, ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Déterminer des médianes'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true // pour définir que l'exercice est exportable à AMC\nexport const amcType = 'AMCNum'\n\nexport const dateDeModifImportante = '28/10/2021'\n\n/**\n * Calculs de médianes dans des séries statistiques\n* @author Sébastien Lozano forked de Jean-Claude Lhote\n* Référence 4S11\n* Date initiale 2021-01-12\n* Ajout de l'alternance entre effectif total pair et impair le 18/08/2021 : Guilllaume Valmont\n*/\nexport default function DeterminerDesMedianes () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.nbQuestions = 1\n  this.spacing = 1\n  this.spacingCorr = 1.5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.listePackages = 'bclogo'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    this.sup = parseInt(this.sup)\n\n    const listePairOuImpair = combinaisonListes(['pair', 'impair'], this.nbQuestions)\n\n    for (let i = 0, temperatures, nombreTemperatures, nombreNotes, notes, nombreDes, nombreFaces, nombreTirages, indexValeur, tirages, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const underbraceMediane = (nbVal) => {\n        let sortie\n        if (nbVal % 2 === 0) { // nb pair de valeurs\n          sortie = `$\\\\underbrace{1^e\\\\hspace{0.25cm}2^e ... ${nbVal / 2 - 1}^e}_{${nbVal / 2 - 1}\\\\; valeurs} \\\\hspace{0.25cm} ${nbVal / 2}^e \\\\hspace{0.25cm} ${nbVal / 2 + 1}^e \\\\hspace{0.25cm} \\\\underbrace{${nbVal / 2 + 2}^e ... ${nbVal}^e}_{${nbVal / 2 - 1}\\\\; valeurs}$`\n        } else { // nb impair de valeurs\n          sortie = `$\\\\underbrace{1^e\\\\hspace{0.25cm}2^e ... ${(nbVal - 1) / 2}^e}_{${(nbVal - 1) / 2}\\\\; valeurs} \\\\hspace{0.25cm} ${(nbVal - 1) / 2 + 1}^e \\\\hspace{0.25cm} \\\\underbrace{${(nbVal - 1) / 2 + 2}^e ... ${nbVal}^e}_{${(nbVal - 1) / 2}\\\\; valeurs}$`\n        }\n        return sortie\n      }\n      const desTabEffCumul = (tirages, effCumulBool) => {\n        let sortie\n        if (!effCumulBool) {\n          sortie = ''\n          if (tirages.length > 12) {\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs 1/2\n            for (let j = 0; j <= Math.round(tirages.length / 2); j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = 0; j < Math.round(tirages.length / 2); j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = 0; j < Math.round(tirages.length / 2); j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$<br><br>'\n\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs 2/2\n            for (let j = Math.round(tirages.length / 2); j <= tirages.length; j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = Math.round(tirages.length / 2); j < tirages.length; j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = Math.round(tirages.length / 2); j < tirages.length; j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$'\n          } else {\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs en un seul morceau\n            for (let j = 0; j <= tirages.length; j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = 0; j < tirages.length; j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = 0; j < tirages.length; j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$'\n          };\n        } else {\n          sortie = ''\n          if (tirages.length > 12) {\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs 1/2\n            for (let j = 0; j <= Math.round(tirages.length / 2); j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = 0; j < Math.round(tirages.length / 2); j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = 0; j < Math.round(tirages.length / 2); j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions cumulées}'\n            for (let j = 0; j < Math.round(tirages.length / 2); j++) {\n              let cumul = 0\n              for (let k = 0; k <= j; k++) {\n                cumul += tirages[k][1]\n              }\n              sortie += '&' + cumul// tirages[j][1];\n            }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$<br><br>'\n\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs 2/2\n            for (let j = Math.round(tirages.length / 2); j <= tirages.length; j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = Math.round(tirages.length / 2); j < tirages.length; j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = Math.round(tirages.length / 2); j < tirages.length; j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions cumulées}'\n            for (let j = Math.round(tirages.length / 2); j < tirages.length; j++) {\n              let cumul = 0\n              for (let k = 0; k <= j; k++) {\n                cumul += tirages[k][1]\n              }\n              sortie += '&' + cumul// tirages[j][1];\n            }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$'\n          } else {\n            sortie += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // construction du tableau des effectifs en un seul morceau\n            for (let j = 0; j <= tirages.length; j++) { sortie += '|c' }\n            sortie += '}\\\\hline  \\\\text{Scores}'\n            for (let j = 0; j < tirages.length; j++) { sortie += '&' + tirages[j][0] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions}'\n            for (let j = 0; j < tirages.length; j++) { sortie += '&' + tirages[j][1] }\n            sortie += '\\\\\\\\\\\\hline \\\\text{Nombre d\\'apparitions cumulées}'\n            for (let j = 0; j < tirages.length; j++) {\n              let cumul = 0\n              for (let k = 0; k <= j; k++) {\n                cumul += tirages[k][1]\n              }\n              sortie += '&' + cumul// tirages[j][1];\n            }\n            sortie += '\\\\\\\\\\\\hline\\\\end{array}$'\n          };\n        };\n        return sortie\n      }\n      let repInteractive\n      if (this.sup === 1) { // ici on lance des dés\n        const solidName = (nbCot) => {\n          switch (nbCot) {\n            case 4:\n              return 'tétraèdre'\n            case 6:\n              return 'hexaèdre'\n            case 8:\n              return 'octaèdre'\n            case 10:\n              return 'decaèdre'\n            default:\n              return 'cas non prévu'\n          };\n        }\n        nombreDes = randint(1, 2)\n        nombreFaces = choice([4, 6, 8, 10])\n        if (listePairOuImpair[i] === 'pair') {\n          nombreTirages = choice([50, 100, 200, 500, 1000, 2000])\n        } else {\n          nombreTirages = choice([49, 99, 199, 299, 999, 1999])\n        }\n        tirages = tirerLesDes(nombreTirages, nombreFaces, nombreDes) // on récupère une série rangée dans l'ordre croissant avec les effectifs correspondants\n        do { indexValeur = randint(0, tirages.length - 1) }\n        while (tirages[indexValeur][1] === 0) // on choisit au hasard l'index d'une valeur dont l'effectif est différent de 0.\n        if (nombreDes > 1) {\n          texte = `On a réalisé $${nombreTirages}$ lancers de $${nombreDes}$ dés à $${nombreFaces}$ faces.<br>`\n        } else {\n          texte = `On a réalisé $${nombreTirages}$ lancers d'un dé à $${nombreFaces}$ faces.<br>`\n        }\n        texte += lampeMessage({\n          titre: 'Vocabulaire',\n          texte: `Le solide qui correspond à ce type de dé s'appelle ${texteGras(solidName(nombreFaces))}.`,\n          couleur: 'nombres'\n        }) + '<br>'\n        texte += 'Les résultats sont inscrits dans le tableau ci-dessous :<br><br>'\n        texte += desTabEffCumul(tirages, false) + '<br>'\n\n        texteCorr = `On a réalisé $${nombreTirages}$ lancers en tout.<br>`\n        if (nombreTirages % 2 === 0) {\n          texteCorr += `Le nombre de lancers est pair, les scores sont rangés dans l'ordre croissant.<br>\n                    Les deux valeurs centrales sont la $${nombreTirages / 2}^{e}$ et la $${nombreTirages / 2 + 1}^{e}$ valeur.<br>\n                    En effet, ${underbraceMediane(nombreTirages)} <br>\n                    Une médiane est donc un score compris entre le $${nombreTirages / 2}^{e}$ et le $${nombreTirages / 2 + 1}^{e}$ score.<br>\n                    On peut ajouter une ligne avec les effectifs cumulés pour trouver ces deux valeurs.<br><br>\n                    ${desTabEffCumul(tirages, true)}<br><br>\n                    `\n          // on récupère le score des deux lancers médians\n          const scoresMedians = []\n          // compteur\n          let cpt = 0\n          // Pour cumuler les effectifs, tirages est un tableau 2D qui contient les couples [score,effectif]\n          let effCumulCroiss = tirages[0][1]\n          // On récupère le premier score médian\n          while (effCumulCroiss < nombreTirages / 2) {\n            cpt += 1\n            effCumulCroiss += tirages[cpt][1]\n          };\n          scoresMedians.push(tirages[cpt][0])\n          // On récupère le second score médian\n          cpt = 0\n          effCumulCroiss = tirages[0][1]\n          while (effCumulCroiss < nombreTirages / 2 + 1) {\n            cpt += 1\n            effCumulCroiss += tirages[cpt][1]\n          };\n          scoresMedians.push(tirages[cpt][0])\n          let medianeCorr // pour la correction statique\n          scoresMedians[0] === scoresMedians[1] ? medianeCorr = scoresMedians[0] : medianeCorr = (scoresMedians[0] + scoresMedians[1]) / 2\n          texteCorr += `D'où ${texteGras(`le score médian : ${texNombre(medianeCorr)}`)}<br>`\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${(nombreTirages) / 2}$ lancers dont le score est inférieur ou égal à  $${texNombre(medianeCorr)}$ et $${(nombreTirages) / 2}$ lancers dont le score est supérieur ou égal à  $${texNombre(medianeCorr)}$.`,\n            couleur: 'nombres'\n          })\n          scoresMedians[0] === scoresMedians[1] ? repInteractive = scoresMedians[0] : repInteractive = scoresMedians\n        } else { // Le nombre de lancers est impair ici\n          texteCorr += `Le nombre de lancers est impair, les scores sont rangés dans l'odre croissant.<br>\n          La valeur centrale est la $${(nombreTirages - 1) / 2 + 1}^{e}$ valeur.<br>\n          En effet, ${underbraceMediane(nombreTirages)} <br>\n          Une médiane est donc le $${(nombreTirages - 1) / 2 + 1}^{e}$ score.<br>\n          On peut ajouter une ligne avec les effectifs cumulés pour trouver cette valeur.<br><br>\n          ${desTabEffCumul(tirages, true)}<br><br>`\n          // on récupère le score des deux lancers médians\n          const scoresMedians = []\n          // compteur\n          let cpt = 0\n          // Pour cumuler les effectifs, tirages est un tableau 2D qui contient les couples [score,effectif]\n          let effCumulCroiss = tirages[0][1]\n          // On récupère le premier score médian\n          while (effCumulCroiss <= nombreTirages / 2) {\n            cpt += 1\n            effCumulCroiss += tirages[cpt][1]\n          };\n          scoresMedians.push(tirages[cpt][0])\n          texteCorr += `D'où ${texteGras(`le score médian : ${texNombre(scoresMedians[0])}`)}<br>`\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${(nombreTirages - 1) / 2}$ lancers dont le score est inférieur ou égal à  $${texNombre(scoresMedians[0])}$ et $${(nombreTirages - 1) / 2}$ lancers dont le score est supérieur ou égal à  $${texNombre(scoresMedians[0])}$.`,\n            couleur: 'nombres'\n          })\n          repInteractive = scoresMedians[0]\n        }\n      } else if (this.sup === 2) { // ici on trie des notes\n        if (listePairOuImpair[i] === 'pair') {\n          nombreNotes = choice([8, 10, 12])\n        } else {\n          nombreNotes = choice([7, 9, 11])\n        }\n        notes = listeDeNotes(nombreNotes, randint(0, 7), randint(13, 20)) // on récupère une liste de notes (série brute)\n        indexValeur = randint(0, notes.length - 1) // on choisi une des notes au hasard\n        texte = `${prenom()} a obtenu ces notes ce trimestre-ci en mathématiques :<br>`\n        texte += `$${notes[0]}$`\n        for (let j = 1; j < nombreNotes - 1; j++) { texte += `; $${notes[j]}$ ` } // On liste les notes (série brute)\n        texte += `et $${notes[nombreNotes - 1]}$.`\n        const notesRangees = notes.sort((a, b) => a - b)\n        let mediane\n        if (notes.length % 2 === 0) { // attention les indices commencent à 0 !\n          notesRangees[notes.length / 2 - 1] === notesRangees[notes.length / 2] ? mediane = notesRangees[notes.length / 2 - 1] : mediane = [notesRangees[notes.length / 2 - 1], notesRangees[notes.length / 2]]\n        } else {\n          mediane = notesRangees[(notes.length - 1) / 2]\n        }\n        texteCorr = `Il y a $${notes.length}$ notes en tout. `\n        if (notes.length % 2 === 0) {\n          texteCorr += 'Le nombre de notes est pair.<br>'\n        } else {\n          texteCorr += 'Le nombre de notes est impair.<br>'\n        };\n        texteCorr += `Il faut par exemple ranger les notes dans l'ordre croissant : <br> $${notes[0]}$`\n        for (let j = 1; j < nombreNotes - 1; j++) { texteCorr += `; $${notes[j]}$ ` } // On liste les notes (série brute)\n        texteCorr += `et $${notes[nombreNotes - 1]}$.<br>`\n\n        if (notes.length % 2 === 0) {\n          texteCorr += `Les notes centrales sont la $${notes.length / 2}^{e}$ et la $${notes.length / 2 + 1}^{e}$.<br>\n          En effet, ${underbraceMediane(notes.length)}<br>\n          Une médiane est donc une note comprise entre la $${notes.length / 2}^{e}$ et la $${notes.length / 2 + 1}^{e}$ note, lorsque ces notes sont rangées.<br>`\n        } else {\n          texteCorr += `La note centrale est donc la $${(notes.length + 1) / 2}^{e}$.<br>\n          En effet, ${underbraceMediane(notes.length)}<br>\n          Une médiane est donc la $${(notes.length + 1) / 2}^{e}$ note, lorsque ces notes sont rangées.<br>`\n        };\n        let medianeCorr // pour la correction statique\n        Array.isArray(mediane) ? medianeCorr = (mediane[0] + mediane[1]) / 2 : medianeCorr = mediane\n        texteCorr += `D'où ${texteGras(`la note médiane : ${texNombre(medianeCorr)}`)}<br>`\n        if (notes.length % 2 === 0) {\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${notes.length / 2}$ notes inférieures ou égales à  $${texNombre(medianeCorr)}$ et $${notes.length / 2}$ notes supérieures ou égales à  $${texNombre(medianeCorr)}$.`,\n            couleur: 'nombres'\n          })\n        } else {\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${(notes.length - 1) / 2}$ notes inférieures ou égales à  $${texNombre(medianeCorr)}$ et $${(notes.length - 1) / 2}$ notes supérieures ou égales à  $${texNombre(medianeCorr)}$.`,\n            couleur: 'nombres'\n          })\n        }\n        repInteractive = mediane\n      } else { // ici on relève des températures\n        const annee = randint(1980, 2019)\n        let listeMois\n        if (listePairOuImpair[i] === 'pair') {\n          listeMois = [4, 6, 9, 11]\n        } else {\n          listeMois = [1, 3, 5, 7, 8, 10, 12]\n        }\n        if ((((annee % 4 === 0) && (annee % 100 !== 0)) || (annee % 400 === 0)) && (listePairOuImpair[i] === 'impair')) { // Si l'année est bissextile et qu'on veut une liste impair\n          listeMois.push(2)\n        } else if (!(((annee % 4 === 0) && (annee % 100 !== 0)) || (annee % 400 === 0)) && (listePairOuImpair[i] === 'pair')) { // Si l'année n'est pas bissextile et qu'on veut une liste paire\n          listeMois.push(2)\n        }\n        const mois = listeMois[randint(0, listeMois.length - 1)]\n        const temperaturesDeBase = [3, 5, 9, 13, 19, 24, 26, 25, 23, 18, 10, 5]\n        nombreTemperatures = joursParMois(mois)\n        temperatures = unMoisDeTemperature(temperaturesDeBase[mois - 1], mois, annee) // on récupère une série de température correspondant à 1 mois d'une année (série brute)\n        indexValeur = randint(0, temperatures.length - 1) // on choisi l'index d'une valeur au hasard\n        texte = `En ${nomDuMois(mois)} ${annee}, à ${choice(['Moscou', 'Berlin', 'Paris', 'Bruxelles', 'Rome', 'Belgrade'])}, on a relevé les températures suivantes<br>`\n        texte += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // On construit le tableau des températures\n        texte += '|c'\n        for (let j = 0; j < Math.round(temperatures.length / 2); j++) { texte += '|c' }\n        texte += '}\\\\hline  \\\\text{Jour}'\n        for (let j = 0; j < Math.round(temperatures.length / 2); j++) { texte += '&' + texNombre(j + 1) }\n        texte += '\\\\\\\\\\\\hline \\\\text{Température\\\\thickspace en} \\\\thickspace ^\\\\circ\\\\text{C}'\n        for (let j = 0; j < Math.round(temperatures.length / 2); j++) { texte += '&' + temperatures[j] }\n        texte += '\\\\\\\\\\\\hline\\\\end{array}$<br><br>'\n        texte += '$\\\\def\\\\arraystretch{1.5}\\\\begin{array}{|c' // On construit le tableau des températures\n        texte += '|c'\n        for (let j = Math.round(temperatures.length / 2); j < temperatures.length; j++) { texte += '|c' }\n        texte += '}\\\\hline  \\\\text{Jour}'\n        for (let j = Math.round(temperatures.length / 2); j < temperatures.length; j++) { texte += '&' + texNombre(j + 1) }\n        texte += '\\\\\\\\\\\\hline \\\\text{Température\\\\thickspace en} \\\\thickspace ^\\\\circ\\\\text{C}'\n        for (let j = Math.round(temperatures.length / 2); j < temperatures.length; j++) { texte += '&' + temperatures[j] }\n        texte += '\\\\\\\\\\\\hline\\\\end{array}$'\n        texteCorr = ''\n        const temperaturesRangees = temperatures.sort((a, b) => a - b)\n        let mediane\n        if (temperatures.length % 2 === 0) { // attention les indices commencent à 0 !\n          temperaturesRangees[temperatures.length / 2 - 1] === temperaturesRangees[temperatures.length / 2] ? mediane = temperaturesRangees[temperatures.length / 2 - 1] : mediane = [temperaturesRangees[temperatures.length / 2 - 1], temperaturesRangees[temperatures.length / 2]]\n        } else {\n          mediane = temperaturesRangees[(temperatures.length - 1) / 2]\n        };\n        texteCorr = `Il y a $${temperatures.length}$ températures relevées en tout. `\n        if (temperatures.length % 2 === 0) {\n          texteCorr += 'Le nombre de temperatures est pair.<br>'\n        } else {\n          texteCorr += 'Le nombre de temperatures est impair.<br>'\n        };\n        texteCorr += `Il faut par exemple ranger les temperatures dans l'ordre croissant : <br> $${temperatures[0]}$`\n        for (let j = 1; j < nombreTemperatures - 1; j++) { texteCorr += `; $${temperatures[j]}$ ` } // On liste les temperatures (série brute)\n        texteCorr += `et $${temperatures[nombreTemperatures - 1]}$.<br>`\n\n        if (temperatures.length % 2 === 0) {\n          texteCorr += `Les temperatures centrales sont la $${temperatures.length / 2}^{e}$ et la $${temperatures.length / 2 + 1}^{e}$.<br>\n          En effet, ${underbraceMediane(temperatures.length)}<br>\n          Une médiane est donc une temperature comprise entre la $${temperatures.length / 2}^{e}$ et la $${temperatures.length / 2 + 1}^{e}$ temperature, lorsque ces temperatures sont rangées.<br>`\n        } else {\n          texteCorr += `La temperature centrale est donc la $${(temperatures.length + 1) / 2}^{e}$.<br>\n          En effet, ${underbraceMediane(temperatures.length)}<br>\n          Une médiane est donc la $${(temperatures.length + 1) / 2}^{e}$ temperature, lorsque ces temperatures sont rangées.<br>`\n        };\n        let medianeCorr // pour la correction statique\n        Array.isArray(mediane) ? medianeCorr = (mediane[0] + mediane[1]) / 2 : medianeCorr = mediane\n        texteCorr += `D'où ${texteGras(`une temperature médiane : ${texNombre(medianeCorr)}`)}<br>`\n        if (temperatures.length % 2 === 0) {\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${temperatures.length / 2}$ temperatures inférieures ou égales à  $${texNombre(medianeCorr)}$ et $${temperatures.length / 2}$ temperatures supérieures ou égales à  $${texNombre(medianeCorr)}$.`,\n            couleur: 'nombres'\n          })\n        } else {\n          texteCorr += lampeMessage({\n            titre: 'Interprétation',\n            texte: `Ìl y a bien $${(temperatures.length - 1) / 2}$ temperatures inférieures ou égales à  $${texNombre(medianeCorr)}$ et $${(temperatures.length - 1) / 2}$ temperatures supérieures ou égales à  $${texNombre(medianeCorr)}$.`,\n            couleur: 'nombres'\n          })\n        }\n        repInteractive = mediane\n      }\n\n      // On factorise la question\n      (this.interactif && !context.isAmc) ? texte += '<br><br>Déterminer une médiane de cette série : ' : texte += '<br>Déterminer une médiane de cette série.'\n\n      if (Array.isArray(repInteractive)) {\n        setReponse(this, i, repInteractive, { decimals: 1, milieuIntervalle: calcul((repInteractive[0] + repInteractive[1]) / 2), approx: 'intervalleStrict', formatInteractif: 'intervalleStrict' })\n      } else {\n        setReponse(this, i, repInteractive)\n      }\n      if (this.interactif && !context.isAmc) {\n        texte += ajouteChampTexteMathLive(this, i, 'largeur20 inline')\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de séries', 3, ' 1 : Lancers de dés \\n 2 : Liste de notes\\n 3 : Un mois de températures']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","DeterminerDesMedianes2nde","DeterminerDesMedianes","this","interactifReady","interactifType","amcReady","amcType","dateDeModifImportante","Exercice","nbQuestions","spacing","spacingCorr","nbCols","nbColsCorr","sup","listePackages","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","parseInt","listePairOuImpair","combinaisonListes","temperatures","nombreTemperatures","nombreNotes","notes","nombreDes","nombreFaces","nombreTirages","indexValeur","tirages","texte","texteCorr","i","cpt","underbraceMediane","nbVal","sortie","desTabEffCumul","effCumulBool","length","j","Math","round","cumul","k","repInteractive","solidName","nbCot","randint","choice","tirerLesDes","lampeMessage","texteGras","couleur","scoresMedians","medianeCorr","effCumulCroiss","push","texNombre","listeDeNotes","prenom","notesRangees","sort","a","b","mediane","Array","isArray","annee","listeMois","mois","temperaturesDeBase","joursParMois","unMoisDeTemperature","nomDuMois","temperaturesRangees","interactif","context","setReponse","decimals","milieuIntervalle","calcul","approx","formatInteractif","ajouteChampTexteMathLive","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}