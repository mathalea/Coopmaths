{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6Algo10.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Colorier_Deplacement","Exercice","this","typeExercice","sup","sup2","nbQuestions","nbQuestionsModifiable","consigne","nbCols","nbColsCorr","sortieHtml","spacing","spacingCorr","listePackages","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","code_tikz","code_svg","nbCommandes","Number","nbRepetition","lstCommandesTikz","lstCommandesSVG","lstAjoutXY","n","lstNumCommande","lstX","lstY","i","choice","push","length","j","xLutinMin","Math","min","xLutinMax","max","yLutinMin","yLutinMax","scratchblocks_Tikz","p","xGrilleMin","xGrilleMax","yGrilleMin","yGrilleMax","lstObjet","grille","polygone","point","opacite","couleurDeRemplissage","opaciteDeRemplissage","epaisseur","txt","String","fromCharCode","texteParPosition","mathalea2d","xmin","xmax","ymin","ymax","pixelsParCm","scale","xLutin","yLutin","k","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","mg32Editable","numeroExercice"],"mappings":"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","file":"js/3380.fa547dcf0d3eab035617.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,choice,katexPopup2} from '../../modules/outils.js'\nimport {point,polygone,grille,texteParPosition,mathalea2d,} from '../../modules/2d.js'\n\n\nexport const titre = 'Programmer des déplacements'\n\n/**\n * * Colorier le déplacement d'un lutin\n * * 6Algo10\n * @author Erwan Duplessy\n */\nexport default function Colorier_Deplacement() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.typeExercice = \"Scratch\"\n  this.sup = 1; // nombre de commandes = this.sup + 2\n  this.sup2 = false; //1 : sans boucle ; true : avec boucle\n  this.nbQuestions = 1;\n  this.nbQuestionsModifiable = false;\n  this.titre = titre;\n  this.consigne = \"Dans le quadrillage, effectuer le programme.\";\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.nbQuestionsModifiable = false;\n  sortieHtml ? this.spacing = 2 : this.spacing = 1;\n  sortieHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n  this.listePackages = \"scratch3\"; // pour dessiner les blocs en LaTeX/Tikz\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    function scratchblocks_Tikz(code_svg, code_tikz) {\n      if (sortieHtml) {\n        return code_svg;\n      } else {\n        return code_tikz;\n      };\n    };\n\n    let texte = \"\"; // texte de l'énoncé\n    let texteCorr = \"\"; // texte du corrigé\n    let code_tikz = ``; // code pour dessiner les blocs en tikz\n    let code_svg = ``; // code pour dessiner les blocs en svg\n    let nbCommandes = Number(this.sup) + 2; // nombre de commandes de déplacement dans un script\n    let nbRepetition = 1; // Nombre de fois où la boucle est répétée. \n    if (this.sup2) {\n      nbRepetition = 3;\n    }\n    // 0 : gauche, 1 : droite, 2 : haut, 3 : bas, 4 : colorier.\n    let lstCommandesTikz = [`\\\\blockmove{Aller à gauche}`, `\\\\blockmove{Aller à droite}`, `\\\\blockmove{Aller en haut}`, `\\\\blockmove{Aller en bas}`, `\\\\blockmove{Colorier la case}`];\n    let lstCommandesSVG = [`Aller à gauche`, `Aller à droite`, `Aller en haut`, `Aller en bas`, `Colorier`];\n    let lstAjoutXY = [[-1, 0], [1, 0], [0, 1], [0, -1], [0, 0]];\n    code_tikz += `\\\\medskip \\\\\\\\ \\\\begin{scratch} <br>`;\n    code_svg += `<pre class='blocks'>`;\n    let n = 0; // variable temporaire pour stocker le numéro de la commande\n    let lstNumCommande = []; // liste des commandes successives\n    let lstX = [0]; // liste des abscisses successives\n    let lstY = [0]; // liste des ordonnées successives\n    if (this.sup2) {\n      code_svg += `répéter (${nbRepetition}) fois <br>`;\n      code_tikz += `\\\\blockrepeat{répéter \\\\ovalnum{${nbRepetition}} fois} {`;\n    }\n\n    for (let i = 0; i < nbCommandes; i++) {\n      n = choice([0, 1, 2, 3]); // choix d'un déplacement\n      code_tikz += lstCommandesTikz[n]; // ajout d'un déplacement \n      code_svg += lstCommandesSVG[n] + `<br>`; // ajout d'un déplacement \n      code_tikz += lstCommandesTikz[4]; // ajout de l'instruction \"Colorier\"\n      code_svg += lstCommandesSVG[4] + `<br>`; // ajout de l'instruction \"Colorier\"\n      lstNumCommande.push(n); // ajout d'un déplacement \n      lstNumCommande.push(4); // ajout de l'instruction \"Colorier\"\n      lstX.push(lstX[lstX.length - 1] + lstAjoutXY[n][0]); // calcul de la nouvelle abscisse\n      lstY.push(lstY[lstY.length - 1] + lstAjoutXY[n][1]); // calcul de la nouvelle ordonnée\n    }\n    for (let j = 0; j < nbRepetition - 1; j++) {\n      for (let i = 0; i < 2 * nbCommandes; i++) {\n        lstX.push(lstX[lstX.length - 1] + lstAjoutXY[lstNumCommande[i]][0]);\n        lstY.push(lstY[lstY.length - 1] + lstAjoutXY[lstNumCommande[i]][1]);\n      }\n    }\n    if (this.sup2) {\n      code_svg += `fin <br>`;\n      code_tikz += `}`;\n    }\n    code_svg += `</pre>`;\n    code_tikz += `\\\\end{scratch}`;\n\n    let xLutinMin = Math.min(...lstX);\n    let xLutinMax = Math.max(...lstX);\n    let yLutinMin = Math.min(...lstY);\n    let yLutinMax = Math.max(...lstY);\n\n    if (sortieHtml) {\n      texte += `<table style=\"width: 100%\"><tr><td>`;\n    } else {\n      texte += `\\\\begin{minipage}[t]{.25\\\\textwidth}`;\n    }\n\n    texte += scratchblocks_Tikz(code_svg, code_tikz);\n\n    if (sortieHtml) {\n      texte += `</td><td>`;\n      texte += `             `;\n      texte += `</td><td style=\"vertical-align: top; text-align: center\">`;\n    }\n    else {\n      texte += `\\\\end{minipage} `;\n      texte += `\\\\hfill \\\\begin{minipage}[t]{.74\\\\textwidth}`;\n    }\n\n    let xGrilleMin = xLutinMin - 1;\n    let xGrilleMax = xLutinMax + 2;\n    let yGrilleMin = yLutinMin - 2;\n    let yGrilleMax = yLutinMax + 1;\n\n    let r2 = grille(xGrilleMin, yGrilleMin, xGrilleMax, yGrilleMax, 'black', .8, 1);\n    let lstObjet = [r2]; // liste de tous les objets Mathalea2d\n\n    let p; // carré gris représentant le lutin en position de départ\n    p = polygone(point(lstX[0], lstY[0]), point(lstX[0] + 1, lstY[0]), point(lstX[0] + 1, lstY[0] - 1), point(lstX[0], lstY[0] - 1));\n    p.opacite = 0.5;\n    p.couleurDeRemplissage = 'black';\n    p.opaciteDeRemplissage = 0.5;\n    p.epaisseur = 0;\n    lstObjet.push(p);\n    let txt = ``; // variable temporaire\n    for (let j = 0; j < (xGrilleMax - xGrilleMin); j++) {\n      txt = String.fromCharCode(65 + j); // ascii 65 = A\n      lstObjet.push(texteParPosition(txt, xGrilleMin + j + 0.5, yGrilleMax + 0.5, 'milieu', 'black', 1)); // affiche de A à J... en haut de la grille\n    }\n    for (let i = 0; i < (yGrilleMax - yGrilleMin); i++) {\n      lstObjet.push(texteParPosition(String(i), xGrilleMin - 0.25, yGrilleMax - i - 0.5, 'gauche', 'black', 1)); // affiche de 0 à 9... à gauche de la grille\n    }\n\n    texte += `Au départ, le lutin est situé dans la case grisée. Chaque déplacement se fait dans une case adjacente. <br><br>`;\n    if (!sortieHtml) { texte += `\\\\begin{center}`; }\n    texte += mathalea2d({ xmin: xGrilleMin - 3, xmax: xGrilleMax + 1, ymin: yGrilleMin - 1, ymax: yGrilleMax + 1, pixelsParCm: 20, scale: .5 }, lstObjet);\n    if (sortieHtml) {\n      texte += `</td></tr></table>`;\n    } else {\n      texte += `\\\\end{center}\\\\end{minipage} `;\n      texte += `\\\\hfill \\\\null`;\n    }\n\n    // CORRECTION\n    // 0 : gauche, 1 : droite, 2 : haut, 3 : bas, 4 : colorier.\n    let xLutin = 0; // position initiale du carré\n    let yLutin = 0; // position initiale du carré\n    let couleur = `red`;\n\n    // on fait un dessin par passage dans la boucle\n    if (sortieHtml) {\n      texteCorr += `<table style=\"width:100%\"><tr><td style=\"text-align:center\">`;\n    } else {\n      texteCorr += `\\\\begin{minipage}{.49\\\\textwidth}`;\n    }\n    for (let k = 0; k < nbRepetition; k++) {\n      for (let i = k * lstNumCommande.length; i < (k + 1) * lstNumCommande.length; i++) {\n        switch (lstNumCommande[i % lstNumCommande.length]) {\n          case 0:\n            xLutin += -1; break;\n          case 1:\n            xLutin += 1; break;\n          case 2:\n            yLutin += 1; break;\n          case 3:\n            yLutin += -1; break;\n          case 4:\n            p = polygone(point(xLutin, yLutin), point(xLutin + 1, yLutin), point(xLutin + 1, yLutin - 1), point(xLutin, yLutin - 1));\n            p.couleurDeRemplissage = couleur;\n            p.opaciteDeRemplissage = 0.25;\n            p.epaisseur = 0;\n            lstObjet.push(p);\n        }\n      }\n      if (this.sup2) {\n        texteCorr += `Passage n° ${k + 1} dans la boucle : <br>`;\n      }\n      texteCorr += mathalea2d({ xmin: xGrilleMin - 3, xmax: xGrilleMax + 1, ymin: yGrilleMin - 1, ymax: yGrilleMax + 1, pixelsParCm: 20, scale: 0.4 }, lstObjet);\n      if (sortieHtml) {\n        if (k % 3 == 2) {\n          texteCorr += `</td></tr><tr><td style=\"text-align:center\">`; // retour à la ligne après 3 grilles dessinées en HTML\n        } else {\n          texteCorr += `</td><td></td><td style=\"text-align:center\">`;\n        }\n      } else {\n        texteCorr += `\\\\end{minipage}`;\n        if (k % 2 == 1) { texteCorr += `\\\\\\\\ `; } // retour à la ligne après 2 grilles dessinées en LaTeX\n        texteCorr += `\\\\begin{minipage}{.49\\\\textwidth}`;\n      }\n    }\n    sortieHtml ? texteCorr += `</td></tr></table>` : texteCorr += `\\\\end{minipage}`;\n\n    this.listeQuestions.push(texte);\n    this.listeCorrections.push(texteCorr);\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [`Nombre d'instructions de déplacements`, 3, '1 : 3 instructions\\n2 : 4 instructions\\n3 : 5 instructions'];\n  this.besoinFormulaire2CaseACocher = [\"Avec une boucle\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}