{"version":3,"file":"js/68724.1a253c7c4999c1752e95.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, texNombre, nombreEnLettres } from '../../modules/outils.js'\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @author Jean-Claude Lhote\n * Référence 6N10\n */\n\nexport default function EcrireNombresEntiers () {\n  Exercice.call(this)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 3\n  this.nouvelleVersion = function () {\n    if (parseInt(this.sup) === 2) { this.consigne = 'Écrire le nombre en chiffres' } else { this.consigne = 'Écrire le nombre en lettres' }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    if (parseInt(this.sup2) === 1) typesDeQuestionsDisponibles = [1, 1, 1, 2, 2]\n    else if (parseInt(this.sup2) === 2) typesDeQuestionsDisponibles = [1, 2, 2, 2, 3]\n    else if (parseInt(this.sup2) === 3) typesDeQuestionsDisponibles = [2, 2, 3, 3, 4]\n    else typesDeQuestionsDisponibles = [2, 3, 3, 4, 4]\n\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      nombre = 0\n      tranche = []\n      while (nombre === 0) {\n        tranche.splice(0)\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          nombre += tranche[j] * 10 ** (j * 3)\n        }\n        if (tranche[listeTypeDeQuestions[i] - 1] === 0) nombre = 0\n      }\n      if (parseInt(this.sup) === 1) {\n        if (!context.isDiaporama) texte = `$${texNombre(nombre)}$ : \\\\dotfill`\n        else texte = `$${texNombre(nombre)}$`\n        if (!context.isDiaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}.`\n        else texteCorr = `${nombreEnLettres(nombre)}.`\n      } else {\n        if (!context.isDiaporama) texte = `${nombreEnLettres(nombre)} : \\\\dotfill`\n        else texte = `${nombreEnLettres(nombre)}`\n        if (!context.isDiaporama) texteCorr = `${nombreEnLettres(nombre)} : $${texNombre(nombre)}$.`\n        else texteCorr = `$${texNombre(nombre)}$.`\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'exercice', 2, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres']\n  this.besoinFormulaire2Numerique = ['Niveau', 4, '1 : Élémentaire\\n2 : Facile\\n3 : Moyen\\n4 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","EcrireNombresEntiers","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","nombre","tranche","i","cpt","splice","j","randint","push","choice","context","texNombre","nombreEnLettres","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}