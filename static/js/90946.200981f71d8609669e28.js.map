{"version":3,"file":"js/90946.200981f71d8609669e28.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6P11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, texNombrec, prenomF, prenomM, texteEnCouleur, texPrix, texteEnCouleurEtGras, numAlpha, exposant, arrondi, nombreDeChiffresDe, nombreDeChiffresDansLaPartieDecimale, nombreDeChiffresDansLaPartieEntiere } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Résoudre des problèmes de proportionnalité en utilisant la linéarité simple'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * On donne une relation de proportionnalité du type n objets coûtent x€ et on demande le prix de y objets\n * et le nombre d'objets qu'on peut acheter avec z€.\n * @author Jean-Claude Lhote\n * référence 6P11\n * 03/2021 : ajout de situations de proportionnalité : CGrolleau\n * 08/2021 : Ajout de la version simplifiée et de la possibilité de choisir le type de question : Guillaume Valmont\n*/\n\n// _____ Les fonctions suivantes renvoient un objet : {texte = ; texteCorr = ;} ______\n// elles correspondent aux différentes situations problèmes\nlet versionSimplifiee = false\nlet indexN\nconst couplePremiersEntreEux = [\n  [3, 4],\n  [3, 5],\n  [3, 7],\n  [6, 7],\n  [3, 8],\n  [7, 8],\n  [7, 9],\n  [3, 10],\n  [7, 10],\n  [9, 10],\n  [3, 11],\n  [6, 11],\n  [7, 11],\n  [9, 11],\n  [7, 12],\n  [9, 12],\n  [11, 12],\n  [3, 13],\n  [6, 13],\n  [7, 13],\n  [9, 13],\n  [11, 13],\n  [12, 13]\n] // Couples de nombres premiers entre eux\n\nfunction questionAchat (exo, i) { // questions d'origine du 6P11 : achat.\n  const listeDeLieux = [\n    'dans un magasin de bricolage',\n    'dans une animalerie',\n    'au supermarché local',\n    \"à l'épicerie\",\n    'dans la boutique du musée'\n  ]\n  const listeDeChoses = [[]]\n  const listeDePrixUnit = [[]]\n  listeDeChoses[0] = [\n    'articles',\n    'outils',\n    'accessoires',\n    \"pièces d'outillage\",\n    'pinceaux',\n    'ampoules',\n    'tournevis',\n    'spatules',\n    'raccords de tuyaux'\n  ]\n  listeDeChoses[1] = [\n    'poissons rouges',\n    'cannetons',\n    'perruches',\n    'phasmes',\n    'colliers anti-puces',\n    'souris',\n    'lapereaux',\n    'paquets de graines'\n  ]\n  listeDeChoses[2] = [\n    'sets de tables',\n    'verres',\n    'assiettes',\n    'os à macher',\n    'dosettes de café',\n    'packs de lait',\n    'paquets de pâtes'\n  ]\n  listeDeChoses[3] = [\n    'mangues',\n    'ananas',\n    'fruits de la passion',\n    'melons',\n    'paquets de madeleines de Commercy',\n    'bergamottes',\n    'bredeles',\n    'pots de cancoillotte'\n  ]\n  listeDeChoses[4] = [\n    'cartes',\n    'livres',\n    'gravures',\n    'puzzles',\n    'maquettes',\n    'roches',\n    'jeux de société'\n  ]\n  listeDePrixUnit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5]\n  listeDePrixUnit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8]\n  listeDePrixUnit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3]\n  listeDePrixUnit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3]\n  listeDePrixUnit[4] = [0.5, 5, 7, 13.5, 10, 15, 20]\n  const index1 = randint(0, 4)\n  const prenoms = [prenomF(), prenomM()]\n  const index2 = randint(0, listeDeChoses[index1].length - 1)\n  const objet = listeDeChoses[index1][index2]\n  const pu = listeDePrixUnit[index1][index2] * (1 + randint(1, 2) * 0.2 * randint(-1, 1))\n  let n, x, y\n  if (versionSimplifiee) {\n    n = couplePremiersEntreEux[indexN][0]\n    x = couplePremiersEntreEux[indexN][1]\n    y = n * randint(2, 5)\n  } else {\n    n = randint(3, 6)\n    x = calcul(n * pu, 2)\n    y = n * randint(2, 5)\n  }\n  let met = false\n  let p, z\n  while (met === false) {\n    p = n * randint(2, 5)\n    if (p !== y) {\n      met = true\n    }\n  }\n  if (versionSimplifiee) {\n    z = x * randint(2, 5)\n  } else {\n    z = calcul(p * pu, 2)\n  }\n  let texte = `${numAlpha(0)} ${prenoms[0]} a repéré ${listeDeLieux[index1]} des ${objet} qui l'intéressent.<br> ` +\n`Elle lit que ${n} ${objet} coûtent ${texPrix(x)} €. ` +\n`Elle veut en acheter ${y}.<br> Combien va-t-elle dépenser ?<br>` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' €' })\n  let texteCorr = `${numAlpha(0)} ${y} ${objet}, c'est ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet}.<br> Si ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet} coûtent ${texPrix(x)} €, alors ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet} coutent ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texPrix(x)} €.<br>` +\ntexteEnCouleurEtGras(`Donc ${prenoms[0]} dépensera ${texteEnCouleur(\n        texNombrec(y / n)\n      )} $\\\\times$ ${texPrix(x)} € = ${texPrix(y * x / n)} €.`, 'black') + '<br><br>'\n  texte += `<br> ${numAlpha(1)} ${prenoms[1]\n        } veut lui aussi acheter ces ${objet}. Il dispose de ${texPrix(\n          z\n        )} €.<br> Combien peut-il en acheter ?<br>` + ajouteChampTexteMathLive(exo, i + 1, 'largeur25 inline', { texteApres: ' ' + objet })\n  texteCorr += `<br> ${numAlpha(1)} ${texPrix(z)} €, c'est ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texPrix(x)} €.<br> Si avec ${texPrix(\n        x\n      )} € on peut acheter ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet}, alors avec ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texPrix(x)} €, on peut acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texteEnCouleur(n, 'blue')} ${objet}.<br>`\n  texteCorr += texteEnCouleurEtGras(`Donc ${prenoms[1]} pourra acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} $\\\\times$ ${texteEnCouleur(n, 'blue')} = ${texNombrec(z * n / x)} ${objet}.`, 'black') + '<br>'\n  if (!context.isAmc) {\n    setReponse(exo, i, calcul(y * x / n))\n    setReponse(exo, i + 1, calcul(z * n / x))\n  } else {\n    exo.autoCorrection[i] = {\n      enonce: texte,\n      propositions: [\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: texteCorr,\n            statut: '',\n            reponse: {\n              texte: 'a) ',\n              valeur: arrondi(y * x / n, 2),\n              param: {\n                digits: nombreDeChiffresDe(arrondi(y * x / n, 2)),\n                decimals: nombreDeChiffresDansLaPartieDecimale(arrondi(y * x / n, 2)),\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        },\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: '',\n            statut: '',\n            reponse: {\n              texte: 'b) ',\n              valeur: arrondi(z * n / x, 0),\n              param: {\n                digits: nombreDeChiffresDansLaPartieEntiere(arrondi(z * n / x, 0)),\n                decimals: 0,\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        }\n      ]\n    }\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecette (exo, i) { // questions avec des masses pour un nombre de personne dans des recettes correction : passage à l'unité\n  let texte, texteCorr\n  const liste = [ // liste des ingrédients avec différentes recettes associées et masses\n    {\n      ingredient: 'farine',\n      recettes: ['gateau au citron', 'gauffres', 'crêpes', 'cake'],\n      quantites_par_pers: [20, 25, 30, 35, 40, 50] // A voir pour l'instant quantités \"simples\".\n    },\n    {\n      ingredient: 'sucre',\n      recettes: ['gateau', 'mousse au chocolat', 'pain perdu', 'riz au lait'],\n      quantites_par_pers: [15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'chocolat',\n      recettes: ['gateau', 'mousse au chocolat', 'flan', 'riz au lait'],\n      quantites_par_pers: [10, 15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'beurre',\n      recettes: ['gateau', 'mousse au chocolat'],\n      quantites_par_pers: [10, 12, 15, 18]\n    }\n  ]\n  const nbPersonneInit = randint(2, 6) // nombre de personne indiqué dans la recette.\n  const nbPersonneFinal = nbPersonneInit * randint(2, 5) // nombre de personne pour lequel on veut cuisiner\n  const alea1 = randint(0, 3) // pour le choix de l'ingredient\n  const alea2 = randint(0, liste[alea1].recettes.length - 1) // pour le choix de la recette\n  const alea3 = randint(0, liste[alea1].quantites_par_pers.length - 1) // pour le choix de la quantité par personne.\n  const quantite = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneInit) // Calcul de la quantité dans la recette à partir de la qtt/personne et du nb de personne\n  const quantite2 = quantite * randint(2, 5)\n  const quantiteReponse = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneFinal) // Pour la correction\n  const prenoms = [prenomF(), prenomM()] // Choix de prénoms pour l'énoncé\n  texte = `${numAlpha(0)} ${prenoms[0]} lit sur sa recette de ${liste[alea1].recettes[alea2]} pour ${nbPersonneInit} personnes qu'il faut ${quantite} g de ${liste[alea1].ingredient}. <br>` +\n  `Elle veut adapter sa recette pour ${nbPersonneFinal} personnes.` +\n  `<br> Quelle masse de ${liste[alea1].ingredient} doit-elle prévoir ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' g' })\n  texteCorr = `${numAlpha(0)} ${nbPersonneFinal} personnes, c'est ${texteEnCouleur(nbPersonneFinal / nbPersonneInit)} fois ${nbPersonneInit} personnes. ` +\n  `Il faut donc ${texteEnCouleur(nbPersonneFinal / nbPersonneInit)} fois plus de ${liste[alea1].ingredient}.<br>` +\n  `${quantite} g $\\\\times $ ${texteEnCouleur(nbPersonneFinal / nbPersonneInit)} = ${quantiteReponse} g. <br>` +\n  texteEnCouleurEtGras(`Conclusion : ${prenoms[0]} doit utiliser ${quantiteReponse} g de ${liste[alea1].ingredient} pour ${nbPersonneFinal} personnes.<br><br>`, 'black')\n  texte += `<br> ${numAlpha(1)} ${prenoms[1]} utilise la même recette de ${liste[alea1].recettes[alea2]}. Il dispose de ${quantite2} g de ${liste[alea1].ingredient}.<br>\n  Pour combien de personnes au maximum peut-il cuisiner ?` + ajouteChampTexteMathLive(exo, i + 1, 'largeur25 inline', { texteApres: ' personnes' })\n  texteCorr += `<br> ${numAlpha(1)} ${quantite2} g, c'est ${texteEnCouleur(quantite2 / quantite)} fois ${quantite} g. ` +\n  `Il peut donc cuisiner pour ${texteEnCouleur(quantite2 / quantite)} fois plus de personnes.<br>` +\n  `${nbPersonneInit} g $\\\\times $ ${texteEnCouleur(quantite2 / quantite)} = ${nbPersonneInit * quantite2 / quantite} . <br>` +\n  texteEnCouleurEtGras(`Conclusion : ${prenoms[1]} peut donc préparer sa recette pour ${nbPersonneInit * quantite2 / quantite} personnes.`, 'black')\n  if (!context.isAmc) {\n    setReponse(exo, i, quantiteReponse)\n    setReponse(exo, i + 1, calcul(nbPersonneInit * quantite2 / quantite))\n  } else {\n    exo.autoCorrection[i] = {\n      enonce: texte,\n      propositions: [\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: texteCorr,\n            statut: '',\n            reponse: {\n              texte: 'a) ',\n              valeur: quantiteReponse,\n              param: {\n                digits: nombreDeChiffresDe(quantiteReponse),\n                decimals: nombreDeChiffresDansLaPartieDecimale(quantiteReponse),\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        },\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: '',\n            statut: '',\n            reponse: {\n              texte: 'b) ',\n              valeur: calcul(nbPersonneInit * quantite2 / quantite),\n              param: {\n                digits: nombreDeChiffresDansLaPartieEntiere(calcul(nbPersonneInit * quantite2 / quantite)),\n                decimals: 0,\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        }\n      ]\n    }\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDillution (exo, i) { // questions de mélange de volumes\n  let uniteSolvantVolumeFinal\n  const liste = [\n    {\n      solute: 'sirop',\n      volumeUnitaire: [12, 15, 18, 20],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L'] // liste pour [0] singulier [1] pluriel\n    },\n    {\n      solute: 'nettoyant pour sol',\n      volumeUnitaire: [5, 8, 10, 12],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L']\n    },\n    {\n      solute: 'médicament',\n      volumeUnitaire: [3, 3.5, 4, 4.5, 5, 7.5],\n      unite_solute: 'mL',\n      unite_solvant: ['dL', 'dL']\n    },\n    {\n      solute: 'produit pour piscine',\n      volumeUnitaire: [1, 1.2, 0.8, 1.5],\n      unite_solute: 'L',\n      unite_solvant: ['dizaine de mètres cubes', 'dizaines de mètres cubes']\n    }\n  ]\n  const alea1 = randint(0, 3) // pour le choix du soluté\n  const alea2 = randint(0, liste[alea1].volumeUnitaire.length - 1) // pour le choix du volume pour une unité de solvant\n  let volumeInitial, quantite\n  if (versionSimplifiee) {\n    volumeInitial = couplePremiersEntreEux[indexN][0]\n    quantite = couplePremiersEntreEux[indexN][1]\n  } else {\n    volumeInitial = randint(1, 5) + (randint(1, 5)) * 0.1 * randint(-1, 1, [0]) // volume d'eau pour la préparation\n    quantite = liste[alea1].volumeUnitaire[alea2] * volumeInitial\n  }\n  const volumeFinal = volumeInitial * randint(2, 5)\n  if (volumeFinal < 2) {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[0]\n  } else {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[1]\n  }\n  const volumeFinalAff = texNombrec(volumeFinal) // pour affichage avec bon séparateur.\n  const volumeInitialAff = texNombrec(volumeInitial) // pour affichage avec bon séparateur.\n  const texte = `Il est indiqué sur la bouteille de ${liste[alea1].solute} qu'il faut  ` +\n` ${texNombrec(quantite)} ${liste[alea1].unite_solute} de  ${liste[alea1].solute} pour ${volumeInitialAff} ${liste[alea1].unite_solvant[0]} d'eau.<br> ` +\n`On veut utiliser ${volumeFinalAff} ${uniteSolvantVolumeFinal} d'eau.` +\n`<br> Quel volume de ${liste[alea1].solute} doit-on prévoir ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' ' + liste[alea1].unite_solute })\n  const texteCorr = `Le volume de ${liste[alea1].solute} est proportionnel au volume d'eau <br> ` +\n` ${texteEnCouleur(volumeFinalAff)} ${uniteSolvantVolumeFinal} d'eau, c'est ${texteEnCouleur(texNombrec(volumeFinal / volumeInitial))} fois ${volumeInitialAff} ${liste[alea1].unite_solvant[0]} d'eau. <br> ` +\n`Il faut donc ${texteEnCouleur(texNombrec(volumeFinal / volumeInitial))} fois plus que ${texteEnCouleur(texNombrec(quantite), 'blue')} ${liste[alea1].unite_solute} de ${liste[alea1].solute}. <br>` +\n`${texteEnCouleur(texNombrec(quantite), 'blue')} ${liste[alea1].unite_solute} $\\\\times $ ${texteEnCouleur(texNombrec(volumeFinal / volumeInitial))} = $${texNombrec(quantite * volumeFinal / volumeInitial)}$ ${liste[alea1].unite_solute}  <br>\n        ${texteEnCouleurEtGras(`Conclusion : Il faut donc prévoir $${texNombrec(quantite * volumeFinal / volumeInitial)}$ ${liste[alea1].unite_solute} de ${liste[alea1].solute}.`, 'black')}`\n  if (!context.isAmc) {\n    setReponse(exo, i, calcul(quantite * volumeFinal / volumeInitial))\n  } else {\n    exo.autoCorrection[i] = {\n      enonce: texte,\n      propositions: [\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: texteCorr,\n            statut: '',\n            reponse: {\n              texte: 'a) ',\n              valeur: calcul(quantite * volumeFinal / volumeInitial),\n              param: {\n                digits: nombreDeChiffresDe(calcul(quantite * volumeFinal / volumeInitial)),\n                decimals: nombreDeChiffresDansLaPartieDecimale(calcul(quantite * volumeFinal / volumeInitial)),\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        }\n      ]\n    }\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDistance (exo, i) { // questions de distance parcourue à une vitesse moyenne donnée\n  let texte, texteCorr\n  const liste = [ // liste des \"moyens de locomotion\" et vitesses associées\n    {\n      locomotion: 'piéton',\n      vitesse: [3, 3.5, 4, 4.5]\n    },\n    {\n      locomotion: 'cycliste',\n      vitesse: [12, 15, 16, 17, 18, 20, 22]\n    },\n    {\n      locomotion: 'camion',\n      vitesse: [75, 77.5, 80, 82.5, 85]\n    },\n    {\n      locomotion: 'train',\n      vitesse: [125, 150, 175, 185, 195]\n    }\n  ]\n  const alea1 = randint(0, 3) // pour le choix de locomotion\n  const duree = [{\n    temps: '15 minutes',\n    rapport: 0.25\n  },\n  {\n    temps: '30 minutes',\n    rapport: 0.5\n  },\n  {\n    temps: '45 minutes',\n    rapport: 0.75\n  },\n  {\n    temps: '1 heure et demi',\n    rapport: 1.5\n  },\n  {\n    temps: '2 heures',\n    rapport: 2\n  },\n  {\n    temps: '2 heures et demi',\n    rapport: 2.5\n  },\n  {\n    temps: '3 heures',\n    rapport: 3\n  }]\n  if (versionSimplifiee) {\n    const alea1 = randint(0, 3) // pour le choix de locomotion\n    let dureeQ, distance\n    if (alea1 === 0) { // Si piéton\n      const indice = randint(0, 3)\n      dureeQ = couplePremiersEntreEux[indice][0]\n      distance = couplePremiersEntreEux[indice][1] * (couplePremiersEntreEux[indice][0] + 1)\n    } else {\n      dureeQ = couplePremiersEntreEux[indexN][0]\n      distance = couplePremiersEntreEux[indexN][1] * 2 * alea1 * alea1 * (couplePremiersEntreEux[indexN][0] + 1)\n    }\n    const dureeR = dureeQ * randint(2, 5)\n    texte = `Un ${liste[alea1].locomotion} parcourt en moyenne $${texNombrec(distance)}$ km en ${dureeQ} heures.\n    <br> Quelle distance va-t-il parcourir, à la même vitesse en ${dureeR} heures ?` + ajouteChampTexteMathLive(exo, i, 'largeur25 inline', { texteApres: ' km' })\n\n    texteCorr = `${texteEnCouleur(dureeR)} heures, c'est ${texteEnCouleur(dureeR / dureeQ)} fois ${dureeQ} heures.<br> ` +\n    `Le ${liste[alea1].locomotion} parcourra donc ${texteEnCouleur(dureeR / dureeQ)} fois plus de distance qu'en ${dureeQ} heures.<br>` +\n    `$${texNombrec(distance)}$ km $\\\\times $ ${texteEnCouleur(dureeR / dureeQ)} = $${texNombrec(distance * dureeR / dureeQ)}$ km.<br>\n    ${texteEnCouleurEtGras(`Conclusion : Le ${liste[alea1].locomotion} parcourra $${texNombrec(distance * dureeR / dureeQ)}$ km à la même vitesse en ${dureeR} heures.`, 'black')}`\n    if (!context.isAmc) {\n      setReponse(exo, i, calcul(distance * dureeR / dureeQ))\n    } else {\n      exo.autoCorrection[i] = {\n        enonce: texte,\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: texteCorr,\n              statut: '',\n              reponse: {\n                texte: 'a) ',\n                valeur: calcul(distance * dureeR / dureeQ),\n                param: {\n                  digits: nombreDeChiffresDe(calcul(distance * dureeR / dureeQ)),\n                  decimals: nombreDeChiffresDansLaPartieDecimale(calcul(distance * dureeR / dureeQ)),\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }\n        ]\n      }\n    }\n  } else {\n    const alea2 = randint(0, liste[alea1].vitesse.length - 1) // pour le choix du temps passé\n    const rapportQuestion2 = [0.25, 0.5, 0.75, 1.25, 1.5, 2]\n    const alea3 = randint(0, rapportQuestion2.length - 1, [alea2])\n    const reponseQ1 = calcul(duree[alea2].rapport * liste[alea1].vitesse[alea2])\n    if (!context.isAmc) {\n      setReponse(exo, i, reponseQ1)\n      setReponse(exo, i + 1, calcul(rapportQuestion2[alea3] * 60))\n    } else {\n      exo.autoCorrection[i] = {\n        enonce: texte,\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: texteCorr,\n              statut: '',\n              reponse: {\n                texte: 'a) ',\n                valeur: reponseQ1,\n                param: {\n                  digits: nombreDeChiffresDe(reponseQ1),\n                  decimals: nombreDeChiffresDansLaPartieDecimale(reponseQ1),\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'b) ',\n                valeur: calcul(rapportQuestion2[alea3] * 60),\n                param: {\n                  digits: nombreDeChiffresDe(calcul(rapportQuestion2[alea3] * 60)),\n                  decimals: nombreDeChiffresDansLaPartieDecimale(calcul(rapportQuestion2[alea3] * 60)),\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }\n        ]\n      }\n    }\n    const distance = texNombrec(calcul(rapportQuestion2[alea3] * liste[alea1].vitesse[alea2])) // pour question 2\n    texte = `${numAlpha(0)} Un ${liste[alea1].locomotion} parcourt en moyenne ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure.<br> Quelle distance va-t-il parcourir, à la même vitesse en ${duree[alea2].temps} ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25  inline', { texteApres: ' km' })\n    texteCorr = `${numAlpha(0)} ${duree[alea2].temps} c'est ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois une heure.<br> ` +\n`En une heure le ${liste[alea1].locomotion} parcourt ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km donc en ${duree[alea2].temps} il va parcourir ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km. <br>` +\n`${texteEnCouleur(texNombrec(duree[alea2].rapport))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km = ${texNombrec(reponseQ1)} km <br>` +\ntexteEnCouleurEtGras(` Conclusion : Le ${liste[alea1].locomotion} va donc parcourir ${texNombrec(reponseQ1)} km.`, 'black') + '<br><br>'\n    texte += `<br> ${numAlpha(1)} Combien de temps va-t-il mettre pour parcourir ${distance} km à cette même vitesse ? ` + ajouteChampTexteMathLive(exo, i + 1, 'largeur25  inline', { texteApres: ' minutes' })\n    texteCorr += `<br> ${numAlpha(1)} ${distance} c'est ${texteEnCouleur(texNombrec(rapportQuestion2[alea3]))} fois ${texNombrec(liste[alea1].vitesse[alea2])} km.\nIl parcourt ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure. <br>` +\n`Il va mettre donc ${texteEnCouleur(texNombrec(rapportQuestion2[alea3]))} fois une heure à parcourir ${distance} km <br>` +\ntexteEnCouleurEtGras(`Conclusion : Il va donc mettre  ${texNombrec(rapportQuestion2[alea3])} heure(s) ( ${texNombrec(rapportQuestion2[alea3])} $\\\\times$ 1 ) à parcourir ${distance} km  ce qui fait ${calcul(rapportQuestion2[alea3] * 60)} minutes.`, 'black')\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionEchelle (exo, i) { // X cm sur une carte correspond à x km dans la réalité...\n  let texte, texteCorr\n  const distanceCarte = couplePremiersEntreEux[indexN][0] // Choix d'un nombre de cm sur la carte\n  const distanceReel = couplePremiersEntreEux[indexN][1] // Choix d'un nombre de km dans la réalité (on évite d'avoir 1cm pour 1km)\n  const rapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5] // rapport entre la référence et la question (rapports simples car niveau 6eme)\n  const alea1 = randint(0, rapport.length - 1)\n  const alea2 = randint(0, rapport.length - 1, [alea1])\n  if (versionSimplifiee) { rapport[alea1] = randint(2, 5); rapport[alea2] = randint(2, 5, [rapport[alea1]]) }\n  const distanceCarte2 = texNombrec(calcul(rapport[alea1] * distanceCarte))\n  const distanceReelQ2 = texNombrec(calcul(rapport[alea2] * distanceReel))\n  if (!context.isAmc) {\n    setReponse(exo, i, calcul(rapport[alea1] * distanceReel))\n    setReponse(exo, i + 1, calcul(rapport[alea2] * distanceCarte))\n  } else {\n    exo.autoCorrection[i] = {\n      enonce: texte,\n      propositions: [\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: texteCorr,\n            statut: '',\n            reponse: {\n              texte: 'a) ',\n              valeur: calcul(rapport[alea1] * distanceReel),\n              param: {\n                digits: nombreDeChiffresDe(calcul(rapport[alea1] * distanceReel)),\n                decimals: nombreDeChiffresDansLaPartieDecimale(calcul(rapport[alea1] * distanceReel)),\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        },\n        {\n          type: 'AMCNum',\n          propositions: [{\n            texte: '',\n            statut: '',\n            reponse: {\n              texte: 'b) ',\n              valeur: calcul(rapport[alea2] * distanceCarte),\n              param: {\n                digits: nombreDeChiffresDe(calcul(rapport[alea2] * distanceCarte)),\n                decimals: nombreDeChiffresDansLaPartieDecimale(calcul(rapport[alea2] * distanceCarte)),\n                signe: false,\n                approx: 0\n              }\n            }\n          }]\n        }\n      ]\n    }\n  }\n  const prenoms = [prenomF(), prenomM()]\n  texte = `${numAlpha(0)} Sur une carte sur laquelle ${distanceCarte} cm représente ${distanceReel} km dans la réalité, <br>\n${prenoms[0]} mesure son trajet, elle trouve une distance de ${distanceCarte2} cm. <br>` +\n'A quelle distance cela correspond dans la réalité ? ' + ajouteChampTexteMathLive(exo, i, 'largeur25  inline', { texteApres: ' km' })\n  texteCorr = `${numAlpha(0)} ${distanceCarte2} cm c'est ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${distanceCarte} cm <br>\nDans la réalité, ${distanceCarte} cm correspond à ${texteEnCouleur(distanceReel, 'blue')} km donc <br>` +\n`  ${distanceCarte2} cm va correspondre à ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${texteEnCouleur(distanceReel, 'blue')} km  <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea1]))} $\\\\times$ ${texteEnCouleur(distanceReel, 'blue')} km = ${texNombrec(calcul(rapport[alea1] * distanceReel))} km <br>` +\ntexteEnCouleurEtGras(`Conclusion : le trajet de ${prenoms[0]} est de ${texNombrec(calcul(rapport[alea1] * distanceReel))} km.`, 'black') + '<br><br>'\n  texte += `<br> ${numAlpha(1)} Deux villes sont distantes de ${distanceReelQ2} km. <br>` +\n  'Quelle distance va-t-on mesurer sur la carte entre ces deux villes ?' + ajouteChampTexteMathLive(exo, i + 1, 'largeur25  inline', { texteApres: ' cm' })\n  texteCorr += `<br> ${numAlpha(1)} ${distanceReelQ2} km c'est ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${distanceReel} km.\nOr ${distanceReel} km est représenté par ${texteEnCouleur(distanceCarte, 'blue')} cm sur la carte. <br>` +\n`Donc ${distanceReelQ2} km est représenté par ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${texteEnCouleur(distanceCarte, 'blue')} cm sur la carte <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea2]))} $\\\\times$ ${texteEnCouleur(distanceCarte, 'blue')} cm = ${texNombrec(calcul(rapport[alea2] * distanceCarte))} cm <br>` +\ntexteEnCouleurEtGras(`Conclusion : Les deux villes sont séparées de ${texNombrec(calcul(rapport[alea2] * distanceCarte))} cm sur la carte.`, 'black')\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecouvrirSurface (exo, i) { // peinture, gazon, carrelage pour une surface donnée.\n  let texte, texteCorr\n  const liste = [\n    {\n      matiere: 'de la peinture',\n      unite: 'L',\n      qtt_matiere_unitaire: [0.5, 1, 1.5, 2], // quantité au m²\n      qtt_surface: [10, 25, 15] // nombre de m² indiqués sur l'emballage\n    },\n    {\n      matiere: 'du gazon',\n      unite: 'kg',\n      qtt_matiere_unitaire: [2.5, 3, 5, 10],\n      qtt_surface: [200, 175, 150]\n    },\n    {\n      matiere: 'du carrelage',\n      unite: 'carreaux',\n      qtt_matiere_unitaire: [24, 40, 60, 100],\n      qtt_surface: [10, 20, 5]\n    }\n  ]\n  const prenoms = [prenomF(), prenomM()]\n  let alea1 = randint(0, liste.length - 1)\n  if (versionSimplifiee) {\n    const quantiteD = couplePremiersEntreEux[indexN][1]\n    const surfaceD = couplePremiersEntreEux[indexN][0]\n    const coef = randint(2, 5)\n    const quantiteF = calcul(quantiteD * coef)\n    const surfaceF = calcul(surfaceD * coef)\n    alea1 = 2 // Pour avoir un coef entier, qtt_matiere_unitaire doit être plus grand que qtt_surface, ce qui n'est possible qu'avec les carreaux\n    texte = `${prenoms[0]} doit acheter ${liste[alea1].matiere}. <br>` +\n`Sur la notice il est indiqué de prévoir ${quantiteD} ${liste[alea1].unite} pour ${surfaceD} m${exposant(2)} <br> ` +\n`Combien doit-elle en acheter pour une surface de ${surfaceF} m${exposant(2)} ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25  inline', { texteApres: ' ' + liste[alea1].unite })\n    texteCorr = `${texNombrec(surfaceF)} m${exposant(2)} c'est ${texteEnCouleur(coef)} fois ${surfaceD} m${exposant(2)} <br>` +\n`Il va donc falloir ${texteEnCouleur(coef)} fois ${texteEnCouleur(quantiteD, 'blue')} ${liste[alea1].unite} pour ${texNombrec(surfaceF)} m${exposant(2)} <br>` +\n`${texteEnCouleur(coef)} $\\\\times$ ${texteEnCouleur(quantiteD, 'blue')} ${liste[alea1].unite} = ${texNombrec(quantiteF)} ${liste[alea1].unite}<br>` +\ntexteEnCouleurEtGras(`Conclusion : elle doit en acheter ${quantiteF} ${liste[alea1].unite}.`, 'black') + '<br>  '\n    if (!context.isAmc) {\n      setReponse(exo, i, quantiteF)\n    } else {\n      exo.autoCorrection[i] = {\n        enonce: texte,\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: texteCorr,\n              statut: '',\n              reponse: {\n                texte: 'a) ',\n                valeur: quantiteF,\n                param: {\n                  digits: nombreDeChiffresDe(quantiteF),\n                  decimals: nombreDeChiffresDansLaPartieDecimale(quantiteF),\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }\n        ]\n      }\n    }\n  } else {\n    const alea2 = randint(0, liste[alea1].qtt_matiere_unitaire.length - 1)\n    const alea3 = randint(0, liste[alea1].qtt_surface.length - 1)\n    const rapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5] // choix parmi des rapports simples (en 6eme cela parrait suffisant)\n    const quantite = liste[alea1].qtt_matiere_unitaire[alea2]\n    const alea4 = randint(0, rapport.length - 1)\n    const surfaceFinale = calcul(rapport[alea4] * liste[alea1].qtt_surface[alea3])\n    const alea5 = randint(0, rapport.length - 1, [alea4])\n    const quantite2 = calcul(rapport[alea5] * liste[alea1].qtt_matiere_unitaire[alea2])\n    const alea6 = randint(-2, 2, [0])\n    const surfaceFinale2 = calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3] + alea6)\n    const qttaffichage = texNombrec(quantite) // Pour affichage avec virgule en séparateur.\n    texte = `${numAlpha(0)} ${prenoms[0]} doit acheter ${liste[alea1].matiere}. <br>` +\n`Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${liste[alea1].qtt_surface[alea3]} m${exposant(2)} <br> ` +\n`Combien doit-elle en acheter pour une surface de $${texNombrec(surfaceFinale)}$ m${exposant(2)} ? ` + ajouteChampTexteMathLive(exo, i, 'largeur25  inline', { texteApres: ' ' + liste[alea1].unite })\n    texteCorr = `${numAlpha(0)} $${texNombrec(surfaceFinale)}$ m${exposant(2)} c'est ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${liste[alea1].qtt_surface[alea3]} m${exposant(2)} <br>` +\n`Il va donc falloir ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} pour $${texNombrec(surfaceFinale)}$ m${exposant(2)} <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4] * quantite))} ${liste[alea1].unite}<br>` +\ntexteEnCouleurEtGras(`Conclusion : elle doit en acheter ${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4] * quantite))} ${liste[alea1].unite}.`, 'black') + '<br>  '\n    texte += `<br> ${numAlpha(1)} ${prenoms[1]} a acheté ${liste[alea1].matiere}. Il lui en reste ${texNombrec(quantite2)} ${liste[alea1].unite}. <br> Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${texNombrec(liste[alea1].qtt_surface[alea3])} m${exposant(2)} <br>` +\n`En a-t-il suffisament pour la surface de ${texNombrec(surfaceFinale2)} m${exposant(2)} qu'il lui reste à faire ? ` + ajouteChampTexteMathLive(exo, i + 1, 'largeur25  inline', { texteApres: ' (oui ou non)' })\n    texteCorr += `<br> ${numAlpha(1)} ${texNombrec(quantite2)} ${liste[alea1].unite} c'est ${texteEnCouleur(texNombrec(rapport[alea5]))} fois ${qttaffichage} ${liste[alea1].unite}. <br>` +\n`avec ${texNombrec(quantite2)} ${liste[alea1].unite} on peut donc traiter une surface de ${texteEnCouleur(texNombrec(rapport[alea5]))}\nfois ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]), 'blue')} m${exposant(2)} <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea5]))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]), 'blue')} m${exposant(2)} = ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m${exposant(2)}. <br>`\n    if (calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]) > surfaceFinale2) {\n      texteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m${exposant(2)} > ${texNombrec(surfaceFinale2)} m${exposant(2)} donc il a suffisament pour ${surfaceFinale2} m${exposant(2)}.`, 'black') + ' <br>'\n      if (!context.isAmc) {\n        setReponse(exo, i, calcul(rapport[alea4] * quantite))\n        setReponse(exo, i + 1, 'oui')\n      } else {\n        exo.autoCorrection[i] = {\n          enonce: texte,\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: 'a) ',\n                  valeur: calcul(rapport[alea4] * quantite),\n                  param: {\n                    digits: nombreDeChiffresDe(calcul(rapport[alea4] * quantite)),\n                    decimals: nombreDeChiffresDansLaPartieDecimale(calcul(rapport[alea4] * quantite)),\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCOpen',\n              propositions: [{\n                texte: 'b)',\n                statut: 3\n              }]\n            }\n          ]\n        }\n      }\n    } else {\n      texteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m${exposant(2)} < ${texNombrec(surfaceFinale2)} m${exposant(2)} donc il n'a pas assez pour ${surfaceFinale2} m${exposant(2)}.`, 'black') + ' <br>'\n      if (!context.isAmc) {\n        setReponse(exo, i, calcul(rapport[alea4] * quantite))\n        setReponse(exo, i + 1, 'non')\n      } else {\n        exo.autoCorrection[i] = {\n          enonce: texte,\n          propositions: [\n            {\n              type: 'AMCNum',\n              propositions: [{\n                texte: texteCorr,\n                statut: '',\n                reponse: {\n                  texte: 'a) ',\n                  valeur: calcul(rapport[alea4] * quantite),\n                  param: {\n                    digits: nombreDeChiffresDe(calcul(rapport[alea4] * quantite)),\n                    decimals: nombreDeChiffresDansLaPartieDecimale(calcul(rapport[alea4] * quantite)),\n                    signe: false,\n                    approx: 0\n                  }\n                }\n              }]\n            },\n            {\n              type: 'AMCOpen',\n              propositions: [{\n                texte: '',\n                statut: 3\n              }]\n            }\n          ]\n        }\n      }\n    }\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\n// _______ Fin des fonctions correspondants aux situations problèmes _____\n\nexport default function ProportionnaliteParLinearite () {\n  'use strict'\n  let question\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Répondre aux questions posées en justifiant'\n  context.isHtml ? (this.spacing = 2) : (this.spacing = 1)\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n  this.nbQuestions = 6\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.besoinFormulaireCaseACocher = ['Version simplifiée ne comportant que des nombres entiers']\n  this.sup = false\n  this.besoinFormulaire2Texte = ['Types de questions', 'Nombres séparés par des tirets\\n1 : Achat.\\n2 : Recette.\\n3 : Dilution.\\n4 : Distance.\\n5 : Echelle.\\n6 : Surface.']\n  this.nouvelleVersion = function () {\n    let indiceQuestion = 0\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeIndexSituationsDisponible = []\n    if (!this.sup2 || this.sup2 === 'NaN') { // Si aucune liste n'est saisie\n      listeIndexSituationsDisponible = [1, 2, 3, 4, 5, 6]\n    } else {\n      if (typeof (this.sup2) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        listeIndexSituationsDisponible[0] = this.sup2\n      } else {\n        listeIndexSituationsDisponible = this.sup2.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    const listeIndexSituations = combinaisonListes(listeIndexSituationsDisponible, this.nbQuestions) // permet de ne pas avoir 2 fois la même situation si - de questions que de situations\n    // boucle pour le nombre de question.\n    // A chaque question on vérifie qu'elle n'existe pas déjà pour en refaire une. Sécurité : on ajoute un compteur pour eviter trop d'essais...\n    let cpt = 0\n    for (let i = 0; i < this.nbQuestions && cpt < 50;) {\n      indexN = randint(0, couplePremiersEntreEux.length - 1)\n      if (this.sup) {\n        versionSimplifiee = true\n      } else {\n        versionSimplifiee = false\n      }\n      switch (parseInt(listeIndexSituations[i])) {\n        case 1:\n          question = questionAchat(this, indiceQuestion)\n          if (!context.isAmc) {\n            indiceQuestion += 2\n          } else {\n            indiceQuestion++\n          }\n          break\n        case 2:\n          question = questionRecette(this, indiceQuestion)\n          if (!context.isAmc) {\n            indiceQuestion += 2\n          } else {\n            indiceQuestion++\n          }\n          break\n        case 3:\n          question = questionDillution(this, indiceQuestion)\n          indiceQuestion++\n          break\n        case 4:\n          question = questionDistance(this, indiceQuestion)\n          if (versionSimplifiee) {\n            indiceQuestion++\n          } else {\n            if (!context.isAmc) {\n              indiceQuestion += 2\n            } else {\n              indiceQuestion++\n            }\n          }\n          break\n        case 5:\n          question = questionEchelle(this, indiceQuestion)\n          if (!context.isAmc) {\n            indiceQuestion += 2\n          } else {\n            indiceQuestion++\n          }\n          break\n        case 6:\n          question = questionRecouvrirSurface(this, indiceQuestion)\n          if (versionSimplifiee) {\n            indiceQuestion++\n          } else {\n            if (!context.isAmc) {\n              indiceQuestion += 2\n            } else {\n              indiceQuestion++\n            }\n          }\n          break\n      }\n      if (this.listeQuestions.indexOf(question.qtexte) === -1) { // Si la question n'a jamais été posée, on la garde.\n        this.listeQuestions.push(question.qtexte)\n        this.listeCorrections.push(question.qtexteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","indexN","versionSimplifiee","couplePremiersEntreEux","questionAchat","exo","i","listeDeChoses","listeDePrixUnit","index1","randint","prenoms","prenomF","prenomM","index2","length","objet","pu","n","x","y","calcul","p","z","met","texte","numAlpha","texPrix","ajouteChampTexteMathLive","texteApres","texteCorr","texteEnCouleur","texNombrec","texteEnCouleurEtGras","context","autoCorrection","enonce","propositions","type","statut","reponse","valeur","arrondi","param","digits","nombreDeChiffresDe","decimals","nombreDeChiffresDansLaPartieDecimale","signe","approx","nombreDeChiffresDansLaPartieEntiere","setReponse","qtexte","qtexteCorr","questionRecette","liste","ingredient","recettes","quantites_par_pers","nbPersonneInit","nbPersonneFinal","alea1","alea2","alea3","quantite","quantite2","quantiteReponse","questionDillution","uniteSolvantVolumeFinal","solute","volumeUnitaire","unite_solute","unite_solvant","volumeInitial","volumeFinal","volumeFinalAff","volumeInitialAff","questionDistance","locomotion","vitesse","duree","temps","rapport","dureeQ","distance","indice","dureeR","rapportQuestion2","reponseQ1","questionEchelle","distanceCarte","distanceReel","distanceCarte2","distanceReelQ2","questionRecouvrirSurface","matiere","unite","qtt_matiere_unitaire","qtt_surface","quantiteD","surfaceD","coef","quantiteF","surfaceF","exposant","alea4","surfaceFinale","alea5","alea6","surfaceFinale2","qttaffichage","ProportionnaliteParLinearite","question","Exercice","this","consigne","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","besoinFormulaireCaseACocher","sup","besoinFormulaire2Texte","nouvelleVersion","indiceQuestion","listeQuestions","listeCorrections","listeIndexSituationsDisponible","sup2","split","listeIndexSituations","combinaisonListes","cpt","parseInt","indexOf","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}