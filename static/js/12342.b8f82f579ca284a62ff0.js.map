{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4G51.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Representer_un_solide4e","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","classe","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","Xmin","Xmax","Ymin","Ymax","ppc","sc","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","A","B","C","D","E","F","G","H","I","AB","BC","CD","DA","EF","FG","GH","HE","AE","BF","CG","DH","IA","IB","IE","IF","BD","FH","coeffpersp","enonce","correction","carreaux","g","objetsEnonce","objetsCorrection","matrace","tracePoint","texte","i","cpt","nom","creerNomDePolygone","anglepersp","choice","context","point","similitude","x","Math","round","y","randint","translation2Points","milieu","taille","opacite","epaisseur","style","segment","color","pointilles","min","max","grille","seyes","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","push","labelPoint","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/12342.b8f82f579ca284a62ff0.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,creerNomDePolygone} from '../../modules/outils.js'\nimport {point,tracePoint,milieu,labelPoint,segment,translation2Points,similitude,grille,seyes,mathalea2d,} from '../../modules/2d.js'\n\n\nexport const titre = 'Compléter une représentation en perspective cavalière'\n\n/**\n * fonction servant à compléter des solides, inspirée des fonctions de 6G42 et 6G43\n * référence : 6G41\n * @author Mireille Gain, s'inspirant fortement de Jean-Claude Lhote\n */\nexport default function Representer_un_solide4e() {\n  Exercice.call(this); // Héritage de la classe Exercice ()\n  this.titre = titre;\n  this.nbQuestions = 1;\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.sup = 1;\n  this.sup2 = 1;\n  this.classe=4;\n  this.nouvelleVersion = function () {\n    let typesDeQuestionsDisponibles;\n\n    if (this.sup == 3)\n      typesDeQuestionsDisponibles = [1, 2];\n    else if (this.sup == 5)\n      typesDeQuestionsDisponibles = [1, 2, 4];\n    else if (this.sup == 7)\n      typesDeQuestionsDisponibles = [1, 2, 4, 6];\n    else\n      typesDeQuestionsDisponibles = [parseInt(this.sup)];\n\n    let listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, ppc, sc;\n\n    if (this.classe == 6)\n      typesDeQuestionsDisponibles = [1, 2];\n\n    // sixième : cube et pavé droit\n    else if (this.classe == 5)\n      typesDeQuestionsDisponibles = [1, 2, 4];\n\n    // cinquième : on ajoute le prisme\n    else if (this.classe == 4)\n      typesDeQuestionsDisponibles = [1, 2, 4, 6];\n    // Quatrième : on ajoute la pyramide\n    if (this.sup2 == 1)\n      sc = 0.5;\n    else\n      sc = 0.8;\n\n    let A, B, C, D, E, F, G, H, I,\n      AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, IA, IB, IE, IF, BD, FH,\n      coeffpersp,\n      enonce,\n      correction,\n      carreaux, g,\n      objetsEnonce = [],\n      objetsCorrection = [], matrace = tracePoint(I);\n\n    for (let i = 0, texte, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let nom = creerNomDePolygone(8, \"PQ\"),\n        anglepersp = choice([30, 45, -30, -45, 150, 135, -150, -135]);\n      if (anglepersp % 10 == 0)\n        coeffpersp = 0.6;\n      else\n        coeffpersp = 0.4;\n      objetsCorrection = [];\n      objetsEnonce = [];\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1: //cube\n          enonce = `$${nom}$ est un cube.<br>`;\n          if (context.isHtml)\n            enonce += `Reproduire et compléter la figure ci-dessous, en repassant de la même couleur les segments parallèles et de même longueur.<br>`;\n          correction = `Figure complétée :<br>`;\n          break;\n\n        case 2: //pavé droit\n          enonce = `$${nom}$ est un pavé droit.<br>`;\n          if (context.isHtml)\n            enonce += `Reproduire et compléter la figure ci-dessous, en repassant de la même couleur les segments parallèles et de même longueur.<br>`;\n          correction = `Figure complétée :<br>`;\n          break;\n\n        case 4: //prisme\n          enonce = `On considère un prisme à base triangulaire.<br>Reproduire et compléter la figure ci-dessous, en repassant de la même couleur les segments parallèles et de même longueur.<br>`;\n          correction = `Figure complétée :<br>`;\n          break;\n\n        case 6: //pyramide\n          enonce = `On considère une pyramide à base rectangulaire.<br>Reproduire et compléter la figure ci-dessous, en repassant de la même couleur les segments parallèles et de même longueur.<br>`;\n          correction = `Figure complétée :<br>`;\n          break;\n      }\n\n      switch (listeTypeDeQuestions[i] % 2) {\n        case 1:\n          A = point(6, 0, nom[0], \"left\");\n          B = point(11, 0, nom[1], \"right\");\n          C = point(11, 5, nom[2], \"right\");\n          D = point(6, 5, nom[3], \"left\");\n          E = similitude(B, A, anglepersp, coeffpersp, nom[4], 'left');\n          E.x = Math.round(E.x);\n          E.y = Math.round(E.y);\n          break;\n\n        case 0:\n          A = point(5, 0, nom[0], \"left\");\n          B = point(9 + randint(1, 3), 0, nom[1], \"right\");\n          C = point(B.x, randint(3, 7), nom[2], \"right\");\n          D = point(A.x, C.y, nom[3], \"left\");\n          E = similitude(B, A, anglepersp, coeffpersp * randint(5, 12) / 10, nom[4], 'left');\n          E.x = Math.round(E.x);\n          E.y = Math.round(E.y);\n          break;\n      }\n\n      F = translation2Points(E, A, B, nom[5], 'right');\n      G = translation2Points(F, B, C, nom[6], 'right');\n      H = translation2Points(G, C, D, nom[7], 'left');\n      I = milieu(D, G);\n      matrace.taille = 4;\n      matrace.opacite = 0.9;\n      matrace.epaisseur = 5;\n      matrace.style = 'x';\n      AB = segment(A, B);\n      BC = segment(B, C);\n      CD = segment(C, D);\n      DA = segment(D, A);\n      EF = segment(E, F);\n      FG = segment(F, G);\n      GH = segment(G, H);\n      HE = segment(H, E);\n      AE = segment(A, E);\n      BF = segment(B, F);\n      CG = segment(C, G);\n      DH = segment(D, H);\n      IA = segment(A, I);\n      IB = segment(B, I);\n      IE = segment(E, I);\n      IF = segment(F, I);\n      BD = segment(B, D);\n      FH = segment(F, H);\n      AB.epaisseur = 2;\n      BC.epaisseur = 2;\n      CD.epaisseur = 2;\n      DA.epaisseur = 2;\n      EF.epaisseur = 2;\n      FG.epaisseur = 2;\n      GH.epaisseur = 2;\n      HE.epaisseur = 2;\n      AE.epaisseur = 2;\n      BF.epaisseur = 2;\n      CG.epaisseur = 2;\n      DH.epaisseur = 2;\n      IA.epaisseur = 1;\n      IB.epaisseur = 1;\n      IE.epaisseur = 1;\n      IF.epaisseur = 1;\n      BD.epaisseur = 2;\n      FH.epaisseur = 2;\n      AB.color = 'black';\n      BC.color = 'black';\n      CD.color = 'black';\n      DA.color = 'black';\n      EF.color = 'black';\n      FG.color = 'black';\n      GH.color = 'black';\n      HE.color = 'black';\n      AE.color = 'black';\n      BF.color = 'black';\n      CG.color = 'black';\n      IA.color = 'black';\n\n      if (G.y < C.y && G.x < C.x) {\n        CG.pointilles = true;\n        GH.pointilles = true;\n        FG.pointilles = true;\n        IF.pointilles = true;\n        FH.pointilles = true;\n        CG.color = 'gray';\n        GH.color = 'gray';\n        FG.color = 'gray';\n        CG.opacite = 0.7;\n        GH.opacite = 0.7;\n        FG.opacite = 0.7;\n      }\n      else if (E.y > A.y && E.x > A.x) {\n        AE.pointilles = true;\n        EF.pointilles = true;\n        HE.pointilles = true;\n        IE.pointilles = true;\n        FH.pointilles = true;\n        AE.color = 'gray';\n        EF.color = 'gray';\n        HE.color = 'gray';\n        AE.opacite = 0.7;\n        EF.opacite = 0.7;\n        HE.opacite = 0.7;\n      }\n      else if (F.x < B.x && F.y > B.y) {\n        BF.pointilles = true;\n        FG.pointilles = true;\n        EF.pointilles = true;\n        IF.pointilles = true;\n        FH.pointilles = true;\n        BF.color = 'gray';\n        FG.color = 'gray';\n        EF.color = 'gray';\n        BF.opacite = 0.7;\n        FG.opacite = 0.7;\n        EF.opacite = 0.7;\n      }\n      else if (H.x > D.x && H.y < D.y) {\n        DH.pointilles = true;\n        GH.pointilles = true;\n        HE.pointilles = true;\n        IE.pointilles = true;\n        FH.pointilles = true;\n        DH.color = 'gray';\n        GH.color = 'gray';\n        HE.color = 'gray';\n        DH.opacite = 0.7;\n        GH.opacite = 0.7;\n        HE.opacite = 0.7;\n      }\n      Xmin = Math.min(A.x, E.x) - 1;\n      Ymin = Math.min(A.y, E.y) - 1;\n      Xmax = Math.max(B.x, F.x) + 2;\n      Ymax = Math.max(D.y, H.y) + 1;\n      ppc = 20;\n\n      if (this.sup2 < 3) { g = grille(Xmin, Ymin, Xmax, Ymax, \"gray\", 0.7); }\n      else\n        g = \"\";\n      if (this.sup2 == 2) { carreaux = seyes(Xmin, Ymin, Xmax, Ymax); sc = 0.8; }\n      else { carreaux = \"\"; sc = 0.5; }\n\n      let params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: ppc,\n        scale: sc,\n      };\n\n      if (listeTypeDeQuestions[i] == 1) {\n        objetsEnonce.push(AB, BC, CD, DA, AE, labelPoint(A, B, C, D, E),\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 2) {\n        objetsEnonce.push(AB, BC, CD, DA, AE, labelPoint(A, B, C, D, E),\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 4) {\n        objetsEnonce.push(AB, DA, BD, AE,\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 6) {\n        objetsEnonce.push(AB, BF, tracePoint(I, .5, 'red'), labelPoint(I),\n          g,\n          carreaux\n        );\n      }\n\n      enonce += mathalea2d(params, objetsEnonce);\n      if (listeTypeDeQuestions[i] == 1) {\n        AB.color = 'green';\n        BC.color = 'red';\n        CD.color = 'green';\n        DA.color = 'red';\n        EF.color = 'green';\n        FG.color = 'red';\n        GH.color = 'green';\n        HE.color = 'red';\n        AE.color = 'blue';\n        BF.color = 'blue';\n        CG.color = 'blue';\n        DH.color = 'blue';\n        objetsCorrection.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H),\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 2) {\n        AB.color = 'green';\n        BC.color = 'red';\n        CD.color = 'green';\n        DA.color = 'red';\n        EF.color = 'green';\n        FG.color = 'red';\n        GH.color = 'green';\n        HE.color = 'red';\n        AE.color = 'blue';\n        BF.color = 'blue';\n        CG.color = 'blue';\n        DH.color = 'blue';\n        objetsCorrection.push(AB, BC, CD, DA, EF, FG, GH, HE, AE, BF, CG, DH, labelPoint(A, B, C, D, E, F, G, H),\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 4) {\n        AB.color = 'green';\n        BC.color = 'red';\n        CD.color = 'green';\n        DA.color = 'red';\n        EF.color = 'green';\n        FG.color = 'red';\n        GH.color = 'green';\n        HE.color = 'red';\n        AE.color = 'blue';\n        BF.color = 'blue';\n        CG.color = 'blue';\n        DH.color = 'blue';\n        objetsCorrection.push(AB, DA, BD, EF, HE, AE, BF, DH, FH,\n          g,\n          carreaux\n        );\n      }\n\n      if (listeTypeDeQuestions[i] == 6) {\n        AB.color = 'green';\n        BC.color = 'red';\n        CD.color = 'green';\n        DA.color = 'red';\n        EF.color = 'green';\n        FG.color = 'red';\n        GH.color = 'green';\n        HE.color = 'red';\n        AE.color = 'blue';\n        BF.color = 'blue';\n        CG.color = 'blue';\n        DH.color = 'blue';\n        objetsCorrection.push(AB, EF, AE, BF, IA, IB, IE, IF, tracePoint(I),\n          g,\n          carreaux\n        );\n      }\n\n      correction += mathalea2d(params, objetsCorrection);\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(enonce + \"<br>\");\n        this.listeCorrections.push(correction + \"<br>\");\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n    this.besoinFormulaireNumerique = ['Type de solides', 7, `1 : Cubes\\n 2 : Pavés droits\\n 3 : Mélange cubes et pavés\\n 4 : Prismes\\n 5 : Mélange cubes, pavés, prismes\\n 6 : Pyramides\\n 7 : Mélange cubes, pavés, prismes, pyramides`];\n  this.besoinFormulaire2Numerique = [\n    \"Type de cahier\",\n    3,\n    `1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche`,\n  ];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}