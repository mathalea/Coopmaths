{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N11-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Encadrer_un_entier_par_deux_entiers_consecutifs","typesDeQuestionsDisponibles","Exercice","this","beta","sup","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","shuffle","choice","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","precision","myNombres","nb_chiffres","u","d","c","mu","md","mc","mmu","mmd","mmc","sortie","N","randint","toString","Number","situations","nombre","encadrement_corr","nb","miseEnEvidence","texNombre","Math","trunc","enonces","k","length","push","enonce","question","correction","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/5380.ec7b2ca53509f7d99d66.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,shuffle,combinaisonListesSansChangerOrdre,texNombre,miseEnEvidence} from '../../modules/outils.js'\nexport const titre = 'Encadrer un entier entre deux entiers consécutifs'\n\n/** \n* * Encadrer un nombre entier par deux entier consécutifs\n* * 6N11-3\n* @author Sébastien Lozano\n*/\n\nexport default function Encadrer_un_entier_par_deux_entiers_consecutifs() {\n  'use strict';\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.beta = false;\n  this.sup = 1;\n  if (this.beta) {\n    this.nbQuestions = 6;\n  } else {\n    this.nbQuestions = 3;\n  };\n\n  this.titre = titre;\n  this.consigne = ``;\n\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  //this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2;\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5;\n\n  let typesDeQuestionsDisponibles;\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0, 1, 2, 3, 4, 5];\n    } else {\n      typesDeQuestionsDisponibles = shuffle([choice([0, 1]), choice([2, 3]), choice([4, 5])]);\n    };\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    //let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\t\t\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      //pour la précision d'encadrement\n      let precision;\n\n      //selon la precision on veut certains chiffres plus souvant que d'autres ...\n      function myNombres(nb_chiffres) {\n        let sortie = '';\n        // on fabrique le nombre à partir de ses chiffres et on veut des cas limites\n        let u, d, c, mu, md, mc, mmu, mmd, mmc;\n        let N = choice([[randint(0, 9, [0]), 0, 0, 0, 0, 0, 0, 0, 0], [randint(0, 9, [0]), 9, 9, 9, 9, 9, 9, 9, 9], [randint(0, 9, [0]), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9), randint(0, 9)]]);\n        mmc = N[0];\n        mmd = N[1];\n        mmu = N[2];\n        mc = N[3];\n        md = N[4];\n        mu = N[5];\n        c = N[6];\n        d = N[7];\n        u = N[8];\n        switch (nb_chiffres) {\n          case 4:\n            mu = randint(0, 9, [0]);\n            sortie = mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n          case 5:\n            md = randint(0, 9, [0]);\n            sortie = md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n          case 6:\n            mc = randint(0, 9, [0]);\n            sortie = mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n          case 7:\n            mmu = randint(0, 9, [0]);\n            sortie = mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n          case 8:\n            mmd = randint(0, 9, [0]);\n            sortie = mmd.toString() + mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n          case 9:\n            mmc = randint(0, 9, [0]);\n            sortie = mmc.toString() + mmd.toString() + mmu.toString() + mc.toString() + md.toString() + mu.toString() + c.toString() + d.toString() + u.toString();\n            break;\n\n        };\n        return sortie;\n      };\n\n      this.sup = Number(this.sup); // attention le formulaire renvoie un string, on a besoin d'un number pour le switch !\n      switch (this.sup) {\n        case 1:\n          this.consigne = `Compléter avec le nombre entier qui précède et le nombre entier qui suit.`;\n          precision = 1;\n          break;\n        case 2:\n          this.consigne = `Compléter avec le multiple de 10 qui précède et le multiple de 10 qui suit.`;\n          precision = 10;\n          break;\n        case 3:\n          this.consigne = `Compléter avec le multiple de 100 qui précède et le multiple de 100 qui suit.`;\n          precision = 100;\n          break;\n      };\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      let situations = [\n        {//case 0 -->\n          nombre: Number(myNombres(4)),\n        },\n        {//case 1 -->\n          nombre: Number(myNombres(5)),\n        },\n        {//case 2 -->\n          nombre: Number(myNombres(6)),\n        },\n        {//case 3 -->\n          nombre: Number(myNombres(7)),\n        },\n        {//case 4 -->\n          nombre: Number(myNombres(8)),\n        },\n        {//case 5 -->\n          nombre: Number(myNombres(9)),\n        },\n      ];\n\n      // une fonction pour les correction à la precision près\n      function encadrement_corr(nb, precision) {\n        if (precision == 1) {\n          return `$${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision - precision))} < ${texNombre(nb)} < ${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision + precision))}$`;\n        } else if (precision == 10 || precision == 100) {\n          if (nb % precision == 0) {\n            return `$${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision - precision))} < ${texNombre(nb)} < ${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision + precision))}$`;\n          } else {\n            return `$${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision))} < ${texNombre(nb)} < ${miseEnEvidence(texNombre(Math.trunc(nb / precision) * precision + precision))}$`;\n          };\n        };\n      };\n\n      let enonces = [];\n      for (let k = 0; k < situations.length; k++) {\n        enonces.push({\n          enonce: `\n          $\\\\ldots < ${texNombre(situations[k].nombre)} < \\\\ldots$\t\t\n          `,\n          question: ``,\n          correction: `\n          ${encadrement_corr(situations[k].nombre, precision)}\n          `\n        });\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`;\n            texte += `             `\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[0].correction}`;\n          };\n          break;\n        case 1:\n          texte = `${enonces[1].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[1].correction}`;\n          };\n          break;\n        case 2:\n          texte = `${enonces[2].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[2].correction}`;\n          };\n          break;\n        case 3:\n          texte = `${enonces[3].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[3].correction}`;\n            texte += `             `\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[3].correction}`;\n          };\n          break;\n        case 4:\n          texte = `${enonces[4].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[4].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[4].correction}`;\n          };\n          break;\n        case 5:\n          texte = `${enonces[5].enonce}`;\n          if (this.beta) {\n            texte += `<br>`;\n            texte += `<br> =====CORRECTION======<br>${enonces[5].correction}`;\n            texteCorr = ``;\n          } else {\n            texteCorr = `${enonces[5].correction}`;\n          };\n          break;\n      };\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, \"1 : Encadrer entre deux entiers consécutifs\\n2 : Encadrer entre deux multiples consécutifs de dix\\n3 : Encadrer entre deux multiples consécutifs de cent\"];\n  //this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\t\n\n};\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}