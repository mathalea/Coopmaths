{"version":3,"file":"js/76033.5f7a299ba9fec67a9e5d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6G32-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenuSansNumero, randint, shuffle, combinaisonListes, lettreDepuisChiffre, texcolors, texteGras } from '../../modules/outils.js'\nimport { point, tracePoint, labelPoint, droite, segment, demiDroite, polygone, codeAngle, texteParPosition, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Propriétés de conservation de la symétrie axiale'\n\n/**\n * Ref 6G32-1\n * Publié le 26/10/2020\n * @author Jean-Claude Lhote\n */\nexport default function SymetrieAxialeConservation1 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Dans la symétrie d\\'axe (d)...'\n  this.spacing = 2\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    const typesDeQuestionsDisponibles = ['Segment', 'Droite', '1/2droite', 'Triangle', 'Angle']\n    const points = []; const traces = []; const nom = []; let alternance\n    for (let i = 0; i < 25; i++) nom.push(lettreDepuisChiffre(i + 1))\n    const noms = shuffle(nom)\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.listeQuestions.push(' ')\n    this.listeCorrections.push(`${texteGras('Dans la symétrie d\\'axe (d)...')}`)\n    // On prépare la figure...\n    let axe = parseInt(this.sup)\n    let d; let nonchoisi; const coords = []; let x; let y; const objetsEnonce = []; const objetsCorrection = []; let nomd; let labelPos\n    if (axe === 5) axe = randint(1, 4) // choix de l'axe et des coordonnées\n    switch (axe) {\n      case 1: d = droite(1, 0, 0)\n        nomd = texteParPosition('(d)', 0.3, 5.6)\n        labelPos = 'above left'\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 0), randint(-5, 5)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([-coords[j][0], coords[j][1]]) // on stocke les 12 images\n        break\n      case 2: d = droite(0, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', 5.6, 0.3)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            [x, y] = [randint(-5, 5), randint(-5, 0)]\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([coords[j][0], -coords[j][1]]) // on stocke les 12 images\n        break\n      case 3: d = droite(1, -1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, -5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ?\n            x = randint(-5, 5)\n            y = randint(x, 5)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) { if (coords[j][0] === x && coords[j][1] === y) nonchoisi = false }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) coords.push([coords[j][1], coords[j][0]]) // on stocke les 12 images\n        break\n      case 4: d = droite(1, 1, 0)\n        labelPos = 'above'\n        nomd = texteParPosition('(d)', -5.8, 5.4)\n        for (let i = 0; i < 12; i++) {\n          nonchoisi = false\n          while (!nonchoisi) { // Le nouveau point est-il déjà dans la liste ? Si oui, on recommence.\n            x = randint(-5, 5)\n            y = randint(-5, -x)\n            nonchoisi = true\n            for (let j = 0; j < i; j++) {\n              if (coords[j][0] === x && coords[j][1] === y) { nonchoisi = false }\n            }\n          }\n          coords.push([x, y]) // on stocke les 12 points\n        }\n        for (let j = 0; j < 12; j++) { coords.push([-coords[j][1], -coords[j][0]]) } // on stocke les 12 images\n        break\n    }\n    for (let i = 0; i < 24; i++) {\n      if (i < 12) points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      else if (coords[i][0] === coords[i - 12][0] && coords[i][1] === coords[i - 12][1]) {\n        points.push(point(coords[i][0], coords[i][1], noms[i - 12], labelPos))\n        noms[i] = noms[i - 12]\n      } else points.push(point(coords[i][0], coords[i][1], noms[i], labelPos))\n      traces.push(tracePoint(points[i]))\n    }\n    // On rédige les questions et les réponses\n    if (this.sup2 === true) alternance = 2\n    else alternance = 1\n    function index (i) {\n      return (i + 12 * (i % alternance)) % 24\n    }\n    objetsEnonce.length = 0\n    objetsCorrection.lenght = 0\n    for (let i = 0, texte, texteCorr, s1, s2, choix, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 'Segment':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quel est le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ ?`\n          texteCorr = `Le symétrique du segment $[${noms[index(choix)]}${noms[index(choix + 1)]}]$ est le segment $[${noms[index(choix + 12)]}${noms[index(choix + 13)]}]$.`\n          s1 = segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2))\n          s2 = segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2))\n          s1.epaisseur = 2\n          s2.epaisseur = 2\n          objetsCorrection.push(s1, s2)\n          break\n        case 'Droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quelle est la symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = `La symétrique de la droite $(${noms[index(choix)]}${noms[index(choix + 1)]})$ est la droite $(${noms[index(choix + 12)]}${noms[index(choix + 13)]})$.`\n          objetsCorrection.push(droite(points[index(choix)], points[index(choix + 1)], '', texcolors(i * 3 + 2)))\n          objetsCorrection.push(droite(points[index(choix + 12)], points[index(choix + 13)], '', texcolors(i * 3 + 2)))\n          break\n        case '1/2droite':\n          choix = randint(0, 10) + randint(0, 1) * 12\n          texte = `Quelle est la symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ ?`\n          texteCorr = `La symétrique de la demi-droite $[${noms[index(choix)]}${noms[index(choix + 1)]})$ est la demi-droite $[${noms[index(choix + 12)]}${noms[index(choix + 13)]})$`\n          objetsCorrection.push(demiDroite(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(demiDroite(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          break\n        case 'Triangle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          texte = `Quel est le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ ?`\n          texteCorr = `Le symétrique du triangle $${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}$ est le triangle $${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}$.`\n          objetsCorrection.push(polygone([points[index(choix)], points[index(choix + 1)], points[index(choix + 2)]], texcolors(i * 3 + 2)))\n          objetsCorrection.push(polygone([points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)]], texcolors(i * 3 + 2)))\n          break\n        case 'Angle':\n          choix = randint(0, 9) + randint(0, 1) * 12\n          texte = `Quel est le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ ?`\n          texteCorr = `Le symétrique de l'angle $\\\\widehat{${noms[index(choix)]}${noms[index(choix + 1)]}${noms[index(choix + 2)]}}$ est l'angle $\\\\widehat{${noms[index(choix + 12)]}${noms[index(choix + 13)]}${noms[index(choix + 14)]}}$.`\n          objetsCorrection.push(codeAngle(points[index(choix)], points[index(choix + 1)], points[index(choix + 2)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(codeAngle(points[index(choix + 12)], points[index(choix + 13)], points[index(choix + 14)], 2, '', texcolors(i * 3 + 2), 2, 0.5, texcolors(i * 3 + 2), 0.2))\n          objetsCorrection.push(segment(points[index(choix)], points[index(choix + 1)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 1)], points[index(choix + 2)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 12)], points[index(choix + 13)], texcolors(i * 3 + 2)))\n          objetsCorrection.push(segment(points[index(choix + 13)], points[index(choix + 14)], texcolors(i * 3 + 2)))\n\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    d.isVisible = true\n    objetsEnonce.push(nomd, d)\n    objetsCorrection.push(nomd, d)\n    for (let i = 0; i < 24; i++) {\n      objetsEnonce.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n      objetsCorrection.push(labelPoint(points[i]), tracePoint(points[i], 'blue'))\n    }\n    this.listeQuestions.push('<br>' + mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1, style: 'margin-top: 40px' }, objetsEnonce))\n    this.listeCorrections.push(mathalea2d({ xmin: -6, ymin: -6, xmax: 6, ymax: 6, pixelsParCm: 40, scale: 1 }, objetsCorrection))\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'axe', 5, '1 : Axe vertical\\n2 : Axe horizontal\\n3 : Axe oblique 1\\n4 : Axe oblique 2\\n5 : Axe aléatoire']\n  this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","SymetrieAxialeConservation1","Exercice","this","consigne","spacing","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","parseInt","points","traces","nom","alternance","i","push","lettreDepuisChiffre","noms","shuffle","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","texteGras","d","nonchoisi","axe","coords","x","y","objetsEnonce","objetsCorrection","nomd","labelPos","randint","droite","texteParPosition","j","point","tracePoint","index","sup2","length","lenght","texte","texteCorr","s1","s2","choix","cpt","segment","texcolors","epaisseur","demiDroite","polygone","codeAngle","indexOf","isVisible","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","style","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}