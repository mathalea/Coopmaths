{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6M12.js","webpack://mathalea/./src/js/exercices/6e/_ExerciceConversionsLongueurs.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Reglages6M12","ExerciceConversionsLongueurs","this","sup","nbQuestions","niveau","Exercice","sup2","consigne","spacing","nouvelleVersion","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","listeUnite1","combinaisonListes","listek","listeDeDecimaux","a","k","div","resultat","texte","texteCorr","i","cpt","typesDeQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","unite2","Math","max","min","ecart","pow","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"2KACO,MAAMA,EAAQ,2BAIN,SAASC,IACtBC,eAAkCC,MAClCA,KAAKH,MAAQA,EACbG,KAAKC,IAAM,EACXD,KAAKE,YAAc,I,gGCKN,SAASH,EAA8BI,EAAS,GAC7DC,eAAcJ,MACdA,KAAKC,IAAME,EACXH,KAAKK,MAAO,EACZL,KAAKH,MAAQ,2BACbG,KAAKM,SAAW,YAChBN,KAAKO,QAAU,EAEfP,KAAKQ,gBAAkB,WACrBR,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GACxB,MAAMC,EAAe,CACnB,CAAC,MAAO,IACR,CAAC,KAAM,KACP,CAAC,KAAM,MAEHC,EAAa,CACjB,CAAC,KAAM,IACP,CAAC,KAAM,KACP,CAAC,KAAM,MAEHC,EAAQ,IACRC,EAAa,CAAC,KAAM,KAAM,KAAM,IAAK,MAAO,KAAM,MAClDC,GAAcC,SAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIhB,KAAKE,aAC5De,GAASD,SAAkB,CAAC,EAAG,EAAG,GAAIhB,KAAKE,aAC3CgB,GAAkBF,SAAkB,CAAC,SAAU,OAAQ,MAAO,OAAQ,QAAShB,KAAKE,aAC1F,IAAK,IACHiB,EACAC,EACAC,EACAC,EACAC,EACAC,EANOC,EAAI,EAOXC,EAAM,EAAGD,EAAIzB,KAAKE,aAAewB,EAAM,IAAK,CAC5C,IAAIC,EAmBJ,GAhBEA,EADE3B,KAAKC,IAAM,EACMD,KAAKC,KAEL2B,SAAQ,EAAG,GAGhCR,EAAIH,EAAOQ,GAGTJ,EAFuB,IAArBM,IAG4B,IAArBA,IAIHE,SAAO,EAAC,GAAM,KAGlB7B,KAAKK,KAEP,OAAQa,EAAgBO,IACtB,IAAK,SACHN,GAAIS,SAAQ,EAAG,IACf,MACF,IAAK,OACHT,GAAIW,UAAQF,SAAQ,EAAG,KAAMA,SAAQ,EAAG,GAAK,GAAI,GACjD,MACF,IAAK,MACHT,GAAIW,UAAQF,SAAQ,EAAG,GAAK,GAAI,GAChC,MACF,IAAK,OACHT,GAAIW,UAAQF,SAAQ,EAAG,GAAK,IAAK,GACjC,MACF,IAAK,OACHT,GAAIW,UAAQF,SAAQ,EAAG,IAAKA,SAAQ,EAAG,GAAK,IAAKA,SAAQ,EAAG,GAAK,IAAK,QAI1ET,GAAIU,SAAO,EACTD,SAAQ,EAAG,GACK,IAAhBA,SAAQ,EAAG,GACK,KAAhBA,SAAQ,EAAG,GACK,IAAhBA,SAAQ,EAAG,IAAUA,SAAQ,EAAG,KAKpC,IAAKP,GAAOM,EAAmB,EAE7BL,GAAWS,SAAOZ,EAAIR,EAAaS,GAAG,IAAIY,WAC1CT,EACE,MACAU,SAAUd,IACVe,SAASvB,EAAaS,GAAG,GAAKP,GAC9B,iBACAqB,SAASrB,GACT,IAEFW,EACE,MACAS,SAAUd,IACVe,SAASvB,EAAaS,GAAG,GAAKP,GAC9B,QACAoB,SAAUd,GACV,WACAc,SAAUtB,EAAaS,GAAG,KAC1Bc,SAASrB,GACT,OACAoB,SAAUX,IACVY,SAASrB,GACT,SACG,GAAIQ,GAAOM,EAAmB,EACnCL,GAAWS,SAAOZ,EAAIP,EAAWQ,GAAG,IAAIY,WACxCT,EACE,MACAU,SAAUd,IACVe,SAAStB,EAAWQ,GAAG,GAAKP,GAC5B,iBACAqB,SAASrB,GACT,IACFW,EACE,MACAS,SAAUd,IACVe,SAAStB,EAAWQ,GAAG,GAAKP,GAC5B,QACAoB,SAAUd,GACV,SACAc,SAAUrB,EAAWQ,GAAG,KACxBc,SAASrB,GACT,OACAoB,SAAUX,IACVY,SAASrB,GACT,QACG,CAEL,IAAIsB,EAASpB,EAAYU,GACrBW,GAASR,SAAQS,KAAKC,IAAI,EAAGH,EAAS,GAAIE,KAAKE,IAAIJ,EAAS,EAAG,GAAIA,GACnEA,EAASC,KACVD,EAAQC,GAAU,CAACA,EAAQD,IAE9B,MAAMK,EAAQJ,EAASD,GACnBP,SAAQ,EAAG,GAAK,GAClBN,GAAWS,SAAOZ,EAAIkB,KAAKI,IAAI,GAAID,IACnCjB,EACE,MACAU,SAAUd,IACVe,SAASpB,EAAWsB,IACpB,iBACAF,SAASpB,EAAWqB,IACpB,IACFX,EACE,MACAS,SAAUd,IACVe,SAASpB,EAAWsB,IACpB,QACAH,SAAUd,GACV,WACAc,SAAUI,KAAKI,IAAI,GAAID,KACvBN,SAASpB,EAAWqB,IACpB,OACAF,SAAUX,IACVY,SAASpB,EAAWqB,IACpB,MAEFb,GAAWS,SAAOZ,EAAIkB,KAAKI,IAAI,GAAID,IACnCjB,EACE,MACAU,SAAUd,IACVe,SAASpB,EAAWqB,IACpB,iBACAD,SAASpB,EAAWsB,IACpB,IACFZ,EACE,MACAS,SAAUd,IACVe,SAASpB,EAAWqB,IACpB,QACAF,SAAUd,GACV,SACAc,SAAUI,KAAKI,IAAI,GAAID,KACvBN,SAASpB,EAAWsB,IACpB,OACAH,SAAUX,IACVY,SAASpB,EAAWsB,IACpB,MAIsC,IAAxCpC,KAAKS,eAAeiC,QAAQnB,KAE1BoB,mBACFpB,EAAQA,EAAMqB,QAAQ,cAAe,iBAEnCD,cACFpB,EAAQA,EAAMqB,QACZ,YACA,qDAGJ5C,KAAKS,eAAeoC,KAAKtB,GACzBvB,KAAKU,iBAAiBmC,KAAKrB,GAC3BC,KAEFC,KAEFoB,SAAwB9C,OAE1BA,KAAK+C,0BAA4B,CAAC,uBAAwB,EAAG,4HAC7D/C,KAAKgD,6BAA+B,CAAC,+B,6BCnNxB,SAAS5C,IAEtBJ,KAAKH,MAAQ,GACbG,KAAKM,SAAW,GAChBN,KAAKiD,mBAAqB,GAC1BjD,KAAKS,eAAiB,GACtBT,KAAKU,iBAAmB,GACxBV,KAAKkD,aAAe,GACpBlD,KAAKmD,QAAU,GACfnD,KAAKoD,kBAAoB,GACzBpD,KAAKE,YAAc,GACnBF,KAAKqD,OAAS,EACdrD,KAAKsD,WAAa,EAClBtD,KAAKO,QAAU,EACfP,KAAKuD,YAAc,EACnBvD,KAAKwD,QAAS,EAEdxD,KAAK+C,2BAA4B,EACjC/C,KAAKyD,uBAAwB,EAC7BzD,KAAK0D,6BAA8B,EACnC1D,KAAK2D,4BAA6B,EAClC3D,KAAK4D,wBAAyB,EAC9B5D,KAAKgD,8BAA+B,EACpChD,KAAK6D,4BAA6B,EAClC7D,KAAK8D,wBAAyB,EAC9B9D,KAAK+D,8BAA+B,EACpC/D,KAAKgE,oBAAqB,EAC1BhE,KAAKiE,uBAAwB,EAC7BjE,KAAKkE,kBAAmB,EACxBlE,KAAKmE,sBAAuB,EAC5BnE,KAAKoE,mBAAoB,EACzBpE,KAAKqE,uBAAwB,EAC7BrE,KAAKsE,+BAAgC,EACrCtE,KAAKuE,qBAAsB,EAC3BvE,KAAKwE,MAAQ,GACbxE,KAAKyE,YAAa,EAClBzE,KAAK0E,gBAAkB,GAMvB1E,KAAK2E,mBAAoB,EACzB3E,KAAK4E,YAAa,EAClB5E,KAAK6E,uBAAwB,EAC7B7E,KAAK8E,KAAM,EACX9E,KAAK+E,eAAgB,EACrB/E,KAAKgF,SAAU,EACfhF,KAAKiF,eAAiB,GACtBjF,KAAKkF,sBAAwB,GAC7BlF,KAAKmF,cAAe,EACpBnF,KAAKQ,gBAAkB,SAAU4E,KACjCpF,KAAKqF,cAAgB,G","file":"js/45063.c9f05f769bd3c7a00a84.js","sourcesContent":["import ExerciceConversionsLongueurs from './_ExerciceConversionsLongueurs.js'\nexport const titre = 'Conversions de longueurs'\n\n/** */\n// Référence 6M12\nexport default function Reglages6M12 () {\n  ExerciceConversionsLongueurs.call(this)\n  this.titre = titre\n  this.sup = 3\n  this.nbQuestions = 8\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, arrondi, texNombre, texTexte, calcul } from '../../modules/outils.js'\n\n/**\n * Conversions de longueur en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * * 1 : De dam, hm, km vers m\n * * 2 : De dm, cm, mm vers m\n * * 3 : Conversions en mètres\n * * 4 : Toutes les conversions de longueurs\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n */\nexport default function ExerciceConversionsLongueurs (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.titre = 'Conversions de longueurs'\n  this.consigne = 'Compléter'\n  this.spacing = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const prefixeMulti = [\n      [' da', 10],\n      [' h', 100],\n      [' k', 1000]\n    ]\n    const prefixeDiv = [\n      [' d', 10],\n      [' c', 100],\n      [' m', 1000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    const listeUnite1 = combinaisonListes([0, 1, 2, 3, 4, 5, 6], this.nbQuestions)\n    const listek = combinaisonListes([0, 1, 2], this.nbQuestions)\n    const listeDeDecimaux = combinaisonListes(['entier', 'XX,X', '0,X', '0,0X', 'X,XX'], this.nbQuestions)\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let typesDeQuestions\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 4)\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = listek[i] // Plutôt que de prendre un préfix au hasard, on alterne entre 10,100 et 1000\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        switch (listeDeDecimaux[i]) {\n          case 'entier':\n            a = randint(1, 99)\n            break\n          case 'XX,X':\n            a = arrondi(randint(1, 19) + randint(1, 9) / 10, 1)\n            break\n          case '0,X':\n            a = arrondi(randint(1, 9) / 10, 1)\n            break\n          case '0,0X':\n            a = arrondi(randint(1, 9) / 100, 2)\n            break\n          case 'X,XX':\n            a = arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        }\n        // entier ou\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        resultat = calcul(a * prefixeMulti[k][1]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '$'\n\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          texNombre(prefixeMulti[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        resultat = calcul(a / prefixeDiv[k][1]).toString() // Attention aux notations scientifiques pour 10e-8\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\div' +\n          texNombre(prefixeDiv[k][1]) +\n          texTexte(unite) +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '$'\n      } else {\n        // pour type de question = 4\n        let unite1 = listeUnite1[i]\n        let unite2 = randint(Math.max(0, unite1 - 3), Math.min(unite1 + 3, 6), unite1)\n        if (unite1 > unite2) {\n          [unite1, unite2] = [unite2, unite1]\n        }\n        const ecart = unite2 - unite1 // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite1]) +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\times' +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(listeUnite[unite1]) +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '$'\n        } else {\n          resultat = calcul(a / Math.pow(10, ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite2]) +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\div' +\n            texNombre(Math.pow(10, ecart)) +\n            texTexte(listeUnite[unite2]) +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '$'\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 4, '1 : De dam, hm, km vers m\\n 2 : De dm, cm, mm vers m\\n3 : Conversions en mètres\\n4 : Toutes les conversions de longueurs']\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}