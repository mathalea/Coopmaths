{"version":3,"file":"js/60932.6de2b52b510c9b0fdc2e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4G20-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Déterminer la racine carrée d’un carré parfait (calcul mental)'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\nexport const interactifType = 'numerique'\nexport const interactifReady = true\n\n/**\n * Déterminer la racine carrée d'un carré parfait compris entre 1 et 256\n * @author Stéphane Guyon et Guillaume Valmont\n * Référence 4G20-2\n * Mis à jour le 08/08/2021\n */\nexport default function RacineCareeDeCarresParfaits () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.nbQuestions = 4\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.besoinFormulaireNumerique = ['Formulation de la question', 3, '1 : Calculer la racine de ...\\n2 : Trouver le nombre positif dont le carré est ...\\n3 : Mélange']\n  this.besoinFormulaire2Numerique = ['Entier maximum', 2, '1 : 144\\n2 : 256']\n  this.sup = 1\n  this.sup2 = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let listeRacines = []\n    let listeQuestions = []\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    if (this.sup === 1) {\n      listeQuestions = [1]\n    } else if (this.sup === 2) {\n      listeQuestions = [2]\n    } else if (this.sup === 3) {\n      listeQuestions = [1, 2]\n    }\n    listeQuestions = combinaisonListes(listeQuestions, this.nbQuestions) // pour varier les questions\n    if (this.sup2 === 1) {\n      listeRacines = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    } else {\n      listeRacines = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    }\n    listeRacines = combinaisonListes(listeRacines, this.nbQuestions) // pour avoir une meilleure randomisation que randint\n    for (let i = 0, texte, texteCorr, a, c, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      a = listeRacines[i]\n      c = a * a\n      if (listeQuestions[i] === 1) {\n        texte = `Calculer de tête $\\\\sqrt{${c}}=$` + ajouteChampTexte(this, i)\n      } else if (listeQuestions[i] === 2) {\n        texte = `Quel est le nombre positif dont le carré est $${c}$ ?` + ajouteChampTexte(this, i)\n      }\n      texteCorr = `$\\\\sqrt{${c}}=${a}$`\n      setReponse(this, i, a)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        if (context.isAmc) {\n          if (listeQuestions[i] === 1) {\n            this.autoCorrection[i].enonce = `$\\\\sqrt{${c}}=\\\\dots$`\n            this.autoCorrection[i].propositions = [{ texte: `$\\\\sqrt{${c}}=${a}$`, statut: '' }]\n          } else {\n            this.autoCorrection[i].enonce = `$${c} = \\\\dots^2$`\n            this.autoCorrection[i].propositions = [{ texte: `$${c}=${a}^2$`, statut: '' }]\n          }\n          this.autoCorrection[i].reponse.param = { digits: 2, decimals: 0, exposantNbChiffres: 0, exposantSigne: false, signe: false }\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifType","interactifReady","RacineCareeDeCarresParfaits","Exercice","this","nbQuestions","nbCols","nbColsCorr","besoinFormulaireNumerique","besoinFormulaire2Numerique","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeRacines","parseInt","combinaisonListes","texte","texteCorr","a","c","i","cpt","ajouteChampTexte","setReponse","indexOf","context","enonce","propositions","statut","reponse","param","digits","decimals","exposantNbChiffres","exposantSigne","signe","push","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}