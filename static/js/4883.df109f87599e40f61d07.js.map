{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3G32-4.js"],"names":["titre","Calculs_trigonometriques4","Exercice","this","consigne","nbCols","nbColsCorr","sup","tailleDiaporama","video","nbQuestions","spacingCorr","spacing","nouvelleVersion","listeQuestions","listeCorrections","distance","alfa","baita","beta","alpha","taille","A","B","H","S","C","p","objets","context","texte","texteCorr","j","i","cpt","randint","Math","round","sin","PI","point","pointAdistance","projectionOrtho","droite","polygoneAvecNom","push","segment","codageAngleDroit","afficheMesureAngle","texteSurSegment","texNombre","texteParPosition","milieu","x","y","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","numAlpha","indexOf","listeQuestionsToContenu","besoinFormulaireCaseACocher"],"mappings":"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","file":"js/4883.df109f87599e40f61d07.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, numAlpha,arrondi, calcul, texNombre, texNombrec, arrondiVirgule } from '../../modules/outils.js'\nimport { texteSurSegment, tracePoint,labelPoint,projectionOrtho, pointAdistance,droite, polygoneAvecNom, afficheMesureAngle, codageAngleDroit, point, segment, texteParPosition, milieu, mathalea2d } from '../../modules/2d.js';\nimport {point3d,vecteur3d,sphere3d,arete3d,rotationV3d,demicercle3d,homothetie3d} from '../../modules/3d.js'\nexport const titre = 'Calculer la hauteur d’une montagne'\n\n/**\n * Propose de calculer la hauteur d'une montagne à partir de deux relevés d'angle \n * @author Jean-Claude Lhote\n * Référence 3G32-4\n*/\nexport default function Calculs_trigonometriques4() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"\";\n  this.nbCols = 1; // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1; // Uniquement pour la sortie LaTeX\n  this.sup = true;\n  this.tailleDiaporama = 100; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = \"\" // Id YouTube ou url\n  this.nbQuestions = 1\n  this.spacingCorr=2\n  this.spacing=2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let distance, hauteur,alfa,baita, beta, alpha, teta, taille, index, A, B, O, H, S, C,M,R,R2,Axe,normalV,normalH,P,HP,Sph,OP,PoleNord,PoleSud, objets = [], p\n    let typesDeQuestionsDisponibles\n    if (context.isHtml) {\n      alfa='α'\n      baita='β'\n    }\n    else {\n      alfa='\\\\alpha'\n      baita='\\\\beta'\n    }\n  \n    for (let i = 0, texte, texteCorr,j, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n        objets=[]\n          alpha = randint(25, 45)\n          j=0\n          beta = alpha+randint(1,3)\n          taille = randint(20,50)*100\n          distance = Math.round(taille*Math.sin((beta-alpha)*Math.PI/180)/Math.sin(alpha*Math.PI/180)/Math.sin(beta*Math.PI/180))\n          taille=Math.round(distance*Math.sin(alpha*Math.PI/180)*Math.sin(beta*Math.PI/180)/Math.sin((beta-alpha)*Math.PI/180))\n          A = point(0, 0, 'A')\n          B = pointAdistance(A, 5, 0, 'B')\n          H = pointAdistance(A, 12, 0, 'H')\n          S = pointAdistance(H, 7, 90, 'S')\n          C = projectionOrtho(B, droite(A, S), 'C')\n          p = polygoneAvecNom(A, B, H, S, C)\n          objets.push(p[1], p[0], segment(C, B), segment(S, B), codageAngleDroit(A, H, S),codageAngleDroit(B,C,S))\n          objets.push(afficheMesureAngle(H, A, S, 'black', 2, `${alfa}`), afficheMesureAngle(H, B, S, 'black', 2, `${baita}`))\n         \n          objets.push(texteSurSegment(`${texNombre(distance)} m`, A, B, 'black', -0.5), texteParPosition(`h`, milieu(H, S).x + 0.5, milieu(H, S).y, 0, 'black', 2, \"middle\", true))\n\n          texte = `Un voyageur approche d'une montagne. Il aimerait en calculer la hauteur.<br>`;\n          texte += `Pour cela, il utilise un théodolite en un point $A$ qui lui permet de mesurer l'angle $${alfa}$ vertical formé par le sommet $S$ de la montagne, le point $A$ et la base de la montagne $H$.<br>`\n          texte += `Il parcourt ensuite $${distance}$ m en direction de la montagne et effectue une nouvelle mesure de l'angle $${baita}$ en un point $B$.<br>`\n          texte += `Le schéma ci-dessous n'est pas en vraie grandeur.<br>On donne : $${alfa}=${alpha}\\\\degree$, $${baita}=${beta}\\\\degree$ et $AB=${distance}$ m.<br>` + mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets)+'<br>';\n\n          if (this.sup) {\n            texte += `${numAlpha(j)}Exprimer la mesure de l'angle $\\\\widehat{BSH}$ en fonction de $${baita}$.<br>`\n            texte += `${numAlpha(j+1)}Exprimer la mesure de l'angle $\\\\widehat{ASH}$ en fonction de $${alfa}$.<br>`\n            j+=2\n          }\n          texte+=`${numAlpha(j)}Montrer que $\\\\widehat{BSC}=${baita}-${alfa}$.<br>`\n          j++\n          if (this.sup) {\n            texte+=`${numAlpha(j)}Dans le triangle $BCS$ exprimer $BS$ en fonction de $BC$.<br>`\n          }\n          else {\n            texte+=`${numAlpha(j)}Exprimer $BS$ en fonction de $BC$.<br>`\n          }\n          j++\n          if (this.sup) {\n            texte+=`${numAlpha(j)}Dans le triangle $ABC$, exprimer $BC$ en fonction de $AB$.<br>`\n          }\n          else {\n            texte+=`${numAlpha(j)}Exprimer $BC$ en fonction de $AB$.<br>`\n          }\n          j++\n          if (this.sup){\n            texte+=`${numAlpha(j)}En déduire $h$ en fonction de $BS$ puis en fonction de $BC$ enfin en fonction de $AB$.<br>`\n          }\n          else {\n            texte+=`${numAlpha(j)}En déduire $h$ en fonction de $AB$.<br>`\n          }\n          j++\n          texte += `${numAlpha(j)}Quelle est la hauteur de la montagne (arrondir au mètre près) ?<br>`\n          texte += `On supposera le point d'observation au niveau du sol.`\n          j=0\n          texteCorr = mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets)+'<br>'\n          if (this.sup) {\n            texteCorr += `${numAlpha(j)}Dans le triangle $BHS$ rectangle en $H$, les angles aigus sont complémentaires donc $\\\\widehat{BSH}=90-${baita}$.<br>`\n            texteCorr += `${numAlpha(j+1)}Dans le triangle $AHS$ rectangle en $H$, pour la même raison $\\\\widehat{ASH}=90-${alfa}$.<br>`\n            j+=2\n          }\n          texteCorr+=`${numAlpha(j)}On sait que $\\\\widehat{BSH}=90-${baita}$ et $\\\\widehat{ASH}=90-${alfa}$.<br>Donc $\\\\widehat{BSC}=\\\\widehat{ASH}-\\\\widehat{BSH}=90-${alfa}-(90-${baita})=\\\\cancel{90}-${alfa}-\\\\cancel{90}+${baita}=${baita}-${alfa}$.<br>`\n          j++\n            texteCorr+=`${numAlpha(j)}Dans le triangle $BCS$ rectangle en $C$, $\\\\sin(\\\\widehat{BSC})=\\\\dfrac{BC}{BS}$ d'où $BS=\\\\dfrac{BC}{\\\\sin(\\\\widehat{BSC})}=\\\\dfrac{BC}{\\\\sin(${baita}-${alfa})}$.<br>`\n          j++\n            texteCorr+=`${numAlpha(j)}Dans le triangle $ABC$ rectangle en $C$, $\\\\sin(\\\\widehat{BAC})=\\\\dfrac{BC}{AB}$ d'où $BC=AB\\\\times \\\\sin(\\\\widehat{BAC})=AB\\\\times \\\\sin(${alfa})$.<br>`\n          j++\n\n            texteCorr+=`${numAlpha(j)}Dans le triangle $BHS$ rectangle en $H$, $h=BS\\\\times \\\\sin(${baita})=\\\\dfrac{BC}{\\\\sin(${baita}-${alfa})}\\\\times \\\\sin(${baita})=\\\\dfrac{AB\\\\times \\\\sin(${alfa})}{\\\\sin(${baita}-${alfa})}\\\\times \\\\sin(${baita})$<br>`\n\n          j++\n          texteCorr += `${numAlpha(j)}Application numérique : $h=\\\\dfrac{${distance}\\\\times \\\\sin(${alpha})}{\\\\sin(${beta}-${alpha})}\\\\times \\\\sin(${beta})$`\n          texteCorr  +=`$=\\\\dfrac{${distance}\\\\times \\\\sin(${alpha})\\\\times \\\\sin(${beta})}{\\\\sin(${beta-alpha})}\\\\approx ${Math.round(taille)}$ m.<br>`\n  \n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireCaseACocher = ['Afficher un schéma et des questions intermédiaires'];\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n\n"],"sourceRoot":""}