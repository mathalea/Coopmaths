{"version":3,"file":"js/44802.e51f6e320b264847f3b8.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/PE/PEA11-1.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, valeurBase, texNombre, nombreAvecEspace, miseEnEvidence } from '../../modules/outils.js'\nexport const titre = 'Passer de la base 12 ou 16 à la base 10 et inversement'\n\n/**\n* Passer d'une écriture en base 10 à l'écriture dans une autre base ou inversement\n* référence PEA11-1\n* * Convertir en base 10\n* * Convertir vers une base entre 2 et 7\n* * Trouver le plus grand nombre à 3 ou 4 chiffres d'une base ainsi que son successeur et le convertir en base 10 ou le plus petit et son prédecesseur\n*\n* @author Rémi Angot\n*/\nexport default function PasserDeLaBase12Ou16ALaBase10 () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const typesDeQuestionsDisponibles = ['vers_base_10', 'vers_base_n_3_chiffres']\n    if (this.nbQuestions === 3) {\n      typesDeQuestionsDisponibles.push(choice(['vers_base_n_4_chiffres', 'plus_grand_4_chiffres', 'plus_petit_4_chiffres', 'plus_petit_3_chiffres']))\n    }\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const b = choice([12, 16])\n    if (b === 12) {\n      this.introduction = 'Les symboles que l’on utilise en base 12 sont les dix chiffres habituels, la lettre A pour désigner 10 unités et la lettre B pour désigner 11 unités.'\n    } else {\n      this.introduction = 'Les symboles que l’on utilise en base 16 sont les dix chiffres habituels, la lettre A pour désigner 10 unités, B pour 11 unités, C pour 12 unités, D pour 13 unités, '\n      this.introduction += 'E pour 14 unités et F pour 15 unités.'\n    }\n    for (let i = 0, texte, texteCorr, n, m, chiffre1, chiffre2, chiffre3, chiffre4, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 'vers_base_10':\n          if (b === 12) {\n            n = choice([choice(['A', 'B']) + randint(0, 9), randint(1, 9) + choice(['A', 'B']), choice(['A', 'B']) + choice(['A', 'B'])])\n            m = choice(['A', 'B', randint(1, 9)]) + choice(['A', 'B', randint(0, 9)]) + choice(['A', 'B', randint(0, 9)]) + choice(['A', 'B', randint(0, 9)])\n          }\n          if (b === 16) {\n            n = choice(['A', 'B', 'C', 'D', 'E', 'F', randint(1, 9).toString()]) + choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            m = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) + choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) + choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n          }\n          texte = `Les nombre $(${n})_{${b}}$ et $(${m})_{${b}}$ sont écrits en base ${b}. Donner leur écriture en base 10.`\n          texteCorr = `$(${n})_{${b}}=${valeurBase(n.toString()[0])}\\\\times${b}+${valeurBase(n.toString()[1])}=${texNombre(parseInt(n, b))}$`\n          if (b === 12) { // m est un nombre à 4 chiffres\n            texteCorr += `<br>$(${m})_{${b}}=${valeurBase(m.toString()[0])}\\\\times${b}^3+${valeurBase(m.toString()[1])}\\\\times${b}^2+${valeurBase(m.toString()[2])}\\\\times${b}+${valeurBase(m.toString()[3])}=${texNombre(parseInt(m, b))}$`\n          } else { // m est un nombre à 3 chiffres\n            texteCorr += `<br>$(${m})_{${b}}=${valeurBase(m.toString()[0])}\\\\times${b}^2+${valeurBase(m.toString()[1])}\\\\times${b}+${valeurBase(m.toString()[2])}=${texNombre(parseInt(m, b))}$`\n          }\n          break\n        case 'vers_base_n_3_chiffres':\n          if (b === 12) {\n            chiffre1 = choice(['A', 'B', randint(1, 9).toString()])\n            chiffre2 = choice(['A', 'B', randint(0, 9).toString()])\n            chiffre3 = choice(['A', 'B', randint(1, 9).toString()])\n          } else {\n            chiffre1 = choice(['A', 'B', 'C', 'D', 'E', 'F', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            chiffre2 = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            chiffre3 = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n          }\n          n = valeurBase(chiffre1) * b ** 2 + valeurBase(chiffre2) * b + valeurBase(chiffre3)\n          texte = `Écrire en base ${b} le nombre ${nombreAvecEspace(n)}.`\n          texteCorr = `$${texNombre(n)}=${b}\\\\times${Math.floor(n / b)}+${miseEnEvidence(n % b)}$`\n          texteCorr += `<br>$${Math.floor(n / b)}=${b}\\\\times${miseEnEvidence(valeurBase(chiffre1))}+${miseEnEvidence(valeurBase(chiffre2))}$`\n          texteCorr += `<br> Finalement $${texNombre(n)}=(${chiffre1}${chiffre2}${chiffre3})_{${b}}$`\n          break\n        case 'vers_base_n_4_chiffres':\n          if (b === 12) {\n            chiffre1 = choice(['A', 'B', randint(1, 9).toString()])\n            chiffre2 = choice(['A', 'B', randint(0, 9).toString()])\n            chiffre3 = choice(['A', 'B', randint(1, 9).toString()])\n            chiffre4 = choice(['A', 'B', randint(1, 9).toString()])\n          } else {\n            chiffre1 = choice(['A', 'B', 'C', 'D', 'E', 'F', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            chiffre2 = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            chiffre3 = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n            chiffre4 = choice(['A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n          }\n          n = valeurBase(chiffre1) * b ** 3 + valeurBase(chiffre2) * b ** 2 + valeurBase(chiffre3) * b + valeurBase(chiffre4)\n          texte = `Écrire en base ${b} le nombre ${nombreAvecEspace(n)}.`\n          texteCorr = `$${texNombre(n)}=${b}\\\\times${Math.floor(n / b)}+${miseEnEvidence(n % b)}$`\n          texteCorr += `<br>$${texNombre(Math.floor(n / b))}=${b}\\\\times${Math.floor(Math.floor(n / b) / b)}+${miseEnEvidence(Math.floor(n / b) % b)}$`\n          texteCorr += `<br>$${texNombre(Math.floor(Math.floor(n / b) / b))}=${b}\\\\times${miseEnEvidence(valeurBase(chiffre1))}+${miseEnEvidence(valeurBase(chiffre2))}$`\n          texteCorr += `<br> Finalement $${texNombre(n)}=(${chiffre1}${chiffre2}${chiffre3}${chiffre4})_{${b}}$`\n          break\n        case 'plus_grand_4_chiffres':\n          texte = `Quel est le plus grand nombre à 4 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son successeur immédiat en base ${b} ? En déduire l'écriture en base 10 de ces 2 nombres.`\n          if (b === 12) {\n            texteCorr = `En base ${b} le plus grand chiffre est $B$`\n            texteCorr += ` donc le plus grand nombre à 4 chiffres est $(BBBB)_{${b}}$ et son successeur immédiat est $(10000)_{${b}}$.`\n            texteCorr += `<br> $(10000)_{${b}}=1\\\\times${b}^4=${texNombre(b ** 4)}$ donc $(BBBB)_{${b}}=${b ** 4}-1=${texNombre(b ** 4 - 1)}$.`\n          } else {\n            texteCorr = `En base ${b} le plus grand chiffre est $F$`\n            texteCorr += ` donc le plus grand nombre à 4 chiffres est $(FFFF)_{${b}}$ et son successeur immédiat est $(10000)_{${b}}$.`\n            texteCorr += `<br> $(10000)_{${b}}=1\\\\times${b}^4=${texNombre(b ** 4)}$ donc $(FFFF)_{${b}}=${b ** 4}-1=${texNombre(b ** 4 - 1)}$.`\n          }\n          break\n        case 'plus_grand_3_chiffres':\n          texte = `Quel est le plus grand nombre à 3 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son successeur immédiat en base ${b} ? En déduire l'écriture en base 10 de ces 2 nombres.`\n          if (b === 12) {\n            texteCorr = `En base ${b} le plus grand chiffre est $B$`\n            texteCorr += ` donc le plus grand nombre à 3 chiffres est $(BBB)_{${b}}$ et son successeur immédiat est $(1000)_{${b}}$.`\n            texteCorr += `<br> $(1000)_{${b}}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(BBB)_{${b}}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          } else {\n            texteCorr = `En base ${b} le plus grand chiffre est $F$`\n            texteCorr += ` donc le plus grand nombre à 3 chiffres est $(FFF)_{${b}}$ et son successeur immédiat est $(1000)_{${b}}$.`\n            texteCorr += `<br> $(1000)_{${b}}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(FFF)_{${b}}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          }\n          break\n        case 'plus_petit_4_chiffres':\n          texte = `Quel est le plus petit nombre à 4 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son prédécesseur immédiat en base ${b} ? En déduire l'écriture en base 10 de ces 2 nombres.`\n          if (b === 12) {\n            texteCorr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $B$`\n            texteCorr += ` donc le plus petit nombre à 4 chiffres est $(1000)_{${b}}$ et son prédécesseur immédiat est $(BBB)_{${b}}$.`\n            texteCorr += `<br> $(1000)_{${b}}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(BBB)_{${b}}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          } else {\n            texteCorr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $F$`\n            texteCorr += ` donc le plus petit nombre à 4 chiffres est $(1000)_{${b}}$ et son prédécesseur immédiat est $(FFF)_{${b}}$.`\n            texteCorr += `<br> $(1000)_{${b}}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(FFF)_{${b}}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          }\n          break\n        case 'plus_petit_3_chiffres':\n          texte = `Quel est le plus petit nombre à 3 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son prédécesseur immédiat en base ${b} ? En déduire l'écriture en base 10 de ces 2 nombres.`\n          if (b === 12) {\n            texteCorr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $B$`\n            texteCorr += ` donc le plus petit nombre à 3 chiffres est $(100)_{${b}}$ et son prédécesseur immédiat est $(BB)_{${b}}$.`\n            texteCorr += `<br> $(100)_{${b}}=1\\\\times${b}^2=${texNombre(b ** 2)}$ donc $(BB)_{${b}}=${b ** 2}-1=${texNombre(b ** 2 - 1)}$.`\n          } else {\n            texteCorr = `En base ${b} le plus petit chiffre est $0$ et le plus grand chiffre est $F$`\n            texteCorr += ` donc le plus petit nombre à 3 chiffres est $(100)_{${b}}$ et son prédécesseur immédiat est $(FF)_{${b}}$.`\n            texteCorr += `<br> $(100)_{${b}}=1\\\\times${b}^2=${texNombre(b ** 2)}$ donc $(FF)_{${b}}=${b ** 2}-1=${texNombre(b ** 2 - 1)}$.`\n          }\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","PasserDeLaBase12Ou16ALaBase10","context","typesDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","b","texte","texteCorr","n","m","chiffre1","chiffre2","chiffre3","chiffre4","cpt","randint","valeurBase","texNombre","parseInt","nombreAvecEspace","Math","floor","miseEnEvidence","listeQuestionsToContenu"],"sourceRoot":""}