{"version":3,"file":"js/30543.c98e5befdf31e5d1b0bb.js","mappings":"iMAIO,MAAMA,EAAQ,4BAON,SAASC,IActB,IAAIC,EAZJC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,SAAW,gDAChBD,KAAKE,IAAM,EACXF,KAAKG,MAAO,EACZH,KAAKJ,MAAQA,EACbI,KAAKI,OAAS,EACdJ,KAAKK,WAAa,EAClBL,KAAKM,uBAAwB,EAC7BN,KAAKO,OAAS,EAEdP,KAAKQ,cAAgB,SAIrBR,KAAKS,gBAAkB,SAAUC,GAC/BV,KAAKE,IAAMS,SAASX,KAAKE,KACL,IAAhBF,KAAKO,OACU,IAAbP,KAAKE,IACPF,KAAKY,YAAc,EAGnBZ,KAAKY,YAAc,EAEI,IAAhBZ,KAAKO,SAEdP,KAAKY,YAAc,GAGrB,IAAIC,EAAa,GAEbC,EAAAA,GAAAA,QACkB,IAAhBd,KAAKO,QACPM,GAAc,8HACdA,GAAc,OACdA,GAAc,kFACdA,GAAc,OACdA,GAAc,uFACdA,GAAc,OACdA,GAAc,wEACW,IAAhBb,KAAKO,SACdM,GAAc,8HACdA,GAAc,OACdA,GAAc,+FACdA,GAAc,OACdA,GAAc,qGACdA,GAAc,OACdA,GAAc,wEAOhBb,KAAKe,YAAaC,EAAAA,EAAAA,KAChBN,EAEA,wDACAG,EACA,OACA,iBAGkB,IAAhBb,KAAKO,OACPM,GAAaI,EAAAA,EAAAA,KACX,CACE,iIACA,qFACA,0FACA,2EAEF,GAEuB,IAAhBjB,KAAKO,SACdM,GAAaI,EAAAA,EAAAA,KACX,CACE,iIACA,kGACA,wGACA,2EAEF,IAIJjB,KAAKkB,cAAeC,EAAAA,EAAAA,KAAa,CAC/BvB,MAAO,uBACPwB,MAAOP,EACPQ,QAAS,aAIO,IAAhBrB,KAAKO,OACU,IAAbP,KAAKE,IACPJ,EAA6B,CAAC,EAAG,EAAG,EAAG,GACjB,IAAbE,KAAKE,MAEdJ,EAA6B,CAAC,EAAG,EAAG,EAAG,EAAG,IAEnB,IAAhBE,KAAKO,SAEdT,EAA6B,EAC3BwB,EAAAA,EAAAA,KAAO,CAAC,EAAG,KACXA,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,MACdA,EAAAA,EAAAA,KAAO,CAAC,EAAG,EAAG,KACd,GACAA,EAAAA,EAAAA,KAAO,CAAC,EAAG,MAGf,MAAMC,GAAuBC,EAAAA,EAAAA,KAC3B1B,EACAE,KAAKY,aAIPZ,KAAKyB,eAAiB,GACtBzB,KAAK0B,iBAAmB,GAExB,IAAK,IAAWN,EAAOO,EAAWC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAA7CC,EAAI,EAA6CC,EAAM,EAAGD,EAAIlC,KAAKY,aAAeuB,EAAM,IAAK,CAEpG,MAAMC,EAAc,EACdC,EAAc,GAEdC,EAAW,GACXC,EAAW,IAGXC,EAAqB,IAAIC,EAAAA,IACzBC,EAAkB,IAAID,EAAAA,IACtBE,EAAsB,IAAIF,EAAAA,IAC1BG,EAAoB,IAAIH,EAAAA,IACxBI,EAA2B,IAAIJ,EAAAA,IACrC,IAAIK,EAAiBC,EAAiBC,EAUtC,OATIhD,KAAKG,MACP2C,GAAkBG,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,IACzDH,GAAkBE,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,IACzDF,GAAkBC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAQ,EAAG,GAAK,IAAKA,EAAAA,EAAAA,KAAQ,EAAG,MAEzDJ,EAAkB,EAClBC,EAAkB,EAClBC,EAAkB,GAEZzB,EAAqBW,IAC3B,KAAK,EACH,MAAQM,EAAmBW,2BACzBvB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BR,GAAKqB,EAAAA,EAAAA,KAAQd,EAAaC,EAAaT,GACvCE,GAAKoB,EAAAA,EAAAA,KAAQd,EAAaC,EAAa,CAACT,EAAIC,IAC5CW,EAAmBZ,GAAKA,EAAKkB,EAC7BN,EAAmBX,GAAKA,EAAKkB,EAC7BP,EAAmBV,GAAKA,EAAKkB,EAG/B5B,EAAS,GAAEoB,EAAmBY,oCAAoCZ,EAAmBa,eAAe,UAASC,EAAAA,EAAAA,KAAUd,EAAmBZ,aAC1IR,GAAU,GAAEoB,EAAmBa,eAAe,UAASC,EAAAA,EAAAA,KAAUd,EAAmBX,cAAcW,EAAmBa,eAAe,UAASC,EAAAA,EAAAA,KAC3Id,EAAmBV,WACrBH,EAAa,2BAA0Ba,EAAmBY,iCAAiCZ,EAAmBY,uCAC9G,MACF,KAAK,EACH,MAAQZ,EAAmBe,wBACzBxB,GAAKmB,EAAAA,EAAAA,KAAQZ,EAAUC,GACvBP,GAAKkB,EAAAA,EAAAA,KAAQZ,EAAUC,EAAUR,GACjCE,GAAKiB,EAAAA,EAAAA,KAAQZ,EAAUC,EAAU,CAACR,EAAIC,IACtCQ,EAAmBT,GAAKA,EACxBS,EAAmBR,GAAKA,EACxBQ,EAAmBP,GAAKA,EAG1Bb,EAAS,GAAEoB,EAAmBY,oCAAoCZ,EAAmBgB,YAAY,SAAShB,EAAmBT,iBAC7HX,GAAU,IAAGoB,EAAmBgB,YAAY,SAAShB,EAAmBR,mBAAmBQ,EAAmBgB,YAAY,SAAShB,EAAmBP,gBACtJN,EAAa,4BAA2Ba,EAAmBY,iCAAiCZ,EAAmBY,uCAC/G,MAEF,KAAK,EACH,MAAQV,EAAgBS,2BACtBvB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BR,GAAKqB,EAAAA,EAAAA,KAAQd,EAAaC,EAAaT,GACvCc,EAAgBd,GAAKA,EAAKkB,EAC1BJ,EAAgBb,GAAKD,EAAKkB,EAC1BJ,EAAgBZ,GAAKD,EAAKkB,EAE5B3B,EAAS,GAAEsB,EAAgBU,oCAAoCV,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAAUZ,EAAgBd,aACjIR,GAAU,GAAEsB,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAAUZ,EAAgBb,cAAca,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAAUZ,EAAgBZ,WAC9JH,EAAa,2BAA0Be,EAAgBe,WAAW,SAASf,EAAgBe,WAAW,kBAAkBf,EAAgBU,qCAAoCE,EAAAA,EAAAA,KAAUZ,EAAgBd,gBAAgBc,EAAgBU,uCAAuCV,EAAgBgB,aAAa,MAC1S,MACF,KAAK,EACH,MAAQhB,EAAgBS,2BACtBvB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BR,GAAKqB,EAAAA,EAAAA,KAAQd,EAAaC,EAAaT,GACvCc,EAAgBd,GAAKA,EAAKkB,EAC1BJ,EAAgBb,GAAKD,EAAKkB,EAC1BJ,EAAgBZ,GAAKD,EAAKkB,EAE5B3B,EAAS,GAAEsB,EAAgBU,oCAAoCV,EAAgBW,eAAe,SAA8B,GAArBX,EAAgBd,YACvHR,GAAU,GAAEsB,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAAUZ,EAAgBb,cAAca,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAAUZ,EAAgBZ,WAC9JH,EAAa,GAAEe,EAAgBW,eAAe,UAASC,EAAAA,EAAAA,KAA+B,GAArBZ,EAAgBd,eAAmB0B,EAAAA,EAAAA,KAAUZ,EAAgBd,aAAac,EAAgBW,eAAe,OAAOX,EAAgBU,kEAAkEV,EAAgBgB,aAAa,MAChS,MACF,KAAK,EACH,MAAQf,EAAoBQ,2BAC1BvB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BM,EAAoBf,GAAKA,EAAKkB,EAC9BH,EAAoBd,GAAKD,EAAKkB,EAC9BH,EAAoBb,GAAKF,EAAKkB,EAEhC1B,EAAS,GAAEuB,EAAoBS,oCAAoCT,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBf,aAC7IR,GAAU,GAAEuB,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBd,cAAcc,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBb,WAC9KH,EAAa,4CAA2CgB,EAAoBS,2DAC5E,MACF,KAAK,EACH,MAAQT,EAAoBQ,2BAC1BvB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BM,EAAoBf,GAAKA,EAAKkB,EAC9BH,EAAoBd,GAAKD,EAAKkB,EAC9BH,EAAoBb,GAAKF,EAAKkB,EAEhC1B,EAAS,GAAEuB,EAAoBS,oCAAoCT,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBf,aAC7IR,GAAU,GAAEuB,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAmC,GAAzBX,EAAoBd,cAAmBc,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KACnJX,EAAoBb,GAAK,WAE3BH,EAAa,GAAEgB,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAmC,GAAzBX,EAAoBd,cAAmBc,EAAoBd,UAChIF,GAAc,QAAOgB,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBb,GAAK,eAAcwB,EAAAA,EAAAA,KAAUX,EAAoBb,WAChJH,GAAc,QAAOgB,EAAoBU,eAAe,UAASC,EAAAA,EAAAA,KAAUX,EAAoBf,WAC/FD,GAAc,iDAAgDgB,EAAoBS,2DAClF,MACF,KAAK,EACHxB,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BO,EAAkBhB,GAAKA,EAAKkB,EAC5BF,EAAkBf,IAAKqB,EAAAA,EAAAA,KAAQd,EAAaC,EAAaT,GAAMmB,EAC/DH,EAAkBb,GAAK,GAEvBX,EAAS,GAAEwB,EAAkBQ,oCAAoCR,EAAkBS,eAAe,UAASC,EAAAA,EAAAA,KAAUV,EAAkBhB,aACvIR,GAAU,GAAEwB,EAAkBS,eAAe,UAASC,EAAAA,EAAAA,KAAUV,EAAkBf,WAClFT,GAAS,MACW,IAAhBpB,KAAKO,QACPa,GAAU,4BAA2BwB,EAAkBc,aAAa,MACpE/B,EAAa,eAAciB,EAAkBQ,gCAAgCR,EAAkBc,aAAa,WAAWd,EAAkBQ,6BAA6BR,EAAkBc,aAAa,QAErMtC,GAAU,GAAEwB,EAAkBY,YAAY,SAASZ,EAAkBb,eACrEJ,EAAa,WAAUiB,EAAkBY,YAAY,kBAAkBZ,EAAkBQ,oCAAoCR,EAAkBQ,6BAA6BR,EAAkBc,aAAa,OAG7M,MACF,KAAK,EACH9B,GAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAC1BQ,EAAyBjB,GAAKA,EAAKkB,EACnCD,EAAyBhB,GAAKgB,EAAyBjB,GACvDiB,EAAyBd,GAAK,GAE9BX,EAAS,GAAEyB,EAAyBO,oCAAoCP,EAAyBQ,eAAe,SAAQC,EAAAA,EAAAA,KAAUT,EAAyBjB,aAC3JR,GAAU,GAAEyB,EAAyBQ,eAAe,UAASC,EAAAA,EAAAA,KAAUT,EAAyBhB,WAChGT,GAAS,MACW,IAAhBpB,KAAKO,QACPa,GAAU,2BAA0ByB,EAAyBa,aAAa,MAC1E/B,EAAa,eAAckB,EAAyBO,gCAAgCP,EAAyBa,aAAa,WAAWb,EAAyBO,6BAA6BP,EAAyBa,aAAa,MACjO/B,GAAc,QAAOkB,EAAyBQ,eAAe,UAAUR,EAAyBQ,eAAe,UAASC,EAAAA,EAAAA,KAAUT,EAAyBjB,gBAAgBiB,EAAyBO,2BAA2BP,EAAyBa,aAAa,MACrQ/B,GAAc,oBAAmBkB,EAAyBO,6CAA6CP,EAAyBa,aAAa,QAE7ItC,GAAU,GAAEyB,EAAyBW,YAAY,SAASX,EAAyBd,eACnFJ,EAAa,WAAUkB,EAAyBW,YAAY,kBAAkBX,EAAyBO,oCAAoCP,EAAyBO,6BAA6BP,EAAyBa,aAAa,MACvO/B,GAAc,QAAOkB,EAAyBQ,eAAe,UAAUR,EAAyBQ,eAAe,SAASR,EAAyBjB,eAAeiB,EAAyBO,2BAA2BP,EAAyBa,aAAa,MAC1P/B,GAAc,oBAAmBkB,EAAyBO,6CAA6CP,EAAyBa,aAAa,OAE/I,MACF,KAAK,EACHb,EAAyBjB,IAAKsB,EAAAA,EAAAA,KAAQd,EAAaC,GAAeS,EAClED,EAAyBhB,GAAKgB,EAAyBjB,GACvDiB,EAAyBd,GAAK,GAE9BX,EAAS,GAAEyB,EAAyBO,oCAAoCP,EAAyBQ,eAAe,UAASC,EAAAA,EAAAA,KAAwC,GAA9BT,EAAyBjB,aAC5JR,GAAU,GAAEyB,EAAyBQ,eAAe,UAASC,EAAAA,EAAAA,KAAUT,EAAyBhB,UAChGT,GAAS,OACW,IAAhBpB,KAAKO,QACPa,GAAU,2BAA0ByB,EAAyBa,aAAa,MAC1E/B,EAAa,eAAckB,EAAyBO,gCAAgCP,EAAyBa,aAAa,WAAWb,EAAyBO,6BAA6BP,EAAyBa,aAAa,MACjO/B,GAAc,QAAOkB,EAAyBQ,eAAe,SAAuC,GAA9BR,EAAyBjB,cAAkB0B,EAAAA,EAAAA,KAAUT,EAAyBjB,YAAYiB,EAAyBQ,eAAe,WAAWR,EAAyBO,2BAA2BP,EAAyBa,aAAa,MAC7S/B,GAAc,oBAAmBkB,EAAyBO,6CAA6CP,EAAyBa,aAAa,QAE7ItC,GAAU,GAAEyB,EAAyBW,YAAY,SAASX,EAAyBd,eACnFJ,EAAa,WAAUkB,EAAyBW,YAAY,kBAAkBX,EAAyBO,oCAAoCP,EAAyBO,6BAA6BP,EAAyBa,aAAa,MACvO/B,GAAc,QAAOkB,EAAyBQ,eAAe,UAASC,EAAAA,EAAAA,KAAwC,GAA9BT,EAAyBjB,eAAmB0B,EAAAA,EAAAA,KAAUT,EAAyBjB,YAAYiB,EAAyBQ,eAAe,WAAWR,EAAyBO,2BAA2BP,EAAyBa,aAAa,MACxT/B,GAAc,oBAAmBkB,EAAyBO,6CAA6CP,EAAyBa,aAAa,OAE/I,MACF,KAAK,GAEH,IADAzB,GAAM,EACCA,EAAK,GACVS,EAAgBX,IAAKmB,EAAAA,EAAAA,KAAQZ,EAAUC,GACvCG,EAAgBV,GAAKU,EAAgBX,GACrCE,EAAK,IAAM,EAAIS,EAAgBX,GAC/BW,EAAgBT,GAAKA,EAEvBb,EAAS,GAAEsB,EAAgBU,oCAAoCV,EAAgBc,YAAY,SAASd,EAAgBX,iBACpHX,GAAU,IAAGsB,EAAgBc,YAAY,SAASd,EAAgBV,mBAAmBU,EAAgBc,YAAY,SAASd,EAAgBT,gBAC1IN,EAAa,eAAce,EAAgBU,iCAAiCV,EAAgBc,YAAY,QAAQd,EAAgBc,YAAY,SAASd,EAAgBX,oBAAoBW,EAAgBU,uCAAuCV,EAAgBgB,aAAa,MAC7Q,MACF,KAAK,GACHf,EAAoBZ,GAAK,GACzBY,EAAoBX,GAAK,GACzBW,EAAoBV,GAAK,GAEzBb,EAAS,GAAEuB,EAAoBS,oCAAoCT,EAAoBa,YAAY,SAASb,EAAoBZ,iBAChIX,GAAU,IAAGuB,EAAoBa,YAAY,SAASb,EAAoBX,mBAAmBW,EAAoBa,YAAY,SAASb,EAAoBV,eAC1JN,EAAa,eAAcgB,EAAoBS,kCAAkCT,EAAoBa,YAAY,QAAQb,EAAoBa,YAAY,QAAQb,EAAoBa,YAAY,SAASb,EAAoBZ,oBAAoBY,EAAoBS,yCAG9N,IAAxCpD,KAAKyB,eAAekC,QAAQvC,KAE9BpB,KAAKyB,eAAemC,KAAKxC,GACzBpB,KAAK0B,iBAAiBkC,KAAKjC,GAC3BO,KAEFC,KAEF0B,EAAAA,EAAAA,KAAwB7D,OAE1BA,KAAK8D,0BAA4B,CAAC,uBAAwB,EAAG,wEAC7D9D,KAAK+D,6BAA+B,CAAC,qBAAqB,K,yECvUrD,MAAMnE,EAAQ,4BAON,SAASoE,IACtBnE,EAAAA,QAAAA,KAA6BG,MAC7BA,KAAKJ,MAAQA,EACbI,KAAKO,OAAS,I,gBCLD,SAASR,IAItBC,KAAKJ,MAAQ,GACbI,KAAKe,YAAa,EAclBf,KAAKC,SAAW,GAChBD,KAAKiE,mBAAqB,GAC1BjE,KAAKkB,aAAe,GACpBlB,KAAKyB,eAAiB,GACtBzB,KAAK0B,iBAAmB,GACxB1B,KAAKkE,QAAU,GACflE,KAAKmE,kBAAoB,GACzBnE,KAAKoE,eAAiB,GACtBpE,KAAKqE,sBAAwB,GAK7BrE,KAAKsE,QAAU,EACftE,KAAKuE,YAAc,EAKnBvE,KAAKwE,mBAAoB,EACzBxE,KAAKQ,cAAgB,GACrBR,KAAKyE,oBAAqB,EAC1BzE,KAAKM,uBAAwB,EAC7BN,KAAKI,OAAS,EACdJ,KAAKK,WAAa,EAClBL,KAAK0E,kBAAmB,EACxB1E,KAAK2E,sBAAuB,EAC5B3E,KAAK4E,mBAAoB,EACzB5E,KAAK6E,uBAAwB,EAM7B7E,KAAK8E,QAAS,EACd9E,KAAK+E,gBAAkB,GAKvB/E,KAAKY,YAAc,GACnBZ,KAAKgF,+BAAgC,EACrChF,KAAKiF,qBAAsB,EAC3BjF,KAAKkF,MAAQ,GAEblF,KAAKmF,YAAa,EAClBnF,KAAKoF,uBAAwB,EAE7BpF,KAAK8D,2BAA4B,EACjC9D,KAAKqF,uBAAwB,EAC7BrF,KAAKsF,6BAA8B,EAEnCtF,KAAKuF,4BAA6B,EAClCvF,KAAKwF,wBAAyB,EAC9BxF,KAAK+D,8BAA+B,EAEpC/D,KAAKyF,4BAA6B,EAClCzF,KAAK0F,wBAAyB,EAC9B1F,KAAK2F,8BAA+B,EAMpC3F,KAAK4F,cAAe,EAMpB5F,KAAK6F,eAAiB,GAEtB7F,KAAKS,gBAAkB,SAAUC,KAQjCV,KAAK8F,oBAAsB,SAAU5D,KAAM6D,GAC/B,IAAN7D,IAASlC,KAAK6F,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAInG,KAAK6F,eAAelC,QAAQqC,IAAmB,KAGjDhG,KAAK6F,eAAejC,KAAKoC,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/5e/5G20-1.js","webpack://mathalea/./src/js/exercices/6e/6G20-2.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texEnumerateSansNumero, texNombre, modalTexteLong, lampeMessage, Triangles } from '../../modules/outils.js'\n\nexport const titre = 'Vocabulaire des triangles'\n\n/**\n * Vocabulaire des triangles\n * 6G20-2 ; 5G20-1\n * @author Sébastien Lozano\n */\nexport default function VocabulaireDesTriangles () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Donner la nature des triangles en justifiant.'\n  this.sup = 1\n  this.sup2 = false\n  this.titre = titre\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestionsModifiable = false\n  this.classe = 5\n\n  this.listePackages = 'bclogo'\n\n  let typeDeQuestionsDisponibles\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.sup = parseInt(this.sup)\n    if (this.classe === 6) {\n      if (this.sup === 1) {\n        this.nbQuestions = 4\n      } else {\n        // this.nbQuestions = 9;\n        this.nbQuestions = 5\n      }\n    } else if (this.classe === 5) {\n      // this.nbQuestions = 11;\n      this.nbQuestions = 5\n    }\n\n    let texteIntro = ''\n    // eslint-disable-next-line no-undef\n    if (context.isHtml) {\n      if (this.classe === 6) {\n        texteIntro += '- Un <b>triangle quelconque</b> est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle isocèle</b> est un triangle qui a deux côtés de même longueur.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle équilatéral</b> est un triangle qui a trois côtés de même longueur.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.'\n      } else if (this.classe === 5) {\n        texteIntro += '- Un <b>triangle quelconque</b> est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle isocèle</b> est un triangle qui a deux côtés ou deux angles de même mesure.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle équilatéral</b> est un triangle qui a trois côtés ou trois angles de même mesure.'\n        texteIntro += '<br>'\n        texteIntro += '- Un <b>triangle rectangle</b> est un triangle qui a un angle droit.'\n      }\n      // this.introduction = lampeMessage({\n      // titre : `Quelques définitions`,\n      // texte : texte_intro,\n      // couleur : `nombres`\n      // });\n      this.boutonAide = modalTexteLong(\n        numeroExercice,\n        // `<i class=\"lightbulb outline icon\"></i> Quelques définitions`,\n        '<i class=\"info circle icon\"></i> Quelques définitions',\n        texteIntro,\n        'Aide',\n        'info circle'\n      )\n    } else {\n      if (this.classe === 6) {\n        texteIntro = texEnumerateSansNumero(\n          [\n            '- Un \\\\textbf{triangle quelconque} est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.',\n            '- Un \\\\textbf{triangle isocèle} est un triangle qui a deux côtés de même longueur.',\n            '- Un \\\\textbf{triangle équilatéral} est un triangle qui a trois côtés de même longueur.',\n            '- Un \\\\textbf{triangle rectangle} est un triangle qui a un angle droit.'\n          ],\n          1\n        )\n      } else if (this.classe === 5) {\n        texteIntro = texEnumerateSansNumero(\n          [\n            '- Un \\\\textbf{triangle quelconque} est un triangle qui ne présente aucune relation particulière entre ses angles ou ses côtés.',\n            '- Un \\\\textbf{triangle isocèle} est un triangle qui a deux côtés ou deux angles de même mesure.',\n            '- Un \\\\textbf{triangle équilatéral} est un triangle qui a trois côtés ou trois angles de même mesure.',\n            '- Un \\\\textbf{triangle rectangle} est un triangle qui a un angle droit.'\n          ],\n          1\n        )\n      }\n\n      this.introduction = lampeMessage({\n        titre: 'Quelques définitions',\n        texte: texteIntro,\n        couleur: 'nombres'\n      })\n    }\n\n    if (this.classe === 6) {\n      if (this.sup === 1) {\n        typeDeQuestionsDisponibles = [1, 3, 5, 7] // 6e facile isocèle, équilatéral et rectangle.\n      } else if (this.sup === 2) {\n        // typesDeQuestionsDisponibles = [1,3,4,5,6,7,8,9]; //6e tout sauf par les angles\n        typeDeQuestionsDisponibles = [1, 4, 6, 8, 9] // 6e les autres cas sauf par les angles\n      }\n    } else if (this.classe === 5) {\n      // typesDeQuestionsDisponibles = [1,2,3,4,5,6,7,8,9,10,11]; // 5e : on ajoute la caractéisation par les angles\n      typeDeQuestionsDisponibles = [\n        choice([1, 2]),\n        choice([3, 4, 10]),\n        choice([5, 6, 11]),\n        7,\n        choice([8, 9])\n      ] // 5e : tout sauf les basiques de 6e, on ajoute la caractéisation par les angles\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typeDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    // let listeTypeDeQuestions = typesDeQuestionsDisponibles // Tous les types de questions sont posées --> à remettre comme ci dessus\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    for (let i = 0, texte, texteCorr, l1, l2, l3, a1, a2, a3, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // on fixe longueur min et max en cm\n      const longueurMin = 2\n      const longueurMax = 20\n      // on fixe angle min et max en degré\n      const angleMin = 30\n      const angleMax = 100\n\n      // on crée les triangles\n      const triangleQuelconque = new Triangles()\n      const triangleIsocele = new Triangles()\n      const triangleEquilateral = new Triangles()\n      const triangleRectangle = new Triangles()\n      const triangleIsoceleRectangle = new Triangles()\n      let partieDecimale1, partieDecimale2, partieDecimale3\n      if (this.sup2) {\n        partieDecimale1 = calcul(randint(1, 9) / 10 * randint(0, 1))\n        partieDecimale2 = calcul(randint(1, 9) / 10 * randint(0, 1))\n        partieDecimale3 = calcul(randint(1, 9) / 10 * randint(0, 1))\n      } else {\n        partieDecimale1 = 0\n        partieDecimale2 = 0\n        partieDecimale3 = 0\n      }\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // triangle quelconque par les longueurs sans conversion\n          while (!triangleQuelconque.isTrueTriangleLongueurs()) {\n            l1 = randint(longueurMin, longueurMax)\n            l2 = randint(longueurMin, longueurMax, l1)\n            l3 = randint(longueurMin, longueurMax, [l1, l2])\n            triangleQuelconque.l1 = l1 + partieDecimale1\n            triangleQuelconque.l2 = l2 + partieDecimale2\n            triangleQuelconque.l3 = l3 + partieDecimale3\n          }\n\n          texte = `${triangleQuelconque.getNom()} est un triangle tel que ${triangleQuelconque.getLongueurs()[0]} $= ${texNombre(triangleQuelconque.l1)}$ cm ; `\n          texte += `${triangleQuelconque.getLongueurs()[1]} $= ${texNombre(triangleQuelconque.l2)}$ cm et ${triangleQuelconque.getLongueurs()[2]} $= ${texNombre(\n            triangleQuelconque.l3)}$ cm.`\n          texteCorr = `Les 3 côtés du triangle ${triangleQuelconque.getNom()} sont différents donc ${triangleQuelconque.getNom()} est un triangle quelconque.`\n          break\n        case 2: // triangle quelconque par les angles\n          while (!triangleQuelconque.isTrueTriangleAngles()) {\n            a1 = randint(angleMin, angleMax)\n            a2 = randint(angleMin, angleMax, a1)\n            a3 = randint(angleMin, angleMax, [a1, a2])\n            triangleQuelconque.a1 = a1\n            triangleQuelconque.a2 = a2\n            triangleQuelconque.a3 = a3\n          }\n\n          texte = `${triangleQuelconque.getNom()} est un triangle tel que ${triangleQuelconque.getAngles()[0]} $= ${triangleQuelconque.a1}\\\\degree$ ; `\n          texte += ` ${triangleQuelconque.getAngles()[1]} $= ${triangleQuelconque.a2}\\\\degree$ et  ${triangleQuelconque.getAngles()[2]} $= ${triangleQuelconque.a3}\\\\degree$ .`\n          texteCorr = `Les 3 angles du triangle ${triangleQuelconque.getNom()} sont différents donc ${triangleQuelconque.getNom()} est un triangle quelconque.`\n          break\n\n        case 3: // triangle isocèle sans conversion\n          while (!triangleIsocele.isTrueTriangleLongueurs()) {\n            l1 = randint(longueurMin, longueurMax)\n            l2 = randint(longueurMin, longueurMax, l1)\n            triangleIsocele.l1 = l1 + partieDecimale1\n            triangleIsocele.l2 = l1 + partieDecimale1\n            triangleIsocele.l3 = l2 + partieDecimale2\n          }\n          texte = `${triangleIsocele.getNom()} est un triangle tel que ${triangleIsocele.getLongueurs()[0]} $= ${texNombre(triangleIsocele.l1)}$ cm ; `\n          texte += `${triangleIsocele.getLongueurs()[1]} $= ${texNombre(triangleIsocele.l2)}$ cm et ${triangleIsocele.getLongueurs()[2]} $= ${texNombre(triangleIsocele.l3)}$ cm.`\n          texteCorr = `Les longueurs des côtés ${triangleIsocele.getCotes()[0]} et ${triangleIsocele.getCotes()[1]} du triangle ${triangleIsocele.getNom()} valent toutes les deux $${texNombre(triangleIsocele.l1)}$ cm donc ${triangleIsocele.getNom()} est un triangle isocèle en ${triangleIsocele.getSommets()[1]}.`\n          break\n        case 4: // triangle isocèle avec conversion\n          while (!triangleIsocele.isTrueTriangleLongueurs()) {\n            l1 = randint(longueurMin, longueurMax)\n            l2 = randint(longueurMin, longueurMax, l1)\n            triangleIsocele.l1 = l1 + partieDecimale1\n            triangleIsocele.l2 = l1 + partieDecimale1\n            triangleIsocele.l3 = l2 + partieDecimale2\n          }\n          texte = `${triangleIsocele.getNom()} est un triangle tel que ${triangleIsocele.getLongueurs()[0]} $= ${triangleIsocele.l1 * 10}$ mm ; `\n          texte += `${triangleIsocele.getLongueurs()[1]} $= ${texNombre(triangleIsocele.l2)}$ cm et ${triangleIsocele.getLongueurs()[2]} $= ${texNombre(triangleIsocele.l3)}$ cm.`\n          texteCorr = `${triangleIsocele.getLongueurs()[0]} $= ${texNombre(triangleIsocele.l1 * 10)}$ mm $= ${texNombre(triangleIsocele.l1)}$ cm = ${triangleIsocele.getLongueurs()[1]}, ${triangleIsocele.getNom()} a donc deux côtés égaux, c'est un triangle isocèle en ${triangleIsocele.getSommets()[1]}.`\n          break\n        case 5: // triangle équilatéral sans conversion\n          while (!triangleEquilateral.isTrueTriangleLongueurs()) {\n            l1 = randint(longueurMin, longueurMax)\n            triangleEquilateral.l1 = l1 + partieDecimale1\n            triangleEquilateral.l2 = l1 + partieDecimale1\n            triangleEquilateral.l3 = l1 + partieDecimale1\n          }\n          texte = `${triangleEquilateral.getNom()} est un triangle tel que ${triangleEquilateral.getLongueurs()[0]} $= ${texNombre(triangleEquilateral.l1)}$ cm ; `\n          texte += `${triangleEquilateral.getLongueurs()[1]} $= ${texNombre(triangleEquilateral.l2)}$ cm et ${triangleEquilateral.getLongueurs()[2]} $= ${texNombre(triangleEquilateral.l3)}$ cm.`\n          texteCorr = `Les longeurs des trois côtés du triangle ${triangleEquilateral.getNom()} sont égales donc c'est un triangle équilatéral.`\n          break\n        case 6: // triangle équilatéral avec conversion\n          while (!triangleEquilateral.isTrueTriangleLongueurs()) {\n            l1 = randint(longueurMin, longueurMax)\n            triangleEquilateral.l1 = l1 + partieDecimale1\n            triangleEquilateral.l2 = l1 + partieDecimale1\n            triangleEquilateral.l3 = l1 + partieDecimale1\n          }\n          texte = `${triangleEquilateral.getNom()} est un triangle tel que ${triangleEquilateral.getLongueurs()[0]} $= ${texNombre(triangleEquilateral.l1)}$ cm ; `\n          texte += `${triangleEquilateral.getLongueurs()[1]} $= ${texNombre(triangleEquilateral.l2 * 10)}$ mm et ${triangleEquilateral.getLongueurs()[2]} $= ${texNombre(\n            triangleEquilateral.l3 / 10\n          )}$ dm.`\n          texteCorr = `${triangleEquilateral.getLongueurs()[1]} $= ${texNombre(triangleEquilateral.l2 * 10)}$ mm $= ${triangleEquilateral.l2}$ cm.`\n          texteCorr += `<br> ${triangleEquilateral.getLongueurs()[2]} $= ${texNombre(triangleEquilateral.l3 / 10)}$ dm $= ${texNombre(triangleEquilateral.l3)}$ cm.`\n          texteCorr += `<br> ${triangleEquilateral.getLongueurs()[0]} $= ${texNombre(triangleEquilateral.l1)}$ cm.`\n          texteCorr += `<br> Les longeurs des trois côtés du triangle ${triangleEquilateral.getNom()} sont égales donc c'est un triangle équilatéral.`\n          break\n        case 7: // triangle rectangle pas de conversion necessaire\n          l1 = randint(longueurMin, longueurMax)\n          triangleRectangle.l1 = l1 + partieDecimale1\n          triangleRectangle.l2 = randint(longueurMin, longueurMax, l1) + partieDecimale2\n          triangleRectangle.a1 = 90\n\n          texte = `${triangleRectangle.getNom()} est un triangle tel que ${triangleRectangle.getLongueurs()[0]} $= ${texNombre(triangleRectangle.l1)}$ cm ; `\n          texte += `${triangleRectangle.getLongueurs()[1]} $= ${texNombre(triangleRectangle.l2)}$ cm `\n          texte += 'et '\n          if (this.classe === 6) {\n            texte += ` qui a un angle droit en ${triangleRectangle.getSommets()[1]}.`\n            texteCorr = `Le triangle ${triangleRectangle.getNom()} a un angle droit en ${triangleRectangle.getSommets()[1]} donc ${triangleRectangle.getNom()} est rectangle en ${triangleRectangle.getSommets()[1]}.`\n          } else {\n            texte += `${triangleRectangle.getAngles()[0]} $= ${triangleRectangle.a1}\\\\degree$.`\n            texteCorr = `L'angle ${triangleRectangle.getAngles()[0]} du triangle ${triangleRectangle.getNom()} est un angle droit donc ${triangleRectangle.getNom()} est rectangle en ${triangleRectangle.getSommets()[1]}.`\n          }\n\n          break\n        case 8: // triangle isocèle rectangle sans conversion\n          l1 = randint(longueurMin, longueurMax)\n          triangleIsoceleRectangle.l1 = l1 + partieDecimale1\n          triangleIsoceleRectangle.l2 = triangleIsoceleRectangle.l1\n          triangleIsoceleRectangle.a1 = 90\n\n          texte = `${triangleIsoceleRectangle.getNom()} est un triangle tel que ${triangleIsoceleRectangle.getLongueurs()[0]}$= ${texNombre(triangleIsoceleRectangle.l1)}$ cm ; `\n          texte += `${triangleIsoceleRectangle.getLongueurs()[1]} $= ${texNombre(triangleIsoceleRectangle.l2)}$ cm `\n          texte += 'et '\n          if (this.classe === 6) {\n            texte += `qui a un angle droit en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr = `Le triangle ${triangleIsoceleRectangle.getNom()} a un angle droit en ${triangleIsoceleRectangle.getSommets()[1]} donc ${triangleIsoceleRectangle.getNom()} est rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> ${triangleIsoceleRectangle.getLongueurs()[0]} $=$ ${triangleIsoceleRectangle.getLongueurs()[1]} $= ${texNombre(triangleIsoceleRectangle.l1)}$ cm donc ${triangleIsoceleRectangle.getNom()} est isocèle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> Le triangle ${triangleIsoceleRectangle.getNom()} est donc isocèle et rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n          } else {\n            texte += `${triangleIsoceleRectangle.getAngles()[0]} $= ${triangleIsoceleRectangle.a1}\\\\degree$.`\n            texteCorr = `L'angle ${triangleIsoceleRectangle.getAngles()[0]} du triangle ${triangleIsoceleRectangle.getNom()} est un angle droit donc ${triangleIsoceleRectangle.getNom()} est rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> ${triangleIsoceleRectangle.getLongueurs()[0]} $=$ ${triangleIsoceleRectangle.getLongueurs()[1]} $= ${triangleIsoceleRectangle.l1}$ cm donc ${triangleIsoceleRectangle.getNom()} est isocèle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> Le triangle ${triangleIsoceleRectangle.getNom()} est donc isocèle et rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n          }\n          break\n        case 9: // triangle isocèle rectangle avec conversion\n          triangleIsoceleRectangle.l1 = randint(longueurMin, longueurMax) + partieDecimale1\n          triangleIsoceleRectangle.l2 = triangleIsoceleRectangle.l1\n          triangleIsoceleRectangle.a1 = 90\n\n          texte = `${triangleIsoceleRectangle.getNom()} est un triangle tel que ${triangleIsoceleRectangle.getLongueurs()[0]} $= ${texNombre(triangleIsoceleRectangle.l1 * 10)}$ mm ; `\n          texte += `${triangleIsoceleRectangle.getLongueurs()[1]} $= ${texNombre(triangleIsoceleRectangle.l2)}$ cm`\n          texte += ' et '\n          if (this.classe === 6) {\n            texte += `qui a un angle droit en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr = `Le triangle ${triangleIsoceleRectangle.getNom()} a un angle droit en ${triangleIsoceleRectangle.getSommets()[1]} donc ${triangleIsoceleRectangle.getNom()} est rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> ${triangleIsoceleRectangle.getLongueurs()[0]} $= ${triangleIsoceleRectangle.l1 * 10}$ mm $= ${texNombre(triangleIsoceleRectangle.l1)}$ cm =${triangleIsoceleRectangle.getLongueurs()[1]} donc ${triangleIsoceleRectangle.getNom()} est isocèle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> Le triangle ${triangleIsoceleRectangle.getNom()} est donc isocèle et rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n          } else {\n            texte += `${triangleIsoceleRectangle.getAngles()[0]} $= ${triangleIsoceleRectangle.a1}\\\\degree$.`\n            texteCorr = `L'angle ${triangleIsoceleRectangle.getAngles()[0]} du triangle ${triangleIsoceleRectangle.getNom()} est un angle droit donc ${triangleIsoceleRectangle.getNom()} est rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> ${triangleIsoceleRectangle.getLongueurs()[0]} $= ${texNombre(triangleIsoceleRectangle.l1 * 10)}$ mm $= ${texNombre(triangleIsoceleRectangle.l1)}$ cm =${triangleIsoceleRectangle.getLongueurs()[1]} donc ${triangleIsoceleRectangle.getNom()} est isocèle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n            texteCorr += `<br> Le triangle ${triangleIsoceleRectangle.getNom()} est donc isocèle et rectangle en ${triangleIsoceleRectangle.getSommets()[1]}.`\n          }\n          break\n        case 10: // triangle isocèle par les angles\n          a3 = -1\n          while (a3 < 0) {\n            triangleIsocele.a1 = randint(angleMin, angleMax)\n            triangleIsocele.a2 = triangleIsocele.a1\n            a3 = 180 - 2 * triangleIsocele.a1\n            triangleIsocele.a3 = a3\n          }\n          texte = `${triangleIsocele.getNom()} est un triangle tel que ${triangleIsocele.getAngles()[0]} $= ${triangleIsocele.a1}\\\\degree$ ; `\n          texte += ` ${triangleIsocele.getAngles()[1]} $= ${triangleIsocele.a2}\\\\degree$ et  ${triangleIsocele.getAngles()[2]} $= ${triangleIsocele.a3}\\\\degree$ .`\n          texteCorr = `Le triangle ${triangleIsocele.getNom()} a deux angles égaux, ${triangleIsocele.getAngles()[0]} = ${triangleIsocele.getAngles()[1]} $= ${triangleIsocele.a1}\\\\degree$ donc ${triangleIsocele.getNom()} est un triangle isocèle en ${triangleIsocele.getSommets()[0]}.`\n          break\n        case 11: // triangle équilatéral par les angles\n          triangleEquilateral.a1 = 60\n          triangleEquilateral.a2 = 60\n          triangleEquilateral.a3 = 60\n\n          texte = `${triangleEquilateral.getNom()} est un triangle tel que ${triangleEquilateral.getAngles()[0]} $= ${triangleEquilateral.a1}\\\\degree$ ; `\n          texte += ` ${triangleEquilateral.getAngles()[1]} $= ${triangleEquilateral.a2}\\\\degree$ et  ${triangleEquilateral.getAngles()[2]} $= ${triangleEquilateral.a3}\\\\degree$.`\n          texteCorr = `Le triangle ${triangleEquilateral.getNom()} a trois angles égaux, ${triangleEquilateral.getAngles()[0]} = ${triangleEquilateral.getAngles()[1]} = ${triangleEquilateral.getAngles()[2]} $= ${triangleEquilateral.a1}\\\\degree$ donc ${triangleEquilateral.getNom()} est un triangle équilateral.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Sans conversions de longueurs\\n2 : Avec conversions de longueurs']\n  this.besoinFormulaire2CaseACocher = ['Avec des décimaux', false]\n}\n","import VocabulaireDesTriangles from '../5e/5G20-1.js'\nexport const titre = 'Vocabulaire des triangles'\n\n/**\n * Vocabulaire des triangles\n * 6G20-2\n * @author Sébastien Lozano\n */\nexport default function VocabulaireDesTriangles6e () {\n  VocabulaireDesTriangles.call(this)\n  this.titre = titre\n  this.classe = 6\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","VocabulaireDesTriangles","typeDeQuestionsDisponibles","Exercice","this","consigne","sup","sup2","nbCols","nbColsCorr","nbQuestionsModifiable","classe","listePackages","nouvelleVersion","numeroExercice","parseInt","nbQuestions","texteIntro","context","boutonAide","modalTexteLong","texEnumerateSansNumero","introduction","lampeMessage","texte","couleur","choice","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","texteCorr","l1","l2","l3","a1","a2","a3","i","cpt","longueurMin","longueurMax","angleMin","angleMax","triangleQuelconque","Triangles","triangleIsocele","triangleEquilateral","triangleRectangle","triangleIsoceleRectangle","partieDecimale1","partieDecimale2","partieDecimale3","calcul","randint","isTrueTriangleLongueurs","getNom","getLongueurs","texNombre","isTrueTriangleAngles","getAngles","getCotes","getSommets","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","VocabulaireDesTriangles6e","consigneCorrection","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}