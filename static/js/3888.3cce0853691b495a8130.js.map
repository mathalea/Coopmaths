{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43-2.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","titre","TableauCriteresDeDivisibilite","Exercice","this","spacing","spacingCorr","nbQuestions","nbColsCorr","nbCols","nouvelleVersion","autoCorrection","modeQcm","consigne","espace","context","listeQuestions","listeCorrections","listeDesTypesDeNombres","combinaisonListes","tableauDeNombres","texte","texteCorr","tableauDeNombresAvecCorrection","listeDeFacteurs","i","choice","texNombre2","propositions","statut","feedback","enonce","toString","charAt","length","options","ordered","lastChoice","propositionsQcm","k","l","push","listeQuestionsToContenu","listeQuestionsToContenuSansNumero","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","message","type","querySelectorAll","uicheck","exerciceQcm","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/3888.3cce0853691b495a8130.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, listeQuestionsToContenu, choice, combinaisonListes, texNombre2 } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =2 //type de question AMC \n\nexport const titre = 'Critères de divisibilité (plusieurs possibles)'\n\n/**\n * Un nombre est-il divisible par 2, 3, 5, 9 ?\n *\n *\n * @Auteur Rémi Angot\n * 6N43-2\n */\nexport default function TableauCriteresDeDivisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.nbCols = 1\n\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    if (!this.modeQcm) {\n      this.consigne =\n        'Compléter le tableau en mettant oui ou non dans chaque case.'\n    } else {\n      this.consigne =\n        'mettre une croix dans la ou les cases qui conviennent.'\n    }\n    let espace = ''\n    if (context.isHtml) {\n      espace = '&emsp;'\n    } else {\n      espace = '\\\\qquad'\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeDesNombresPossibles = [\n      'div2',\n      'div3',\n      'div39',\n      'div5',\n      'div25',\n      'div23',\n      'div239',\n      'div35',\n      'div2359',\n      'divrien'\n    ]\n    // divisible par 2, divisible par 3, divisible par 3 et 9...\n\n    const listeDesTypesDeNombres = combinaisonListes(\n      listeDesNombresPossibles,\n      this.nbQuestions\n    )\n    const tableauDeNombres = []; let texte; let texteCorr\n    const tableauDeNombresAvecCorrection = []\n    const listeDeFacteurs = [\n      7,\n      11,\n      13,\n      17,\n      19,\n      23,\n      29,\n      31,\n      37,\n      41,\n      43,\n      47,\n      53,\n      59,\n      61,\n      67,\n      71,\n      73,\n      79,\n      83,\n      89,\n      97,\n      101,\n      103,\n      107,\n      109,\n      113,\n      127,\n      131,\n      137,\n      139,\n      149,\n      151,\n      157,\n      163,\n      167,\n      173,\n      179,\n      181,\n      191,\n      193,\n      197,\n      199,\n      211,\n      223,\n      227,\n      229,\n      233,\n      239,\n      241,\n      251,\n      257,\n      263,\n      269,\n      271,\n      277,\n      281,\n      283,\n      293\n    ]\n    texteCorr = ''\n    texte = ''\n    for (let i = 0; i < this.nbQuestions; i++) {\n      this.autoCorrection[i] = {}\n      switch (listeDesTypesDeNombres[i]) {\n        case 'div2':\n          tableauDeNombres[i] = 2 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\text{non} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $3$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $3$.\"\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est pair. Il est donc divisible par 2.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n\n          break\n        case 'div3':\n          tableauDeNombres[i] = 3 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\text{non} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: false,\n              feedback: \"Ce nombre est impair. Il n'est pas divisible par $2$\"\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est divisible par $3$ car la somme de ses chiffres est divisible par $3$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div39':\n          tableauDeNombres[i] = 9 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\text{non} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\color{blue} \\\\text{oui} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: false,\n              feedback: \"Ce nombre est impair. Il n'est pas divisible par $2$\"\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est divisible par $9$ et par $3$ car la somme de ses chiffres est divisible par $9$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div5':\n          tableauDeNombres[i] = 5 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\text{non} & \\\\text{non} & \\\\color{blue} \\\\text{oui} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: false,\n              feedback: \"Ce nombre est impair. Il n'est pas divisible par $2$\"\n            },\n            {\n              texte: 'par $3$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $3$.\"\n            },\n            {\n              texte: 'par $5$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: `Ce nombre est divisible par $5$ car son chiffre des unités est $${tableauDeNombres[i].toString().charAt(tableauDeNombres[i].toString().length - 1)}$.`\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div25':\n          tableauDeNombres[i] = 10 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\color{blue} \\\\text{oui} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $3$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $3$.\"\n            },\n            {\n              texte: 'par $5$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est un multiple de $10$. Il est donc divisible par $2$ et par $5$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div23':\n          tableauDeNombres[i] = 6 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\color{blue} \\\\text{oui} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est un nombre pair. Il est donc divisible par $2$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div239':\n          tableauDeNombres[i] = 18 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\color{blue} \\\\text{oui} & \\\\color{blue} \\\\text{oui} & \\\\text{non} & \\\\color{blue} \\\\text{oui} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est un nombre pair. Il est donc divisible par $2$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div35':\n          tableauDeNombres[i] = 15 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\text{non} & \\\\color{blue} \\\\text{oui} & \\\\color{blue} \\\\text{oui} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: false,\n              feedback: \"Ce nombre est impair. Il n'est pas divisible par $2$\"\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est un nombre pair. Il est donc divisible par $2$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'div2359':\n          tableauDeNombres[i] = 90 * choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\color{blue} \\\\text{oui} & \\\\text{oui} & \\\\text{oui} & \\\\text{oui} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $3$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $5$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par $9$',\n              statut: true,\n              feedback: 'Correct !'\n            },\n            {\n              texte: 'par aucun',\n              statut: false,\n              feedback: 'Ce nombre est un nombre pair. Il est donc divisible par $2$.'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n        case 'divrien':\n          tableauDeNombres[i] = choice(listeDeFacteurs)\n          tableauDeNombresAvecCorrection[i] = `${texNombre2(\n            tableauDeNombres[i]\n          )} & \\\\text{non} & \\\\text{non} & \\\\text{non} & \\\\text{non} \\\\\\\\`\n          this.autoCorrection[i].propositions = [\n            {\n              texte: 'par $2$',\n              statut: false,\n              feedback: \"Ce nombre est un nombre impair. Il ,'est pas divisible par $2$\"\n            },\n            {\n              texte: 'par $3$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $3$.\"\n            },\n            {\n              texte: 'par $5$',\n              statut: false,\n              feedback: \"Le chiffre des unités n'est ni $0$ ni $5$.\"\n            },\n            {\n              texte: 'par $9$',\n              statut: false,\n              feedback: \"La somme des chiffres n'est pas divisible par $9$.\"\n            },\n            {\n              texte: 'par aucun',\n              statut: true,\n              feedback: 'Correct !'\n            }\n          ]\n          this.autoCorrection[i].enonce = `$${texNombre2(tableauDeNombres[i])}$ est divisible\\n`\n          break\n      }\n      this.autoCorrection[i].options = {\n        ordered: true,\n        lastChoice: 4\n      }\n      if (!context.isAmc && this.modeQcm) {\n        texte += `$${texNombre2(tableauDeNombres[i])}$ est divisible ${espace}  `\n        texte += propositionsQcm(this, i).texte\n        texte += '<br>'\n      }\n    } // fin de boucle de préparation des question\n    // mise en forme selon les cas de figures\n    // l'enoncé\n    if (context.isHtml && !this.modeQcm) {\n      texte = '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|l|c|c|c|c|}\\n'\n    }\n    if (!context.isHtml && !this.modeQcm) {\n      texte = '$\\\\begin{array}{|l|c|c|c|c|}\\n'\n    }\n    if (!context.isAmc && !this.modeQcm) {\n      texte += '\\\\hline\\n'\n      texte += '\\\\text{... est divisible} & \\\\text{par }2 & \\\\text{par }3 & \\\\text{par }5 & \\\\text{par }9\\\\\\\\\\n'\n      texte += '\\\\hline\\n'\n      for (let k = 0; k < this.nbQuestions; k++) {\n        texte += `${texNombre2(tableauDeNombres[k])} & & & & \\\\\\\\\\n`\n        texte += '\\\\hline\\n'\n      }\n      texte += '\\\\end{array}\\n$'\n    }\n\n    // la correction\n    if (context.isHtml) {\n      texteCorr = '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|l|c|c|c|c|}\\n'\n    }\n    if (!context.isHtml && !context.isAmc) {\n      texteCorr = '$\\\\begin{array}{|l|c|c|c|c|}\\n'\n    }\n\n    if (!context.isAmc) {\n      texteCorr += '\\\\hline\\n'\n      texteCorr += '\\\\text{... est divisible} & \\\\text{par }2 & \\\\text{par }3 & \\\\text{par }5 & \\\\text{par }9\\\\\\\\\\n'\n      texteCorr += '\\\\hline\\n'\n      for (let l = 0; l < this.nbQuestions; l++) {\n        texteCorr += tableauDeNombresAvecCorrection[l]\n        texteCorr += '\\\\hline\\n'\n      }\n      texteCorr += '\\\\end{array}$\\n'\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    if (!context.isAmc) {\n      if (this.modeQcm) {\n        listeQuestionsToContenu(this)\n      } else {\n        listeQuestionsToContenuSansNumero(this)\n      }\n    } else {\n      \n    }\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.',',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n\n\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (var prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n// Module regroupant les fonctions de gestions des erreurs.\n\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} [feedback.message]\n * @param {string} [feedback.type]\n * @param {string} [feedback.titre]\n */\nexport function addFeedback (container, { message = 'Une erreur est survenue', type = 'erreur', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}