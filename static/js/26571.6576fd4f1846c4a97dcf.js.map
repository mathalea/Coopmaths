{"version":3,"file":"js/26571.6576fd4f1846c4a97dcf.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,egal,randint,choice,shuffle,nombreAvecEspace,texcolors} from '../../modules/outils.js'\nimport {tracePoint,labelPoint,codageMilieu,segment,rotation,rotationAnimee,texteParPosition,mathalea2d,pavage} from '../../modules/2d.js'\n\n\nexport const titre = 'Trouver l’image d’une figure par symétrie centrale dans un pavage'\n\n/**\n * Publié le 14/12/2020\n * Trouver l'image par symétrie centrale d'une figure dans un pavage\n * Version Latex & Html grâce à Mathalea2d\n * @author Jean-Claude Lhote\n * Ref 5G12\n */\nexport default function Pavage_et_demi_tour2d() {\n\t\"use strict\";\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.titre = titre;\n\tthis.consigne = \"\";\n\tthis.nbQuestions = 3;\n\tthis.nbQuestionsModifiable = true;\n\tthis.correctionDetailleeDisponible=true\n\tthis.correctionDetaillee=true\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\tthis.sup = 1; // 1 pour des pavages modestes, 2 pour des plus grand.\n\tthis.sup2=false // On cache les barycentres par défaut.\n\tthis.sup3=7;\n\tcontext.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5);\n\tthis.nouvelleVersion = function () {\n\t  let videcouples=function(tableau){\n\t\tfor (let k=0;k<tableau.length;k++){\n\t\t  for (let j=k+1;j<tableau.length;j++){\n\t\t\tif (tableau[k][1]==tableau[j][0]) {\n\t\t\t  tableau.splice(j,1)\n\t\t\t}\n\t\t  }\n\t\t}\n\t\treturn tableau\n\t  }\n\t  let compare2polys=function(poly1,poly2){\n\t\tif (comparenbsommets(poly1,poly2)) {\n\t\t  if (comparesommets(poly1,poly2)) \n\t\t\treturn true\n\t\t  else\n\t\t\treturn false\n\t\t}\n\t\telse \n\t\t  return false \n\t\t}\n\t\tlet comparenbsommets = function(poly1,poly2){\n\t\t  if (poly1.listePoints.length==poly2.listePoints.length){\n\t\t\treturn true\n\t\t  }\n\t\t  else return false\n\t\t}\n\t\t\n\t\tlet compare2sommets=function(sommet1,sommet2){\n\t\t  if (egal(sommet1.x,sommet2.x,0.1)&&egal(sommet1.y,sommet2.y,0.1)) {\n\t\t\treturn true\n\t\t  }\n\t\t  else return false\n\t\t}\n\t\tlet comparesommets = function(poly1,poly2){\n\t\t  let trouve=false,trouves=0\n\t\t  if (comparenbsommets(poly1,poly2))\n\t\t  for (let P of poly1.listePoints) {\n\t\t\tfor (let M of poly2.listePoints) {\n\t\t\t  if (compare2sommets(M,P)) {\n\t\t\t\ttrouve=true\n\t\t\t  }\n\t\t\t  if (trouve) break\n\t\t\t}\n\t\t\tif (trouve) {\n\t\t\t  trouves++\n\t\t\t  trouve=false\n\t\t\t}\n\t\t\telse {\n\t\t\t  trouves-=100\n\t\t\t}\n\t\t\tif (trouves<0)\n\t\t\tbreak\n\t\t  }\n\t\t  if (trouves==poly1.listePoints.length)\n\t\t\treturn true\n\t\t  else return false\n\t\t}\n\t  \n\t  let demitour = function (pavage, A, numero) { // retourne le numero du polygone symétrique ou -1 si il n'existe pas\n\t\tlet poly=pavage.polygones[numero-1]\n\t\tlet pol\n\t\tlet result=-1\n\t\tlet sympoly=rotation(poly,A,180)\n\t\tfor (let k= 0;k<pavage.polygones.length;k++) {\n\t\t  pol=pavage.polygones[k]\n\t\t  if (compare2polys(sympoly,pol)) {\n\t\t\treturn k+1\n\t\t  }\n\t\t}\n\t\treturn result\n\t  } \n  \n\t  let objets=[],objetsCorrection=[],P1,P2,P3,G1,G2,t\n\t  let codes=['/','//','///','o','w','X','U','*']\n\t  let taillePavage=parseInt(this.sup)\n\t  if (taillePavage<1||taillePavage>2) {\n\t\ttaillePavage=1\n\t  }\n\t  if (this.nbQuestions>5) {\n\t\ttaillePavage=2\n\t  }\n\t  this.listeCorrections = []\n\t  this.listeQuestions = []\n\t  let Nx,Ny,index1,A,B,d,image,couples=[],tailles=[],monpavage,fenetre\n\t  let texte = \"\", texteCorr = \"\", type_de_pavage = parseInt(this.sup)\n\t  let nombreTentatives,nombrePavageTestes=1\n\t  if (this.sup3==8) {\n\t\ttype_de_pavage =  randint(1,7)\n\t  }\n\t  else {\n\t\ttype_de_pavage=parseInt(this.sup3)\n\t  }\n\t  while (couples.length<this.nbQuestions&&nombrePavageTestes<6){\n\t\tnombreTentatives=0\n\t  monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n\t  tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2],[3,2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2],[5,3]]]\n\t  Nx = tailles[taillePavage-1][type_de_pavage-1][0]\n\t  Ny = tailles[taillePavage-1][type_de_pavage-1][1]\n\t  monpavage.construit(type_de_pavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n\t  fenetre=monpavage.fenetre\n\t  let fenetreMathalea2d=[fenetre.xmin,fenetre.ymin,fenetre.xmax,fenetre.ymax]\n\t  while (couples.length<this.nbQuestions+2&&nombreTentatives<3) { // On cherche d pour avoir suffisamment de couples\n\t  couples=[] // On vide la liste des couples pour une nouvelle recherche\n\t  \n\t  index1=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3)) // On choisit 1 point dans un des polygones\n\t  if (choice([true,false])) { \n\t\t  A=monpavage.polygones[index1].listePoints[randint(0,monpavage.polygones[index1].listePoints.length-1)] // On choisit un sommet\n\t  }\n\t  else {\n\t\tA=monpavage.barycentres[index1] // Ou on choisit un barycentre\n\t  }\n\t  while (A.x-5<fenetre.xmin||A.x+5>fenetre.xmax||A.y-5<fenetre.ymin||A.y+5>fenetre.ymax){\n\t\tindex1=randint(Math.floor(monpavage.nb_polygones/3),Math.ceil(monpavage.nb_polygones*2/3)) // On choisit 1 point dans un des polygones\n\t\tif (choice([true,false])) { \n\t\t\tA=monpavage.polygones[index1].listePoints[randint(0,monpavage.polygones[index1].listePoints.length-1)] // On choisit un sommet\n\t\t}\n\t\telse {\n\t\t  A=monpavage.barycentres[index1] // Ou on choisit un barycentre\n\t\t}\n\t  }\n\t\t\t  A.nom='A'\n\t\t\t  A.positionLabel='above left'\n\t\t  d=tracePoint(A) // la trace du centre de symétrie sera rouge et grosse\n\t\t  B=labelPoint(A)\n\t  d.epaisseur=3\n\t  d.taille=4\n\t  d.color='red'\n\t  for (let i=1;i<= monpavage.nb_polygones; i++){ //on crée une liste des couples (antécédents, images)\n\t\timage=demitour(monpavage,A,i)\n\t\tif (image!=-1){ // si l'image du polygone i existe, on ajoute le couple à la liste\n\t\t  couples.push([i,image])\n\t\t}\n\t  }\n\t  couples=videcouples(couples) //supprime tous les couples en double (x,y)=(y,x)\n\t  nombreTentatives++ \n\t  }\n\t  if (couples.length<this.nbQuestions){\n\t\tif (this.sup3==7) {\n\t\t\ttype_de_pavage=(type_de_pavage+1)%5+1\n\t\t  }\n\t  nombrePavageTestes++\n\t  }\n\t}\n\tif (couples.length<this.nbQuestions){\n\t  console.log('trop de questions, augmentez la taille du pavage')\n\t  return\n\t}\n  \n\t  objets.push(d) // le centre est OK on pousse sa trace\n\t  objets.push(B) // et son label\n\t  couples=shuffle(couples) // on mélange les couples\n\t  for (let i = 0; i < monpavage.nb_polygones; i++) {\n\t\tobjets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n\t  }\n\t  if (this.sup2) { // Doit-on montrer les centres des figures ?\n\t\tfor (let i = 0; i < monpavage.nb_polygones; i++) {\n\t\t  objets.push(monpavage.tracesCentres[i])\n\t\t}\n\t  }\n\t  for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n\t\tobjets.push(monpavage.polygones[i])\n\t  }\n\t  texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n\t  texte+=`<br>`\n\t  for (let i=0;i<this.nbQuestions;i++){\n\t\ttexte+=`Quel est l'image de la figure $${couples[i][0]}$ dans la symétrie de centre $A$ ?<br>`\n\t\ttexteCorr+=`L'image de la figure $${couples[i][0]}$ dans la symétrie de centre $A$ est la figure ${couples[i][1]}<br>`\n\t\tif (this.correctionDetaillee){\n\t\t\tt=this.nbQuestions*3;\n\t\t\tG1=monpavage.barycentres[couples[i][0]-1]\n\t\t\tG2=monpavage.barycentres[couples[i][1]-1]\n\t\t\tP1=monpavage.polygones[couples[i][0]-1]\n\t\t\tP1.color=texcolors(i)\n\t\t\tP1.couleurDeRemplissage=texcolors(i)\n\t\t\tP1.opaciteDeRemplissage=0.5\n\t\t\tP1.epaisseur=2\n\t\t\tP2=monpavage.polygones[couples[i][1]-1]\n\t\t\tP2.color=texcolors(i)\n\t\t\tP2.couleurDeRemplissage=texcolors(i)\n\t\t\tP2.opaciteDeRemplissage=0.5\n\t\t\tP2.epaisseur=2\n\t\t\tP3=rotationAnimee(P1,A,180,`begin=\"${i*3}s;${i*3+t}s;${i*3+t*2}s\" end=\"${i*3+2}s;${i*3+t+2}s;${i*3+t*2+2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9*this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n\t\t\tP3.color=texcolors(i)\n\t\t\tP3.epaisseur=2\n\t\t\tobjetsCorrection.push(tracePoint(G1,G2),segment(G1,G2,texcolors(i)),codageMilieu(G1,G2,texcolors(i),codes[i],false),P1,P2,P3)\n\t\t  }\n\t}\n    if (this.correctionDetaillee){\n      texteCorr+=mathalea2d(fenetre, objets,objetsCorrection)\n    }\n\t  this.listeQuestions.push(texte);\n\t  this.listeCorrections.push(texteCorr);\n\t  listeQuestionsToContenu(this)\n\t}\n\tthis.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, '1 : Taille modeste\\n 2 : Grande taille'];\n\tthis.besoinFormulaire2CaseACocher=[\"Montrer les centres\"]\n\tthis.besoinFormulaire3Numerique=['Choix du pavage',8,'1 : Pavage de triangles équilatéraux\\n2 : Pavage de carrés\\n3 : Pavage d\\'hexagones réguliers\\n4 : Pavage 3².4.3.4\\n5 : Pavage 8².4\\n 6 : Pavage de losanges (hexagonal d\\'écolier)\\n7 : Pavage 6.3.6.3\\n8 : Un des sept pavages au hasard']\n}","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Pavage_et_demi_tour2d","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetailleeDisponible","correctionDetaillee","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","P1","P2","P3","G1","G2","t","videcouples","tableau","k","length","j","splice","comparenbsommets","poly1","poly2","listePoints","comparesommets","trouve","trouves","P","M","sommet1","sommet2","egal","x","y","demitour","pavage","A","numero","pol","poly","polygones","sympoly","rotation","objets","objetsCorrection","codes","taillePavage","parseInt","listeCorrections","listeQuestions","Nx","Ny","index1","B","d","image","monpavage","fenetre","nombreTentatives","couples","tailles","texte","texteCorr","type_de_pavage","nombrePavageTestes","randint","construit","xmin","ymin","xmax","ymax","Math","floor","nb_polygones","ceil","choice","barycentres","nom","positionLabel","tracePoint","labelPoint","epaisseur","taille","color","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","tracesCentres","mathalea2d","texcolors","couleurDeRemplissage","opaciteDeRemplissage","rotationAnimee","segment","codageMilieu","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}