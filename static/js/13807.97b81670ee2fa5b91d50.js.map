{"version":3,"file":"js/13807.97b81670ee2fa5b91d50.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A11-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, modalPdf, modalVideo, listeDiviseurs, numAlpha, cribleEratostheneN, tableauColonneLigne } from '../../modules/outils.js'\nexport const titre = 'Compter/lister les diviseurs d’un entier à partir de sa décomposition en facteurs premiers'\n\n/**\n * 3A11-3 - Lister/Compter les diviseurs d'un entier à partir de sa decomposition en facteurs premiers\n * @author Sébastien Lozano\n */\nexport default function Lister_Diviseurs_Par_decompositionFacteursPremiers () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Sans la calculatrice, compter/lister les diviseurs d\\'un entier à partir de sa décomposition en facteurs premiers.'\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 2\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', '/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1]\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      switch (typesDeQuestions) {\n        case 1: // lister/compter les diviseurs d'un entier à partir de sa décomposition en facteurs premiers\n          texte = 'Lister/compter les diviseurs d\\'un entier à partir de sa décomposition en facteurs premiers'\n          // let premiers_dispos = premiersEntreBornes(2,11);\n          // on fixe le nombre de facteurs premier à 3\n          const nb_de_premiers_b = randint(3, 3)\n          // on fixe la limite pour le choix des premiers\n          const max_premier_b = 11\n          // on fixe le rang max pour le choix des premiers\n          const rg_max_b = cribleEratostheneN(max_premier_b).length - 1\n          // on choisit les rangs pour les nombres premiers\n          const tab_rangs_b = []\n          const tab_rangs_exclus_b = []\n          for (let k = 0; k < (nb_de_premiers_b); k++) {\n            for (let m = 0; m < k; m++) {\n              tab_rangs_exclus_b.push(tab_rangs_b[m])\n            }\n            tab_rangs_b[k] = randint(0, rg_max_b, tab_rangs_exclus_b)\n          };\n          // on choisit les premiers\n          const tab_premiers_b = []\n          for (let k = 0; k < tab_rangs_b.length; k++) {\n            tab_premiers_b[k] = cribleEratostheneN(max_premier_b)[tab_rangs_b[k]]\n          };\n          // on range les facteurs premiers dans l'ordre croissant\n          tab_premiers_b.sort(function (a, b) {\n            return a - b\n          })\n          // on choisit les multiplicités\n          const tab_multiplicites_b = []\n          for (let k = 0; k < tab_rangs_b.length; k++) {\n            tab_multiplicites_b[k] = randint(1, 2)\n          };\n          texte = ''\n          let nombre_a_decomposer_b = 1\n          for (let k = 0; k < tab_rangs_b.length; k++) {\n            for (let m = 0; m < tab_multiplicites_b[k]; m++) {\n              nombre_a_decomposer_b = nombre_a_decomposer_b * tab_premiers_b[k]\n            };\n          };\n          texte += `La décomposition en facteurs premiers de $${texNombre(nombre_a_decomposer_b)}$ est : $`\n          if (tab_multiplicites_b[0] == 1) {\n            texte += `${tab_premiers_b[0]}`\n          } else {\n            texte += `${tab_premiers_b[0]}^{${tab_multiplicites_b[0]}}`\n          };\n          for (let k = 1; k < tab_premiers_b.length; k++) {\n            if (tab_multiplicites_b[k] == 1) {\n              texte += `\\\\times ${tab_premiers_b[k]}`\n            } else {\n              texte += `\\\\times ${tab_premiers_b[k]}^{${tab_multiplicites_b[k]}}`\n            };\n          };\n          texte += '$, <br>'\n          texte += numAlpha(0) + ' Compléter le tableau ci-dessous.'\n          if (!context.isHtml) {\n            texte += '$\\\\medskip$'\n          };\n          // on crée le tableau des entetes de lignes et des colonnes\n          let ent_lignes = []\n          const contenu_lignes = []\n          let ent_colonnes = ['\\\\times']\n          // les entetes des lignes\n          for (let k = 0; k < tab_multiplicites_b[0] + 1; k++) {\n            ent_lignes.push('\\\\phantom{plusLarge}' + tab_premiers_b[0] + '^{' + k + '}\\\\phantom{plusLarge}')\n          };\n          // les entetes des colonnes\n          for (let m = 0; m < tab_multiplicites_b[1] + 1; m++) {\n            for (let l = 0; l < tab_multiplicites_b[2] + 1; l++) {\n              ent_colonnes.push(tab_premiers_b[1] + '^{' + m + '}\\\\times' + tab_premiers_b[2] + '^{' + l + '}')\n            };\n          };\n          // tableau pour la permutation circulaire\n          let tab_temp\n          // on y affecte les lignes\n          tab_temp = ent_lignes\n          // on supprime le x de l'entete des colonnes\n          ent_colonnes.shift()\n          // on affecte ça aux lignes;\n          ent_lignes = ent_colonnes\n          // on remet le x en colonnes et on ajoute le reste\n          ent_colonnes = ['\\\\times'].concat(tab_temp)\n          // le contenu des lignes\n          for (let l = 0; l < (tab_multiplicites_b[0] + 1); l++) {\n            for (let c = 1; c < (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1) + 1; c++) {\n              // contenu_lignes.push(`l : `+l+`, c : `+Number(c));\n              contenu_lignes.push('')\n            };\n          };\n          texte += '<br>'\n          texte += tableauColonneLigne(ent_colonnes, ent_lignes, contenu_lignes)\n          if (!context.isHtml) {\n            texte += '$\\\\medskip$'\n          };\n          texte += '<br>'\n          texte += numAlpha(1) + ` En déduire le nombre de diviseurs de $${texNombre(nombre_a_decomposer_b)}$.<br>`\n          texte += numAlpha(2) + ` Enfin, dresser la liste des diviseurs de $${texNombre(nombre_a_decomposer_b)}$.<br>`\n\n          // correction\n          texteCorr = `Avec la décomposition en facteurs premiers de $${texNombre(nombre_a_decomposer_b)}$ qui est : $`\n          if (tab_multiplicites_b[0] == 1) {\n            texteCorr += `${tab_premiers_b[0]}`\n          } else {\n            texteCorr += `${tab_premiers_b[0]}^{${tab_multiplicites_b[0]}}`\n          };\n          for (let k = 1; k < tab_premiers_b.length; k++) {\n            if (tab_multiplicites_b[k] == 1) {\n              texteCorr += `\\\\times ${tab_premiers_b[k]}`\n            } else {\n              texteCorr += `\\\\times ${tab_premiers_b[k]}^{${tab_multiplicites_b[k]}}`\n            };\n          };\n          texteCorr += '$, <br>'\n          texteCorr += numAlpha(0) + ' Le tableau donne :'\n          // on crée le tableau des entetes de lignes et des colonnes\n          let ent_lignes_corr = []\n          let ent_lignes_corr_res = []\n          const contenu_lignes_corr = []\n          // let contenu_lignes_corr_res = [];\n          let ent_colonnes_corr = ['\\\\times']\n          let ent_colonnes_corr_res = [1]\n          // les entetes des lignes\n          for (let k = 0; k < tab_multiplicites_b[0] + 1; k++) {\n            ent_lignes_corr.push(tab_premiers_b[0] + '^{' + k + '}')\n            ent_lignes_corr_res.push(tab_premiers_b[0] ** k)\n          };\n          // les entetes des colonnes\n          for (let m = 0; m < tab_multiplicites_b[1] + 1; m++) {\n            for (let l = 0; l < tab_multiplicites_b[2] + 1; l++) {\n              ent_colonnes_corr.push(tab_premiers_b[1] + '^{' + m + '}\\\\times' + tab_premiers_b[2] + '^{' + l + '}')\n              ent_colonnes_corr_res.push(tab_premiers_b[1] ** m * tab_premiers_b[2] ** l)\n            };\n          };\n          // tableaux pour les permutations circulaires\n          let tab_temp_corr\n          let tab1_temp_corr\n          // on y affecte les lignes\n          tab_temp_corr = ent_lignes_corr\n          tab1_temp_corr = ent_lignes_corr_res\n          // on supprime le x de l'entete des colonnes\n          ent_colonnes_corr.shift()\n          ent_colonnes_corr_res.shift()\n          // on affecte ça aux lignes;\n          ent_lignes_corr = ent_colonnes_corr\n          ent_lignes_corr_res = ent_colonnes_corr_res\n          // on remet le x en colonnes et on ajoute le reste\n          ent_colonnes_corr = ['\\\\times'].concat(tab_temp_corr)\n          ent_colonnes_corr_res = [1].concat(tab1_temp_corr)\n          // le contenu des lignes\n          for (let l = 0; l < (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1) + 1; l++) {\n            for (let c = 1; c < (tab_multiplicites_b[0] + 2); c++) {\n              // contenu_lignes_corr.push(`l : `+l+`, c : `+Number(c));\n              contenu_lignes_corr.push(ent_lignes_corr[l] + '\\\\times' + ent_colonnes_corr[c] + '=' + miseEnEvidence(texNombre(ent_lignes_corr_res[l] * ent_colonnes_corr_res[c])))\n            };\n          };\n          texteCorr += '<br>'\n          texteCorr += tableauColonneLigne(ent_colonnes_corr, ent_lignes_corr, contenu_lignes_corr)\n          texteCorr += '<br>'\n          texteCorr += numAlpha(1) + ` $${texNombre(nombre_a_decomposer_b)}$ a donc `\n          texteCorr += `$(${tab_multiplicites_b[0]}+1)\\\\times(${tab_multiplicites_b[1]}+1)\\\\times(${tab_multiplicites_b[2]}+1) = `\n          texteCorr += `${tab_multiplicites_b[0] + 1}\\\\times${tab_multiplicites_b[1] + 1}\\\\times${tab_multiplicites_b[2] + 1} = `\n          texteCorr += `${(tab_multiplicites_b[0] + 1) * (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1)}$ diviseurs.<br>`\n          texteCorr += 'En effet, dans la décomposition apparait : '\n          texteCorr += ` <br> - Le facteur premier $${tab_premiers_b[0]}$ avec la multiplicité $${tab_multiplicites_b[0]}$`\n          texteCorr += `, le facteur $${tab_premiers_b[0]}$ apparait donc sous les formes : `\n          for (let k = 0; k < tab_multiplicites_b[0]; k++) {\n            texteCorr += `$${tab_premiers_b[0]}^{` + k + '}$ ou '\n          };\n          texteCorr += `$${tab_premiers_b[0]}^{` + tab_multiplicites_b[0] + `}$ d'où le facteur $(${tab_multiplicites_b[0]}+1)$.`\n\n          texteCorr += ` <br> - Le facteur premier $${tab_premiers_b[1]}$ avec la multiplicité $${tab_multiplicites_b[1]}$`\n          texteCorr += `, le facteur $${tab_premiers_b[1]}$ apparait donc sous les formes : `\n          for (let k = 0; k < tab_multiplicites_b[1]; k++) {\n            texteCorr += `$${tab_premiers_b[1]}^{` + k + '}$ ou '\n          };\n          texteCorr += `$${tab_premiers_b[1]}^{` + tab_multiplicites_b[1] + `}$ d'où le facteur $(${tab_multiplicites_b[1]}+1)$.`\n\n          texteCorr += ` <br> - Le facteur premier $${tab_premiers_b[2]}$ avec la multiplicité $${tab_multiplicites_b[2]}$`\n          texteCorr += `, le facteur $${tab_premiers_b[2]}$ apparait donc sous les formes : `\n          for (let k = 0; k < tab_multiplicites_b[2]; k++) {\n            texteCorr += `$${tab_premiers_b[2]}^{` + k + '}$ ou '\n          };\n          texteCorr += `$${tab_premiers_b[2]}^{` + tab_multiplicites_b[2] + `}$ d'où le facteur $(${tab_multiplicites_b[2]}+1)$.`\n          texteCorr += '<br>'\n          texteCorr += numAlpha(2) + ` Enfin, voici la liste des $${(tab_multiplicites_b[0] + 1) * (tab_multiplicites_b[1] + 1) * (tab_multiplicites_b[2] + 1)}$ diviseurs de $${texNombre(nombre_a_decomposer_b)}$ issus du tableau ci-dessus : `\n          texteCorr += '$1'\n          for (let w = 1; w < listeDiviseurs(nombre_a_decomposer_b).length; w++) {\n            texteCorr += '\\\\text{ ; }' + texNombre(listeDiviseurs(nombre_a_decomposer_b)[w])\n          };\n          texteCorr += '.$'\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Lister_Diviseurs_Par_decompositionFacteursPremiers","Exercice","this","sup","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","nb_de_premiers_b","randint","max_premier_b","rg_max_b","cribleEratostheneN","length","tab_rangs_b","tab_rangs_exclus_b","k","m","push","tab_premiers_b","sort","a","b","tab_multiplicites_b","nombre_a_decomposer_b","texNombre","numAlpha","ent_lignes","contenu_lignes","tab_temp","ent_colonnes","l","shift","concat","c","tableauColonneLigne","ent_lignes_corr","ent_lignes_corr_res","contenu_lignes_corr","tab_temp_corr","tab1_temp_corr","ent_colonnes_corr","ent_colonnes_corr_res","miseEnEvidence","w","listeDiviseurs","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}