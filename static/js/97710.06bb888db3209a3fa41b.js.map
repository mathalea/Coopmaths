{"version":3,"file":"js/97710.06bb888db3209a3fa41b.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/_choisirExpressionNumerique.js"],"sourcesContent":["import { randint, arrondi, calcul, texNombrec, nombreAvecEspace, choice } from '../../modules/outils.js'\n\n/**\n * Chosis aléatoirement une expressions numérique parmi de nombreuses variantes.\n * @param {number} nbOperations fixe la complexité de l'expression à retourner\n * @param {number} decimal 1 si on veut des entiers, 10, 100, 1000 selon le nombre de chiffres après la virgule qu'on veut\n * retourne\n * * l'expression en français commençant par une majuscule sans point final\n * * l'expression en mode maths LaTex\n * * Le détaillé du calcul en mode maths LaTex\n * @author Jean-Claude Lhote\n * Fonction utilisée dans plusieurs exercices.\n */\nexport default function choisirExpressionNumerique (nbOperations, decimal, timesOn = true, calculMental) {\n  let expf; let expn; let expc; const arrondir = Math.log10(decimal)\n  let a = arrondi(randint(2 * decimal, 10 * decimal) / decimal, arrondir)\n  let b = arrondi(randint(2 * decimal, 10 * decimal, [a * decimal]) / decimal, arrondir)\n  let c = arrondi(randint(2 * decimal, 10 * decimal) / decimal, arrondir)\n  let d = arrondi(randint(2 * decimal, 10 * decimal, [c * decimal]) / decimal, arrondir)\n  let e = arrondi(randint(2 * decimal, 10 * decimal) / decimal, arrondir)\n  let souscas\n  let signex = ''\n  if (timesOn) { signex = ' \\\\times' }\n  switch (nbOperations) {\n    case 1: // expressions de base (1 opération)\n      souscas = randint(0, 3)\n      switch (souscas) {\n        case 0: // somme de deux nombres\n          expf = `La somme de ${nombreAvecEspace(a)} et de ${nombreAvecEspace(b)}`\n          expn = `$${texNombrec(a)}+${texNombrec(b)}$`\n          expc = `$${texNombrec(a)}+${texNombrec(b)} = ${texNombrec(a + b)}$`\n          break\n        case 1: // différence de deux nombres\n          if (a < b) { a = a + b }\n          expf = `La différence de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)}`\n          expn = `$${texNombrec(a)}-${texNombrec(b)}$`\n          expc = `$${texNombrec(a)}-${texNombrec(b)} = ${texNombrec(a - b)}$`\n          break\n        case 2: // produit de deux nombres\n          expf = `Le produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)} = ${texNombrec(a * b)}$`\n          break\n        case 3: // quotient de deux nombres\n          a = calcul(Math.round(a) * b)\n          expf = `Le quotient de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)}`\n          expn = `$${texNombrec(a)} \\\\div ${texNombrec(b)}$`\n          expc = `$${texNombrec(a)} \\\\div ${texNombrec(b)} = ${texNombrec(a / b)}$`\n          break\n      }\n      break\n    case 2: // expressions de niveau 1 (2 opérations)\n      souscas = randint(0, 9)\n      switch (souscas) {\n        case 0: // a(b+c)\n          if (calculMental) {\n            a = choice([2, 3, 4])\n            b = randint(1, 5)\n            c = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) - b\n          }\n          expf = `Le produit de ${nombreAvecEspace(a)} par la somme de ${nombreAvecEspace(b)} et ${nombreAvecEspace(c)}`\n          expn = `$${texNombrec(a)}${signex}(${texNombrec(b)}+${texNombrec(c)})$`\n          expc = `$${texNombrec(a)}${signex}(${texNombrec(b)}+${texNombrec(c)}) = ${texNombrec(a)} \\\\times ${texNombrec(b + c)}=${texNombrec(a * (b + c))}$`\n          break\n        case 1: // a(b-c)\n          if (b <= c) { b = calcul(b + c) } // b-c positif\n          if (calculMental) {\n            a = choice([2, 3, 4])\n            c = randint(1, 5)\n            b = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) + c\n          }\n          expf = `Le produit de ${nombreAvecEspace(a)} par la différence de ${nombreAvecEspace(b)} et ${nombreAvecEspace(c)}`\n          expn = `$${texNombrec(a)}${signex}(${texNombrec(b)}-${texNombrec(c)})$`\n          expc = `$${texNombrec(a)}${signex}(${texNombrec(b)}-${texNombrec(c)}) = ${texNombrec(a)} \\\\times ${texNombrec(b - c)}=${texNombrec(a * (b - c))}$`\n          break\n        case 2: // a/(b+c)\n          a = calcul(a * (b + c)) // on s'assure que le quotient tombe juste...\n          if (calculMental) {\n            b = randint(1, 5)\n            c = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) - b\n            a = choice([2, 3, 4, 5]) * (c + b)\n          }\n          expf = `Le quotient de ${nombreAvecEspace(a)} par la somme de ${nombreAvecEspace(b)} et ${nombreAvecEspace(c)}`\n          expn = `$${texNombrec(a)} \\\\div (${texNombrec(b)}+${texNombrec(c)})$ ou $\\\\dfrac{${texNombrec(a)}}{${texNombrec(b)}+${texNombrec(c)}}$`\n          expc = `$${texNombrec(a)} \\\\div (${texNombrec(b)}+${texNombrec(c)}) = ${texNombrec(a)} \\\\div ${texNombrec(b + c)}=${texNombrec(a / (b + c))}$`\n          break\n        case 3: // a/(b-c)\n          if (b <= c) { b = calcul(b + c) } // b-c positif\n          a = calcul(a * (b - c)) // on s'assure que le quotient tombe juste\n          if (calculMental) {\n            c = randint(1, 5)\n            b = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) + c\n            a = choice([2, 3, 4, 5]) * (b - c)\n          }\n          expf = `Le quotient de ${nombreAvecEspace(a)} par la différence de ${nombreAvecEspace(b)} et ${nombreAvecEspace(c)}`\n          expn = `$${texNombrec(a)} \\\\div (${texNombrec(b)}-${texNombrec(c)})$ ou $\\\\dfrac{${texNombrec(a)}}{${texNombrec(b)}-${texNombrec(c)}}$`\n          expc = `$${texNombrec(a)} \\\\div (${texNombrec(b)}-${texNombrec(c)}) = ${texNombrec(a)} \\\\div ${texNombrec(b - c)}=${texNombrec(a / (b - c))}$`\n          break\n        case 4: // (a+b)/c\n          a = calcul(a * c)\n          b = calcul(b * c) // on s'assure que le quotient tombe juste\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            a = randint(1, 5) * c\n            b = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) * c - a\n          }\n          expf = `Le quotient de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par ${nombreAvecEspace(c)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div ${texNombrec(c)}$ ou $\\\\dfrac{${texNombrec(a)}+${texNombrec(b)}}{${texNombrec(c)}}$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div ${texNombrec(c)} = ${texNombrec(a + b)} \\\\div ${texNombrec(c)}=${texNombrec((a + b) / c)}$`\n          break\n        case 5: // (a-b)/c\n          if (a <= b) { a = calcul(a + b) } // a-b positif\n          a = calcul(a * c)\n          b = calcul(b * c) // on s'assure que le quotient tombe juste\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            b = randint(1, 5) * c\n            a = choice([7, 8, 9, 10, 11, 12, 15, 20, 25, 50]) * c + b\n          }\n          expf = `Le quotient de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par ${nombreAvecEspace(c)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div ${texNombrec(c)}$ ou $\\\\dfrac{${texNombrec(a)}-${texNombrec(b)}}{${texNombrec(c)}}$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div ${texNombrec(c)} = ${texNombrec(a - b)} \\\\div ${texNombrec(c)}=${texNombrec((a - b) / c)}$`\n          break\n        case 6: // a + bc\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            b = randint(2, 9)\n            a = randint(2, 9)\n          }\n          expf = `La somme de ${nombreAvecEspace(a)} et du produit de ${nombreAvecEspace(b)} et $${nombreAvecEspace(c)}$`\n          expn = `$${texNombrec(a)}+${texNombrec(b)} \\\\times ${texNombrec(c)}$`\n          expc = `$${texNombrec(a)}+${texNombrec(b)} \\\\times ${texNombrec(c)}=${texNombrec(a)}+${texNombrec(b * c)} = ${texNombrec(a + (b * c))}$`\n          break\n        case 7: // a - bc\n          a = calcul(a + b * c)\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            b = randint(2, 9)\n            a = randint(2, 9) + b * c\n          }\n          expf = `La différence entre ${nombreAvecEspace(a)} et le produit de ${nombreAvecEspace(b)} et $${nombreAvecEspace(c)}$`\n          expn = `$${texNombrec(a)}-${texNombrec(b)} \\\\times ${texNombrec(c)}$`\n          expc = `$${texNombrec(a)}-${texNombrec(b)} \\\\times ${texNombrec(c)}=${texNombrec(a)}-${texNombrec(b * c)} = ${texNombrec(a - (b * c))}$`\n          break\n        case 8: // a + b/c\n          b = calcul(b * c)\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            b = randint(2, 6) * c\n            a = randint(2, 9)\n          }\n          expf = `La somme de ${nombreAvecEspace(a)} et du quotient de ${nombreAvecEspace(b)} par $${nombreAvecEspace(c)}$`\n          expn = `$${texNombrec(a)}+${texNombrec(b)} \\\\div ${texNombrec(c)}$ ou $${texNombrec(a)}+\\\\dfrac{${texNombrec(b)}}{${texNombrec(c)}}$`\n          expc = `$${texNombrec(a)}+${texNombrec(b)} \\\\div ${texNombrec(c)}=${texNombrec(a)}+${texNombrec(b / c)} = ${texNombrec(a + (b / c))}$`\n          break\n        case 9: // a - b/c\n          a = calcul(a + b)\n          b = calcul(b * c)\n          if (calculMental) {\n            c = choice([2, 3, 4, 5])\n            b = randint(2, 6) * c\n            a = randint(2, 9) + b * c\n          }\n          expf = `La différence entre ${nombreAvecEspace(a)} et le quotient de ${nombreAvecEspace(b)} par $${nombreAvecEspace(c)}$`\n          expn = `$${texNombrec(a)}-${texNombrec(b)} \\\\div ${texNombrec(c)}$ ou $${texNombrec(a)}-\\\\dfrac{${texNombrec(b)}}{${texNombrec(c)}}$`\n          expc = `$${texNombrec(a)}-${texNombrec(b)} \\\\div ${texNombrec(c)}=${texNombrec(a)}-${texNombrec(b / c)} = ${texNombrec(a - (b / c))}$`\n          break\n      }\n      break\n    case 3: // expressions de niveau 2 (3 opérations)\n      souscas = randint(0, 13)\n      switch (souscas) {\n        case 0: // (a+b)(c+d)\n          if (calculMental) { // Objectif : 4 entiers différents entre 1 et 10. Un des facteurs peut atteindre 11, pas l'autre.\n            a = randint(1, 10)\n            b = randint(1, 11 - a, [a])\n            c = randint(1, 6, [a, b]) // 6 ici, car d doit pouvoir, à toutes occasions, choisir entre 4 nb minimum.\n            d = randint(1, 10 - c, [a, b, c])\n          }\n          expf = `Le produit de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)})$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)}) = ${texNombrec(a + b)} \\\\times ${texNombrec(c + d)} = ${texNombrec((a + b) * (c + d))}$`\n          break\n        case 1: // (a+b)(c-d)\n          if (calculMental) { // Objectif : La différence est supérieure à 1.\n            a = randint(1, 10)\n            b = randint(1, 11 - a, [a])\n            d = randint(1, 6, [a, b])\n            c = randint(2, 10 - d, [a - d, b - d]) + d\n          } else {\n            if (c <= d) { c = calcul(c + d) }\n          }\n          expf = `Le produit de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la différence de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)})${signex}(${texNombrec(c)}-${texNombrec(d)})$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)})${signex}(${texNombrec(c)}-${texNombrec(d)}) = ${texNombrec(a + b)} \\\\times ${texNombrec(c - d)} = ${texNombrec((a + b) * (c - d))}$`\n          break\n        case 2: // (a-b)(c+d)\n          if (calculMental) {\n            b = randint(1, 9)\n            a = randint(2, 10 - b) + b\n            c = randint(1, 6, [a, b])\n            d = randint(1, 10 - c, [a, b, c])\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n          }\n          expf = `Le produit de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)})$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)}) = ${texNombrec(a - b)} \\\\times ${texNombrec(c + d)} = ${texNombrec((a - b) * (c + d))}$`\n          break\n        case 3: // (a-b)(c-d)\n          if (calculMental) {\n            b = randint(1, 9)\n            a = randint(2, 10 - b) + b\n            d = randint(1, 6, [a, b])\n            c = randint(2, 10 - d, [a - d, b - d]) + d\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n            if (c <= d) { c = calcul(c + d) }\n          }\n          expf = `Le produit de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la différence de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}-${texNombrec(d)})$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}-${texNombrec(d)}) = ${texNombrec(a - b)} \\\\times ${texNombrec(c - d)} = ${texNombrec((a - b) * (c - d))}$`\n          break\n        case 4: // (a+b)/(c+d)\n          if (calculMental) { // Objectif : Le numérateur est un multiple du dénominateur (plus petit que 12), entre 2 et 5 fois plus.\n            c = randint(1, 10)\n            d = randint(1, 11 - c, [c])\n            a = randint(1, calcul(2 * (c + d) - 1), [c, d, calcul(c + d)]) // a est un nb petit entre 1 et le double du dénominateur pour faciliter les calculs.\n            if (randint(1, 2) === 1) { // Pour ne pas que a soit toujours le nombre le plus petit entre a et b.\n              b = calcul(randint(2, 5) * (c + d) - a)\n            } else {\n              b = a\n              a = calcul(randint(2, 5) * (c + d) - a)\n            }\n          } else {\n            a = calcul(a * (c + d))\n            b = calcul(b * (c + d))\n          }\n          expf = `Le quotient de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}+${texNombrec(d)})$ ou $\\\\dfrac{${texNombrec(a)}+${texNombrec(b)}}{${texNombrec(c)}+${texNombrec(d)}}$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}+${texNombrec(d)}) = ${texNombrec(a + b)} \\\\div ${texNombrec(c + d)} = ${texNombrec((a + b) / (c + d))}$`\n          break\n        case 5: // (a-b)/(c+d)\n          if (calculMental) {\n            c = randint(1, 10)\n            d = randint(1, 11 - c, [c])\n            b = randint(1, 11, [c, d])\n            a = calcul(randint(2, 5) * (c + d) + b)\n          } else {\n            a = calcul(a * (c + d))\n            b = calcul(b * (c + d))\n            if (a <= b) { a = calcul(a + b) }\n          }\n          expf = `Le quotient de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div (${texNombrec(c)}+${texNombrec(d)})$ ou $\\\\dfrac{${texNombrec(a)}-${texNombrec(b)}}{${texNombrec(c)}+${texNombrec(d)}}$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div (${texNombrec(c)}+${texNombrec(d)}) = ${texNombrec(a - b)} \\\\div ${texNombrec(c + d)} = ${texNombrec((a - b) / (c + d))}$`\n          break\n        case 6: // (a+b)/(c-d)\n          if (calculMental) {\n            d = randint(1, 9)\n            c = randint(2, 12 - d) + d\n            a = randint(1, calcul(2 * (c - d) - 1), [c, d])\n            if (randint(1, 2) === 1) {\n              b = calcul(randint(2, 5) * (c - d) - a)\n            } else {\n              b = a\n              a = calcul(randint(2, 5) * (c - d) - a)\n            }\n          } else {\n            if (c <= d) { c = calcul(c + d) }\n            a = calcul(a * (c - d))\n            b = calcul(b * (c - d))\n          }\n          expf = `Le quotient de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la différence de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}-${texNombrec(d)})$ ou $\\\\dfrac{${texNombrec(a)}+${texNombrec(b)}}{${texNombrec(c)}-${texNombrec(d)}}$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}-${texNombrec(d)}) = ${texNombrec(a + b)} \\\\div ${texNombrec(c - d)} = ${texNombrec((a + b) / (c - d))}$`\n          break\n        case 7: // (a-b)/(c-d)\n          if (calculMental) {\n            d = randint(1, 9)\n            c = randint(2, 12 - d) + d\n            b = randint(1, 11, [c, d])\n            a = randint(2, 5) * (c - d) + b\n          } else {\n            if (c <= d) { c = calcul(c + d) }\n            if (a <= b) { a = calcul(a + b) }\n            a = calcul(a * (c - d))\n            b = calcul(b * (c - d))\n          }\n          expf = `Le quotient de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la différence de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div (${texNombrec(c)}-${texNombrec(d)})$ ou $\\\\dfrac{${texNombrec(a)}-${texNombrec(b)}}{${texNombrec(c)}-${texNombrec(d)}}$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div (${texNombrec(c)}-${texNombrec(d)}) = ${texNombrec(a - b)} \\\\div ${texNombrec(c - d)} = ${texNombrec((a - b) / (c - d))}$`\n          break\n        case 8: // ab+cd\n          if (calculMental) { // Tous les nombres sont différents et choisis entre 1 et 5. On évalue les priorités avec des calculs faciles.\n            a = randint(1, 5)\n            b = randint(1, 5, [a])\n            c = randint(1, 5, [a, b])\n            d = randint(1, 5, [a, b, c])\n          }\n          expf = `La somme du produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du produit de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\times ${texNombrec(d)}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\times ${texNombrec(d)} = ${texNombrec(a * b)}+${texNombrec(c * d)} = ${texNombrec(a * b + c * d)}$`\n          break\n        case 9: // ab-cd\n          if (calculMental) { // a,d et c sont différents et choisis entre 1 et 5.\n            c = randint(1, 5)\n            d = randint(1, 5, [c])\n            a = randint(1, 5, [c, d])\n            b = Math.floor(c * d / a) + randint(1, 2) // On s'arrange avec b pour que la différence ne soit pas difficile.\n          } else {\n            if (a * b < d * c) { a = calcul(a + c) }\n            if (a * b < d * c) { b = calcul(b + d) }\n          }\n          expf = `La différence du produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du produit de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}-${texNombrec(c)} \\\\times ${texNombrec(d)}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)}-${texNombrec(c)} \\\\times ${texNombrec(d)} = ${texNombrec(a * b)}-${texNombrec(c * d)} = ${texNombrec(a * b - c * d)}$`\n          break\n        case 10: // ab+c/d\n          if (calculMental) { // a, b, d sont différents et d est plus grand que 1.\n            a = randint(1, 5)\n            b = randint(1, 5, [a])\n            d = randint(2, 5, [a, b])\n            c = randint(2, 5) * d\n          } else {\n            c = calcul(c * d)\n          }\n          expf = `La somme du produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du quotient de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\div ${texNombrec(d)}$ ou $${texNombrec(a)} \\\\times ${texNombrec(b)}+\\\\dfrac{${texNombrec(c)}}{${texNombrec(d)}}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\div ${texNombrec(d)} = ${texNombrec(a * b)}+${texNombrec(c / d)} = ${texNombrec(a * b + c / d)}$`\n          break\n        case 11: // ab-c/d\n          if (calculMental) { // b et d sont différents et plus grands que 1.\n            d = randint(2, 5)\n            c = randint(2, 5) * d\n            a = randint(2, 5, [c, d])\n            b = Math.floor((c / d) / a) + randint(1, 4) //  On s'arrange toujours avec b pour que la différence ne soit pas difficile.\n          } else {\n            c = c * d\n            if (a * b < c / d) { a = calcul(a * c) }\n            if (a * b < c / d) { b = calcul(b * c) }\n          }\n          expf = `La différence du produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du quotient de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}-${texNombrec(c)} \\\\div ${texNombrec(d)}$ ou $${texNombrec(a)} \\\\times ${texNombrec(b)}-\\\\dfrac{${texNombrec(c)}}{${texNombrec(d)}}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)}-${texNombrec(c)} \\\\div ${texNombrec(d)} = ${texNombrec(a * b)}-${texNombrec(c / d)} = ${texNombrec(a * b - c / d)}$`\n          break\n        case 12: // a/b+c/d\n          if (calculMental) { // b et d sont différents et plus grands que 1.\n            b = randint(2, 5)\n            a = randint(2, 5) * b\n            d = randint(2, 5, [a, b])\n            c = randint(2, 5) * d\n          } else {\n            a = calcul(a * b)\n            c = calcul(c * d)\n          }\n          expf = `La somme du quotient de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du quotient de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\div ${texNombrec(b)}+${texNombrec(c)} \\\\div ${texNombrec(d)}$ ou $\\\\dfrac{${texNombrec(a)}}{${texNombrec(b)}}+\\\\dfrac{${texNombrec(c)}}{${texNombrec(d)}}$`\n          expc = `$${texNombrec(a)} \\\\div ${texNombrec(b)}+${texNombrec(c)} \\\\div ${texNombrec(d)} = ${texNombrec(a / b)}+${texNombrec(c / d)} = ${texNombrec(a / b + c / d)}$`\n          break\n        case 13: // a/b-c/d\n          if (calculMental) { // b et d sont différents et plus grands que 1.\n            d = randint(2, 5)\n            c = randint(2, 5) * d\n            b = randint(2, 5, [c, d])\n            a = (Math.floor(c / d) + randint(1, 5)) * b // a multiple de b mais au maximum de 10 fois.\n          } else {\n            a = calcul(a * b)\n            c = calcul(c * d)\n            if (a / b < c / d) { a = calcul(a * c) }\n            if (a / c < c / d) { a = calcul(a * d) }\n          }\n          expf = `La différence du quotient de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du quotient de ${nombreAvecEspace(c)} par ${nombreAvecEspace(d)}`\n          expn = `$${texNombrec(a)} \\\\div ${texNombrec(b)}-${texNombrec(c)} \\\\div ${texNombrec(d)}$ ou $\\\\dfrac{${texNombrec(a)}}{${texNombrec(b)}}-\\\\dfrac{${texNombrec(c)}}{${texNombrec(d)}}$`\n          expc = `$${texNombrec(a)} \\\\div ${texNombrec(b)}-${texNombrec(c)} \\\\div ${texNombrec(d)} = ${texNombrec(a / b)}-${texNombrec(c / d)} = ${texNombrec(a / b - c / d)}$`\n          break\n      }\n      break\n    case 5: // expressions complexes ! Ah qui, le dis-tu ! ;-)\n      souscas = randint(0, 5)\n      switch (souscas) {\n        case 0: // 2(a+bc)\n          if (calculMental) {\n            a = randint(1, 10)\n            b = randint(2, 5, [a])\n            c = randint(2, 5, [a, b])\n          }\n          expf = `Le double de la somme de ${nombreAvecEspace(a)} et du produit de ${nombreAvecEspace(b)} par ${nombreAvecEspace(c)}`\n          expn = `$2${signex}(${texNombrec(a)}+${texNombrec(b)} \\\\times ${texNombrec(c)})$`\n          expc = `$2${signex}(${texNombrec(a)}+${texNombrec(b)} \\\\times ${texNombrec(c)}) = 2${signex}(${texNombrec(a)}+${texNombrec(b * c)}) = 2 \\\\times  ${texNombrec(a + b * c)} = ${texNombrec(2 * (a + b * c))}$`\n          break\n        case 1: // 3(a+b)/c\n          if (calculMental) { // b et d sont différents et plus grands que 1.\n            c = randint(2, 10, [3, 6, 9]) // Pour ne pas que le 3 se simplfie avec c.\n            a = randint(1, 2 * c - 1, [c])\n            if (randint(1, 2) === 1) { b = randint(2, 5) * c - a } else { // Pour ne pas que a soit toujours le plus petit.\n              b = a\n              a = randint(2, 5) * c - b\n            }\n          } else {\n            a = calcul(a * c)\n            b = calcul(b * c)\n          }\n          expf = `Le triple du quotient de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par ${nombreAvecEspace(c)}`\n          expn = `$3${signex}(${texNombrec(a)}+${texNombrec(b)}) \\\\div ${texNombrec(c)}$ ou $3 \\\\times \\\\dfrac{${texNombrec(a)}+${texNombrec(b)}}{${texNombrec(c)}}$`\n          expc = `$3${signex}(${texNombrec(a)}+${texNombrec(b)}) \\\\div ${texNombrec(c)} = 3 \\\\times  ${texNombrec(a + b)} \\\\div ${texNombrec(c)} = ${texNombrec(3 * (a + b))} \\\\div ${texNombrec(c)} = ${texNombrec(3 * (a + b) / c)}$`\n          break\n        case 2: // (a-b)/3\n          if (calculMental) {\n            b = randint(2, 10)\n            a = randint(2, 5) * 3 + b\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n            a = calcul(3 * a)\n            b = calcul(3 * b)\n          }\n          expf = `Le tiers de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div  3$ ou $\\\\dfrac{${texNombrec(a)}-${texNombrec(b)}}{3}$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)}) \\\\div  3 = ${texNombrec(a - b)} \\\\div  3 = ${texNombrec((a - b) / 3)}$`\n          break\n        case 3: // (a-b)/3*2(c+d)\n          if (calculMental) {\n            b = randint(2, 10)\n            a = randint(2, 5) * 3 + b\n            c = randint(1, 5)\n            d = randint(1, 5, [c, b, a])\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n            a = calcul(3 * a)\n            b = calcul(3 * b)\n          }\n          expf = `Le produit du tiers de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par le double de la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$\\\\left((${texNombrec(a)}-${texNombrec(b)}) \\\\div  3\\\\right) \\\\times  2${signex}(${texNombrec(c)}+${texNombrec(d)})$`\n          expc = `$\\\\left((${texNombrec(a)}-${texNombrec(b)}) \\\\div  3\\\\right) \\\\times  2${signex}(${texNombrec(c)}+${texNombrec(d)}) = ${texNombrec(a - b)} \\\\div  3  \\\\times  2  \\\\times ${texNombrec(c + d)} = ${texNombrec((a - b) / 3)}  \\\\times  2  \\\\times  ${texNombrec(c + d)} =  ${texNombrec(2 * (a - b) / 3)}  \\\\times  ${texNombrec(c + d)} = ${texNombrec(2 * (c + d) * (a - b) / 3)}$`\n          break\n        case 4: // 3(a+b)-2(c+d)\n          if (calculMental) { // Le résultat final sera ici, en moyenne, 7, 8 ou 9.\n            c = randint(2, 5)\n            d = randint(2, 5, [c])\n            a = randint(1, 5, [c, d])\n            b = Math.floor((c + d) * 2 / 3) + 3 - a\n          } else {\n            if (3 * (a + b) < 2 * (c + d)) { a = calcul(a + c + d) }\n          }\n          expf = `La différence du triple de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} et du double de la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$3${signex}(${texNombrec(a)}+${texNombrec(b)})-2${signex}(${texNombrec(c)}+${texNombrec(d)})$`\n          expc = `$3${signex}(${texNombrec(a)}+${texNombrec(b)})-2${signex}(${texNombrec(c)}+${texNombrec(d)}) = 3  \\\\times  ${texNombrec(a + b)} - 2  \\\\times  ${texNombrec(c + d)} = ${texNombrec(3 * (a + b))} - ${texNombrec(2 * (c + d))} = ${texNombrec(3 * (a + b) - 2 * (c + d))}$`\n          break\n        case 5: // 2(a-b)+3(c+d)\n          if (calculMental) { // 2(a-b)<11 et c+d<14\n            b = randint(2, 9)\n            a = randint(2, 5) + b\n            c = randint(2, 10, [a, b])\n            d = randint(2, 15 - c, [a, b, c])\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n          }\n          expf = `La somme du double de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} et du triple de la somme de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)}`\n          expn = `$2${signex}(${texNombrec(a)}-${texNombrec(b)})+3${signex}(${texNombrec(c)}+${texNombrec(d)})$`\n          expc = `$2${signex}(${texNombrec(a)}-${texNombrec(b)})+3${signex}(${texNombrec(c)}+${texNombrec(d)}) = 2  \\\\times  ${texNombrec(a - b)} + 3  \\\\times  ${texNombrec(c + d)} = ${texNombrec(2 * (a - b))} + ${texNombrec(3 * (c + d))} = ${texNombrec(2 * (a - b) + 3 * (c + d))}$`\n          break\n      }\n      break\n    case 4: // 4 opérations : Pffiouuu en calcul mental mais en papier, ce sera faisable par tous, sans calculatrice, même ceux faibles en calcul.\n      souscas = randint(1, 3)\n      switch (souscas) {\n        case 1: // (a+b)/(c(d+e))\n          if (calculMental) { // Dénominateur inférieur à 51. Resultat final : soit 1, 2 ou 10.\n            d = randint(2, 8)\n            e = randint(2, 11 - d, [d])\n            c = randint(2, Math.floor(50 / (d + e)), [d, e])\n            a = randint(2, c * (d + e) - 1)\n            if (randint(1, 2) === 1) { b = choice([1, 2, 10]) * c * (d + e) - a } else { // Pour ne pas que a soit toujours le plus petit.\n              b = a\n              a = choice([1, 2, 10]) * c * (d + e) - b\n            }\n          } else {\n            a = calcul(a * c * (d + e))\n            b = calcul(b * c * (d + e))\n          }\n          expf = `Le quotient de la somme de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par le produit de ${nombreAvecEspace(c)} par la somme de ${nombreAvecEspace(d)} et ${nombreAvecEspace(e)}`\n          expn = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}${signex}(${texNombrec(d)}+${texNombrec(e)}))$ ou $\\\\dfrac{${texNombrec(a)}+${texNombrec(b)}}{${texNombrec(c)}${signex}(${texNombrec(d)}+${texNombrec(e)})}$`\n          expc = `$(${texNombrec(a)}+${texNombrec(b)}) \\\\div (${texNombrec(c)}${signex}(${texNombrec(d)}+${texNombrec(e)})) = ${texNombrec(a + b)}  \\\\div  (${texNombrec(c)}  \\\\times  ${texNombrec(d + e)}) = ${texNombrec(a + b)}  \\\\div  ${texNombrec(c * (d + e))} = ${texNombrec((a + b) / (c * (d + e)))}$`\n          break\n        case 2: // (a-b)*(c+de)\n          if (calculMental) { // a-b = 2 ou 4 ou 10 et c+de < 31.\n            b = randint(2, 9)\n            a = choice([2, 4, 10]) + b\n            d = randint(2, 5, [a, b])\n            e = randint(2, 5, [a, b, d])\n            c = randint(2, 30 - d * e, [a, b, d, e])\n          } else {\n            if (a <= b) { a = calcul(a + b) }\n          }\n          expf = `Le produit de la différence de ${nombreAvecEspace(a)} et ${nombreAvecEspace(b)} par la somme de ${nombreAvecEspace(c)} et du produit de ${nombreAvecEspace(d)} par ${nombreAvecEspace(e)}`\n          expn = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)} \\\\times ${texNombrec(e)})$`\n          expc = `$(${texNombrec(a)}-${texNombrec(b)})${signex}(${texNombrec(c)}+${texNombrec(d)} \\\\times ${texNombrec(e)}) = ${texNombrec(a - b)}${signex}(${texNombrec(c)}+${texNombrec(d * e)}) = ${texNombrec(a - b)}  \\\\times  ${texNombrec(c + d * e)} = ${texNombrec((a - b) * (c + d * e))}$`\n          break\n        case 3: // ab+cd/e\n          if (calculMental) { // Une simplification mentale en c et e sera nécessaire.\n            a = randint(2, 6)\n            b = randint(2, 6, [a])\n            e = randint(2, 10, [a, b])\n            c = randint(2, 5, [a, b]) * e\n            d = randint(2, 6, [a, b, e, c])\n          } else {\n            c = calcul(c * e)\n          }\n          expf = `La somme du produit de ${nombreAvecEspace(a)} par ${nombreAvecEspace(b)} et du quotient du produit de ${nombreAvecEspace(c)} et ${nombreAvecEspace(d)} par ${nombreAvecEspace(e)}`\n          expn = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\times ${texNombrec(d)} \\\\div ${texNombrec(e)}$ ou $${texNombrec(a)} \\\\times ${texNombrec(b)}+\\\\dfrac{${texNombrec(c)} \\\\times ${texNombrec(d)}}{${texNombrec(e)}}$`\n          expc = `$${texNombrec(a)} \\\\times ${texNombrec(b)}+${texNombrec(c)} \\\\times ${texNombrec(d)} \\\\div ${texNombrec(e)} = ${texNombrec(a * b)} + ${texNombrec(c * d)}  \\\\div  ${texNombrec(e)} = ${texNombrec(a * b)} + ${texNombrec(c * d / e)} = ${texNombrec(a * b + c * d / e)}$`\n          break\n      }\n      break\n  }\n  return [expf, expn, expc, souscas]\n}\n"],"names":["choisirExpressionNumerique","nbOperations","decimal","timesOn","calculMental","expf","expn","expc","arrondir","Math","log10","souscas","a","arrondi","randint","b","c","d","e","signex","nombreAvecEspace","texNombrec","calcul","round","choice","floor"],"sourceRoot":""}