{"version":3,"file":"js/436.cb734e64eed5fcfc5601.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N20-6.js","webpack://mathalea/./src/js/exercices/3e/3A11-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import listerDiviseursParDecompositionFacteursPremiers from '../3e/3A11-3.js'\nexport const titre = 'Compter/lister les diviseurs d’un entier à partir de sa décomposition en facteurs premiers'\nexport const dateDeModifImportante = '14/11/2021'\n\n/**\n * Clone de 3A11-3 pour les 2nde\n *\n * @author Jean-Claude Lhote\n */\n\nexport default function listerDiviseursParDecompositionFacteursPremiers2nde () {\n  listerDiviseursParDecompositionFacteursPremiers.call(this)\n  this.sup = true\n  this.besoinFormulaireCaseACocher = false\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, texNombre, miseEnEvidence, modalPdf, modalVideo, listeDiviseurs, numAlpha, cribleEratostheneN, tableauColonneLigne } from '../../modules/outils.js'\nexport const titre = 'Compter/lister les diviseurs d’un entier à partir de sa décomposition en facteurs premiers'\n\n/**\n * 3A11-3 - Lister/Compter les diviseurs d'un entier à partir de sa decomposition en facteurs premiers\n * @author Sébastien Lozano\n */\nexport default function listerDiviseursParDecompositionFacteursPremiers () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = false\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Sans la calculatrice, compter/lister les diviseurs d\\'un entier à partir de sa décomposition en facteurs premiers.'\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 2\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.nouvelleVersion = function (numeroExercice) {\n    // let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'https://coopmaths.fr/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    // const typesDeQuestionsDisponibles = [1]\n    // let typesDeQuestionsDisponibles = [1];\n    // const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // typesDeQuestions = listeTypeDeQuestions[i]\n\n      // switch (typesDeQuestions) {\n      // case 1: // lister/compter les diviseurs d'un entier à partir de sa décomposition en facteurs premiers\n      texte = 'Lister/compter les diviseurs d\\'un entier à partir de sa décomposition en facteurs premiers'\n      // let premiers_dispos = premiersEntreBornes(2,11);\n      // on fixe le nombre de facteurs premier à 3\n      const nbDePremiersb = 3\n      // on fixe la limite pour le choix des premiers\n      let maxPremierb\n      if (this.sup) maxPremierb = 13\n      else maxPremierb = 11\n      // on fixe le rang max pour le choix des premiers\n      const rgMaxb = cribleEratostheneN(maxPremierb).length - 1\n      // on choisit les rangs pour les nombres premiers\n      const tabRangsb = []\n      const tabRangsExclusb = []\n      for (let k = 0; k < (nbDePremiersb); k++) {\n        for (let m = 0; m < k; m++) {\n          tabRangsExclusb.push(tabRangsb[m])\n        }\n        tabRangsb[k] = randint(0, rgMaxb, tabRangsExclusb)\n      };\n      // on choisit les premiers\n      const tabPremiersb = []\n      for (let k = 0; k < tabRangsb.length; k++) {\n        tabPremiersb[k] = cribleEratostheneN(maxPremierb)[tabRangsb[k]]\n      };\n      // on range les facteurs premiers dans l'ordre croissant\n      tabPremiersb.sort(function (a, b) {\n        return a - b\n      })\n      // on choisit les multiplicités\n      const tabMultiplicitesb = []\n      for (let k = 0; k < tabRangsb.length; k++) {\n        tabMultiplicitesb[k] = randint(1, this.sup ? 4 : 2)\n      };\n      texte = ''\n      let nombreADecomposerb = 1\n      for (let k = 0; k < tabRangsb.length; k++) {\n        for (let m = 0; m < tabMultiplicitesb[k]; m++) {\n          nombreADecomposerb = nombreADecomposerb * tabPremiersb[k]\n        };\n      };\n      texte += `La décomposition en facteurs premiers de $${texNombre(nombreADecomposerb)}$ est : $`\n      if (tabMultiplicitesb[0] === 1) {\n        texte += `${tabPremiersb[0]}`\n      } else {\n        texte += `${tabPremiersb[0]}^{${tabMultiplicitesb[0]}}`\n      };\n      for (let k = 1; k < tabPremiersb.length; k++) {\n        if (tabMultiplicitesb[k] === 1) {\n          texte += `\\\\times ${tabPremiersb[k]}`\n        } else {\n          texte += `\\\\times ${tabPremiersb[k]}^{${tabMultiplicitesb[k]}}`\n        };\n      };\n      texte += '$, <br>'\n      texte += numAlpha(0) + ' Compléter le tableau ci-dessous.'\n      if (!context.isHtml) {\n        texte += '$\\\\medskip$'\n      };\n      // on crée le tableau des entetes de lignes et des colonnes\n      let entLignes = []\n      const contenuLignes = []\n      let entColonnes = ['\\\\times']\n      // les entetes des lignes\n      for (let k = 0; k < tabMultiplicitesb[0] + 1; k++) {\n        entLignes.push('\\\\phantom{plusLarge}' + tabPremiersb[0] + '^{' + k + '}\\\\phantom{plusLarge}')\n      };\n      // les entetes des colonnes\n      for (let m = 0; m < tabMultiplicitesb[1] + 1; m++) {\n        for (let l = 0; l < tabMultiplicitesb[2] + 1; l++) {\n          entColonnes.push(tabPremiersb[1] + '^{' + m + '}\\\\times' + tabPremiersb[2] + '^{' + l + '}')\n        };\n      };\n      // tableau pour la permutation circulaire\n      const tabTemp = entLignes\n      // on y affecte les lignes\n\n      // on supprime le x de l'entete des colonnes\n      entColonnes.shift()\n      // on affecte ça aux lignes;\n      entLignes = entColonnes\n      // on remet le x en colonnes et on ajoute le reste\n      entColonnes = ['\\\\times'].concat(tabTemp)\n      // le contenu des lignes\n      for (let l = 0; l < (tabMultiplicitesb[0] + 1); l++) {\n        for (let c = 1; c < (tabMultiplicitesb[1] + 1) * (tabMultiplicitesb[2] + 1) + 1; c++) {\n          // contenuLignes.push(`l : `+l+`, c : `+Number(c));\n          contenuLignes.push('')\n        };\n      };\n      texte += '<br>'\n      texte += tableauColonneLigne(entColonnes, entLignes, contenuLignes)\n      if (!context.isHtml) {\n        texte += '$\\\\medskip$'\n      };\n      texte += '<br>'\n      texte += numAlpha(1) + ` En déduire le nombre de diviseurs de $${texNombre(nombreADecomposerb)}$.<br>`\n      texte += numAlpha(2) + ` Enfin, dresser la liste des diviseurs de $${texNombre(nombreADecomposerb)}$.<br>`\n\n      // correction\n      texteCorr = `Avec la décomposition en facteurs premiers de $${texNombre(nombreADecomposerb)}$ qui est : $`\n      if (tabMultiplicitesb[0] === 1) {\n        texteCorr += `${tabPremiersb[0]}`\n      } else {\n        texteCorr += `${tabPremiersb[0]}^{${tabMultiplicitesb[0]}}`\n      };\n      for (let k = 1; k < tabPremiersb.length; k++) {\n        if (tabMultiplicitesb[k] === 1) {\n          texteCorr += `\\\\times ${tabPremiersb[k]}`\n        } else {\n          texteCorr += `\\\\times ${tabPremiersb[k]}^{${tabMultiplicitesb[k]}}`\n        };\n      };\n      texteCorr += '$, <br>'\n      texteCorr += numAlpha(0) + ' Le tableau donne :'\n      // on crée le tableau des entetes de lignes et des colonnes\n      let entLignesCorr = []\n      let entLignesCorrRes = []\n      const contenuLignesCorr = []\n      // let contenuLignesCorr_res = [];\n      let entColonnesCorr = ['\\\\times']\n      let entColonnesCorrRes = [1]\n      // les entetes des lignes\n      for (let k = 0; k < tabMultiplicitesb[0] + 1; k++) {\n        entLignesCorr.push(tabPremiersb[0] + '^{' + k + '}')\n        entLignesCorrRes.push(tabPremiersb[0] ** k)\n      };\n      // les entetes des colonnes\n      for (let m = 0; m < tabMultiplicitesb[1] + 1; m++) {\n        for (let l = 0; l < tabMultiplicitesb[2] + 1; l++) {\n          entColonnesCorr.push(tabPremiersb[1] + '^{' + m + '}\\\\times' + tabPremiersb[2] + '^{' + l + '}')\n          entColonnesCorrRes.push(tabPremiersb[1] ** m * tabPremiersb[2] ** l)\n        };\n      };\n      // tableaux pour les permutations circulaires\n      const tabTempCorr = entLignesCorr\n      const tab1TempCorr = entLignesCorrRes\n      // on y affecte les lignes\n      // on supprime le x de l'entete des colonnes\n      entColonnesCorr.shift()\n      entColonnesCorrRes.shift()\n      // on affecte ça aux lignes;\n      entLignesCorr = entColonnesCorr\n      entLignesCorrRes = entColonnesCorrRes\n      // on remet le x en colonnes et on ajoute le reste\n      entColonnesCorr = ['\\\\times'].concat(tabTempCorr)\n      entColonnesCorrRes = [1].concat(tab1TempCorr)\n      // le contenu des lignes\n      for (let l = 0; l < (tabMultiplicitesb[1] + 1) * (tabMultiplicitesb[2] + 1) + 1; l++) {\n        for (let c = 1; c < (tabMultiplicitesb[0] + 2); c++) {\n          // contenuLignesCorr.push(`l : `+l+`, c : `+Number(c));\n          contenuLignesCorr.push(entLignesCorr[l] + '\\\\times' + entColonnesCorr[c] + '=' + miseEnEvidence(texNombre(entLignesCorrRes[l] * entColonnesCorrRes[c])))\n        };\n      };\n      texteCorr += '<br>'\n      texteCorr += tableauColonneLigne(entColonnesCorr, entLignesCorr, contenuLignesCorr)\n      texteCorr += '<br>'\n      texteCorr += numAlpha(1) + ` $${texNombre(nombreADecomposerb)}$ a donc `\n      texteCorr += `$(${tabMultiplicitesb[0]}+1)\\\\times(${tabMultiplicitesb[1]}+1)\\\\times(${tabMultiplicitesb[2]}+1) = `\n      texteCorr += `${tabMultiplicitesb[0] + 1}\\\\times${tabMultiplicitesb[1] + 1}\\\\times${tabMultiplicitesb[2] + 1} = `\n      texteCorr += `${(tabMultiplicitesb[0] + 1) * (tabMultiplicitesb[1] + 1) * (tabMultiplicitesb[2] + 1)}$ diviseurs.<br>`\n      texteCorr += 'En effet, dans la décomposition apparait : '\n      texteCorr += ` <br> - Le facteur premier $${tabPremiersb[0]}$ avec la multiplicité $${tabMultiplicitesb[0]}$`\n      texteCorr += `, le facteur $${tabPremiersb[0]}$ apparait donc sous les formes : `\n      for (let k = 0; k < tabMultiplicitesb[0]; k++) {\n        texteCorr += `$${tabPremiersb[0]}^{` + k + '}$ ou '\n      };\n      texteCorr += `$${tabPremiersb[0]}^{` + tabMultiplicitesb[0] + `}$ d'où le facteur $(${tabMultiplicitesb[0]}+1)$.`\n\n      texteCorr += ` <br> - Le facteur premier $${tabPremiersb[1]}$ avec la multiplicité $${tabMultiplicitesb[1]}$`\n      texteCorr += `, le facteur $${tabPremiersb[1]}$ apparait donc sous les formes : `\n      for (let k = 0; k < tabMultiplicitesb[1]; k++) {\n        texteCorr += `$${tabPremiersb[1]}^{` + k + '}$ ou '\n      };\n      texteCorr += `$${tabPremiersb[1]}^{` + tabMultiplicitesb[1] + `}$ d'où le facteur $(${tabMultiplicitesb[1]}+1)$.`\n\n      texteCorr += ` <br> - Le facteur premier $${tabPremiersb[2]}$ avec la multiplicité $${tabMultiplicitesb[2]}$`\n      texteCorr += `, le facteur $${tabPremiersb[2]}$ apparait donc sous les formes : `\n      for (let k = 0; k < tabMultiplicitesb[2]; k++) {\n        texteCorr += `$${tabPremiersb[2]}^{` + k + '}$ ou '\n      };\n      texteCorr += `$${tabPremiersb[2]}^{` + tabMultiplicitesb[2] + `}$ d'où le facteur $(${tabMultiplicitesb[2]}+1)$.`\n      texteCorr += '<br>'\n      texteCorr += numAlpha(2) + ` Enfin, voici la liste des $${(tabMultiplicitesb[0] + 1) * (tabMultiplicitesb[1] + 1) * (tabMultiplicitesb[2] + 1)}$ diviseurs de $${texNombre(nombreADecomposerb)}$ issus du tableau ci-dessus : `\n      texteCorr += '$1'\n      for (let w = 1; w < listeDiviseurs(nombreADecomposerb).length; w++) {\n        texteCorr += '\\\\text{ ; }' + texNombre(listeDiviseurs(nombreADecomposerb)[w])\n      };\n      texteCorr += '.$'\n      //   break\n      // };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDeModifImportante","listerDiviseursParDecompositionFacteursPremiers2nde","listerDiviseursParDecompositionFacteursPremiers","this","sup","besoinFormulaireCaseACocher","Exercice","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","boutonAide","modalPdf","modalVideo","listeQuestions","listeCorrections","contenu","contenuCorrection","texte","texteCorr","i","cpt","nbDePremiersb","maxPremierb","rgMaxb","cribleEratostheneN","length","tabRangsb","tabRangsExclusb","k","m","push","randint","tabPremiersb","sort","a","b","tabMultiplicitesb","nombreADecomposerb","texNombre","numAlpha","entLignes","contenuLignes","entColonnes","l","tabTemp","shift","concat","c","tableauColonneLigne","entLignesCorr","entLignesCorrRes","contenuLignesCorr","entColonnesCorr","entColonnesCorrRes","tabTempCorr","tab1TempCorr","miseEnEvidence","w","listeDiviseurs","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}