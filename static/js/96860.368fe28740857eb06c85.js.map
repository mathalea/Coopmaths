{"version":3,"file":"js/96860.368fe28740857eb06c85.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C32-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec, texNombre, miseEnEvidence } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Calcul avec les puissances de dix'\n\nexport const amcReady = true // tant qu'il n'a pas été adapté à la version 2.6\nexport const amcType = 'qcmMono' // QCM\nexport const interactifType = 'qcm'\nexport const interactifReady = true\n\n/**\n * type 1 : Un nombre est donné par le produit d'un décimal par une puissance de dix, il faut l'écrire en notation scientifique\n * type 2 : On donne la notation scientifique d'un nombre et on doit trouver l'exposant manquant de 10 dans le membre de gauche.\n * @author Jean-Claude Lhote\n * 4C32-1\n */\nexport default function CalculsAvecPuissancesDeDix () {\n  Exercice.call(this)\n  this.sup = 1\n  this.sup2 = 1\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestions = 5\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.autoCorrection = []\n\n    if (this.sup === 1) this.consigne = 'Donner l\\'écriture scientifique des nombres suivants.'\n    else this.consigne = 'Compléter l\\'égalité des nombres suivants.'\n    let typeDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (parseInt(this.sup2) === 1) typeDeQuestionsDisponibles = [0, 0, 0, 1, 1]\n    else if (parseInt(this.sup2) === 2) typeDeQuestionsDisponibles = [0, 1, 1, 2, 2]\n    else typeDeQuestionsDisponibles = [2, 2, 3, 3, 3]\n\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, mantisse1, exp1, decalage, mantisse, exp, decimalstring, scientifiquestring, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) {\n      //        nombre=calcul(randint(1001,9999)/10**randint(1,6))\n      //      mantisse=calcul(nombre/10**(Math.floor(Math.log10(nombre))))\n      //        exp=Math.floor(Math.log10(nombre))\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          decalage = randint(-1, 1, 0)\n          mantisse = randint(1, 9)\n          exp = randint(1, 5)\n          break\n        case 1:\n          decalage = randint(-2, 2, 0)\n          mantisse = calcul(randint(11, 99) / 10)\n          exp = randint(1, 5)\n          break\n        case 2:\n          decalage = randint(-3, 3, 0)\n          if (randint(0, 1) === 1) mantisse = calcul(randint(111, 999) / 100)\n          else mantisse = calcul((randint(1, 9) * 100 + randint(1, 9)) / 100)\n          exp = randint(1, 7) * choice([-1, 1])\n          break\n        case 3:\n          decalage = randint(-4, 4, 0)\n          if (randint(0, 1) === 1) mantisse = calcul((randint(1, 9) * 1000 + randint(1, 19) * 5) / 1000)\n          else mantisse = calcul(randint(1111, 9999) / 1000)\n          exp = randint(3, 7) * choice([-1, 1])\n          break\n      }\n      // nombre = calcul(mantisse * 10 ** exp)\n      mantisse1 = calcul(mantisse * 10 ** decalage)\n      exp1 = exp - decalage\n\n      decimalstring = `${texNombrec(mantisse1)} \\\\times 10^{${exp1}}`\n      scientifiquestring = `${texNombre(mantisse)} \\\\times 10^{${exp}}`\n      if (this.sup === 1) {\n        texte = `$${decimalstring}$`\n        texteCorr = `$${miseEnEvidence(`${texNombrec(mantisse1)}`, 'blue')}\\\\times ${miseEnEvidence(`10^{${exp1}}`)} = ${miseEnEvidence(`${texNombre(mantisse)}\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} = ${scientifiquestring}$`\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].options = {\n          ordered: false,\n          lastChoice: 5\n        }\n        this.autoCorrection[i].propositions = [\n          {\n            texte: `$${scientifiquestring}$`,\n            statut: true\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${exp - 1}}$`,\n            statut: false\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${exp + 1}}$`,\n            statut: false\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${-exp}}$`,\n            statut: false\n          }\n        ]\n      } else {\n        texteCorr = `$${miseEnEvidence(texNombre(mantisse1), 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)}=${miseEnEvidence(texNombre(mantisse) + `\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} =${scientifiquestring}$`\n        texte = `$${texNombre(mantisse1)}\\\\times 10^{${miseEnEvidence('....')}}=${scientifiquestring}$`\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: `$${exp1}$`,\n            statut: true\n          },\n          {\n            texte: `$${exp1 - 1}$`,\n            statut: false\n          },\n          {\n            texte: `$${exp1 + 1}$`,\n            statut: false\n          },\n          {\n            texte: `$${-exp1}$`,\n            statut: false\n          }\n        ]\n        this.autoCorrection[i].options = {\n          ordered: false,\n          lastChoice: 5\n        }\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 2, '1 : Traduire en notation scientifique\\n2 : Exercice à trou']\n  this.besoinFormulaire2Numerique = ['Niveau de difficulté', 3, '1 : Facile\\n2 : Moyen\\n3 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifType","interactifReady","CalculsAvecPuissancesDeDix","Exercice","this","sup","sup2","nbCols","nbColsCorr","nbQuestions","nouvelleVersion","typeDeQuestionsDisponibles","parseInt","autoCorrection","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","mantisse1","exp1","decalage","mantisse","exp","decimalstring","scientifiquestring","i","cpt","randint","calcul","choice","texNombrec","texNombre","miseEnEvidence","enonce","options","ordered","lastChoice","propositions","statut","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}