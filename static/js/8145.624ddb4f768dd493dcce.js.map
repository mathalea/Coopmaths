{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6Algo11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","NoteLaCouleur","constructor","x","y","orientation","this","plateau","currentPos","currentOrientation","codeScratch","currentIndex","nlc","Math","ceil","testCoords","testInstruction","code","lutin","avancepion","d","s","latex","undefined","avance","tournerD","tournerG","testSequence","codes","test","sorti","pionfantome","i","length","testBoucle","repetitions","sortiboucle","Note_la_couleur","Exercice","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","typeExercice","listePackages","sup","sup2","sup3","nouvelleVersion","numeroExercice","j","objetsEnonce","objetsCorrection","listeQuestions","listeCorrections","paramsCorrection","xmin","ymin","xmax","ymax","pixelsParCm","scale","commandes_disponibles","sequences_disponibles","sequence","result","nb_couleurs","instruction","couleurs","liste_instructions","lutindepart","angledepart","xdepart","ydepart","pion","context","fond_ecran","retour_a_la_case_depart","compteur_essais_boucle","compteur_essais_sequence","texte","texteCorr","compteur","parseInt","ins1","m","ins2","n","push","creerLutin","choice","randint","color","epaisseur","pointilles","allerA","orienter","angleScratchTo2d","clone","baisseCrayon","attendre","ins3","p","ins4","q","modalUrl","modalPdf","scratchblock","mathalea2d","texteGras","listeQuestionsToContenuSansNumero","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire3Numerique","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable"],"mappings":"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","file":"js/8145.624ddb4f768dd493dcce.js","sourcesContent":["/* eslint-disable camelcase */\n/* globals mathalea */\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, randint, choice, texteGras, modalUrl, modalPdf } from '../../modules/outils.js'\nimport { attendre, angleScratchTo2d, clone, orienter, mathalea2d, scratchblock, fond_ecran, creerLutin, avance, tournerD, tournerG, baisseCrayon, allerA } from '../../modules/2d.js'\nexport const titre = 'Note la couleur'\n\n/**\n * Note_la_couleur() Exercice inspiré de l'activité débranchée de Jean-Yves Labouche Note La Couleur\n * https://www.monclasseurdemaths.fr/profs/algorithmique-scratch/note-la-couleur/\n * Ref : 6Algo11\n * Publié le 11/04/2021\n * @author Jean-Claude Lhote\n * A faire : ajouter d'autres niveaux avec des boucles, des instructions conditionnelles, des blocs définis...\n * Ajouter un pion et la correction animée.\n */\n\n/**\n * Classe NoteLaCouleur (objet Pion)\n * this.plateau est le tableau des couleurs de cases.\n * this.currentPos est {x,y} les coordonnées courantes du pion\n * this.currentOrientation est l'orientation courante du pion\n * this.codeScratch est le programme en code Latex du pion.\n * this.currentIndex est l'index qui parcourt le codeScratch...\n * this.nlc() retourne la couleur de la case sur laquelle est le pion\n * this.tesCoords(x,y) est une méthode qui dit si le point de coordonnées (x,y) est bien dans le plateau de jeu.\n * this.testInstruction(code) est une méthode qui dit si une instruction est valide (ne sort pas) et retourne un tableau\n * this.testSequence([...code]) est une méthode qui retourne true si la séquence d'instructions est valide.\n */\nclass NoteLaCouleur {\n  constructor (x = 15, y = 15, orientation = 90) {\n    this.plateau = [['Noir', 'Jaune', 'Bleu', 'Vert', 'Orange', 'Rouge', 'Orange', 'Noir', 'Jaune', 'Gris', 'Vert', 'Rose', 'Noir', 'Jaune'],\n      ['Rouge', 'Bleu', 'Orange', 'Jaune', 'Rose', 'Gris', 'Jaune', 'Rose', 'Gris', 'Jaune', 'Bleu', 'Rouge', 'Gris', 'Rouge'],\n      ['Rose', 'Vert', 'Gris', 'Rouge', 'Noir', 'Bleu', 'Vert', 'Noir', 'Vert', 'Bleu', 'Rose', 'Gris', 'Vert', 'Orange'],\n      ['Vert', 'Bleu', 'Rose', 'Vert', 'Bleu', 'Orange', 'Gris', 'Rouge', 'Orange', 'Jaune', 'Gris', 'Rouge', 'Rose', 'Bleu'],\n      ['Noir', 'Orange', 'Rouge', 'Orange', 'Jaune', 'Rouge', 'Blanc', 'Blanc', 'Noir', 'Gris', 'Orange', 'Noir', 'Jaune', 'Rose'],\n      ['Rose', 'Gris', 'Noir', 'Bleu', 'Vert', 'Bleu', 'Blanc', 'Blanc', 'Rouge', 'Bleu', 'Gris', 'Vert', 'Rouge', 'Noir'],\n      ['Noir', 'Rouge', 'Rose', 'Vert', 'Orange', 'Rose', 'Noir', 'Orange', 'Vert', 'Jaune', 'Rose', 'Noir', 'Rose', 'Vert'],\n      ['Orange', 'Gris', 'Rouge', 'Jaune', 'Noir', 'Vert', 'Rouge', 'Rose', 'Noir', 'Bleu', 'Vert', 'Jaune', 'Orange', 'Gris'],\n      ['Bleu', 'Jaune', 'Orange', 'Vert', 'Gris', 'Jaune', 'Gris', 'Orange', 'Gris', 'Rose', 'Bleu', 'Rouge', 'Bleu', 'Orange'],\n      ['Rose', 'Bleu', 'Jaune', 'Rose', 'Orange', 'Rouge', 'Bleu', 'Noir', 'Jaune', 'Gris', 'Vert', 'Jaune', 'Noir', 'Rouge']]\n    this.currentPos = { x: x, y: y }\n    this.currentOrientation = orientation\n    this.codeScratch = ''\n    this.currentIndex = 0\n    this.nlc = function () {\n      return this.plateau[Math.ceil((135 - this.currentPos.y) / 30)][Math.ceil((195 + this.currentPos.x) / 30)]\n    }\n    this.testCoords = function (x, y) {\n      if ((x < -195) || (x > 195) || (y < -135) || (y > 135)) return false\n      return true\n    }\n    /**\n       * méthode pour tester une instruction : retourne un tableau dont le premier élément indique si l'instruction est valide.\n       * c'est à dire qu'elle n'entraine pas une sortie de plateau.\n       * true -> l'instruction maintient le lutin sur le plateau\n       * false -> l'instruction le fait sortir du plateau\n       * Les autres éléments du tableau sont dans cet ordre :\n       * - les positions x et y du pion après l'instruction\n       * - son orientation après l'instruction\n       * - le code Latex de l'instruction\n       */\n    this.testInstruction = function (code, lutin) {\n      const avancepion = function (d, x, y, s) {\n        switch (s) {\n          case 0:\n          case 360:\n            y += d\n            break\n          case 90:\n          case -270:\n            x += d\n            break\n          case 180:\n          case -180:\n            y -= d\n            break\n          case 270:\n          case -90:\n            x -= d\n            break\n        }\n        return [x, y]\n      }\n      let x = this.currentPos.x\n      let y = this.currentPos.y\n      let orientation = this.currentOrientation\n      let latex\n      switch (code) {\n        case 'AV30':\n          [x, y] = avancepion(30, x, y, orientation)\n          latex = '\\\\blockmove{avancer de \\\\ovalnum{30} pas}'\n          if (lutin !== undefined) {\n            avance(30, lutin)\n          }\n          break\n        case 'AV60':\n          [x, y] = avancepion(60, x, y, orientation)\n          latex = '\\\\blockmove{avancer de \\\\ovalnum{60} pas}'\n          if (lutin !== undefined) {\n            avance(60, lutin)\n          }\n          break\n        case 'AV90':\n          [x, y] = avancepion(90, x, y, orientation)\n          latex = '\\\\blockmove{avancer de \\\\ovalnum{90} pas}'\n          if (lutin !== undefined) {\n            avance(90, lutin)\n          }\n          break\n        case 'AV120':\n          [x, y] = avancepion(120, x, y, orientation)\n          latex = '\\\\blockmove{avancer de \\\\ovalnum{120} pas}'\n          if (lutin !== undefined) {\n            avance(120, lutin)\n          }\n          break\n\n        case 'TD90':\n          if (orientation === 180) orientation = -90\n          else orientation += 90\n          latex = '\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{90} degrés}'\n          if (lutin !== undefined) {\n            tournerD(90, lutin)\n          }\n          break\n        case 'TG90':\n          if (orientation === -90) orientation = 180\n          else orientation -= 90\n          latex = '\\\\blockmove{tourner \\\\turnleft{} de \\\\ovalnum{90} degrés}'\n          if (lutin !== undefined) {\n            tournerG(90, lutin)\n          }\n          break\n        case 'TD180':\n        case 'TG180':\n          if (orientation === 0) orientation = 180\n          else if (orientation === -90) orientation = 90\n          else if (orientation === 90) orientation = -90\n          else orientation = 0\n          latex = '\\\\blockmove{tourner \\\\turnright{} de \\\\ovalnum{180} degrés}'\n          if (lutin !== undefined) {\n            tournerD(180, lutin)\n          }\n          break\n        case 'NLC':\n          latex = '\\\\blocklist{Note la couleur}'\n          break\n      }\n      if (this.testCoords(x, y)) {\n        return [true, x, y, orientation, latex, lutin]\n      } else return [false, this.currentPos.x, this.currentPos.y, this.currentOrientation, latex, lutin]\n    }\n\n    /**\n        * méthode pour tester une séquence : retourne\n        *\n        * [true,x,y,orientation] si la séquence reste dans le jeu\n        * [false,x,y,orientation] en cas de sortie de plateau.\n        */\n    this.testSequence = function (codes) {\n      let sorti = false\n      let test\n      const pionfantome = new NoteLaCouleur()\n      pionfantome.currentPos.x = this.currentPos.x\n      pionfantome.currentPos.y = this.currentPos.y\n      pionfantome.currentOrientation = this.currentOrientation\n      for (let i = 0; i < codes.length; i++) {\n        test = pionfantome.testInstruction(codes[i])\n        if (!test[0]) { // si le lutin est sorti du plateau pendant l'instruction\n          sorti = true\n          break\n        } else {\n          pionfantome.currentPos.x = test[1]\n          pionfantome.currentPos.y = test[2]\n          pionfantome.currentOrientation = test[3]\n        }\n      }\n      // si il est sorti, alors la séquence est false, sinon, elle est true.\n      return [!sorti, pionfantome.currentPos.x, pionfantome.currentPos.y, pionfantome.currentOrientation]\n    }\n    /**\n     *\n     * @param {number} repetitions\n     * @param {string[]} codes la séquence d'instructions à répéter\n     * @returns {boolean} true si la boucle n'a à aucun moment fait sortir le lutin du plateau, false sinon\n     */\n    this.testBoucle = function (repetitions, codes) {\n      let sortiboucle = false\n      let test\n      const pionfantome = new NoteLaCouleur()\n      pionfantome.currentPos.x = this.currentPos.x\n      pionfantome.currentPos.y = this.currentPos.y\n      pionfantome.currentOrientation = this.currentOrientation\n      for (let i = 0; i < repetitions; i++) {\n        test = pionfantome.testSequence(codes)\n        if (!test[0]) { // si le lutin est sorti pendant la séquence alors la boucle n'est pas valide.\n          sortiboucle = true\n          break\n        } else { // il n'est pas sorti, on continue le test à partir de la nouvelle position\n          pionfantome.currentPos.x = test[1]\n          pionfantome.currentPos.y = test[2]\n          pionfantome.currentOrientation = test[3]\n        }\n      }\n      // Si il est sorti, alors on retourne false en premier argument, sinon, on retourne true.\n      return [!sortiboucle, pionfantome.currentPos.x, pionfantome.currentPos.y, pionfantome.currentOrientation]\n    }\n  }\n}\n/**\n * Fonction exercice.\n */\nexport default function Note_la_couleur () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.typeExercice = 'Scratch'\n  this.listePackages = 'scratch3'\n  this.sup = true\n  this.sup2 = 1\n  this.sup3 = 4\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let j, test\n    let objetsEnonce, objetsCorrection\n    const paramsCorrection = { xmin: -22.5, ymin: -17.25, xmax: 22.5, ymax: 17.25, pixelsParCm: 20, scale: 1 }\n\n    let commandes_disponibles; const sequences_disponibles = []; let sequence; let result; let nb_couleurs; let instruction; let couleurs; let liste_instructions\n\n    let lutin, lutindepart\n    let angledepart\n    let xdepart\n    let ydepart\n    context.unitesLutinParCm = 20 * 30 / 52\n    context.pixelsParCm = 20\n    let pion\n    if (this.sup) {\n      objetsCorrection = [fond_ecran('assets/images/nlc_an.png', -450, -345, 900, 690)]\n      objetsEnonce = [fond_ecran('assets/images/nlc_an.png', -450, -345, 900, 690)]\n    } else {\n      objetsCorrection = [fond_ecran('assets/images/nlc_sn.png', -450, -345, 900, 690)]\n      objetsEnonce = [fond_ecran('assets/images/nlc_sn.png', -450, -345, 900, 690)]\n    }\n    let texte = ''\n    let texteCorr = ''\n    let compteur = 0\n    let retour_a_la_case_depart\n    let compteur_essais_boucle\n    let compteur_essais_sequence\n    switch (parseInt(this.sup2)) {\n      case 1: {\n        commandes_disponibles = [['AV30', 'AV30', 'AV60', 'AV60', 'AV90', 'AV120'], ['TD90', 'TD90', 'TG90', 'TG90', 'TD90', 'TG90', 'TG180']]\n        for (let m = 0, ins1; m < 6; m++) {\n          for (let n = 0, ins2; n < 7; n++) {\n            ins1 = commandes_disponibles[0][m]\n            ins2 = commandes_disponibles[1][n]\n            sequences_disponibles.push([ins1, ins2, 'NLC'], [ins2, ins1, 'NLC'])\n          }\n        }\n        retour_a_la_case_depart = true\n        while (retour_a_la_case_depart) {\n          objetsEnonce.length = 1\n          lutin = creerLutin()\n          angledepart = choice([90, 0, -90, 180])\n          xdepart = -195 + randint(4, 9) * 30\n          ydepart = -135 + randint(3, 6) * 30\n          pion = new NoteLaCouleur(xdepart, ydepart, angledepart)\n          lutin.color = 'green'\n          lutin.epaisseur = 3\n          lutin.pointilles = 2\n          allerA(xdepart, ydepart, lutin)\n          orienter(angleScratchTo2d(angledepart), lutin)\n          lutindepart = clone(lutin)\n          baisseCrayon(lutindepart)\n          allerA(xdepart, ydepart, lutindepart)\n          objetsEnonce.push(lutindepart)\n          baisseCrayon(lutin)\n          compteur++\n          if (compteur > 5) break\n          pion.codeScratch = ''\n          couleurs = []\n          nb_couleurs = parseInt(this.sup3)\n          liste_instructions = []\n          j = 0\n          compteur_essais_sequence = 0\n          pion.codeScratch = '\\\\begin{scratch}[print,fill,blocks]\\n \\\\blockinit{quand \\\\greenflag est cliqué}\\n '\n          pion.codeScratch += `\\\\blockmove{aller à x: \\\\ovalnum{${xdepart}} y: \\\\ovalnum{${ydepart}}}\\n \\\\blockmove{s'orienter à \\\\ovalnum{${angledepart}}}\\n`\n          pion.currentIndex += pion.codeScratch.length\n          while (nb_couleurs > j && compteur_essais_sequence < 10) {\n            compteur_essais_sequence = 0\n            sequence = choice(sequences_disponibles)\n            test = pion.testSequence(sequence)\n            while (!test[0] && compteur_essais_sequence < 10) {\n              compteur_essais_sequence++\n              sequence = choice(sequences_disponibles)\n              test = pion.testSequence(sequence)\n            }\n            if (compteur_essais_sequence < 10) {\n              retour_a_la_case_depart = false\n              for (let i = 0; i < sequence.length; i++) {\n                instruction = sequence[i]\n                result = pion.testInstruction(instruction, lutin)\n                if (instruction === 'NLC') {\n                  liste_instructions.push(instruction)\n                  couleurs.push(pion.nlc())\n                  j++\n                  pion.codeScratch += result[4] + '\\n'\n                  pion.currentIndex += result[4].length + 1\n                  lutin = result[5]\n                  attendre(5, lutin)\n                } else {\n                  liste_instructions.push(instruction)\n                  pion.currentPos.x = result[1]\n                  pion.currentPos.y = result[2]\n                  pion.currentOrientation = result[3]\n                  pion.codeScratch += result[4] + '\\n'\n                  pion.currentIndex += result[4].length + 1\n                  lutin = result[5]\n                }\n              }\n            } else {\n              angledepart = choice([90, 0, -90, 180])\n              xdepart = -195 + randint(4, 9) * 30\n              ydepart = -135 + randint(3, 6) * 30\n            }\n          }\n        }\n\n        break\n      }\n      case 2: { // programmes à boucles\n        commandes_disponibles = [['AV30', 'AV60', 'AV90'], ['TD90', 'TG90', 'TD90', 'TG180']]\n        for (let m = 0, ins1; m < 3; m++) {\n          for (let n = 0, ins2; n < 4; n++) {\n            for (let p = 0, ins3; p < 3; p++) {\n              for (let q = 0, ins4; q < 4; q++) {\n                ins1 = commandes_disponibles[0][m]\n                ins2 = commandes_disponibles[1][n]\n                ins3 = commandes_disponibles[0][p]\n                ins4 = commandes_disponibles[1][q]\n                sequences_disponibles.push([ins1, ins2, 'NLC', ins3, ins4], [ins2, ins1, 'NLC', ins3, ins4], [ins1, ins2, 'NLC', ins4, ins3], [ins2, ins1, 'NLC', ins4, ins3],\n                  [ins1, ins2, ins3, 'NLC', ins4], [ins2, ins1, ins4, ins3, 'NLC'], [ins1, 'NLC', ins2, ins3, ins4], [ins2, 'NLC', ins1, ins4, ins3])\n              }\n            }\n          }\n        }\n\n        retour_a_la_case_depart = true\n        couleurs = []\n        nb_couleurs = parseInt(this.sup3)\n        liste_instructions = []\n        const repetitions = nb_couleurs - 1\n        while (retour_a_la_case_depart) {\n          objetsEnonce.length = 1\n          lutin = creerLutin()\n          angledepart = choice([90, 0, -90, 180])\n          xdepart = -195 + randint(4, 9) * 30\n          ydepart = -135 + randint(3, 6) * 30\n          pion = new NoteLaCouleur(xdepart, ydepart, angledepart)\n          pion.codeScratch = ''\n          lutin.color = 'green'\n          lutin.epaisseur = 3\n          lutin.pointilles = 2\n          allerA(xdepart, ydepart, lutin)\n          orienter(angleScratchTo2d(angledepart), lutin)\n          lutindepart = clone(lutin)\n          objetsEnonce.push(lutindepart)\n          baisseCrayon(lutin)\n          compteur++\n          if (compteur > 5) break // 5 tentatives infructueuses -> On sort de la boucle.\n          compteur_essais_boucle = 0\n          pion.codeScratch = '\\\\begin{scratch}[print,fill,blocks]\\n \\\\blockinit{quand \\\\greenflag est cliqué}\\n '\n          pion.codeScratch += `\\\\blockmove{aller à x: \\\\ovalnum{${xdepart}} y: \\\\ovalnum{${ydepart}}}\\n \\\\blockmove{s'orienter à \\\\ovalnum{${angledepart}}}\\n`\n          pion.currentIndex += pion.codeScratch.length\n          // On choisit le code à l'intérieur de la boucle\n          sequence = choice(sequences_disponibles)\n          test = pion.testBoucle(repetitions, sequence)\n          while (!test[0] && compteur_essais_boucle < 5) { // On tente 5 boucles à cette position, après on change de position.\n            compteur_essais_boucle++\n            sequence = choice(sequences_disponibles)\n            test = pion.testBoucle(repetitions, sequence)\n          }\n          if (compteur_essais_boucle < 5) {\n            retour_a_la_case_depart = false\n            pion.codeScratch += `\\\\blockrepeat{répéter \\\\ovalnum{${repetitions}} fois}{\\n`\n            liste_instructions.push('début de boucle')\n            for (let i = 0; i < sequence.length; i++) {\n              instruction = sequence[i]\n              result = pion.testInstruction(instruction, lutin)\n              if (instruction === 'NLC') {\n                liste_instructions.push(instruction)\n                couleurs.push(pion.nlc())\n                pion.codeScratch += result[4] + '\\n'\n                pion.currentIndex += result[4].length + 1\n                lutin = result[5]\n                attendre(5, lutin)\n              } else {\n                liste_instructions.push(instruction)\n                pion.currentPos.x = result[1]\n                pion.currentPos.y = result[2]\n                pion.currentOrientation = result[3]\n                pion.codeScratch += result[4] + '\\n'\n                pion.currentIndex += result[4].length + 1\n                lutin = result[5]\n              }\n            }\n            liste_instructions.push('fin de boucle')\n            pion.codeScratch += '} \\n'\n            // on recommence n-1 fois pour faire avancer le pion et le lutin\n            for (let j = 1; j < repetitions; j++) {\n              for (let i = 0; i < sequence.length; i++) {\n                instruction = sequence[i]\n                result = pion.testInstruction(instruction, lutin)\n                if (instruction === 'NLC') {\n                  couleurs.push(pion.nlc())\n                  lutin = result[5]\n                  attendre(5, lutin)\n                } else {\n                  pion.currentPos.x = result[1]\n                  pion.currentPos.y = result[2]\n                  pion.currentOrientation = result[3]\n                  lutin = result[5]\n                }\n              }\n            }\n            sequence = choice(sequences_disponibles)\n            test = pion.testSequence(sequence)\n            while (!test[0]) {\n              sequence = choice(sequences_disponibles)\n              test = pion.testSequence(sequence)\n            }\n            for (let i = 0; i < sequence.length; i++) {\n              instruction = sequence[i]\n              result = pion.testInstruction(instruction, lutin)\n              if (instruction === 'NLC') {\n                liste_instructions.push(instruction)\n\n                couleurs.push(pion.nlc())\n                pion.codeScratch += result[4] + '\\n'\n                pion.currentIndex += result[4].length + 1\n                lutin = result[5]\n                attendre(5, lutin)\n              } else {\n                liste_instructions.push(instruction)\n                pion.currentPos.x = result[1]\n                pion.currentPos.y = result[2]\n                pion.currentOrientation = result[3]\n                pion.codeScratch += result[4] + '\\n'\n                pion.currentIndex += result[4].length + 1\n                lutin = result[5]\n              }\n            }\n          } else {\n            angledepart = choice([90, 0, -90, 180])\n            xdepart = -195 + randint(4, 9) * 30\n            ydepart = -135 + randint(3, 6) * 30\n          }\n        }\n        break\n      }\n      case 3:\n\n        break\n\n      case 4:\n\n        break\n    }\n    //  objetsEnonce.push ();\n    // objetsCorrection.push();\n\n    //      paramsEnonce = { xmin:-10, ymin: -10, xmax: 10, ymax: 10, pixelsParCm: 20, scale: 1, mainlevee: false};\n    //    texte += mathalea2d(paramsEnonce, objetsEnonce);\n    //  texteCorr += mathalea2d(paramsCorrection, objetsCorrection);\n    pion.codeScratch += '\\\\end{scratch}'\n    texte = `Cet exercice est tiré de l'excellente activité débranchée ${modalUrl(numeroExercice, 'https://www.monclasseurdemaths.fr/profs/algorithmique-scratch/note-la-couleur/', 'Note la couleur', 'info circle')} de Jean-Yves Labouche.<br>`\n    texte += 'Il a été conçu pour étendre les possibilités de fiches proposées.<br>'\n    texte += `N'hésitez pas à vous rendre sur le site ${modalUrl(numeroExercice + 1, 'https://www.monclasseurdemaths.fr', 'Mon classeur de Maths.fr', 'info circle')} de Jean-Yves pour y découvrir la multitude de ressources qu'il propose.<br>`\n    texte += `Pour jouer, regarder les règles du jeu${modalPdf(numeroExercice + 2, '../../pdf/reglesnlc.pdf', 'Règles du jeu', 'Règles - PDF', 'file pdf')} .<br>`\n    texte += 'Exécuter le programme et trouver la succession de couleur.<br>'\n    texte += '<table><tr><td>' +\n      scratchblock(pion.codeScratch) +\n      '</td><td>' +\n      mathalea2d(paramsCorrection, objetsEnonce) +\n      '</td></tr></table>'\n    texteCorr = 'On obtient la série de couleurs suivante :<br> '\n    texteCorr += `${texteGras(couleurs[0])} `\n    for (let i = 1; i < couleurs.length; i++) {\n      texteCorr += `- ${texteGras(couleurs[i])} `\n    }\n    texteCorr += '<br><br>' + mathalea2d(paramsCorrection, objetsCorrection, lutin)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Plateau avec numéros', true]\n  this.besoinFormulaire2Numerique = ['Type de programme', 2, '1 : Avancer et tourner\\n2 : Boucles']\n  this.besoinFormulaire3Numerique = ['Nombre de couleurs (Maximmum 6)', 6]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}