{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["amcReady","titre","Reconnaitre_quadrilatere_particulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","sortieHtml","correctionDetaillee","qcmDisponible","modeQcm","nouvelleVersion","qcm","espace","listeQuestions","listeCorrections","liste_de_questions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","tabrep","tabicone","push","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","codageAngleDroit","segment","pointilles","mathalea","sortieAMC","shuffle2tableaux","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","mg32Editable","numeroExercice","listePackages"],"mappings":"wMAGO,MAAMA,GAAW,EAEXC,EAAQ,qEAON,SAASC,IACtBC,eAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,GAChBD,KAAKE,YAAc,EACnBF,KAAKG,uBAAwB,EAC7BH,KAAKI,OAAS,EACdJ,KAAKK,WAAa,EAClBL,KAAKM,+BAAgC,EACrCC,WAAaP,KAAKQ,qBAAsB,EAAOR,KAAKQ,qBAAsB,EAC1ER,KAAKS,eAAc,EACnBT,KAAKU,SAAQ,EAEbV,KAAKW,gBAAkB,WACrBX,KAAKY,IAAI,CAAC,OAAO,GAAG,uCAAuC,GAC3D,IAAIC,EAAS,GAEXA,EADEN,WACQ,SAEA,UAEZP,KAAKc,eAAiB,GACtBd,KAAKe,iBAAmB,GAExB,IAAIC,GAAqBC,SAAQ,EAACC,SAAO,CAAC,WAAW,cAAaA,SAAO,CAAC,aAAa,gBAAeA,SAAO,CAAC,SAAS,SAAS,aAChI,IAAK,IAAWC,EAAOC,EAAdC,EAAI,EAAoBC,EAAM,EAAGD,EAAIrB,KAAKE,aAAeoB,EAAM,IACvE,CAGC,IAAIC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAKC,EAAOC,EAAQC,EAAQC,EAAQC,EAAIC,EAAIC,EAAsBC,EAAuBC,EAAuBC,EAAaC,EAAOC,EAClJ,OAHArB,EAAQ,GACRC,EAAY,GAEJJ,EAAmBK,IACvB,IAAK,WACDF,EAAQ,0EACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,wGACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,UAAO,EAAG,GACdf,GAAIe,SAAM,EAAG,GACbd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GAEzBY,GAAeM,SAAa,KAAM,OAAQrB,EAAGC,EAAGA,EAAGC,EAAGA,EAAGC,EAAGA,EAAGH,GAU3DvB,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKU,GAAc,QACzGlB,GAAa,oBACb,MACJ,IAAK,WACDD,EAAQ,4GACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,0IACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,UAAO,EAAG,GACdf,GAAIe,SAAM,EAAG,GACbd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GACzBG,GAASqB,SAAiBzB,EAAGE,EAAGH,GAEhCS,GAAMkB,SAAQ5B,EAAGE,GACjBS,GAAMiB,SAAQ3B,EAAGE,GACjBO,EAAImB,YAAa,EACjBlB,EAAIkB,YAAa,EACjBhB,GAAyBQ,SAAa,IAAK,OAAQjB,EAAGJ,EAAGI,EAAGF,GAC5DY,GAAyBO,SAAa,MAAO,OAAQjB,EAAGH,EAAGG,EAAGD,GAC1D1B,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKC,EAAOI,EAAIC,EAAIE,EAAuBC,GAAwB,QACzJjB,GAAa,oBACb,MACJ,IAAK,aACDD,EAAQ,iEACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,+FACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,SAAM,EAAG,GACbf,GAAIe,SAAM,IAAK,KACfd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GACzBI,GAAUoB,SAAiB3B,EAAEC,EAAEC,GAC/BM,GAAUmB,SAAiB1B,EAAEC,EAAEC,GAC/BM,GAAUkB,SAAiBzB,EAAEC,EAAEH,GAW3BvB,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKE,EAAQC,EAAQC,GAAS,QACpHZ,GAAa,sBACb,MACJ,IAAK,aACDD,EAAQ,4GACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,0IACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,SAAM,EAAG,GACbf,GAAIe,SAAM,IAAK,KACfd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GAKzBO,GAAMkB,SAAQ5B,EAAGE,GACjBS,GAAMiB,SAAQ3B,EAAGE,GAOjBS,GAAwBS,SAAa,KAAM,OAAQjB,EAAGJ,EAAGI,EAAGH,EAAGG,EAAGF,EAAGE,EAAGD,GACpE1B,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKO,EAAsBF,EAAIC,GAAK,QAC1Hd,GAAa,sBACb,MACJ,IAAK,SACDD,EAAQ,iGACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,+HACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,SAAM,EAAG,GACbf,GAAIe,SAAM,IAAK,KACfd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GACzBI,GAAUoB,SAAiB3B,EAAEC,EAAEC,GAC/BM,GAAUmB,SAAiB1B,EAAEC,EAAEC,GAC/BM,GAAUkB,SAAiBzB,EAAEC,EAAEH,GAC/Be,GAAeM,SAAa,KAAM,OAAQrB,EAAGC,EAAGA,EAAGC,EAAGA,EAAGC,EAAGA,EAAGH,GAU3DvB,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKE,EAAQC,EAAQC,EAAQM,GAAc,QACjIlB,GAAa,kBACb,MACJ,IAAK,SACDD,EAAQ,kIACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,gKACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,SAAM,EAAG,GACbf,GAAIe,SAAM,IAAK,KACfd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GACzBG,GAASqB,SAAiBzB,EAAEE,EAAED,GAK9BO,GAAMkB,SAAQ5B,EAAGE,GACjBS,GAAMiB,SAAQ3B,EAAGE,GACjBO,EAAImB,YAAa,EACjBlB,EAAIkB,YAAa,EACjBjB,GAAwBS,SAAa,KAAM,OAAQjB,EAAGJ,EAAGI,EAAGH,EAAGG,EAAGF,EAAGE,EAAGD,GACpE1B,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKC,EAAOM,EAAsBF,EAAIC,GAAK,QACjId,GAAa,kBACb,MACJ,IAAK,SACDD,EAAQ,gGACRoB,EAAO,CAAC,UAAU,YAAY,QAAQ,UAAU,mBAChDC,EAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAClBxC,KAAKY,IAAI,GAAG6B,KAAK,CAAE,8HACnBF,EACAC,IACAjB,GAAImB,SAAM,EAAG,GACblB,GAAIkB,SAAM,EAAG,GACbjB,GAAIiB,SAAM,EAAG,GACbhB,GAAIgB,SAAM,EAAG,GACbf,GAAIe,SAAM,IAAK,KACfd,GAAOe,SAASpB,EAAGC,EAAGC,EAAGC,GACzBG,GAASqB,SAAiB3B,EAAEC,EAAEC,GAI9Ba,GAAeM,SAAa,KAAM,OAAQrB,EAAGC,EAAGA,EAAGC,EAAGA,EAAGC,EAAGA,EAAGH,GAU3DvB,KAAKQ,sBAAsBY,GAAYyB,SAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAGrB,EAAKC,EAAOS,GAAc,QAChHlB,GAAa,kBAGrB,GAAIpB,KAAKU,UAAU2C,SAASC,UAAW,CACrCnC,GAAQ,8BAA6BN,OACrC0C,SAAiBhB,EAAQC,GACzBpB,EAAU,GACV,IAAK,IAAIC,EAAE,EAAGA,EAAE,EAAGA,IACjBF,GAAU,iBAAgBoB,EAAOlB,KAAOR,EACxB,GAAb2B,EAASnB,GACXD,GAAc,sBAAqBmB,EAAOlB,KAAOR,EAEjDO,GAAc,iBAAgBmB,EAAOlB,KAAOR,GAIN,GAAvCb,KAAKc,eAAe0C,QAAQrC,KAE9BnB,KAAKc,eAAe2B,KAAKtB,GACzBnB,KAAKe,iBAAiB0B,KAAKrB,GAC3BC,KAEFC,KAEFmC,SAAwBzD,S,6BC7Pb,SAASD,IAEtBC,KAAKH,MAAQ,GACbG,KAAKC,SAAW,GAChBD,KAAK0D,mBAAqB,GAC1B1D,KAAKc,eAAiB,GACtBd,KAAKe,iBAAmB,GACxBf,KAAK2D,aAAe,GACpB3D,KAAK4D,QAAU,GACf5D,KAAK6D,kBAAoB,GACzB7D,KAAKE,YAAc,GACnBF,KAAKI,OAAS,EACdJ,KAAKK,WAAa,EAClBL,KAAK8D,QAAU,EACf9D,KAAK+D,YAAc,EACnB/D,KAAKgE,QAAS,EAEdhE,KAAKiE,2BAA4B,EACjCjE,KAAKkE,uBAAwB,EAC7BlE,KAAKmE,6BAA8B,EACnCnE,KAAKoE,oBAAqB,EAC1BpE,KAAKG,uBAAwB,EAC7BH,KAAKqE,kBAAmB,EACxBrE,KAAKsE,sBAAuB,EAC5BtE,KAAKuE,mBAAoB,EACzBvE,KAAKwE,uBAAwB,EAC7BxE,KAAKM,+BAAgC,EACrCN,KAAKQ,qBAAsB,EAC3BR,KAAKyE,MAAQ,GACbzE,KAAK0E,YAAa,EAClB1E,KAAK2E,gBAAkB,GAMvB3E,KAAK4E,mBAAoB,EACzB5E,KAAKY,KAAM,EACXZ,KAAKS,eAAgB,EACrBT,KAAKU,SAAU,EAEfV,KAAK6E,cAAe,EACpB7E,KAAKW,gBAAkB,SAAUmE,KACjC9E,KAAK+E,cAAgB,G","file":"js/1406.93d21f5f69158fb659bc.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,choice,shuffle,shuffle2tableaux} from '../../modules/outils.js'\nimport {point,segment,polygone,codageAngleDroit,codeSegments,mathalea2d} from '../../modules/2d.js'\nexport const amcReady = true\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @Auteur Rémi Angot\n * Référence 6G33\n*/\nexport default function Reconnaitre_quadrilatere_particulier() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"\";\n  this.nbQuestions = 3;\n  this.nbQuestionsModifiable = false;\n  this.nbCols = 2; // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2; // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true;\n  sortieHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n  this.qcmDisponible=true\n  this.modeQcm=false\n\n  this.nouvelleVersion = function () {\n    this.qcm=['6G33',[],\"Trouver la nature d'un quadrilatère.\",1]\n    let espace =``;\n    if (sortieHtml) {\n      espace = `&emsp;`;\n    } else {\n      espace = `\\\\qquad`;\n    }\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let liste_de_questions = shuffle([choice(['losange1','losange2']),choice(['rectangle1','rectangle2']),choice(['carre1','carre2','carre3'])])\n    for (let i = 0, texte, texteCorr,cpt = 0; i < this.nbQuestions && cpt < 50;)\n     {\n      texte = '';\n      texteCorr = '';\n      let A,B,C,D,O,ABCD,codage,codage1,codage2,codage3,sAC,sBD,marquesDemiDiagonales,marquesDemiDiagonales1,marquesDemiDiagonales2,marquesCotes,tabrep,tabicone;\n      switch (liste_de_questions[i]) {\n          case 'losange1':\n              texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[1,0,0,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(2, 3);\n              C = point(0, 6);\n              D = point(-2, 3);\n              O = point(0, 3);\n              ABCD = polygone(A, B, C, D);\n              //codage = codageAngleDroit(C, O, B);\n              marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              // sAC = segment(A, C);\n              // sBD = segment(B, D);\n              // sOA = segment(O, A);\n              // sOB = segment(O, B);\n              // sOC = segment(O, C);\n              // sOD = segment(O, D);\n              // sAC.pointilles = true;\n              // sBD.pointilles = true;\n              // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-3,xmax:3,ymin:-1,ymax:7},ABCD,marquesCotes)+\"<br>\"}\n              texteCorr += \"C'est un losange.\"\n              break;\n          case 'losange2':\n              texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[1,0,0,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(2, 3);\n              C = point(0, 6);\n              D = point(-2, 3);\n              O = point(0, 3);\n              ABCD = polygone(A, B, C, D);\n              codage = codageAngleDroit(C, O, B);\n              //marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              sAC = segment(A, C);\n              sBD = segment(B, D);\n              sAC.pointilles = true;\n              sBD.pointilles = true;\n              marquesDemiDiagonales1 = codeSegments(\"|\", \"blue\", O, A, O, C);\n              marquesDemiDiagonales2 = codeSegments(\"|||\", \"blue\", O, B, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-3,xmax:3,ymin:-1,ymax:7},ABCD,codage,sAC,sBD,marquesDemiDiagonales1,marquesDemiDiagonales2)+\"<br>\"}\n              texteCorr += \"C'est un losange.\"\n              break;\n          case 'rectangle1':\n              texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[0,1,0,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant 3 angles droits ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(5, 0);\n              C = point(5, 3);\n              D = point(0, 3);\n              O = point(2.5, 1.5);\n              ABCD = polygone(A, B, C, D);\n              codage1 = codageAngleDroit(A,B,C);\n              codage2 = codageAngleDroit(B,C,D);\n              codage3 = codageAngleDroit(C,D,A);\n              //marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              // sAC = segment(A, C);\n              // sBD = segment(B, D);\n              // sOA = segment(O, A);\n              // sOB = segment(O, B);\n              // sOC = segment(O, C);\n              // sOD = segment(O, D);\n              // sAC.pointilles = true;\n              // sBD.pointilles = true;\n              // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-1,xmax:6,ymin:-1,ymax:4},ABCD,codage1,codage2,codage3)+\"<br>\"}\n              texteCorr += \"C'est un rectangle.\"\n              break;\n          case 'rectangle2':\n              texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[0,1,0,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(5, 0);\n              C = point(5, 3);\n              D = point(0, 3);\n              O = point(2.5, 1.5);\n              ABCD = polygone(A, B, C, D);\n              // codage1 = codageAngleDroit(A,B,C);\n              // codage2 = codageAngleDroit(B,C,D);\n              // codage3 = codageAngleDroit(C,D,A);\n              //marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              sAC = segment(A, C);\n              sBD = segment(B, D);\n              // sOA = segment(O, A);\n              // sOB = segment(O, B);\n              // sOC = segment(O, C);\n              // sOD = segment(O, D);\n              // sAC.pointilles = true;\n              // sBD.pointilles = true;\n              marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-1,xmax:6,ymin:-1,ymax:4},ABCD,marquesDemiDiagonales,sAC,sBD)+\"<br>\"}\n              texteCorr += \"C'est un rectangle.\"\n              break;\n          case 'carre1':\n              texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[0,0,1,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(3, 0);\n              C = point(3, 3);\n              D = point(0, 3);\n              O = point(1.5, 1.5);\n              ABCD = polygone(A, B, C, D);\n              codage1 = codageAngleDroit(A,B,C);\n              codage2 = codageAngleDroit(B,C,D);\n              codage3 = codageAngleDroit(C,D,A);\n              marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              // sAC = segment(A, C);\n              // sBD = segment(B, D);\n              // sOA = segment(O, A);\n              // sOB = segment(O, B);\n              // sOC = segment(O, C);\n              // sOD = segment(O, D);\n              // sAC.pointilles = true;\n              // sBD.pointilles = true;\n              // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage1,codage2,codage3,marquesCotes)+\"<br>\"}\n              texteCorr += \"C'est un carré.\"\n              break;\n          case 'carre2':\n              texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[0,0,1,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone]) \n              A = point(0, 0);\n              B = point(3, 0);\n              C = point(3, 3);\n              D = point(0, 3);\n              O = point(1.5, 1.5);\n              ABCD = polygone(A, B, C, D);\n              codage = codageAngleDroit(C,O,D);\n              // codage2 = codageAngleDroit(B,C,D);\n              // codage3 = codageAngleDroit(C,D,A);\n              // codage4 = codageAngleDroit(D,A,B);\n              // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              sAC = segment(A, C);\n              sBD = segment(B, D);\n              sAC.pointilles = true;\n              sBD.pointilles = true;\n              marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage,marquesDemiDiagonales,sAC,sBD)+\"<br>\"}\n              texteCorr += \"C'est un carré.\"\n              break;\n          case 'carre3':\n              texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\";\n              tabrep=['losange','rectangle','carré','trapèze','parallélogramme']\n              tabicone=[0,0,1,0,0]\n              this.qcm[1].push([`Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ? \\\\\\\\ \\n Réponses possibles : `,\n              tabrep,\n              tabicone])\n              A = point(0, 0);\n              B = point(3, 0);\n              C = point(3, 3);\n              D = point(0, 3);\n              O = point(1.5, 1.5);\n              ABCD = polygone(A, B, C, D);\n              codage = codageAngleDroit(A,B,C);\n              // codage2 = codageAngleDroit(B,C,D);\n              // codage3 = codageAngleDroit(C,D,A);\n              // codage4 = codageAngleDroit(D,A,B);\n              marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n              // sAC = segment(A, C);\n              // sBD = segment(B, D);\n              // sOA = segment(O, A);\n              // sOB = segment(O, B);\n              // sOC = segment(O, C);\n              // sOD = segment(O, D);\n              // sAC.pointilles = true;\n              // sBD.pointilles = true;\n              // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n              if (this.correctionDetaillee) {texteCorr = mathalea2d({xmin:-1,xmax:4,ymin:-1,ymax:4},ABCD,codage,marquesCotes)+\"<br>\"}\n              texteCorr += \"C'est un carré.\"\n              break;\n      }\n      if (this.modeQcm&&!mathalea.sortieAMC) {\n        texte+=`<br>  Réponses possibles : ${espace}  `\n        shuffle2tableaux(tabrep, tabicone);\n        texteCorr=''\n        for (let i=0; i<5; i++) {\n          texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n         if (tabicone[i]==1) {\n           texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n         } else {\n           texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n         }\n       }\n      }\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  //this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n//function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n//}\n\n// Référence 6C23\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}