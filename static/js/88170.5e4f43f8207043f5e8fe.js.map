{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6P11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","questionAchat","listeDeChoses","listeDePrixUnit","index1","randint","prenoms","prenomF","prenomM","index2","length","objet","pu","n","y","x","calcul","somme","p","met","z","texte","numAlpha","texPrix","texteCorr","texteEnCouleur","texNombrec","texteEnCouleurEtGras","qtexte","qtexteCorr","questionRecette","liste","ingredient","recettes","quantites_par_pers","nbPersonneInit","nbPersonneFinal","alea1","alea2","alea3","quantite","quantiteReponse","alea4","quantiteQ2","questionDillution","uniteSolvantVolumeFinal","solute","volumeUnitaire","unite_solute","unite_solvant","volumeFinal","volumeFinalAff","questionDistance","locomotion","vitesse","duree","temps","rapport","rapportQuestion2","reponseQ1","distance","questionEchelle","distanceCarte","distanceReel","distanceCarte2","distanceReelQ2","questionRecouvrirSurface","matiere","unite","qtt_matiere_unitaire","qtt_surface","surfaceFinale","alea5","quantite2","alea6","surfaceFinale2","qttaffichage","ProportionnaliteParLinearite","question","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","listeIndexSituations","combinaisonListes","cpt","i","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/88170.5e4f43f8207043f5e8fe.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, texNombrec, prenomF, prenomM, texteEnCouleur, texPrix, texteEnCouleurEtGras, numAlpha } from '../../modules/outils.js'\nexport const titre = 'Résoudre des problèmes de proportionnalité en utilisant la linéarité simple'\n\n/**\n * On donne une relation de proportionnalité du type n objets coûtent x€ et on demande le prix de y objets\n * et le nombre d'objets qu'on peut acheter avec z€.\n * @author Jean-Claude Lhote\n * référence 6P11\n * 03/2021 : ajout de situations de proportionnalité : CGrolleau\n*/\n\n// _____ Les fonctions suivantes renvoient un objet : {texte = ; texteCorr = ;} ______\n// elles correspondent aux différentes situations problèmes\n\nfunction questionAchat () { // questions d'origine du 6P11 : achat.\n  const listeDeLieux = [\n    'dans un magasin de bricolage',\n    'dans une animalerie',\n    'au supermarché local',\n    \"à l'épicerie\",\n    'dans la boutique du musée'\n  ]\n  const listeDeChoses = [[]]\n  const listeDePrixUnit = [[]]\n  listeDeChoses[0] = [\n    'articles',\n    'outils',\n    'accessoires',\n    \"pièces d'outillage\",\n    'pinceaux',\n    'ampoules',\n    'tournevis',\n    'spatules',\n    'raccords de tuyaux'\n  ]\n  listeDeChoses[1] = [\n    'poissons rouges',\n    'cannetons',\n    'perruches',\n    'phasmes',\n    'colliers anti-puces',\n    'souris',\n    'lapereaux',\n    'paquets de graines'\n  ]\n  listeDeChoses[2] = [\n    'sets de tables',\n    'verres',\n    'assiettes',\n    'os à macher',\n    'dosettes de café',\n    'packs de lait',\n    'paquets de pâtes'\n  ]\n  listeDeChoses[3] = [\n    'mangues',\n    'ananas',\n    'fruits de la passion',\n    'melons',\n    'paquets de madeleines de Commercy',\n    'bergamottes',\n    'bredeles',\n    'pots de cancoillotte'\n  ]\n  listeDeChoses[4] = [\n    'cartes',\n    'livres',\n    'gravures',\n    'puzzles',\n    'maquettes',\n    'roches',\n    'jeux de société'\n  ]\n  listeDePrixUnit[0] = [5, 4, 1.25, 3, 0.5, 1.5, 2, 6, 4.5]\n  listeDePrixUnit[1] = [1.5, 7, 20, 2.5, 25, 2, 15, 8]\n  listeDePrixUnit[2] = [1.25, 1.5, 2, 0.5, 5, 4.5, 3]\n  listeDePrixUnit[3] = [2, 2.5, 1.25, 1.5, 4, 7, 12, 3]\n  listeDePrixUnit[4] = [0.5, 5, 7, 13.5, 10, 15, 20]\n  const index1 = randint(0, 4)\n  const prenoms = [prenomF(), prenomM()]\n  const index2 = randint(0, listeDeChoses[index1].length - 1)\n  const objet = listeDeChoses[index1][index2]\n  const pu = listeDePrixUnit[index1][index2] * (1 + randint(1, 2) * 0.2 * randint(-1, 1))\n  const n = randint(3, 6)\n  const y = n * randint(2, 5)\n  const x = calcul(n * pu, 2)\n  const somme = calcul(y * pu, 2)\n  let met = false\n  let p\n  while (met === false) {\n    p = n * randint(2, 5)\n    if (p !== y) {\n      met = true\n    }\n  }\n  const z = calcul(p * pu, 2)\n  let texte = `${numAlpha(0)} ${prenoms[0]} a repéré ${listeDeLieux[index1]} des ${objet} qui l'intéressent.<br> ` +\n`Elle lit que ${n} ${objet} coûtent ${texPrix(x)} €. ` +\n`Elle veut en acheter ${y}.<br> Combien va-t-elle dépenser ?<br>`\n  let texteCorr = `${numAlpha(0)} ${y} ${objet}, c'est ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet}.<br> Si ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet} coûtent ${texPrix(x)} €, alors ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet} coutent ${texteEnCouleur(\n        texNombrec(y / n)\n      )} fois ${texPrix(x)} €.<br>` +\ntexteEnCouleurEtGras(`Donc ${prenoms[0]} dépensera ${texteEnCouleur(\n        texNombrec(y / n)\n      )} $\\\\times$ ${texPrix(x)} € = ${texPrix(somme)} €.`, 'black') + '<br><br>'\n  texte += `${numAlpha(1)} ${prenoms[1]\n        } veut lui aussi acheter ces ${objet}. Il dispose de ${texPrix(\n          z\n        )} €.<br> Combien peut-il en acheter ?<br>`\n  texteCorr += `${numAlpha(1)} ${texPrix(z)} €, c'est ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texPrix(x)} €.<br> Si avec ${texPrix(\n        x\n      )} € on peut acheter ${texteEnCouleur(\n        n,\n        'blue'\n      )} ${objet}, alors avec ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texPrix(x)} €, on peut acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} fois ${texteEnCouleur(n, 'blue')} ${objet}.<br>`\n  texteCorr += texteEnCouleurEtGras(`Donc ${prenoms[1]} pourra acheter ${texteEnCouleur(\n        texNombrec(z / x)\n      )} $\\\\times$ ${texteEnCouleur(n, 'blue')} = ${p} ${objet}.`, 'black') + '<br>'\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecette () { // questions avec des masses pour un nombre de personne dans des recettes correction : passage à l'unité\n  let texte, texteCorr\n  const liste = [ // liste des ingrédients avec différentes recettes associées et masses\n    {\n      ingredient: 'farine',\n      recettes: ['gateau au citron', 'gauffres', 'crepes', 'cake'],\n      quantites_par_pers: [20, 25, 30, 35, 40, 50] // A voir pour l'instant quantités \"simples\".\n    },\n    {\n      ingredient: 'sucre',\n      recettes: ['gateau', 'mousse au chocolat', 'pain perdu', 'riz au lait'],\n      quantites_par_pers: [15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'chocolat',\n      recettes: ['gateau', 'mousse au chocolat', 'flan', 'riz au lait'],\n      quantites_par_pers: [10, 15, 20, 25, 30, 35]\n    },\n    {\n      ingredient: 'beurre',\n      recettes: ['gateau', 'mousse au chocolat'],\n      quantites_par_pers: [10, 12, 15, 18]\n    }\n  ]\n  const nbPersonneInit = randint(2, 6) // nombre de personne indiqué dans la recette.\n  const nbPersonneFinal = randint(2, 12, [nbPersonneInit]) // nombre de personne pour lequel on veut cuisiner\n  const alea1 = randint(0, 3) // pour le choix de l'ingredient\n  const alea2 = randint(0, liste[alea1].recettes.length - 1) // pour le choix de la recette\n  const alea3 = randint(0, liste[alea1].quantites_par_pers.length - 1) // pour le choix de la quantité par personne.\n  const quantite = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneInit) // Calcul de la quantité dans la recette à partir de la qtt/personne et du nb de personne\n  const quantiteReponse = calcul(liste[alea1].quantites_par_pers[alea3] * nbPersonneFinal) // Pour la correction\n  const alea4 = randint(2, 12, [nbPersonneInit, nbPersonneFinal]) // Pour la deuxième question (on évite une réponse identique à la 1ere et à la recette.)\n  const quantiteQ2 = calcul(liste[alea1].quantites_par_pers[alea3] * alea4)\n  const prenoms = [prenomF(), prenomM()] // Choix de prénoms pour l'énoncé\n  texte = `${numAlpha(0)} ${prenoms[0]} lit sur sa recette de ${liste[alea1].recettes[alea2]} pour ${nbPersonneInit} personnes qu'il faut ${quantite} g de ${liste[alea1].ingredient}. <br>` +\n`Elle veut adapter sa recette pour ${nbPersonneFinal} personnes.` +\n`<br> Quelle masse de ${liste[alea1].ingredient} doit-elle prévoir ? <br><br>`\n  texteCorr = `${numAlpha(0)} Commençons par trouver la masse de ${liste[alea1].ingredient} pour une personne : <br>` +\n` ${nbPersonneInit} personnes, c'est ${texteEnCouleur(nbPersonneInit)} fois 1 personne. ` +\n`il faut donc ${texteEnCouleur(nbPersonneInit)} fois moins que ${quantite} g pour 1 personne.<br>` +\n`${quantite} $\\\\div $ ${texteEnCouleur(nbPersonneInit)} = ${liste[alea1].quantites_par_pers[alea3]}. <br>` +\ntexteEnCouleurEtGras(' Conclusion intermédiaire :', 'black') +\n` il faut ${liste[alea1].quantites_par_pers[alea3]} g de ${liste[alea1].ingredient} pour 1 personne. <br>` +\n        ` Cherchons maintenant la quantité nécessaire pour ${nbPersonneFinal} personnes : <br>` +\n` ${nbPersonneFinal} personnes c'est ${texteEnCouleur(nbPersonneFinal)} fois 1 personne. <br>` +\n`Donc il faut ${texteEnCouleur(nbPersonneFinal)} fois plus que ${liste[alea1].quantites_par_pers[alea3]} g de ${liste[alea1].ingredient} que pour 1 personne pour faire sa recette :` +\n`<br> ${liste[alea1].quantites_par_pers[alea3]} $\\\\times$ ${texteEnCouleur(nbPersonneFinal)} = ${quantiteReponse} <br>` +\ntexteEnCouleurEtGras(`Conclusion : ${prenoms[0]} doit utiliser ${quantiteReponse} g de ${liste[alea1].ingredient} pour ${nbPersonneFinal} personnes. `, 'black') +\n' <br><br>'\n  texte += `${numAlpha(1)} ${prenoms[1]} utilise la même recette de ${liste[alea1].recettes[alea2]}. Il dispose de ${quantiteQ2} g de ${liste[alea1].ingredient}. <br>` +\n' Pour combien de personnes au maximum peut-il cuisiner ? <br>'\n  texteCorr += `${numAlpha(1)} ${prenoms[1]} utilise ${quantiteQ2} g de ${liste[alea1].ingredient} cela représente ${texteEnCouleur(alea4, 'blue')} fois plus que ${liste[alea1].quantites_par_pers[alea3]} g (quantité pour 1 personne).<br>` +\ntexteEnCouleurEtGras(`  Conclusion :  Il peut donc préparer sa recette pour ${texteEnCouleur(alea4, 'blue')} personnes.`, 'black')\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDillution () { // questions de mélange de volumes\n  let uniteSolvantVolumeFinal\n  const liste = [\n    {\n      solute: 'sirop',\n      volumeUnitaire: [12, 15, 18, 20],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L'] // liste pour [0] singulier [1] pluriel\n    },\n    {\n      solute: 'nettoyant pour sol',\n      volumeUnitaire: [5, 8, 10, 12],\n      unite_solute: 'cL',\n      unite_solvant: ['L', 'L']\n    },\n    {\n      solute: 'médicament',\n      volumeUnitaire: [3, 3.5, 4, 4.5, 5, 7.5],\n      unite_solute: 'mL',\n      unite_solvant: ['dL', 'dL']\n    },\n    {\n      solute: 'produit pour piscine',\n      volumeUnitaire: [1, 1.2, 0.8, 1.5],\n      unite_solute: 'L',\n      unite_solvant: ['dizaine de mètres cubes', 'dizaines de mètres cubes']\n    }\n  ]\n  const volumeFinal = randint(1, 5) + (randint(1, 5)) * 0.1 * randint(-1, 1, [0]) // volume d'eau pour la préparation\n  const alea1 = randint(0, 3) // pour le choix du soluté\n  const alea2 = randint(0, liste[alea1].volumeUnitaire.length - 1) // pour le choix du volume pour une unité de solvant\n  const quantite = liste[alea1].volumeUnitaire[alea2]\n  const quantiteReponse = calcul(volumeFinal * quantite) // Calcul du volume de soluté final (pour la correction.)\n  if (volumeFinal < 2) {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[0]\n  } else {\n    uniteSolvantVolumeFinal = liste[alea1].unite_solvant[1]\n  }\n  const volumeFinalAff = texNombrec(volumeFinal) // pour affichage avec bon séparateur.\n  const texte = `Il est indiqué sur la bouteille de ${liste[alea1].solute} qu'il faut  ` +\n` ${texNombrec(quantite)} ${liste[alea1].unite_solute} de  ${liste[alea1].solute} pour 1 ${liste[alea1].unite_solvant[0]} d'eau.<br> ` +\n`On veut utiliser ${volumeFinalAff} ${uniteSolvantVolumeFinal} d'eau.` +\n`<br> Quel volume de ${liste[alea1].solute} doit-on prévoir ? <br>`\n  const texteCorr = `Le volume de ${liste[alea1].solute} est proportionnel au volume d'eau <br> ` +\n` ${texteEnCouleur(volumeFinalAff)} ${uniteSolvantVolumeFinal} d'eau, c'est ${texteEnCouleur(volumeFinalAff)} fois 1 ${liste[alea1].unite_solvant[0]} d'eau. <br> ` +\n`il faut donc ${texteEnCouleur(volumeFinalAff)} fois plus que ${texteEnCouleur(texNombrec(quantite), 'blue')} ${liste[alea1].unite_solute} de ${liste[alea1].solute}. <br>` +\n`${texteEnCouleur(texNombrec(quantite), 'blue')} ${liste[alea1].unite_solute} $\\\\times $ ${texteEnCouleur(volumeFinalAff)} = ${texNombrec(quantiteReponse)}  ${liste[alea1].unite_solute}  <br>  ` +\n        texteEnCouleurEtGras(` Conclusion : Il faut donc prévoir ${texNombrec(quantiteReponse)} ${liste[alea1].unite_solute} de ${liste[alea1].solute}.`, 'black') + ' <br>'\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionDistance () { // questions de distance parcourue à une vitesse moyenne donnée\n  let texte, texteCorr\n  const liste = [ // liste des \"moyens de locomotion\" et vitesses associées\n    {\n      locomotion: 'piéton',\n      vitesse: [3, 3.5, 4, 4.5]\n    },\n    {\n      locomotion: 'cycliste',\n      vitesse: [12, 15, 16, 17, 18, 20, 22]\n    },\n    {\n      locomotion: 'camion',\n      vitesse: [75, 77.5, 80, 82.5, 85]\n    },\n    {\n      locomotion: 'train',\n      vitesse: [125, 150, 175, 185, 195]\n    }\n  ]\n  const alea1 = randint(0, 3) // pour le choix de locomotion\n  const duree = [{\n    temps: '15 minutes',\n    rapport: 0.25\n  },\n  {\n    temps: '30 minutes',\n    rapport: 0.5\n  },\n  {\n    temps: '45 minutes',\n    rapport: 0.75\n  },\n  {\n    temps: '1 heure et demi',\n    rapport: 1.5\n  },\n  {\n    temps: '2 heures',\n    rapport: 2\n  },\n  {\n    temps: '2 heures et demi',\n    rapport: 2.5\n  },\n  {\n    temps: '3 heures',\n    rapport: 3\n  }]\n  const alea2 = randint(0, liste[alea1].vitesse.length - 1) // pour le choix du temps passé\n  const rapportQuestion2 = [0.25, 0.5, 0.75, 1.25, 1.5, 2]\n  const alea3 = randint(0, rapportQuestion2.length - 1, [alea2])\n  const reponseQ1 = calcul(duree[alea2].rapport * liste[alea1].vitesse[alea2])\n  const distance = texNombrec(calcul(rapportQuestion2[alea3] * liste[alea1].vitesse[alea2])) // pour question 2\n  texte = `${numAlpha(0)} Un ${liste[alea1].locomotion} parcourt en moyenne ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure.<br> Quelle distance va-t-il parcourir, à la même vitesse en ${duree[alea2].temps} ? <br><br> `\n  texteCorr = `${numAlpha(0)} ${duree[alea2].temps} c'est ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois une heure.<br> ` +\n`En une heure le ${liste[alea1].locomotion} parcourt ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km donc en ${duree[alea2].temps} il va parcourir ${texteEnCouleur(texNombrec(duree[alea2].rapport))} fois ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km. <br>` +\n`${texteEnCouleur(texNombrec(duree[alea2].rapport))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].vitesse[alea2], 'blue'))} km = ${texNombrec(reponseQ1)} km <br>` +\ntexteEnCouleurEtGras(` Conclusion : Le ${liste[alea1].locomotion} va donc parcourir ${texNombrec(reponseQ1)} km.`, 'black') + '<br><br>'\n  texte += `${numAlpha(1)} Combien de temps va-t-il mettre pour parcourir ${distance} km à cette même vitesse ? <br> `\n  texteCorr += `${numAlpha(1)} ${distance} c'est ${texteEnCouleur(texNombrec(rapportQuestion2[alea3]))} fois ${texNombrec(liste[alea1].vitesse[alea2])} km.\nIl parcourt ${texNombrec(liste[alea1].vitesse[alea2])} km en une heure. <br>` +\n`Il va mettre donc ${texteEnCouleur(texNombrec(rapportQuestion2[alea3]))} fois une heure à parcourir ${distance} km <br>` +\ntexteEnCouleurEtGras(`Conclusion : Il va donc mettre  ${texNombrec(rapportQuestion2[alea3])} heure(s) ( ${texNombrec(rapportQuestion2[alea3])} $\\\\times$ 1 ) à parcourir ${distance} km  ce qui fait ${calcul(rapportQuestion2[alea3] * 60)} minutes.`, 'black') + '<br><br>'\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionEchelle () { // X cm sur une carte correspond à x km dans la réalité...\n  let texte, texteCorr\n  const distanceCarte = randint(1, 7) // Choix d'un nombre de cm sur la carte\n  const distanceReel = randint(3, 20, [distanceCarte]) // Choix d'un nombre de km dans la réalité (on évite d'avoir 1cm pour 1km)\n  const rapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5] // rapport entre la référence et la question (rapports simples car niveau 6eme)\n  const alea1 = randint(0, rapport.length - 1)\n  const alea2 = randint(0, rapport.length - 1, [alea1])\n  const distanceCarte2 = texNombrec(calcul(rapport[alea1] * distanceCarte))\n  const distanceReelQ2 = texNombrec(calcul(rapport[alea2] * distanceReel))\n  const prenoms = [prenomF(), prenomM()]\n  texte = `${numAlpha(0)} Sur une carte sur laquelle ${distanceCarte} cm représente ${distanceReel} km dans la réalité, <br>\n${prenoms[0]} mesure sont trajet, elle trouve une distance de ${distanceCarte2} cm. <br>` +\n'A quelle distance cela correspond dans la réalité ? <br><br>'\n  texteCorr = `${numAlpha(0)} ${distanceCarte2} cm c'est ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${distanceCarte} cm <br>\nDans la réalité, ${distanceCarte} cm correspond à ${texteEnCouleur(distanceReel, 'blue')} km donc <br>` +\n`  ${distanceCarte2} cm va correspondre à ${texteEnCouleur(texNombrec(rapport[alea1]))} fois ${texteEnCouleur(distanceReel, 'blue')} km  <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea1]))} $\\\\times$ ${texteEnCouleur(distanceReel, 'blue')} km = ${texNombrec(calcul(rapport[alea1] * distanceReel))} km <br>` +\ntexteEnCouleurEtGras(`Conclusion : le trajet de ${prenoms[0]} est de ${texNombrec(calcul(rapport[alea1] * distanceReel))} km.`, 'black') + '<br><br>'\n  texte += `${numAlpha(1)} Deux villes sont distantes de ${texNombrec(distanceReelQ2)} km. <br>` +\n'Quelle distance va-t-on mesurer sur la carte entre ces deux villes ?'\n  texteCorr += `${numAlpha(1)} ${texNombrec(distanceReelQ2)} km c'est ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${distanceReel} km.\nOr ${distanceReel} km est représenté par ${texteEnCouleur(distanceCarte, 'blue')} cm sur la carte. <br>` +\n`Donc ${texNombrec(distanceReelQ2)} km est représenté par ${texteEnCouleur(texNombrec(rapport[alea2]))} fois ${texteEnCouleur(distanceCarte, 'blue')} cm sur la carte <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea2]))} $\\\\times$ ${texteEnCouleur(distanceCarte, 'blue')} cm = ${texNombrec(calcul(rapport[alea2] * distanceCarte))} cm <br>` +\ntexteEnCouleurEtGras(`Conclusion : Les deux villes sont séparées de ${texNombrec(calcul(rapport[alea2] * distanceCarte))} cm sur la carte.`, 'black') + '<br><br>'\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\nfunction questionRecouvrirSurface () { // peinture, gazon, carrelage pour une surface donnée.\n  let texte, texteCorr\n  const liste = [\n    {\n      matiere: 'de la peinture',\n      unite: 'L',\n      qtt_matiere_unitaire: [0.5, 1, 1.5, 2], // quantité au m²\n      qtt_surface: [10, 25, 15] // nombre de m² indiqués sur l'emballage\n    },\n    {\n      matiere: 'du gazon',\n      unite: 'kg',\n      qtt_matiere_unitaire: [2.5, 3, 5, 10],\n      qtt_surface: [200, 175, 150]\n    },\n    {\n      matiere: 'du carrelage',\n      unite: 'carreaux',\n      qtt_matiere_unitaire: [25, 30, 50, 100],\n      qtt_surface: [10, 20, 5]\n    }\n  ]\n  const alea1 = randint(0, liste.length - 1)\n  const alea2 = randint(0, liste[alea1].qtt_matiere_unitaire.length - 1)\n  const alea3 = randint(0, liste[alea1].qtt_surface.length - 1)\n  const rapport = [0.25, 0.5, 0.75, 1.25, 1.5, 2, 3, 4, 5] // choix parmi des rapports simples (en 6eme cela parrait suffisant)\n  const quantite = liste[alea1].qtt_matiere_unitaire[alea2]\n  const alea4 = randint(0, rapport.length - 1)\n  const surfaceFinale = calcul(rapport[alea4] * liste[alea1].qtt_surface[alea3])\n  const alea5 = randint(0, rapport.length - 1, [alea4])\n  const quantite2 = calcul(rapport[alea5] * liste[alea1].qtt_matiere_unitaire[alea2])\n  const alea6 = randint(-2, 2, [0])\n  const surfaceFinale2 = calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3] + alea6)\n  const prenoms = [prenomF(), prenomM()]\n  const qttaffichage = texNombrec(quantite) // Pour affichage avec virgule en séparateur.\n  texte = `${numAlpha(0)} ${prenoms[0]} doit acheter ${liste[alea1].matiere}. <br>` +\n`Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${liste[alea1].qtt_surface[alea3]} m$^2$ <br> ` +\n`Combien doit-elle en acheter pour une surface de ${texNombrec(surfaceFinale)} m$^2$ ? <br>`\n  texteCorr = `${numAlpha(0)} ${texNombrec(surfaceFinale)} $m^2$ c'est ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${liste[alea1].qtt_surface[alea3]} $m^2$ <br>` +\n`Il va donc falloir ${texteEnCouleur(texNombrec(rapport[alea4]))} fois ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} pour ${texNombrec(surfaceFinale)} $m^2$ <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4] * quantite))} ${liste[alea1].unite}<br>` +\ntexteEnCouleurEtGras(`Conclusion : elle doit en acheter ${texteEnCouleur(texNombrec(rapport[alea4]))} $\\\\times$ ${texteEnCouleur(qttaffichage, 'blue')} ${liste[alea1].unite} = ${texNombrec(calcul(rapport[alea4] * quantite))} ${liste[alea1].unite}.`, 'black') + '<br>  '\n  texte += `<br> ${numAlpha(1)} ${prenoms[1]} a acheté ${liste[alea1].matiere}. Il lui en reste ${texNombrec(quantite2)} ${liste[alea1].unite}. <br> Sur la notice il est indiqué de prévoir ${qttaffichage} ${liste[alea1].unite} pour ${texNombrec(liste[alea1].qtt_surface[alea3])} m$^2$ <br>` +\n`En a-t-il suffisament pour la surface de ${texNombrec(surfaceFinale2)} m$^2$ qu'il lui reste à faire ? <br>`\n  texteCorr += `<br> ${numAlpha(1)} ${texNombrec(quantite2)} ${liste[alea1].unite} c'est ${texteEnCouleur(texNombrec(rapport[alea5]))} fois ${qttaffichage} ${liste[alea1].unite}. <br>` +\n`avec ${texNombrec(quantite2)} ${liste[alea1].unite} on peut donc traiter une surface de ${texteEnCouleur(texNombrec(rapport[alea5]))}\nfois ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]), 'blue')} m$^2$ <br>` +\n`${texteEnCouleur(texNombrec(rapport[alea5]))} $\\\\times$ ${texteEnCouleur(texNombrec(liste[alea1].qtt_surface[alea3]), 'blue')} m$^2$ = ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m$^2$. <br>`\n  if (calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]) > surfaceFinale2) {\n    texteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m$^2$ > ${texNombrec(surfaceFinale2)} $m^2$ donc il a suffisament pour ${surfaceFinale2} m$^2$.`, 'black') + ' <br>'\n  } else {\n    texteCorr += texteEnCouleurEtGras(`Conclusion : ${texNombrec(calcul(rapport[alea5] * liste[alea1].qtt_surface[alea3]))} m$^2$ < ${texNombrec(surfaceFinale2)} $m^2$ donc il n'a pas assez pour ${surfaceFinale2} m$^2$.`, 'black') + ' <br>'\n  }\n  return {\n    qtexte: texte,\n    qtexteCorr: texteCorr\n  }\n}\n\n// _______ Fin des fonctions correspondants aux situations problèmes _____\n\nexport default function ProportionnaliteParLinearite () {\n  'use strict'\n  let question\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Répondre aux questions posées en justifiant'\n  context.isHtml ? (this.spacing = 2) : (this.spacing = 1)\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n  this.nbQuestions = 5\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const listeIndexSituationsDisponible = [0, 1, 2, 3, 4, 5]\n    const listeIndexSituations = combinaisonListes(\n      listeIndexSituationsDisponible,\n      this.nbQuestions\n    ) // permet de ne pas avoir 2 fois la même situation si - de questions que de situations\n    // boucle pour le nombre de question.\n    // A chaque question on vérifie qu'elle n'existe pas déjà pour en refaire une. Sécurité : on ajoute un compteur pour eviter trop d'essais...\n    let cpt = 0\n    for (let i = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeIndexSituations[i]) {\n        case 0:\n          question = questionAchat()\n          break\n        case 1:\n          question = questionRecette()\n          break\n        case 2:\n          question = questionDillution()\n          break\n        case 3:\n          question = questionDistance()\n          break\n        case 4:\n          question = questionEchelle()\n          break\n        case 5:\n          question = questionRecouvrirSurface()\n          break\n      }\n      if (this.listeQuestions.indexOf(question.qtexte) === -1) { // Si la question n'a jamais été posée, on la garde.\n        this.listeQuestions.push(question.qtexte)\n        this.listeCorrections.push(question.qtexteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}