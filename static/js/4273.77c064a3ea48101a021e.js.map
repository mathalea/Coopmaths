{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4C32-1.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["titre","amcReady","amcType","interactifReady","CalculsAvecPuissancesDeDix","Exercice","this","sup","sup2","nbCols","nbColsCorr","nbQuestions","qcmDisponible","nouvelleVersion","typeDeQuestionsDisponibles","parseInt","qcm","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","mantisse1","exp1","decalage","mantisse","exp","decimalstring","scientifiquestring","i","cpt","randint","calcul","choice","texNombrec","texNombre","miseEnEvidence","autoCorrection","enonce","propositions","statut","options","ordered","lastChoice","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","feedback","type","querySelectorAll","uicheck","classList","add","espace","context","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/4273.77c064a3ea48101a021e.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombrec, texNombre, miseEnEvidence } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Calcul avec les puissances de dix'\n\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\n\n/**\n * type 1 : Un nombre est donné par le produit d'un décimal par une puissance de dix, il faut l'écrire en notation scientifique\n * type 2 : On donne la notation scientifique d'un nombre et on doit trouver l'exposant manquant de 10 dans le membre de gauche.\n * @Auteur Jean-Claude Lhote\n * 4C32-1\n */\nexport default function CalculsAvecPuissancesDeDix () {\n  Exercice.call(this)\n  this.sup = 1\n  this.sup2 = 1\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nbQuestions = 5\n  this.qcmDisponible = true\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.sup2 = parseInt(this.sup2)\n    this.qcm = ['4C32-1', [], 'Calcul avec les puissances de dix', 1]\n\n    if (this.sup === 1) this.consigne = 'Donner l\\'écriture scientifique des nombres suivants.'\n    else this.consigne = 'Compléter l\\'égalité des nombres suivants.'\n    let typeDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (this.sup2 === 1) typeDeQuestionsDisponibles = [0, 0, 0, 1, 1]\n    else if (this.sup2 === 2) typeDeQuestionsDisponibles = [0, 1, 1, 2, 2]\n    else typeDeQuestionsDisponibles = [2, 2, 3, 3, 3]\n\n    const listeTypeDeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, mantisse1, exp1, decalage, mantisse, exp, decimalstring, scientifiquestring, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) {\n      //        nombre=calcul(randint(1001,9999)/10**randint(1,6))\n      //      mantisse=calcul(nombre/10**(Math.floor(Math.log10(nombre))))\n      //        exp=Math.floor(Math.log10(nombre))\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          decalage = randint(-1, 1, 0)\n          mantisse = randint(1, 9)\n          exp = randint(1, 5)\n          break\n        case 1:\n          decalage = randint(-2, 2, 0)\n          mantisse = calcul(randint(11, 99) / 10)\n          exp = randint(1, 5)\n          break\n        case 2:\n          decalage = randint(-3, 3, 0)\n          if (randint(0, 1) === 1) mantisse = calcul(randint(111, 999) / 100)\n          else mantisse = calcul((randint(1, 9) * 100 + randint(1, 9)) / 100)\n          exp = randint(1, 7) * choice([-1, 1])\n          break\n        case 3:\n          decalage = randint(-4, 4, 0)\n          if (randint(0, 1) === 1) mantisse = calcul((randint(1, 9) * 1000 + randint(1, 19) * 5) / 1000)\n          else mantisse = calcul(randint(1111, 9999) / 1000)\n          exp = randint(3, 7) * choice([-1, 1])\n          break\n      }\n      // nombre = calcul(mantisse * 10 ** exp)\n      mantisse1 = calcul(mantisse * 10 ** decalage)\n      exp1 = exp - decalage\n\n      decimalstring = `${texNombrec(mantisse1)} \\\\times 10^{${exp1}}`\n      scientifiquestring = `${texNombre(mantisse)} \\\\times 10^{${exp}}`\n      if (this.sup === 1) {\n        texte = `$${decimalstring}$`\n        texteCorr = `$${miseEnEvidence(`${texNombrec(mantisse1)}`, 'blue')}\\\\times ${miseEnEvidence(`10^{${exp1}}`)} = ${miseEnEvidence(`${texNombre(mantisse)}\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} = ${scientifiquestring}$`\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: `$${scientifiquestring}$`,\n            statut: true\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${exp - 1}}$`,\n            statut: false\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${exp + 1}}$`,\n            statut: false\n          },\n          {\n            texte: `$${texNombre(mantisse)} \\\\times 10^{${-exp}}$`,\n            statut: false\n          }\n        ]\n      } else {\n        texteCorr = `$${miseEnEvidence(texNombre(mantisse1), 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)}=${miseEnEvidence(texNombre(mantisse) + `\\\\times 10^{${decalage}}`, 'blue')}\\\\times  ${miseEnEvidence(`10^{${exp1}}`)} =${scientifiquestring}$`\n        texte = `$${texNombre(mantisse1)}\\\\times 10^{${miseEnEvidence('....')}}=${scientifiquestring}$`\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: `$${exp1}$`,\n            statut: true\n          },\n          {\n            texte: `$${exp1 - 1}$`,\n            statut: false\n          },\n          {\n            texte: `$${exp1 + 1}$`,\n            statut: false\n          },\n          {\n            texte: `$${-exp1}$`,\n            statut: false\n          }\n        ]\n        this.autoCorrection[i].options = {\n          ordered: false,\n          lastChoice: 5\n        }\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  this.besoinFormulaireNumerique = [\"Type d'exercices\", 2, '1 : Traduire en notation scientifique\\n2 : Exercice à trou']\n  this.besoinFormulaire2Numerique = ['Niveaux de difficulté', 3, '1 : Facile\\n2 : Moyen\\n3 : Difficile']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}