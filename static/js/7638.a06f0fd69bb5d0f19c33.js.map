{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C10-2.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ExerciceTablesMultiplicationsEtMultiplesDe10","tablesParDefaut","Exercice","this","sup","consigne","spacing","tailleDiaporama","nouvelleVersion","autoCorrection","tables","listeQuestions","listeCorrections","split","couples","creerCouples","nbQuestions","a","b","k1","k2","texte","texteCorr","melange","i","choice","randint","c","texNombre","enonce","propositions","texNombre2","statut","feedback","calcul","options","ordered","lastChoice","interactif","propositionsQcm","push","listeQuestionsToContenu","context","amc","id","besoinFormulaireTexte","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","type","querySelectorAll","uicheck","classList","add","espace","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/7638.a06f0fd69bb5d0f19c33.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, creerCouples, randint, choice, texNombre, texNombre2, calcul } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\n\nexport const titre = 'Tables de multiplications et multiples de 10'\n\n/**\n * Les 2 facteurs peuvent terminer par aucun, 1, 2 ou 3 zéros\n * @Auteur Rémi Angot\n* Référence 6C10-2\n */\nexport default function ExerciceTablesMultiplicationsEtMultiplesDe10 (\n  tablesParDefaut = '2-3-4-5-6-7-8-9'\n) {\n  // Multiplier deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.titre = titre\n  this.consigne = 'Calculer'\n  this.spacing = 2\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    let tables = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des ;\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    for (\n      let i = 0, a, b, k1, k2, texte, texteCorr, melange;\n      i < this.nbQuestions;\n      i++\n    ) {\n      this.autoCorrection[i] = {}\n      a = couples[i][0]\n      b = couples[i][1]\n      if (a > 1) {\n        k1 = choice([1, 10, 100, 1000])\n      } else {\n        k1 = choice([10, 100, 1000])\n      }\n      k2 = choice([1, 10, 100, 1000])\n      a = k1 * a\n      b = k2 * b\n      melange = randint(0, 1)\n      if (melange === 1) {\n        // échange a et b pour que les multiplications ne soient pas toujours dans le même ordre (surtout lorsque tables n'a qu'un seul élément)\n        const c = a\n        a = b\n        b = c\n      }\n      texte =\n        '$ ' + texNombre(a) + ' \\\\times ' + texNombre(b) + ' = \\\\dotfill $'\n      texteCorr =\n        '$ ' +\n        texNombre(a) +\n        ' \\\\times ' +\n        texNombre(b) +\n        ' = ' +\n        texNombre(a * b) +\n        ' $'\n\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: `$${texNombre2(a * b)}$`,\n          statut: true,\n          feedback: 'Correct !'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b / 10))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b * 10))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b / 100))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b * 100))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: false,\n        lastChoice: 5\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n    if (context.isAmc) {\n      this.amc = [this.id, this.autoCorrection, titre, amcType]\n    }\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}