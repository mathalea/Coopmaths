{"version":3,"sources":["webpack://mathalea/./src/js/exercices/3e/3A11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","PremierOuPas","Exercice","this","consigne","context","spacing","spacingCorr","nbCols","nbColsCorr","sup","nbQuestionsModifiable","listePackages","nouvelleVersion","typesDeQuestions","typesDeQuestionsDisponibles","boutonAide","modalPdf","numeroExercice","modalVideo","listeQuestions","listeCorrections","contenu","contenuCorrection","Number","nbQuestions","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","stringRappel","cribleEratostheneN","k","length","introduction","warnMessage","texte","texteCorr","i","cpt","N","r","tabPremiersATester","sum","Nlongueur","N1","N1longueur","sum1","evenSum","oddSum","randint","nombreAvecEspace","texteEnCouleurEtGras","toString","charAt","substring","m","Math","abs","r1","r2","prime1","prime2","trunc","sqrt","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable"],"mappings":"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","file":"js/65499.6a1bcedd6c3f03769ae9.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleurEtGras, modalPdf, modalVideo, cribleEratostheneN, warnMessage } from '../../modules/outils.js'\nexport const titre = 'Primalité ou pas'\n\n/**\n * 3A11 justifier la non primalité réinvestissement des critères de divisibilité\n * Nombres à 3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 11, sous forme d'un produit de deux nombres premiers inférieurs à 100\n * et un nombre premier inferieur à 529\n * dans cet exo on n'utilise pas les critères par 7 et 11\n * @author Sébastien Lozano\n */\nexport default function PremierOuPas () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Justifier que les nombres suivants sont premiers ou pas. Penser aux critères de divisibilité.'\n  // context.isHtml ? this.spacing = 3 : this.spacing = 2;\n  context.isHtml ? this.spacing = 1 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.nbQuestionsModifiable = false\n  // console.log(Number(this.sup)==1);\n  // if (Number(this.sup)==1) {\n  // this.nbQuestions = 4;\n  // } else {\n  // this.nbQuestions = 5;\n  // }\n  this.listePackages = 'bclogo'\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(this.numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'assets/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles // = [1, 2, 3, 6, 7];\n    if (Number(this.sup) === 1) {\n      this.nbQuestions = 4\n      typesDeQuestionsDisponibles = [1, 2, 3, 8]\n    } else {\n      this.nbQuestions = 5\n      typesDeQuestionsDisponibles = [1, 2, 3, 6, 7]\n    }\n    typesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles) // on mélange l'ordre des questions\n\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    let stringRappel = 'Cette liste des nombres premiers inférieurs à 100 pourra être utile : <br>' + cribleEratostheneN(100)[0]\n    for (let k = 1; k < cribleEratostheneN(100).length; k++) {\n      stringRappel += ', ' + cribleEratostheneN(100)[k]\n    };\n    stringRappel += '.'\n\n    this.introduction = warnMessage(stringRappel, 'nombres', 'Coup de pouce')\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      let N // le nombre de la question\n      let r\n      let tabPremiersATester\n      let sum\n\n      let Nlongueur // pour la taille du string N\n      let N1 // pour la repetiton du critère\n      let N1longueur // pour la taille du string N1\n      let sum1 // pour la somme de la répétition du critère\n\n      let evenSum // pour la somme des chiffres de rang impair\n      let oddSum // pour la somme des chiffres de rang pair\n\n      switch (typesDeQuestions) {\n        case 1: // nombre pair\n          N = 2 * randint(51, 4999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme ${nombreAvecEspace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          break\n        case 2: // Multiple de 3\n          sum = 0 // pour la valeur de la somme;\n          N = 3 * randint(34, 3333) // on initialise avant la boucle car on a peut être de la chance\n          while ((N % 2 === 0) || (N % 5 === 0)) {\n            N = 3 * randint(34, 3333)\n          };\n          texte = nombreAvecEspace(N)\n          texteCorr = 'Comme ' + N.toString().charAt(0)\n          sum = Number(N.toString().charAt(0))\n          for (let k = 1; k < N.toString().length; k++) {\n            texteCorr += ' + ' + N.toString().charAt(k)\n            sum += Number(N.toString().charAt(k))\n          };\n          texteCorr += ` = ${sum} est un multiple de 3 donc ${nombreAvecEspace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          break\n        case 3: // Multiple de 5\n          N = 5 * randint(20, 1999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme le dernier chiffre de ${nombreAvecEspace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombreAvecEspace(N)} est divisible par 5, `\n          texteCorr += 'il admet donc au moins trois diviseurs qui sont 1, 5 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          break\n        case 4: // Multiple de 7\n          N = 7 * randint(15, 1428)\n          texte = nombreAvecEspace(N)\n          Nlongueur = N.toString().length\n          texteCorr = ` 7 divise ${nombreAvecEspace(N)}, en effet : `\n          texteCorr += '<br>'\n          N1 = N\n          N1longueur = Nlongueur\n          sum1 = Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))\n          while (sum1 >= 56) {\n            texteCorr += `${N1.toString().substring(0, N1longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1longueur - 1)}`\n            texteCorr += ` = ${Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))}`\n            texteCorr += '<br>'\n            N1 = sum1\n            N1longueur = N1.toString().length\n            sum1 = Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))\n          };\n          texteCorr += `Comme ${N1.toString().substring(0, N1longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1longueur - 1)} = ${sum1} est un multiple de 7 alors 7 divise ${N} aussi `\n          texteCorr += 'qui admet donc au moins trois diviseurs : 1, 7 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          break\n        case 5: // multiple de 11\n          N = 11 * randint(10, 909)\n          texte = nombreAvecEspace(N)\n          texteCorr = `D'une part, la somme des chiffres de rang impair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            evenSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let k = 3; k < N.toString().length; k++) {\n              if (k % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                evenSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + evenSum + ' <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            evenSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let m = 1; m < N.toString().length; m++) {\n              if (m % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                evenSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + evenSum + '<br> '\n          };\n          texteCorr += `d'autre part, la somme des chiffres de rang pair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            oddSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let k = 1; k < N.toString().length; k++) {\n              if (k % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                oddSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + oddSum + ' <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            oddSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let m = 3; m < N.toString().length; m++) {\n              if (m % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                oddSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + oddSum + '<br> '\n          };\n          texteCorr += 'la différence entre la somme des chiffres de rangs pairs et celle des chiffres de rangs impairs vaut '\n          if ((oddSum - evenSum) === 0) {\n            texteCorr += `${oddSum - evenSum}, `\n          } else {\n            texteCorr += `${Math.abs(oddSum - evenSum)} qui est un multiple de 11, `\n          };\n          texteCorr += '<br>'\n          texteCorr += ` cela signifie que ${nombreAvecEspace(N)} est divisible par 11, il admet donc au moins trois diviseurs qui sont 1, 11 et lui-même,`\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          break\n        case 6: // produit de deux nombres premiers inférieurs à 100\n          // rang du premier facteur premier\n          const r1 = randint(0, cribleEratostheneN(100).length - 1)\n          // rang du second facteur premier\n          const r2 = randint(0, cribleEratostheneN(100).length - 1)\n          const prime1 = cribleEratostheneN(100)[r1] // on tire un nombre premier inférieur à 100, il n'y en a que 25!\n          const prime2 = cribleEratostheneN(100)[r2] // on tire un autre nombre premier inférieur à 100, ça peut être le même qu'avant!\n          N = prime1 + '$\\\\times$' + prime2\n          texte = N\n          texteCorr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `\n          if (prime1 === prime2) {\n            texteCorr += `trois divisieurs qui sont 1, ${prime1} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          } else {\n            texteCorr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          };\n          texteCorr += texteEnCouleurEtGras(`${N} = ` + nombreAvecEspace(prime1 * prime2) + ' n\\'est donc pas premier.')\n          break\n        case 7: // nombre premier inférieur à 529\n          // rang du nombre premier choisi\n          r = randint(0, cribleEratostheneN(529).length - 1)\n          N = cribleEratostheneN(529)[r] // on choisit un nombre premier inférieur à 529\n          texte = N + ''\n          tabPremiersATester = cribleEratostheneN(Math.trunc(Math.sqrt(N)))\n          // texteCorr = `Testons la divisibilité de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est à dire par les nombres `;\n          texteCorr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est à dire par les nombres `\n          texteCorr += tabPremiersATester[0]\n          for (let k = 1; k < tabPremiersATester.length; k++) {\n            texteCorr += ', ' + tabPremiersATester[k]\n          };\n          // texteCorr += `.`;\n          // texteCorr += `<br> Aucun de ces nombres premiers ne divise ${N}, `;\n          texteCorr += ', le reste n\\'est jamais nul.'\n          // texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ` est donc un nombre premier.`);\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          break\n        case 8: // nombre premier inférieur à 100 pour permettre les tests de divisibilité sans calculatrice\n          // rang du nombre premier choisi\n          r = randint(0, cribleEratostheneN(100).length - 1)\n          N = cribleEratostheneN(100)[r] // on choisit un nombre premier inférieur à 529\n          texte = N + ''\n          tabPremiersATester = cribleEratostheneN(Math.trunc(Math.sqrt(N)))\n          // texteCorr = `Testons la divisibilité de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est à dire par les nombres `;\n          texteCorr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est à dire par les nombres `\n          texteCorr += tabPremiersATester[0]\n          for (let k = 1; k < tabPremiersATester.length; k++) {\n            texteCorr += ', ' + tabPremiersATester[k]\n          };\n          // texteCorr += `.`;\n          // texteCorr += `<br> Aucun de ces nombres premiers ne divise ${N}, `;\n          texteCorr += ', le reste n\\'est jamais nul.'\n          // texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ` est donc un nombre premier.`);\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Difficulté', 2, '1 : Sans Calculatrice\\n2 : Avec calculatrice']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}