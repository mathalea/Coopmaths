{"version":3,"file":"js/19154.2dc074bd62f4317ef685.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C23.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, abs, pgcd, produitDeDeuxFractions, simplificationDeFractionAvecEtapes, miseEnEvidence, texFractionSigne, obtenirListeFractionsIrreductibles, obtenirListeFractionsIrreductiblesFaciles, texFraction, ppcm, nombreDeChiffresDansLaPartieEntiere } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Fractions et priorités opératoires'\nexport const amcReady = true\nexport const amcType = 'AMCOpenNum✖︎2' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n/**\n * * Calcul fractionnaire : somme d'une fraction et du produit de deux autres fractions. Paramétrages possibles :\n * 1 : Calcul avec nombres positifs sans piège de priorité\n * * 2 : Calcul avec nombres positifs avec piège\n * * 3 : Calcul avec nombres relatifs\n * @author Jean-Claude Lhote\n * 4C23\n */\nexport default function ExerciceAdditionnerFractionProduit () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1 // Avec ou sans relatifs\n  this.titre = titre\n  this.consigne = 'Calculer et donner le résultat sous forme irréductible'\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    const listeFractions = obtenirListeFractionsIrreductibles()\n    const listeFractionsFaciles = obtenirListeFractionsIrreductiblesFaciles()\n    let nombreDeSigneMoins\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4]// fractions faciles, relatifs\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = [1, 2, 3, 2]// 1*nombre entier,3*fraction (pas de négatifs)\n    } else if (this.sup === 3) {\n      typesDeQuestionsDisponibles = [3, 3, 4, 4]// fractions, 2*positifs, 2*relatifs\n    } else {\n      typesDeQuestionsDisponibles = [4]\n    }\n\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    for (\n      let i = 0,\n        ab,\n        cd,\n        ef,\n        a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        p,\n        k1,\n        k2,\n        reponse,\n        signe1,\n        signe2,\n        texte,\n        texteCorr,\n        produit = [],\n        typesDeQuestions,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      if (this.sup === 1) { ab = choice(listeFractionsFaciles); cd = choice(listeFractionsFaciles); ef = choice(listeFractionsFaciles) } else { ab = choice(listeFractions); cd = choice(listeFractions); ef = choice(listeFractions) }\n\n      a = ab[0]\n      b = ab[1]\n      c = cd[0]\n      d = cd[1]\n      e = ef[0]\n      f = ef[1]\n      switch (typesDeQuestions) {\n        case 1: // sans piège fraction1 + fraction2 x fraction3 (tout positif)\n          texte = `$${texFraction(a, b)}+${texFraction(c, d)}\\\\times${texFraction(e, f)}$`\n\n          texteCorr = `$${texFraction(a, b)}+${texFraction(c, d)}\\\\times${texFraction(e, f)}$`\n          produit = produitDeDeuxFractions(c, d, e, f)\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${texFraction(a, b)}+${texFraction(c + '\\\\times' + e, d + '\\\\times' + f)}$`\n            texteCorr += `$=${texFraction(a, b)}+${texFraction(c * e, d * f)}$`\n          } else {\n            texteCorr += `$=${texFraction(a, b)}+${produit[1]}$`\n            texteCorr += `$=${texFraction(a, b)}+${produit[0]}$`\n          }\n          // faut-il simplifier c*e/d*f\n          if (!this.correctionDetaillee) {\n            [c, d, e, f] = produit[2]\n          }\n          p = pgcd(c * e, d * f)\n          if (p !== 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {\n            texteCorr += `$=${texFraction(a, b)}+${texFraction((e * c) / p + '\\\\times\\\\cancel{' + p + '}', (f * d) / p + '\\\\times\\\\cancel{' + p + '}'\n            )}$`\n            c = (e * c) / p\n            d = (f * d) / p\n          } else {\n            c = e * c\n            d = f * d\n          }\n          p = ppcm(b, d) // p = dénominateur commun\n          k1 = p / b\n          k2 = p / d\n          if (k1 !== 1) {\n            texteCorr += `$=${texFraction(\n              a + miseEnEvidence('\\\\times' + k1),\n              b + miseEnEvidence('\\\\times' + k1)\n            )}$`\n          } else {\n            if (k2 !== 1) {\n              texteCorr += `$=${texFraction(a, b)}$`\n            }\n          }\n          if (k2 !== 1) {\n            texteCorr += `$+${texFraction(\n              c + miseEnEvidence('\\\\times' + k2),\n              d + miseEnEvidence('\\\\times' + k2)\n            )}$`\n          } else {\n            if (k1 !== 1) {\n              texteCorr += `$+${texFraction(c, d)}$`\n            }\n          }\n\n          texteCorr += `$=${texFraction(a * k1, p)}+${texFraction(c * k2, p)}$`\n          e = a * k1 + c * k2\n          f = p\n\n          texteCorr += `$=${texFraction(e, f)}${simplificationDeFractionAvecEtapes(e, f)}$`\n          reponse = fraction(e, f).simplifie()\n          break\n\n        case 2: // sans piège fraction2 x fraction3 + fraction1  (tout positif)\n          texte = `$${texFraction(c, d)}\\\\times${texFraction(e, f)}+${texFraction(a, b)}$`\n          produit = produitDeDeuxFractions(c, d, e, f)\n          texteCorr = `$${texFraction(c, d)}\\\\times${texFraction(e, f)}+${texFraction(a, b)}$`\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${texFraction(c + '\\\\times' + e, d + '\\\\times' + f)}+${texFraction(a, b)}$`\n            texteCorr += `$=${texFraction(c * e, d * f)}+${texFraction(a, b)}$`\n          } else {\n            texteCorr += `$=${produit[1]}+${texFraction(a, b)}$`\n            texteCorr += `$=${produit[0]}+${texFraction(a, b)}$`\n          }\n          // faut-il simplifier c*e/d*f\n          if (!this.correctionDetaillee) {\n            [c, d, e, f] = produit[2]\n          }\n          p = pgcd(c * e, d * f)\n          if (p !== 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {\n            texteCorr += `$=${texFraction((e * c) / p + '\\\\times\\\\cancel{' + p + '}', (f * d) / p + '\\\\times\\\\cancel{' + p + '}')}+${texFraction(a, b)}$`\n            c = (e * c) / p\n            d = (f * d) / p\n          } else {\n            c = e * c\n            d = f * d\n          }\n          p = ppcm(b, d) // p = dénominateur commun\n          k1 = p / b\n          k2 = p / d\n          if (k2 !== 1) {\n            texteCorr += `$=${texFraction(\n            c + miseEnEvidence('\\\\times' + k2),\n            d + miseEnEvidence('\\\\times' + k2)\n          )}$`\n          } else {\n            if (k1 !== 1) {\n              texteCorr += `$=${texFraction(c, d)}$`\n            }\n          }\n\n          if (k1 !== 1) {\n            texteCorr += `$+${texFraction(\n            a + miseEnEvidence('\\\\times' + k1),\n            b + miseEnEvidence('\\\\times' + k1)\n          )}$`\n          } else {\n            if (k2 !== 1) {\n              texteCorr += `$+${texFraction(a, b)}$`\n            }\n          }\n\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${texFraction(c * k2, p)}+${texFraction(a * k1, p)}$`\n          }\n          e = a * k1 + c * k2\n          f = p\n\n          texteCorr += `$=${texFraction(e, f)}${simplificationDeFractionAvecEtapes(e, f)}$`\n          reponse = fraction(e, f).simplifie()\n          break\n\n        case 3: // avec piege addition non prioritaire fraction2 * fraction3 + fraction1  tout positif\n          d = b\n          produit = produitDeDeuxFractions(c, d, e, f)\n          texte = `$${texFraction(c, d)}\\\\times${texFraction(e, f)}+${texFraction(a, b)}$`\n          texteCorr = `$${texFraction(c, d)}\\\\times${texFraction(e, f)}+${texFraction(a, b)}$`\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${texFraction(c + '\\\\times' + e, d + '\\\\times' + f)}+${texFraction(a, b)}$`\n            texteCorr += `$=${texFraction(c * e, d * f)}+${texFraction(a, b)}$`\n          } else {\n            texteCorr += `$=${produit[1]}+${texFraction(a, b)}$`\n            texteCorr += `$=${produit[0]}+${texFraction(a, b)}$`\n          }\n          // faut-il simplifier c*e/d*f\n          if (!this.correctionDetaillee) {\n            [c, d, e, f] = produit[2]\n          }\n          p = pgcd(c * e, d * f)\n          if (p !== 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {\n            texteCorr += `$=${texFraction(\n              (e * c) / p + '\\\\times\\\\cancel{' + p + '}',\n              (f * d) / p + '\\\\times\\\\cancel{' + p + '}'\n            )}+${texFraction(a, b)}$`\n            c = (e * c) / p\n            d = (f * d) / p\n          } else {\n            c = e * c\n            d = f * d\n          }\n          p = ppcm(b, d) // denominateur commun = p\n          k1 = p / b\n          k2 = p / d\n\n          if (k2 !== 1) {\n            texteCorr += `$=${texFraction(\n              c + '\\\\times' + k2,\n              d + '\\\\times' + k2\n            )}$`\n          } else {\n            if (k1 !== 1) {\n              texteCorr += `$=${texFraction(c, d)}$`\n            }\n          }\n\n          if (k1 !== 1) {\n            texteCorr += `$+${texFraction(\n              a + miseEnEvidence('\\\\times' + k1),\n              b + miseEnEvidence('\\\\times' + k1)\n            )}$`\n          } else {\n            if (k2 !== 1) {\n              texteCorr += `$+${texFraction(a, b)}$`\n            }\n          }\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${texFraction(c * k2, d * k2)}+${texFraction(a * k1, b * k1)}$`\n          }\n          e = a * k1 + c * k2\n          f = p\n          texteCorr += `$=${texFraction(e, f)}${simplificationDeFractionAvecEtapes(e, f)}$`\n          reponse = fraction(e, f).simplifie()\n          break\n\n        case 4:\n          a = a * randint(-1, 1, [0])\n          b = b * randint(-1, 1, [0])\n          c = c * randint(-1, 1, [0])\n          d = d * randint(-1, 1, [0])\n          e = e * randint(-1, 1, [0])\n          f = f * randint(-1, 1, [0])\n\n          nombreDeSigneMoins = (c < 0) + (d < 0) + (e < 0) + (f < 0)\n          if (Math.pow(-1, nombreDeSigneMoins) === 1) {\n            signe2 = '+'\n          } else {\n            signe2 = '-'\n          }\n          texte = `$${texFraction(a, b)}+${texFraction(c, d)}\\\\times${texFraction(e, f)}=$`\n          texteCorr = `$${texFraction(a, b)}+${texFraction(c, d)}\\\\times${texFraction(e, f)}$`\n\n          c = abs(c) // gestion du signe du produit avec {signe}\n          d = abs(d)\n          e = abs(e)\n          f = abs(f)\n\n          if (a * b > 0) {\n            // suppression des signes - superflus de la première fraction\n            signe1 = ''\n          } else {\n            signe1 = '-'\n          }\n\n          a = abs(a)\n          b = abs(b)\n          produit = produitDeDeuxFractions(c, d, e, f)\n          if (this.correctionDetaillee) {\n            texteCorr += `$=${signe1}${texFraction(\n            a,\n            b\n          )}${signe2}${texFraction(c + '\\\\times' + e, d + '\\\\times' + f)}$`\n            texteCorr += `$=${signe1}${texFraction(\n            a,\n            b\n          )}${signe2}${texFraction(c * e, d * f)}$`\n          } else {\n            texteCorr += `$=${signe1}${texFraction(\n              a,\n              b\n            )}${signe2}${produit[1]}$`\n            texteCorr += `$=${signe1}${texFraction(\n              a,\n              b\n            )}${signe2}${produit[0]}$`\n          }\n          // faut-il simplifier c*e/d*f\n          if (!this.correctionDetaillee) {\n            [c, d, e, f] = produit[2]\n          }\n          p = pgcd(c * e, d * f)\n          if (p !== 1 && ppcm(b, d * f) > ppcm(b, (d * f) / p)) {\n            texteCorr += `$=${signe1}${texFraction(\n              a,\n              b\n            )}${signe2}${texFraction(\n              (e * c) / p + '\\\\times\\\\cancel{' + p + '}',\n              (f * d) / p + '\\\\times\\\\cancel{' + p + '}'\n            )}$`\n            c = (e * c) / p\n            d = (f * d) / p\n          } else {\n            c = e * c\n            d = f * d\n          }\n          p = ppcm(d, b) // mise au même dénominateur\n          if (d % b !== 0 && b % d !== 0) {\n            // dénominateur commun = p\n            k1 = p / b\n            k2 = p / d\n            texteCorr += `$=${signe1}${texFraction(\n              a + miseEnEvidence('\\\\times' + k1),\n              b + miseEnEvidence('\\\\times' + k1)\n            )}${signe2}${texFraction(\n              c + miseEnEvidence('\\\\times' + k2),\n              d + miseEnEvidence('\\\\times' + k2)\n            )}$`\n            texteCorr += `$=${signe1}${texFraction(\n              a * k1,\n              b * k1\n            )}${signe2}${texFraction(c * k2, d * k2)}$`\n            texteCorr += `$=${texFraction(\n              signe1 + a * k1 + signe2 + c * k2,\n              b * k1\n            )}$`\n            a = a * k1\n            c = c * k2\n            d = p\n          } else {\n            if (p === d) {\n              k1 = d / b // d = dénominateur commun\n              texteCorr += `$=${signe1}${texFraction(\n                a + miseEnEvidence('\\\\times' + k1),\n                b + miseEnEvidence('\\\\times' + k1)\n              )}${signe2}${texFraction(c, d)}$`\n              texteCorr += `$=${signe1}${texFraction(\n                a * k1,\n                d\n              )}${signe2}${texFraction(c, d)}$`\n              texteCorr += `$=${texFraction(\n                signe1 + a * k1 + signe2 + c,\n                d\n              )}$`\n              a = a * k1\n            } else {\n              // b=k2*d\n              k2 = b / d // b= dénominateur commun\n              texteCorr += `$=${signe1}${texFraction(\n                a,\n                b\n              )}${signe2}${texFraction(\n                c + miseEnEvidence('\\\\times' + k2),\n                d + miseEnEvidence('\\\\times' + k2)\n              )}$`\n              texteCorr += `$=${signe1}${texFraction(\n                a,\n                b\n              )}${signe2}${texFraction(c * k2, b)}$`\n              texteCorr += `$=${texFraction(\n                signe1 + a + signe2 + c * k2,\n                b\n              )}$`\n              c = c * k2\n              d = d * k2\n            }\n          }\n\n          if (a !== c) {\n            e = 0\n            if (signe1 === '') {\n              e = a\n            } else {\n              e = -a\n            }\n            if (signe2 === '+') {\n              e += c\n            } else {\n              e -= c\n            }\n          } else {\n            if (\n              (signe1 === '-' && signe2 === '+') ||\n              (signe1 === '' && signe2 === '-')\n            ) {\n              e = 0\n            } else {\n              e = 0\n              if (signe1 === '') {\n                e = a + c\n              } else {\n                e = -a - c\n              }\n            }\n          }\n\n          texteCorr += `$=${texFractionSigne(e, d)}${simplificationDeFractionAvecEtapes(e, d)}$`\n          reponse = fraction(e, d).simplifie()\n          break\n      }\n\n      if (this.questionJamaisPosee(i, a, b, c, d, typesDeQuestions)) {\n        if (context.isAmc) {\n          this.autoCorrection[i] = {\n            enonce: `Calculer $${texte.substring(1, texte.length - 1)}$ et donner le résultat sous forme irreductible`,\n            propositions: [\n              {\n                texte: texteCorr,\n                statut: 3,\n                feedback: ''\n              }\n            ],\n            reponse: {\n              texte: 'numérateur',\n              valeur: reponse.signe * Math.abs(reponse.num),\n              param: {\n                digits: nombreDeChiffresDansLaPartieEntiere(Math.abs(reponse.num)),\n                decimals: 0,\n                exposantNbChiffres: 0,\n                exposantSigne: false,\n                signe: reponse.signe === -1,\n                approx: 0\n              }\n            },\n            reponse2: {\n              texte: 'dénominateur',\n              valeur: Math.abs(reponse.den),\n              param: {\n                digits: nombreDeChiffresDansLaPartieEntiere(Math.abs(reponse.den)),\n                decimals: 0,\n                exposantNbChiffres: 0,\n                exposantSigne: false,\n                signe: false,\n                approx: 0\n              }\n            }\n          }\n        } else {\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n          setReponse(this, i, reponse, { formatInteractif: 'fraction' })\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté ', 4,\n    '1 : Fractions faciles, positives ou non\\n2 : Nombres positifs sans piège de priorité\\n3 : Deux calculs avec positifs et piège de priorité et deux calculs avec relatifs\\n4 : Calculs avec relatifs'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","ExerciceAdditionnerFractionProduit","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","correctionDetailleeDisponible","correctionDetaillee","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","listeFractions","obtenirListeFractionsIrreductibles","listeFractionsFaciles","obtenirListeFractionsIrreductiblesFaciles","nombreDeSigneMoins","listeTypeDeQuestions","combinaisonListes","ab","cd","ef","a","b","c","d","e","f","p","k1","k2","reponse","signe1","signe2","texte","texteCorr","typesDeQuestions","i","produit","cpt","choice","texFraction","produitDeDeuxFractions","pgcd","ppcm","miseEnEvidence","simplificationDeFractionAvecEtapes","fraction","simplifie","randint","Math","pow","abs","texFractionSigne","questionJamaisPosee","context","autoCorrection","enonce","substring","length","propositions","statut","feedback","valeur","signe","num","param","digits","nombreDeChiffresDansLaPartieEntiere","decimals","exposantNbChiffres","exposantSigne","approx","reponse2","den","ajouteChampTexteMathLive","setReponse","formatInteractif","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}