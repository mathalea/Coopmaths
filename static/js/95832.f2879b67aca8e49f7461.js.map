{"version":3,"file":"js/95832.f2879b67aca8e49f7461.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6C31.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport Operation from '../../modules/operations.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, arrondi, nombreDeChiffresDansLaPartieEntiere, nombreDeChiffresDansLaPartieDecimale } from '../../modules/outils.js'\nimport { setReponse, ajouteChampTexte } from '../../modules/gestionInteractif.js'\nexport const amcReady = true // Jusqu'à l'adaptation à la version 2.6\nexport const interactifReady = true\nexport const interactifType = 'numerique'\nexport const amcType = 'AMCNum' // Question numérique\nexport const titre = 'Effectuer divisions décimales'\n\n/**\n * Effectuer les divisions décimales suivantes et donner la valeur exacte de leur quotient.\n *\n * Niveau de difficulté 1 :\n * * entier divisé par 4 quotient : xx,25 ou xx,75\n * * entier divisé par 8 quotient : x,125 ou x,375 ou x,625 ou x,875\n * * entier divisé par 6 quotient : xxx,5\n * * quotient xx,xx division par 2, 3 , 4 ou 5\n * * quotient x,xxx division par 6 à 9\n * * un 0 dans le quotient\n *\n * Niveau de difficulté 2 : division par 3, 7 ou 9\n * @author Rémi Angot\n * Référence 6C31\n */\nexport default function DivisionDecimale () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Effectuer les divisions décimales suivantes et donner la valeur exacte de leur quotient.'\n  this.spacing = 2\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1) // Important sinon opdiv n'est pas joli\n  this.nbQuestions = 4\n  this.sup = 1\n  this.listePackages = 'xlop'\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles\n\n    parseInt(this.sup) === 1\n      ? (typesDeQuestionsDisponibles = [choice([1, 2, 3]), 4, 5, 6])\n      : (typesDeQuestionsDisponibles = [7, 8, 9])\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let typesDeQuestions\n    for (\n      let i = 0, texte, texteCorr, cpt = 0, a, b, q;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // entier divisé par 4 quotient : xx,25 ou xx,75\n          b = 4\n          a = (randint(2, 9) * 10 + randint(2, 9)) * 4 + choice([1, 3])\n          q = calcul(a / b)\n          break\n        case 2: // entier divisé par 8 quotient : x,125 ou x,375 ou x,625 ou x,875\n          b = 8\n          a = randint(2, 9) * 8 + choice([1, 3, 5, 7])\n          q = calcul(a / b)\n          break\n        case 3: // entier divisé par 6 quotient : xxx,5\n          b = 6\n          q = calcul(\n            randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) + 0.5\n          )\n          a = q * 6\n          break\n        case 4: // quotient xx,xx division par 2, 3 , 4 ou 5\n          q = calcul(\n            randint(2, 5) * 10 +\n            randint(2, 5) +\n            randint(2, 5) / 10 +\n            randint(2, 5) / 100\n          )\n          b = randint(2, 5)\n          a = calcul(b * q)\n          break\n        case 5: // quotient x,xxx division par 6 à 9\n          q = calcul(\n            randint(6, 9) +\n            randint(5, 9) / 10 +\n            randint(6, 9) / 100 +\n            randint(6, 9) / 1000\n          )\n          b = randint(6, 9)\n          a = calcul(b * q)\n          break\n        case 6: // un 0 dans le quotient\n          if (randint(1, 2) === 1) {\n            // x0x,x\n            q = calcul(\n              randint(2, 9) * 100 + randint(2, 9) + randint(2, 9) / 10\n            )\n          } else {\n            // xx0,x\n            q = calcul(\n              randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) / 10\n            )\n          }\n          b = randint(7, 9)\n          a = calcul(b * q)\n          break\n        case 7: // division par 7\n          a = randint(2, 9) * 7 + randint(1, 6)\n          b = 7\n          q = arrondi(a / b, 3)\n          break\n        case 8: // division par 9\n          a = calcul((randint(11, 19) * 9) / 10 + randint(1, 8) / 10)\n          b = 9\n          q = arrondi(a / b, 3)\n          break\n        case 9: // division par 3\n          a = calcul((randint(11, 99) * 3) / 100 + randint(1, 2) / 100)\n          b = 3\n          q = arrondi(a / b, 3)\n      }\n      if (this.sup === 2) {\n        this.consigne =\n          'Effectuer les divisions décimales suivantes et donner une valeur approchée de leur quotient au millième près.'\n      }\n      texte = `$${texNombre(a)}\\\\div${b}$`\n      if (this.sup === 1) {\n        texteCorr = Operation({ operande1: a, operande2: b, type: 'division', precision: 3 })\n        texteCorr += `<br>$${texNombre(a)}\\\\div${b}=${texNombre(q)}$`\n      } else {\n        texteCorr = Operation({ operande1: a, operande2: b, type: 'division', precision: 3 })\n        texteCorr += `<br>$${texNombre(a)}\\\\div${b}\\\\approx${texNombre(q)}$`\n      }\n      setReponse(this, i, q)\n      if (context.isHtml && this.interactif) texte += '$~=$' + ajouteChampTexte(this, i)\n      if (context.isAmc) {\n        this.autoCorrection[i].enonce = texte\n        this.autoCorrection[i].propositions = [{ texte: texteCorr, statut: '' }]\n        this.autoCorrection[i].reponse.param = { digits: nombreDeChiffresDansLaPartieEntiere(q) + nombreDeChiffresDansLaPartieDecimale(q) + 2, decimals: nombreDeChiffresDansLaPartieDecimale(q) + 1, signe: false, exposantNbChiffres: 0 }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de questions',\n    2,\n    '1 : Déterminer le quotient exact\\n2 : Déterminer un quotient approché au millième près'\n  ]\n}\n"],"names":["amcReady","interactifReady","interactifType","amcType","titre","DivisionDecimale","Exercice","this","consigne","spacing","context","spacingCorr","nbQuestions","sup","listePackages","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","listeQuestions","listeCorrections","autoCorrection","choice","listeTypeDeQuestions","combinaisonListes","typesDeQuestions","texte","texteCorr","a","b","q","i","cpt","randint","calcul","arrondi","texNombre","Operation","operande1","operande2","type","precision","setReponse","interactif","ajouteChampTexte","enonce","propositions","statut","reponse","param","digits","nombreDeChiffresDansLaPartieEntiere","nombreDeChiffresDansLaPartieDecimale","decimals","signe","exposantNbChiffres","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique"],"sourceRoot":""}