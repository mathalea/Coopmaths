{"version":3,"sources":["webpack://mathalea/./src/js/exercices/4e/4G21.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","amcReady","amcType","interactifReady","ReciproquePythagore","Exercice","this","interactif","consigne","nbQuestions","nbCols","nbColsCorr","sup","context","spacingCorr","nouvelleVersion","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","listeTripletsPythagoriciens","nomsTriangles","texte","texteCorr","a","b","c","A","B","C","nomTriangle","triplet","ordreDesCotes","i","cpt","autoCorrection","propositions","statut","options","ordered","creerNomDePolygone","push","choice","enleveElement","randint","Math","max","calcul","texNombre","texNombrec","propositionsQcm","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/5842.12f4d1bd4df155899896.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, combinaisonListes, calcul, texNombrec, creerNomDePolygone, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Déterminer si un triangle est rectangle ou pas.'\nexport const amcReady = false // tant qu'il n'a pas été adapté à la version 2.6\nexport const amcType = 1 // QCM\nexport const interactifReady = true\n\n/**\n * À partir de la donnée des 3 longueurs d'un triangle, déterminer si il est rectangle ou pas.\n * @author Rémi Angot\n * 4G21\n */\nexport default function ReciproquePythagore () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactif = true\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 3\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeTypeDeQuestions = []\n    if (this.sup === 1) {\n      listeTypeDeQuestions = combinaisonListes(['rectangle'], this.nbQuestions)\n    } else if (this.sup === 2) {\n      listeTypeDeQuestions = combinaisonListes(['pas_rectangle'], this.nbQuestions)\n    } else { // (this.sup === 3)\n      listeTypeDeQuestions = combinaisonListes(['rectangle', 'pas_rectangle'], this.nbQuestions)\n    }\n    const listeTripletsPythagoriciens = [\n      [3, 4, 5],\n      [5, 12, 13],\n      [6, 8, 10],\n      [7, 24, 25],\n      [8, 15, 17],\n      [9, 12, 15],\n      [9, 40, 41],\n      [10, 24, 26],\n      [11, 60, 61],\n      [12, 16, 20],\n      [12, 35, 37],\n      [13, 84, 85],\n      [14, 48, 50],\n      [15, 20, 25],\n      [15, 36, 39],\n      [16, 30, 34],\n      [16, 63, 65],\n      [18, 24, 30],\n      [18, 80, 82],\n      [20, 21, 29],\n      [20, 48, 52],\n      [21, 28, 35],\n      [21, 72, 75],\n      [24, 32, 40],\n      [24, 45, 51],\n      [24, 70, 74],\n      [25, 60, 65],\n      [27, 36, 45],\n      [28, 45, 53],\n      [28, 96, 100],\n      [30, 40, 50],\n      [30, 72, 78],\n      [32, 60, 68],\n      [33, 44, 55],\n      [33, 56, 65],\n      [35, 84, 91],\n      [36, 48, 60],\n      [36, 77, 85],\n      [39, 52, 65],\n      [39, 80, 89],\n      [40, 42, 58],\n      [40, 75, 85],\n      [42, 56, 70],\n      [45, 60, 75],\n      [48, 55, 73],\n      [48, 64, 80],\n      [51, 68, 85],\n      [54, 72, 90],\n      [57, 76, 95],\n      [60, 63, 87],\n      [60, 80, 100],\n      [65, 72, 97]\n    ]\n    const nomsTriangles = [] // on mémorise les noms des triangles pour ne pas les redonner\n    for (\n      let i = 0,\n        texte,\n        texteCorr,\n        a,\n        b,\n        c, A, B, C,\n        nomTriangle,\n        triplet,\n        ordreDesCotes,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true }\n      nomTriangle = creerNomDePolygone(3, nomsTriangles)\n      nomsTriangles.push(nomTriangle)\n      A = nomTriangle[0]\n      B = nomTriangle[1]\n      C = nomTriangle[2]\n      triplet = choice(listeTripletsPythagoriciens)\n      enleveElement(listeTripletsPythagoriciens, triplet) // Supprime le triplet pour les prochaines questions\n      a = triplet[0]\n      b = triplet[1]\n      c = triplet[2]\n      if (listeTypeDeQuestions[i] === 'pas_rectangle') {\n        c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        while (a ** 2 + b ** 2 === c ** 2) {\n          // si par hasard (est-ce possible ?) on retombe sur un triplet pythagoricien on change les valeurs\n          c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        }\n      }\n      if (a > 9 && choice([true, true, true, false])) {\n        // le plus souvent on utilise des décimaux\n        a = calcul(a / 10)\n        b = calcul(b / 10)\n        c = calcul(c / 10)\n      }\n      ordreDesCotes = randint(1, 3)\n      switch (ordreDesCotes) {\n        case 1:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + B\n            }=${texNombre(c)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n        case 2:\n          texte = `Le triangle $${nomTriangle}$ est tel que  $${B + C\n            }=${texNombre(a)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${A + B\n            }=${texNombre(c)}$ cm.`\n          break\n        case 3:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + C\n            }=${texNombre(b)}$ cm, $${A + B}=${texNombre(c)}$ cm,  et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n      }\n      texte += '<br>Ce triangle est-il rectangle ?'\n      texteCorr = `Dans le triangle $${nomTriangle}$, le plus grand côté est $[${A + B\n        }]$.`\n      texteCorr += `<br>$${A + B}^2=${texNombre(c)}^2=${texNombrec(\n        c ** 2\n      )}$`\n      texteCorr += `<br>$${A + C}^2+${B + C}^2=${texNombre(b)}^2+${texNombre(\n        a\n      )}^2=${texNombrec(b ** 2 + a ** 2)}$`\n      if (listeTypeDeQuestions[i] === 'rectangle') {\n        this.autoCorrection[i].propositions[0].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore est vérifiée donc $${nomTriangle}$ est rectangle en $${C}$.`\n      } else {\n        this.autoCorrection[i].propositions[1].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2\\\\not=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore n'est pas vérifiée donc $${nomTriangle}$ n'est pas rectangle.`\n      }\n      texte += propositionsQcm(this, i).texte\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 3, \"1 : Démontrer qu'un triangle est rectangle\\n2 : Démontrer qu'un triangle n'est pas rectangle\\n3 : Déterminer si un triangle est rectangle ou pas \"]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}