{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","CriteresDeDivisibilite","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nouvelleVersion","listeExercicesDisponibles","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","n","u","texte","texteCorr","sommeString","i","cpt","autoCorrection","enonce","propositions","statut","options","ordered","randint","texNombre","choice","toString","sommeDesChiffres","calcul","interactif","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","message","feedback","type","querySelectorAll","uicheck","exerciceQcm","espace","context","undefined","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/4595.4bbdf7e4d30f54274121.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, sommeDesChiffres, calcul, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\nexport const titre = 'Critères de divisibilité'\n\n/**\n * Un nombre est-il divisible par :\n *\n * * 2, 5, 10 ?\n * * 3, 9 ?\n * * 2, 3, 5, 9, 10 ?\n * * 2, 3, 5, 9, 10  et un autre nombre qui peut être 7, 13, 17, ou 19 ?\n * @Auteur Rémi Angot\n * 6N43\n */\nexport default function CriteresDeDivisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4 // Correspond au facteur commun\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.amcType = amcType\n  this.consigne = 'Répondre aux questions suivantes en justifiant.'\n  this.spacing = 2\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeExercicesDisponibles\n    if (this.sup === 1) {\n      listeExercicesDisponibles = [2, 5, 10]\n    }\n    if (this.sup === 2) {\n      listeExercicesDisponibles = [3, 9]\n    }\n    if (this.sup === 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10]\n    }\n    if (this.sup > 3) {\n      listeExercicesDisponibles = [2, 3, 5, 9, 10, 'autre']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      listeExercicesDisponibles,\n      this.nbQuestions\n    )\n    for (let i = 0, n, u, texte, texteCorr, sommeString, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        },\n        {\n          texte: 'Je ne sais pas',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = { ordered: true } // On ne mélange pas les propositions 'Oui', 'Non' et 'Je ne sais pas'\n      switch (listeTypeDeQuestions[i]) {\n        case 2:\n          u = randint(1, 2)\n          n = randint(10, 999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $2$ ?`\n          if (u % 2 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $2$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $2$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 3:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $3$ ?`\n          if (calcul(sommeString) % 3 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${calcul(sommeString) / 3\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $3$ donc $${texNombre(\n              n\n            )}$ est divisible par $3$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${(calcul(sommeString) - (calcul(sommeString) % 3)) / 3\n              }+${calcul(sommeString) % 3}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 9:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $9$ ?`\n          if (calcul(sommeString) % 9 === 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${calcul(sommeString) / 9\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $9$ donc $${texNombre(\n              n\n            )}$ est divisible par $9$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${(calcul(sommeString) - (calcul(sommeString) % 9)) / 9\n              }+${calcul(sommeString) % 9}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 5:\n          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]) // 1 fois sur 2 ça sera divisible par 5\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $5$ ?`\n          if (u % 5 === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $5$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $5$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 10:\n          u = choice([randint(1, 9), 0]) // 1 fois sur 2 ça sera divisible par 10\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $10$ ?`\n          if (u === 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $10$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $10$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n          break\n\n        case 'autre':\n          n = randint(100, 999)\n          u = choice([7, 7, 7, 7, 13, 17, 19])\n          if (u === 7) {\n            n = choice(\n              [randint(10, 99) * 10 + 7],\n              7 * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par 7, un divisible par 7, un au hasard\n          } else {\n            n = choice(\n              [randint(10, 99) * 100 + u],\n              u * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par u, un divisible par u, un au hasard\n          }\n          texte = `$${texNombre(n)}$ est-il divisible par $${u}$ ?`\n          texteCorr = `On ne connait pas de critère de divisibilité par $${u}$, on calcule donc la division euclidienne de $${texNombre(\n            n\n          )}$ par $${u}$.<br>`\n          if (n % u === 0) {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${texNombre(\n              n / u\n            )}$<br>`\n            texteCorr += `Le reste de la division euclidienne est nul donc $${texNombre(\n              n\n            )}$ est divisible par $${u}$.`\n            this.autoCorrection[i].propositions[0].statut = true\n          } else {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${(n - (n % u)) / u}+${n % u\n              }$<br>`\n            texteCorr += `Le reste de la division euclidienne n'est pas nul donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $${u}$.`\n            this.autoCorrection[i].propositions[1].statut = true\n          }\n\n          break\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Choix des questions', 4, '1 : Critères de divisibilité par 2, 5, 10\\n2 : Critères de divisibilité par 3,9\\n3 : Critères de divisibilité par 2, 3, 5, 9, 10\\n4 : Avec ou sans critère de divisibilité']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.',',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n\n\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (var prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n// Module regroupant les fonctions de gestions des erreurs.\n\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} [feedback.message]\n * @param {string} [feedback.type]\n * @param {string} [feedback.titre]\n */\nexport function addFeedback (container, { message = 'Une erreur est survenue', type = 'erreur', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}