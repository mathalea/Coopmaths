{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43-3.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["amcReady","titre","ExerciceVraiFauxDivisibleMultipleDiviseur","justification","N","a","booleen","result","sommeDesChiffres","toString","calcul","texNombre","Math","floor","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","qcmDisponible","modeQcm","nouvelleVersion","tabrep","tabicone","qcm","ordered","lastChoices","espace","sortieHtml","listeQuestions","listeCorrections","type_de_questions_disponibles","choice","liste_de_N_disponibles","listeTypeDeQuestions","combinaisonListes","liste_de_N","texte","texteCorr","i","cpt","randint","replace","mathalea","sortieAMC","length","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","boutonAide","pasDeVersionLatex","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/1183.f3508da0a777b4e34a73.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,combinaisonListes,sommeDesChiffres,calcul,texNombre, randint, choice} from '../../modules/outils.js'\nexport const amcReady = true\n\nexport const titre = 'Diviseur, multiple, divisible - Vrai ou faux'\n\n/**\n * Vrai ou faux sur les notions de diviseur ou multiple\n * @Auteur Rémi Angot\n * Référence 6N43-3\n*/\nexport default function ExerciceVraiFauxDivisibleMultipleDiviseur() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"Pour chaque affirmation, indiquer si elle est vraie ou fausse.\";\n  this.nbQuestions = 5;\n  this.nbCols = 2; // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2; // Uniquement pour la sortie LaTeX\n  this.sup = 1; // Niveau de difficulté à ne définir que si on peut le modifier avec un formulaire en paramètre\n  this.tailleDiaporama = 100; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = \"\" // Id YouTube ou url\n  this.qcmDisponible=true\n  this.modeQcm=false\n  \n  function justification(N,a,booleen) {\n\n    let result\n    if (booleen == true){\n      if (N == 2) {\n        result = ', car son chiffre des unités est $0$, $2$, $4$, $6$ ou $8$.'\n      }\n      else if (N == 5) {\n        result = ', car son chiffre des unités est $0$, ou $5$.'\n      }\n      else if (N == 3 || N == 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui est divisible par $${N}$.`\n      }\n      else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${calcul(a/N)}$.`\n      }\n    }\n    if (booleen == false){\n      if (N == 2) {\n        result = \", car son chiffre des unités n'est pas $0$, $2$, $4$, $6$ ou $8$.\"\n      }\n      else if (N == 5) {\n        result = \", car son chiffre des unités n'est pas $0$, ou $5$.\"\n      }\n      else if (N == 3 || N == 9) {\n        result = `, car la somme de ses chiffres est $${sommeDesChiffres(a.toString())}=${calcul(sommeDesChiffres(a.toString()))}$ qui n'est pas divisible par $${N}$.`\n      }\n      else {\n        result = `, car $${texNombre(a)} = ${N}\\\\times ${Math.floor(a/N)}+ ${a%N}$.`\n      }\n    }\n    return result\n  }\n\n  this.nouvelleVersion = function () {\n    this.qcm=['6N43-3',[],\"Diviseur, multiple, divisible - Vrai ou faux\",1,{ordered:true,lastChoices:2}]\n    let tabrep,tabicone\n    let espace =``;\n    if (sortieHtml) {\n      espace = `&emsp;`;\n    } else {\n      espace = `\\\\qquad`;\n    }\n\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let type_de_questions_disponibles = ['Ndiviseur','divisibleParN','multipleDeN','NdiviseurF','divisibleParNF','multipleDeNF','NdiviseurEnvers','divisibleParNEnvers','multipleDeNEnvers']; \n    if (this.nbQuestions<8) {\n      type_de_questions_disponibles = [choice(['Ndiviseur','divisibleParN']),'multipleDeN',choice(['NdiviseurF','divisibleParNF']),'multipleDeNF',choice(['NdiviseurEnvers','divisibleParNEnvers','multipleDeNEnvers'])]; \n    }\n    let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles,this.nbQuestions); // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let liste_de_N_disponibles\n    if (this.sup == 1) {\n        liste_de_N_disponibles = [2,5]\n    }\n    if (this.sup == 2) {\n        liste_de_N_disponibles = [2,3,5,9]\n    }\n    if (this.sup == 3) {\n        liste_de_N_disponibles = [7,11,13,20,30,25]\n    }\n    let liste_de_N = combinaisonListes(liste_de_N_disponibles,this.nbQuestions); // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, N, a, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n        // Boucle principale où i+1 correspond au numéro de la question\n        N = liste_de_N[i]\n        a = randint(199,999)*N;\n        switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'Ndiviseur': \n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Vrai';\n          texteCorr += justification(N,a,true);\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[1,0,0]\n          break;\n        case 'divisibleParN': \n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Vrai';\n          texteCorr += justification(N,a,true)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[1,0,0]\n         break;\n        case 'multipleDeN': \n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Vrai';\n          texteCorr += justification(N,a,true)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[1,0,0]\n         break;\n        case 'NdiviseurF':\n          a += randint(1,N-1) \n          texte = `$${N}$ est un diviseur de $${texNombre(a)}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += justification(N,a,false)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n         break;\n        case 'divisibleParNF': \n          a += randint(1,N-1) \n          texte = `$${texNombre(a)}$ est divisible par $${N}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += justification(N,a,false)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n          break;\n        case 'multipleDeNF': \n          a += randint(1,N-1) \n          texte = `$${texNombre(a)}$ est un multiple de $${N}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += justification(N,a,false)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n          break;\n        case 'NdiviseurEnvers': \n          texte = `$${texNombre(a)}$ est un diviseur de $${N}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += `, il faudrait plutôt dire $${N}$ est un diviseur de $${texNombre(a)}$`\n          texteCorr += justification(N,a,true)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n          break;\n        case 'divisibleParNEnvers': \n          texte = `$${N}$ est divisible par $${texNombre(a)}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += `, il faudrait plutôt dire $${texNombre(a)}$ est divisible par $${N}$`\n          texteCorr += justification(N,a,true)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n          break;\n        case 'multipleDeNEnvers': \n          texte = `$${N}$ est un multiple de $${texNombre(a)}$.`;\n          texteCorr = texte.replace('.',' ') + ' : Faux';\n          texteCorr += `, il faudrait plutôt dire $${a}$ est un multiple de $${N}$`\n          texteCorr += justification(N,a,true)\n          tabrep=[\"Vrai\",\"Faux\",\"Je ne sais pas\"];\n          tabicone=[0,1,0]\n           break;\n      }\n      if (this.modeQcm&&!mathalea.sortieAMC) {\n        texteCorr=`${texte}..`\n        texte+=`<br><br>  Réponses possibles : ${espace}  `\n        //shuffle2tableaux(tabrep, tabicone);\n        for (let i=0; i<tabrep.length; i++) {\n          texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n         if (tabicone[i]==1) {\n           texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace ;\n         } else {\n           texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace ;\n         }\n       }\n      }\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        this.qcm[1].push([`${texte}.\\\\\\\\ \\n `,\n        tabrep,\n        tabicone]) \n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : Critères de divisibilité par 2 et 5\\n2 : Critères de divisibilité par 2, 3, 5 et 9\\n3 : Sans critères de divisibilité'];\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}