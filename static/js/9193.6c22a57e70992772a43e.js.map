{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Exercice_perimetres_et_aires.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["Exercice_perimetres_et_aires","difficulte","Exercice","this","sup","titre","consigne","spacing","nbQuestions","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestions","partieDecimale1","partieDecimale2","partieDecimale3","triplets_pythagoriciens","typesDeQuestionsDisponibles","sup2","calcul","randint","enleveElement","nbCols","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","cote","nom_carre","creerNomDePolygone","choice","texNombre","texNombrec","L","l","nom_rectangle","triplet","a","b","c","nom_triangle","R","arrondiVirgule","Math","PI","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbColsCorr","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/9193.6c22a57e70992772a43e.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,enleveElement,choice,combinaisonListes,arrondiVirgule,calcul,texNombrec,creerNomDePolygone,texNombre} from '../../modules/outils.js'\n\n/**\n * Déterminer le périmètre et l'aire d'un carré, d'un rectangle, d'un triangle rectangle, d'un cercle\n *\n * * 1 : Carré, rectangle et triangle rectangle\n * * 2: Uniquement des cercles\n * * 3 : Les 4 sont demandés\n * @author Rémi Angot// modifié par Mireille Gain pour le support des décimaux\n */\nexport default function Exercice_perimetres_et_aires(difficulte = 1) {\n  //Calculer le périmètre et l'aire de figures\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = difficulte;\n  this.titre = \"Calculs de périmètres et d'aires\";\n  this.consigne =\n    \"Pour chacune des figures, calculer son périmètre puis son aire (valeur exacte et si nécessaire valeur approchée au dixième près).\";\n  this.spacing = 1;\n  this.nbQuestions = 4;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let triplets_pythagoriciens = [\n      [3, 4, 5],\n      [6, 8, 10],\n      [15, 8, 17],\n      [24, 10, 26],\n      [5, 12, 13],\n      [12, 16, 20],\n      [21, 20, 29],\n      [9, 40, 41],\n    ];\n    let typesDeQuestionsDisponibles = [\n      \"carre\",\n      \"rectangle\",\n      \"triangle_rectangle\",\n      \"cercle\",\n    ],typesDeQuestions;\n    let partieDecimale1, partieDecimale2, partieDecimale3;\n    if (this.sup2) {\n      partieDecimale1 = calcul(randint(1, 9) / 10);\n      partieDecimale2 = calcul(randint(1, 9) / 10);\n      partieDecimale3 = calcul(randint(1, 9) / 10 * randint(0, 1));\n    }\n    else {\n      partieDecimale1 = 0;\n      partieDecimale2 = 0;\n      partieDecimale3 = 0;\n    }\n\n    if (this.sup == 1) {\n      enleveElement(typesDeQuestionsDisponibles, \"cercle\");\n      this.nbCols = 1;\n    } else if (this.sup == 2) {\n      typesDeQuestionsDisponibles = [\"cercle\"];\n    }\n    let listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i];\n      switch (typesDeQuestions) {\n        case \"carre\":\n          let cote = calcul(randint(2, 11) + partieDecimale1);\n          let nom_carre = creerNomDePolygone(4);\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un carré $${nom_carre}$ de $${texNombre(cote)}$ cm de côté .`;\n          } else {\n            texte = `Un carré $${nom_carre}$ tel que $${nom_carre[0] + nom_carre[1]} = ${texNombre(cote)}$ cm.`;\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nom_carre}}=4\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(4 * cote)}~\\\\text{cm}$<br>`;\n          texteCorr += `$\\\\mathcal{A}_{${nom_carre}}=${texNombre(cote)}~\\\\text{cm}\\\\times${texNombre(cote)}~\\\\text{cm}=${texNombrec(cote * cote)}~\\\\text{cm}^2$`;\n          break;\n        case \"rectangle\":\n          let L = calcul(randint(3, 11) + partieDecimale2);\n          let l = randint(2, L - 1);\n          let nom_rectangle = creerNomDePolygone(4);\n          if (choice([true, false])) {\n            // 2 énoncés possibles équiprobables\n            texte = `Un rectangle $${nom_rectangle}$ de $${texNombre(L)}$ cm de longueur et de $${l}$ cm de largeur.`;\n          } else {\n            texte = `Un rectangle $${nom_rectangle}$ tel que $${nom_rectangle[0] + nom_rectangle[1] + \" = \" + texNombre(L)}$ cm et $${nom_rectangle[1] + nom_rectangle[2] + \" = \" + l}$ cm.`;\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nom_rectangle}}=(${texNombre(L)}~\\\\text{cm}+${l}~\\\\text{cm})\\\\times2=${texNombrec((L + l) * 2)}~\\\\text{cm}$<br>`;\n          texteCorr += `$\\\\mathcal{A}_{${nom_rectangle}}=${texNombre(L)}~\\\\text{cm}\\\\times${l}~\\\\text{cm}=${texNombrec(L * l)}~\\\\text{cm}^2$`;\n          break;\n        case \"triangle_rectangle\":\n          let triplet = choice(triplets_pythagoriciens);\n          enleveElement(triplets_pythagoriciens, triplet);\n          let a = calcul(triplet[0] * (1 + partieDecimale1));\n          let b = calcul(triplet[1] * (1 + partieDecimale1));\n          let c = calcul(triplet[2] * (1 + partieDecimale1));\n          let nom_triangle = creerNomDePolygone(3);\n          if (choice([true, false])) {\n            texte = `Un triangle $${nom_triangle}$ rectangle en $${nom_triangle[1]}$ tel que $${nom_triangle[0] + nom_triangle[1] + \" = \" + texNombre(a)}$ cm, $${nom_triangle[1] + nom_triangle[2] + \" = \" + texNombre(b)}$ cm\\\n et $${nom_triangle[0] + nom_triangle[2] + \" = \" + texNombre(c)}$ cm.`;\n          } else {\n            texte = `Un triangle rectangle $${nom_triangle}$ a pour côtés : $${texNombre(a)}$ cm, $${texNombre(c)}$ cm et $${texNombre(b)}$ cm.`;\n          }\n\n          texteCorr = `$\\\\mathcal{P}_{${nom_triangle}}=${texNombre(a)}~\\\\text{cm}+${texNombre(b)}\n          ~\\\\text{cm}+${texNombre(c)}~\\\\text{cm}=${texNombre(a + b + c)}~\\\\text{cm}$<br>`;\n          texteCorr += `$\\\\mathcal{A}_{${nom_triangle}}=${texNombre(a)}~\\\\text{cm}\\\\times${texNombre(b)}~\\\\text{cm}\\\\div2=${texNombrec(a * b / 2)}~\\\\text{cm}^2$`;\n          break;\n        case \"cercle\":\n          let R = randint(3, 11);\n          let donne_le_diametre = choice([true, false]);\n          if (donne_le_diametre) {\n            texte = `Un cercle de $${2 * R}$ cm de diamètre.`;\n            texteCorr = `Le diamètre est de $${2 * R}$ cm donc le rayon est de $${R}$ cm.<br>`;\n          } else {\n            texte = `Un cercle de $${R}$ cm de rayon.`;\n            texteCorr = \"\";\n          }\n\n          texteCorr += `$\\\\mathcal{P}=2\\\\times${R}\\\\times\\\\pi~\\\\text{cm}=${2 * R}\\\\pi~\\\\text{cm}\\\\approx${arrondiVirgule(\n            2 * R * Math.PI,\n            1\n          )}~\\\\text{cm}$<br>`;\n          texteCorr += `$\\\\mathcal{A}=${R}\\\\times${R}\\\\times\\\\pi~\\\\text{cm}^2=${R * R}\\\\pi~\\\\text{cm}^2\\\\approx${arrondiVirgule(\n            R * R * Math.PI,\n            1\n          )}~\\\\text{cm}^2$`;\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Niveau de difficulté\",\n    3,\n    \"1 : Carré, rectangle et triangle rectangle\\n2: Cercles\\n3: Mélangé\",\n  ];\n  this.besoinFormulaire2CaseACocher = [\"Avec des décimaux\", false];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}