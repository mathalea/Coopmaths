{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Exercice_conversions_aires.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["Algebrite","require","Exercice_conversions_aires","niveau","Exercice","this","sup","sup2","titre","consigne","spacing","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","prefixe_multi","prefixe_div","unite","liste_unite","liste_de_k","combinaisonListes","nbQuestions","a","k","div","resultat","type_de_questions","texte","texteCorr","i","cpt","randint","choice","arrondi","eval","toString","texNombre","tex_texte","unite1","ecart","unite2","Math","pow","indexOf","est_diaporama","replace","sortieHtml","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/2686.58c291208368d0e1185a.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,arrondi,texNombre,tex_texte} from '../../modules/outils.js'\nconst Algebrite = require('algebrite')\n\n/**\n * Conversions d'aires en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * Dans la correction, on montre que l'on multiplie ou divisie à 2 reprises par le coefficient donné par le préfixe\n *\n * * 1 : De dam², hm², km² vers m²\n * * 2 : De dm², cm², mm² vers m²\n * * 3 : Conversions en mètres-carrés\n * * 4 : Conversions avec des multiplications ou des divisions\n * * 5 : Conversions avec des ares, des centiares et des hectares\n * * 6 : Un mélange de toutes les conversions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @Auteur Rémi Angot\n * Référence 6M23\n */\nexport default function Exercice_conversions_aires(niveau = 1) {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = niveau; // Niveau de difficulté de l'exercice\n  this.sup2 = false; // Avec des nombres décimaux ou pas\n  this.titre = \"Conversions d'aires\";\n  this.consigne = \"Compléter\";\n  this.spacing = 2;\n  this.nbColsCorr = 1;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let prefixe_multi = [\n      [\" da\", \"\\\\times10\\\\times10\", 100],\n      [\" h\", \"\\\\times100\\\\times100\", 10000],\n      [\" k\", \"\\\\times1~000\\\\times1~000\", 1000000],\n    ];\n    let prefixe_div = [\n      [\" d\", \"\\\\div10\\\\div10\", 100],\n      [\" c\", \"\\\\div100\\\\div100\", 10000],\n      [\" m\", \"\\\\div1~000\\\\div1~000\", 1000000],\n    ];\n    let unite = \"m\";\n    let liste_unite = [\"mm\", \"cm\", \"dm\", \"m\", \"dam\", \"hm\", \"km\"];\n    let liste_de_k = combinaisonListes([0, 1, 2], this.nbQuestions);\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      type_de_questions,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 6) {\n        type_de_questions = this.sup;\n      } else {\n        type_de_questions = randint(1, 5);\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = liste_de_k[i];\n      if (type_de_questions == 1) {\n        // niveau 1\n        div = false; // Il n'y aura pas de division\n      } else if (type_de_questions == 2) {\n        // niveau 2\n        div = true; // Avec des divisions\n      } else if (type_de_questions == 3) {\n        div = choice([true, false]); // Avec des multiplications ou des divisions\n      } else if (type_de_questions == 4) {\n        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),\n        ]);\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9),\n        ]);\n        // X, X0, X00, XX\n      }\n\n      if (!div && type_de_questions < 4) {\n        // Si il faut multiplier pour convertir\n        prefixe_multi = [\n          [\" da\", \"\\\\times10\\\\times10\", 100],\n          [\" h\", \"\\\\times100\\\\times100\", 10000],\n          [\" k\", \"\\\\times1~000\\\\times1~000\", 1000000],\n        ]; // On réinitialise cette liste qui a pu être modifiée dans le cas des ares\n        resultat = Algebrite.eval(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_multi[k][0] + unite) +\n          \"^2\" +\n          \" = \\\\dotfill \" +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_multi[k][0] + unite) +\n          \"^2\" +\n          \" =  \" +\n          texNombre(a) +\n          prefixe_multi[k][1] +\n          tex_texte(unite) +\n          \"^2\" +\n          \" = \" +\n          texNombre(resultat) +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n      } else if (div && type_de_questions < 4) {\n        prefixe_div = [\n          [\" d\", \"\\\\div10\\\\div10\", 100],\n          [\" c\", \"\\\\div100\\\\div100\", 10000],\n          [\" m\", \"\\\\div1~000\\\\div1~000\", 1000000],\n        ];\n        k = randint(0, 1); // Pas de conversions de mm^2 en m^2 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = Algebrite.eval(a / prefixe_div[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_div[k][0] + unite) +\n          \"^2\" +\n          \" = \\\\dotfill \" +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_div[k][0] + unite) +\n          \"^2\" +\n          \" =  \" +\n          texNombre(a) +\n          prefixe_div[k][1] +\n          tex_texte(unite) +\n          \"^2\" +\n          \" = \" +\n          texNombre(resultat) +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n      } else if (type_de_questions == 4) {\n        let unite1 = randint(0, 3);\n        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1;\n        }\n        let unite2 = unite1 + ecart;\n        if (randint(0, 1) > 0) {\n          resultat = Algebrite.eval(a * Math.pow(10, 2 * ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            tex_texte(liste_unite[unite2]) +\n            \"^2\" +\n            \" = \\\\dotfill \" +\n            tex_texte(liste_unite[unite1]) +\n            \"^2\" +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            tex_texte(liste_unite[unite2]) +\n            \"^2\" +\n            \" =  \" +\n            texNombre(a) +\n            \"\\\\times\" +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            tex_texte(liste_unite[unite1]) +\n            \"^2\" +\n            \" = \" +\n            texNombre(resultat) +\n            tex_texte(liste_unite[unite1]) +\n            \"^2\" +\n            \"$\";\n        } else {\n          resultat = Algebrite.eval(a / Math.pow(10, 2 * ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            tex_texte(liste_unite[unite1]) +\n            \"^2\" +\n            \" = \\\\dotfill \" +\n            tex_texte(liste_unite[unite2]) +\n            \"^2\" +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            tex_texte(liste_unite[unite1]) +\n            \"^2\" +\n            \" =  \" +\n            texNombre(a) +\n            \"\\\\div\" +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            tex_texte(liste_unite[unite2]) +\n            \"^2\" +\n            \" = \" +\n            texNombre(resultat) +\n            tex_texte(liste_unite[unite2]) +\n            \"^2\" +\n            \"$\";\n        }\n      } else if (type_de_questions == 5) {\n        // Pour type_de_questions==5\n        prefixe_multi = [\n          [\"ha\", 10000],\n          [\"a\", 100],\n        ];\n        k = randint(0, 1);\n        resultat = Algebrite.eval(a * prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_multi[k][0]) +\n          \" = \\\\dotfill \" +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          tex_texte(prefixe_multi[k][0]) +\n          \" =  \" +\n          texNombre(a) +\n          \"\\\\times\" +\n          texNombre(prefixe_multi[k][1]) +\n          tex_texte(unite) +\n          \"^2\" +\n          \" = \" +\n          texNombre(resultat) +\n          tex_texte(unite) +\n          \"^2\" +\n          \"$\";\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (est_diaporama) {\n          texte = texte.replace(\"= \\\\dotfill\", \"\\\\text{ en }\");\n        }\n        if (sortieHtml) {\n          texte = texte.replace(\n            \"\\\\dotfill\",\n            \"................................................\"\n          );\n        }\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Niveau de difficulté\",\n    6,\n    \"1 : Conversions en m² avec des multiplications\\n\\\n2 : Conversions en m² avec des divisions\\n3 : Conversions en m² avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions\\n\\\n5 : Conversions d'hectares et ares en m² \\n6 : Toutes les conversions\",\n  ];\n  this.besoinFormulaire2CaseACocher = [\"Avec des nombres décimaux\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}