{"version":3,"file":"js/43524.c0245277cb07efa38e39.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Pavages_et_transformations.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import { translation, mathalea2d, polygone, point, segment, rotation, similitude, arc, vecteur, milieu, barycentre, texteParPoint, labelPoint, mediatrice, tracePoint, symetrieAnimee, rotationAnimee, translationAnimee } from '../../modules/2d.js'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { egal, listeQuestionsToContenuSansNumero, randint, choice, imagePointParTransformation, texteEnCouleurEtGras, numAlpha } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n/**\n * Trouver l'image d'une figure par une symétrie centrale dans un pavage (7 motifs différents)\n * @author Jean-Claude Lhote\n * fonction servant à tous les niveaux\n * Pas de version Latex !\n * Références 5G12-1, 6G25-2, 4G11-1, 3G12-1\n */\nexport default function PavagesEtTransformations () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n\n  // this.titre = \"Trouver l'image d'une figure par une symétrie centrale\";\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.interactif = true\n  // this.sup = 1; // 1 pour symétrie axiale, 2 pour symétrie centrale, 3 pour translations, et 4 pour rotations ; paramètre fixé par les variantes respectives.\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = [] // Liste de questions corrigées\n    const objetsEnonce = []\n    const objetsCorrection = []\n\n    // listes de pavages [nx,ny,xB,yB,xC,yC,xD,yD,zoom,anngle]  : 0=carrés, 1=cerf-volant 2=quadri concave 3=quadri quelconque 4=parallélogrammes 5=triangles rectangles isocèles 6=triangles équilatéraux 7=losanges\n    const paves = [[5, 5, 4, 0, 4, 4, 0, 4, 30, 0], [5, 5, 6, 0, 8, 8, 0, 6, 60, -9], [5, 5, 8, 0, 4, 4, 2, 8, 50, 0], [5, 5, 4, 0, 6, 4, 0, 6, 50, 5], [4, 6, 8, 0, 7, 4, -1, 4, 50, 10], [5, 5, 8, 0, 4, 4, 0, 8, 50, 0], [5, 5, 4, 0, 3, 2 * Math.sin(Math.PI / 3), 2, 4 * Math.sin(Math.PI / 3), 20, 0], [4, 4, 3, 1, 4, 4, 1, 3, 20, 0]]\n    const quad = []; let quad1; let quad2; let quad3\n    let mediatrice1, mediatrice2, mediatrice3, centre1, centre2, centre3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32\n    let vecteur1, vecteur2, vecteur3, vector1, vector2, vector3, origine1, origine2, origine3, indexsym2, indexsym1, indexsym3\n    let B, C, D\n    let iB1, iB2, iB3, iC1, iA1, iD1\n    let texte = ''; let texteCorr = ''\n    const tabfigA = []; const tabfigB = []; const tabfigC = []; const tabfigD = []\n    let pave = []\n    let choixPave\n    switch (parseInt(this.sup)) {\n      case 1:\n\n        choixPave = 0 // pavages adaptés à symétrie axiale (carrés)\n        break\n      case 2:\n        choixPave = randint(0, 7)// pavages adaptés à symétrie centrale (tous)\n        console.log(choixPave)\n        break\n      case 3:\n        choixPave = randint(0, 7) // pavages adaptés à translation (tous)\n        break\n      case 4:\n        choixPave = 0 // pavages adaptés à rotation (carrés  )\n        break\n    }\n    pave = paves[choixPave]\n\n    const nx = pave[0]; const ny = pave[1]; let xB = pave[2]; let yB = pave[3]; let xC = pave[4]; let yC = pave[5]; let xD = pave[6]; let yD = pave[7]; const Zoom = pave[8]; const Angle = pave[9]\n    const A = point(0, 0)\n    if (choixPave !== 0 && choixPave !== 6 && choixPave !== 7) {\n      B = similitude(point(xB, yB), A, Angle, 22 / Zoom)\n      C = similitude(point(xC, yC), A, Angle, 22 / Zoom)\n      D = similitude(point(xD, yD), A, Angle, 22 / Zoom)\n      xB = B.x\n      yB = B.y\n      xC = C.x\n      yC = C.y\n      xD = D.x\n      yD = D.y\n    } else {\n      B = point(xB, yB)\n      C = point(xC, yC)\n      D = point(xD, yD)\n    }\n    const xAI = xB + xC - xD\n    const yAI = yB + yC - yD\n    const I = milieu(B, C)\n    const J = milieu(D, C)\n    const xAJ = xC + xD - xB\n    const yAJ = yC + yD - yB\n    let xAxy, yAxy, numAxy\n    let punto = [0, 0, 0]\n    let trouver = false; let indexA; let numA; let indexcentre1; let xmil1 = 0; let ymil1 = 0; let indexD; let numD; let indexcentre2; let xmil2 = 0; let ymil2 = 0; let indexC; let numC; let indexcentre3; let xmil3 = 0; let ymil3 = 0; let num1; let num2; let num3\n    let xc = 0; let yc = 0; let xb = 0; let yb = 0; let xa = 0; let ya = 0; let xV1 = 0; let yV1 = 0; let xV2 = 0; let yV2 = 0; let xV3 = 0; let yV3 = 0\n    const s0 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'])\n    const s1 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'], [s0])\n    const s2 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'], [s0, s1])\n    const Xmin = Math.min(-1, ny * xAJ)\n    const Xmax = Math.max(nx * xAI + 1, nx * xAI + ny * xAJ + 1)\n    const Ymin = Math.min(-1, nx * yAI)\n    const Ymax = Math.max(nx * yAI + ny * yAJ + 1, ny * yAJ + 1)\n\n    for (let y = 0; y < ny; y++) { // On initialise les tableaux avec les coordonnées des puntos de référence (A,B,C et D) de chaque translaté et son numéro dans le pavage.\n      for (let x = 0; x < nx; x++) {\n        xAxy = x * xAI + y * xAJ\n        yAxy = x * yAI + y * yAJ\n        numAxy = 2 * x + 4 * y * nx\n        tabfigA.push([xAxy, yAxy, numAxy])\n        quad[numAxy] = translation(polygone(A, B, C, D), vecteur(xAxy, yAxy))\n        tabfigB.push([xAxy + xB, yAxy + yB, numAxy + 1])\n        quad[numAxy + 1] = translation(rotation(polygone(A, B, C, D), I, 180), vecteur(xAxy, yAxy))\n        tabfigD.push([xAxy + xD, yAxy + yD, numAxy + 2 * nx])\n        quad[numAxy + 2 * nx] = translation(rotation(polygone(A, B, C, D), J, 180), vecteur(xAxy, yAxy))\n        tabfigC.push([xAxy + xC, yAxy + yC, numAxy + 2 * nx + 1])\n        quad[numAxy + 2 * nx + 1] = translation(translation(polygone(A, B, C, D), vecteur(A, C)), vecteur(xAxy, yAxy))\n      }\n    }\n    for (let i = 0; i < quad.length; i++) {\n      objetsEnonce.push(quad[i], texteParPoint(i, barycentre(quad[i], '', 'center'), 'milieu', 'black', 1, 'middle', false))\n      objetsCorrection.push(quad[i], texteParPoint(i, barycentre(quad[i], '', 'center'), 'milieu', 'black', 1, 'middle', false))\n    }\n\n    context.fenetreMathalea2d = [Xmin, Ymin, Xmax, Ymax]\n    switch (parseInt(this.sup)) {\n      case 1: // symétrie axiale\n        // Première question : une figure type A par symétrie d'axe // à [BD] est une figure type A. le symétrique du sommet A est le sommet C\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        indexsym1 = randint(0, nx * ny - 1, [indexA]) // sert à choisir un axe [BD].\n        xmil1 = tabfigD[indexsym1][0] // sert pour faire passer l'axe de symétrie.\n        ymil1 = tabfigD[indexsym1][1]\n        punto = imagePointParTransformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigA[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              mediatrice1 = mediatrice(point(xa, ya), point(punto[0], punto[1]), '(d_1)')\n              mediatrice1.color = 'green'\n              mediatrice1.epaisseur = 2\n              mediatrice1.isVisible = true\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexsym1 = randint(0, nx * ny - 1, [indexA])\n            xmil1 = tabfigD[indexsym1][0]\n            ymil1 = tabfigD[indexsym1][1]\n            punto = imagePointParTransformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])\n          }\n        }\n        texte = numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numA} dans la symétrie par rapport à $(d_1)$ ?<br>`, 'green') + ajouteChampTexteMathLive(this, 0, 'largeur10')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numA} dans la symétrie par rapport à $(d_1)$ porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure type D par symétrie d'axe // à [AC] est une figure type B. le symétrique du sommet B est le sommet D\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert à choisir un axe [AC].\n        xmil2 = tabfigA[indexsym2][0] // sert pour faire passer l'axe de symétrie.\n        ymil2 = tabfigA[indexsym2][1]\n        punto = imagePointParTransformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigB[j][2]\n              xb = tabfigD[indexD][0]\n              yb = tabfigD[indexD][1] - 4\n              objetsEnonce.push(tracePoint(point(xb, yb), point(punto[0], punto[1])))\n              mediatrice2 = mediatrice(point(xb, yb + 4), point(punto[0], punto[1]), '(d_2)')\n              mediatrice2.color = 'red'\n              mediatrice2.epaisseur = 2\n              mediatrice2.isVisible = true\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n\n              break\n            }\n          }\n          if (trouver === false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert à choisir un axe [AC].\n            xmil2 = tabfigA[indexsym2][0] // sert pour faire passer l'axe de symétrie.\n            ymil2 = tabfigA[indexsym2][1]\n            punto = imagePointParTransformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numD} dans la symétrie par rapport à $(d_2)$ ?<br>`, 'red') + ajouteChampTexteMathLive(this, 1, 'largeur10')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numD} dans la symétrie par rapport à $(d_2)$ porte le numéro ${num2}.<br>`, 'red')\n        // troisième question : une figure type D par symétrie d'axe // à [DC] est une figure type A. le symétrique du sommet D est le sommet A'\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        indexsym3 = randint(0, 4, Math.floor(indexC / 5)) * 5 // sert à choisir un axe [AC].\n        xmil3 = tabfigC[indexsym3][0] // sert pour faire passer l'axe de symétrie.\n        ymil3 = tabfigC[indexsym3][1]\n        punto = imagePointParTransformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigB[j][2]\n              xc = tabfigC[indexC][0]\n              yc = tabfigC[indexC][1]\n              mediatrice3 = mediatrice(point(xc, yc), point(punto[0], punto[1]), '(d_3)')\n              mediatrice3.color = 'blue'\n              mediatrice3.epaisseur = 2\n              mediatrice3.isVisible = true\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            const indexsym3 = randint(0, 4, Math.floor(indexC / 5)) * 5 // sert à choisir un axe [AC].\n            xmil3 = tabfigC[indexsym3][0] // sert pour faire passer l'axe de symétrie.\n            ymil3 = tabfigC[indexsym3][1]\n            punto = imagePointParTransformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numC} dans la symétrie par rapport à $(d_3)$ ?<br>`, 'blue') + ajouteChampTexteMathLive(this, 2, 'largeur10')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numC} dans la symétrie par rapport à $(d_3)$ porte le numéro ${num3}.<br>`, 'blue')\n        objetsEnonce.push(mediatrice1, mediatrice2, mediatrice3)\n        objetsCorrection.push(mediatrice1, mediatrice2, mediatrice3, symetrieAnimee(quad[numA], mediatrice1, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), symetrieAnimee(quad[numD], mediatrice2, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), symetrieAnimee(quad[numC], mediatrice3, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsEnonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        objetsCorrection.push(quad1, quad2, quad3)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsCorrection\n        )\n\n        break\n      case 2: // symétrie centrale\n        // Première question : une figure dans tabfigA, une symétrie par rapport au milieu d'un [B'C'], logiquement : l'image est dans tabfigB et B' est l'image de C !\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        indexcentre1 = randint(0, nx * ny - 1, indexA) // indexcentre1 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu de [BC] on ajoute aux coordonnées du milieu de [BC] celles du vecteur BB'. (j'aurais pu réduire mais cela aurait rendu le calcul plus opaque)\n        xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB\n        ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB\n        punto = imagePointParTransformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigB[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              centre1 = point(xmil1, ymil1, s0, 'left')\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexcentre1 = randint(0, nx * ny - 1, indexA)\n            xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB\n            ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB\n            punto = imagePointParTransformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numA} dans la symétrie par rapport à ${s0} ?<br>`, 'green') + ajouteChampTexteMathLive(this, 0, 'largeur10')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numA} dans la symétrie par rapport à ${s0} porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure dans tabfigD, une symétrie par rapport au milieu d'un [C'D'], le résultat est une figure dans tabfigA et C' est l'image de D !\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        indexcentre2 = randint(0, nx * ny - 1, [indexD]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu de [DC] on ajoute aux coordonnées du milieu de [DC] celles du vecteur DD'.\n        xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD\n        ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD\n        punto = imagePointParTransformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigA[j][2]\n              xb = tabfigA[indexD][0]\n              yb = tabfigA[indexD][1]\n              centre2 = point(xmil2, ymil2, s1, 'left')\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n\n              break\n            }\n          }\n          if (trouver === false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexcentre2 = randint(0, nx * ny - 1, [indexD])\n            xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD\n            ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD\n            punto = imagePointParTransformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n          }\n        }\n\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numD} dans la symétrie par rapport à ${s1} ?<br>`, 'red') + ajouteChampTexteMathLive(this, 1, 'largeur10')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numD} dans la symétrie par rapport à ${s1} porte le numéro ${num2}.<br>`, 'red')\n        // troisième question : une figure dans tabfigC, une symétrie par rapport au symétrique du milieu de [A'D'] par rapport au milieu de [C'D']... pas très clair\n        // le résultat est une figure dans tabfigD et le point (C'+ vecteur AC) a pour image D' !\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        indexcentre3 = randint(0, nx * ny - 1, [indexC]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu du centre de symétrie : (C' + D + AC)/2=AC+AD/2 que l'on translate de CC' donc ça fait AC' + AD/2\n        xmil3 = xD / 2 + tabfigC[indexcentre3][0]\n        ymil3 = yD / 2 + tabfigC[indexcentre3][1]\n        punto = imagePointParTransformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3]) // c'est le sommet C + AC qui a pour image D.\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], tabfigD[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigD[j][2]\n              xc = tabfigA[indexC][0]\n              yc = tabfigA[indexC][1]\n              centre3 = point(xmil3, ymil3, s2, 'left')\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            indexcentre3 = randint(0, nx * ny - 1, [indexC])\n            xmil3 = xD / 2 + tabfigC[indexcentre3][0]\n            ymil3 = yD / 2 + tabfigC[indexcentre3][1]\n            punto = imagePointParTransformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numC} dans la symétrie par rapport à ${s2} ?<br>`, 'blue') + ajouteChampTexteMathLive(this, 2, 'largeur10')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numC} dans la symétrie par rapport à ${s2} porte le numéro ${num3}.<br>`, 'blue')\n\n        objetsEnonce.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3))\n        objetsCorrection.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3)\n          , rotationAnimee(quad[numA], centre1, 180, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numD], centre2, 180, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numC], centre3, 180, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsEnonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        arc1 = arc(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1, 180)\n        rayon11 = segment(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1)\n        rayon12 = rotation(rayon11, centre1, 180)\n        rayon11.pointilles = 2\n        rayon12.pointilles = 2\n        arc1.pointilles = 2\n        arc2 = arc(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2, 180)\n        rayon21 = segment(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2)\n        rayon22 = rotation(rayon21, centre2, 180)\n        rayon21.pointilles = 2\n        rayon22.pointilles = 2\n        arc2.pointilles = 2\n        arc3 = arc(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3, 180)\n        rayon31 = segment(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3)\n        rayon32 = rotation(rayon31, centre3, 180)\n        rayon31.pointilles = 2\n        rayon32.pointilles = 2\n        arc3.pointilles = 2\n        objetsCorrection.push(quad1, quad2, quad3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsCorrection\n        )\n\n        break\n\n      case 3: // translations\n\n        // Première question : une figure dans tabfigA, l'image dans tabfigA...\n        // On choisit deux figures de type B pour définir le vecteur de translation.\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        iB1 = randint(0, nx * ny - 1)\n        iB2 = randint(0, nx * ny - 1, [iB1])\n        xV1 = tabfigB[iB2][0] - tabfigB[iB1][0]\n        yV1 = tabfigB[iB2][1] - tabfigB[iB1][1]\n        punto = imagePointParTransformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0, 0], [xV1, yV1])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigA[j][0], 0.001) && egal(punto[1], tabfigA[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigA[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              origine1 = point(tabfigB[iB1][0], tabfigB[iB1][1])\n              vector1 = vecteur(origine1, point(tabfigB[iB2][0], tabfigB[iB2][1]))\n              vecteur1 = vector1.representant(origine1)\n              vecteur1.color = 'green'\n              vecteur1.epaisseur = 2\n              vecteur1.pointilles = 2\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            iB1 = randint(0, nx * ny - 1)\n            iB2 = randint(0, nx * ny - 1, [iB1])\n            xV1 = tabfigB[iB2][0] - tabfigB[iB1][0]\n            yV1 = tabfigB[iB2][1] - tabfigB[iB1][1]\n            punto = imagePointParTransformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0, 0], [xV1, yV1])\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} quelle est le numéro de l'image de la figure ${numA} ?<br>`, 'green') + ajouteChampTexteMathLive(this, 0, 'largeur10')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure image de la figure ${numA}  dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure dans tabfigD, l'image dans tabfigB...\n        // On choisit une figure C et une figure A pour définir le vecteur de translation.\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        iC1 = randint(0, nx * ny - 1)\n        iA1 = randint(0, nx * ny - 1, [iC1])\n        xV2 = tabfigA[iA1][0] - tabfigC[iC1][0]\n        yV2 = tabfigA[iA1][1] - tabfigC[iC1][1]\n        punto = imagePointParTransformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0, 0], [xV2, yV2])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigB[j][2]\n              xb = tabfigD[indexD][0]\n              yb = tabfigD[indexD][1]\n              origine2 = point(tabfigC[iC1][0], tabfigC[iC1][1])\n              vector2 = vecteur(origine2, point(tabfigA[iA1][0], tabfigA[iA1][1]))\n              vecteur2 = vector2.representant(origine2)\n              vecteur2.color = 'red'\n              vecteur2.epaisseur = 2\n              vecteur2.pointilles = 2\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            iC1 = randint(0, nx * ny - 1)\n            iA1 = randint(0, nx * ny - 1, [iC1])\n            xV2 = tabfigA[iA1][0] - tabfigC[iC1][0]\n            yV2 = tabfigA[iA1][1] - tabfigC[iC1][1]\n            punto = imagePointParTransformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0, 0], [xV2, yV2])\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} quelle est le numéro de l'image de la figure ${numD} ?<br>`, 'red') + ajouteChampTexteMathLive(this, 1, 'largeur10')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure image de la figure ${numD}  dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} porte le numéro ${num2}.<br>`, 'red')\n\n        // troisième question : une figure dans tabfigC, l'image dans tabfigA...\n        // On choisit une figure D et une figure B pour définir le vecteur de translation.\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        iD1 = randint(0, nx * ny - 1)\n        iB3 = randint(0, nx * ny - 1, [iD1])\n        xV3 = tabfigA[iB3][0] - tabfigC[iD1][0]\n        yV3 = tabfigA[iB3][1] - tabfigC[iD1][1]\n        punto = imagePointParTransformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0, 0], [xV3, yV3])\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigA[j][0], 0.001) && egal(punto[1], tabfigA[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigA[j][2]\n              xc = tabfigC[indexC][0]\n              yc = tabfigC[indexC][1]\n              origine3 = point(tabfigC[iD1][0], tabfigC[iD1][1])\n              vector3 = vecteur(origine3, point(tabfigA[iB3][0], tabfigA[iB3][1]))\n              vecteur3 = vector3.representant(origine3)\n              vecteur3.color = 'blue'\n              vecteur3.epaisseur = 2\n              vecteur3.pointilles = 2\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            iD1 = randint(0, nx * ny - 1)\n            iB3 = randint(0, nx * ny - 1, [iD1])\n            xV3 = tabfigA[iB3][0] - tabfigC[iD1][0]\n            yV3 = tabfigA[iB3][1] - tabfigC[iD1][1]\n            punto = imagePointParTransformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0, 0], [xV3, yV3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} quelle est le numéro de l'image de la figure ${numC} ?<br>`, 'blue') + ajouteChampTexteMathLive(this, 2, 'largeur10')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure image de la figure ${numC}  dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} porte le numéro ${num3}.<br>`, 'blue')\n\n        objetsEnonce.push(vecteur1, vecteur2, vecteur3)\n        objetsCorrection.push(vecteur1, vecteur2, vecteur3\n          , translationAnimee(quad[numA], vector1, `id=\"anim${numeroExercice}A\" dur=\"2s\" repeatcount=\"1\"`), translationAnimee(quad[numD], vector2, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), translationAnimee(quad[numC], vector3, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsEnonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        rayon11 = vector1.representant(point(xa, ya))\n        rayon11.color = 'green'\n        rayon11.epaisseur = 2\n        rayon21 = vector2.representant(point(xb, yb))\n        rayon21.color = 'red'\n        rayon21.epaisseur = 2\n        rayon31 = vector3.representant(point(xc, yc))\n        rayon31.color = 'blue'\n        rayon31.epaisseur = 2\n        objetsCorrection.push(quad1, quad2, quad3, rayon11, rayon21, rayon31)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsCorrection\n        )\n\n        break\n\n      case 4: // rotations\n\n        // première question : centre A, rotation de 90° sens anti-horaire, une figure de tabfigA donne une figure de tabfigD, le point B donne le point D.\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        indexcentre1 = randint(0, nx * ny - 1, [indexA])\n        xmil1 = tabfigA[indexcentre1][0]\n        ymil1 = tabfigA[indexcentre1][1]\n        punto = imagePointParTransformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], tabfigD[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigD[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              centre1 = point(xmil1, ymil1, s0, 'left')\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexcentre1 = randint(0, nx * ny - 1, [indexA])\n            xmil1 = tabfigA[indexcentre1][0]\n            ymil1 = tabfigA[indexcentre1][1]\n            punto = imagePointParTransformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90° dans le sens des aiguilles d'une montre ?<br>`, 'green') + ajouteChampTexteMathLive(this, 0, 'largeur10')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90° dans le sens des aiguilles d'une montre porte le numéro ${num1}.<br>`, 'green')\n\n        // deuxième question : centre B, rotation 90° sens horaire, une figure de tabfigD donne une figure de tabfigC\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        indexcentre2 = randint(0, nx * ny - 1, [indexD])\n        xmil2 = tabfigB[indexcentre2][0]\n        ymil2 = tabfigB[indexcentre2][1]\n        punto = imagePointParTransformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], 4 + tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigC[j][2]\n              xb = tabfigA[indexD][0]\n              yb = tabfigA[indexD][1]\n              centre2 = point(xmil2, ymil2, s1, 'left')\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexcentre2 = randint(0, nx * ny - 1, [indexD])\n            xmil2 = tabfigB[indexcentre2][0]\n            ymil2 = tabfigB[indexcentre2][1]\n            punto = imagePointParTransformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90° dans le sens inverse des aiguilles d'une montre ?<br>`, 'red') + ajouteChampTexteMathLive(this, 1, 'largeur10')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90° dans le sens inverse des aiguilles d'une montre porte le numéro ${num2}.<br>`, 'red')\n\n        // troisième question : centre B, rotation 90° sens anti-horaire, une figure de tabfigC donne une figure de tabfigD\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        indexcentre3 = randint(0, nx * ny - 1, [indexC])\n        xmil3 = tabfigB[indexcentre3][0]\n        ymil3 = tabfigB[indexcentre3][1]\n        punto = imagePointParTransformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver === false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], 4 + tabfigD[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigD[j][2]\n              xc = tabfigA[indexC][0]\n              yc = tabfigA[indexC][1]\n              centre3 = point(xmil3, ymil3, s2, 'left')\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            indexcentre3 = randint(0, nx * ny - 1, [indexC])\n            xmil3 = tabfigB[indexcentre3][0]\n            ymil3 = tabfigB[indexcentre3][1]\n            punto = imagePointParTransformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90° dans le sens des aiguilles d'une montre ?<br>`, 'blue') + ajouteChampTexteMathLive(this, 2, 'largeur10')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90° dans le sens des aiguilles d'une montre porte le numéro ${num3}.<br>`, 'blue')\n\n        objetsEnonce.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3))\n        objetsCorrection.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3)\n          , rotationAnimee(quad[numA], centre1, -90, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numD], centre2, 90, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numC], centre3, -90, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsEnonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        arc1 = arc(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1, -90)\n        rayon11 = segment(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1)\n        rayon12 = rotation(rayon11, centre1, -90)\n        rayon11.pointilles = 2\n        rayon12.pointilles = 2\n        arc1.pointilles = 2\n        arc1.epaisseur = 2\n        arc1.color = 'green'\n        arc2 = arc(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2, 90)\n        rayon21 = segment(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2)\n        rayon22 = rotation(rayon21, centre2, 90)\n        rayon21.pointilles = 2\n        rayon22.pointilles = 2\n        arc2.pointilles = 2\n        arc2.epaisseur = 2\n        arc2.color = 'red'\n        arc3 = arc(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3, -90)\n        rayon31 = segment(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3)\n        rayon32 = rotation(rayon31, centre3, -90)\n        rayon31.pointilles = 2\n        rayon32.pointilles = 2\n        arc3.pointilles = 2\n        arc3.epaisseur = 2\n        arc3.color = 'blue'\n        objetsCorrection.push(quad1, quad2, quad3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objetsCorrection\n        )\n\n        break\n    }\n    setReponse(this, 0, num1)\n    setReponse(this, 1, num2)\n    setReponse(this, 2, num3)\n    if (context.isHtml) {\n      texteCorr += '<br>'\n      texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}A').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation verte</button>`\n      texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}B').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation rouge</button>`\n      texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}C').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation bleue</button>`\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n    if (context.isAmc) {\n      this.autoCorrection[0] = {\n        enonce: texte,\n        options: { multicols: true },\n        propositions: [\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: texteCorr,\n              statut: '',\n              reponse: {\n                texte: 'a)',\n                valeur: num1,\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'b)',\n                valeur: num2,\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          },\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: '',\n              statut: '',\n              reponse: {\n                texte: 'c)',\n                valeur: num3,\n                param: {\n                  digits: 2,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }]\n      }\n    }\n  }\n  this.besoinFormulaireNumerique = ['Transformations', 4, '1 : Symétries axiales\\n 2 : Symétries centrales\\n 3 : Translations\\n 4 : Rotations\\n 5 : Homothéties\\n']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["interactifReady","interactifType","amcReady","amcType","PavagesEtTransformations","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","interactif","context","spacingCorr","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","objetsEnonce","objetsCorrection","paves","Math","sin","PI","quad","quad1","quad2","quad3","mediatrice1","mediatrice2","mediatrice3","centre1","centre2","centre3","arc1","arc2","arc3","rayon11","rayon12","rayon21","rayon22","rayon31","rayon32","vecteur1","vecteur2","vecteur3","vector1","vector2","vector3","origine1","origine2","origine3","indexsym2","indexsym1","indexsym3","B","C","D","iB1","iB2","iB3","iC1","iA1","iD1","texte","texteCorr","tabfigA","tabfigB","tabfigC","tabfigD","choixPave","pave","parseInt","sup","randint","console","log","nx","ny","xB","yB","xC","yC","xD","yD","Zoom","Angle","A","point","similitude","x","y","xAI","yAI","I","milieu","J","xAJ","yAJ","xAxy","yAxy","numAxy","indexA","numA","indexcentre1","indexD","numD","indexcentre2","indexC","numC","indexcentre3","num1","num2","num3","punto","trouver","xmil1","ymil1","xmil2","ymil2","xmil3","ymil3","xc","yc","xb","yb","xa","ya","xV1","yV1","xV2","yV2","xV3","yV3","s0","choice","s1","s2","Xmin","min","Xmax","max","Ymin","Ymax","push","translation","polygone","vecteur","rotation","i","length","texteParPoint","barycentre","imagePointParTransformation","j","egal","mediatrice","color","epaisseur","isVisible","couleurDeRemplissage","opaciteDeRemplissage","numAlpha","texteEnCouleurEtGras","ajouteChampTexteMathLive","tracePoint","floor","symetrieAnimee","mathalea2d","xmin","xmax","ymin","ymax","pixelsParCm","scale","optionsTikz","mainlevee","labelPoint","rotationAnimee","arc","segment","pointilles","representant","translationAnimee","setReponse","listeQuestionsToContenuSansNumero","autoCorrection","enonce","options","multicols","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","besoinFormulaireNumerique","titre","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}