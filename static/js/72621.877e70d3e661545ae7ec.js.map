{"version":3,"file":"js/72621.877e70d3e661545ae7ec.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/3d.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { point, vecteur, droite, segment, polyline, polygone } from './2d.js'\nimport { matrix, multiply, norm, cross, dot } from 'mathjs'\nimport { context } from './context.js'\nconst math = { matrix: matrix, multiply: multiply, norm: norm, cross: cross, dot: dot }\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%% OBJET PARENT %%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n*/\n\n/*\n * Classe parente de tous les objets de MathALEA2D\n *\n * @author Rémi Angot\n */\nlet numId = 0\nfunction ObjetMathalea2D () {\n  this.positionLabel = 'above'\n  this.isVisible = true\n  this.color = 'black'\n  this.style = '' // stroke-dasharray=\"4 3\" pour des hachures //stroke-width=\"2\" pour un trait plus épais\n  this.styleTikz = ''\n  this.epaisseur = 1\n  this.opacite = 1\n  this.pointilles = false\n  this.id = numId\n  numId++\n  //   mesObjets.push(this);\n  context.objets2D.push(this)\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%% OBJETS DE BASE %%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n*/\n\n/**\n * LE POINT\n *\n* @author Jean-Claude Lhote\n* Point de l'espace défini par ses trois coordonnées (Si deux sont données seulement, le point est dans le plan XY)\n* le paramètre visible définit si ce point est placé devant (par défaut) ou derrière une surface. Il sera utilisé pour définir la visibilité des arêtes qui en partent\n*/\nclass Point3d {\n  constructor (x, y, z, visible, label, positionLabel) {\n    const alpha = context.anglePerspective * Math.PI / 180 // context.anglePerspective peut être changé globalement pour modifier la perspective\n    const rapport = context.coeffPerspective // idem pour context.coefficientPerspective qui est la réduction sur l'axe y.\n    const MT = math.matrix([[1, rapport * Math.cos(alpha), 0], [0, rapport * Math.sin(alpha), 1]]) // La matrice de projection 3d -> 2d\n    this.x = x\n    this.y = y\n    this.z = z\n    this.visible = visible\n    this.label = label\n    this.typeObjet = 'point3d'\n    const V = math.matrix([this.x, this.y, this.z])\n    const W = math.multiply(MT, V)\n    this.c2d = point(W._data[0], W._data[1], this.label, positionLabel)\n  }\n}\nexport function point3d (x, y, z = 0, visible = true, label = '', positionLabel = 'above left') {\n  return new Point3d(x, y, z, visible, label, positionLabel)\n}\n\n/**\n   * LE VECTEUR\n   *\n   * @author Jean-Claude Lhote\n   * le vecteur3d est sans doute l'objet le plus important de cette base d'objets\n   * On les utilise dans tous les objets complexes et dans toutes les transformations\n   * Ils servent notament à définir la direction des plans.\n   *\n   * 3 usages : vecteur3d(A,B) ou vecteur3d(x,y,z) ou vecteur3d(math.matrix([x,y,z]))\n   * A et B sont deux objets de type Point3d\n   * x,y et z sont trois nombres\n   * la commande math.matrix([x,y,z]) crée une matrice colonne.\n   *\n   * L'objet créé est de type Vecteur3d\n   * sa propriété p2d est un objet Vecteur (2 dimensions : c'est la projection du vecteur)\n   * sa propriété this.representant(A) est le dessin du représentant d'origine A.\n   * exemples :\n   * let v = vecteur3d(3,5,1) -> définit un vecteur de composantes (3;5;1)\n   * let w = vecteur(point3d(0,0,0),point3d(1,1,1)) -> définit un vecteur d'origine O et d'extrémité M(1;1;1)\n   * let fleche = w.representant(point3d(5,0,0)) -> fleche est un objet 2d qui représente le vecteur w au point (5;0;0)\n   */\nclass Vecteur3d {\n  constructor (...args) {\n    const alpha = context.anglePerspective * Math.PI / 180\n    const rapport = context.coeffPerspective\n    const MT = math.matrix([[1, rapport * Math.cos(alpha), 0], [0, rapport * Math.sin(alpha), 1]]) // ceci est la matrice de projection 3d -> 2d\n    if (args.length === 2) {\n      this.x = args[1].x - args[0].x\n      this.y = args[1].y - args[0].y\n      this.z = args[1].z - args[0].z\n    } else {\n      if (typeof (args[0]) === 'number') {\n        this.x = args[0]\n        this.y = args[1]\n        this.z = args[2]\n      } else if (args.length === 1) {\n        this.x = args[0]._data[0]\n        this.y = args[0]._data[1]\n        this.z = args[0]._data[2]\n      }\n    }\n    this.matrice = math.matrix([this.x, this.y, this.z]) // On exporte cette matrice colonne utile pour les calculs vectoriels qui seront effectués par math.js\n    this.norme = Math.sqrt(this.x ** 2 + this.y ** 2 + this.z ** 2) // la norme du vecteur\n    const W = math.multiply(MT, this.matrice) // voilà comment on obtient les composantes du projeté 2d du vecteur\n    this.c2d = vecteur(W._data[0], W._data[1]) // this.c2d est l'objet 2d qui représente l'objet 3d this\n    this.representant = function (A) { // méthode pour construire un représentant d'origine A (un point 3d)\n      const B = translation3d(A, this)\n      return vecteur(A.c2d, B.c2d).representant(A.c2d) // qui retourne un représentant de vecteur 2d (objet dessiné)\n    }\n  }\n}\n\nexport function vecteur3d (...args) { // A,B deux Point3d ou x,y,z les composantes du vecteur\n  return new Vecteur3d(...args)\n}\n\n/**\n   * L'ARETE\n   * @author Jean-Claude lhote\n   * Une telle arête est définie par deux points\n   * Si l'un des deux points n'est pas visible (propriété visible à false) alors l'arête aura aussi visible à false\n   * sa propriété p2d est un segment en pointillé ou en trait plein suivant sa visibilité.\n   */\nclass Arete3d {\n  constructor (point1, point2, color, visible) {\n    this.extremite1 = point1\n    this.extremite2 = point2\n    this.color = color\n    if (!point1.visible || !point2.visible || !visible) {\n      this.visible = false\n    } else {\n      this.visible = true\n    }\n    this.c2d = segment(point1.c2d, point2.c2d, color)\n    if (!this.visible) {\n      this.c2d.pointilles = 2\n    } else {\n      this.c2d.pointilles = false\n    }\n  }\n}\n// l'arête est visible par défaut sauf si p1 ou p2 sont invisibles\nexport function arete3d (p1, p2, color = 'black', visible = true) {\n  return new Arete3d(p1, p2, color, visible)\n}\n\n/**\n   * LA DROITE\n   *\n   * @author Jean-claude Lhote\n   * Droite de l'espace définie par point et vecteur directeur droite3d(A,v)\n   * Droite de l'espace définie par 2 points droite3d(A,B)\n   * Les droites servent principalement à définir des axes de rotation dans l'espace\n   */\nclass Droite3d {\n  constructor (point3D, vecteur3D) {\n    if (vecteur3D.constructor === Vecteur3d) {\n      this.directeur = vecteur3D\n    } else if (vecteur3D.constructor === Point3d) {\n      this.directeur = vecteur3d(point3D, vecteur3D)\n    }\n    this.origine = point3D\n    const M = translation3d(this.origine, this.directeur)\n    this.point = M\n    this.c2d = droite(this.origine.c2d, M.c2d) // la droite correspndant à la projection de cette droite dans le plan Mathalea2d\n    this.c2d.isVisible = false\n  }\n}\n\nexport function droite3d (point3D, vecteur3D) {\n  return new Droite3d(point3D, vecteur3D)\n}\n\n/**\n * LE DEMI-CERCLE\n *\n *@author Jean-Claude Lhote\n * Le nom est trompeur, il s'agit le plus souvent d'une demi-ellipse représentant un cercle projeté\n * Utilisé pour représenter un cercle dont une moitié est visible mais pas l'autre.\n *\n * normal et rayon sont deux vecteurs 3d\n * normal est un vecteur normal au plan du cercle\n * rayon est le vecteur qui part du centre et qui joint la 1ere extremité visible.\n * cote est soit 'caché' soit 'visible' et déterminera dans quel sens on crée le demi-cercle.\n * Si cote='caché' alors on tourne dans le sens direct et le tracé est en pointillés\n * Si cote='visible' alors on tourne dans le sens indirect et le tracé est plein.\n *\n */\nexport function demicercle3d (centre, normal, rayon, cote, color, angledepart = context.anglePerspective) {\n  let signe; const M = []; const listepoints = []\n  if (cote === 'caché') {\n    signe = 1\n  } else {\n    signe = -1\n  }\n  const d = droite3d(centre, normal)\n  M.push(rotation3d(translation3d(centre, rayon), d, angledepart))\n  listepoints.push(M[0].c2d)\n\n  for (let i = 1; i < 19; i++) {\n    M.push(rotation3d(M[i - 1], d, 10 * signe))\n    listepoints.push(M[i].c2d)\n  }\n  const demiCercle = polyline(listepoints, color)\n  if (cote === 'caché') {\n    demiCercle.pointilles = 2\n    demiCercle.opacite = 0.3\n  }\n  return demiCercle\n}\n\n/**\n    * LE CERCLE\n    *\n    * @author Jean-Claude Lhote\n    *\n    * C'est la version entière du cercle : soit totalement visible, soit totalement caché.\n    * visible est un booléen\n    *\n    */\nexport function cercle3d (centre, normal, rayon, visible = true, color = 'black') {\n  const M = []; const listepoints = []\n  const d = droite3d(centre, normal)\n  M.push(rotation3d(translation3d(centre, rayon), d, context.anglePerspective))\n  listepoints.push(M[0].c2d)\n  for (let i = 1; i < 37; i++) {\n    M.push(rotation3d(M[i - 1], d, 10))\n    listepoints.push(M[i].c2d)\n  }\n  const C = polygone(listepoints, color)\n  if (!visible) {\n    C.pointilles = 2\n  }\n  return C\n}\n\n/**\n   * LE POLYGONE\n   *\n   * @author Jean-Claude Lhote\n   * usages : polygone3d([A,B,C,...],color) ou polygone3d(A,B,C...) où A,B,C ... sont des point3d. color='black' par défaut.\n   */\nclass Polygone3d {\n  constructor (...args) {\n    if (Array.isArray(args[0])) {\n      // Si le premier argument est un tableau\n      this.listePoints = args[0]\n      if (args[1]) {\n        this.color = args[1]\n      }\n    } else {\n      this.listePoints = args\n      this.color = 'black'\n    }\n    const segments3d = []; let A; const segments = []\n    A = this.listePoints[0]\n    for (let i = 1; i < this.listePoints.length; i++) {\n      segments3d.push(arete3d(A, this.listePoints[i], this.color))\n      segments.push(segments3d[i - 1].c2d)\n      A = this.listePoints[i]\n    }\n    segments3d.push(arete3d(A, this.listePoints[0], this.color))\n    segments.push(segments3d[this.listePoints.length - 1].c2d)\n    this.aretes = segments3d\n    this.c2d = segments\n  }\n}\n\nexport function polygone3d (...args) {\n  return new Polygone3d(...args)\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%% OBJETS DE COMPLEXES %%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n*/\n\n/**\n   * LA SPHERE\n   *\n   * @author Jean-Claude Lhote\n   * Produit une sphère : choisir un nombre de parallèles impair pour avoir l'équateur. normal défini l'axe Nord-Sud.\n   * rayon est le rayon de la sphère. l'équateur est dans le plan xy l'axe Nord-Sud est sur z\n   * @param {Point3d} centre\n   * @param {Number} rayon\n   * @param {Number} nbParalleles\n   * @param {Number} nbMeridiens\n   * @param {string} color\n   */\nfunction Sphere3d (centre, rayon, nbParalleles, nbMeridiens, color) {\n  ObjetMathalea2D.call(this)\n  this.centre = centre\n  this.rayon = vecteur3d(rayon, 0, 0)\n  this.normal = vecteur3d(0, 0, 1)\n  this.color = color\n  this.nbMeridiens = nbMeridiens\n  this.nbParalleles = nbParalleles\n  this.c2d = []; let c1; let c2; let c3; let c4; let C; let D\n  const prodvec = vecteur3d(math.cross(this.normal.matrice, this.rayon.matrice))\n  const rayon2 = vecteur3d(math.cross(this.rayon.matrice, math.multiply(prodvec.matrice, 1 / math.norm(prodvec.matrice))))\n  const R = rayon\n  const cote1 = 'caché'\n  const cote2 = 'visible'\n  for (let k = 0, rayon3; k < 1; k += 1 / (this.nbParalleles + 1)) {\n    C = point3d(centre.x, centre.y, centre.z + R * Math.sin(k * Math.PI / 2))\n    D = point3d(centre.x, centre.y, centre.z + R * Math.sin(-k * Math.PI / 2))\n    rayon3 = vecteur3d(R * Math.cos(k * Math.PI / 2), 0, 0)\n    c1 = demicercle3d(C, this.normal, rayon3, cote1, this.color, context.anglePerspective)\n    c2 = demicercle3d(C, this.normal, rayon3, cote2, this.color, context.anglePerspective)\n    c3 = demicercle3d(D, this.normal, rayon3, cote1, this.color, context.anglePerspective)\n    c4 = demicercle3d(D, this.normal, rayon3, cote2, this.color, context.anglePerspective)\n    this.c2d.push(c1, c2, c3, c4)\n  }\n  for (let k = 0, V, W; k < 1; k += 1 / this.nbMeridiens) {\n    V = rotationV3d(prodvec, this.normal, 90 + context.anglePerspective + k * 90)\n    W = rotationV3d(prodvec, this.normal, 90 + context.anglePerspective - (k + 1 / this.nbMeridiens) * 90)\n    c1 = demicercle3d(this.centre, V, rayon2, cote2, this.color, 0)\n    c2 = demicercle3d(this.centre, V, rayon2, cote1, this.color, 0)\n    c3 = demicercle3d(this.centre, W, rayon2, cote2, this.color, 0)\n    c4 = demicercle3d(this.centre, W, rayon2, cote1, this.color, 0)\n    this.c2d.push(c1, c2, c3, c4)\n  }\n}\nexport function sphere3d (centre, rayon, nbParalleles, nbMeridiens, color = 'black') {\n  return new Sphere3d(centre, rayon, nbParalleles, nbMeridiens, color)\n}\n\n/**\n    * LE CONE\n    *\n    * @author Jean-Claude Lhote\n    *\n    * centrebase est le centre du disque de base\n    * sommet est le sommet du cône\n    * normal est un vecteur 3d normal au plan du disque (il détermine avec rayon de quel côté se trouve la partie visible)\n    *\n    */\nfunction Cone3d (centrebase, sommet, normal, rayon, generatrices = 18) {\n  ObjetMathalea2D.call(this)\n  this.sommet = sommet\n  this.centrebase = centrebase\n  this.normal = normal\n  this.rayon = vecteur3d(rayon, 0, 0)\n  this.c2d = []\n  let s, color1, color2\n  const prodvec = vecteur3d(math.cross(normal.matrice, this.rayon.matrice))\n  const prodscal = math.dot(prodvec.matrice, vecteur3d(0, 1, 0).matrice)\n  let cote1, cote2\n  if (prodscal > 0) {\n    cote1 = 'caché'\n    color1 = 'gray'\n    cote2 = 'visible'\n    color2 = 'black'\n  } else {\n    cote2 = 'caché'\n    cote1 = 'visible'\n    color1 = 'black'\n    color2 = 'gray'\n  }\n  const c1 = demicercle3d(this.centrebase, this.normal, this.rayon, cote1, color1)\n  const c2 = demicercle3d(this.centrebase, this.normal, this.rayon, cote2, color2)\n\n  for (let i = 0; i < c1.listePoints.length; i++) {\n    if (i % generatrices === 0) {\n      s = segment(this.sommet.c2d, c1.listePoints[i])\n      if (cote1 === 'caché') {\n        s.pointilles = 2\n        s.color = 'gray'\n      } else {\n        s.color = 'black'\n      }\n      this.c2d.push(s)\n    }\n  }\n  for (let i = 0; i < c2.listePoints.length; i++) {\n    if (i % generatrices === 0) {\n      s = segment(this.sommet.c2d, c2.listePoints[i])\n      if (cote2 === 'caché') {\n        s.pointilles = 2\n        s.color = 'gray'\n      } else {\n        s.color = 'black'\n      }\n      this.c2d.push(s)\n    }\n  }\n  this.c2d.push(c1, c2)\n}\nexport function cone3d (centre, sommet, normal, rayon, generatrices = 18) {\n  return new Cone3d(centre, sommet, normal, rayon, generatrices)\n}\n\n/**\n   * LE CYLINDRE\n   *\n   * @author Jean-Claude Lhote\n   * Crée un cylindre de révolution définit par les centres de ses 2 bases\n   * Permet en faisant varier les rayons des deux bases de créer des troncs de cônes\n   * @param {Point3d} centrebase1\n   * @param {Point3d} centrebase2\n   * @param {Vecteur3d} normal\n   * @param {Vecteur3d} rayon1\n   * @param {Vecteur3d} rayon2\n   */\nfunction Cylindre3d (centrebase1, centrebase2, normal, rayon1, rayon2, color) {\n  ObjetMathalea2D.call(this)\n  this.centrebase1 = centrebase1\n  this.centrebase2 = centrebase2\n  this.normal = normal\n  this.rayon1 = rayon1\n  this.rayon2 = rayon2\n  this.color = color\n  this.c2d = []\n  let s, color1, color2\n  const prodvec = vecteur3d(math.cross(this.normal.matrice, this.rayon1.matrice))\n  const prodscal = math.dot(prodvec.matrice, vecteur3d(0, 1, 0).matrice)\n  let cote1, cote2\n  if (prodscal > 0) {\n    cote1 = 'caché'\n    color1 = this.color\n    cote2 = 'visible'\n    color2 = this.color\n  } else {\n    cote2 = 'caché'\n    cote1 = 'visible'\n    color1 = this.color\n    color2 = this.color\n  }\n  const c1 = demicercle3d(this.centrebase1, this.normal, this.rayon1, cote1, color1)\n  const c3 = demicercle3d(this.centrebase2, this.normal, this.rayon2, cote1, color1)\n  const c2 = demicercle3d(this.centrebase1, this.normal, this.rayon1, cote2, color2)\n  const c4 = demicercle3d(this.centrebase2, this.normal, this.rayon2, cote2, color2)\n  c3.pointilles = false\n  c3.color = this.color\n  for (let i = 0; i < c1.listePoints.length; i += 2) {\n    s = segment(c3.listePoints[i], c1.listePoints[i])\n    if (cote1 === 'caché') {\n      s.pointilles = 2\n      s.color = this.color\n      s.opacite = 0.3\n    } else {\n      s.color = this.color\n    }\n    this.c2d.push(s)\n  }\n  for (let i = 0; i < c2.listePoints.length; i += 2) {\n    s = segment(c4.listePoints[i], c2.listePoints[i])\n    if (cote2 === 'caché') {\n      s.pointilles = 2\n      s.color = this.color\n      s.opacite = 0.3\n    } else {\n      s.color = this.color\n    }\n    this.c2d.push(s)\n  }\n  this.c2d.push(c1, c2, c3, c4)\n}\nexport function cylindre3d (centrebase1, centrebase2, normal, rayon, rayon2, color = 'black') {\n  return new Cylindre3d(centrebase1, centrebase2, normal, rayon, rayon2, color)\n}\n\n/**\n   * LE PRISME\n   *\n   * @author Jean-Claude Lhote\n   * Crée un prisme à partir du base Polygone3d et d'un vecteur3d d'extrusion (on peut faire des prismes droits ou non droits)\n   */\nclass Prisme3d {\n  constructor (base, vecteur, color) {\n    ObjetMathalea2D.call(this)\n\n    this.color = color\n    base.color = color\n    this.base1 = base\n    this.base2 = translation3d(base, vecteur)\n    this.base2.color = this.base1.color\n    this.aretes = []\n    this.c2d = []; let s\n    for (let i = 0; i < this.base1.listePoints.length; i++) {\n      this.c2d.push(this.base1.c2d[i])\n    }\n    for (let i = 0; i < this.base2.listePoints.length; i++) {\n      this.c2d.push(this.base2.c2d[i])\n    }\n    for (let i = 0; i < this.base1.listePoints.length; i++) {\n      s = arete3d(this.base1.listePoints[i], this.base2.listePoints[i], this.color)\n      this.c2d.push(s.c2d)\n    }\n  }\n}\n\nexport function prisme3d (base, vecteur, color = 'black') {\n  return new Prisme3d(base, vecteur, color)\n}\n/**\n   * La pyramide\n   *\n   * @author Jean-Claude Lhote\n   * Crée une pyramide à partir d'une base Polygone3d et d'un sommet\n   */\nclass Pyramide3d {\n  constructor (base, sommet, color) {\n    ObjetMathalea2D.call(this)\n\n    this.color = color\n    base.color = color\n    this.base = base\n    this.aretes = []\n    this.sommet = sommet\n    this.c2d = []; let s\n    for (let i = 0; i < this.base.listePoints.length; i++) {\n      s = this.base.c2d[i]\n      if (this.base.listePoints[i].visible) {\n        s.pointilles = false\n      } else {\n        s.pointilles = 2\n      }\n      this.c2d.push(s)\n    }\n    for (let i = 0; i < this.base.listePoints.length; i++) {\n      s = arete3d(this.base.listePoints[i], this.sommet, this.color, true)\n      if (this.base.listePoints[i].visible) {\n        s.c2d.pointilles = false\n      } else {\n        s.c2d.pointilles = 2\n      }\n      this.c2d.push(s.c2d)\n    }\n  }\n}\n\nexport function pyramide3d (base, vecteur, color = 'black') {\n  return new Pyramide3d(base, vecteur, color)\n}\n\n/**\n   * La pyramide tronquée\n   *\n   * @author Jean-Claude Lhote\n   * Crée une pyramide à partir d'une base Polygone3d d'un sommet et d'un coefficient compris entre 0 et 1\n   * un coefficient de 0.5 coupera la pyramide à mi-hauteur (valeur par défaut).\n   */\nclass PyramideTronquee3d {\n  constructor (base, sommet, coeff = 0.5, color = 'black') {\n    ObjetMathalea2D.call(this)\n\n    this.color = color\n    base.color = color\n    this.base = base\n    this.coeff = coeff\n    this.aretes = []\n    this.sommet = sommet\n    this.c2d = []\n    const sommetsBase2 = []\n    for (let i = 0, pointSection; i < this.base.listePoints.length; i++) {\n      pointSection = homothetie3d(sommet, base.listePoints[i], coeff)\n      pointSection.visible = true\n      sommetsBase2.push(pointSection)\n    }\n    this.base2 = polygone3d(...sommetsBase2)\n    this.c2d.push(...this.base.c2d)\n    for (let i = 0; i < base.listePoints.length; i++) {\n      this.aretes.push(arete3d(base.listePoints[i], this.base2.listePoints[i], color, base.listePoints[i].visible))\n      this.c2d.push(this.aretes[i].c2d)\n    }\n    this.c2d.push(...this.base2.c2d)\n  }\n}\nexport function pyramideTronquee3d (base, sommet, coeff = 0.5, color = 'black') {\n  return new PyramideTronquee3d(base, sommet, coeff, color)\n}\n/**\n   * LE cube\n   * @author Jean-Claude Lhote\n   * usage : cube(x,y,z,c,color) construit le cube d'arète c dont le sommet en bas à gauche a les coordonnées x,y,z.\n   * le face avant est dans le plan xz\n   *\n*/\nclass Cube3d {\n  constructor (x, y, z, c, color = 'black') {\n    ObjetMathalea2D.call(this)\n    const A = point3d(x, y, z)\n    const vx = vecteur3d(c, 0, 0)\n    const vy = vecteur3d(0, c, 0)\n    const vz = vecteur3d(0, 0, c)\n    const B = translation3d(A, vx)\n    const C = translation3d(B, vz)\n    const D = translation3d(A, vz)\n    const E = translation3d(A, vy)\n    const F = translation3d(E, vx)\n    const G = translation3d(F, vz)\n    const H = translation3d(D, vy)\n    const faceAV = polygone([A.c2d, B.c2d, C.c2d, D.c2d], color)\n    const faceDr = polygone([B.c2d, F.c2d, G.c2d, C.c2d], color)\n    const faceTOP = polygone([D.c2d, C.c2d, G.c2d, H.c2d], color)\n    faceAV.couleurDeRemplissage = 'lightgray'\n    faceTOP.couleurDeRemplissage = 'white'\n    faceDr.couleurDeRemplissage = 'darkgray'\n    this.c2d = [faceAV, faceDr, faceTOP]\n  }\n}\nexport function cube3d (x, y, z, c) {\n  return new Cube3d(x, y, z, c)\n}\n/**\n * @author Jean-Claude Lhote\n * Créer une barre de l cubes de c de côté à partir du point (x,y,z)\n * La barre est positionnée suivant l'axe x\n */\nclass Barre3d {\n  constructor (x, y, z, c, l, color = 'black') {\n    ObjetMathalea2D.call(this)\n    let B, C, D, E, F, G, H, faceAv, faceTop\n    this.c2d = []\n    const vx = vecteur3d(c, 0, 0)\n    const vy = vecteur3d(0, c, 0)\n    const vz = vecteur3d(0, 0, c)\n    let A = point3d(x, y, z)\n\n    for (let i = 0; i < l; i++) {\n      B = translation3d(A, vx)\n      C = translation3d(B, vz)\n      D = translation3d(A, vz)\n      E = translation3d(A, vy)\n      F = translation3d(E, vx)\n      G = translation3d(F, vz)\n      H = translation3d(D, vy)\n      faceAv = polygone([A.c2d, B.c2d, C.c2d, D.c2d], color)\n      faceTop = polygone([D.c2d, C.c2d, G.c2d, H.c2d], color)\n      faceAv.couleurDeRemplissage = 'lightgray'\n      faceTop.couleurDeRemplissage = 'white'\n      this.c2d.push(faceAv, faceTop)\n      A = translation3d(A, vx)\n    }\n    const faceD = polygone([B.c2d, F.c2d, G.c2d, C.c2d], color)\n    faceD.couleurDeRemplissage = 'darkgray'\n    this.c2d.push(faceD)\n  }\n}\n\nexport function barre3d (x, y, z, c, l, color = 'black') {\n  return new Barre3d(x, y, z, c, l, color)\n}\n\n/**\n * @author Jean-Claude Lhote\n * Crée une plaque de cubes de côtés c de dimensions l suivant x et p suivant y\n */\nclass Plaque3d {\n  constructor (x, y, z, c, l, p, color = 'black') {\n    ObjetMathalea2D.call(this)\n    let A, B, C, D, F, G, H, faceAv, faceTop, faceD\n    this.c2d = []\n    const vx = vecteur3d(c, 0, 0)\n    const vy = vecteur3d(0, c, 0)\n    const vz = vecteur3d(0, 0, c)\n\n    for (let i = 0; i < l; i++) {\n      for (let j = 0; j < p; j++) {\n        A = point3d(x + i * c, y + j * c, z)\n        B = translation3d(A, vx)\n        C = translation3d(B, vz)\n        D = translation3d(A, vz)\n        F = translation3d(B, vy)\n        G = translation3d(F, vz)\n        H = translation3d(D, vy)\n        if (j === 0) {\n          faceAv = polygone([A.c2d, B.c2d, C.c2d, D.c2d], color)\n          faceAv.couleurDeRemplissage = 'lightgray'\n          this.c2d.push(faceAv)\n        }\n        if (i === l - 1) {\n          faceD = polygone([B.c2d, F.c2d, G.c2d, C.c2d], color)\n          faceD.couleurDeRemplissage = 'darkgray'\n          this.c2d.push(faceD)\n        }\n        faceTop = polygone([D.c2d, C.c2d, G.c2d, H.c2d], color)\n        faceTop.couleurDeRemplissage = 'white'\n        this.c2d.push(faceTop)\n      }\n    }\n  }\n}\n\nexport function plaque3d (x, y, z, c, l, p, color = 'black') {\n  return new Plaque3d(x, y, z, c, l, p, color)\n}\n\nclass PaveLPH3d {\n  constructor (x, y, z, c, l, p, h, color = 'black') {\n    ObjetMathalea2D.call(this)\n    let A, B, C, D, F, G, H, faceAv, faceTop, faceD\n    this.c2d = []\n    const vx = vecteur3d(c, 0, 0)\n    const vy = vecteur3d(0, c, 0)\n    const vz = vecteur3d(0, 0, c)\n\n    for (let i = 0; i < l; i++) {\n      for (let j = 0; j < p; j++) {\n        for (let k = 0; k < h; k++) {\n          A = point3d(x + i * c, y + j * c, z + k * c)\n          B = translation3d(A, vx)\n          C = translation3d(B, vz)\n          D = translation3d(A, vz)\n          F = translation3d(B, vy)\n          G = translation3d(F, vz)\n          H = translation3d(D, vy)\n          if (j === 0) {\n            faceAv = polygone([A.c2d, B.c2d, C.c2d, D.c2d], color)\n            faceAv.couleurDeRemplissage = 'lightgray'\n            this.c2d.push(faceAv)\n          }\n          if (i === l - 1) {\n            faceD = polygone([B.c2d, F.c2d, G.c2d, C.c2d], color)\n            faceD.couleurDeRemplissage = 'darkgray'\n            this.c2d.push(faceD)\n          }\n          if (k === h - 1) {\n            faceTop = polygone([D.c2d, C.c2d, G.c2d, H.c2d], color)\n            faceTop.couleurDeRemplissage = 'white'\n            this.c2d.push(faceTop)\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function paveLPH3d (x, y, z, c, l, p, color = 'black') {\n  return new PaveLPH3d(x, y, z, c, l, p, color)\n}\n\n/**\n * @author Erwan Duplessis et Jean-Claude Lhote\n * Attention !\n * Cette Classe définit un objet cube dans une représentation en perspective axonométrique paramétrée par alpha et beta\n * et non pas context.anglePerspective (contrairement à l'objet cube3d ci-dessus ou l'objet pave3d ci-dessous)\n * Il ne s'agit pas à proprement parler d'un objet 3d, c'est un objet 2d avec sa méthode svg() et sa méthode tikz()\n * Utilisée par exemple dans 6G43\n */\nclass Cube {\n  constructor (x, y, z, alpha, beta, colorD, colorT, colorG) {\n    ObjetMathalea2D.call(this)\n    this.x = x\n    this.y = y\n    this.z = z\n    this.alpha = alpha\n    this.beta = beta\n    this.colorD = colorD\n    this.colorG = colorG\n    this.colorT = colorT\n\n    this.lstPoints = []\n    this.lstPolygone = []\n    function proj (x, y, z, alpha, beta) {\n      const cosa = Math.cos(alpha * Math.PI / 180)\n      const sina = Math.sin(alpha * Math.PI / 180)\n      const cosb = Math.cos(beta * Math.PI / 180)\n      const sinb = Math.sin(beta * Math.PI / 180)\n      return point(cosa * x - sina * y, -sina * sinb * x - cosa * sinb * y + cosb * z)\n    }\n\n    this.lstPoints.push(proj(this.x, this.y, this.z, this.alpha, this.beta)) // point 0 en bas\n    this.lstPoints.push(proj(this.x + 1, this.y, this.z, this.alpha, this.beta)) // point 1\n    this.lstPoints.push(proj(this.x + 1, this.y, this.z + 1, this.alpha, this.beta)) // point 2\n    this.lstPoints.push(proj(this.x, this.y, this.z + 1, this.alpha, this.beta)) // point 3\n    this.lstPoints.push(proj(this.x + 1, this.y + 1, this.z + 1, this.alpha, this.beta)) // point 4\n    this.lstPoints.push(proj(this.x, this.y + 1, this.z + 1, this.alpha, this.beta)) // point 5\n    this.lstPoints.push(proj(this.x, this.y + 1, this.z, this.alpha, this.beta)) // point 6\n    let p\n    p = polygone([this.lstPoints[0], this.lstPoints[1], this.lstPoints[2], this.lstPoints[3]], 'black')\n    p.opaciteDeRemplissage = 1\n    p.couleurDeRemplissage = this.colorD\n    this.lstPolygone.push(p)\n    p = polygone([this.lstPoints[2], this.lstPoints[4], this.lstPoints[5], this.lstPoints[3]], 'black')\n    p.couleurDeRemplissage = this.colorG\n    p.opaciteDeRemplissage = 1\n    this.lstPolygone.push(p)\n    p = polygone([this.lstPoints[3], this.lstPoints[5], this.lstPoints[6], this.lstPoints[0]], 'black')\n    p.couleurDeRemplissage = this.colorT\n    p.opaciteDeRemplissage = 1\n    this.lstPolygone.push(p)\n    this.c2d = this.lstPolygone\n  }\n}\nexport function cube (x = 0, y = 0, z = 0, alpha = 45, beta = -35, { colorD = 'green', colorT = 'white', colorG = 'gray' } = {}) {\n  return new Cube(x, y, z, alpha, beta, colorD, colorG, colorT)\n}\n\n/**\n   * LE PAVE\n   * @author Jean-Claude Lhote\n   * usage : pave(A,B,D,E) construit le pavé ABCDEFGH dont les arêtes [AB],[AD] et [AE] sont délimitent 3 faces adjacentes.\n   *\n*/\nclass Pave3d {\n  constructor (A, B, D, E, color) {\n    ObjetMathalea2D.call(this)\n    const v1 = vecteur3d(A, B)\n    const v2 = vecteur3d(A, E)\n    const v3 = vecteur3d(A, D)\n    const C = translation3d(D, v1)\n    const H = translation3d(D, v2)\n    const G = translation3d(C, v2)\n    const F = translation3d(B, v2)\n    E.visible = false\n    this.color = color\n    this.base = polygone3d([A, B, F, E])\n    this.hauteur = v3\n    this.c2d = []\n    this.aretes = [arete3d(A, B, color), arete3d(A, D, color), arete3d(A, E, color), arete3d(C, B, color), arete3d(F, B, color), arete3d(C, D, color), arete3d(C, G, color), arete3d(F, G, color), arete3d(F, E, color), arete3d(H, G, color), arete3d(H, E, color), arete3d(H, D, color)]\n    for (const arete of this.aretes) {\n      this.c2d.push(arete.c2d)\n    }\n  }\n}\n\nexport function pave3d (A, B, C, E, color = 'black') {\n  return new Pave3d(A, B, C, E, color)\n}\n\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%% TRANSFORMATIONS%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n*/\n\n/**\n   * LA ROTATION VECTORIELLE\n   *\n   * @author Jean-Claude Lhote\n   * Cette rotation se distingue de la rotation d'axe (d) par le fait qu'on tourne autour d'une droite vectorielle\n   * Elle sert à faire tourner des vecteurs essentiellement.\n   * Si on l'utilise sur un point, alors il tournera autour d'une droite passant par l'origine.\n   *\n   * @param {*} point3D pour l'instant, cette fonction ne fait tourner qu'un point3d ou un vecteur3d\n   * @param {*} vecteur3D vecteur directeur de l'axe de rotation (l'axe passe par l'origine, pour tourner autour d'une droite particulière on utilise rotation3d())\n   * @param {*} angle Angle de rotation\n   */\nexport function rotationV3d (point3D, vecteur3D, angle) { // point = ce qu'on fait tourner (Point3d) ; vecteur = directeur de l'axe de rotation [x,y,z] et angle de rotation en degrés\n  let V, p2\n  const norme = math.norm(vecteur3D.matrice)\n  const unitaire = math.multiply(vecteur3D.matrice, 1 / norme)\n  const u = unitaire._data[0]; const v = unitaire._data[1]; const w = unitaire._data[2]\n  const c = Math.cos(angle * Math.PI / 180); const s = Math.sin(angle * Math.PI / 180)\n  const k = 1 - c\n  const matrice = math.matrix([[u * u * k + c, u * v * k - w * s, u * w * k + v * s], [u * v * k + w * s, v * v * k + c, v * w * k - u * s], [u * w * k - v * s, v * w * k + u * s, w * w * k + c]])\n  if (point3D.constructor === Point3d) {\n    V = math.matrix([point3D.x, point3D.y, point3D.z])\n    p2 = math.multiply(matrice, V)\n    return point3d(p2._data[0], p2._data[1], p2._data[2])\n  } else if (point3D.constructor === Vecteur3d) {\n    V = point3D\n    p2 = math.multiply(matrice, V.matrice)\n    return vecteur3d(p2._data[0], p2._data[1], p2._data[2])\n  }\n}\n\n/**\n   * LA ROTATION D'AXE UNE DROITE\n   *\n   * @author Jean-Claude Lhote\n   *\n   * @param {Point3d} point3D Pour l'instant on ne fait tourner qu'un point3d\n   * Remarque : ça n'a aucun sens de faire tourner un vecteur autour d'une droite particulière, on utilise la rotation vectorielle pour ça.\n   * @param {Droite3d} droite3D Axe de rotation\n   * @param {Number} angle Angle de rotation\n   * @param {string} color couleur du polygone créé. si non précisé la couleur sera celle du polygone argument\n   */\nexport function rotation3d (point3D, droite3D, angle, color) {\n  const directeur = droite3D.directeur\n  const origine = droite3D.origine\n  const p = []\n  if (point3D.constructor === Point3d) {\n    const V = vecteur3d(origine, point3d(0, 0, 0))\n    const W = vecteur3d(point3d(0, 0, 0), origine)\n    const M = translation3d(point3D, V)\n    const N = rotationV3d(M, directeur, angle)\n    return translation3d(N, W)\n  } else if (point3D.constructor === Vecteur3d) {\n    return rotationV3d(point3D, directeur, angle)\n  } else if (point3D.constructor === Polygone3d) {\n    for (let i = 0; i < point3D.listePoints.length; i++) {\n      p.push(rotation3d(point3D.listePoints[i], droite3D, angle))\n    }\n    if (typeof (color) !== 'undefined') {\n      return polygone3d(p, color)\n    } else { return polygone3d(p, point3D.color) }\n  }\n}\n\n/**\n * @author Jean-Claude Lhote\n * Crée une flèche en arc de cercle pour montrer un sens de rotation autour d'un axe 3d\n * cette flèche est dessinée dans le plan orthogonal à l'axe qui passe par l'origine de l'axe\n * le rayon est ici un vecteur 3d qui permet de fixer le point de départ de la flèche par translation de l'origine de l'axe\n * l'angle définit l'arc formé par la flèche\n * son sens est définit par le vecteur directeur de l'axe (changer le signe de chaque composante de ce vecteur pour changer le sens de rotation)\n */\nfunction SensDeRotation3d (axe, rayon, angle, epaisseur, color) {\n  ObjetMathalea2D.call(this)\n  this.epaisseur = epaisseur\n  this.color = color\n  this.c2d = []\n  let M; let N; let s\n  M = translation3d(axe.origine, rayon)\n  for (let i = 0; i < angle; i += 5) {\n    N = rotation3d(M, axe, 5)\n    s = segment(M.c2d, N.c2d)\n    s.color = this.color\n    s.epaisseur = this.epaisseur\n    this.c2d.push(s)\n    M = N\n  }\n  N = rotation3d(M, axe, 5)\n  s = segment(M.c2d, N.c2d)\n  s.color = this.color\n  s.epaisseur = this.epaisseur\n  this.c2d.push(s)\n  const d = droite3d(N, axe.directeur)\n  const A = rotation3d(M, d, 30)\n  const B = rotation3d(M, d, -30)\n  s = segment(N.c2d, A.c2d)\n  s.color = this.color\n  s.epaisseur = this.epaisseur\n  this.c2d.push(s)\n  s = segment(N.c2d, B.c2d)\n  s.color = this.color\n  s.epaisseur = this.epaisseur\n  this.c2d.push(s)\n}\nexport function sensDeRotation3d (axe, rayon, angle, epaisseur, color) {\n  return new SensDeRotation3d(axe, rayon, angle, epaisseur, color)\n}\n\n/**\n   * LA TRANSLATION\n   *\n   * @author Jean-Claude Lhote\n   * @param {Point3d} point3D Pour l'instant on ne translate qu'un point3d ou un polygone3d\n   * @param {Vecteur3d} vecteur3D\n   */\nexport function translation3d (point3D, vecteur3D) {\n  if (point3D.constructor === Point3d) {\n    const x = point3D.x + vecteur3D.x\n    const y = point3D.y + vecteur3D.y\n    const z = point3D.z + vecteur3D.z\n    return point3d(x, y, z)\n  } else if (point3D.constructor === Polygone3d) {\n    const p = []\n    for (let i = 0; i < point3D.listePoints.length; i++) {\n      p.push(translation3d(point3D.listePoints[i], vecteur3D))\n    }\n    return polygone3d(p, point3D.color)\n  }\n}\n\n/**\n * L'homothetie\n * @author Jean-Claude Lhote\n * La même chose qu'ne 2d, mais en 3d...\n * Pour les points3d les polygones ou les vecteurs (multiplication scalaire par rapport)\n */\nexport function homothetie3d (point3D, centre, rapport, color) {\n  let V\n  const p = []\n  if (point3D.constructor === Point3d) {\n    V = vecteur3d(centre, point3D)\n    V.x *= rapport\n    V.y *= rapport\n    V.z *= rapport\n    return translation3d(centre, V)\n  } else if (point3D.constructor === Vecteur3d) {\n    V = vecteur3d(point3D.x, point3D.y, point3D.z)\n    V.x *= rapport\n    V.y *= rapport\n    V.z *= rapport\n    return V\n  } else if (point3D.constructor === Polygone3d) {\n    for (let i = 0; i < point3D.listePoints.length; i++) {\n      p.push(homothetie3d(point3D.listePoints[i], centre, rapport, color))\n    }\n    if (typeof (color) !== 'undefined') {\n      return polygone3d(p, color)\n    } else { return polygone3d(p, point3D.color) }\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","math","matrix","multiply","norm","cross","dot","numId","ObjetMathalea2D","positionLabel","isVisible","color","style","styleTikz","epaisseur","opacite","pointilles","id","context","Point3d","constructor","x","y","z","visible","label","alpha","Math","PI","rapport","MT","cos","sin","typeObjet","V","W","c2d","point","_data","point3d","Vecteur3d","length","matrice","norme","sqrt","vecteur","representant","A","B","translation3d","vecteur3d","Arete3d","point1","point2","extremite1","extremite2","segment","arete3d","p1","p2","Droite3d","point3D","vecteur3D","directeur","origine","M","droite","droite3d","demicercle3d","centre","normal","rayon","cote","angledepart","signe","listepoints","d","rotation3d","demiCercle","polyline","Polygone3d","Array","isArray","listePoints","segments3d","segments","aretes","polygone3d","Sphere3d","nbParalleles","nbMeridiens","c1","c2","c3","c4","C","D","call","prodvec","rayon2","R","cote1","cote2","rayon3","k","rotationV3d","sphere3d","Cylindre3d","centrebase1","centrebase2","rayon1","s","color1","color2","cylindre3d","Prisme3d","base","base1","base2","prisme3d","Pyramide3d","sommet","pyramide3d","PyramideTronquee3d","coeff","sommetsBase2","pointSection","homothetie3d","pyramideTronquee3d","Cube3d","c","vx","vy","vz","E","F","G","H","faceAV","polygone","faceDr","faceTOP","couleurDeRemplissage","cube3d","Barre3d","l","faceAv","faceTop","faceD","barre3d","Plaque3d","p","j","plaque3d","PaveLPH3d","h","paveLPH3d","Cube","beta","colorD","colorT","colorG","proj","cosa","sina","cosb","sinb","lstPoints","lstPolygone","opaciteDeRemplissage","cube","angle","unitaire","u","v","w","droite3D","SensDeRotation3d","axe","N","sensDeRotation3d"],"sourceRoot":""}