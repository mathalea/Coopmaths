{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C10.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","AdditionsSoustractionsMultiplicationsPosees","Exercice","this","interactif","consigne","spacing","context","spacingCorr","nbQuestions","listePackages","tailleDiaporama","nouvelleVersion","typesDeQuestions","reponse","sup","parseInt","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","a","b","c","d","e","f","g","x","y","i","cpt","randint","texNombre","ajouteChampTexte","calcul","setReponse","Operation","operande1","operande2","type","indexOf","push","listeQuestionsToContenu","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","numeroExercice","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","autoCorrection","propositions","length","statut","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","feedback","querySelectorAll","uicheck","classList","add","propositionsQcm","espace","undefined","options","ordered","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","texteApres","inline","numeric","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/6436.08c5109227eb91757b19.js","sourcesContent":["import Operation from '../../modules/operations'\nimport Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texNombre, calcul } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif'\n\nexport const amcReady = true\nexport const amcType = 4 // type de question AMC\nexport const interactifReady = true\nexport const titre = 'Additions, soustractions et multiplications posées de nombres entiers'\n\n/**\n * Additions, soustractions et multiplications posées de nombres entiers\n *\n * * abcd +efg\n * * abc0-efg\n * * 1abc-def\n * * abc*d0e tables de 2 à 5\n * * abc*de tables de 5 à 9\n * @Auteur Rémi Angot\n * Support des opérations posées en html par Jean-Claude Lhote.\n * Référence 6C10\n */\nexport default function AdditionsSoustractionsMultiplicationsPosees () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactif = 1\n  this.consigne = 'Poser et effectuer les calculs suivants.'\n  this.spacing = 2\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1) // Important sinon les opérations posées ne sont pas jolies\n  this.nbQuestions = 5\n  this.listePackages = 'xlop'\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestions, reponse\n    const typesDequestionsDisponibles = [1, 2, 3, 4, 5]\n    let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(\n      typesDequestionsDisponibles,\n      this.nbQuestions\n    )\n    if (this.nbQuestions === 3) {\n      listeTypeDeQuestions = [1, 2, 5]\n    }\n    if (this.nbQuestions === 4) {\n      listeTypeDeQuestions = [1, 2, 4, 5]\n    }\n\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b, c, d, e, f, g, x, y; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // abcd +efg\n          a =\n            randint(1, 9) * 10000 +\n            randint(5, 9) * 1000 +\n            randint(5, 9) * 100 +\n            randint(7, 9) * 10 +\n            randint(1, 9)\n          b = randint(5, 9) * 100 + randint(7, 9) * 10 + randint(1, 9)\n          texte = `$${texNombre(a)}+${b}$`\n          if (this.interactif) texte += '$=$' + ajouteChampTexte(this, i)\n          reponse = calcul(a + b)\n          setReponse(this, i, reponse)\n\n          texteCorr = Operation({ operande1: a, operande2: b, type: 'addition' })\n          break\n        case 2: // abc0-efg\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          e = randint(b, 9)\n          f = randint(c, 9)\n          g = randint(2, 9)\n          x = a * 1000 + b * 100 + c * 10\n          y = e * 100 + f * 10 + g\n          texte = `$${texNombre(x)}-${y}$`\n          if (this.interactif) texte += '$=$' + ajouteChampTexte(this, i)\n          reponse = calcul(x - y)\n          setReponse(this, i, reponse)\n          texteCorr = Operation({ operande1: x, operande2: y, type: 'soustraction' })\n          break\n        case 3: // 1abc-def\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          d = randint(a, 9)\n          e = randint(1, 9)\n          f = randint(c, 9)\n          x = 1000 + a * 100 + b * 10 + c\n          y = d * 100 + e * 10 + f\n          texte = `$${texNombre(x)}-${y}$`\n          if (this.interactif) texte += '$=$' + ajouteChampTexte(this, i)\n          reponse = calcul(x - y)\n          setReponse(this, i, reponse)\n\n          texteCorr = Operation({ operande1: x, operande2: y, type: 'soustraction' })\n          break\n        case 4: // abc*d0e tables de 2 à 5\n          a = randint(2, 5)\n          b = randint(2, 5)\n          c = randint(2, 5)\n          d = randint(2, 5)\n          e = randint(2, 5)\n          x = 100 * a + 10 * b + c\n          y = d * 100 + e\n          texte = `$${texNombre(x)}\\\\times${y}$`\n          if (this.interactif) texte += '$=$' + ajouteChampTexte(this, i)\n          reponse = calcul(x * y)\n          setReponse(this, i, reponse)\n\n          texteCorr = Operation({ operande1: x, operande2: y, type: 'multiplication' })\n          break\n        case 5: // abc*de tables de 5 à 9\n          a = randint(5, 9)\n          b = randint(5, 9)\n          c = randint(5, 9)\n          d = randint(5, 9)\n          e = randint(5, 9)\n          x = 100 * a + 10 * b + c\n          y = 10 * d + e\n          texte = `$${x}\\\\times${y}$`\n          if (this.interactif) texte += '$=$' + ajouteChampTexte(this, i)\n          reponse = calcul(x * y)\n          setReponse(this, i, reponse)\n          texteCorr = Operation({ operande1: x, operande2: y, type: 'multiplication' })\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        if (!context.isHtml && i === 0) {\n          texteCorr = '\\\\setlength\\\\itemsep{2em}' + texteCorr\n        } // espacement entre les questions\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}