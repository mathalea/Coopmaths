(self.webpackChunkmathalea=self.webpackChunkmathalea||[]).push([[7833],{97833:(e,t,r)=>{"use strict";r.r(t),r.d(t,{titre:()=>n,default:()=>i});var s=r(67567),o=r(24477),$=r(77457);const n="Engrenages";function i(){s.default.call(this),this.sup=1,this.titre=n,this.consigne="",sortie_html,this.spacing=2,sortie_html?this.spacing_corr=2:this.spacing_corr=1,this.nb_questions=4,this.nb_cols=1,this.nb_cols_corr=1,this.sup=1,this.liste_packages="bclogo";if(sortie_html)var e="100%";this.nouvelle_version=function(t){let r;sortie_html&&(this.bouton_aide=(0,o.aw6)(t,"assets/pdf/FicheArithmetique-3A13.pdf","Aide mémoire sur les fonctions (Sébastien Lozano)","Aide mémoire")),this.liste_questions=[],this.liste_corrections=[],this.contenu="",this.contenu_correction="";let s=(0,o.LG7)([1,2,3,4],this.nb_questions),n="Boîte de vitesse, transmission de vélo, de moto, perceuse electrique, tout ça fonctionne avec des engrenages! Mais au fait, comment ça marche, les engrenages?";sortie_html&&(n+=(0,o.Gjf)("Attention, les roues ci-dessous ne comportent pas le nombre de dents de l'énoncé!","nombres","Coup de pouce"),n+=`<div id="3A13" style="width: ${e}"; height: 50px; display : table "></div>`,(0,$.tN)("3A13",200,200)),this.introduction=(0,o.b9P)({titre:"Arithmétique des engrenages",texte:n,couleur:"nombres"});for(let e,$,n=0,d=0;n<this.nb_questions&&d<50;){var i,u;r=s[n],sortie_html&&Date.now();let a="Étant donnés deux nombres entiers a et b, lorsque le plus petit multiple commun à $a$ et $b$ vaut $a \\times b$ ( $ppcm(a,b)=a\\times b$ ), on dit que ";switch(sortie_html?a+="<b>les nombres a et b sont premiers entre eux</b>":a+="$\\textbf{les nombres a et b sont premiers entre eux}$",r){case 1:e=`La roue n$\\degree$1 possède $${i=(0,o.nSR)(5,30)}$ dents et la roue n$\\degree$2 a $${u=(0,o.nSR)(5,30,i)}$ dents.`,e+="<br>"+(0,o.Vb9)(0)+` Écrire la liste des multiples de $${i}$ et de $${u}$.`,(0,o.U8t)(i,u)==i*u&&(e+=`<br>Pourquoi peut-on en déduire que ${i} et ${u} sont des `,e+=(0,o.CVT)(t+1,1,"nombres premiers entre eux ?","Définition : Nombres premiers entre eux",a)),e+="<br>"+(0,o.Vb9)(1)+" En déduire le nombre de tours de chaque roue avant le retour à leur position initiale.",$=(0,o.Vb9)(0)+` Liste des premiers multiples de $${i}$ : <br>`;let r=5-(0,o.U8t)(i,u)/i%5,s=(0,o.U8t)(i,u)/i+r;for(let e=1;e<s+1;e++)$+=`$${e}\\times${i} = `,e==(0,o.U8t)(i,u)/i?($+=(0,o.X8v)((0,o.FpM)(e*i)),$+="$ ; "):$+=`${(0,o.FpM)(e*i)}$ ; `,e%5==0&&($+="<br>");$+="$\\ldots$ ",$+="<br>",$+=` Liste des premiers multiples de ${u} : <br>`,r=5-(0,o.U8t)(i,u)/u%5,s=(0,o.U8t)(i,u)/u+r;for(let e=1;e<s+1;e++)$+=`$${e}\\times${u} = `,e==(0,o.U8t)(i,u)/u?($+=(0,o.X8v)((0,o.FpM)(e*u)),$+="$ ; "):$+=`${(0,o.FpM)(e*u)}$ ; `,e%5==0&&($+="<br>");$+="$\\ldots$ ",$+="<br>",$+=`Le plus petit multiple commun à $${i}$ et $${u}$ vaut donc $ppcm(${i},${u}) = ${(0,o.U8t)(i,u)}$.`,$+="<br>",(0,o.U8t)(i,u)==i*u&&($+="Le $ppcm("+i+";"+u+")="+i+"\\times"+u+`$ donc $${i}$ et $${u}$ sont des `,$+=(0,o.CVT)(t+2,1,"nombres premiers entre eux.","Définition : Nombres premiers entre eux",a)),$+="<br><br>"+(0,o.Vb9)(1)+` Chaque roue doit tourner de $ppcm(${i},${u})=${(0,o.FpM)((0,o.U8t)(i,u))}$ dents.`,$+=`<br> Cela correspond à $(${(0,o.U8t)(i,u)}\\text{ dents})\\div (${i}\\text{ dents/tour}) = ${(0,o.U8t)(i,u)/i}$`,(0,o.U8t)(i,u)/i==1?$+=" tour ":$+=" tours ",$+="pour la roue n$\\degree$1.",$+=`<br>Cela correspond à $(${(0,o.U8t)(i,u)}\\text{ dents})\\div (${u}\\text{ dents/tour}) = ${(0,o.U8t)(i,u)/u}$`,(0,o.U8t)(i,u)/u==1?$+=" tour ":$+=" tours ",$+="pour la roue n$\\degree$2.";break;case 2:e=`La roue n$\\degree$1 possède $${i=(0,o.nSR)(31,80)}$ dents et la roue n$\\degree$2 a $${u=(0,o.nSR)(31,80,i)}$ dents.`,e+="<br>"+(0,o.Vb9)(0)+` Décomposer $${i}$ et $${u}$ en produit de facteurs premiers.`,(0,o.U8t)(i,u)==i*u&&(e+=`<br>Pourquoi peut-on en déduire que ${i} et ${u} sont des `,e+=(0,o.CVT)(t+3,1,"nombres premiers entre eux","Définition : Nombres premiers entre eux",a)),e+="<br>"+(0,o.Vb9)(1)+" En déduire le nombre de tours de chaque roue avant le retour à leur position initiale.",$="Pour un nombre de dents plus élevé, il est plus commode d'utiliser les décompositions en produit de facteurs premiers.",$+="<br>"+(0,o.Vb9)(0)+` Décomposition de $${i}$ en produit de facteurs premiers :  $${i} = ${(0,o.BgJ)(i)}$.`,$+=`<br> Décomposition de $${u}$ en produit de facteurs premiers :  $${u} = ${(0,o.BgJ)(u)}$.`,$+=`<br> D'où $ppcm(${i},${u})= ${(0,o.BgJ)((0,o.U8t)(i,u))}$.<br>`,(0,o.U8t)(i,u)==i*u&&($+="Le $ppcm("+i+";"+u+")="+i+"\\times"+u+`$ donc $${i}$ et $${u}$ sont des `,$+=(0,o.CVT)(t+4,1,"nombres premiers entre eux.","Définition : Nombres premiers entre eux",a)),$+="<br><br>"+(0,o.Vb9)(1)+` Chaque roue doit tourner de $ppcm(${i},${u})=${(0,o.FpM)((0,o.U8t)(i,u))}$ dents.`,$+=`<br> Cela correspond à $(${(0,o.FpM)((0,o.U8t)(i,u))}\\text{ dents})\\div (${i}\\text{ dents/tour}) = ${(0,o.U8t)(i,u)/i}$`,(0,o.U8t)(i,u)/i==1?$+=" tour ":$+=" tours ",$+="pour la roue n$\\degree$1.",$+=`<br> Cela correspond à $(${(0,o.FpM)((0,o.U8t)(i,u))}\\text{ dents})\\div (${u}\\text{ dents/tour}) = ${(0,o.U8t)(i,u)/u}$`,(0,o.U8t)(i,u)/u==1?$+=" tour ":$+=" tours ",$+="pour la roue n$\\degree$2.";break;case 3:i=(0,o.nSR)(5,80),e=`La roue n$\\degree$2 a maintenant $${u=(0,o.nSR)(5,80,i)}$ dents.`,e+=` Déterminer le nombre de dents de la roue n$\\degree$1 qui ferait $${(0,o.U8t)(i,u)/i}$ `,(0,o.U8t)(i,u)/i==1?e+=" tour ":e+=" tours ",e+=` pendant que la roue n$\\degree$2 en fait $${(0,o.U8t)(i,u)/u}$.`,$=`Puisque la roue n$\\degree$2, qui a $${u}$ dents, fait $${(0,o.U8t)(i,u)/u}$ `,(0,o.U8t)(i,u)/u==1?$+=" tour ":$+=" tours ",$+=`, cela représente $${(0,o.FpM)((0,o.U8t)(i,u))}$ dents.`,$+=`<br>La roue n$\\degree$1 doit donc aussi tourner de $${(0,o.FpM)((0,o.U8t)(i,u))}$ dents, ceci en $${(0,o.U8t)(i,u)/i}$ `,(0,o.U8t)(i,u)/i==1?$+=" tour ":$+=" tours ",$+=".",$+=`<br> on obtient donc $(${(0,o.FpM)((0,o.U8t)(i,u))}\\text{ dents})\\div (${(0,o.U8t)(i,u)/i}\\text{`,(0,o.U8t)(i,u)/i==1?$+=" tour ":$+=" tours ",$+=`}) = ${i} \\text{ dents/tour}.$`,$+=`<br>La roue n$\\degree$1 a donc : $${i}$ dents.`}-1==this.liste_questions.indexOf(e)&&(this.liste_questions.push(e),this.liste_corrections.push($),n++),d++}(0,o.KsX)(this)}}}}]);