{"version":3,"sources":["webpack://mathalea/./node_modules/.pnpm/@cortex-js+math-json@0.1.1/node_modules/@cortex-js/math-json/dist/math-json.js"],"names":["exports","stringToCodepoints$1","str","result","i","length","code","charCodeAt","nextCode","lead","trail","Math","pow","push","ZWJ$1","EMOJI_COMBINATOR","emojiCombinator","REGIONAL_INDICATOR$1","isEmojiCombinator$1","_a","undefined","forEach","x","isRegionalIndicator$1","splitGraphemes$1","test","codePoints","index","next","baseIndex","String","fromCodePoint","slice","Tokenizer","s","this","obeyspaces","pos","regEx","execResult","exec","join","end","match","get","command","peek","hex","parseInt","lastIndexOf","isParam","after","expand$1","lex","args","_b","_c","_d","token","Array","from","done","tokens","param","tokenize","shift","concat","lines","toString","split","stream","sep","line","m","tokenizer","joinLatex","segments","segment","tokensToString","flat","isArray","item","map","DEFINITIONS_INEQUALITIES","name","trigger","infix","associativity","precedence","PARENTHESES","IDENTITY","LATEX_TOKENS","LIST","MISSING","NOTHING","SEQUENCE","SEQUENCE2","ADD","DERIVATIVE","DIVIDE","EXP","INVERSE_FUNCTION","MULTIPLY","NEGATE","POWER","PRIME","ROOT","SQRT","SUBTRACT","COMPLEX_INFINITY","PI","EXPONENTIAL_E","IMAGINARY_I","isNumberObject","expr","Boolean","isSymbolObject","isStringObject","isFunctionObject","getNumberValue","parseFloat","num","getStringValue","substring","getRationalValue","_e","numer","NaN","denom","isAtomic","head","getFunctionName","exponent","getArg","Number","isInteger","getFunctionHead","fn","getSymbolName","sym","getTail","applyArgs","mapArgs","n","getArgCount","max","inferNumericDomain","value","rational","isNaN","SMALL_PRIMES","has","LARGEST_SMALL_PRIME","isFinite","getDictionary","dict","Set","DEFINITIONS_OTHERS","postfix","prefix","superfix","parse","_lhs","scanner","_minPrec","sup","sub","skipSpace","matchRequiredLatexArgument","rhs","matchArguments","serialize","serializer","vars","degree","symbol","requiredLatexArg","getApplyFunctionStyle","_expr","_level","getGroupStyle","getRootStyle","level","getFractionStyle","isSpacingToken","parseSequence","prec","lhs","minPrec","atEnd","matchExpression","serializeSequence","serializeLatex","console","assert","stringValue","DEFINITIONS_CORE","matchfix","originalIndex","couldBeBaseNumber","wrappedInMathTt","maxDigit","digits","radix","onError","seq","matchBalancedExpression","wrapString","separator","closeFence","groupLength","oldDigits","subfix","arguments","_scanner","base","environment","matchTabular","rows","body","rowSep","row","arg1","arg2","order","a","b","lexA","getLex","lexB","valA","getExprValue","Infinity","valB","lenA","getExprLength","lenB","comp","sortedVars","includes","getDegree","v","arg","reduce","acc","deglex","aDeg","bDeg","aDegX","bDegX","aLex","bLex","canonicalOrder","engine","sort","def","getFunctionDefinition","commutative","ungroup","applyInvert","applyNegate","argCount","flatten","flatName","newArgs","flattenInvolution","involution","flattenIdempotent","idempotent","flattenAssociative","associative","canonicalAddForm","filter","canonicalDivideForm","canonicalExpForm","canonicalListForm","rootName","isList","newArg","sequenceHold","getRootDegree","val","getSquareRoots","roots","nonRoots","canonicalMultiplyForm","squareRoots","nonSquareRoots","isNegative","hasNegative","canonicalPowerForm","val1","val2","canonicalNegateForm","fact","canonicalNumberForm","endsWith","canonicalSubtractForm","canonicalRootForm","isValidJSONNumber","fullForm","Object","keys","strippedMetadataForm","fromEntries","entries","keyValue","objectLiteralForm","assign","sortedForm","getVars","canonicalDomainForm","dom","_engine","canonicalForm","format","flattenForm","format$1","forms","form","error","numeratorDenominator","numerator","denominator","exponentVal","serializeRoot","style","wrapShort","parseRoot","matchOptionalLatexArgument","parseMinusSign","parsePlusSign","applyOperator","serializeAdd","argWasNumber","wrap","last","argIsNumber","options","invisiblePlus","term","serializeMultiply","count","multiply","invisibleMultiply","parseFraction","serializeFraction","numerStr","denomStr","serializePower","parseTrig","op","isInverse","primeLevel","parseIntegral","serializeIntegral","_serializer","triggerLength","triggerString","indexLatexDictionary","dic","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","lookahead","Map","record","optionalLatexArg","set","DEFAULT_LATEX_DICTIONARY","algebra","arithmetic","calculus","core","inequalities","other","physics","symbols","trigonometry","DEFAULT_LATEX_NUMBER_OPTIONS","precision","positiveInfinity","negativeInfinity","notANumber","decimalMarker","groupSeparator","exponentProduct","beginExponentMarker","endExponentMarker","notation","truncationMarker","beginRepeatingDigits","endRepeatingDigits","imaginaryNumber","DEFAULT_PARSE_LATEX_OPTIONS","invisibleOperator","parseArgumentsOfUnknownLatexCommands","parseNumbers","promoteUnknownSymbols","promoteUnknownFunctions","invisiblePlusOperator","preserveLatex","DEFAULT_SERIALIZE_LATEX_OPTIONS","replaceLatex","template","replacement","RegExp","replace","Scanner","dictionary","err","before","latexBefore","latexAfter","invisibleOperatorPrecedence","start","open","close","silentError","matchAll","clone","latex","min","latexAhead","kind","defs","lookAhead","target","matched","targets","matchWhile","savedIndex","sign","matchSign","matchDecimalDigits","matchAny","matchSignedInteger","matchExponent","peekDefinition","applyInvisibleOperator","group","matchMatchfixOperator","primary","matchPrimary","tokenCount","matchDefinition","matchUnknownLatexCommand","requiredArgs","optionalArgs","triggerChar","opKind","envName","matchString","matchEnvironmentName","splice","optArgs","reqArgs","matchNumber","matchEnvironment","matchSymbol","supsub","matchSupsub","matchPostfix","decorate","balancedClone","matchOperator","formatFractionalPart","originalLength","substr","offset","j","cycle","times","floor","repeat","startsWith","hasDots","formatExponent","exp","parseFloatToPrecision","toPrecision","serializeNumber","serializeEngineeringNotationNumber","serializeAutoNotationNumber","indexOf","fractionalPart","p","r","f","len","exponentString","y","abs","round","log10","significand","significandString","toExponential","valString","wholePart","serializeHexFloat","trunc","adjustedFractionalPart","digit","getSymbolStyle","serializeMatchfix","serializeOperator","serializeSymbol","Serializer","exprStr","optionalArg","requiredArg","optValue","numericValue","symbolName","serializeDictionary","fnName","JSON","stringify","LatexSyntax","window","warn","opts","domain","call","DOMAIN_PARENT","Anything","Expression","Domain","ParametricDomain","MaybeBoolean","Collection","Dictionary","List","Sequence","Tuple","FiniteSet","InfiniteSet","EmptySet","Symbol","Function","Predicate","LogicalFunction","TranscendentalFunction","AlgebraicFunction","PeriodicFunction","TrigonometricFunction","HyperbolicFunction","MonotonicFunction","StrictMonotonicFunction","ContinuousFunction","DifferentiableFunction","InfinitelyDifferentiableFunction","RationalFunction","PolynomialFunction","QuadraticFunction","LinearFunction","ConstantFunction","ImaginaryNumber","ComplexNumber","ExtendedComplexNumber","ComplexInfinity","NumberZero","NaturalNumber","CompositeNumber","PrimeNumber","Integer","ExtendedInteger","RationalNumber","IrrationalNumber","TranscendentalNumber","AlgebraicNumber","RealNumber","ExtendedRealNumber","ExtendedNaturalNumber","ExtendedRationalNumber","SignedInfinity","Tensor","Scalar","Vector","Row","Column","Matrix","ComplexTensor","RealTensor","IntegerTensor","LogicalTensor","SquareMatrix","MonomialMatrix","TriangularMatrix","UpperTriangularMatrix","LowerTriangularMatrix","PermutationMatrix","OrthogonalMatrix","DiagonalMatrix","IdentityMatrix","ZeroMatrix","SymmetricMatrix","HermitianMatrix","Quaternion","DOMAIN_WIKIDATA","DOMAIN_VALUE","DOMAIN_COUNT","PARAMETRIC_DOMAIN","signatures","evaluate","getDomainsDictionary","Nothing","countable","supersets","parents","wikidata","size","parent","Error","sets","add","delete","values","found","pop","ARITHMETIC_DICTIONARY","Pi","constant","ImaginaryI","ExponentialE","Abs","threadable","Add","rest","Chop","Ceil","Exp","Erf","Erfc","Factorial","Floor","Gamma","LogGamma","Log","Log2","Log10","MachineEpsilon","Multiply","Negate","Power","Round","SignGamma","Sqrt","Root","Subtract","LOGIC_DICTIONARY","True","False","Maybe","And","Or","Not","Equivalent","Implies","Exists","Equal","NotEqual","SETS_DICTIONARY","CartesianProduct","cartesianProduct","Intersection","intersection","Complement","Union","union","SymmetricDifference","Subset","subset","SubsetEqual","subsetEqual","SetMinus","setMinus","_rhs","_args","COLLECTIONS_DICTIONARY","KeyValue","Keys","Entries","TRIGONOMETRY_DICTIONARY","Arcosh","Arccos","Arcsin","Arctan","Arctan2","Arsinh","Artanh","Cos","Degrees","FromPolarCoordinates","Haversine","Hypot","InverseHaversine","Sin","Sinh","Tan","Tanh","ToPolarCoordinates","isSetDefinition","isSymbolDefinition","isFunctionDefinition","isCollectionDefinition","getDefaultDictionaries","categories","category","DICTIONARY","Apply","About","BaseForm","Block","Evaluate","Parentheses","pure","Head","Lambda","hold","Latex","Tail","unit","compileDictionary","entryName","normalizeDefinition","signal","severity","message","context","parentScope","validateDictionary","warning","isSubsetOf","collectionDef","iterable","iterator","indexable","at","functionDef","scope","additive","multiplicative","outtative","sig","inferredDomain","setParentsToString","getSetDefinition","compare","async","evaluateWithEngine","shouldContinueExecution","NUMERICAL_TOLERANCE","chop","CortexError","errorSignal","same","lhSymbol","lhsDict","rhsDict","key","lhsHead","rhsHead","lhsArgCount","ComputeEngine","dicts","dictionaries","getDictionaries","pushScope","sigs","timeLimit","memoryLimit","recursionLimit","warnings","deadline","g","performance","now","varsRecursive","lhsFnName","some","every","rhsFnName","rhsDomainName","rhsVal","rhsDef","lhsDomainName","lhsDef","equal","isZero","isPositive","isNonNegative","_dom","_pattern","_target","getSymbolDefinition","LINEBREAK","terminal","joinLines","grey","red","highlightBackground","Origin","source","url","_lines","_lineOffsets","offsets","text","isLineStart","ch","lineOffsets","low","high","mid","column","getLinecol","around","sourceAround","linesAbove","linesBelow","hasColumn","numberMaxWidth","gutter","markerLine","markerSpacing","chalkGutter","chalkMarker","chalkMessage","LINEBREAK_CHARACTER","PATTERN_WHITE_SPACE","PATTERN_SYNTAX","expand","IDENTIFIER_CONTINUE_PROHIBITED","IDENTIFIER_START_PROHIBITED","WHITE_SPACE","CONFUSABLE_CHARACTERS","INVISIBLE_CHARS","ESCAPED_CHARS","REVERSED_ESCAPED_CHARS","HEX_DIGITS","DIGITS","reverse","table","k","ks","entry","isLinebreak","c","isInlineSpace","isWhitespace","isBreak","isIdentifierContinueProhibited","isIdentifierStartProhibited","isInvisible","codePointLength","FatalParsingError","msg","super","Parser","rules","_offset","_trace","codePointAt","rule","fromOffset","skipTo","hasRule","ignore","Result","failure","parser","_parser","_range","isError","_diagnostics","_value","fixits","range","skipUntilString","pattern","cps","description","parseCodepoint","success","codepoint","combine","results","errors","maxOffset","minOffset","res","copyDiagnostics","isSuccess","parseString","literal","sequence","cs","whitespaces","isFirst","parseWhitespace","isFailure","trace","either","something","isEmpty","maybe","must","inMsg","retryCount","errorAt","eof","between","atString","manySeparatedBetween","operatorSequence","ops","termDesc","_data","assoc","parseWithPrecedence","parseExponent","applyExponent","parseBinaryNumber","frac","fracPart","parseHexadecimalNumber","parseFloatingPointNumber","parseNumber","parseSignedNumber","numResult","errorFrom","skipInlineSpaces","skipUntilLinebreak","skipLinebreak","parseLineComment","parseBlockComment","ignoreUntil","parseShebang","parseEscapeSequence","escapeChar","invalidChar","codepointString","toUpperCase","parseExtendedString","prefixLength","parseInterpolation","expression","startExpr","parseSingleLineString","interpolation","escape","atLinebreak","parseMultilineString","validPrefix","resultValue","lastItem","parseIdentifier","parseVerbatimIdentifier","id","escSequence","Grammar","ruleDescription","grammar","expressionToString","strValue","numValue","JSON_ESCAPE_CHARS","0","escapeJsonString","exprOrigin","sourceOffsets","analyzeErrors","parseCortex","origin","diagnostics","signalOrigin","stringToCodepoints","string","today","Date","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","log","globalThis","process","env","navigator","litResult","previousString","expressions","exprs","_shebang","_eof","ZWJ","REGIONAL_INDICATOR","isEmojiCombinator","isRegionalIndicator","splitGraphemes","FormattingBlock","fmt","EmptyBlock","TextBlock","nextCol","margin","cost","softMargin","LineBlock","blocks","debug","fragments","block","StackBlock","indent","linebreak","indentChars","WrapBlock","solution","ChoiceBlock","minCost","choice","Formatter","indentChar","commentLinebreak","flowLinebreak","callLinebreak","argLinebreak","indentCharWidth","indentWidth","aroundInfixOperator","aroundRelationalOperator","afterSeparator","inBlocks","normalizedBlocks","mergedBlocks","previousText","fencedList","fence","openBlock","closeBlock","sepBlocks","inlineSepBlocks","stack","RESERVED_WORDS","NUMBER_FORMATTING_OPTIONS","serializeCortex","fancySymbols","serializeExpression","serializeString","comment","serializeComment","serializeFunction","serializeGenericFunction","symName","escapeSymbol","keyValues","escapeString","relationalOperator","OPERATORS","NotElementOf","fancySymbol","relational","ElementOf","LessEqual","GreaterEqual","Less","Greater","Assign","Same","Divide","unary","FUNCTIONS","sv","fencedBlock","opSymbol","argHead","argOp","operands","list","infixOperator","escapeInvisibleCharacter","graphemes","needVerbatim","defineProperty","factory"],"mappings":"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","file":"js/420.c5e1b30bdea43292b568.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MathJson = {}));\n}(this, (function (exports) { 'use strict';\n\n  function stringToCodepoints$1(str) {\r\n      const result = [];\r\n      for (let i = 0; i < str.length; i++) {\r\n          let code = str.charCodeAt(i);\r\n          if (code === 0x0d && str.charCodeAt(i + 1) === 0x0a) {\r\n              code = 0x0a;\r\n              i++;\r\n          }\r\n          if (code === 0x0d || code === 0x0c)\r\n              code = 0x0a;\r\n          if (code === 0x00)\r\n              code = 0xfffd;\r\n          if (code >= 0xd800 && code <= 0xdbff) {\r\n              const nextCode = str.charCodeAt(i + 1);\r\n              if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {\r\n                  const lead = code - 0xd800;\r\n                  const trail = nextCode - 0xdc00;\r\n                  code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\r\n                  i++;\r\n              }\r\n          }\r\n          result.push(code);\r\n      }\r\n      return result;\r\n  }\r\n  const ZWJ$1 = 0x200d;\r\n  const EMOJI_COMBINATOR = [\r\n      [ZWJ$1, 1],\r\n      [0xfe0e, 2],\r\n      [0x1f3fb, 5],\r\n      [0x1f9b0, 4],\r\n      [0xe0020, 96],\r\n  ];\r\n  let emojiCombinator;\r\n  const REGIONAL_INDICATOR$1 = [0x1f1e6, 0x1f1ff];\r\n  function isEmojiCombinator$1(code) {\r\n      var _a;\r\n      if (emojiCombinator === undefined) {\r\n          emojiCombinator = {};\r\n          EMOJI_COMBINATOR.forEach((x) => {\r\n              for (let i = x[0]; i <= x[0] + x[1] - 1; i++) {\r\n                  emojiCombinator[i] = true;\r\n              }\r\n          });\r\n      }\r\n      return (_a = emojiCombinator[code]) !== null && _a !== void 0 ? _a : false;\r\n  }\r\n  function isRegionalIndicator$1(code) {\r\n      return code >= REGIONAL_INDICATOR$1[0] && code <= REGIONAL_INDICATOR$1[1];\r\n  }\r\n  function splitGraphemes$1(str) {\r\n      if (/^[\\x20-\\xFF]*$/.test(str))\r\n          return str;\r\n      const result = [];\r\n      const codePoints = stringToCodepoints$1(str);\r\n      let index = 0;\r\n      while (index < codePoints.length) {\r\n          const code = codePoints[index++];\r\n          const next = codePoints[index];\r\n          if (next === ZWJ$1) {\r\n              const baseIndex = index - 1;\r\n              index += 2;\r\n              while (codePoints[index] === ZWJ$1) {\r\n                  index += 2;\r\n              }\r\n              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex + 1)));\r\n          }\r\n          else if (isEmojiCombinator$1(next)) {\r\n              const baseIndex = index - 1;\r\n              while (isEmojiCombinator$1(codePoints[index])) {\r\n                  index += codePoints[index] === ZWJ$1 ? 2 : 1;\r\n              }\r\n              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex)));\r\n          }\r\n          else if (isRegionalIndicator$1(code)) {\r\n              index += 1;\r\n              result.push(String.fromCodePoint(...codePoints.slice(index - 2, 2)));\r\n          }\r\n          else {\r\n              result.push(String.fromCodePoint(code));\r\n          }\r\n      }\r\n      return result;\r\n  }\n\n  class Tokenizer {\r\n      constructor(s) {\r\n          this.obeyspaces = false;\r\n          this.s = splitGraphemes$1(s);\r\n          this.pos = 0;\r\n      }\r\n      end() {\r\n          return this.pos >= this.s.length;\r\n      }\r\n      get() {\r\n          return this.pos < this.s.length ? this.s[this.pos++] : '';\r\n      }\r\n      peek() {\r\n          return this.s[this.pos];\r\n      }\r\n      match(regEx) {\r\n          let execResult;\r\n          if (typeof this.s === 'string') {\r\n              execResult = regEx.exec(this.s.slice(this.pos));\r\n          }\r\n          else {\r\n              execResult = regEx.exec(this.s.slice(this.pos).join(''));\r\n          }\r\n          if (execResult === null || execResult === void 0 ? void 0 : execResult[0]) {\r\n              this.pos += execResult[0].length;\r\n              return execResult[0];\r\n          }\r\n          return null;\r\n      }\r\n      next() {\r\n          if (this.end())\r\n              return null;\r\n          if (!this.obeyspaces && this.match(/^[ \\f\\n\\r\\t\\v\\xA0\\u2028\\u2029]+/)) {\r\n              return '<space>';\r\n          }\r\n          else if (this.obeyspaces &&\r\n              this.match(/^[ \\f\\n\\r\\t\\v\\xA0\\u2028\\u2029]/)) {\r\n              return '<space>';\r\n          }\r\n          const next = this.get();\r\n          if (next === '\\\\') {\r\n              if (!this.end()) {\r\n                  let command = this.match(/^[a-zA-Z*]+/);\r\n                  if (command) {\r\n                      this.match(/^[ \\f\\n\\r\\t\\v\\xA0\\u2028\\u2029]*/);\r\n                  }\r\n                  else {\r\n                      command = this.get();\r\n                      if (command === ' ') {\r\n                          return '<space>';\r\n                      }\r\n                  }\r\n                  return '\\\\' + command;\r\n              }\r\n          }\r\n          else if (next === '{') {\r\n              return '<{>';\r\n          }\r\n          else if (next === '}') {\r\n              return '<}>';\r\n          }\r\n          else if (next === '^') {\r\n              if (this.peek() === '^') {\r\n                  this.get();\r\n                  const hex = this.match(/^(\\^(\\^(\\^(\\^[0-9a-f])?[0-9a-f])?[0-9a-f])?[0-9a-f])?[0-9a-f][0-9a-f]/);\r\n                  if (hex) {\r\n                      return String.fromCodePoint(parseInt(hex.slice(hex.lastIndexOf('^') + 1), 16));\r\n                  }\r\n              }\r\n              return next;\r\n          }\r\n          else if (next === '#') {\r\n              if (!this.end()) {\r\n                  let isParam = false;\r\n                  if (/[0-9?]/.test(this.peek())) {\r\n                      isParam = true;\r\n                      if (this.pos + 1 < this.s.length) {\r\n                          const after = this.s[this.pos + 1];\r\n                          isParam = /[^0-9A-Za-z]/.test(after);\r\n                      }\r\n                  }\r\n                  if (isParam) {\r\n                      return '#' + this.get();\r\n                  }\r\n                  return '#';\r\n              }\r\n          }\r\n          else if (next === '$') {\r\n              if (this.peek() === '$') {\r\n                  this.get();\r\n                  return '<$$>';\r\n              }\r\n              return '<$>';\r\n          }\r\n          return next;\r\n      }\r\n  }\r\n  function expand$1(lex, args) {\r\n      var _a, _b, _c, _d;\r\n      let result = [];\r\n      let token = lex.next();\r\n      if (token) {\r\n          if (token === '\\\\relax') ;\r\n          else if (token === '\\\\noexpand') {\r\n              token = lex.next();\r\n              if (token) {\r\n                  result.push(token);\r\n              }\r\n          }\r\n          else if (token === '\\\\obeyspaces') {\r\n              lex.obeyspaces = true;\r\n          }\r\n          else if (token === '\\\\space' || token === '~') {\r\n              result.push('<space>');\r\n          }\r\n          else if (token === '\\\\bgroup') {\r\n              result.push('<{>');\r\n          }\r\n          else if (token === '\\\\egroup') {\r\n              result.push('<}>');\r\n          }\r\n          else if (token === '\\\\string') {\r\n              token = lex.next();\r\n              if (token) {\r\n                  if (token[0] === '\\\\') {\r\n                      Array.from(token).forEach((x) => result.push(x === '\\\\' ? '\\\\backslash' : x));\r\n                  }\r\n                  else if (token === '<{>') {\r\n                      result.push('\\\\{');\r\n                  }\r\n                  else if (token === '<space>') {\r\n                      result.push('~');\r\n                  }\r\n                  else if (token === '<}>') {\r\n                      result.push('\\\\}');\r\n                  }\r\n              }\r\n          }\r\n          else if (token === '\\\\csname') {\r\n              while (lex.peek() === '<space>') {\r\n                  lex.next();\r\n              }\r\n              let command = '';\r\n              let done = false;\r\n              let tokens = [];\r\n              do {\r\n                  if (tokens.length === 0) {\r\n                      if (/^#[0-9?]$/.test(lex.peek())) {\r\n                          const param = lex.get().slice(1);\r\n                          tokens = tokenize((_b = (_a = args === null || args === void 0 ? void 0 : args[param]) !== null && _a !== void 0 ? _a : args === null || args === void 0 ? void 0 : args['?']) !== null && _b !== void 0 ? _b : '\\\\placeholder{}', args);\r\n                          token = tokens[0];\r\n                      }\r\n                      else {\r\n                          token = lex.next();\r\n                          tokens = token ? [token] : [];\r\n                      }\r\n                  }\r\n                  done = tokens.length === 0;\r\n                  if (!done && token === '\\\\endcsname') {\r\n                      done = true;\r\n                      tokens.shift();\r\n                  }\r\n                  if (!done) {\r\n                      done =\r\n                          token === '<$>' ||\r\n                              token === '<$$>' ||\r\n                              token === '<{>' ||\r\n                              token === '<}>' ||\r\n                              (token.length > 1 && token[0] === '\\\\');\r\n                  }\r\n                  if (!done) {\r\n                      command += tokens.shift();\r\n                  }\r\n              } while (!done);\r\n              if (command) {\r\n                  result.push('\\\\' + command);\r\n              }\r\n              result = result.concat(tokens);\r\n          }\r\n          else if (token === '\\\\endcsname') ;\r\n          else if (token.length > 1 && token[0] === '#') {\r\n              const param = token.slice(1);\r\n              result = result.concat(tokenize((_d = (_c = args === null || args === void 0 ? void 0 : args[param]) !== null && _c !== void 0 ? _c : args === null || args === void 0 ? void 0 : args['?']) !== null && _d !== void 0 ? _d : '\\\\placeholder{}', args));\r\n          }\r\n          else {\r\n              result.push(token);\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  function tokenize(s, args) {\r\n      const lines = s.toString().split(/\\r?\\n/);\r\n      let stream = '';\r\n      let sep = '';\r\n      for (const line of lines) {\r\n          stream += sep;\r\n          sep = ' ';\r\n          const m = line.match(/((?:\\\\%)|[^%])*/);\r\n          if (m !== null)\r\n              stream += m[0];\r\n      }\r\n      const tokenizer = new Tokenizer(stream);\r\n      let result = [];\r\n      do {\r\n          result = result.concat(expand$1(tokenizer, args));\r\n      } while (!tokenizer.end());\r\n      return result;\r\n  }\r\n  function joinLatex(segments) {\r\n      let sep = '';\r\n      let result = '';\r\n      for (const segment of segments) {\r\n          if (segment) {\r\n              if (/[a-zA-Z*]/.test(segment[0])) {\r\n                  result += sep;\r\n              }\r\n              if (/\\\\[a-zA-Z]+\\*?$/.test(segment)) {\r\n                  sep = ' ';\r\n              }\r\n              else {\r\n                  sep = '';\r\n              }\r\n              result += segment;\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  function tokensToString(tokens) {\r\n      let flat = [];\r\n      if (Array.isArray(tokens)) {\r\n          for (const item of tokens) {\r\n              if (Array.isArray(item)) {\r\n                  flat = [...flat, ...item];\r\n              }\r\n              else {\r\n                  flat.push(item);\r\n              }\r\n          }\r\n      }\r\n      else {\r\n          flat = [tokens];\r\n      }\r\n      const result = joinLatex(flat.map((token) => {\r\n          var _a;\r\n          return ((_a = {\r\n              '<space>': ' ',\r\n              '<$$>': '$$',\r\n              '<$>': '$',\r\n              '<{>': '{',\r\n              '<}>': '}',\r\n          }[token]) !== null && _a !== void 0 ? _a : token);\r\n      }));\r\n      return result;\r\n  }\n\n  const DEFINITIONS_INEQUALITIES = [\r\n      {\r\n          name: 'NotLess',\r\n          trigger: { infix: ['!', '<'] },\r\n          associativity: 'right',\r\n          precedence: 246,\r\n      },\r\n      {\r\n          name: 'NotLess',\r\n          trigger: { infix: '\\\\nless' },\r\n          associativity: 'right',\r\n          precedence: 246,\r\n      },\r\n      {\r\n          name: 'Less',\r\n          trigger: { infix: '<' },\r\n          associativity: 'right',\r\n          precedence: 245,\r\n      },\r\n      {\r\n          name: 'Less',\r\n          trigger: { infix: '\\\\lt' },\r\n          associativity: 'right',\r\n          precedence: 245,\r\n      },\r\n      {\r\n          name: 'LessEqual',\r\n          trigger: { infix: ['<', '='] },\r\n          associativity: 'right',\r\n          precedence: 241,\r\n      },\r\n      {\r\n          name: 'LessEqual',\r\n          trigger: { infix: '\\\\le' },\r\n          associativity: 'right',\r\n          precedence: 241,\r\n      },\r\n      {\r\n          name: 'LessEqual',\r\n          trigger: { infix: '\\\\leq' },\r\n          associativity: 'right',\r\n          precedence: 241,\r\n      },\r\n      {\r\n          name: 'LessEqual',\r\n          trigger: { infix: '\\\\leqslant' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'LessNotEqual',\r\n          trigger: { infix: '\\\\lneqq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotLessNotEqual',\r\n          trigger: { infix: '\\\\nleqq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'LessOverEqual',\r\n          trigger: { infix: '\\\\leqq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'GreaterOverEqual',\r\n          trigger: { infix: '\\\\geqq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'Equal',\r\n          trigger: { infix: '=' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'StarEqual',\r\n          trigger: { infix: ['*', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'StarEqual',\r\n          trigger: { infix: ['\\\\star', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'PlusEqual',\r\n          trigger: { infix: ['+', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'MinusEqual',\r\n          trigger: { infix: ['-', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'SlashEqual',\r\n          trigger: { infix: ['/', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'EqualEqual',\r\n          trigger: { infix: ['=', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'EqualEqualEqual',\r\n          trigger: { infix: ['=', '=', '='] },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'TildeFullEqual',\r\n          trigger: { infix: '\\\\cong' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotTildeFullEqual',\r\n          trigger: { infix: '\\\\ncong' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Assign',\r\n          trigger: { infix: [':', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Assign',\r\n          trigger: { infix: '\\\\coloneq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Approx',\r\n          trigger: { infix: '\\\\approx' },\r\n          associativity: 'right',\r\n          precedence: 247,\r\n      },\r\n      {\r\n          name: 'NotApprox',\r\n          trigger: { infix: '\\\\approx' },\r\n          associativity: 'right',\r\n          precedence: 247,\r\n      },\r\n      {\r\n          name: 'ApproxEqual',\r\n          trigger: { infix: '\\\\approxeq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotApproxEqual',\r\n          trigger: { infix: ['!', '\\\\approxeq'] },\r\n          associativity: 'right',\r\n          precedence: 250,\r\n      },\r\n      {\r\n          name: 'NotEqual',\r\n          trigger: { infix: '\\\\ne' },\r\n          associativity: 'right',\r\n          precedence: 255,\r\n      },\r\n      {\r\n          name: 'Unequal',\r\n          trigger: { infix: ['!', '='] },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'GreaterEqual',\r\n          trigger: { infix: '\\\\ge' },\r\n          associativity: 'right',\r\n          precedence: 242,\r\n      },\r\n      {\r\n          name: 'GreaterEqual',\r\n          trigger: { infix: '\\\\geq' },\r\n          associativity: 'right',\r\n          precedence: 242,\r\n      },\r\n      {\r\n          name: 'GreaterEqual',\r\n          trigger: { infix: ['>', '='] },\r\n          associativity: 'right',\r\n          precedence: 243,\r\n      },\r\n      {\r\n          name: 'GreaterEqual',\r\n          trigger: { infix: '\\\\geqslant' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'GreaterNotEqual',\r\n          trigger: { infix: '\\\\gneqq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotGreaterNotEqual',\r\n          trigger: { infix: '\\\\ngeqq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Greater',\r\n          trigger: { infix: '>' },\r\n          associativity: 'right',\r\n          precedence: 245,\r\n      },\r\n      {\r\n          name: 'Greater',\r\n          trigger: { infix: '\\\\gt' },\r\n          associativity: 'right',\r\n          precedence: 245,\r\n      },\r\n      {\r\n          name: 'NotGreater',\r\n          trigger: { infix: '\\\\ngtr' },\r\n          associativity: 'right',\r\n          precedence: 244,\r\n      },\r\n      {\r\n          name: 'NotGreater',\r\n          trigger: { infix: ['!', '>'] },\r\n          associativity: 'right',\r\n          precedence: 244,\r\n      },\r\n      {\r\n          name: 'RingEqual',\r\n          trigger: { infix: '\\\\circeq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'TriangleEqual',\r\n          trigger: { infix: '\\\\triangleq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'DotEqual',\r\n          trigger: { infix: '\\\\doteq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'DotEqualDot',\r\n          trigger: { infix: '\\\\doteqdot' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'FallingDotEqual',\r\n          trigger: { infix: '\\\\fallingdotseq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'RisingDotEqual',\r\n          trigger: { infix: '\\\\fallingdotseq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'QuestionEqual',\r\n          trigger: { infix: '\\\\questeq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Equivalent',\r\n          trigger: { infix: '\\\\equiv' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'MuchLess',\r\n          trigger: { infix: '\\\\ll' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'MuchGreater',\r\n          trigger: { infix: '\\\\gg' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Precedes',\r\n          trigger: { infix: '\\\\prec' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'Succeeds',\r\n          trigger: { infix: '\\\\succ' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'PrecedesEqual',\r\n          trigger: { infix: '\\\\preccurlyeq' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'SucceedsEqual',\r\n          trigger: { infix: '\\\\curlyeqprec' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotPrecedes',\r\n          trigger: { infix: '\\\\nprec' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'NotSucceeds',\r\n          trigger: { infix: '\\\\nsucc' },\r\n          associativity: 'right',\r\n          precedence: 260,\r\n      },\r\n      {\r\n          name: 'ElementOf',\r\n          trigger: { infix: '\\\\in' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'NotElementOf',\r\n          trigger: { infix: '\\\\notin' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'Contains',\r\n          trigger: { infix: '\\\\ni' },\r\n          associativity: 'right',\r\n          precedence: 160,\r\n      },\r\n      {\r\n          name: 'Subset',\r\n          trigger: { infix: '\\\\subset' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SquareSubset',\r\n          trigger: { infix: '\\\\sqsubset' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'SquareSubsetEqal',\r\n          trigger: { infix: '\\\\sqsubseteq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'Superset',\r\n          trigger: { infix: '\\\\supset' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SquareSuperset',\r\n          trigger: { infix: '\\\\sqsupset' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'SquareSupersetEuqal',\r\n          trigger: { infix: '\\\\sqsupseteq' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'NotSubset',\r\n          trigger: { infix: '\\\\nsubset' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'NotSuperset',\r\n          trigger: { infix: '\\\\nsupset' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SubsetEqual',\r\n          trigger: { infix: '\\\\subseteq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SupersetEqual',\r\n          trigger: { infix: '\\\\supseteq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'NotSubsetNotEqual',\r\n          trigger: { infix: '\\\\nsubseteq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'NotSupersetNotEqual',\r\n          trigger: { infix: '\\\\nsupseteq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SubsetNotEqual',\r\n          trigger: { infix: '\\\\subsetneq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SupersetNotEqual',\r\n          trigger: { infix: '\\\\supsetneq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SubsetNotEqual',\r\n          trigger: { infix: '\\\\varsupsetneqq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'SupersetNotEqual',\r\n          trigger: { infix: '\\\\varsupsetneq' },\r\n          associativity: 'right',\r\n          precedence: 240,\r\n      },\r\n      {\r\n          name: 'Between',\r\n          trigger: { infix: '\\\\between' },\r\n          associativity: 'right',\r\n          precedence: 265,\r\n      },\r\n  ];\n\n  const PARENTHESES = 'Parentheses';\r\n  const IDENTITY = 'Identity';\r\n  const LATEX_TOKENS = 'LatexTokens';\r\n  const LIST = 'List';\r\n  const MISSING = 'Missing';\r\n  const NOTHING = 'Nothing';\r\n  const SEQUENCE = 'Sequence';\r\n  const SEQUENCE2 = 'Sequence2';\r\n  const ADD = 'Add';\r\n  const DERIVATIVE = 'Derivative';\r\n  const DIVIDE = 'Divide';\r\n  const EXP = 'Exp';\r\n  const INVERSE_FUNCTION = 'InverseFunction';\r\n  const MULTIPLY = 'Multiply';\r\n  const NEGATE = 'Negate';\r\n  const POWER = 'Power';\r\n  const PRIME = 'Prime';\r\n  const ROOT = 'Root';\r\n  const SQRT = 'Sqrt';\r\n  const SUBTRACT = 'Subtract';\r\n  const COMPLEX_INFINITY = 'ComplexInfinity';\r\n  const PI = 'Pi';\r\n  const EXPONENTIAL_E = 'ExponentialE';\r\n  const IMAGINARY_I = 'ImaginaryI';\r\n  function isNumberObject(expr) {\r\n      return Boolean(expr) && typeof expr === 'object' && 'num' in expr;\r\n  }\r\n  function isSymbolObject(expr) {\r\n      return Boolean(expr) && typeof expr === 'object' && 'sym' in expr;\r\n  }\r\n  function isStringObject(expr) {\r\n      return Boolean(expr) && typeof expr === 'object' && 'str' in expr;\r\n  }\r\n  function isFunctionObject(expr) {\r\n      return Boolean(expr) && typeof expr === 'object' && 'fn' in expr;\r\n  }\r\n  function getNumberValue(expr) {\r\n      if (typeof expr === 'number')\r\n          return expr;\r\n      if (isNumberObject(expr))\r\n          return parseFloat(expr.num);\r\n      return null;\r\n  }\r\n  function getStringValue(expr) {\r\n      if (typeof expr === 'object' && 'str' in expr)\r\n          return expr.str;\r\n      if (typeof expr !== 'string')\r\n          return null;\r\n      if (expr.length < 2)\r\n          return null;\r\n      if (expr[0] !== \"'\" || expr[expr.length - 1] !== \"'\")\r\n          return null;\r\n      return expr.substring(1, expr.length - 1);\r\n  }\r\n  function getRationalValue(expr) {\r\n      var _a, _b, _c, _d, _e;\r\n      let numer = NaN;\r\n      let denom = NaN;\r\n      if (typeof expr === 'number') {\r\n          numer = expr;\r\n          denom = 1;\r\n      }\r\n      else if (isNumberObject(expr)) {\r\n          numer = (_a = getNumberValue(expr)) !== null && _a !== void 0 ? _a : NaN;\r\n          denom = 1;\r\n      }\r\n      else if (isAtomic(expr)) {\r\n          return null;\r\n      }\r\n      else {\r\n          const head = getFunctionName(expr);\r\n          if (head === POWER) {\r\n              const exponent = getNumberValue(getArg(expr, 2));\r\n              if (exponent === 1) {\r\n                  numer = getNumberValue(getArg(expr, 1));\r\n                  denom = 1;\r\n              }\r\n              else if (exponent === -1) {\r\n                  numer = 1;\r\n                  denom = getNumberValue(getArg(expr, 1));\r\n              }\r\n              else {\r\n                  return null;\r\n              }\r\n          }\r\n          else if (head === DIVIDE) {\r\n              numer = (_b = getNumberValue(getArg(expr, 1))) !== null && _b !== void 0 ? _b : NaN;\r\n              denom = (_c = getNumberValue(getArg(expr, 2))) !== null && _c !== void 0 ? _c : NaN;\r\n          }\r\n          else if (head === MULTIPLY &&\r\n              getFunctionName(getArg(expr, 2)) === POWER &&\r\n              getNumberValue(getArg(getArg(expr, 2), 2)) === -1) {\r\n              numer = (_d = getNumberValue(getArg(expr, 1))) !== null && _d !== void 0 ? _d : NaN;\r\n              denom = (_e = getNumberValue(getArg(getArg(expr, 2), 1))) !== null && _e !== void 0 ? _e : NaN;\r\n          }\r\n      }\r\n      if (Number.isInteger(numer) && Number.isInteger(denom)) {\r\n          if (denom < 0) {\r\n              denom = -denom;\r\n              numer = -numer;\r\n          }\r\n          return [numer, denom];\r\n      }\r\n      return null;\r\n  }\r\n  function getFunctionHead(expr) {\r\n      if (Array.isArray(expr))\r\n          return expr[0];\r\n      if (isFunctionObject(expr))\r\n          return expr.fn[0];\r\n      return null;\r\n  }\r\n  function isAtomic(expr) {\r\n      return (expr === null ||\r\n          (!Array.isArray(expr) && (typeof expr !== 'object' || !('fn' in expr))));\r\n  }\r\n  function getFunctionName(expr) {\r\n      const head = getFunctionHead(expr);\r\n      if (typeof head === 'string')\r\n          return head;\r\n      return '';\r\n  }\r\n  function getSymbolName(expr) {\r\n      if (typeof expr === 'string') {\r\n          if (expr.length >= 2 && expr[0] === \"'\" && expr[expr.length - 1] === \"'\") {\r\n              return null;\r\n          }\r\n          return expr;\r\n      }\r\n      if (isSymbolObject(expr))\r\n          return expr.sym;\r\n      return null;\r\n  }\r\n  function getTail(expr) {\r\n      if (Array.isArray(expr)) {\r\n          return expr.slice(1);\r\n      }\r\n      if (isFunctionObject(expr)) {\r\n          return expr.fn.slice(1);\r\n      }\r\n      return [];\r\n  }\r\n  function applyArgs(expr, fn) {\r\n      if (Array.isArray(expr)) {\r\n          return expr.map((x, i) => (i === 0 ? x : fn(x)));\r\n      }\r\n      if (isFunctionObject(expr)) {\r\n          return expr.fn.map((x, i) => (i === 0 ? x : fn(x)));\r\n      }\r\n      return expr;\r\n  }\r\n  function mapArgs(expr, fn) {\r\n      let args = null;\r\n      if (Array.isArray(expr))\r\n          args = expr;\r\n      if (isFunctionObject(expr))\r\n          args = expr.fn;\r\n      if (args === null)\r\n          return [];\r\n      let i = 1;\r\n      const result = [];\r\n      while (i < args.length) {\r\n          result.push(fn(args[i]));\r\n          i += 1;\r\n      }\r\n      return result;\r\n  }\r\n  function getArg(expr, n) {\r\n      if (Array.isArray(expr)) {\r\n          return expr[n];\r\n      }\r\n      if (isFunctionObject(expr)) {\r\n          return expr.fn[n];\r\n      }\r\n      return null;\r\n  }\r\n  function getArgCount(expr) {\r\n      if (Array.isArray(expr)) {\r\n          return Math.max(0, expr.length - 1);\r\n      }\r\n      if (isFunctionObject(expr)) {\r\n          return Math.max(0, expr.fn.length - 1);\r\n      }\r\n      return 0;\r\n  }\r\n  function inferNumericDomain(value) {\r\n      var _a;\r\n      const rational = getRationalValue(value);\r\n      if (rational !== null) {\r\n          const [numer, denom] = rational;\r\n          if (!Number.isNaN(numer) && !Number.isNaN(denom)) {\r\n              if (numer === 0)\r\n                  return 'NumberZero';\r\n              if (denom !== 1)\r\n                  return 'RationalNumber';\r\n              if (SMALL_PRIMES.has(numer))\r\n                  return 'PrimeNumber';\r\n              if (numer >= 1 && numer < LARGEST_SMALL_PRIME)\r\n                  return 'CompositeNumber';\r\n              if (numer > 0)\r\n                  return 'NaturalNumber';\r\n              return 'Integer';\r\n          }\r\n      }\r\n      if (value === COMPLEX_INFINITY)\r\n          return 'ComplexInfinity';\r\n      const head = getFunctionName(value);\r\n      if (head === POWER) {\r\n          if (getFunctionName(getArg(value, 2)) === DIVIDE) {\r\n              if (getArg(getArg(value, 2), 1) === 1 &&\r\n                  getArg(getArg(value, 2), 2) === 2) {\r\n                  if (SMALL_PRIMES.has(getNumberValue(getArg(value, 1)))) {\r\n                      return 'IrrationalNumber';\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      if (!Number.isFinite((_a = getNumberValue(value)) !== null && _a !== void 0 ? _a : NaN))\r\n          return 'SignedInfinity';\r\n      return 'RealNumber';\r\n  }\r\n  function getDictionary(expr) {\r\n      if (typeof expr === 'object' && 'dict' in expr)\r\n          return expr.dict;\r\n      return null;\r\n  }\r\n  const SMALL_PRIMES = new Set([\r\n      2,\r\n      3,\r\n      5,\r\n      7,\r\n      11,\r\n      13,\r\n      17,\r\n      19,\r\n      23,\r\n      29,\r\n      31,\r\n      37,\r\n      41,\r\n      43,\r\n      47,\r\n      53,\r\n      59,\r\n      61,\r\n      67,\r\n      71,\r\n      73,\r\n      79,\r\n      83,\r\n      89,\r\n      97,\r\n      101,\r\n      103,\r\n      107,\r\n      109,\r\n      113,\r\n      127,\r\n      131,\r\n      137,\r\n      139,\r\n      149,\r\n      151,\r\n      157,\r\n      163,\r\n      167,\r\n      173,\r\n      179,\r\n      181,\r\n      191,\r\n      193,\r\n      197,\r\n      199,\r\n      211,\r\n      223,\r\n      227,\r\n      229,\r\n      233,\r\n      239,\r\n      241,\r\n      251,\r\n      257,\r\n      263,\r\n      269,\r\n      271,\r\n      277,\r\n      281,\r\n      283,\r\n      293,\r\n      307,\r\n      311,\r\n      313,\r\n      317,\r\n      331,\r\n      337,\r\n      347,\r\n      349,\r\n      353,\r\n      359,\r\n      367,\r\n      373,\r\n      379,\r\n      383,\r\n      389,\r\n      397,\r\n      401,\r\n      409,\r\n      419,\r\n      421,\r\n      431,\r\n      433,\r\n      439,\r\n      443,\r\n      449,\r\n      457,\r\n      461,\r\n      463,\r\n      467,\r\n      479,\r\n      487,\r\n      491,\r\n      499,\r\n      503,\r\n      509,\r\n      521,\r\n      523,\r\n      541,\r\n      547,\r\n      557,\r\n      563,\r\n      569,\r\n      571,\r\n      577,\r\n      587,\r\n      593,\r\n      599,\r\n      601,\r\n      607,\r\n      613,\r\n      617,\r\n      619,\r\n      631,\r\n      641,\r\n      643,\r\n      647,\r\n      653,\r\n      659,\r\n      661,\r\n      673,\r\n      677,\r\n      683,\r\n      691,\r\n      701,\r\n      709,\r\n      719,\r\n      727,\r\n      733,\r\n      739,\r\n      743,\r\n      751,\r\n      757,\r\n      761,\r\n      769,\r\n      773,\r\n      787,\r\n      797,\r\n      809,\r\n      811,\r\n      821,\r\n      823,\r\n      827,\r\n      829,\r\n      839,\r\n      853,\r\n      857,\r\n      859,\r\n      863,\r\n      877,\r\n      881,\r\n      883,\r\n      887,\r\n      907,\r\n      911,\r\n      919,\r\n      929,\r\n      937,\r\n      941,\r\n      947,\r\n      953,\r\n      967,\r\n      971,\r\n      977,\r\n      983,\r\n      991,\r\n      997,\r\n      1009,\r\n      1013,\r\n      1019,\r\n      1021,\r\n      1031,\r\n      1033,\r\n      1039,\r\n      1049,\r\n      1051,\r\n      1061,\r\n      1063,\r\n      1069,\r\n      1087,\r\n      1091,\r\n      1093,\r\n      1097,\r\n      1103,\r\n      1109,\r\n      1117,\r\n      1123,\r\n      1129,\r\n      1151,\r\n      1153,\r\n      1163,\r\n      1171,\r\n      1181,\r\n      1187,\r\n      1193,\r\n      1201,\r\n      1213,\r\n      1217,\r\n      1223,\r\n      1229,\r\n      1231,\r\n      1237,\r\n      1249,\r\n      1259,\r\n      1277,\r\n      1279,\r\n      1283,\r\n      1289,\r\n      1291,\r\n      1297,\r\n      1301,\r\n      1303,\r\n      1307,\r\n      1319,\r\n      1321,\r\n      1327,\r\n      1361,\r\n      1367,\r\n      1373,\r\n      1381,\r\n      1399,\r\n      1409,\r\n      1423,\r\n      1427,\r\n      1429,\r\n      1433,\r\n      1439,\r\n      1447,\r\n      1451,\r\n      1453,\r\n      1459,\r\n      1471,\r\n      1481,\r\n      1483,\r\n      1487,\r\n      1489,\r\n      1493,\r\n      1499,\r\n      1511,\r\n      1523,\r\n      1531,\r\n      1543,\r\n      1549,\r\n      1553,\r\n      1559,\r\n      1567,\r\n      1571,\r\n      1579,\r\n      1583,\r\n      1597,\r\n      1601,\r\n      1607,\r\n      1609,\r\n      1613,\r\n      1619,\r\n      1621,\r\n      1627,\r\n      1637,\r\n      1657,\r\n      1663,\r\n      1667,\r\n      1669,\r\n      1693,\r\n      1697,\r\n      1699,\r\n      1709,\r\n      1721,\r\n      1723,\r\n      1733,\r\n      1741,\r\n      1747,\r\n      1753,\r\n      1759,\r\n      1777,\r\n      1783,\r\n      1787,\r\n      1789,\r\n      1801,\r\n      1811,\r\n      1823,\r\n      1831,\r\n      1847,\r\n      1861,\r\n      1867,\r\n      1871,\r\n      1873,\r\n      1877,\r\n      1879,\r\n      1889,\r\n      1901,\r\n      1907,\r\n      1913,\r\n      1931,\r\n      1933,\r\n      1949,\r\n      1951,\r\n      1973,\r\n      1979,\r\n      1987,\r\n      1993,\r\n      1997,\r\n      1999,\r\n      2003,\r\n      2011,\r\n      2017,\r\n      2027,\r\n      2029,\r\n      2039,\r\n      2053,\r\n      2063,\r\n      2069,\r\n      2081,\r\n      2083,\r\n      2087,\r\n      2089,\r\n      2099,\r\n      2111,\r\n      2113,\r\n      2129,\r\n      2131,\r\n      2137,\r\n      2141,\r\n      2143,\r\n      2153,\r\n      2161,\r\n      2179,\r\n      2203,\r\n      2207,\r\n      2213,\r\n      2221,\r\n      2237,\r\n      2239,\r\n      2243,\r\n      2251,\r\n      2267,\r\n      2269,\r\n      2273,\r\n      2281,\r\n      2287,\r\n      2293,\r\n      2297,\r\n      2309,\r\n      2311,\r\n      2333,\r\n      2339,\r\n      2341,\r\n      2347,\r\n      2351,\r\n      2357,\r\n      2371,\r\n      2377,\r\n      2381,\r\n      2383,\r\n      2389,\r\n      2393,\r\n      2399,\r\n      2411,\r\n      2417,\r\n      2423,\r\n      2437,\r\n      2441,\r\n      2447,\r\n      2459,\r\n      2467,\r\n      2473,\r\n      2477,\r\n      2503,\r\n      2521,\r\n      2531,\r\n      2539,\r\n      2543,\r\n      2549,\r\n      2551,\r\n      2557,\r\n      2579,\r\n      2591,\r\n      2593,\r\n      2609,\r\n      2617,\r\n      2621,\r\n      2633,\r\n      2647,\r\n      2657,\r\n      2659,\r\n      2663,\r\n      2671,\r\n      2677,\r\n      2683,\r\n      2687,\r\n      2689,\r\n      2693,\r\n      2699,\r\n      2707,\r\n      2711,\r\n      2713,\r\n      2719,\r\n      2729,\r\n      2731,\r\n      2741,\r\n      2749,\r\n      2753,\r\n      2767,\r\n      2777,\r\n      2789,\r\n      2791,\r\n      2797,\r\n      2801,\r\n      2803,\r\n      2819,\r\n      2833,\r\n      2837,\r\n      2843,\r\n      2851,\r\n      2857,\r\n      2861,\r\n      2879,\r\n      2887,\r\n      2897,\r\n      2903,\r\n      2909,\r\n      2917,\r\n      2927,\r\n      2939,\r\n      2953,\r\n      2957,\r\n      2963,\r\n      2969,\r\n      2971,\r\n      2999,\r\n      3001,\r\n      3011,\r\n      3019,\r\n      3023,\r\n      3037,\r\n      3041,\r\n      3049,\r\n      3061,\r\n      3067,\r\n      3079,\r\n      3083,\r\n      3089,\r\n      3109,\r\n      3119,\r\n      3121,\r\n      3137,\r\n      3163,\r\n      3167,\r\n      3169,\r\n      3181,\r\n      3187,\r\n      3191,\r\n      3203,\r\n      3209,\r\n      3217,\r\n      3221,\r\n      3229,\r\n      3251,\r\n      3253,\r\n      3257,\r\n      3259,\r\n      3271,\r\n      3299,\r\n      3301,\r\n      3307,\r\n      3313,\r\n      3319,\r\n      3323,\r\n      3329,\r\n      3331,\r\n      3343,\r\n      3347,\r\n      3359,\r\n      3361,\r\n      3371,\r\n      3373,\r\n      3389,\r\n      3391,\r\n      3407,\r\n      3413,\r\n      3433,\r\n      3449,\r\n      3457,\r\n      3461,\r\n      3463,\r\n      3467,\r\n      3469,\r\n      3491,\r\n      3499,\r\n      3511,\r\n      3517,\r\n      3527,\r\n      3529,\r\n      3533,\r\n      3539,\r\n      3541,\r\n      3547,\r\n      3557,\r\n      3559,\r\n      3571,\r\n      3581,\r\n      3583,\r\n      3593,\r\n      3607,\r\n      3613,\r\n      3617,\r\n      3623,\r\n      3631,\r\n      3637,\r\n      3643,\r\n      3659,\r\n      3671,\r\n      3673,\r\n      3677,\r\n      3691,\r\n      3697,\r\n      3701,\r\n      3709,\r\n      3719,\r\n      3727,\r\n      3733,\r\n      3739,\r\n      3761,\r\n      3767,\r\n      3769,\r\n      3779,\r\n      3793,\r\n      3797,\r\n      3803,\r\n      3821,\r\n      3823,\r\n      3833,\r\n      3847,\r\n      3851,\r\n      3853,\r\n      3863,\r\n      3877,\r\n      3881,\r\n      3889,\r\n      3907,\r\n      3911,\r\n      3917,\r\n      3919,\r\n      3923,\r\n      3929,\r\n      3931,\r\n      3943,\r\n      3947,\r\n      3967,\r\n      3989,\r\n      4001,\r\n      4003,\r\n      4007,\r\n      4013,\r\n      4019,\r\n      4021,\r\n      4027,\r\n      4049,\r\n      4051,\r\n      4057,\r\n      4073,\r\n      4079,\r\n      4091,\r\n      4093,\r\n      4099,\r\n      4111,\r\n      4127,\r\n      4129,\r\n      4133,\r\n      4139,\r\n      4153,\r\n      4157,\r\n      4159,\r\n      4177,\r\n      4201,\r\n      4211,\r\n      4217,\r\n      4219,\r\n      4229,\r\n      4231,\r\n      4241,\r\n      4243,\r\n      4253,\r\n      4259,\r\n      4261,\r\n      4271,\r\n      4273,\r\n      4283,\r\n      4289,\r\n      4297,\r\n      4327,\r\n      4337,\r\n      4339,\r\n      4349,\r\n      4357,\r\n      4363,\r\n      4373,\r\n      4391,\r\n      4397,\r\n      4409,\r\n      4421,\r\n      4423,\r\n      4441,\r\n      4447,\r\n      4451,\r\n      4457,\r\n      4463,\r\n      4481,\r\n      4483,\r\n      4493,\r\n      4507,\r\n      4513,\r\n      4517,\r\n      4519,\r\n      4523,\r\n      4547,\r\n      4549,\r\n      4561,\r\n      4567,\r\n      4583,\r\n      4591,\r\n      4597,\r\n      4603,\r\n      4621,\r\n      4637,\r\n      4639,\r\n      4643,\r\n      4649,\r\n      4651,\r\n      4657,\r\n      4663,\r\n      4673,\r\n      4679,\r\n      4691,\r\n      4703,\r\n      4721,\r\n      4723,\r\n      4729,\r\n      4733,\r\n      4751,\r\n      4759,\r\n      4783,\r\n      4787,\r\n      4789,\r\n      4793,\r\n      4799,\r\n      4801,\r\n      4813,\r\n      4817,\r\n      4831,\r\n      4861,\r\n      4871,\r\n      4877,\r\n      4889,\r\n      4903,\r\n      4909,\r\n      4919,\r\n      4931,\r\n      4933,\r\n      4937,\r\n      4943,\r\n      4951,\r\n      4957,\r\n      4967,\r\n      4969,\r\n      4973,\r\n      4987,\r\n      4993,\r\n      4999,\r\n      5003,\r\n      5009,\r\n      5011,\r\n      5021,\r\n      5023,\r\n      5039,\r\n      5051,\r\n      5059,\r\n      5077,\r\n      5081,\r\n      5087,\r\n      5099,\r\n      5101,\r\n      5107,\r\n      5113,\r\n      5119,\r\n      5147,\r\n      5153,\r\n      5167,\r\n      5171,\r\n      5179,\r\n      5189,\r\n      5197,\r\n      5209,\r\n      5227,\r\n      5231,\r\n      5233,\r\n      5237,\r\n      5261,\r\n      5273,\r\n      5279,\r\n      5281,\r\n      5297,\r\n      5303,\r\n      5309,\r\n      5323,\r\n      5333,\r\n      5347,\r\n      5351,\r\n      5381,\r\n      5387,\r\n      5393,\r\n      5399,\r\n      5407,\r\n      5413,\r\n      5417,\r\n      5419,\r\n      5431,\r\n      5437,\r\n      5441,\r\n      5443,\r\n      5449,\r\n      5471,\r\n      5477,\r\n      5479,\r\n      5483,\r\n      5501,\r\n      5503,\r\n      5507,\r\n      5519,\r\n      5521,\r\n      5527,\r\n      5531,\r\n      5557,\r\n      5563,\r\n      5569,\r\n      5573,\r\n      5581,\r\n      5591,\r\n      5623,\r\n      5639,\r\n      5641,\r\n      5647,\r\n      5651,\r\n      5653,\r\n      5657,\r\n      5659,\r\n      5669,\r\n      5683,\r\n      5689,\r\n      5693,\r\n      5701,\r\n      5711,\r\n      5717,\r\n      5737,\r\n      5741,\r\n      5743,\r\n      5749,\r\n      5779,\r\n      5783,\r\n      5791,\r\n      5801,\r\n      5807,\r\n      5813,\r\n      5821,\r\n      5827,\r\n      5839,\r\n      5843,\r\n      5849,\r\n      5851,\r\n      5857,\r\n      5861,\r\n      5867,\r\n      5869,\r\n      5879,\r\n      5881,\r\n      5897,\r\n      5903,\r\n      5923,\r\n      5927,\r\n      5939,\r\n      5953,\r\n      5981,\r\n      5987,\r\n      6007,\r\n      6011,\r\n      6029,\r\n      6037,\r\n      6043,\r\n      6047,\r\n      6053,\r\n      6067,\r\n      6073,\r\n      6079,\r\n      6089,\r\n      6091,\r\n      6101,\r\n      6113,\r\n      6121,\r\n      6131,\r\n      6133,\r\n      6143,\r\n      6151,\r\n      6163,\r\n      6173,\r\n      6197,\r\n      6199,\r\n      6203,\r\n      6211,\r\n      6217,\r\n      6221,\r\n      6229,\r\n      6247,\r\n      6257,\r\n      6263,\r\n      6269,\r\n      6271,\r\n      6277,\r\n      6287,\r\n      6299,\r\n      6301,\r\n      6311,\r\n      6317,\r\n      6323,\r\n      6329,\r\n      6337,\r\n      6343,\r\n      6353,\r\n      6359,\r\n      6361,\r\n      6367,\r\n      6373,\r\n      6379,\r\n      6389,\r\n      6397,\r\n      6421,\r\n      6427,\r\n      6449,\r\n      6451,\r\n      6469,\r\n      6473,\r\n      6481,\r\n      6491,\r\n      6521,\r\n      6529,\r\n      6547,\r\n      6551,\r\n      6553,\r\n      6563,\r\n      6569,\r\n      6571,\r\n      6577,\r\n      6581,\r\n      6599,\r\n      6607,\r\n      6619,\r\n      6637,\r\n      6653,\r\n      6659,\r\n      6661,\r\n      6673,\r\n      6679,\r\n      6689,\r\n      6691,\r\n      6701,\r\n      6703,\r\n      6709,\r\n      6719,\r\n      6733,\r\n      6737,\r\n      6761,\r\n      6763,\r\n      6779,\r\n      6781,\r\n      6791,\r\n      6793,\r\n      6803,\r\n      6823,\r\n      6827,\r\n      6829,\r\n      6833,\r\n      6841,\r\n      6857,\r\n      6863,\r\n      6869,\r\n      6871,\r\n      6883,\r\n      6899,\r\n      6907,\r\n      6911,\r\n      6917,\r\n      6947,\r\n      6949,\r\n      6959,\r\n      6961,\r\n      6967,\r\n      6971,\r\n      6977,\r\n      6983,\r\n      6991,\r\n      6997,\r\n      7001,\r\n      7013,\r\n      7019,\r\n      7027,\r\n      7039,\r\n      7043,\r\n      7057,\r\n      7069,\r\n      7079,\r\n      7103,\r\n      7109,\r\n      7121,\r\n      7127,\r\n      7129,\r\n      7151,\r\n      7159,\r\n      7177,\r\n      7187,\r\n      7193,\r\n      7207,\r\n      7211,\r\n      7213,\r\n      7219,\r\n      7229,\r\n      7237,\r\n      7243,\r\n      7247,\r\n      7253,\r\n      7283,\r\n      7297,\r\n      7307,\r\n      7309,\r\n      7321,\r\n      7331,\r\n      7333,\r\n      7349,\r\n      7351,\r\n      7369,\r\n      7393,\r\n      7411,\r\n      7417,\r\n      7433,\r\n      7451,\r\n      7457,\r\n      7459,\r\n      7477,\r\n      7481,\r\n      7487,\r\n      7489,\r\n      7499,\r\n      7507,\r\n      7517,\r\n      7523,\r\n      7529,\r\n      7537,\r\n      7541,\r\n      7547,\r\n      7549,\r\n      7559,\r\n      7561,\r\n      7573,\r\n      7577,\r\n      7583,\r\n      7589,\r\n      7591,\r\n      7603,\r\n      7607,\r\n      7621,\r\n      7639,\r\n      7643,\r\n      7649,\r\n      7669,\r\n      7673,\r\n      7681,\r\n      7687,\r\n      7691,\r\n      7699,\r\n      7703,\r\n      7717,\r\n      7723,\r\n      7727,\r\n      7741,\r\n      7753,\r\n      7757,\r\n      7759,\r\n      7789,\r\n      7793,\r\n      7817,\r\n      7823,\r\n      7829,\r\n      7841,\r\n      7853,\r\n      7867,\r\n      7873,\r\n      7877,\r\n      7879,\r\n      7883,\r\n      7901,\r\n      7907,\r\n      7919,\r\n  ]);\r\n  const LARGEST_SMALL_PRIME = 7919;\n\n  const DEFINITIONS_OTHERS = [\r\n      {\r\n          name: 'Overscript',\r\n          trigger: { infix: '\\\\overset' },\r\n          precedence: 700,\r\n      },\r\n      {\r\n          name: 'Underscript',\r\n          trigger: { infix: '\\\\underset' },\r\n          precedence: 700,\r\n      },\r\n      {\r\n          name: 'Increment',\r\n          trigger: { postfix: ['+', '+'] },\r\n          precedence: 880,\r\n      },\r\n      {\r\n          name: 'Decrement',\r\n          trigger: { postfix: ['-', '-'] },\r\n          precedence: 880,\r\n      },\r\n      {\r\n          name: 'PreIncrement',\r\n          trigger: { prefix: ['+', '+'] },\r\n          precedence: 880,\r\n      },\r\n      {\r\n          name: 'PreDecrement',\r\n          trigger: { prefix: ['-', '-'] },\r\n          precedence: 880,\r\n      },\r\n      {\r\n          name: 'Ring',\r\n          trigger: { infix: '\\\\circ' },\r\n          precedence: 265,\r\n      },\r\n      {\r\n          name: 'Transpose',\r\n          trigger: { superfix: 'T' },\r\n      },\r\n      {\r\n          name: 'ConjugateTranspose',\r\n          trigger: { superfix: 'H' },\r\n      },\r\n      {\r\n          name: 'StringJoin',\r\n          trigger: { infix: ['\\\\lt', '\\\\gt'] },\r\n          precedence: 780,\r\n      },\r\n      {\r\n          name: 'Starstar',\r\n          trigger: { infix: ['\\\\star', '\\\\star'] },\r\n          precedence: 780,\r\n      },\r\n      {\r\n          name: 'PartialDerivative',\r\n          trigger: { prefix: '\\\\partial' },\r\n          parse: (_lhs, scanner, _minPrec) => {\r\n              var _a;\r\n              let done = false;\r\n              let sup = NOTHING;\r\n              let sub = NOTHING;\r\n              while (!done) {\r\n                  scanner.skipSpace();\r\n                  if (scanner.match('_')) {\r\n                      sub = scanner.matchRequiredLatexArgument();\r\n                  }\r\n                  else if (scanner.match('^')) {\r\n                      sup = scanner.matchRequiredLatexArgument();\r\n                  }\r\n                  else {\r\n                      done = true;\r\n                  }\r\n              }\r\n              if (getFunctionName(sub) === SEQUENCE) {\r\n                  sub = [LIST, ...getTail(sub)];\r\n              }\r\n              let rhs = (_a = scanner.matchRequiredLatexArgument()) !== null && _a !== void 0 ? _a : NOTHING;\r\n              if (rhs !== NOTHING) {\r\n                  rhs = [rhs, ...scanner.matchArguments('group')];\r\n              }\r\n              return [null, ['PartialDerivative', rhs, sub, sup]];\r\n          },\r\n          serialize: (serializer, expr) => {\r\n              let result = '\\\\partial';\r\n              const fn = getArg(expr, 1);\r\n              const vars = getArg(expr, 2);\r\n              const degree = getArg(expr, 3);\r\n              if (vars !== null && vars !== NOTHING) {\r\n                  if (getFunctionHead(vars) === LIST) {\r\n                      result +=\r\n                          '_{' + serializer.serialize([SEQUENCE, ...getTail(vars)]) + '}';\r\n                  }\r\n                  else {\r\n                      result += '_{' + serializer.serialize(vars) + '}';\r\n                  }\r\n              }\r\n              if (degree !== null && degree !== NOTHING) {\r\n                  result += '^{' + serializer.serialize(degree) + '}';\r\n              }\r\n              if (fn !== null && fn !== NOTHING) {\r\n                  result += serializer.serialize(fn);\r\n              }\r\n              return result;\r\n          },\r\n          precedence: 740,\r\n      },\r\n      {\r\n          name: 'OverBar',\r\n          trigger: { symbol: '\\\\overline' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'UnderBar',\r\n          trigger: { symbol: '\\\\underline' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverVector',\r\n          trigger: { symbol: '\\\\vec' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverTile',\r\n          trigger: { symbol: '\\\\tilde' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverHat',\r\n          trigger: { symbol: '\\\\hat' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverHat',\r\n          trigger: { symbol: '\\\\hat' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverRightArrow',\r\n          trigger: { symbol: '\\\\overrightarrow' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverLeftArrow',\r\n          trigger: { symbol: '\\\\overleftarrow' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverRightDoubleArrow',\r\n          trigger: { symbol: '\\\\Overrightarrow' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverLeftHarpoon',\r\n          trigger: { symbol: '\\\\overleftharpoon' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverRightHarpoon',\r\n          trigger: { symbol: '\\\\overrightharpoon' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverLeftRightArrow',\r\n          trigger: { symbol: '\\\\overleftrightarrow' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverBrace',\r\n          trigger: { symbol: '\\\\overbrace' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverLineSegment',\r\n          trigger: { symbol: '\\\\overlinesegment' },\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'OverGroup',\r\n          trigger: { symbol: '\\\\overgroup' },\r\n          requiredLatexArg: 1,\r\n      },\r\n  ];\n\n  function getApplyFunctionStyle(_expr, _level) {\r\n      return 'paren';\r\n  }\r\n  function getGroupStyle(_expr, _level) {\r\n      return 'paren';\r\n  }\r\n  function getRootStyle(_expr, level) {\r\n      if (level > 1)\r\n          return 'solidus';\r\n      return 'radical';\r\n  }\r\n  function getFractionStyle(_expr, level) {\r\n      if (level > 3)\r\n          return 'inline-solidus';\r\n      return 'quotient';\r\n  }\n\n  function isSpacingToken(token) {\r\n      return (token === '<space>' ||\r\n          token === '\\\\qquad' ||\r\n          token === '\\\\quad' ||\r\n          token === '\\\\enskip' ||\r\n          token === '\\\\;' ||\r\n          token === '\\\\,' ||\r\n          token === '\\\\ ' ||\r\n          token === '~');\r\n  }\r\n  function parseSequence(head, prec, sep) {\r\n      return (lhs, scanner, minPrec) => {\r\n          if (minPrec >= prec)\r\n              return [lhs, null];\r\n          scanner.skipSpace();\r\n          scanner.match(sep);\r\n          const result = [head, lhs !== null && lhs !== void 0 ? lhs : NOTHING];\r\n          let done = false;\r\n          while (!done) {\r\n              done = true;\r\n              scanner.skipSpace();\r\n              while (scanner.match(sep)) {\r\n                  result.push(NOTHING);\r\n                  scanner.skipSpace();\r\n              }\r\n              if (scanner.atEnd) {\r\n                  result.push(NOTHING);\r\n              }\r\n              else {\r\n                  const rhs = scanner.matchExpression(prec);\r\n                  result.push(rhs !== null && rhs !== void 0 ? rhs : NOTHING);\r\n                  done = rhs === null;\r\n              }\r\n              if (!done) {\r\n                  scanner.skipSpace();\r\n                  done = !scanner.match(sep);\r\n              }\r\n          }\r\n          return [null, result];\r\n      };\r\n  }\r\n  function serializeSequence(sep) {\r\n      return (serializer, expr) => {\r\n          return getTail(expr)\r\n              .map((x) => serializer.serialize(x))\r\n              .join(sep);\r\n      };\r\n  }\r\n  function serializeLatex(serializer, expr) {\r\n      console.assert(getFunctionHead(expr) === LATEX_TOKENS);\r\n      return getTail(expr)\r\n          .map((x) => {\r\n          const stringValue = getStringValue(x);\r\n          if (stringValue === null)\r\n              return serializer.serialize(x);\r\n          if (stringValue === '<{>')\r\n              return '{';\r\n          if (stringValue === '<}>')\r\n              return '}';\r\n          if (stringValue === '<$>')\r\n              return '$';\r\n          if (stringValue === '<$$>')\r\n              return '$$';\r\n          if (stringValue === \"<space>'\")\r\n              return ' ';\r\n          return stringValue;\r\n      })\r\n          .join('');\r\n  }\r\n  const DEFINITIONS_CORE = [\r\n      { name: LATEX_TOKENS, serialize: serializeLatex },\r\n      {\r\n          name: PARENTHESES,\r\n          trigger: { matchfix: '(' },\r\n          parse: (lhs, scanner, _minPrec) => {\r\n              var _a;\r\n              const originalIndex = scanner.index;\r\n              if (!scanner.match('('))\r\n                  return [lhs, null];\r\n              let done = false;\r\n              let couldBeBaseNumber = true;\r\n              let wrappedInMathTt = false;\r\n              let maxDigit = 0;\r\n              let digits = '';\r\n              while (!done && couldBeBaseNumber) {\r\n                  const token = scanner.next();\r\n                  if (scanner.atEnd || token === ')') {\r\n                      done = true;\r\n                  }\r\n                  else if (token === '\\\\mathtt') {\r\n                      scanner.match('<{>');\r\n                      wrappedInMathTt = true;\r\n                  }\r\n                  else if (isSpacingToken(token)) ;\r\n                  else if (!/^[0-9a-zA-Z]$/.test(token)) {\r\n                      couldBeBaseNumber = false;\r\n                  }\r\n                  else {\r\n                      maxDigit = Math.max(maxDigit, parseInt(token, 36));\r\n                      digits += token;\r\n                  }\r\n                  if (wrappedInMathTt) {\r\n                      scanner.match('<}>');\r\n                  }\r\n              }\r\n              scanner.skipSpace();\r\n              if (couldBeBaseNumber && scanner.match('_')) {\r\n                  const radix = (_a = getNumberValue(scanner.matchRequiredLatexArgument())) !== null && _a !== void 0 ? _a : NaN;\r\n                  if (!isFinite(radix) || radix < 2 || radix > 36 || maxDigit >= radix) {\r\n                      scanner.onError({ code: 'base-out-of-range' });\r\n                      return [lhs, NOTHING];\r\n                  }\r\n                  return [lhs, ['BaseForm', parseInt(digits, radix), radix]];\r\n              }\r\n              scanner.index = originalIndex;\r\n              const seq = scanner.matchBalancedExpression('(', ')', scanner.onError);\r\n              if (!seq)\r\n                  return [lhs, [PARENTHESES]];\r\n              if (getFunctionName(seq) === SEQUENCE) {\r\n                  return [lhs, [PARENTHESES, ...getTail(seq)]];\r\n              }\r\n              return [lhs, [PARENTHESES, seq]];\r\n          },\r\n          serialize: (serializer, expr) => serializer.wrapString(serializeSequence(',')(serializer, expr), getGroupStyle(expr, serializer.level)),\r\n          separator: ',',\r\n          closeFence: ')',\r\n          precedence: 20,\r\n      },\r\n      {\r\n          name: LIST,\r\n          trigger: { matchfix: '\\\\lbrack' },\r\n          separator: ',',\r\n          closeFence: '\\\\rbrack',\r\n          precedence: 20,\r\n          parse: (lhs, scanner, _minPrec) => {\r\n              if (lhs === null) {\r\n                  const seq = scanner.matchBalancedExpression('\\\\lbrack', '\\\\rbrack', scanner.onError);\r\n                  if (!seq)\r\n                      return [null, [LIST]];\r\n                  if (getFunctionName(seq) === SEQUENCE) {\r\n                      return [lhs, [LIST, ...getTail(seq)]];\r\n                  }\r\n                  return [lhs, [LIST, seq]];\r\n              }\r\n              return [lhs, null];\r\n          },\r\n      },\r\n      {\r\n          name: 'BaseForm',\r\n          serialize: (serializer, expr) => {\r\n              var _a, _b;\r\n              const radix = (_a = getNumberValue(getArg(expr, 2))) !== null && _a !== void 0 ? _a : NaN;\r\n              if (isFinite(radix) && radix >= 2 && radix <= 36) {\r\n                  const num = (_b = getNumberValue(getArg(expr, 1))) !== null && _b !== void 0 ? _b : NaN;\r\n                  if (isFinite(num)) {\r\n                      let digits = Number(num).toString(radix);\r\n                      let groupLength = 0;\r\n                      if (radix === 2) {\r\n                          groupLength = 4;\r\n                      }\r\n                      else if (radix === 10) {\r\n                          groupLength = 4;\r\n                      }\r\n                      else if (radix === 16) {\r\n                          groupLength = 2;\r\n                      }\r\n                      else if (radix > 16) {\r\n                          groupLength = 4;\r\n                      }\r\n                      if (groupLength > 0) {\r\n                          const oldDigits = digits;\r\n                          digits = '';\r\n                          for (let i = 0; i < oldDigits.length; i++) {\r\n                              if (i > 0 && i % groupLength === 0) {\r\n                                  digits = '\\\\, ' + digits;\r\n                              }\r\n                              digits = oldDigits[oldDigits.length - i - 1] + digits;\r\n                          }\r\n                      }\r\n                      return `(\\\\mathtt{${digits}})_{${radix}}`;\r\n                  }\r\n              }\r\n              return ('\\\\operatorname{BaseForm}(' +\r\n                  serializer.serialize(getArg(expr, 1)) +\r\n                  ', ' +\r\n                  serializer.serialize(getArg(expr, 2)) +\r\n                  ')');\r\n          },\r\n      },\r\n      {\r\n          name: 'Set',\r\n          trigger: { matchfix: '\\\\lbrace' },\r\n          separator: ',',\r\n          closeFence: '\\\\rbrace',\r\n          precedence: 20,\r\n      },\r\n      {\r\n          name: SEQUENCE,\r\n          trigger: { infix: ',' },\r\n          parse: parseSequence(SEQUENCE, 20, ','),\r\n          serialize: serializeSequence(', '),\r\n          precedence: 20,\r\n      },\r\n      {\r\n          name: SEQUENCE2,\r\n          trigger: { infix: ';' },\r\n          parse: parseSequence(SEQUENCE2, 19, ';'),\r\n          serialize: serializeSequence('; '),\r\n          precedence: 19,\r\n      },\r\n      {\r\n          name: MISSING,\r\n          trigger: '\\\\placeholder',\r\n          serialize: '\\\\placeholder',\r\n          requiredLatexArg: 1,\r\n      },\r\n      {\r\n          name: 'Subscript',\r\n          trigger: { infix: '_' },\r\n          precedence: 720,\r\n          serialize: (serializer, expr) => {\r\n              if (getArgCount(expr) === 2) {\r\n                  return (serializer.serialize(getArg(expr, 1)) +\r\n                      '_{' +\r\n                      serializer.serialize(getArg(expr, 2)) +\r\n                      '}');\r\n              }\r\n              return '_{' + serializer.serialize(getArg(expr, 1)) + '}';\r\n          },\r\n          parse: (lhs, scanner, _minPrec) => {\r\n              const rhs = scanner.matchRequiredLatexArgument();\r\n              if (!lhs)\r\n                  return [null, ['Subscript', rhs]];\r\n              return [null, ['Subscript', lhs, rhs]];\r\n          },\r\n      },\r\n      {\r\n          name: 'Superplus',\r\n          trigger: { superfix: '+' },\r\n      },\r\n      {\r\n          name: 'Subplus',\r\n          trigger: { subfix: '+' },\r\n      },\r\n      {\r\n          name: 'Superminus',\r\n          trigger: { superfix: '-' },\r\n      },\r\n      {\r\n          name: 'Subminus',\r\n          trigger: { subfix: '-' },\r\n      },\r\n      {\r\n          name: 'Superstar',\r\n          trigger: { superfix: '*' },\r\n      },\r\n      {\r\n          name: 'Superstar',\r\n          trigger: { superfix: '\\\\star' },\r\n      },\r\n      {\r\n          name: 'Substar',\r\n          trigger: { subfix: '*' },\r\n      },\r\n      {\r\n          name: 'Substar',\r\n          trigger: { subfix: '\\\\star' },\r\n      },\r\n      {\r\n          name: 'Superdagger',\r\n          trigger: { superfix: '\\\\dagger' },\r\n      },\r\n      {\r\n          name: 'Superdagger',\r\n          trigger: { superfix: '\\\\dag' },\r\n      },\r\n      {\r\n          name: PRIME,\r\n          trigger: { superfix: '\\\\prime' },\r\n          arguments: 'group',\r\n      },\r\n      {\r\n          trigger: { superfix: '\\\\doubleprime' },\r\n          parse: (lhs, _scanner) => {\r\n              return [null, [PRIME, lhs !== null && lhs !== void 0 ? lhs : NOTHING, 2]];\r\n          },\r\n          arguments: 'group',\r\n      },\r\n      {\r\n          name: INVERSE_FUNCTION,\r\n          serialize: (serializer, expr) => {\r\n              return serializer.serialize(getArg(expr, 1)) + '^{-1}';\r\n          },\r\n      },\r\n      {\r\n          name: DERIVATIVE,\r\n          trigger: 'D',\r\n          parse: (lhs, _scanner) => {\r\n              return [lhs, [DERIVATIVE, 1]];\r\n          },\r\n          serialize: (serializer, expr) => {\r\n              var _a;\r\n              const degree = (_a = getNumberValue(getArg(expr, 1))) !== null && _a !== void 0 ? _a : NaN;\r\n              if (!isFinite(degree))\r\n                  return '';\r\n              const base = serializer.serialize(getArg(expr, 2));\r\n              if (degree === 1) {\r\n                  return base + '^{\\\\prime}';\r\n              }\r\n              else if (degree === 2) {\r\n                  return base + '^{\\\\doubleprime}';\r\n              }\r\n              return base + '^{(' + Number(degree).toString() + ')}';\r\n          },\r\n      },\r\n      {\r\n          name: 'Piecewise',\r\n          trigger: { environment: 'cases' },\r\n          parse: (lhs, scanner) => {\r\n              return [lhs, ['Piecewise', scanner.matchTabular()]];\r\n          },\r\n          serialize: (serialize, expr) => {\r\n              if (getFunctionName(getArg(expr, 1)) !== LIST)\r\n                  return '';\r\n              const rows = getTail(getArg(expr, 1));\r\n              let body = '';\r\n              let rowSep = '';\r\n              for (const row of rows) {\r\n                  body += rowSep;\r\n                  const arg1 = getArg(row, 1);\r\n                  if (arg1 !== null) {\r\n                      body += serialize.serialize(arg1);\r\n                      const arg2 = getArg(row, 2);\r\n                      if (arg2 !== null)\r\n                          body += '&' + serialize.serialize(arg2);\r\n                  }\r\n                  rowSep = '\\\\\\\\';\r\n              }\r\n              return '\\\\begin{cases}' + body + '\\\\end{cases}';\r\n          },\r\n      },\r\n  ];\n\n  function order(a, b) {\r\n      const lexA = getLex(a);\r\n      const lexB = getLex(b);\r\n      if (lexA < lexB)\r\n          return -1;\r\n      if (lexA > lexB)\r\n          return 1;\r\n      let valA = getExprValue(a);\r\n      if (isNaN(valA))\r\n          valA = Number(Infinity);\r\n      let valB = getExprValue(b);\r\n      if (isNaN(valB))\r\n          valB = Number(Infinity);\r\n      if (valA < valB)\r\n          return -1;\r\n      if (valA > valB)\r\n          return 1;\r\n      const lenA = getExprLength(a);\r\n      const lenB = getExprLength(b);\r\n      if (lenA === lenB) {\r\n          for (let i = 1; i <= lenA; i++) {\r\n              const comp = order(getArg(a, i), getArg(b, i));\r\n              if (comp !== 0)\r\n                  return comp;\r\n          }\r\n      }\r\n      return lenB - lenA;\r\n  }\r\n  function degree(expr, sortedVars) {\r\n      var _a;\r\n      if (expr === 0)\r\n          return -Infinity;\r\n      const name = getFunctionName(expr);\r\n      if (name === POWER) {\r\n          const exponent = (_a = getNumberValue(getArg(expr, 2))) !== null && _a !== void 0 ? _a : NaN;\r\n          return isFinite(exponent) ? exponent : 0;\r\n      }\r\n      if (name === MULTIPLY) {\r\n          let result = 0;\r\n          getTail(expr).forEach((x) => {\r\n              result += degree(x, sortedVars);\r\n          });\r\n          return result;\r\n      }\r\n      if (sortedVars.includes(getSymbolName(expr)))\r\n          return 1;\r\n      return 0;\r\n  }\r\n  function getDegree(expr, v) {\r\n      var _a;\r\n      const name = getFunctionName(expr);\r\n      if (name === POWER) {\r\n          if (getSymbolName(getArg(expr, 1)) === v) {\r\n              const exponent = (_a = getNumberValue(getArg(expr, 2))) !== null && _a !== void 0 ? _a : NaN;\r\n              if (isFinite(exponent))\r\n                  return exponent;\r\n          }\r\n          return 0;\r\n      }\r\n      if (name === MULTIPLY) {\r\n          let result = 0;\r\n          for (const arg of getTail(expr)) {\r\n              result += getDegree(arg, v);\r\n          }\r\n          return result;\r\n      }\r\n      if (getSymbolName(expr) === v)\r\n          return 1;\r\n      return 0;\r\n  }\r\n  function getLex(expr) {\r\n      if (typeof expr === 'string')\r\n          return expr;\r\n      if (isSymbolObject(expr))\r\n          return expr.sym;\r\n      if (getFunctionHead(expr))\r\n          return getTail(expr).map(getLex).join(' ');\r\n      return '';\r\n  }\r\n  function getExprLength(expr) {\r\n      if (getFunctionHead(expr)) {\r\n          return getTail(expr)\r\n              .map(getExprLength)\r\n              .reduce((acc, x) => acc + x, 0);\r\n      }\r\n      if (typeof expr === 'string')\r\n          return 1;\r\n      if (getSymbolName(expr))\r\n          return 1;\r\n      return 0;\r\n  }\r\n  function getExprValue(expr) {\r\n      var _a;\r\n      if (getFunctionHead(expr))\r\n          return NaN;\r\n      if (typeof expr === 'number')\r\n          return expr;\r\n      if (isNumberObject(expr))\r\n          return (_a = getNumberValue(expr)) !== null && _a !== void 0 ? _a : NaN;\r\n      return 0;\r\n  }\r\n  function deglex(a, b, sortedVars) {\r\n      const aDeg = degree(a, sortedVars);\r\n      const bDeg = degree(b, sortedVars);\r\n      if (aDeg < bDeg)\r\n          return 1;\r\n      if (aDeg > bDeg)\r\n          return -1;\r\n      for (const x of sortedVars) {\r\n          const aDegX = getDegree(a, x);\r\n          const bDegX = getDegree(b, x);\r\n          if (aDegX !== bDegX)\r\n              return bDegX - aDegX;\r\n      }\r\n      const aLex = getLex(a);\r\n      const bLex = getLex(b);\r\n      if (aLex > bLex)\r\n          return -1;\r\n      if (aLex < bLex)\r\n          return 1;\r\n      return order(a, b);\r\n  }\r\n  function canonicalOrder(engine, sortedVars, expr) {\r\n      var _a;\r\n      let args = getTail(expr);\r\n      if (args.length === 0)\r\n          return expr;\r\n      args = args.map((x) => canonicalOrder(engine, sortedVars, x));\r\n      const name = getFunctionName(expr);\r\n      if (name === ADD) {\r\n          args.sort((a, b) => deglex(a, b, sortedVars));\r\n      }\r\n      else {\r\n          const def = engine.getFunctionDefinition(name);\r\n          if ((_a = def === null || def === void 0 ? void 0 : def.commutative) !== null && _a !== void 0 ? _a : false) {\r\n              args.sort(order);\r\n          }\r\n      }\r\n      return [getFunctionHead(expr), ...args];\r\n  }\n\n  function ungroup(expr) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head === PARENTHESES && getArgCount(expr) === 1) {\r\n          return ungroup(getArg(expr, 1));\r\n      }\r\n      return applyArgs(expr, ungroup);\r\n  }\r\n  function applyInvert(expr) {\r\n      if (expr === null)\r\n          return null;\r\n      expr = ungroup(expr);\r\n      const head = getFunctionHead(expr);\r\n      if (head === POWER && getArgCount(expr) === 2) {\r\n          return [POWER, getArg(expr, 1), applyNegate(getArg(expr, 2))];\r\n      }\r\n      if (head === DIVIDE && getArgCount(expr) === 2) {\r\n          return [MULTIPLY, [POWER, getArg(expr, 1), -1], getArg(expr, 2)];\r\n      }\r\n      return [POWER, expr, -1];\r\n  }\r\n  function applyNegate(expr) {\r\n      if (expr === null)\r\n          return expr;\r\n      expr = ungroup(expr);\r\n      if (typeof expr === 'number') {\r\n          expr = -expr;\r\n      }\r\n      else if (expr && isNumberObject(expr)) {\r\n          if (expr.num[0] === '-') {\r\n              expr = { num: expr.num.slice(1) };\r\n          }\r\n          else {\r\n              expr = { num: '-' + expr.num };\r\n          }\r\n      }\r\n      else {\r\n          const name = getFunctionName(expr);\r\n          const argCount = getArgCount(expr);\r\n          if (name === NEGATE && argCount === 1) {\r\n              return getArg(expr, 1);\r\n          }\r\n          else if (name === MULTIPLY) {\r\n              let arg = getArg(expr, 1);\r\n              if (typeof arg === 'number') {\r\n                  arg = -arg;\r\n              }\r\n              else if (isNumberObject(arg)) {\r\n                  if (arg.num[0] === '-') {\r\n                      arg = { num: arg.num.slice(1) };\r\n                  }\r\n                  else {\r\n                      arg = { num: '-' + arg.num };\r\n                  }\r\n              }\r\n              else {\r\n                  arg = [NEGATE, arg];\r\n              }\r\n              return [MULTIPLY, arg, ...getTail(expr).slice(1)];\r\n          }\r\n          else if (name === PARENTHESES && argCount === 1) {\r\n              return applyNegate(getArg(getArg(expr, 1), 1));\r\n          }\r\n          expr = [NEGATE, expr];\r\n      }\r\n      return expr;\r\n  }\r\n  function flatten(expr, flatName) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      expr = applyArgs(expr, (x) => flatten(x, flatName));\r\n      if (head !== flatName)\r\n          return expr;\r\n      const args = getTail(expr);\r\n      let newArgs = [];\r\n      for (let i = 0; i < args.length; i++) {\r\n          if (getFunctionName(args[i]) === flatName) {\r\n              newArgs = newArgs.concat(getTail(args[i]));\r\n          }\r\n          else {\r\n              newArgs.push(args[i]);\r\n          }\r\n      }\r\n      return [head, ...newArgs];\r\n  }\r\n  function flattenInvolution(expr, engine) {\r\n      const name = getFunctionName(expr);\r\n      const def = engine.getFunctionDefinition(name);\r\n      if (def === null || def === void 0 ? void 0 : def.involution) {\r\n          const args = getTail(expr);\r\n          if (args.length === 1 && getFunctionName(args[0]) === name) {\r\n              return flatten(args[0], name);\r\n          }\r\n      }\r\n      return applyArgs(expr, (x) => flattenInvolution(x, engine));\r\n  }\r\n  function flattenIdempotent(expr, engine) {\r\n      const name = getFunctionName(expr);\r\n      const def = engine.getFunctionDefinition(name);\r\n      if (def === null || def === void 0 ? void 0 : def.idempotent)\r\n          return flatten(expr, name);\r\n      return applyArgs(expr, (x) => flattenIdempotent(x, engine));\r\n  }\r\n  function flattenAssociative(expr, engine) {\r\n      const name = getFunctionName(expr);\r\n      const def = engine.getFunctionDefinition(name);\r\n      if (def === null || def === void 0 ? void 0 : def.associative)\r\n          return flatten(expr, name);\r\n      return applyArgs(expr, (x) => flattenAssociative(x, engine));\r\n  }\r\n  function canonicalAddForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== ADD) {\r\n          return applyArgs(expr, (x) => canonicalAddForm(x));\r\n      }\r\n      expr = flatten(ungroup(expr), ADD);\r\n      let args = getTail(expr);\r\n      args = args\r\n          .map((x) => canonicalAddForm(x))\r\n          .filter((x) => getNumberValue(x) !== 0);\r\n      const argCount = args.length;\r\n      if (argCount === 0)\r\n          return 0;\r\n      if (argCount === 1)\r\n          return args[0];\r\n      return [ADD, ...args];\r\n  }\r\n  function canonicalDivideForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== DIVIDE) {\r\n          return applyArgs(expr, (x) => canonicalDivideForm(x));\r\n      }\r\n      if (getArgCount(expr) !== 2)\r\n          return expr;\r\n      const arg1 = canonicalDivideForm(getArg(expr, 1));\r\n      const arg2 = canonicalDivideForm(getArg(expr, 2));\r\n      if (getNumberValue(arg2) === 1)\r\n          return arg1;\r\n      if (getNumberValue(arg1) === 1)\r\n          return applyInvert(arg2);\r\n      return [MULTIPLY, arg1, applyInvert(arg2)];\r\n  }\r\n  function canonicalExpForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== EXP) {\r\n          return applyArgs(expr, (x) => canonicalExpForm(x));\r\n      }\r\n      if (getArgCount(expr) !== 1)\r\n          return expr;\r\n      return [POWER, EXPONENTIAL_E, canonicalExpForm(getArg(expr, 1))];\r\n  }\r\n  function canonicalListForm(expr, engine) {\r\n      var _a;\r\n      if (isAtomic(expr))\r\n          return expr;\r\n      const rootName = getFunctionName(expr);\r\n      if (rootName !== LIST && rootName !== SEQUENCE && rootName !== SEQUENCE2) {\r\n          return applyArgs(expr, (x) => canonicalListForm(x, engine));\r\n      }\r\n      const isList = rootName === LIST;\r\n      const args = getTail(expr);\r\n      const newArgs = [];\r\n      if (isList) {\r\n          for (let arg of args) {\r\n              arg = canonicalListForm(arg, engine);\r\n              const name = getFunctionName(arg);\r\n              if (name === IDENTITY) {\r\n                  const newArg = getArg(arg, 1);\r\n                  if (newArg !== null && newArg !== undefined) {\r\n                      newArgs.push(newArg);\r\n                  }\r\n              }\r\n              else if (name !== NOTHING) {\r\n                  newArgs.push(arg);\r\n              }\r\n          }\r\n          return [LIST, ...newArgs];\r\n      }\r\n      const def = engine.getFunctionDefinition(rootName);\r\n      const sequenceHold = (_a = def === null || def === void 0 ? void 0 : def.sequenceHold) !== null && _a !== void 0 ? _a : false;\r\n      for (let arg of args) {\r\n          arg = canonicalListForm(arg, engine);\r\n          const name = getFunctionName(arg);\r\n          if (name === IDENTITY) {\r\n              const newArg = getArg(arg, 1);\r\n              if (newArg !== null && newArg !== undefined) {\r\n                  newArgs.push(newArg);\r\n              }\r\n          }\r\n          else if (name === rootName && !sequenceHold) {\r\n              const head = getFunctionHead(expr);\r\n              for (const arg2 of getTail(arg)) {\r\n                  if (getFunctionName(arg2) === name) {\r\n                      newArgs.push([head, ...getTail(arg2)]);\r\n                  }\r\n                  else {\r\n                      newArgs.push(arg2);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              newArgs.push(arg);\r\n          }\r\n      }\r\n      return [getFunctionHead(expr), ...newArgs];\r\n  }\r\n  function getRootDegree(expr) {\r\n      var _a, _b;\r\n      const name = getFunctionName(expr);\r\n      if (name === SQRT)\r\n          return 2;\r\n      if (name === ROOT)\r\n          return (_a = getNumberValue(getArg(expr, 2))) !== null && _a !== void 0 ? _a : NaN;\r\n      if (name !== POWER)\r\n          return 1;\r\n      const exponent = getArg(expr, 2);\r\n      if (!exponent)\r\n          return 1;\r\n      if (getFunctionName(exponent) === POWER &&\r\n          getNumberValue(getArg(exponent, 2)) === -1) {\r\n          const val = (_b = getNumberValue(getArg(exponent, 1))) !== null && _b !== void 0 ? _b : NaN;\r\n          if (isFinite(val))\r\n              return val;\r\n      }\r\n      return 1;\r\n  }\r\n  function getSquareRoots(expr) {\r\n      const args = getTail(expr);\r\n      const roots = [];\r\n      const nonRoots = [];\r\n      for (const arg of args) {\r\n          if (getRootDegree(arg) === 2) {\r\n              roots.push(getArg(arg, 1));\r\n          }\r\n          else {\r\n              nonRoots.push(arg);\r\n          }\r\n      }\r\n      return [roots, nonRoots];\r\n  }\r\n  function canonicalMultiplyForm(expr, engine) {\r\n      var _a;\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      expr = applyArgs(expr, (x) => canonicalMultiplyForm(x));\r\n      if (head !== MULTIPLY)\r\n          return expr;\r\n      expr = flatten(ungroup(expr), MULTIPLY);\r\n      const [squareRoots, nonSquareRoots] = getSquareRoots(expr);\r\n      let args;\r\n      if (squareRoots.length === 0) {\r\n          args = nonSquareRoots;\r\n      }\r\n      else if (squareRoots.length === 1) {\r\n          expr = [\r\n              MULTIPLY,\r\n              ...nonSquareRoots,\r\n              [POWER, squareRoots[0], [POWER, 2, -1]],\r\n          ];\r\n          args = getTail(expr);\r\n      }\r\n      else {\r\n          expr = [\r\n              MULTIPLY,\r\n              ...nonSquareRoots,\r\n              [POWER, [MULTIPLY, ...squareRoots], [POWER, 2, -1]],\r\n          ];\r\n          args = getTail(expr);\r\n      }\r\n      let isNegative = false;\r\n      let hasNegative = false;\r\n      args = args.map((x) => {\r\n          var _a;\r\n          if (getFunctionName(x) === NEGATE) {\r\n              hasNegative = true;\r\n              isNegative = !isNegative;\r\n              return getArg(x, 1);\r\n          }\r\n          const val = (_a = getNumberValue(x)) !== null && _a !== void 0 ? _a : NaN;\r\n          if (val < 0) {\r\n              hasNegative = true;\r\n              isNegative = !isNegative;\r\n              return -val;\r\n          }\r\n          return x;\r\n      });\r\n      if (isNegative) {\r\n          const val = (_a = getNumberValue(args[0])) !== null && _a !== void 0 ? _a : NaN;\r\n          if (isFinite(val)) {\r\n              args = getTail(flatten([MULTIPLY, -val, ...args.slice(1)], MULTIPLY));\r\n          }\r\n          else {\r\n              args = getTail(flatten([MULTIPLY, -1, ...args], MULTIPLY));\r\n          }\r\n      }\r\n      else if (hasNegative) {\r\n          args = getTail(flatten([MULTIPLY, ...args], MULTIPLY));\r\n      }\r\n      else {\r\n          args = getTail(flatten([MULTIPLY, ...args], MULTIPLY));\r\n      }\r\n      args = args.filter((x) => getNumberValue(x) !== 1);\r\n      if (args.length === 0)\r\n          return 1;\r\n      if (args.length === 1)\r\n          return args[0];\r\n      return [MULTIPLY, ...args];\r\n  }\r\n  function canonicalPowerForm(expr, engine) {\r\n      var _a, _b;\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== POWER) {\r\n          return applyArgs(expr, (x) => canonicalPowerForm(x));\r\n      }\r\n      expr = ungroup(expr);\r\n      if (getArgCount(expr) !== 2)\r\n          return expr;\r\n      const arg1 = canonicalPowerForm(getArg(expr, 1));\r\n      const val1 = (_a = getNumberValue(arg1)) !== null && _a !== void 0 ? _a : NaN;\r\n      const arg2 = canonicalPowerForm(getArg(expr, 2));\r\n      const val2 = (_b = getNumberValue(arg2)) !== null && _b !== void 0 ? _b : NaN;\r\n      if (val2 === 0)\r\n          return 1;\r\n      if (val2 === 1)\r\n          return arg1;\r\n      if (val1 === -1 && val2 === -1)\r\n          return -1;\r\n      if (val1 === 1 && val2 === -1)\r\n          return 1;\r\n      if (val1 === 1)\r\n          return 1;\r\n      return expr;\r\n  }\r\n  function canonicalNegateForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (head === NEGATE) {\r\n          expr = ungroup(expr);\r\n          const arg = getArg(expr, 1);\r\n          if (typeof arg === 'number') {\r\n              expr = -arg;\r\n          }\r\n          else if (arg && isNumberObject(arg)) {\r\n              if (getNumberValue(arg) === 0)\r\n                  return 0;\r\n              if (arg.num[0] === '-') {\r\n                  expr = { num: arg.num.slice(1) };\r\n              }\r\n              else if (arg.num[0] === '+') {\r\n                  expr = { num: '-' + arg.num.slice(1) };\r\n              }\r\n              else {\r\n                  expr = { num: '-' + arg.num };\r\n              }\r\n          }\r\n          else if (getFunctionName(arg) === MULTIPLY) {\r\n              let fact = getArg(arg, 1);\r\n              if (typeof fact === 'number') {\r\n                  fact = -fact;\r\n              }\r\n              else if (isNumberObject(fact)) {\r\n                  if (fact.num[0] === '-') {\r\n                      fact = { num: fact.num.slice(1) };\r\n                  }\r\n                  else {\r\n                      fact = { num: '-' + fact.num };\r\n                  }\r\n              }\r\n              else {\r\n                  return [MULTIPLY, -1, fact, ...getTail(arg).slice(1)];\r\n              }\r\n              return [MULTIPLY, fact, ...getTail(arg).slice(1)];\r\n          }\r\n          else {\r\n              return [MULTIPLY, -1, arg];\r\n          }\r\n      }\r\n      else if (head) {\r\n          return applyArgs(expr, (x) => canonicalNegateForm(x));\r\n      }\r\n      return expr;\r\n  }\r\n  function canonicalNumberForm(expr, engine) {\r\n      if (getFunctionHead(expr)) {\r\n          return applyArgs(expr, (x) => canonicalNumberForm(x));\r\n      }\r\n      if (typeof expr === 'number') {\r\n          if (isNaN(expr)) {\r\n              return { num: 'NaN' };\r\n          }\r\n          else if (!isFinite(expr) && expr > 0) {\r\n              return { num: 'Infinity' };\r\n          }\r\n          else if (!isFinite(expr) && expr < 0) {\r\n              return { num: '-Infinity' };\r\n          }\r\n      }\r\n      else if (isNumberObject(expr)) {\r\n          if (isNaN(Number(expr.num))) {\r\n              return { num: 'NaN' };\r\n          }\r\n          if (expr.num.endsWith('n')) {\r\n              return { num: expr.num.slice(0, -1) };\r\n          }\r\n      }\r\n      return expr;\r\n  }\r\n  function canonicalSubtractForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== SUBTRACT) {\r\n          return applyArgs(expr, (x) => canonicalSubtractForm(x));\r\n      }\r\n      if (getArgCount(expr) !== 2)\r\n          return expr;\r\n      const arg1 = canonicalSubtractForm(getArg(expr, 1));\r\n      const val1 = getNumberValue(arg1);\r\n      const arg2 = canonicalSubtractForm(getArg(expr, 2));\r\n      const val2 = getNumberValue(arg2);\r\n      if (val1 === 0) {\r\n          if (val2 === 0)\r\n              return 0;\r\n          return canonicalSubtractForm([ADD, arg1, applyNegate(arg2)]);\r\n      }\r\n      return canonicalSubtractForm([ADD, arg1, applyNegate(arg2)]);\r\n  }\r\n  function canonicalRootForm(expr, engine) {\r\n      const head = getFunctionHead(expr);\r\n      if (!head)\r\n          return expr;\r\n      if (head !== ROOT && head !== SQRT) {\r\n          return applyArgs(expr, (x) => canonicalRootForm(x));\r\n      }\r\n      if (getArgCount(expr) < 1)\r\n          return expr;\r\n      const arg1 = canonicalRootForm(getArg(expr, 1));\r\n      let arg2 = 2;\r\n      if (getArgCount(expr) > 1) {\r\n          arg2 = canonicalPowerForm(getArg(expr, 2));\r\n      }\r\n      if (getNumberValue(arg2) === 1) {\r\n          return arg1;\r\n      }\r\n      return [POWER, arg1, [DIVIDE, 1, arg2]];\r\n  }\r\n  function isValidJSONNumber(num) {\r\n      if (typeof num === 'string') {\r\n          const val = Number(num);\r\n          if (num[0] === '+')\r\n              num = num.slice(1);\r\n          if (val.toString() === num) {\r\n              if (isNaN(val) || !isFinite(val)) {\r\n                  return val.toString();\r\n              }\r\n              return val;\r\n          }\r\n      }\r\n      return num;\r\n  }\r\n  function fullForm(expr, engine) {\r\n      if (expr === null)\r\n          return null;\r\n      if (Array.isArray(expr)) {\r\n          return expr.map((x, i) => {\r\n              if (i === 0) {\r\n                  return x;\r\n              }\r\n              return fullForm(x);\r\n          });\r\n      }\r\n      if (typeof expr === 'object') {\r\n          const keys = Object.keys(expr);\r\n          if (keys.length === 1) {\r\n              if (isNumberObject(expr)) {\r\n                  const val = isValidJSONNumber(expr.num);\r\n                  if (typeof val === 'number')\r\n                      return val;\r\n                  return { num: val };\r\n              }\r\n              if (isFunctionObject(expr)) {\r\n                  return expr.fn.map((x) => fullForm(x));\r\n              }\r\n              if (isSymbolObject(expr)) {\r\n                  return expr.sym;\r\n              }\r\n          }\r\n          else {\r\n              if (isFunctionObject(expr)) {\r\n                  expr.fn = expr.fn.map((x) => fullForm(x));\r\n              }\r\n          }\r\n      }\r\n      return expr;\r\n  }\r\n  function strippedMetadataForm(expr, engine) {\r\n      if (typeof expr === 'number' || typeof expr === 'string') {\r\n          return expr;\r\n      }\r\n      if (Array.isArray(expr)) {\r\n          return expr.map((x) => strippedMetadataForm(x));\r\n      }\r\n      if (typeof expr === 'object') {\r\n          if ('num' in expr) {\r\n              const val = isValidJSONNumber(expr.num);\r\n              if (typeof val === 'number')\r\n                  return val;\r\n              return { num: val };\r\n          }\r\n          else if ('fn' in expr) {\r\n              return expr.fn.map((x) => strippedMetadataForm(x));\r\n          }\r\n          else if ('dict' in expr) {\r\n              return {\r\n                  dict: Object.fromEntries(Object.entries(expr.dict).map((keyValue) => {\r\n                      return [keyValue[0], strippedMetadataForm(keyValue[1])];\r\n                  })),\r\n              };\r\n          }\r\n      }\r\n      return null;\r\n  }\r\n  function objectLiteralForm(expr, engine) {\r\n      if (typeof expr === 'number') {\r\n          return { num: expr.toString() };\r\n      }\r\n      if (typeof expr === 'string') {\r\n          return { sym: expr };\r\n      }\r\n      if (Array.isArray(expr) && expr.length > 0) {\r\n          return { fn: expr.map((x) => objectLiteralForm(x)) };\r\n      }\r\n      if (typeof expr === 'object' && 'fn' in expr) {\r\n          return Object.assign(Object.assign({}, expr), { fn: expr.fn.map((x) => objectLiteralForm(x)) });\r\n      }\r\n      return expr;\r\n  }\r\n  function sortedForm(expr, engine) {\r\n      const v = engine.getVars(expr);\r\n      return canonicalOrder(engine, Array.from(v).sort(), expr);\r\n  }\r\n  function canonicalDomainForm(dom, _engine) {\r\n      return dom;\r\n  }\r\n  function canonicalForm(expr, engine) {\r\n      return engine.format(expr, [\r\n          'canonical-number',\r\n          'canonical-exp',\r\n          'canonical-root',\r\n          'canonical-subtract',\r\n          'canonical-divide',\r\n          'canonical-power',\r\n          'canonical-multiply',\r\n          'canonical-negate',\r\n          'canonical-add',\r\n          'flatten',\r\n          'canonical-list',\r\n          'canonical-domain',\r\n          'sorted',\r\n          'full',\r\n      ]);\r\n  }\r\n  function flattenForm(expr, engine) {\r\n      return flattenAssociative(flattenIdempotent(flattenInvolution(expr, engine), engine), engine);\r\n  }\r\n  function format$1(expr, forms, engine) {\r\n      let result = expr;\r\n      for (const form of forms) {\r\n          const fn = {\r\n              'canonical': canonicalForm,\r\n              'canonical-add': canonicalAddForm,\r\n              'canonical-divide': canonicalDivideForm,\r\n              'canonical-exp': canonicalExpForm,\r\n              'canonical-list': canonicalListForm,\r\n              'canonical-multiply': canonicalMultiplyForm,\r\n              'canonical-power': canonicalPowerForm,\r\n              'canonical-negate': canonicalNegateForm,\r\n              'canonical-number': canonicalNumberForm,\r\n              'canonical-root': canonicalRootForm,\r\n              'canonical-subtract': canonicalSubtractForm,\r\n              'full': fullForm,\r\n              'flatten': flattenForm,\r\n              'sorted': sortedForm,\r\n              'stripped-metadata': strippedMetadataForm,\r\n              'object-literal': objectLiteralForm,\r\n              'canonical-domain': canonicalDomainForm,\r\n          }[form];\r\n          if (!fn) {\r\n              console.error('Unknown form ' + form);\r\n              return null;\r\n          }\r\n          result = fn(result, engine);\r\n      }\r\n      return result;\r\n  }\n\n  function numeratorDenominator(expr) {\r\n      var _a;\r\n      if (getFunctionName(expr) !== MULTIPLY)\r\n          return [null, null];\r\n      const numerator = [];\r\n      const denominator = [];\r\n      const args = getTail(expr);\r\n      for (const arg of args) {\r\n          if (getFunctionName(arg) === POWER) {\r\n              if (getFunctionName(getArg(arg, 2)) === NEGATE) {\r\n                  denominator.push([POWER, getArg(arg, 1), getArg(getArg(arg, 2), 1)]);\r\n              }\r\n              else {\r\n                  const exponentVal = (_a = getNumberValue(getArg(arg, 2))) !== null && _a !== void 0 ? _a : NaN;\r\n                  if (exponentVal === -1) {\r\n                      denominator.push(getArg(arg, 1));\r\n                  }\r\n                  else if (exponentVal < 0) {\r\n                      denominator.push([\r\n                          POWER,\r\n                          getArg(arg, 1),\r\n                          applyNegate(getArg(arg, 2)),\r\n                      ]);\r\n                  }\r\n                  else {\r\n                      numerator.push(arg);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              numerator.push(arg);\r\n          }\r\n      }\r\n      return [numerator, denominator];\r\n  }\r\n  function serializeRoot(serializer, style, base, degree) {\r\n      degree = degree !== null && degree !== void 0 ? degree : 2;\r\n      if (style === 'solidus') {\r\n          return (serializer.wrapShort(base) + '^{1\\\\/' + serializer.serialize(degree) + '}');\r\n      }\r\n      else if (style === 'quotient') {\r\n          return (serializer.wrapShort(base) +\r\n              '^{\\\\frac{1}{' +\r\n              serializer.serialize(degree) +\r\n              '}}');\r\n      }\r\n      const degreeValue = getNumberValue(degree);\r\n      if (degreeValue === 2) {\r\n          return '\\\\sqrt{' + serializer.serialize(base) + '}';\r\n      }\r\n      return ('\\\\sqrt[' +\r\n          serializer.serialize(degree) +\r\n          ']{' +\r\n          serializer.serialize(base) +\r\n          '}');\r\n  }\r\n  function parseRoot(lhs, scanner, _minPrec) {\r\n      if (!scanner.match('\\\\sqrt'))\r\n          return [lhs, null];\r\n      const degree = scanner.matchOptionalLatexArgument();\r\n      const base = scanner.matchRequiredLatexArgument();\r\n      if (base === null) {\r\n          if (degree !== null)\r\n              return [lhs, [ROOT, NOTHING, degree]];\r\n          return [lhs, [SQRT]];\r\n      }\r\n      if (degree !== null)\r\n          return [lhs, [ROOT, base, degree]];\r\n      return [lhs, [SQRT, base]];\r\n  }\r\n  function parseMinusSign(lhs, scanner, minPrec) {\r\n      if (276 < minPrec)\r\n          return [lhs, null];\r\n      const index = scanner.index;\r\n      if (!scanner.match('-'))\r\n          return [lhs, null];\r\n      const rhs = scanner.matchExpression(lhs === null ? 400 : 277);\r\n      if (rhs === null) {\r\n          scanner.index = index;\r\n          return [lhs, null];\r\n      }\r\n      if (lhs === null)\r\n          return [null, [NEGATE, rhs]];\r\n      return [null, [SUBTRACT, lhs, rhs]];\r\n  }\r\n  function parsePlusSign(lhs, scanner, minPrec) {\r\n      if (275 < minPrec)\r\n          return [lhs, null];\r\n      const index = scanner.index;\r\n      if (!scanner.match('+'))\r\n          return [lhs, null];\r\n      const rhs = scanner.matchExpression(lhs === null ? 400 : 275);\r\n      if (rhs === null) {\r\n          scanner.index = index;\r\n          return [lhs, null];\r\n      }\r\n      if (lhs === null)\r\n          return [null, rhs];\r\n      return scanner.applyOperator(ADD, lhs, rhs);\r\n  }\r\n  function serializeAdd(serializer, expr) {\r\n      var _a, _b;\r\n      serializer.level -= 1;\r\n      const name = getFunctionName(expr);\r\n      let result = '';\r\n      let arg = getArg(expr, 1);\r\n      let argWasNumber = !Number.isNaN((_a = getNumberValue(arg)) !== null && _a !== void 0 ? _a : NaN);\r\n      if (name === NEGATE) {\r\n          result = '-' + serializer.wrap(arg, 276);\r\n      }\r\n      else if (name === ADD) {\r\n          result = serializer.serialize(arg);\r\n          const last = getArgCount(expr) + 1;\r\n          for (let i = 2; i < last; i++) {\r\n              arg = getArg(expr, i);\r\n              const val = (_b = getNumberValue(arg)) !== null && _b !== void 0 ? _b : NaN;\r\n              const argIsNumber = !Number.isNaN(val);\r\n              let done = false;\r\n              if (arg !== null) {\r\n                  if (argWasNumber) {\r\n                      const rational = getRationalValue(arg);\r\n                      if (rational) {\r\n                          const [numer, denom] = rational;\r\n                          if (isFinite(numer) && isFinite(denom) && denom !== 1) {\r\n                              result +=\r\n                                  serializer.options.invisiblePlus + serializer.serialize(arg);\r\n                              done = true;\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n              if (!done) {\r\n                  if (val < 0) {\r\n                      result += serializer.serialize(arg);\r\n                  }\r\n                  else if (getFunctionName(arg) === NEGATE) {\r\n                      result += serializer.wrap(arg, 275);\r\n                  }\r\n                  else {\r\n                      const term = serializer.wrap(arg, 275);\r\n                      if (term[0] === '-' || term[0] === '+') {\r\n                          result += term;\r\n                      }\r\n                      else {\r\n                          result = result + '+' + term;\r\n                      }\r\n                  }\r\n              }\r\n              argWasNumber = argIsNumber;\r\n          }\r\n      }\r\n      else if (name === SUBTRACT) {\r\n          const arg2 = getArg(expr, 2);\r\n          if (arg2 !== null) {\r\n              result = serializer.wrap(arg, 275) + '-' + serializer.wrap(arg2, 275);\r\n          }\r\n          else {\r\n              result = serializer.wrap(arg, 275);\r\n          }\r\n      }\r\n      serializer.level += 1;\r\n      return result;\r\n  }\r\n  function serializeMultiply(serializer, expr) {\r\n      var _a;\r\n      if (expr === null)\r\n          return '';\r\n      serializer.level -= 1;\r\n      let result = '';\r\n      const [numer, denom] = numeratorDenominator(expr);\r\n      if (numer !== null && denom !== null && denom.length > 0) {\r\n          if (denom.length === 1 && denom[0] === 1) {\r\n              if (numer.length === 0) {\r\n                  result = '1';\r\n              }\r\n              else if (numer.length === 1) {\r\n                  result = serializer.serialize(numer[0]);\r\n              }\r\n              else {\r\n                  result = serializeMultiply(serializer, [MULTIPLY, ...numer]);\r\n              }\r\n          }\r\n          else {\r\n              result = serializer.serialize([\r\n                  DIVIDE,\r\n                  numer.length === 1 ? numer[0] : [MULTIPLY, ...numer],\r\n                  denom.length === 1 ? denom[0] : [MULTIPLY, ...denom],\r\n              ]);\r\n          }\r\n      }\r\n      if (result) {\r\n          serializer.level += 1;\r\n          return result;\r\n      }\r\n      let isNegative = false;\r\n      let arg = null;\r\n      const count = getArgCount(expr) + 1;\r\n      for (let i = 1; i < count; i++) {\r\n          arg = getArg(expr, i);\r\n          if (arg !== null) {\r\n              let term;\r\n              if (typeof arg === 'number' || isNumberObject(arg)) {\r\n                  term = serializer.serialize(arg);\r\n                  if (term === '-1' && !result) {\r\n                      result = '-';\r\n                  }\r\n                  else {\r\n                      if (term[0] === '-') {\r\n                          term = term.slice(1);\r\n                          isNegative = !isNegative;\r\n                      }\r\n                      result = result\r\n                          ? joinLatex([result, serializer.options.multiply, term])\r\n                          : term;\r\n                  }\r\n              }\r\n              else if (getFunctionName(arg) === POWER &&\r\n                  !isNaN(getNumberValue((_a = getArg(arg, 1)) !== null && _a !== void 0 ? _a : NaN))) {\r\n                  result = result\r\n                      ? joinLatex([\r\n                          result,\r\n                          serializer.options.multiply,\r\n                          serializer.serialize(arg),\r\n                      ])\r\n                      : serializer.serialize(arg);\r\n              }\r\n              else {\r\n                  if (getFunctionName(arg) === NEGATE) {\r\n                      arg = getArg(arg, 1);\r\n                      isNegative = !isNegative;\r\n                  }\r\n                  term = serializer.wrap(arg, 390);\r\n                  if (!result) {\r\n                      result = term;\r\n                  }\r\n                  else {\r\n                      if (!serializer.options.invisibleMultiply) {\r\n                          result = joinLatex([result, term]);\r\n                      }\r\n                      else {\r\n                          result = joinLatex([\r\n                              result,\r\n                              serializer.options.invisibleMultiply,\r\n                              term,\r\n                          ]);\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      serializer.level += 1;\r\n      return isNegative ? '-' + result : result;\r\n  }\r\n  function parseFraction(lhs, scanner, _minPrec) {\r\n      var _a, _b, _c, _d;\r\n      if (!scanner.match('\\\\frac'))\r\n          return [lhs, null];\r\n      const numer = (_a = scanner.matchRequiredLatexArgument()) !== null && _a !== void 0 ? _a : MISSING;\r\n      const denom = (_b = scanner.matchRequiredLatexArgument()) !== null && _b !== void 0 ? _b : MISSING;\r\n      if (getFunctionName(numer) === 'PartialDerivative' &&\r\n          (getFunctionName(denom) === 'PartialDerivative' ||\r\n              (getFunctionName(denom) === MULTIPLY &&\r\n                  getFunctionName(getArg(denom, 1)) === 'PartialDerivative'))) {\r\n          const degree = (_c = getArg(numer, 3)) !== null && _c !== void 0 ? _c : NOTHING;\r\n          let fn = getArg(numer, 1);\r\n          if (fn === null || fn === NOTHING) {\r\n              fn = (_d = scanner.matchExpression()) !== null && _d !== void 0 ? _d : NOTHING;\r\n          }\r\n          let vars = [];\r\n          if (getFunctionName(denom) === MULTIPLY) {\r\n              for (const arg of getTail(denom)) {\r\n                  if (getFunctionHead(arg) === 'PartialDerivative') {\r\n                      vars.push(getArg(arg, 2));\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              vars.push(getArg(denom, 2));\r\n          }\r\n          if (vars.length > 1) {\r\n              vars = [LIST, ...vars];\r\n          }\r\n          return [\r\n              lhs,\r\n              ['PartialDerivative', fn, vars, degree === NOTHING ? 1 : degree],\r\n          ];\r\n      }\r\n      return [lhs, [DIVIDE, numer, denom]];\r\n  }\r\n  function serializeFraction(serializer, expr) {\r\n      console.assert(getFunctionName(expr) === DIVIDE);\r\n      if (getArgCount(expr) === 1)\r\n          return serializer.serialize(getArg(expr, 1));\r\n      const style = getFractionStyle(expr, serializer.level);\r\n      if (style === 'inline-solidus' || style === 'nice-solidus') {\r\n          const numerStr = serializer.wrapShort(getArg(expr, 1));\r\n          const denomStr = serializer.wrapShort(getArg(expr, 2));\r\n          if (style === 'nice-solidus') {\r\n              return `^{${numerStr}}\\\\!\\\\!/\\\\!_{${denomStr}}`;\r\n          }\r\n          return `${numerStr}\\\\/${denomStr}`;\r\n      }\r\n      else if (style === 'reciprocal') {\r\n          return (serializer.wrap(getArg(expr, 1)) +\r\n              serializer.wrap(getArg(expr, 2)) +\r\n              '^{-1}');\r\n      }\r\n      else if (style === 'factor') {\r\n          return ('\\\\frac{1}{' +\r\n              serializer.serialize(getArg(expr, 2)) +\r\n              '}' +\r\n              serializer.wrap(getArg(expr, 1)));\r\n      }\r\n      return ('\\\\frac{' +\r\n          serializer.serialize(getArg(expr, 1)) +\r\n          '}{' +\r\n          serializer.serialize(getArg(expr, 2)) +\r\n          '}');\r\n  }\r\n  function serializePower(serializer, expr) {\r\n      const arg1 = getArg(expr, 1);\r\n      const arg2 = getArg(expr, 2);\r\n      if (arg2 === null) {\r\n          return serializer.serialize(arg1);\r\n      }\r\n      if (arg1 === null) {\r\n          return '';\r\n      }\r\n      const name = getFunctionName(expr);\r\n      if (name === SQRT || name === ROOT) {\r\n          const style = getRootStyle(expr, serializer.level);\r\n          return serializeRoot(serializer, style, getArg(expr, 1), getArg(expr, 2));\r\n      }\r\n      const val2 = getNumberValue(arg2);\r\n      if (val2 === -1) {\r\n          return serializer.serialize([DIVIDE, '1', arg1]);\r\n      }\r\n      else if (val2 < 0) {\r\n          return serializer.serialize([DIVIDE, '1', [POWER, arg1, -val2]]);\r\n      }\r\n      else if (getFunctionName(arg2) === DIVIDE) {\r\n          if (getNumberValue(getArg(arg2, 1)) === 1) {\r\n              const style = getRootStyle(expr, serializer.level);\r\n              return serializeRoot(serializer, style, arg1, getArg(arg2, 2));\r\n          }\r\n      }\r\n      else if (getFunctionName(arg2) === POWER) {\r\n          if (getNumberValue(getArg(arg2, 2)) === -1) {\r\n              const style = getRootStyle(expr, serializer.level);\r\n              return serializeRoot(serializer, style, arg1, getArg(arg2, 1));\r\n          }\r\n      }\r\n      return serializer.wrapShort(arg1) + '^{' + serializer.serialize(arg2) + '}';\r\n  }\r\n  const DEFINITIONS_ARITHMETIC = [\r\n      { trigger: { symbol: '\\\\infty' }, parse: { num: 'Infinity' } },\r\n      {\r\n          name: COMPLEX_INFINITY,\r\n          trigger: { symbol: ['\\\\tilde', '\\\\infty'] },\r\n          serialize: '\\\\tilde\\\\infty',\r\n      },\r\n      {\r\n          name: COMPLEX_INFINITY,\r\n          trigger: { symbol: ['\\\\tilde', '<{>', '\\\\infty', '<}>'] },\r\n          serialize: '\\\\tilde\\\\infty',\r\n      },\r\n      { name: PI, trigger: { symbol: '\\\\pi' } },\r\n      { name: PI, trigger: { symbol: 'π' }, serialize: '\\\\pi' },\r\n      { name: EXPONENTIAL_E, trigger: { symbol: 'e' }, serialize: 'e' },\r\n      { name: IMAGINARY_I, trigger: { symbol: 'i' }, serialize: '\\\\imaginaryI' },\r\n      { name: IMAGINARY_I, trigger: { symbol: '\\\\imaginaryI' } },\r\n      {\r\n          name: ADD,\r\n          trigger: { prefix: '+', infix: '+' },\r\n          parse: parsePlusSign,\r\n          serialize: serializeAdd,\r\n          associativity: 'both',\r\n          precedence: 275,\r\n      },\r\n      {\r\n          name: NEGATE,\r\n          trigger: { prefix: '-' },\r\n          parse: parseMinusSign,\r\n          associativity: 'left',\r\n          precedence: 665,\r\n      },\r\n      {\r\n          name: SUBTRACT,\r\n          trigger: { infix: '-' },\r\n          parse: parseMinusSign,\r\n          associativity: 'both',\r\n          precedence: 275,\r\n      },\r\n      {\r\n          name: MULTIPLY,\r\n          trigger: { infix: '\\\\times' },\r\n          serialize: serializeMultiply,\r\n          associativity: 'both',\r\n          precedence: 390,\r\n      },\r\n      {\r\n          name: MULTIPLY,\r\n          trigger: { infix: '\\\\cdot' },\r\n          serialize: serializeMultiply,\r\n          associativity: 'both',\r\n          precedence: 390,\r\n      },\r\n      {\r\n          name: MULTIPLY,\r\n          trigger: { infix: '*' },\r\n          serialize: serializeMultiply,\r\n          associativity: 'both',\r\n          precedence: 390,\r\n      },\r\n      {\r\n          name: DIVIDE,\r\n          trigger: '\\\\frac',\r\n          parse: parseFraction,\r\n          serialize: serializeFraction,\r\n          requiredLatexArg: 2,\r\n      },\r\n      {\r\n          name: DIVIDE,\r\n          trigger: { infix: '\\\\/' },\r\n          serialize: serializeFraction,\r\n          associativity: 'non',\r\n          precedence: 660,\r\n      },\r\n      {\r\n          name: DIVIDE,\r\n          trigger: { infix: '/' },\r\n          serialize: serializeFraction,\r\n          associativity: 'non',\r\n          precedence: 660,\r\n      },\r\n      {\r\n          name: DIVIDE,\r\n          trigger: { infix: '\\\\div' },\r\n          serialize: serializeFraction,\r\n          associativity: 'non',\r\n          precedence: 660,\r\n      },\r\n      {\r\n          name: POWER,\r\n          trigger: { infix: '^' },\r\n          associativity: 'non',\r\n          precedence: 720,\r\n          serialize: serializePower,\r\n      },\r\n      {\r\n          name: POWER,\r\n          trigger: { infix: ['*', '*'] },\r\n          associativity: 'non',\r\n          precedence: 720,\r\n          serialize: serializePower,\r\n      },\r\n      {\r\n          name: SQRT,\r\n          trigger: '\\\\sqrt',\r\n          optionalLatexArg: 1,\r\n          requiredLatexArg: 1,\r\n          parse: parseRoot,\r\n          serialize: serializePower,\r\n      },\r\n      {\r\n          name: ROOT,\r\n          trigger: '\\\\sqrt',\r\n          optionalLatexArg: 1,\r\n          requiredLatexArg: 1,\r\n          parse: parseRoot,\r\n      },\r\n      {\r\n          name: 'Norm',\r\n          trigger: { matchfix: '\\\\lVert' },\r\n          closeFence: '\\\\rVert',\r\n      },\r\n      {\r\n          name: 'Norm',\r\n          trigger: { matchfix: '\\\\|' },\r\n          closeFence: '\\\\|',\r\n      },\r\n      {\r\n          name: 'Norm',\r\n          trigger: { matchfix: ['|', '|'] },\r\n          closeFence: ['|', '|'],\r\n      },\r\n      {\r\n          name: 'Abs',\r\n          trigger: { matchfix: '|' },\r\n          closeFence: '|',\r\n      },\r\n      {\r\n          name: 'Abs',\r\n          trigger: { matchfix: '\\\\lvert' },\r\n          closeFence: '\\\\rvert',\r\n      },\r\n      {\r\n          name: 'Factorial',\r\n          trigger: { postfix: '!' },\r\n          precedence: 810,\r\n      },\r\n      {\r\n          name: 'Factorial2',\r\n          trigger: { postfix: ['!', '!'] },\r\n          precedence: 810,\r\n      },\r\n  ];\n\n  function parseTrig(_lhs, scanner, _minPrec) {\r\n      var _a;\r\n      const op = scanner.next();\r\n      let isInverse = false;\r\n      let primeLevel = 0;\r\n      scanner.skipSpace();\r\n      if (scanner.match('^')) {\r\n          scanner.skipSpace();\r\n          if (scanner.match('<{>')) {\r\n              scanner.skipSpace();\r\n              if (scanner.match('-') && scanner.match('1')) {\r\n                  isInverse = true;\r\n              }\r\n              do {\r\n                  if (scanner.match('\\\\doubleprime')) {\r\n                      primeLevel += 2;\r\n                  }\r\n                  if (scanner.match('\\\\prime')) {\r\n                      primeLevel += 1;\r\n                  }\r\n                  if (scanner.match(\"'\")) {\r\n                      primeLevel += 1;\r\n                  }\r\n              } while (!scanner.match('<}>') && !scanner.atEnd);\r\n          }\r\n          let done = false;\r\n          while (!done) {\r\n              scanner.skipSpace();\r\n              if (scanner.match('\\\\doubleprime')) {\r\n                  primeLevel += 2;\r\n              }\r\n              else if (scanner.match('\\\\prime')) {\r\n                  primeLevel += 1;\r\n              }\r\n              else if (scanner.match(\"'\")) {\r\n                  primeLevel += 1;\r\n              }\r\n              else {\r\n                  done = true;\r\n              }\r\n          }\r\n      }\r\n      let head = (_a = {\r\n          '\\\\arcsin': 'Arcsin',\r\n          '\\\\arccos': 'Arccos',\r\n          '\\\\arctan': 'Arctan',\r\n          '\\\\arctg': 'Arctan',\r\n          '\\\\arcctg': 'Arctan',\r\n          '\\\\arcsec': 'Arcsec',\r\n          '\\\\arccsc': ' Arccsc',\r\n          '\\\\arsinh': 'Arsinh',\r\n          '\\\\arcosh': 'Arcosh',\r\n          '\\\\artanh': 'Artanh',\r\n          '\\\\arcsech': 'Arcsech',\r\n          '\\\\arccsch': 'Arcsch',\r\n          '\\\\ch': 'Cosh',\r\n          '\\\\cos': 'Cos',\r\n          '\\\\cosec': 'Csc',\r\n          '\\\\cosh': 'Csch',\r\n          '\\\\cot': 'Cot',\r\n          '\\\\cotg': 'Cot',\r\n          '\\\\coth': 'Coth',\r\n          '\\\\csc': 'Csc',\r\n          '\\\\ctg': 'Cot',\r\n          '\\\\cth': 'Coth',\r\n          '\\\\sec': 'Sec',\r\n          '\\\\sin': 'Sin',\r\n          '\\\\sinh': 'Sinh',\r\n          '\\\\sh': 'Sinh',\r\n          '\\\\tan': 'Tan',\r\n          '\\\\tanh': 'Tanh',\r\n          '\\\\tg': 'Tan',\r\n          '\\\\th': 'Tanh',\r\n      }[op]) !== null && _a !== void 0 ? _a : op;\r\n      if (isInverse) {\r\n          head = [INVERSE_FUNCTION, head];\r\n      }\r\n      if (primeLevel >= 1) {\r\n          head = [DERIVATIVE, primeLevel, head];\r\n      }\r\n      const args = scanner.matchArguments('implicit');\r\n      if (args === null) {\r\n          return [null, head];\r\n      }\r\n      return [null, [head, ...args]];\r\n  }\r\n  const DEFINITIONS_TRIGONOMETRY = [\r\n      {\r\n          name: 'Arcsin',\r\n          trigger: '\\\\arcsin',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arccos',\r\n          trigger: '\\\\arccos',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arctan',\r\n          trigger: '\\\\arctan',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arctan',\r\n          trigger: '\\\\arctg',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arccot',\r\n          trigger: '\\\\arcctg',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arcsec',\r\n          trigger: '\\\\arcsec',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arccsc',\r\n          trigger: '\\\\arccsc',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arsinh',\r\n          trigger: '\\\\arsinh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arcosh',\r\n          trigger: '\\\\arcosh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Artanh',\r\n          trigger: '\\\\artanh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arsech',\r\n          trigger: '\\\\arsech',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Arcsch',\r\n          trigger: '\\\\arcsch',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cosh',\r\n          trigger: '\\\\ch',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cosec',\r\n          trigger: '\\\\cosec',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cosh',\r\n          trigger: '\\\\cosh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cot',\r\n          trigger: '\\\\cot',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cot',\r\n          trigger: '\\\\cotg',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Coth',\r\n          trigger: '\\\\coth',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Csc',\r\n          trigger: '\\\\csc',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cot',\r\n          trigger: '\\\\ctg',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Coth',\r\n          trigger: '\\\\cth',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Sec',\r\n          trigger: '\\\\sec',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Sinh',\r\n          trigger: '\\\\sinh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Sinh',\r\n          trigger: '\\\\sh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Tan',\r\n          trigger: '\\\\tan',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Tanh',\r\n          trigger: '\\\\tanh',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Tan',\r\n          trigger: '\\\\tg',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Tanh',\r\n          trigger: '\\\\th',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Cos',\r\n          trigger: '\\\\cos',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Sin',\r\n          trigger: '\\\\sin',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n      {\r\n          name: 'Tan',\r\n          trigger: '\\\\tan',\r\n          arguments: 'implicit',\r\n          parse: parseTrig,\r\n      },\r\n  ];\n\n  const DEFINITIONS_ALGEBRA = [\r\n      {\r\n          name: 'To',\r\n          trigger: { infix: '\\\\to' },\r\n          precedence: 270,\r\n      },\r\n  ];\n\n  function parseIntegral(lhs, scanner, _minPrec) {\r\n      if (!scanner.match('\\\\int'))\r\n          return [lhs, null];\r\n      let sup = NOTHING;\r\n      let sub = NOTHING;\r\n      let done = false;\r\n      while (!done) {\r\n          scanner.skipSpace();\r\n          if (scanner.match('_')) {\r\n              sub = scanner.matchRequiredLatexArgument();\r\n          }\r\n          else if (scanner.match('^')) {\r\n              sup = scanner.matchRequiredLatexArgument();\r\n          }\r\n          else {\r\n              done = true;\r\n          }\r\n      }\r\n      const fn = scanner.matchBalancedExpression('<{>', '<}>');\r\n      return [lhs, ['Integral', fn !== null && fn !== void 0 ? fn : '', sup, sub]];\r\n  }\r\n  function serializeIntegral(_serializer, _expr) {\r\n      return '';\r\n  }\r\n  const DEFINITIONS_CALCULUS = [\r\n      {\r\n          trigger: { symbol: '\\\\int' },\r\n          parse: parseIntegral,\r\n          serialize: serializeIntegral,\r\n      },\r\n  ];\n\n  const DEFINITIONS_SYMBOLS = [\r\n      { trigger: { symbol: '\\\\alpha' }, parse: '\\u03b1' },\r\n      { trigger: { symbol: '\\\\beta' }, parse: '\\u03b2' },\r\n      { trigger: { symbol: '\\\\gamma' }, parse: '\\u03b3' },\r\n      { trigger: { symbol: '\\\\delta' }, parse: '\\u03b4' },\r\n      { trigger: { symbol: '\\\\epsilon' }, parse: '\\u03f5' },\r\n      { trigger: { symbol: '\\\\varepsilon' }, parse: '\\u03b5' },\r\n      { trigger: { symbol: '\\\\zeta' }, parse: '\\u03b6' },\r\n      { trigger: { symbol: '\\\\eta' }, parse: '\\u03b7' },\r\n      { trigger: { symbol: '\\\\theta' }, parse: '\\u03b8' },\r\n      { trigger: { symbol: '\\\\vartheta' }, parse: '\\u03d1' },\r\n      { trigger: { symbol: '\\\\iota' }, parse: '\\u03b9' },\r\n      { trigger: { symbol: '\\\\kappa' }, parse: '\\u03ba' },\r\n      { trigger: { symbol: '\\\\varkappa' }, parse: '\\u03f0' },\r\n      { trigger: { symbol: '\\\\lambda' }, parse: '\\u03bb' },\r\n      { trigger: { symbol: '\\\\mu' }, parse: '\\u03bc' },\r\n      { trigger: { symbol: '\\\\nu' }, parse: '\\u03bd' },\r\n      { trigger: { symbol: '\\\\xi' }, parse: '\\u03be' },\r\n      { trigger: { symbol: '\\\\omicron' }, parse: '\\u03bf' },\r\n      { trigger: { symbol: '\\\\varpi' }, parse: '\\u03d6' },\r\n      { trigger: { symbol: '\\\\rho' }, parse: '\\u03c1' },\r\n      { trigger: { symbol: '\\\\varrho' }, parse: '\\u03f1' },\r\n      { trigger: { symbol: '\\\\sigma' }, parse: '\\u03c3' },\r\n      { trigger: { symbol: '\\\\varsigma' }, parse: '\\u03c2' },\r\n      { trigger: { symbol: '\\\\tau' }, parse: '\\u03c4' },\r\n      { trigger: { symbol: '\\\\phi' }, parse: '\\u03d5' },\r\n      { trigger: { symbol: '\\\\varphi' }, parse: '\\u03c6' },\r\n      { trigger: { symbol: '\\\\upsilon' }, parse: '\\u03c5' },\r\n      { trigger: { symbol: '\\\\chi' }, parse: '\\u03c7' },\r\n      { trigger: { symbol: '\\\\psi' }, parse: '\\u03c8' },\r\n      { trigger: { symbol: '\\\\omega' }, parse: '\\u03c9' },\r\n      { trigger: { symbol: '\\\\Gamma' }, parse: '\\u0393' },\r\n      { trigger: { symbol: '\\\\Delta' }, parse: '\\u0394' },\r\n      { trigger: { symbol: '\\\\Theta' }, parse: '\\u0398' },\r\n      { trigger: { symbol: '\\\\Lambda' }, parse: '\\u039b' },\r\n      { trigger: { symbol: '\\\\Xi' }, parse: '\\u039e' },\r\n      { trigger: { symbol: '\\\\Pi' }, parse: '\\u03a0' },\r\n      { trigger: { symbol: '\\\\Sigma' }, parse: '\\u03a3' },\r\n      { trigger: { symbol: '\\\\Upsilon' }, parse: '\\u03a5' },\r\n      { trigger: { symbol: '\\\\Phi' }, parse: '\\u03a6' },\r\n      { trigger: { symbol: '\\\\Psi' }, parse: '\\u03a8' },\r\n      { trigger: { symbol: '\\\\Omega' }, parse: '\\u03a9' },\r\n      { trigger: { symbol: '\\\\digamma' }, parse: '\\u03dd' },\r\n      { trigger: { symbol: '\\\\aleph' }, parse: '\\u2135' },\r\n      { trigger: { symbol: '\\\\beth' }, parse: '\\u2136' },\r\n      { trigger: { symbol: '\\\\daleth' }, parse: '\\u2138' },\r\n      { trigger: { symbol: '\\\\gimel' }, parse: '\\u2137' },\r\n      { trigger: { symbol: '\\\\Finv' }, parse: '\\u2132' },\r\n      { trigger: { symbol: '\\\\Game' }, parse: '\\u2141' },\r\n      { trigger: { symbol: '\\\\wp' }, parse: '\\u2118' },\r\n      { trigger: { symbol: '\\\\eth' }, parse: '\\u00f0' },\r\n      { trigger: { symbol: '\\\\mho' }, parse: '\\u2127' },\r\n      { trigger: { symbol: '\\\\clubsuit' }, parse: '\\u2663' },\r\n      { trigger: { symbol: '\\\\heartsuit' }, parse: '\\u2661' },\r\n      { trigger: { symbol: '\\\\spadesuit' }, parse: '\\u2660' },\r\n      { trigger: { symbol: '\\\\diamondsuit' }, parse: '\\u2662' },\r\n      { trigger: { symbol: '\\\\sharp' }, parse: '\\u266f' },\r\n      { trigger: { symbol: '\\\\flat' }, parse: '\\u266d' },\r\n      { trigger: { symbol: '\\\\natural' }, parse: '\\u266e' },\r\n  ];\n\n  function triggerLength(trigger) {\r\n      if (Array.isArray(trigger))\r\n          return trigger.length;\r\n      return 1;\r\n  }\r\n  function triggerString(trigger) {\r\n      return tokensToString(trigger);\r\n  }\r\n  function indexLatexDictionary(dic, onError) {\r\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\r\n      const result = {\r\n          lookahead: 1,\r\n          name: new Map(),\r\n          prefix: [],\r\n          infix: [],\r\n          postfix: [],\r\n          matchfix: [],\r\n          superfix: [],\r\n          subfix: [],\r\n          symbol: [],\r\n          environment: new Map(),\r\n      };\r\n      for (const record of dic) {\r\n          if (record.parse === undefined) {\r\n              record.parse = record.name;\r\n          }\r\n          if (typeof record.trigger === 'string') {\r\n              record.trigger = { symbol: record.trigger };\r\n          }\r\n          if (typeof record.serialize === 'string') {\r\n              if (((_a = record.trigger) === null || _a === void 0 ? void 0 : _a.symbol) !== undefined) {\r\n                  if (/#[0-9]/.test(record.serialize)) {\r\n                      onError({ code: 'unexpected-argument', arg: record.name });\r\n                  }\r\n              }\r\n          }\r\n          if (record.serialize === undefined) {\r\n              if (((_b = record.trigger) === null || _b === void 0 ? void 0 : _b.postfix) !== undefined) {\r\n                  record.serialize = '#1' + triggerString(record.trigger.postfix);\r\n              }\r\n              else if (((_c = record.trigger) === null || _c === void 0 ? void 0 : _c.prefix) !== undefined) {\r\n                  record.serialize = triggerString(record.trigger.prefix) + '#1';\r\n              }\r\n              else if (((_d = record.trigger) === null || _d === void 0 ? void 0 : _d.infix) !== undefined) {\r\n                  record.serialize = '#1' + triggerString(record.trigger.infix) + '#2';\r\n              }\r\n              else if (((_e = record.trigger) === null || _e === void 0 ? void 0 : _e.symbol) !== undefined) {\r\n                  record.serialize = triggerString(record.trigger.symbol);\r\n              }\r\n              else if (((_f = record.trigger) === null || _f === void 0 ? void 0 : _f.superfix) !== undefined) {\r\n                  record.serialize =\r\n                      '#1^{' + triggerString((_g = record.trigger) === null || _g === void 0 ? void 0 : _g.superfix) + '}';\r\n              }\r\n              else if (((_h = record.trigger) === null || _h === void 0 ? void 0 : _h.subfix) !== undefined) {\r\n                  record.serialize = '#1_{' + triggerString((_j = record.trigger) === null || _j === void 0 ? void 0 : _j.subfix) + '}';\r\n              }\r\n              else {\r\n                  record.serialize = '';\r\n              }\r\n          }\r\n          if (((_k = record.trigger) === null || _k === void 0 ? void 0 : _k.infix) !== undefined) {\r\n              if (record.precedence === undefined) {\r\n                  onError({\r\n                      code: 'syntax-error',\r\n                      arg: 'Infix operators require a precedence',\r\n                  });\r\n              }\r\n              if (!record.associativity) {\r\n                  record.associativity = 'non';\r\n              }\r\n          }\r\n          if (((_l = record.trigger) === null || _l === void 0 ? void 0 : _l.symbol) !== undefined) {\r\n              record.arguments = (_m = record.arguments) !== null && _m !== void 0 ? _m : '';\r\n              record.optionalLatexArg = (_o = record.optionalLatexArg) !== null && _o !== void 0 ? _o : 0;\r\n              record.requiredLatexArg = (_p = record.requiredLatexArg) !== null && _p !== void 0 ? _p : 0;\r\n          }\r\n          if (((_q = record.trigger) === null || _q === void 0 ? void 0 : _q.matchfix) !== undefined) {\r\n              if (record.parse !== 'function' && !record.closeFence) {\r\n                  onError({\r\n                      code: 'syntax-error',\r\n                      arg: 'Matchfix operators require a close fence or a custom parse function',\r\n                  });\r\n              }\r\n          }\r\n          if (record.trigger !== undefined) {\r\n              [\r\n                  'infix',\r\n                  'prefix',\r\n                  'postfix',\r\n                  'symbol',\r\n                  'matchfix',\r\n                  'superfix',\r\n                  'subfix',\r\n              ].forEach((x) => {\r\n                  const n = triggerLength(record.trigger[x]);\r\n                  result.lookahead = Math.max(result.lookahead, n);\r\n                  if (result[x][n] === undefined) {\r\n                      result[x][n] = new Map();\r\n                  }\r\n                  result[x][n].set(triggerString(record.trigger[x]), record);\r\n              });\r\n              if (record.trigger.environment !== undefined) {\r\n                  result.environment.set(record.trigger.environment, record);\r\n              }\r\n          }\r\n          if (record.name) {\r\n              result.name.set(triggerString(record.name), record);\r\n          }\r\n          if (record.trigger === undefined && !record.name) {\r\n              onError({\r\n                  code: 'syntax-error',\r\n                  arg: 'Need at least a trigger or a name',\r\n              });\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  const DEFAULT_LATEX_DICTIONARY = {\r\n      algebra: DEFINITIONS_ALGEBRA,\r\n      arithmetic: DEFINITIONS_ARITHMETIC,\r\n      calculus: DEFINITIONS_CALCULUS,\r\n      core: DEFINITIONS_CORE,\r\n      inequalities: DEFINITIONS_INEQUALITIES,\r\n      other: DEFINITIONS_OTHERS,\r\n      physics: [\r\n          {\r\n              name: 'mu-0',\r\n              trigger: { symbol: ['\\\\mu', '_', '0'] },\r\n          },\r\n      ],\r\n      symbols: DEFINITIONS_SYMBOLS,\r\n      trigonometry: DEFINITIONS_TRIGONOMETRY,\r\n  };\n\n  const DEFAULT_LATEX_NUMBER_OPTIONS = {\r\n      precision: 15,\r\n      positiveInfinity: '\\\\infty',\r\n      negativeInfinity: '-\\\\infty',\r\n      notANumber: '\\\\operatorname{NaN}',\r\n      decimalMarker: '.',\r\n      groupSeparator: ',',\r\n      exponentProduct: '\\\\cdot',\r\n      beginExponentMarker: '10^{',\r\n      endExponentMarker: '}',\r\n      notation: 'auto',\r\n      truncationMarker: '\\\\ldots',\r\n      beginRepeatingDigits: '\\\\overline{',\r\n      endRepeatingDigits: '}',\r\n      imaginaryNumber: '\\\\imaginaryI',\r\n  };\r\n  const DEFAULT_PARSE_LATEX_OPTIONS = Object.assign(Object.assign({}, DEFAULT_LATEX_NUMBER_OPTIONS), { invisibleOperator: MULTIPLY, skipSpace: true, parseArgumentsOfUnknownLatexCommands: true, parseNumbers: true, promoteUnknownSymbols: /^[a-zA-Z]$/, promoteUnknownFunctions: /^[fg]$/, invisiblePlusOperator: ADD, preserveLatex: false });\r\n  const DEFAULT_SERIALIZE_LATEX_OPTIONS = Object.assign(Object.assign({}, DEFAULT_LATEX_NUMBER_OPTIONS), { invisibleMultiply: '', invisiblePlus: '', multiply: '\\\\times' });\r\n  function replaceLatex(template, replacement) {\r\n      var _a;\r\n      console.assert(typeof template === 'string');\r\n      console.assert(template.length > 0);\r\n      let result = template;\r\n      for (let i = 0; i < replacement.length; i++) {\r\n          let s = (_a = replacement[i]) !== null && _a !== void 0 ? _a : '';\r\n          if (/[a-zA-Z*]/.test(s[0])) {\r\n              const m = result.match(new RegExp('(.*)#' + Number(i + 1).toString()));\r\n              if (m && /\\\\[a-zA-Z*]+/.test(m[1])) {\r\n                  s = ' ' + s;\r\n              }\r\n          }\r\n          result = result.replace('#' + Number(i + 1).toString(), s);\r\n      }\r\n      return result;\r\n  }\n\n  class Scanner {\r\n      constructor(tokens, options, dictionary, onError) {\r\n          this.index = 0;\r\n          this.options = Object.assign(Object.assign({}, DEFAULT_PARSE_LATEX_OPTIONS), options);\r\n          this.tokens = tokens;\r\n          this.onError = (err) => {\r\n              return onError(Object.assign(Object.assign({}, err), { before: this.latexBefore(), after: this.latexAfter() }));\r\n          };\r\n          this.dictionary = dictionary;\r\n          let def;\r\n          this.invisibleOperatorPrecedence = 0;\r\n          if (this.options.invisibleOperator) {\r\n              def = this.dictionary.name.get(this.options.invisibleOperator);\r\n              if (def === undefined) {\r\n                  onError({\r\n                      code: 'unknown-operator',\r\n                      arg: 'invisible operator ' + this.options.invisibleOperator,\r\n                  });\r\n              }\r\n              else if (def.precedence === undefined) {\r\n                  onError({\r\n                      code: 'expected-operator',\r\n                      arg: 'invisible operator ' + this.options.invisibleOperator,\r\n                  });\r\n              }\r\n              else {\r\n                  this.invisibleOperatorPrecedence = def.precedence;\r\n              }\r\n          }\r\n      }\r\n      clone(start, end) {\r\n          return new Scanner(this.tokens.slice(start, end), this.options, this.dictionary, this.onError);\r\n      }\r\n      balancedClone(open, close, silentError = true) {\r\n          if (!this.matchAll(open)) {\r\n              if (!silentError) {\r\n                  this.onError({\r\n                      code: 'syntax-error',\r\n                      arg: 'Expected ' + tokensToString(open),\r\n                  });\r\n              }\r\n              return null;\r\n          }\r\n          const start = this.index;\r\n          let end = start;\r\n          let level = 1;\r\n          while (!this.atEnd && level !== 0) {\r\n              this.skipSpace();\r\n              end = this.index;\r\n              if (this.matchAll(close)) {\r\n                  level -= 1;\r\n              }\r\n              else if (this.matchAll(open)) {\r\n                  level += 1;\r\n              }\r\n              else {\r\n                  this.next();\r\n              }\r\n          }\r\n          if (level !== 0) {\r\n              if (!silentError) {\r\n                  this.onError({\r\n                      code: 'unbalanced-symbols',\r\n                      arg: tokensToString(open) + tokensToString(close),\r\n                  });\r\n              }\r\n              this.index = start;\r\n              return null;\r\n          }\r\n          return this.clone(start, end);\r\n      }\r\n      get atEnd() {\r\n          return this.index >= this.tokens.length;\r\n      }\r\n      get peek() {\r\n          return this.tokens[this.index];\r\n      }\r\n      latex(start, end) {\r\n          return tokensToString(this.tokens.slice(start, end));\r\n      }\r\n      latexAhead(n) {\r\n          return tokensToString(this.tokens.slice(this.index, this.index + n));\r\n      }\r\n      latexBefore() {\r\n          return this.latex(0, this.index);\r\n      }\r\n      latexAfter() {\r\n          return this.latex(this.index);\r\n      }\r\n      lookAhead() {\r\n          let n = Math.min(this.dictionary.lookahead, this.tokens.length - this.index);\r\n          const result = [];\r\n          while (n > 0) {\r\n              result[n] = this.latexAhead(n--);\r\n          }\r\n          return result;\r\n      }\r\n      peekDefinition(kind) {\r\n          let defs;\r\n          if (kind === 'operator') {\r\n              defs = this.lookAhead().map((x, n) => {\r\n                  var _a, _b, _c, _d, _e;\r\n                  return (_d = (_b = (_a = this.dictionary.infix[n]) === null || _a === void 0 ? void 0 : _a.get(x)) !== null && _b !== void 0 ? _b : (_c = this.dictionary.postfix[n]) === null || _c === void 0 ? void 0 : _c.get(x)) !== null && _d !== void 0 ? _d : (_e = this.dictionary.prefix[n]) === null || _e === void 0 ? void 0 : _e.get(x);\r\n              });\r\n          }\r\n          else {\r\n              defs = this.lookAhead().map((x, n) => { var _a; return (_a = this.dictionary[kind][n]) === null || _a === void 0 ? void 0 : _a.get(x); });\r\n          }\r\n          for (let i = defs.length; i > 0; i--) {\r\n              if (defs[i] !== undefined)\r\n                  return [defs[i], i];\r\n          }\r\n          return [null, 0];\r\n      }\r\n      next() {\r\n          return this.tokens[this.index++];\r\n      }\r\n      skipSpace() {\r\n          if (this.peek === '<{>' &&\r\n              !this.atEnd &&\r\n              this.tokens[this.index + 1] === '<}>') {\r\n              this.index += 2;\r\n              return true;\r\n          }\r\n          if (!this.options.skipSpace)\r\n              return false;\r\n          let result = false;\r\n          while (this.match('<space>')) {\r\n              result = true;\r\n          }\r\n          return result;\r\n      }\r\n      match(target) {\r\n          if (this.tokens[this.index] === target) {\r\n              this.index++;\r\n              return true;\r\n          }\r\n          return false;\r\n      }\r\n      matchAll(target) {\r\n          let matched = true;\r\n          if (typeof target === 'string') {\r\n              target = [target];\r\n          }\r\n          let i = 0;\r\n          do {\r\n              matched = this.tokens[this.index + i] === target[i++];\r\n          } while (matched && i < target.length);\r\n          if (matched) {\r\n              this.index += i;\r\n          }\r\n          return matched;\r\n      }\r\n      matchAny(targets) {\r\n          if (targets.includes(this.tokens[this.index])) {\r\n              return this.tokens[this.index++];\r\n          }\r\n          return '';\r\n      }\r\n      matchWhile(targets) {\r\n          const result = [];\r\n          while (targets.includes(this.tokens[this.index])) {\r\n              result.push(this.tokens[this.index++]);\r\n          }\r\n          return result;\r\n      }\r\n      matchSign() {\r\n          let isNegative = false;\r\n          let done = false;\r\n          while (!done) {\r\n              if (this.skipSpace()) {\r\n                  done = false;\r\n              }\r\n              else if (this.match('-')) {\r\n                  isNegative = !isNegative;\r\n                  done = false;\r\n              }\r\n              else if (this.match('+')) {\r\n                  done = false;\r\n              }\r\n              else {\r\n                  done = true;\r\n              }\r\n          }\r\n          return isNegative ? '-' : '+';\r\n      }\r\n      matchDecimalDigits() {\r\n          let result = '';\r\n          let done = false;\r\n          while (!done) {\r\n              result += this.matchWhile([\r\n                  '0',\r\n                  '1',\r\n                  '2',\r\n                  '3',\r\n                  '4',\r\n                  '5',\r\n                  '6',\r\n                  '7',\r\n                  '8',\r\n                  '9',\r\n              ]).join('');\r\n              done = true;\r\n              if (this.options.groupSeparator) {\r\n                  const savedIndex = this.index;\r\n                  if (this.match(this.options.groupSeparator)) {\r\n                      if (/[0-9]/.test(this.peek)) {\r\n                          done = false;\r\n                      }\r\n                      else {\r\n                          this.index = savedIndex;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          return result;\r\n      }\r\n      matchSignedInteger() {\r\n          const savedIndex = this.index;\r\n          const sign = this.matchSign();\r\n          const result = this.matchDecimalDigits();\r\n          if (result)\r\n              return (sign === '-' ? '-' : '') + result;\r\n          this.index = savedIndex;\r\n          return '';\r\n      }\r\n      matchExponent() {\r\n          const savedIndex = this.index;\r\n          let result = '';\r\n          if (this.matchAny(['e', 'E', 'd', 'D'])) {\r\n              const exponent = this.matchSignedInteger();\r\n              if (exponent) {\r\n                  result = 'e' + exponent;\r\n              }\r\n          }\r\n          if (result)\r\n              return result;\r\n          if (this.match('\\\\times')) {\r\n              this.skipSpace();\r\n              if (this.match('1') && this.match('0') && this.match('^')) {\r\n                  if (/[0-9]/.test(this.peek)) {\r\n                      return 'e' + this.next();\r\n                  }\r\n                  if (this.match('<{>')) {\r\n                      this.skipSpace();\r\n                      const exponent = this.matchSignedInteger();\r\n                      this.skipSpace();\r\n                      if (this.match('<}>') && exponent) {\r\n                          return 'e' + exponent;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          this.index = savedIndex;\r\n          return '';\r\n      }\r\n      matchNumber() {\r\n          var _a, _b, _c;\r\n          if (!this.options.parseNumbers)\r\n              return '';\r\n          const savedIndex = this.index;\r\n          const sign = this.matchSign();\r\n          let result = this.matchDecimalDigits();\r\n          if (!result) {\r\n              this.index = savedIndex;\r\n              return '';\r\n          }\r\n          if (this.match((_a = this.options.decimalMarker) !== null && _a !== void 0 ? _a : '')) {\r\n              result += '.' + ((_b = this.matchDecimalDigits()) !== null && _b !== void 0 ? _b : '');\r\n          }\r\n          result += (_c = this.matchExponent()) !== null && _c !== void 0 ? _c : '';\r\n          if (result)\r\n              return (sign === '-' ? '-' : '') + result;\r\n          this.index = savedIndex;\r\n          return '';\r\n      }\r\n      matchOperator(kind, lhs = null, minPrec = 0) {\r\n          const [def, n] = this.peekDefinition(kind);\r\n          if (def === null)\r\n              return null;\r\n          if (typeof def.parse === 'function') {\r\n              let rhs = null;\r\n              [lhs, rhs] = def.parse(lhs, this, minPrec);\r\n              if (rhs === null)\r\n                  return null;\r\n              return this.applyInvisibleOperator(lhs, rhs);\r\n          }\r\n          let prec = def.precedence;\r\n          if (prec < minPrec)\r\n              return null;\r\n          prec += def.associativity === 'left' ? 1 : 0;\r\n          this.index += n;\r\n          const rhs = this.matchExpression(prec);\r\n          return this.applyInvisibleOperator(...this.applyOperator(def.parse, lhs, rhs));\r\n      }\r\n      matchArguments(kind) {\r\n          if (!kind)\r\n              return null;\r\n          const savedIndex = this.index;\r\n          let result = null;\r\n          const group = this.matchMatchfixOperator();\r\n          if (kind === 'group' && getFunctionName(group) === PARENTHESES) {\r\n              result = getTail(group);\r\n          }\r\n          else if (kind === 'implicit') {\r\n              if (getFunctionName(group) === PARENTHESES) {\r\n                  result = getTail(group);\r\n              }\r\n              else if (group !== null) {\r\n                  result = [group];\r\n              }\r\n              else {\r\n                  const primary = this.matchPrimary();\r\n                  if (primary !== null)\r\n                      result = [primary];\r\n              }\r\n          }\r\n          else {\r\n              this.index = savedIndex;\r\n          }\r\n          return result;\r\n      }\r\n      matchMatchfixOperator() {\r\n          const [def] = this.peekDefinition('matchfix');\r\n          if (def === null)\r\n              return null;\r\n          if (typeof def.parse === 'function') {\r\n              return this.applyInvisibleOperator(...def.parse(null, this, 0));\r\n          }\r\n          const trigger = typeof def.trigger === 'object' ? def.trigger.matchfix : def.trigger;\r\n          const arg = this.matchBalancedExpression(trigger, def.closeFence, this.onError);\r\n          if (!arg)\r\n              return [def.parse];\r\n          return [def.parse, arg];\r\n      }\r\n      matchDefinition(kind) {\r\n          const [def, tokenCount] = this.peekDefinition(kind);\r\n          if (typeof (def === null || def === void 0 ? void 0 : def.parse) === 'function') {\r\n              const [, result] = def.parse(null, this, 0);\r\n              return [def, result];\r\n          }\r\n          this.index += tokenCount;\r\n          return [def, null];\r\n      }\r\n      matchSymbol() {\r\n          var _a, _b, _c, _d;\r\n          const [def, result] = this.matchDefinition('symbol');\r\n          if (result !== null)\r\n              return result;\r\n          if (def === null) {\r\n              if ((_a = this.options.promoteUnknownFunctions) === null || _a === void 0 ? void 0 : _a.test(this.peek)) {\r\n                  const name = this.next();\r\n                  const group = this.matchMatchfixOperator();\r\n                  if (group === null)\r\n                      return name;\r\n                  if (getFunctionName(group) !== PARENTHESES)\r\n                      return null;\r\n                  return [name, ...getTail(group)];\r\n              }\r\n              if ((_b = this.options.promoteUnknownSymbols) === null || _b === void 0 ? void 0 : _b.test(this.peek)) {\r\n                  return this.next();\r\n              }\r\n              return this.matchUnknownLatexCommand();\r\n          }\r\n          const requiredArgs = [];\r\n          const optionalArgs = [];\r\n          let arg;\r\n          let i = (_c = def.optionalLatexArg) !== null && _c !== void 0 ? _c : 0;\r\n          while (i > 0) {\r\n              arg = this.matchOptionalLatexArgument();\r\n              if (arg !== null)\r\n                  optionalArgs.push(arg);\r\n              i--;\r\n          }\r\n          i = (_d = def.requiredLatexArg) !== null && _d !== void 0 ? _d : 0;\r\n          while (i > 0) {\r\n              arg = this.matchRequiredLatexArgument();\r\n              if (arg === null)\r\n                  this.onError({ code: 'expected-argument' });\r\n              if (arg !== null)\r\n                  requiredArgs.push(arg);\r\n              i--;\r\n          }\r\n          const args = this.matchArguments(def.arguments);\r\n          if (args === null) {\r\n              if (requiredArgs.length === 0 && optionalArgs.length === 0) {\r\n                  return def.parse;\r\n              }\r\n              return [def.parse, ...requiredArgs, ...optionalArgs];\r\n          }\r\n          return [def.parse, ...requiredArgs, ...args, ...optionalArgs];\r\n      }\r\n      matchOptionalLatexArgument() {\r\n          this.skipSpace();\r\n          return this.matchBalancedExpression('[', ']');\r\n      }\r\n      matchRequiredLatexArgument() {\r\n          this.skipSpace();\r\n          const expr = this.matchBalancedExpression('<{>', '<}>');\r\n          if (expr)\r\n              return expr;\r\n          if (/^[0-9]$/.test(this.peek)) {\r\n              return parseFloat(this.next());\r\n          }\r\n          if (/^[^\\\\#]$/.test(this.peek)) {\r\n              return this.next();\r\n          }\r\n          return this.matchExpression();\r\n      }\r\n      matchSupsub(lhs) {\r\n          let result = null;\r\n          this.skipSpace();\r\n          [\r\n              ['^', 'superfix'],\r\n              ['_', 'subfix'],\r\n          ].forEach((x) => {\r\n              var _a, _b, _c;\r\n              if (result !== null)\r\n                  return;\r\n              const [triggerChar, opKind] = x;\r\n              if (!this.match(triggerChar))\r\n                  return;\r\n              this.skipSpace();\r\n              const savedIndex = this.index;\r\n              let def;\r\n              let n = 0;\r\n              if (this.match('<{>')) {\r\n                  this.skipSpace();\r\n                  [def, n] = this.peekDefinition(opKind);\r\n                  this.index += n;\r\n                  this.skipSpace();\r\n                  if ((def === null || def === void 0 ? void 0 : def.name) && this.match('<}>')) {\r\n                      if (typeof def.parse === 'function') {\r\n                          result = def.parse(lhs, this, 0)[1];\r\n                      }\r\n                      else {\r\n                          result = [(_a = def.parse) !== null && _a !== void 0 ? _a : def.name, lhs];\r\n                      }\r\n                  }\r\n                  else {\r\n                      this.index = savedIndex;\r\n                  }\r\n              }\r\n              else {\r\n                  [def, n] = this.peekDefinition(opKind);\r\n                  if (def === null || def === void 0 ? void 0 : def.name) {\r\n                      this.index += n;\r\n                      if (typeof def.parse === 'function') {\r\n                          result = def.parse(lhs, this, 0)[1];\r\n                      }\r\n                      else {\r\n                          result = [(_b = def.parse) !== null && _b !== void 0 ? _b : def.name, lhs];\r\n                      }\r\n                  }\r\n              }\r\n              if (result === null) {\r\n                  def = (_c = this.dictionary.infix[1]) === null || _c === void 0 ? void 0 : _c.get(triggerChar);\r\n                  if (typeof (def === null || def === void 0 ? void 0 : def.parse) === 'function') {\r\n                      result = def.parse(lhs, this, 0)[1];\r\n                  }\r\n                  else if (typeof (def === null || def === void 0 ? void 0 : def.parse) === 'string') {\r\n                      [lhs, result] = this.applyOperator(def.parse, lhs, this.matchRequiredLatexArgument());\r\n                      result = this.applyInvisibleOperator(lhs, result);\r\n                  }\r\n                  else {\r\n                      result = this.applyInvisibleOperator(lhs, triggerChar);\r\n                  }\r\n              }\r\n              if (result !== null) {\r\n                  const args = this.matchArguments(def === null || def === void 0 ? void 0 : def.arguments);\r\n                  if (args !== null)\r\n                      result = [result, ...args];\r\n              }\r\n          });\r\n          return result;\r\n      }\r\n      matchPostfix(lhs) {\r\n          if (lhs === null)\r\n              return null;\r\n          const [def, n] = this.peekDefinition('postfix');\r\n          if (def === null)\r\n              return null;\r\n          if (typeof def.parse === 'function') {\r\n              [, lhs] = def.parse(lhs, this, 0);\r\n              if (lhs === null)\r\n                  return null;\r\n              return lhs;\r\n          }\r\n          this.index += n;\r\n          return [def.parse, lhs];\r\n      }\r\n      matchString() {\r\n          let result = '';\r\n          let done = this.atEnd;\r\n          while (!done) {\r\n              if (this.match('<space>')) {\r\n                  result += ' ';\r\n              }\r\n              else {\r\n                  const token = this.peek;\r\n                  if (token === ']') {\r\n                      done = true;\r\n                  }\r\n                  else if (!/^<({|}|\\$|\\$\\$|space)>$/.test(token)) {\r\n                      result += this.next();\r\n                  }\r\n                  else if (token[0] === '\\\\') {\r\n                      this.onError({ code: 'unexpected-command' });\r\n                      result += this.next();\r\n                  }\r\n                  else {\r\n                      done = true;\r\n                  }\r\n              }\r\n              done = done || this.atEnd;\r\n          }\r\n          return result;\r\n      }\r\n      matchEnvironmentName(command, envName) {\r\n          if (this.match(command)) {\r\n              const savedIndex = this.index;\r\n              if (this.match('<{>')) {\r\n                  const name = this.matchString();\r\n                  if (this.match('<}>') && name === envName) {\r\n                      return true;\r\n                  }\r\n              }\r\n              this.index = savedIndex;\r\n          }\r\n          return false;\r\n      }\r\n      matchTabular() {\r\n          const result = ['list'];\r\n          let row = ['list'];\r\n          let expr = null;\r\n          let done = false;\r\n          while (!this.atEnd && !done) {\r\n              if (this.match('&')) {\r\n                  row.push(expr);\r\n                  expr = null;\r\n              }\r\n              else if (this.match('\\\\\\\\') || this.match('\\\\cr')) {\r\n                  this.skipSpace();\r\n                  this.matchOptionalLatexArgument();\r\n                  if (expr !== null)\r\n                      row.push(expr);\r\n                  result.push(row);\r\n                  row = ['list'];\r\n                  expr = null;\r\n              }\r\n              else {\r\n                  const rhs = this.matchExpression();\r\n                  if (rhs === null)\r\n                      done = true;\r\n                  if (expr !== null) {\r\n                      expr = this.applyInvisibleOperator(expr, rhs);\r\n                  }\r\n                  else {\r\n                      expr = rhs;\r\n                  }\r\n              }\r\n          }\r\n          if (row.length > 1) {\r\n              result.push(row);\r\n          }\r\n          return result;\r\n      }\r\n      matchEnvironment() {\r\n          var _a;\r\n          if (this.match('\\\\begin')) {\r\n              if (this.match('<{>')) {\r\n                  const name = this.matchString();\r\n                  if (this.match('<}>')) {\r\n                      const start = this.index;\r\n                      let end = this.index;\r\n                      let level = 1;\r\n                      while (!this.atEnd && level !== 0) {\r\n                          end = this.index;\r\n                          if (this.matchEnvironmentName('\\\\begin', name)) {\r\n                              level += 1;\r\n                          }\r\n                          else if (this.matchEnvironmentName('\\\\end', name)) {\r\n                              level -= 1;\r\n                          }\r\n                          else {\r\n                              this.next();\r\n                          }\r\n                      }\r\n                      const def = this.dictionary.environment.get(name);\r\n                      if (typeof (def === null || def === void 0 ? void 0 : def.parse) === 'function') {\r\n                          return def.parse(null, this.clone(start, end), 0)[1];\r\n                      }\r\n                      return (_a = def === null || def === void 0 ? void 0 : def.parse) !== null && _a !== void 0 ? _a : null;\r\n                  }\r\n              }\r\n          }\r\n          return null;\r\n      }\r\n      applyOperator(op, lhs, rhs) {\r\n          var _a, _b, _c, _d;\r\n          const def = this.dictionary.name.get(op);\r\n          if (def === undefined) {\r\n              this.onError({ code: 'unknown-operator' });\r\n              return [lhs, rhs];\r\n          }\r\n          if (((_a = def.trigger) === null || _a === void 0 ? void 0 : _a.prefix) !== undefined && lhs === null && rhs !== null) {\r\n              return [null, [def.name, rhs]];\r\n          }\r\n          if (((_b = def.trigger) === null || _b === void 0 ? void 0 : _b.postfix) !== undefined && lhs !== null) {\r\n              return [null, [def.name, lhs]];\r\n          }\r\n          if ((((_c = def.trigger) === null || _c === void 0 ? void 0 : _c.matchfix) !== undefined ||\r\n              ((_d = def.trigger) === null || _d === void 0 ? void 0 : _d.infix) !== undefined) &&\r\n              lhs !== null &&\r\n              rhs !== null) {\r\n              if (def.associativity === 'non') {\r\n                  return [null, [op, lhs, rhs]];\r\n              }\r\n              if (getFunctionName(lhs) === op) {\r\n                  if (def.associativity === 'both') {\r\n                      if (getFunctionName(rhs) === op) {\r\n                          if (Array.isArray(lhs)) {\r\n                              return [null, lhs.concat(getTail(rhs))];\r\n                          }\r\n                          if (isFunctionObject(lhs)) {\r\n                              return [null, lhs.fn.concat(getTail(rhs))];\r\n                          }\r\n                      }\r\n                      else {\r\n                          if (Array.isArray(lhs)) {\r\n                              lhs.push(rhs);\r\n                          }\r\n                          if (isFunctionObject(lhs)) {\r\n                              lhs.fn.push(rhs);\r\n                          }\r\n                      }\r\n                      return [null, lhs];\r\n                  }\r\n                  if (def.associativity === 'left') {\r\n                      return [null, [op, lhs, rhs]];\r\n                  }\r\n                  if (Array.isArray(lhs)) {\r\n                      return [null, [op, lhs[1], [op, lhs[2], rhs]]];\r\n                  }\r\n                  if (isFunctionObject(lhs)) {\r\n                      lhs.fn[2] = [op, lhs.fn[2], rhs];\r\n                  }\r\n                  return [null, lhs];\r\n              }\r\n              else if (getFunctionName(rhs) === op) {\r\n                  if (def.associativity === 'both') {\r\n                      if (Array.isArray(rhs)) {\r\n                          rhs.splice(1, 0, lhs);\r\n                      }\r\n                      if (isFunctionObject(rhs)) {\r\n                          rhs.fn.splice(1, 0, lhs);\r\n                      }\r\n                      return [null, rhs];\r\n                  }\r\n                  if (def.associativity === 'right') {\r\n                      return [null, [op, lhs, rhs]];\r\n                  }\r\n                  if (Array.isArray(rhs)) {\r\n                      return [null, [op, rhs[1], [op, rhs[2], lhs]]];\r\n                  }\r\n                  if (isFunctionObject(rhs)) {\r\n                      rhs.fn[2] = [op, rhs.fn[2], lhs];\r\n                  }\r\n                  return [null, rhs];\r\n              }\r\n              return [null, [op, lhs, rhs]];\r\n          }\r\n          if (def.trigger.infix !== undefined) {\r\n              this.onError({ code: 'expected-operand' });\r\n              return [lhs, null];\r\n          }\r\n          return [lhs, null];\r\n      }\r\n      applyInvisibleOperator(lhs, rhs) {\r\n          if (lhs === null)\r\n              return rhs;\r\n          if (rhs === null)\r\n              return lhs;\r\n          if (this.options.invisiblePlusOperator) {\r\n              if ((typeof lhs === 'number' || isNumberObject(lhs)) &&\r\n                  getFunctionName(rhs) === DIVIDE) {\r\n                  [lhs, rhs] = this.applyOperator(this.options.invisiblePlusOperator, lhs, rhs);\r\n                  if (lhs === null)\r\n                      return rhs;\r\n                  return null;\r\n              }\r\n          }\r\n          if (this.options.invisibleOperator) {\r\n              [lhs, rhs] = this.applyOperator(this.options.invisibleOperator, lhs, rhs);\r\n              if (lhs === null)\r\n                  return rhs;\r\n              return null;\r\n          }\r\n          let fn = [LATEX_TOKENS];\r\n          if (getFunctionName(lhs) === LATEX_TOKENS) {\r\n              fn = fn.concat(getTail(lhs));\r\n          }\r\n          else {\r\n              fn.push(lhs);\r\n          }\r\n          if (rhs !== null) {\r\n              if (getFunctionName(rhs) === LATEX_TOKENS) {\r\n                  fn = fn.concat(getTail(rhs));\r\n              }\r\n              else {\r\n                  fn.push(rhs);\r\n              }\r\n          }\r\n          if (this.options.invisibleOperator) {\r\n              this.onError({ code: 'unexpected-sequence' });\r\n          }\r\n          return fn;\r\n      }\r\n      matchUnknownLatexCommand() {\r\n          const command = this.peek;\r\n          if (!command || command[0] !== '\\\\') {\r\n              return null;\r\n          }\r\n          this.next();\r\n          const optArgs = [];\r\n          const reqArgs = [];\r\n          let done = false;\r\n          do {\r\n              done = true;\r\n              let expr = this.matchOptionalLatexArgument();\r\n              if (expr !== null) {\r\n                  optArgs.push(expr);\r\n                  done = false;\r\n              }\r\n              this.skipSpace();\r\n              if (this.peek === '<{>') {\r\n                  expr = this.matchRequiredLatexArgument();\r\n                  if (expr !== null) {\r\n                      reqArgs.push(expr);\r\n                      done = false;\r\n                  }\r\n              }\r\n          } while (!done);\r\n          if (optArgs.length > 0 || reqArgs.length > 0) {\r\n              return [command, ...reqArgs, ...optArgs];\r\n          }\r\n          return command;\r\n      }\r\n      matchPrimary(_minPrec) {\r\n          let result = null;\r\n          const originalIndex = this.index;\r\n          const num = this.matchNumber();\r\n          if (num)\r\n              result = { num: num };\r\n          if (result === null)\r\n              result = this.matchMatchfixOperator();\r\n          if (result === null)\r\n              result = this.matchEnvironment();\r\n          if (result === null)\r\n              result = this.matchSymbol();\r\n          let supsub = null;\r\n          do {\r\n              supsub = this.matchSupsub(result);\r\n              result = supsub !== null && supsub !== void 0 ? supsub : result;\r\n          } while (supsub !== null);\r\n          let postfix = null;\r\n          do {\r\n              postfix = this.matchPostfix(result);\r\n              result = postfix !== null && postfix !== void 0 ? postfix : result;\r\n          } while (postfix !== null);\r\n          return this.decorate(result, originalIndex);\r\n      }\r\n      matchBalancedExpression(open, close, onError) {\r\n          const scanner = this.balancedClone(open, close);\r\n          if (!scanner) {\r\n              onError === null || onError === void 0 ? void 0 : onError({\r\n                  code: 'unbalanced-symbols',\r\n                  arg: tokensToString(open) + tokensToString(close),\r\n              });\r\n              return null;\r\n          }\r\n          const result = scanner.matchExpression();\r\n          if (!scanner.atEnd) {\r\n              onError === null || onError === void 0 ? void 0 : onError({\r\n                  code: 'unbalanced-symbols',\r\n                  arg: tokensToString(open) + tokensToString(close),\r\n              });\r\n          }\r\n          return result;\r\n      }\r\n      matchExpression(minPrec = 0) {\r\n          let lhs = null;\r\n          const originalIndex = this.index;\r\n          this.skipSpace();\r\n          lhs = this.matchPrimary(minPrec);\r\n          if (lhs === null)\r\n              lhs = this.matchOperator('prefix');\r\n          if (lhs === null)\r\n              return null;\r\n          let done = false;\r\n          while (!this.atEnd && !done) {\r\n              this.skipSpace();\r\n              let result = this.matchOperator('infix', lhs, minPrec);\r\n              if (result === null) {\r\n                  const [op] = this.peekDefinition('operator');\r\n                  if (op === null) {\r\n                      const rhs = this.matchExpression(this.invisibleOperatorPrecedence);\r\n                      if (rhs === null) {\r\n                          done = true;\r\n                      }\r\n                      else {\r\n                          result = this.applyInvisibleOperator(lhs, rhs);\r\n                      }\r\n                  }\r\n              }\r\n              if (result !== null) {\r\n                  lhs = result;\r\n              }\r\n              else {\r\n                  done = true;\r\n              }\r\n          }\r\n          return this.decorate(lhs, originalIndex);\r\n      }\r\n      decorate(expr, start) {\r\n          if (this.options.preserveLatex) {\r\n              const latex = this.latex(start, this.index);\r\n              if (Array.isArray(expr)) {\r\n                  expr = { latex, fn: expr };\r\n              }\r\n              else if (typeof expr === 'number') {\r\n                  expr = { latex, num: Number(expr).toString() };\r\n              }\r\n              else if (typeof expr === 'string') {\r\n                  expr = { latex, sym: expr };\r\n              }\r\n              else if (typeof expr === 'object' && expr !== null) {\r\n                  expr.latex = latex;\r\n              }\r\n          }\r\n          return expr;\r\n      }\r\n  }\n\n  function formatFractionalPart(m, options) {\r\n      const originalLength = m.length;\r\n      m = m.substr(0, options.precision - 2);\r\n      for (let i = 0; i < m.length - 16; i++) {\r\n          const offset = m.substr(0, i);\r\n          for (let j = 0; j < 17; j++) {\r\n              const cycle = m.substr(i, j + 1);\r\n              const times = Math.floor((m.length - offset.length) / cycle.length);\r\n              if (times > 1) {\r\n                  if ((offset + cycle.repeat(times + 1)).startsWith(m)) {\r\n                      if (cycle === '0') {\r\n                          return offset.replace(/(\\d{3})/g, '$1' + options.groupSeparator);\r\n                      }\r\n                      return (offset.replace(/(\\d{3})/g, '$1' + options.groupSeparator) +\r\n                          options.beginRepeatingDigits +\r\n                          cycle.replace(/(\\d{3})/g, '$1' + options.groupSeparator) +\r\n                          options.endRepeatingDigits);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      const hasDots = originalLength !== m.length;\r\n      m = m.replace(/(\\d{3})/g, '$1' + options.groupSeparator);\r\n      if (m.endsWith(options.groupSeparator)) {\r\n          m = m.slice(0, -1);\r\n      }\r\n      return m + (hasDots ? options.truncationMarker : '');\r\n  }\r\n  function formatExponent(exp, options) {\r\n      var _a;\r\n      if (!exp)\r\n          return '';\r\n      if (options.beginExponentMarker) {\r\n          return (options.beginExponentMarker + exp + ((_a = options.endExponentMarker) !== null && _a !== void 0 ? _a : ''));\r\n      }\r\n      return '10^{' + exp + '}';\r\n  }\r\n  function parseFloatToPrecision(num) {\r\n      return parseFloat(Number(num).toPrecision(15));\r\n  }\r\n  function serializeNumber(expr, options) {\r\n      var _a, _b;\r\n      let num;\r\n      if (typeof expr === 'number') {\r\n          num = expr;\r\n      }\r\n      else if (isNumberObject(expr)) {\r\n          num = expr.num;\r\n      }\r\n      else {\r\n          return '';\r\n      }\r\n      if (num === Infinity || num === 'Infinity') {\r\n          return options.positiveInfinity;\r\n      }\r\n      else if (num === -Infinity || num === '-Infinity') {\r\n          return options.negativeInfinity;\r\n      }\r\n      else if (num === 'NaN' || (typeof num === 'number' && Number.isNaN(num))) {\r\n          return options.notANumber;\r\n      }\r\n      if (typeof num === 'number') {\r\n          if (options.notation === 'engineering') {\r\n              return serializeEngineeringNotationNumber(parseFloatToPrecision(num), options);\r\n          }\r\n          return serializeAutoNotationNumber(num.toString(), options);\r\n      }\r\n      let sign = '';\r\n      if (num[0] === '-') {\r\n          sign = '-';\r\n          num = num.substr(1);\r\n      }\r\n      else if (num[0] === '+') {\r\n          num = num.substr(1);\r\n      }\r\n      while (num[0] === '0') {\r\n          num = num.substr(1);\r\n      }\r\n      if (num.length === 0)\r\n          return '0';\r\n      if (num[0] === '.')\r\n          num = '0' + num;\r\n      let exponent = '';\r\n      if (num.indexOf('.') >= 0) {\r\n          const m = num.match(/(\\d*)\\.(\\d*)([e|E]([-+]?[0-9]*))?/);\r\n          if (!m)\r\n              return '';\r\n          const base = m[1];\r\n          const fractionalPart = m[2].substring(0, Math.min(options.precision - base.length, m[2].length));\r\n          exponent = (_a = m[4]) !== null && _a !== void 0 ? _a : '';\r\n          if (base === '0') {\r\n              let p = 0;\r\n              while (fractionalPart[p] === '0' && p < fractionalPart.length) {\r\n                  p += 1;\r\n              }\r\n              let r = '';\r\n              if (p <= 4) {\r\n                  r = '0' + options.decimalMarker;\r\n                  r += fractionalPart.substr(0, p);\r\n                  r += formatFractionalPart(num.substr(r.length), options);\r\n              }\r\n              else if (p + 1 >= options.precision) {\r\n                  r = '0';\r\n                  sign = '';\r\n              }\r\n              else {\r\n                  r = num[p];\r\n                  const f = formatFractionalPart(num.substr(p + 1), options);\r\n                  if (f) {\r\n                      r += options.decimalMarker + f;\r\n                  }\r\n              }\r\n              if (r !== '0') {\r\n                  if (num.length - 1 > options.precision &&\r\n                      !(options.endRepeatingDigits && r.endsWith(options.endRepeatingDigits)) &&\r\n                      !(options.truncationMarker && r.endsWith(options.truncationMarker))) {\r\n                      r += options.truncationMarker;\r\n                  }\r\n                  if (p > 4) {\r\n                      r +=\r\n                          options.exponentProduct +\r\n                              formatExponent((1 - p).toString(), options);\r\n                  }\r\n              }\r\n              num = r;\r\n          }\r\n          else {\r\n              num = base.replace(/\\B(?=(\\d{3})+(?!\\d))/g, options.groupSeparator);\r\n              const f = formatFractionalPart(fractionalPart, options);\r\n              if (f) {\r\n                  num += options.decimalMarker + f;\r\n              }\r\n          }\r\n      }\r\n      else if (num.length > options.precision) {\r\n          const len = num.length;\r\n          let r = num[0];\r\n          const f = formatFractionalPart(num.substr(1), options);\r\n          if (f) {\r\n              r += options.decimalMarker + f;\r\n              if (options.endRepeatingDigits &&\r\n                  !r.endsWith(options.endRepeatingDigits)) {\r\n                  r += options.truncationMarker;\r\n              }\r\n          }\r\n          if (r !== '1') {\r\n              r += options.exponentProduct;\r\n          }\r\n          else {\r\n              r = '';\r\n          }\r\n          num = r + formatExponent((len - 2).toString(), options);\r\n      }\r\n      else {\r\n          const m = num.match(/([0-9]*)\\.?([0-9]*)([e|E]([-+]?[0-9]+))?/);\r\n          if (m) {\r\n              num = m[1];\r\n              if (m[2])\r\n                  num += options.decimalMarker + m[2];\r\n              exponent = (_b = m[4]) !== null && _b !== void 0 ? _b : '';\r\n          }\r\n          num = num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, options.groupSeparator);\r\n      }\r\n      const exponentString = formatExponent(exponent, options);\r\n      return (sign +\r\n          num +\r\n          (exponentString ? options.exponentProduct + exponentString : ''));\r\n  }\r\n  function serializeEngineeringNotationNumber(value, options) {\r\n      if (value === 0)\r\n          return '0';\r\n      const y = Math.abs(value);\r\n      let exponent = Math.round(Math.log10(y));\r\n      exponent = exponent - (exponent % 3);\r\n      if (y < 1000)\r\n          exponent = 0;\r\n      const significand = y / Math.pow(10, exponent);\r\n      let significandString = '';\r\n      const m = significand.toString().match(/^(.*)\\.(.*)$/);\r\n      if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {\r\n          significandString = m[1] + options.decimalMarker + m[2];\r\n      }\r\n      if (options.groupSeparator) {\r\n          significandString = formatFractionalPart(significand.toExponential(), options);\r\n      }\r\n      let exponentString = '';\r\n      if (exponent !== 0) {\r\n          exponentString = formatExponent(exponent.toString(), options);\r\n      }\r\n      return (value < 0 ? '-' : '') + significandString + exponentString;\r\n  }\r\n  function serializeAutoNotationNumber(valString, options) {\r\n      let m = valString.match(/^(.*)[e|E]([-+]?[0-9]+)$/i);\r\n      let exponent;\r\n      if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {\r\n          exponent = formatExponent(m[2], options);\r\n          if (exponent) {\r\n              exponent = options.exponentProduct + exponent;\r\n          }\r\n      }\r\n      let wholePart = valString;\r\n      let fractionalPart = '';\r\n      m = (exponent ? m[1] : valString).match(/^(.*)\\.(.*)$/);\r\n      if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {\r\n          wholePart = m[1];\r\n          fractionalPart = m[2];\r\n      }\r\n      if (options.groupSeparator) {\r\n          wholePart = wholePart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, options.groupSeparator);\r\n          fractionalPart = formatFractionalPart(fractionalPart, options);\r\n      }\r\n      if (fractionalPart)\r\n          fractionalPart = options.decimalMarker + fractionalPart;\r\n      return wholePart + fractionalPart + (exponent !== null && exponent !== void 0 ? exponent : '');\r\n  }\r\n  function serializeHexFloat(value) {\r\n      console.assert(Number.isFinite(value) && !Number.isInteger(value));\r\n      const digits = '0123456789abcdef';\r\n      const sign = value < 0 ? '-' : '';\r\n      value = Math.abs(value);\r\n      let significand = '';\r\n      let exponent = 0;\r\n      let wholePart = Math.trunc(value);\r\n      let fractionalPart = value - wholePart;\r\n      if (wholePart !== 0) {\r\n          while (wholePart % 2 === 0 && wholePart > 0) {\r\n              wholePart /= 2;\r\n              fractionalPart /= 2;\r\n              exponent += 1;\r\n          }\r\n      }\r\n      else {\r\n          let adjustedFractionalPart = fractionalPart;\r\n          while (adjustedFractionalPart * 2 < 2) {\r\n              adjustedFractionalPart *= 2;\r\n              exponent -= 1;\r\n          }\r\n          wholePart = Math.trunc(adjustedFractionalPart);\r\n          fractionalPart = adjustedFractionalPart - wholePart;\r\n      }\r\n      while (wholePart !== 0) {\r\n          significand = digits[wholePart % 16] + significand;\r\n          wholePart = Math.trunc(wholePart / 16);\r\n      }\r\n      if (!significand) {\r\n          significand = '0.';\r\n      }\r\n      else {\r\n          significand += '.';\r\n      }\r\n      if (fractionalPart === 0) {\r\n          significand += '0';\r\n      }\r\n      else {\r\n          while (fractionalPart > 0) {\r\n              const digit = Math.trunc(fractionalPart * 16);\r\n              significand += digits[digit];\r\n              fractionalPart = 16 * fractionalPart - digit;\r\n          }\r\n      }\r\n      return (sign +\r\n          '0x' +\r\n          significand +\r\n          'p' +\r\n          (exponent < 0 ? '-' : '') +\r\n          Number(Math.abs(exponent)).toString());\r\n  }\n\n  function getSymbolStyle(expr, _level) {\r\n      console.assert(typeof expr === 'string' || isSymbolObject(expr));\r\n      const sym = getSymbolName(expr);\r\n      if (sym === null)\r\n          return 'asis';\r\n      return sym.length > 1 ? 'upright' : 'asis';\r\n  }\r\n  function serializeMatchfix(serializer, expr, def) {\r\n      let segments = [];\r\n      if (typeof def.trigger.matchfix === 'string') {\r\n          segments.push(def.trigger.matchfix);\r\n      }\r\n      else if (Array.isArray(def.trigger.matchfix)) {\r\n          segments = [...def.trigger.matchfix];\r\n      }\r\n      if (getArgCount(expr) >= 1) {\r\n          let sep = '';\r\n          for (const arg of getTail(expr)) {\r\n              if (arg) {\r\n                  segments.push(sep);\r\n                  segments.push(serializer.serialize(arg));\r\n                  sep = def.separator;\r\n              }\r\n          }\r\n      }\r\n      segments.push(tokensToString(def.closeFence));\r\n      return joinLatex(segments);\r\n  }\r\n  function serializeOperator(serializer, expr, def) {\r\n      let result = '';\r\n      const count = getArgCount(expr);\r\n      const name = getFunctionName(expr);\r\n      if (def.trigger.superfix || def.trigger.subfix) {\r\n          if (count !== 1) {\r\n              serializer.onError({\r\n                  code: 'operator-requires-one-operand',\r\n                  arg: serializer.serializeSymbol(name),\r\n              });\r\n          }\r\n          return replaceLatex(def.serialize, [\r\n              serializer.serialize(getArg(expr, 1)),\r\n          ]);\r\n      }\r\n      if (def.trigger.postfix) {\r\n          if (count !== 1) {\r\n              serializer.onError({\r\n                  code: 'postfix-operator-requires-one-operand',\r\n                  arg: serializer.serializeSymbol(name),\r\n              });\r\n          }\r\n          return replaceLatex(def.serialize, [\r\n              serializer.wrap(getArg(expr, 1), def.precedence),\r\n          ]);\r\n      }\r\n      if (def.trigger.prefix) {\r\n          if (count !== 1) {\r\n              serializer.onError({\r\n                  code: 'prefix-operator-requires-one-operand',\r\n                  arg: serializer.serializeSymbol(name),\r\n              });\r\n          }\r\n          return replaceLatex(def.serialize, [\r\n              serializer.wrap(getArg(expr, 1), def.precedence + 1),\r\n          ]);\r\n      }\r\n      if (def.trigger.infix) {\r\n          result = serializer.wrap(getArg(expr, 1), def.precedence);\r\n          for (let i = 2; i < count + 1; i++) {\r\n              const arg = getArg(expr, i);\r\n              if (arg !== null) {\r\n                  result = replaceLatex(def.serialize, [\r\n                      result,\r\n                      serializer.wrap(arg, def.precedence),\r\n                  ]);\r\n              }\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  class Serializer {\r\n      constructor(options, dictionary, onError) {\r\n          this.level = -1;\r\n          this.options = options;\r\n          if (options.invisibleMultiply) {\r\n              if (!/#1/.test(options.invisibleMultiply) ||\r\n                  !/#2/.test(options.invisibleMultiply)) {\r\n                  onError({\r\n                      code: 'expected-argument',\r\n                      arg: 'invisibleMultiply',\r\n                  });\r\n              }\r\n          }\r\n          this.onError = onError;\r\n          this.dictionary = dictionary;\r\n      }\r\n      wrap(expr, prec) {\r\n          if (expr === null)\r\n              return '';\r\n          if (prec === undefined) {\r\n              return '(' + this.serialize(expr) + ')';\r\n          }\r\n          if (typeof expr === 'number' ||\r\n              isNumberObject(expr) ||\r\n              typeof expr === 'string' ||\r\n              isSymbolObject(expr)) {\r\n              return this.serialize(expr);\r\n          }\r\n          const name = getFunctionName(expr);\r\n          if (name && name !== PARENTHESES) {\r\n              const def = this.dictionary.name.get(name);\r\n              if (def && def.precedence !== undefined && def.precedence < prec) {\r\n                  return this.wrapString(this.serialize(expr), getApplyFunctionStyle(expr, this.level));\r\n              }\r\n          }\r\n          return this.serialize(expr);\r\n      }\r\n      wrapShort(expr) {\r\n          const exprStr = this.serialize(expr);\r\n          if (getFunctionName(expr) === PARENTHESES)\r\n              return exprStr;\r\n          if (typeof expr !== 'number' &&\r\n              !isNumberObject(expr) &&\r\n              !/(^(.|\\\\[a-zA-Z*]+))$/.test(exprStr)) {\r\n              return this.wrapString(exprStr, getGroupStyle(expr, this.level + 1));\r\n          }\r\n          return exprStr;\r\n      }\r\n      wrapString(s, style) {\r\n          if (style === 'none')\r\n              return s;\r\n          return '(' + s + ')';\r\n      }\r\n      serializeSymbol(expr, def) {\r\n          const head = getFunctionHead(expr);\r\n          if (!head) {\r\n              console.assert(typeof expr === 'string' || isSymbolObject(expr));\r\n              if (typeof (def === null || def === void 0 ? void 0 : def.serialize) === 'string') {\r\n                  return def.serialize;\r\n              }\r\n              const name = getSymbolName(expr);\r\n              if (name === null)\r\n                  return '';\r\n              switch (getSymbolStyle(expr, this.level)) {\r\n                  case 'upright':\r\n                      return '\\\\operatorname{' + name + '}';\r\n                  default:\r\n                      return name;\r\n              }\r\n          }\r\n          const args = getTail(expr);\r\n          if (!def) {\r\n              if (typeof head === 'string' && head.length > 0 && head[0] === '\\\\') {\r\n                  let result = head;\r\n                  for (const arg of args) {\r\n                      result += '{' + this.serialize(arg) + '}';\r\n                  }\r\n                  return result;\r\n              }\r\n              return `${this.serialize(head)}(${args\r\n                .map((x) => this.serialize(x))\r\n                .join(', ')})`;\r\n          }\r\n          if (def.requiredLatexArg > 0) {\r\n              let optionalArg = '';\r\n              let requiredArg = '';\r\n              let i = 0;\r\n              while (i < def.requiredLatexArg) {\r\n                  requiredArg += '{' + this.serialize(args[i++]) + '}';\r\n              }\r\n              while (i < Math.min(args.length, def.optionalLatexArg + def.requiredLatexArg)) {\r\n                  const optValue = this.serialize(args[1 + i++]);\r\n                  if (optValue) {\r\n                      optionalArg += '[' + optValue + ']';\r\n                  }\r\n              }\r\n              return def.serialize + (optionalArg + requiredArg);\r\n          }\r\n          getApplyFunctionStyle(expr, this.level);\r\n          return def.serialize + this.serialize([PARENTHESES, ...args]);\r\n      }\r\n      serializeDictionary(dict) {\r\n          return `\\\\left[\\\\begin{array}{lll}${Object.keys(dict)\r\n            .map((x) => {\r\n            return `\\\\textbf{${x}} & \\\\rightarrow & ${this.serialize(dict[x])}`;\r\n        })\r\n            .join('\\\\\\\\')}\\\\end{array}\\\\right]`;\r\n      }\r\n      serialize(expr) {\r\n          if (expr === null)\r\n              return '';\r\n          this.level += 1;\r\n          const result = (() => {\r\n              const numericValue = serializeNumber(expr, this.options);\r\n              if (numericValue)\r\n                  return numericValue;\r\n              const stringValue = getStringValue(expr);\r\n              if (stringValue !== null)\r\n                  return `\\\\text{${stringValue}}`;\r\n              const symbolName = getSymbolName(expr);\r\n              if (symbolName !== null) {\r\n                  return this.serializeSymbol(expr, this.dictionary.name.get(symbolName));\r\n              }\r\n              const dict = getDictionary(expr);\r\n              if (dict !== null)\r\n                  return this.serializeDictionary(dict);\r\n              const fnName = getFunctionName(expr);\r\n              if (fnName) {\r\n                  if (fnName[0] === '\\\\') {\r\n                      const args = getTail(expr);\r\n                      if (args.length === 0)\r\n                          return fnName;\r\n                      return (fnName +\r\n                          '{' +\r\n                          args\r\n                              .map((x) => this.serialize(x))\r\n                              .filter((x) => Boolean(x))\r\n                              .join('}{') +\r\n                          '}');\r\n                  }\r\n                  const def = this.dictionary.name.get(fnName);\r\n                  if (def) {\r\n                      let result;\r\n                      if (typeof def.serialize === 'function') {\r\n                          result = def.serialize(this, expr);\r\n                      }\r\n                      if (!result &&\r\n                          (def.precedence !== undefined ||\r\n                              def.trigger.superfix ||\r\n                              def.trigger.subfix)) {\r\n                          result = serializeOperator(this, expr, def);\r\n                      }\r\n                      if (!result && def.trigger.matchfix) {\r\n                          result = serializeMatchfix(this, expr, def);\r\n                      }\r\n                      if (!result && def.trigger.symbol) {\r\n                          result = this.serializeSymbol(expr, def);\r\n                      }\r\n                      return result;\r\n                  }\r\n              }\r\n              if (Array.isArray(expr) || isFunctionObject(expr)) {\r\n                  return this.serializeSymbol(expr);\r\n              }\r\n              this.onError({\r\n                  code: 'syntax-error',\r\n                  arg: JSON.stringify(expr),\r\n              });\r\n          })();\r\n          this.level -= 1;\r\n          return result;\r\n      }\r\n  }\n\n  class LatexSyntax {\r\n      constructor(options) {\r\n          var _a, _b;\r\n          const onError = (err) => {\r\n              if (typeof window !== 'undefined') {\r\n                  if (!err.before || !err.after) {\r\n                      console.warn(err.code + (err.arg ? ': ' + err.arg : ''));\r\n                  }\r\n                  else {\r\n                      console.warn(err.code +\r\n                          (err.arg ? ': ' + err.arg : '') +\r\n                          '\\n' +\r\n                          '%c' +\r\n                          '|  ' +\r\n                          err.before +\r\n                          '%c' +\r\n                          err.after +\r\n                          '\\n' +\r\n                          '%c' +\r\n                          '|  ' +\r\n                          String(' ').repeat(err.before.length) +\r\n                          '▲', 'font-weight: bold', 'font-weight: normal; color: rgba(160, 160, 160)', 'font-weight: bold; color: hsl(4deg, 90%, 50%)');\r\n                  }\r\n              }\r\n              return;\r\n          };\r\n          this.onError = (_a = options === null || options === void 0 ? void 0 : options.onError) !== null && _a !== void 0 ? _a : onError;\r\n          const opts = Object.assign({}, (options !== null && options !== void 0 ? options : {}));\r\n          delete opts.dictionary;\r\n          delete opts.onError;\r\n          this.options = Object.assign(Object.assign(Object.assign(Object.assign({}, DEFAULT_LATEX_NUMBER_OPTIONS), DEFAULT_SERIALIZE_LATEX_OPTIONS), DEFAULT_PARSE_LATEX_OPTIONS), opts);\r\n          this.dictionary = indexLatexDictionary((_b = options === null || options === void 0 ? void 0 : options.dictionary) !== null && _b !== void 0 ? _b : LatexSyntax.getDictionary(), this.onError);\r\n      }\r\n      static getDictionary(domain = 'all') {\r\n          if (domain === 'all') {\r\n              let result = [];\r\n              for (const domain of Object.keys(DEFAULT_LATEX_DICTIONARY)) {\r\n                  result = [...result, ...DEFAULT_LATEX_DICTIONARY[domain]];\r\n              }\r\n              return result;\r\n          }\r\n          return [...DEFAULT_LATEX_DICTIONARY[domain]];\r\n      }\r\n      parse(latex) {\r\n          var _a;\r\n          const scanner = new Scanner(tokenize(latex, []), this.options, this.dictionary, this.onError);\r\n          const result = scanner.matchExpression();\r\n          if (!scanner.atEnd) {\r\n              (_a = this.onError) === null || _a === void 0 ? void 0 : _a.call(this, { code: 'syntax-error' });\r\n          }\r\n          return result !== null && result !== void 0 ? result : '';\r\n      }\r\n      serialize(expr) {\r\n          const serializer = new Serializer(this.options, this.dictionary, this.onError);\r\n          return serializer.serialize(expr);\r\n      }\r\n  }\r\n  function parse(latex, options) {\r\n      const syntax = new LatexSyntax(options);\r\n      return syntax.parse(latex);\r\n  }\r\n  function serialize(expr, options) {\r\n      const syntax = new LatexSyntax(options);\r\n      return syntax.serialize(expr);\r\n  }\n\n  const DOMAIN_PARENT = {\r\n      Anything: [],\r\n      Expression: 'Anything',\r\n      Domain: ['Set', 'Symbol'],\r\n      ParametricDomain: ['Domain', 'Function'],\r\n      MaybeBoolean: 'Expression',\r\n      Boolean: 'MaybeBoolean',\r\n      Collection: 'Expression',\r\n      Dictionary: 'Collection',\r\n      List: 'Collection',\r\n      Sequence: 'Collection',\r\n      Tuple: 'Collection',\r\n      Set: 'Collection',\r\n      FiniteSet: 'Set',\r\n      InfiniteSet: 'Set',\r\n      EmptySet: 'FiniteSet',\r\n      String: 'Expression',\r\n      Symbol: 'String',\r\n      Function: 'Expression',\r\n      Predicate: 'Function',\r\n      LogicalFunction: 'Predicate',\r\n      TranscendentalFunction: 'Function',\r\n      AlgebraicFunction: 'Function',\r\n      PeriodicFunction: 'Function',\r\n      TrigonometricFunction: ['PeriodicFunction', 'TranscendentalFunction'],\r\n      HyperbolicFunction: 'TranscendentalFunction',\r\n      MonotonicFunction: 'Function',\r\n      StrictMonotonicFunction: 'MonotonicFunction',\r\n      ContinuousFunction: 'Function',\r\n      DifferentiableFunction: 'ContinuousFunction',\r\n      InfinitelyDifferentiableFunction: 'DifferentiableFunction',\r\n      RationalFunction: ['AlgebraicFunction', 'ContinuousFunction'],\r\n      PolynomialFunction: ['AlgebraicFunction', 'InfinitelyDifferentiableFunction'],\r\n      QuadraticFunction: 'PolynomialFunction',\r\n      LinearFunction: ['QuadraticFunction', 'MonotonicFunction'],\r\n      ConstantFunction: 'LinearFunction',\r\n      Number: 'Set',\r\n      ImaginaryNumber: ['ComplexNumber', 'InfiniteSet'],\r\n      ComplexNumber: 'ExtendedComplexNumber',\r\n      ExtendedComplexNumber: 'Number',\r\n      ComplexInfinity: 'ExtendedComplexNumber',\r\n      NumberZero: ['CompositeNumber', 'ImaginaryNumber', 'FiniteSet'],\r\n      NaturalNumber: 'Integer',\r\n      CompositeNumber: 'NaturalNumber',\r\n      PrimeNumber: 'NaturalNumber',\r\n      Integer: ['RationalNumber', 'ExtendedInteger'],\r\n      ExtendedInteger: 'ExtendedRationalNumber',\r\n      RationalNumber: ['AlgebraicNumber', 'ExtendedRationalNumber'],\r\n      IrrationalNumber: 'RealNumber',\r\n      TranscendentalNumber: ['IrrationalNumber', 'ImaginaryNumber'],\r\n      AlgebraicNumber: 'IrrationalNumber',\r\n      RealNumber: ['ComplexNumber', 'ExtendedRealNumber'],\r\n      ExtendedRealNumber: 'ExtendedComplexNumber',\r\n      ExtendedNaturalNumber: 'ExtendedInteger',\r\n      ExtendedRationalNumber: 'ExtendedRealNumber',\r\n      SignedInfinity: 'ExtendedNaturalNumber',\r\n      Tensor: 'Expression',\r\n      Scalar: 'Tensor',\r\n      Vector: 'Matrix',\r\n      Row: 'Vector',\r\n      Column: 'Vector',\r\n      Matrix: 'Tensor',\r\n      ComplexTensor: 'Tensor',\r\n      RealTensor: 'ComplexTensor',\r\n      IntegerTensor: 'RealTensor',\r\n      LogicalTensor: 'IntegerTensor',\r\n      SquareMatrix: 'Matrix',\r\n      MonomialMatrix: 'SquareMatrix',\r\n      TriangularMatrix: 'SquareMatrix',\r\n      UpperTriangularMatrix: 'TriangularMatrix',\r\n      LowerTriangularMatrix: 'TriangularMatrix',\r\n      PermutationMatrix: ['MonomialMatrix', 'LogicalTensor', 'OrthogonalMatrix'],\r\n      OrthogonalMatrix: ['SquareMatrix', 'RealTensor'],\r\n      DiagonalMatrix: ['UpperTriangularMatrix', 'LowerTriangularMatrix'],\r\n      IdentityMatrix: ['DiagonalMatrix', 'SymmetricMatrix', 'PermutationMatrix'],\r\n      ZeroMatrix: ['DiagonalMatrix', 'SymmetricMatrix', 'PermutationMatrix'],\r\n      SymmetricMatrix: ['HermitianMatrix', 'SquareMatrix', 'RealTensor'],\r\n      HermitianMatrix: 'ComplexTensor',\r\n      Quaternion: ['SquareMatrix', 'ComplexTensor'],\r\n  };\r\n  const DOMAIN_WIKIDATA = {\r\n      Function: 'Q11348',\r\n      ComplexNumber: 'Q26851286',\r\n      Integer: 'Q47007735',\r\n      ImaginaryNumber: 'Q47310259',\r\n      NaturalNumber: 'Q28920052',\r\n  };\r\n  const DOMAIN_VALUE = {\r\n      MaybeBoolean: ['Union', 'Boolean', ['Set', 'Maybe']],\r\n      NaturalNumber: ['Union', 'CompositeNumber', 'PrimeNumber'],\r\n      Scalar: ['Intersection', 'Row', 'Column'],\r\n      TriangularMatrix: ['Union', 'UpperTriangularMatrix', 'LowerTriangularMatrix'],\r\n      Vector: ['Union', 'Row', 'Column'],\r\n  };\r\n  const DOMAIN_COUNT = {\r\n      Boolean: 2,\r\n      MaybeBoolean: 3,\r\n      EmptySet: 0,\r\n      IdentityMatrix: 1,\r\n      ZeroMatrix: 1,\r\n      NumberZero: 1,\r\n  };\r\n  const PARAMETRIC_DOMAIN = {\r\n      String: {\r\n          signatures: [\r\n              {\r\n                  args: [],\r\n                  result: 'Domain',\r\n                  evaluate: () => 'String',\r\n              },\r\n              {\r\n                  args: ['NaturalNumber'],\r\n                  result: 'ParametricDomain',\r\n                  evaluate: (_engine, min) => {\r\n                      min = Math.round(min);\r\n                      if (Number.isNaN(min))\r\n                          return 'EmptySet';\r\n                      if (min < 0)\r\n                          return 'EmptySet';\r\n                      if (min === +Infinity)\r\n                          return 'EmptySet';\r\n                      return ['String', min, min];\r\n                  },\r\n              },\r\n              {\r\n                  args: ['NaturalNumber'],\r\n                  result: 'ParametricDomain',\r\n                  evaluate: (_engine, min, max) => {\r\n                      min = Math.round(min);\r\n                      max = Math.round(max);\r\n                      if (Number.isNaN(min) || Number.isNaN(max))\r\n                          return 'EmptySet';\r\n                      if (min < 0)\r\n                          return 'EmptySet';\r\n                      if (min === +Infinity)\r\n                          return 'EmptySet';\r\n                      if (min > max)\r\n                          return 'EmptySet';\r\n                      if (min === 0 && max === +Infinity)\r\n                          return 'EmptySet';\r\n                      return ['String', min, max];\r\n                  },\r\n              },\r\n          ],\r\n      },\r\n  };\r\n  function getDomainsDictionary() {\r\n      var _a;\r\n      const result = { Nothing: { countable: true, supersets: [], domain: 'Domain' } };\r\n      for (const domain of Object.keys(DOMAIN_PARENT)) {\r\n          const parents = Array.isArray(DOMAIN_PARENT[domain])\r\n              ? DOMAIN_PARENT[domain]\r\n              : [DOMAIN_PARENT[domain]];\r\n          result[domain] = (_a = PARAMETRIC_DOMAIN[domain]) !== null && _a !== void 0 ? _a : {};\r\n          result[domain] = Object.assign({ domain: PARAMETRIC_DOMAIN[domain] ? 'ParametricDomain' : 'Domain', wikidata: DOMAIN_WIKIDATA[domain], supersets: parents, value: DOMAIN_VALUE, countable: DOMAIN_COUNT[domain] !== undefined, size: () => DOMAIN_COUNT[domain] }, result[domain]);\r\n          for (const parent of parents) {\r\n              if (parent !== 'Anything' && !DOMAIN_PARENT[parent]) {\r\n                  throw new Error(`Unknown parent of domain \"${domain}\": \"${parent}\"`);\r\n              }\r\n          }\r\n      }\r\n      const sets = new Set();\r\n      for (const domain of Object.keys(result))\r\n          sets.add(domain);\r\n      for (const domain of Object.keys(result)) {\r\n          for (const parent of result[domain].supersets)\r\n              sets.delete(parent);\r\n      }\r\n      sets.delete('Nothing');\r\n      result['Nothing'].supersets = [...sets.values()];\r\n      for (const domain of Object.keys(result)) {\r\n          let found = false;\r\n          let count = 0;\r\n          let parents = [domain];\r\n          while (count < 512 && !found) {\r\n              const parent = parents.pop();\r\n              found = parent === 'Anything';\r\n              if (!found)\r\n                  parents = [...parent, ...result[parent].supersets];\r\n              count++;\r\n          }\r\n          if (!found) {\r\n              throw new Error(`The \"${domain}\" domain cannot reach \"Anything\"`);\r\n          }\r\n      }\r\n      return result;\r\n  }\n\n  const ARITHMETIC_DICTIONARY = {\r\n      Pi: {\r\n          domain: 'IrrationalNumber',\r\n          constant: true,\r\n          wikidata: 'Q167',\r\n          value: Math.PI,\r\n      },\r\n      ImaginaryI: {\r\n          domain: 'ImaginaryNumber',\r\n          constant: true,\r\n          wikidata: 'Q193796',\r\n      },\r\n      ExponentialE: {\r\n          domain: 'IrrationalNumber',\r\n          wikidata: 'Q82435',\r\n          constant: true,\r\n          value: { num: '2.7182818284590452354' },\r\n      },\r\n      Abs: {\r\n          domain: 'Function',\r\n          wikidata: 'Q3317982',\r\n          threadable: true,\r\n          idempotent: true,\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Add: {\r\n          domain: 'Function',\r\n          wikidata: 'Q32043',\r\n          associative: true,\r\n          commutative: true,\r\n          threadable: true,\r\n          idempotent: true,\r\n          signatures: [{ rest: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Chop: {\r\n          domain: 'Function',\r\n          associative: true,\r\n          threadable: true,\r\n          idempotent: true,\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Ceil: {\r\n          domain: 'Function',\r\n      },\r\n      Exp: {\r\n          domain: ['ContinuousFunction', 'MonotonicFunction'],\r\n          wikidata: 'Q168698',\r\n          threadable: true,\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Erf: {\r\n          domain: ['ContinuousFunction', 'MonotonicFunction'],\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Erfc: {\r\n          domain: ['ContinuousFunction', 'MonotonicFunction'],\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Factorial: {\r\n          wikidata: 'Q120976',\r\n          domain: 'MonotonicFunction',\r\n          signatures: [{ args: ['NaturalNumber'], result: 'NaturalNumber' }],\r\n      },\r\n      Floor: { domain: 'Function', wikidata: 'Q56860783' },\r\n      Gamma: { domain: 'Function', wikidata: 'Q190573' },\r\n      LogGamma: { domain: 'Function' },\r\n      Log: {\r\n          domain: 'Function',\r\n          wikidata: 'Q11197',\r\n          signatures: [\r\n              { args: ['RealNumber'], result: 'RealNumber' },\r\n              { args: ['RealNumber', ['base', 'NaturalNumber']], result: 'RealNumber' },\r\n          ],\r\n      },\r\n      Log2: {\r\n          domain: 'Function',\r\n          wikidata: 'Q581168',\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Log10: {\r\n          domain: 'Function',\r\n          wikidata: 'Q966582',\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      MachineEpsilon: {\r\n          domain: 'RealNumber',\r\n          constant: true,\r\n          value: { num: '2.220446049250313e-16' },\r\n      },\r\n      Multiply: {\r\n          domain: 'Function',\r\n          wikidata: 'Q40276',\r\n          associative: true,\r\n          commutative: true,\r\n          idempotent: true,\r\n          signatures: [{ rest: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Negate: {\r\n          domain: 'Function',\r\n          wikidata: 'Q715358',\r\n          signatures: [{ args: ['RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Power: {\r\n          domain: 'Function',\r\n          wikidata: 'Q33456',\r\n          commutative: false,\r\n          signatures: [{ args: ['RealNumber', 'RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      Round: {\r\n          domain: 'Function',\r\n          signatures: [{ args: ['RealNumber', 'RealNumber'], result: 'RealNumber' }],\r\n      },\r\n      SignGamma: {\r\n          domain: 'Function',\r\n      },\r\n      Sqrt: {\r\n          domain: 'Function',\r\n          wikidata: 'Q134237',\r\n          signatures: [\r\n              { args: ['RealNumber'], result: 'RealNumber' },\r\n              { args: ['Number'], result: 'Number' },\r\n          ],\r\n      },\r\n      Root: {\r\n          domain: 'Function',\r\n          commutative: false,\r\n          signatures: [{ args: ['NaturalNumber'], result: 'RealNumber' }],\r\n      },\r\n      Subtract: {\r\n          domain: 'Function',\r\n          wikidata: 'Q32043',\r\n          commutative: false,\r\n          signatures: [\r\n              { args: ['RealNumber', 'RealNumber'], result: 'RealNumber' },\r\n              { args: ['Number', 'Number'], result: 'Number' },\r\n          ],\r\n      },\r\n  };\n\n  const CORE_DICTIONARY = {\r\n      Apply: {\r\n          domain: 'Function',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['head', 'Expression'],\r\n                      ['tail', 'List'],\r\n                  ],\r\n                  result: 'Expression',\r\n              },\r\n          ],\r\n      },\r\n      About: {\r\n          domain: 'Function',\r\n          signatures: [\r\n              {\r\n                  args: ['Expression'],\r\n                  result: 'Dictionary',\r\n              },\r\n          ],\r\n      },\r\n      BaseForm: {\r\n          domain: 'Function',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['value', 'Integer'],\r\n                      ['base', ['Integer', 2, 16]],\r\n                  ],\r\n                  result: 'Integer',\r\n              },\r\n          ],\r\n      },\r\n      Block: {\r\n          domain: 'Function',\r\n      },\r\n      Dictionary: {\r\n          domain: 'Collection',\r\n      },\r\n      Domain: {\r\n          domain: 'Function',\r\n          signatures: [{ args: ['Expression'], result: 'Domain' }],\r\n      },\r\n      Evaluate: {\r\n          domain: 'Function',\r\n          signatures: [{ args: ['Expression'], result: 'Expression' }],\r\n      },\r\n      Parentheses: {\r\n          domain: 'Function',\r\n          threadable: true,\r\n          pure: false,\r\n          signatures: [{ rest: 'Expression', result: 'Expression' }],\r\n      },\r\n      Head: {\r\n          domain: 'Function',\r\n          signatures: [\r\n              {\r\n                  args: ['Expression'],\r\n                  result: 'Expression',\r\n              },\r\n          ],\r\n      },\r\n      Lambda: {\r\n          domain: 'Function',\r\n          wikidata: 'Q567612',\r\n          hold: 'all',\r\n      },\r\n      Latex: {\r\n          domain: 'Function',\r\n          signatures: [{ rest: ['tokens', 'String'], result: 'String' }],\r\n      },\r\n      String: {\r\n          domain: 'Function',\r\n          threadable: true,\r\n          signatures: [{ rest: ['string', 'String'], result: 'String' }],\r\n      },\r\n      Symbol: {\r\n          domain: 'Function',\r\n          threadable: true,\r\n          signatures: [{ args: ['String'], result: 'Symbol' }],\r\n      },\r\n      Tail: {\r\n          domain: 'Function',\r\n          signatures: [\r\n              {\r\n                  args: ['Expression'],\r\n                  result: 'List',\r\n              },\r\n          ],\r\n      },\r\n  };\n\n  const LOGIC_DICTIONARY = {\r\n      True: { domain: 'Boolean', constant: true },\r\n      False: { domain: 'Boolean', constant: true },\r\n      Maybe: { domain: 'MaybeBoolean', constant: true },\r\n      And: {\r\n          domain: 'LogicalFunction',\r\n          threadable: true,\r\n          associative: true,\r\n          commutative: true,\r\n          idempotent: true,\r\n      },\r\n      Or: {\r\n          domain: 'LogicalFunction',\r\n          threadable: true,\r\n          associative: true,\r\n          commutative: true,\r\n          idempotent: true,\r\n      },\r\n      Not: {\r\n          domain: 'LogicalFunction',\r\n          involution: true,\r\n      },\r\n      Equivalent: {\r\n          domain: 'LogicalFunction',\r\n      },\r\n      Implies: { domain: 'LogicalFunction' },\r\n      Exists: { domain: 'LogicalFunction' },\r\n      Equal: { domain: 'LogicalFunction' },\r\n      NotEqual: {\r\n          domain: 'Function',\r\n          wikidata: 'Q28113351',\r\n          commutative: true,\r\n          signatures: [\r\n              { args: ['Expression', 'Expression'], result: 'MaybeBoolean' },\r\n          ],\r\n      },\r\n  };\n\n  const SETS_DICTIONARY = {\r\n      EmptySet: {\r\n          domain: 'EmptySet',\r\n          constant: true,\r\n          wikidata: 'Q226183',\r\n      },\r\n      CartesianProduct: {\r\n          domain: 'Function',\r\n          wikidata: 'Q173740',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['lhs', 'Set'],\r\n                      ['rhs', 'Set'],\r\n                  ],\r\n                  result: 'Set',\r\n                  evaluate: cartesianProduct,\r\n              },\r\n          ],\r\n      },\r\n      Intersection: {\r\n          domain: 'Function',\r\n          wikidata: 'Q185837',\r\n          threadable: true,\r\n          associative: true,\r\n          commutative: true,\r\n          idempotent: true,\r\n          involution: true,\r\n          signatures: [\r\n              { rest: ['sets', 'Set'], result: 'Set', evaluate: intersection },\r\n          ],\r\n      },\r\n      Complement: {\r\n          domain: 'Function',\r\n          wikidata: 'Q242767',\r\n      },\r\n      Union: {\r\n          domain: 'Function',\r\n          wikidata: 'Q185359',\r\n          threadable: true,\r\n          associative: true,\r\n          commutative: true,\r\n          idempotent: true,\r\n          involution: true,\r\n          signatures: [{ rest: ['sets', 'Set'], result: 'Set', evaluate: union }],\r\n      },\r\n      SymmetricDifference: {\r\n          domain: 'Function',\r\n          wikidata: 'Q1147242',\r\n      },\r\n      Subset: {\r\n          domain: 'Predicate',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['lhs', 'Set'],\r\n                      ['rhs', 'Set'],\r\n                  ],\r\n                  result: 'MaybeBoolean',\r\n                  evaluate: subset,\r\n              },\r\n          ],\r\n      },\r\n      SubsetEqual: {\r\n          domain: 'Predicate',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['lhs', 'Set'],\r\n                      ['rhs', 'Set'],\r\n                  ],\r\n                  result: 'MaybeBoolean',\r\n                  evaluate: subsetEqual,\r\n              },\r\n          ],\r\n      },\r\n      SetMinus: {\r\n          domain: 'Function',\r\n          wikidata: 'Q18192442',\r\n          signatures: [\r\n              {\r\n                  args: [\r\n                      ['lhs', 'Set'],\r\n                      ['rhs', 'Set'],\r\n                  ],\r\n                  result: 'Set',\r\n                  evaluate: setMinus,\r\n              },\r\n          ],\r\n      },\r\n  };\r\n  function subset(_engine, _lhs, _rhs) {\r\n      return 'False';\r\n  }\r\n  function subsetEqual(_engine, _lhs, _rhs) {\r\n      return 'False';\r\n  }\r\n  function union(_engine, ..._args) {\r\n      return 'EmptySet';\r\n  }\r\n  function intersection(_engine, ..._args) {\r\n      return 'EmptySet';\r\n  }\r\n  function setMinus(_engine, _lhs, _rhs) {\r\n      return 'EmptySet';\r\n  }\r\n  function cartesianProduct(_engine, _lhs, _rhs) {\r\n      return 'EmptySet';\r\n  }\n\n  const COLLECTIONS_DICTIONARY = {\r\n      KeyValue: { domain: 'Function' },\r\n      Keys: { domain: 'Function' },\r\n      Entries: { domain: 'Function' },\r\n      Dictionary: { domain: 'Collection' },\r\n      List: { domain: 'Collection' },\r\n      Tuple: { domain: 'Collection' },\r\n      Sequence: { domain: 'Collection' },\r\n  };\n\n  const TRIGONOMETRY_DICTIONARY = {\r\n      Arcosh: { domain: 'HyperbolicFunction' },\r\n      Arccos: { domain: 'TrigonometricFunction' },\r\n      Arcsin: { domain: 'TrigonometricFunction' },\r\n      Arctan: {\r\n          wikidata: 'Q2257242',\r\n          domain: 'TrigonometricFunction',\r\n      },\r\n      Arctan2: {\r\n          wikidata: 'Q776598',\r\n          domain: 'TrigonometricFunction',\r\n      },\r\n      Arsinh: { domain: 'HyperbolicFunction' },\r\n      Artanh: { domain: 'HyperbolicFunction' },\r\n      Cos: { domain: 'TrigonometricFunction' },\r\n      Degrees: {\r\n          domain: 'Real',\r\n          constant: true,\r\n          value: 0.017453292519943295769236907,\r\n      },\r\n      FromPolarCoordinates: {\r\n          domain: 'Function',\r\n      },\r\n      Haversine: {\r\n          wikidata: 'Q2528380',\r\n          domain: 'TrigonometricFunction',\r\n      },\r\n      Hypot: {\r\n          domain: 'Function',\r\n      },\r\n      InverseHaversine: {\r\n          domain: 'TrigonometricFunction',\r\n      },\r\n      Sin: { domain: 'TrigonometricFunction' },\r\n      Sinh: { domain: 'HyperbolicFunction' },\r\n      Tan: { domain: 'TrigonometricFunction' },\r\n      Tanh: { domain: 'HyperbolicFunction' },\r\n      ToPolarCoordinates: {\r\n          domain: 'Function',\r\n      },\r\n  };\n\n  function isSetDefinition(def) {\r\n      return typeof def === 'object' && 'supersets' in def;\r\n  }\r\n  function isSymbolDefinition(def) {\r\n      return typeof def === 'object' && 'constant' in def;\r\n  }\r\n  function isFunctionDefinition(def) {\r\n      return typeof def === 'object' && 'signatures' in def;\r\n  }\r\n  function isCollectionDefinition(def) {\r\n      return typeof def === 'object' && 'countable' in def;\r\n  }\n\n  function getDefaultDictionaries(categories = 'all') {\r\n      if (categories === 'all') {\r\n          return getDefaultDictionaries([\r\n              'domains',\r\n              'core',\r\n              'collections',\r\n              'algebra',\r\n              'arithmetic',\r\n              'calculus',\r\n              'complex',\r\n              'combinatorics',\r\n              'dimensions',\r\n              'inequalities',\r\n              'intervals',\r\n              'linear-algebra',\r\n              'logic',\r\n              'numeric',\r\n              'other',\r\n              'physics',\r\n              'polynomials',\r\n              'relations',\r\n              'statistics',\r\n              'transcendentals',\r\n              'trigonometry',\r\n              'rounding',\r\n              'units',\r\n          ]);\r\n      }\r\n      const result = [];\r\n      for (const category of categories) {\r\n          result.push(DICTIONARY[category]);\r\n      }\r\n      return result;\r\n  }\r\n  const DICTIONARY = {\r\n      'arithmetic': ARITHMETIC_DICTIONARY,\r\n      'algebra': {},\r\n      'calculus': {},\r\n      'combinatorics': {},\r\n      'complex': {},\r\n      'core': CORE_DICTIONARY,\r\n      'collections': Object.assign(Object.assign({}, SETS_DICTIONARY), COLLECTIONS_DICTIONARY),\r\n      'domains': getDomainsDictionary(),\r\n      'dimensions': {},\r\n      'logic': LOGIC_DICTIONARY,\r\n      'inequalities': {},\r\n      'intervals': {},\r\n      'linear-algebra': {},\r\n      'numeric': {},\r\n      'other': {},\r\n      'polynomials': {},\r\n      'physics': {\r\n          'Mu-0': {\r\n              constant: true,\r\n              wikidata: 'Q1515261',\r\n              domain: 'RealNumber',\r\n              value: 1.25663706212e-6,\r\n              unit: [MULTIPLY, 'H', [POWER, 'm', -1]],\r\n          },\r\n      },\r\n      'relations': {},\r\n      'rounding': {},\r\n      'statistics': {},\r\n      'transcendentals': {},\r\n      'trigonometry': TRIGONOMETRY_DICTIONARY,\r\n      'units': {},\r\n  };\r\n  function compileDictionary(dict, engine) {\r\n      const result = new Map();\r\n      for (const entryName of Object.keys(dict)) {\r\n          const [def, error] = normalizeDefinition(dict[entryName], engine);\r\n          if (error) {\r\n              engine.signal({\r\n                  severity: def ? 'warning' : 'error',\r\n                  message: ['invalid-dictionary-entry', error],\r\n                  head: entryName,\r\n              });\r\n          }\r\n          if (def)\r\n              result.set(entryName, def);\r\n      }\r\n      engine.context = { parentScope: engine.context, dictionary: result };\r\n      validateDictionary(engine, result);\r\n      engine.context = engine.context.parentScope;\r\n      return result;\r\n  }\r\n  function normalizeDefinition(def, engine) {\r\n      if (typeof def === 'number') {\r\n          return [\r\n              {\r\n                  domain: inferNumericDomain(def),\r\n                  constant: false,\r\n                  value: def,\r\n              },\r\n          ];\r\n      }\r\n      let domain = def.domain;\r\n      if (isSymbolDefinition(def)) {\r\n          let warning;\r\n          if (!domain) {\r\n              warning = 'no domain provided.';\r\n              domain = 'Anything';\r\n          }\r\n          def = Object.assign({ domain, constant: false }, def);\r\n          return [def, warning];\r\n      }\r\n      if (isCollectionDefinition(def) || engine.isSubsetOf(domain, 'Collection')) {\r\n          let collectionDef = Object.assign({}, def);\r\n          collectionDef = Object.assign({ iterable: collectionDef.iterator !== undefined, indexable: collectionDef.at !== undefined, countable: collectionDef.size !== undefined }, def);\r\n          return [collectionDef, undefined];\r\n      }\r\n      if (isFunctionDefinition(def) || engine.isSubsetOf(domain, 'Function')) {\r\n          let functionDef = Object.assign({}, def);\r\n          functionDef = Object.assign({ wikidata: '', scope: null, threadable: false, associative: false, commutative: false, additive: false, multiplicative: false, outtative: false, idempotent: false, involution: false, pure: true, hold: 'none', sequenceHold: false, signatures: [] }, def);\r\n          let warning;\r\n          if (functionDef.signatures.length === 0) {\r\n              warning = `no function signature provided.`;\r\n          }\r\n          else if (functionDef.signatures.length === 1) {\r\n              const sig = functionDef.signatures[0];\r\n              if (sig.result === 'Boolean' || sig.result === 'MaybeBoolean') {\r\n                  if (sig.args.length === 2) {\r\n                      if ((sig.args[0] === 'Boolean' || sig.args[0] === 'MaybeBoolean') &&\r\n                          (sig.args[1] === 'Boolean' || sig.args[1] === 'MaybeBoolean')) {\r\n                          warning = `looks like a \"LogicalFunction\"?`;\r\n                      }\r\n                  }\r\n                  if (!warning)\r\n                      warning = `looks like a \"Predicate\"?`;\r\n              }\r\n          }\r\n          return [functionDef, warning];\r\n      }\r\n      if (isSetDefinition(def) || engine.isSubsetOf(domain, 'Function')) {\r\n          return [def];\r\n      }\r\n      if (def) {\r\n          if (domain && engine.isSubsetOf(domain, 'Number')) {\r\n              if (typeof def.value === 'undefined') {\r\n                  return [null, 'expected \"value\" property in definition'];\r\n              }\r\n              const inferredDomain = inferNumericDomain(def.value);\r\n              return [\r\n                  Object.assign({ domain: inferredDomain, constant: false }, def),\r\n                  inferredDomain !== domain ? 'inferred domain \"${inferredDomain}\"' : '',\r\n              ];\r\n          }\r\n          if (domain && engine.isSubsetOf(domain, 'Function')) {\r\n              return [\r\n                  Object.assign({ signatures: [{ rest: 'Anything', result: 'Anything' }] }, def),\r\n                  'a \"Function\" should have a \"signatures\" property in its definition',\r\n              ];\r\n          }\r\n          if (domain && engine.isSubsetOf(domain, 'Set')) {\r\n              return [\r\n                  def,\r\n                  'a \"Set\" should have a \"supersets\" property in its definition',\r\n              ];\r\n          }\r\n      }\r\n      return [def, 'could not be validate'];\r\n  }\r\n  function validateDictionary(engine, dictionary) {\r\n      const wikidata = new Set();\r\n      for (const [name, def] of dictionary) {\r\n          if (!/[A-Za-z][A-Za-z0-9-]*/.test(name) && name.length !== 1) {\r\n              engine.signal({ severity: 'error', message: 'invalid-name', head: name });\r\n          }\r\n          if (def.wikidata) {\r\n              if (wikidata.has(def.wikidata)) {\r\n                  engine.signal({\r\n                      severity: 'warning',\r\n                      message: ['duplicate-wikidata', def.wikidata],\r\n                      head: name,\r\n                  });\r\n              }\r\n              wikidata.add(def.wikidata);\r\n          }\r\n          if (isSymbolDefinition(def)) {\r\n              if (!engine.isSubsetOf(def.domain, 'Anything')) {\r\n                  engine.signal({\r\n                      severity: 'warning',\r\n                      message: ['unknown-domain', def.domain],\r\n                      head: name,\r\n                  });\r\n              }\r\n          }\r\n          if (isFunctionDefinition(def)) {\r\n              for (const sig of def.signatures) {\r\n                  if (typeof sig.result !== 'function' &&\r\n                      !engine.isSubsetOf(sig.result, 'Anything')) {\r\n                      engine.signal({\r\n                          severity: 'warning',\r\n                          message: ['unknown-domain', sig.result],\r\n                          head: name,\r\n                      });\r\n                  }\r\n                  if (sig.rest && !engine.isSubsetOf(sig.rest, 'Anything')) {\r\n                      engine.signal({\r\n                          severity: 'warning',\r\n                          message: ['unknown-domain', def.domain],\r\n                          head: name,\r\n                      });\r\n                  }\r\n                  if (sig.args) {\r\n                      for (const arg of sig.args) {\r\n                          if (!engine.isSubsetOf(arg, 'Anything')) {\r\n                              engine.signal({\r\n                                  severity: 'warning',\r\n                                  message: ['unknown-domain', def.domain],\r\n                                  head: name,\r\n                              });\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          if (isSetDefinition(def)) {\r\n              if (def.supersets.length === 0 && name !== 'Anything') {\r\n                  engine.signal({\r\n                      severity: 'warning',\r\n                      message: 'expected-supersets',\r\n                      head: name,\r\n                  });\r\n              }\r\n              for (const parent of def.supersets) {\r\n                  if (!engine.isSubsetOf(parent, 'Anything')) {\r\n                      engine.signal({\r\n                          severity: 'warning',\r\n                          message: ['expected-supersets', parent],\r\n                          head: name,\r\n                      });\r\n                  }\r\n                  if (engine.isSubsetOf(parent, name)) {\r\n                      engine.signal({\r\n                          severity: 'warning',\r\n                          message: ['cyclic-definition', setParentsToString(engine, name)],\r\n                          head: name,\r\n                      });\r\n                      dictionary.delete(name);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }\r\n  function setParentsToString(engine, expr, cycle) {\r\n      var _a;\r\n      const result = [`${expr}`];\r\n      const name = typeof expr === 'string' ? expr : getFunctionName(expr);\r\n      if (cycle) {\r\n          if (cycle.includes(name))\r\n              return `${name} ↩︎ `;\r\n          cycle.push(name);\r\n      }\r\n      else {\r\n          cycle = [name];\r\n      }\r\n      const def = engine.getSetDefinition(name);\r\n      if (!def)\r\n          return `${name}?!`;\r\n      if (!def.supersets.length || def.supersets.length === 0)\r\n          return '';\r\n      for (const parent of def === null || def === void 0 ? void 0 : def.supersets) {\r\n          if (typeof parent === 'string') {\r\n              result.push(setParentsToString(engine, parent, [...cycle]));\r\n          }\r\n      }\r\n      if (result.length <= 1) {\r\n          return (_a = result[0]) !== null && _a !== void 0 ? _a : '';\r\n      }\r\n      return '[' + result.join(' ➔ ') + ']';\r\n  }\n\n  function compare(_engine, lhs, rhs) {\r\n      const result = order(lhs, rhs);\r\n      return result < 0 ? -1 : result > 0 ? +1 : 0;\r\n  }\n\n  async function evaluateWithEngine(_expr, engine) {\r\n      if (!engine.shouldContinueExecution())\r\n          return null;\r\n      return 'Nothing';\r\n  }\n\n  function domain(_expr, _engine) {\r\n      return null;\r\n  }\n\n  const NUMERICAL_TOLERANCE = Math.pow(10, -10);\r\n  function chop(x) {\r\n      return Math.abs(x) < NUMERICAL_TOLERANCE ? 0 : x;\r\n  }\r\n  class CortexError {\r\n      constructor(errorSignal) {\r\n          this.signal = Object.assign({ severity: 'error' }, errorSignal);\r\n      }\r\n      toString() {\r\n          let result = '';\r\n          if (this.signal.head) {\r\n              result += this.signal.head + ': ';\r\n          }\r\n          if (typeof this.signal.message === 'string') {\r\n              result += this.signal.message;\r\n          }\r\n          else {\r\n              result += ' ';\r\n              for (const arg of this.signal.message) {\r\n                  result += arg.toString() + ' ';\r\n              }\r\n          }\r\n          return result;\r\n      }\r\n  }\n\n  function same(lhs, rhs) {\r\n      var _a, _b;\r\n      if (typeof lhs === 'object' &&\r\n          typeof rhs === 'object' &&\r\n          'wikidata' in lhs &&\r\n          'wikidata' in rhs) {\r\n          if (lhs.wikidata !== rhs.wikidata)\r\n              return false;\r\n      }\r\n      if ((typeof lhs === 'number' || isNumberObject(lhs)) &&\r\n          (typeof rhs === 'number' || isNumberObject(rhs))) {\r\n          return (chop(((_a = getNumberValue(lhs)) !== null && _a !== void 0 ? _a : NaN) - ((_b = getNumberValue(rhs)) !== null && _b !== void 0 ? _b : NaN)) === 0);\r\n      }\r\n      const lhSymbol = getSymbolName(lhs);\r\n      if (lhSymbol !== null)\r\n          return lhSymbol === getSymbolName(rhs);\r\n      const lhsDict = getDictionary(lhs);\r\n      if (lhsDict !== null) {\r\n          const rhsDict = getDictionary(rhs);\r\n          if (!rhsDict)\r\n              return false;\r\n          const keys = Object.keys(lhsDict);\r\n          if (Object.keys(rhsDict).length !== keys.length)\r\n              return false;\r\n          for (const key of keys) {\r\n              if (!same(lhsDict[key], rhsDict[key]))\r\n                  return false;\r\n          }\r\n          return true;\r\n      }\r\n      const lhsHead = getFunctionHead(lhs);\r\n      if (lhsHead === null)\r\n          return false;\r\n      const rhsHead = getFunctionHead(rhs);\r\n      if (rhsHead === null)\r\n          return false;\r\n      if (!same(lhsHead, rhsHead))\r\n          return false;\r\n      const lhsArgCount = getArgCount(lhs);\r\n      const rhsArgCount = getArgCount(rhs);\r\n      if (lhsArgCount !== rhsArgCount)\r\n          return false;\r\n      let i = 1;\r\n      while (i <= lhsArgCount) {\r\n          if (!same(getArg(lhs, i), getArg(rhs, i)))\r\n              return false;\r\n          i += 1;\r\n      }\r\n      return true;\r\n  }\n\n  class ComputeEngine {\r\n      constructor(options) {\r\n          var _a;\r\n          const dicts = (_a = options === null || options === void 0 ? void 0 : options.dictionaries) !== null && _a !== void 0 ? _a : ComputeEngine.getDictionaries();\r\n          for (const dict of dicts) {\r\n              if (!this.context) {\r\n                  this.pushScope(dict, {\r\n                      warn: (sigs) => {\r\n                          for (const sig of sigs) {\r\n                              if (typeof sig.message === 'string') {\r\n                                  console.warn(sig.message);\r\n                              }\r\n                              else {\r\n                                  console.warn(...sig.message);\r\n                              }\r\n                          }\r\n                      },\r\n                      timeLimit: 2.0,\r\n                      memoryLimit: 1.0,\r\n                      recursionLimit: 1024,\r\n                  });\r\n              }\r\n              else {\r\n                  this.pushScope(dict);\r\n              }\r\n          }\r\n          this.pushScope({});\r\n      }\r\n      static getDictionaries(categories = 'all') {\r\n          return getDefaultDictionaries(categories);\r\n      }\r\n      pushScope(dictionary, scope) {\r\n          this.context = Object.assign(Object.assign({}, scope), { parentScope: this.context, dictionary: compileDictionary(dictionary, this) });\r\n      }\r\n      popScope() {\r\n          var _a;\r\n          const parentScope = (_a = this.context) === null || _a === void 0 ? void 0 : _a.parentScope;\r\n          if (this.context.warnings) {\r\n              const warnings = [...this.context.warnings];\r\n              this.context.warnings = [];\r\n              if (this.context.warn) {\r\n                  this.context.warn(warnings);\r\n              }\r\n          }\r\n          if (parentScope && this.context.warnings.length > 0) {\r\n              if (!parentScope.warnings) {\r\n                  parentScope.warnings = [...this.context.warnings];\r\n              }\r\n              else {\r\n                  parentScope.warnings = [\r\n                      ...parentScope.warnings,\r\n                      ...this.context.warnings,\r\n                  ];\r\n              }\r\n          }\r\n          this.context = parentScope;\r\n      }\r\n      shouldContinueExecution() {\r\n          if (this.context.timeLimit) {\r\n              if (this.context.deadline < global.performance.now()) {\r\n                  throw new CortexError({\r\n                      message: 'timeout',\r\n                  });\r\n              }\r\n          }\r\n          return true;\r\n      }\r\n      getVars(expr) {\r\n          const result = new Set();\r\n          varsRecursive(expr, result, this);\r\n          return result;\r\n      }\r\n      getFunctionDefinition(name) {\r\n          let scope = this.context;\r\n          let def = null;\r\n          while (scope && !def) {\r\n              def = scope.dictionary.get(name);\r\n              if (def && !('signatures' in def))\r\n                  def = null;\r\n              if (!def)\r\n                  scope = scope.parentScope;\r\n          }\r\n          if (def)\r\n              def.scope = scope;\r\n          return def;\r\n      }\r\n      getSymbolDefinition(name) {\r\n          let scope = this.context;\r\n          let def = null;\r\n          while (scope && !def) {\r\n              def = scope.dictionary.get(name);\r\n              if (def && !('constant' in def))\r\n                  def = null;\r\n              if (!def)\r\n                  scope = scope.parentScope;\r\n          }\r\n          if (def)\r\n              def.scope = scope;\r\n          return def;\r\n      }\r\n      getSetDefinition(name) {\r\n          let scope = this.context;\r\n          let def = null;\r\n          while (scope && !def) {\r\n              def = scope.dictionary.get(name);\r\n              if (!isSetDefinition(def))\r\n                  def = null;\r\n              if (!def)\r\n                  scope = scope.parentScope;\r\n          }\r\n          if (def)\r\n              def.scope = scope;\r\n          return def;\r\n      }\r\n      getDefinition(name) {\r\n          let scope = this.context;\r\n          let def = null;\r\n          while (scope && !def) {\r\n              def = scope.dictionary.get(name);\r\n              if (!def)\r\n                  scope = scope.parentScope;\r\n          }\r\n          if (def)\r\n              def.scope = scope;\r\n          return def;\r\n      }\r\n      signal(sig) {\r\n          return;\r\n      }\r\n      isSubsetOf(lhs, rhs) {\r\n          var _a, _b, _c;\r\n          if (!lhs || !rhs)\r\n              return false;\r\n          if (typeof lhs === 'string' && lhs === rhs)\r\n              return true;\r\n          if (rhs === 'Anything')\r\n              return true;\r\n          if (rhs === 'Nothing')\r\n              return false;\r\n          const lhsFnName = getFunctionName(lhs);\r\n          if (lhsFnName === 'Union') {\r\n              return getTail(lhs).some((x) => this.isSubsetOf(x, rhs));\r\n          }\r\n          else if (lhsFnName === 'Intersection') {\r\n              return getTail(lhs).every((x) => this.isSubsetOf(x, rhs));\r\n          }\r\n          else if (lhsFnName === 'SetMinus') {\r\n              return (this.isSubsetOf(getArg(lhs, 1), rhs) &&\r\n                  !this.isSubsetOf(getArg(lhs, 2), rhs));\r\n          }\r\n          const rhsFnName = getFunctionName(rhs);\r\n          if (rhsFnName === 'Union') {\r\n              return getTail(rhs).some((x) => this.isSubsetOf(lhs, x));\r\n          }\r\n          else if (rhsFnName === 'Intersection') {\r\n              return getTail(rhs).every((x) => this.isSubsetOf(lhs, x));\r\n          }\r\n          else if (rhsFnName === 'SetMinus') {\r\n              return (this.isSubsetOf(lhs, getArg(rhs, 1)) &&\r\n                  !this.isSubsetOf(lhs, getArg(rhs, 2)));\r\n          }\r\n          const rhsDomainName = (_a = getSymbolName(rhs)) !== null && _a !== void 0 ? _a : rhsFnName;\r\n          if (!rhsDomainName) {\r\n              const rhsVal = (_b = getNumberValue(rhs)) !== null && _b !== void 0 ? _b : NaN;\r\n              if (Number.isNaN(rhsVal))\r\n                  return false;\r\n              rhs = rhs === 0 ? 'NumberZero' : ['Set', rhs];\r\n          }\r\n          const rhsDef = this.getSetDefinition(rhsDomainName);\r\n          if (!rhsDef)\r\n              return false;\r\n          if (typeof rhsDef.isSubsetOf === 'function') {\r\n              return rhsDef.isSubsetOf(this, lhs, rhs);\r\n          }\r\n          const lhsDomainName = (_c = getSymbolName(lhs)) !== null && _c !== void 0 ? _c : lhsFnName;\r\n          if (!lhsDomainName)\r\n              return false;\r\n          const lhsDef = this.getSetDefinition(lhsDomainName);\r\n          if (!lhsDef)\r\n              return false;\r\n          for (const parent of lhsDef.supersets) {\r\n              if (this.isSubsetOf(parent, rhs))\r\n                  return true;\r\n          }\r\n          return false;\r\n      }\r\n      format(expr, forms) {\r\n          return format$1(expr, Array.isArray(forms) ? forms : [forms !== null && forms !== void 0 ? forms : 'canonical'], this);\r\n      }\r\n      canonical(expr) {\r\n          return this.format(expr);\r\n      }\r\n      evaluate(exp) {\r\n          return evaluateWithEngine(exp, this);\r\n      }\r\n      domain(exp) {\r\n          return domain();\r\n      }\r\n      isInfinity(_expr) {\r\n          return undefined;\r\n      }\r\n      isZero(expr) {\r\n          return this.equal(expr, 0);\r\n      }\r\n      isOne(expr) {\r\n          return this.equal(expr, 1);\r\n      }\r\n      isMinusOne(expr) {\r\n          return this.equal(expr, -1);\r\n      }\r\n      isNonNegative(expr) {\r\n          const result = this.isZero(expr);\r\n          if (result === undefined)\r\n              return undefined;\r\n          if (result === true)\r\n              return true;\r\n          return this.isPositive(expr);\r\n      }\r\n      isPositive(_expr) {\r\n          return undefined;\r\n      }\r\n      isNegative(expr) {\r\n          const result = this.isNonNegative(expr);\r\n          if (result === undefined)\r\n              return undefined;\r\n          return !result;\r\n      }\r\n      isNonPositive(expr) {\r\n          const result = this.isPositive(expr);\r\n          if (result === undefined)\r\n              return undefined;\r\n          return !result;\r\n      }\r\n      isInteger(_expr) {\r\n          return undefined;\r\n      }\r\n      isRational(_expr) {\r\n          return undefined;\r\n      }\r\n      isReal(_expr) {\r\n          return undefined;\r\n      }\r\n      isExtendedReal(_expr) {\r\n          return undefined;\r\n      }\r\n      isAlgebraic(_expr) {\r\n          return undefined;\r\n      }\r\n      isComplex(_expr) {\r\n          return undefined;\r\n      }\r\n      isElement(_expr, _dom) {\r\n          return undefined;\r\n      }\r\n      match(_pattern, _target) {\r\n          return null;\r\n      }\r\n      same(lhs, rhs) {\r\n          return same(lhs, rhs);\r\n      }\r\n      compare(lhs, rhs) {\r\n          return compare(this, lhs, rhs);\r\n      }\r\n      equal(lhs, rhs) {\r\n          const result = compare(this, lhs, rhs);\r\n          return result === undefined ? undefined : result === 0;\r\n      }\r\n      less(lhs, rhs) {\r\n          const result = compare(this, lhs, rhs);\r\n          return result === undefined ? undefined : result < 0;\r\n      }\r\n      lessEqual(lhs, rhs) {\r\n          const result = compare(this, lhs, rhs);\r\n          return result === undefined ? undefined : result <= 0;\r\n      }\r\n      greater(lhs, rhs) {\r\n          const result = compare(this, lhs, rhs);\r\n          return result === undefined ? undefined : result > 0;\r\n      }\r\n      greaterEqual(lhs, rhs) {\r\n          const result = compare(this, lhs, rhs);\r\n          return result === undefined ? undefined : result >= 0;\r\n      }\r\n  }\r\n  function varsRecursive(expr, vars, engine) {\r\n      const args = getTail(expr);\r\n      if (args.length > 0) {\r\n          args.forEach((x) => varsRecursive(x, vars, engine));\r\n      }\r\n      else {\r\n          const name = getSymbolName(expr);\r\n          if (name && !vars.has(name)) {\r\n              const def = engine.getSymbolDefinition(name);\r\n              if (!def || def.constant === false) {\r\n                  vars.add(name);\r\n              }\r\n          }\r\n      }\r\n  }\r\n  function format(expr, forms, options) {\r\n      return format$1(expr, Array.isArray(forms) ? forms : [forms], new ComputeEngine(options));\r\n  }\r\n  function evaluate(expr, options) {\r\n      return evaluateWithEngine(expr, new ComputeEngine(options));\r\n  }\n\n  const LINEBREAK = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\r\n  const htmlTerminal = {\r\n      joinLines(lines) {\r\n          return `<div>${lines.join('</div><div>')}</div>`;\r\n      },\r\n      grey(s) {\r\n          return `<span style=\"opacity:.5\">${s}</span>`;\r\n      },\r\n      red(s) {\r\n          return `<span style=\"color:#F33\">${s}</span>`;\r\n      },\r\n      highlightBackground(s) {\r\n          return `<span style=\"background:rgba(255, 100, 100, .1);display:block;border-radius: 4px\">${s}</span>`;\r\n      },\r\n  };\r\n  const terminal = htmlTerminal;\r\n  class Origin {\r\n      constructor(source, url) {\r\n          this.source = source;\r\n          this.url = url;\r\n      }\r\n      get lines() {\r\n          if (!this._lines)\r\n              this._lines = this.source.split(LINEBREAK);\r\n          return this._lines;\r\n      }\r\n      get lineOffsets() {\r\n          if (this._lineOffsets == null) {\r\n              const offsets = [];\r\n              const text = this.source;\r\n              let isLineStart = true;\r\n              let i = 0;\r\n              while (i < text.length) {\r\n                  if (isLineStart) {\r\n                      offsets.push(i);\r\n                      isLineStart = false;\r\n                  }\r\n                  const ch = text.charCodeAt(i);\r\n                  isLineStart = ch === 13 || ch === 10 || ch === 0x2028 || ch === 0x2029;\r\n                  if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {\r\n                      i++;\r\n                  }\r\n                  i++;\r\n              }\r\n              if (isLineStart && text.length > 0)\r\n                  offsets.push(text.length);\r\n              this._lineOffsets = offsets;\r\n          }\r\n          return this._lineOffsets;\r\n      }\r\n      getLinecol(offset) {\r\n          offset = Math.max(Math.min(offset, this.source.length), 0);\r\n          const lineOffsets = this.lineOffsets;\r\n          let low = 0;\r\n          let high = lineOffsets.length;\r\n          if (high === 0)\r\n              return [1, offset + 1];\r\n          while (low < high) {\r\n              const mid = Math.floor((low + high) / 2);\r\n              if (lineOffsets[mid] > offset)\r\n                  high = mid;\r\n              else\r\n                  low = mid + 1;\r\n          }\r\n          return [low, offset - lineOffsets[low - 1] + 1];\r\n      }\r\n      signalOrigin(offset) {\r\n          const [line, column] = this.getLinecol(offset);\r\n          return {\r\n              url: this.url,\r\n              source: this.source,\r\n              offset: offset,\r\n              line,\r\n              column,\r\n              around: this.sourceAround(line, column),\r\n          };\r\n      }\r\n      chalkGutter(s) {\r\n          return terminal.grey(s);\r\n      }\r\n      chalkMarker(s) {\r\n          return terminal.red(s);\r\n      }\r\n      chalkMessage(s) {\r\n          return terminal.red(s);\r\n      }\r\n      sourceAround(line, column, message) {\r\n          const linesAbove = 2;\r\n          const linesBelow = 3;\r\n          const start = Math.max(line - 1 - (linesAbove + 1), 0);\r\n          const end = Math.min(this.lines.length, line + linesBelow) - 1;\r\n          const hasColumn = typeof column === 'number';\r\n          const numberMaxWidth = String(end).length;\r\n          const result = [];\r\n          for (let index = start; index <= end; index++) {\r\n              const paddedNumber = ` ${index + 1}`.slice(-numberMaxWidth);\r\n              const gutter = ` ${paddedNumber} \\u2506 `;\r\n              let markerLine = '';\r\n              if (index === line - 1) {\r\n                  if (hasColumn) {\r\n                      const markerSpacing = this.lines[index]\r\n                          .slice(0, Math.max(column - 1, 0))\r\n                          .replace(/[^\\t]/g, ' ');\r\n                      markerLine = terminal.joinLines([\r\n                          '',\r\n                          [\r\n                              ' ',\r\n                              this.chalkGutter(gutter.replace(/\\d/g, ' ')),\r\n                              markerSpacing,\r\n                              this.chalkMarker('^'),\r\n                          ].join(''),\r\n                      ]);\r\n                      if (message) {\r\n                          markerLine += ' ' + this.chalkMessage(message);\r\n                      }\r\n                  }\r\n                  else if (message) {\r\n                      markerLine = terminal.joinLines([\r\n                          '',\r\n                          this.chalkGutter(gutter.replace(/\\d/g, ' ')) + message,\r\n                      ]);\r\n                  }\r\n                  result.push(terminal.highlightBackground([\r\n                      this.chalkMarker('>'),\r\n                      this.chalkGutter(gutter),\r\n                      this.lines[index],\r\n                      markerLine,\r\n                  ].join('')));\r\n              }\r\n              else {\r\n                  result.push(` ${this.chalkGutter(gutter)}${this.lines[index]}`);\r\n              }\r\n          }\r\n          return terminal.joinLines(result);\r\n      }\r\n  }\n\n  const LINEBREAK_CHARACTER = [\r\n      0x000a,\r\n      0x000d,\r\n      0x2028,\r\n      0x2029,\r\n  ];\r\n  const PATTERN_WHITE_SPACE = [\r\n      0x0009,\r\n      0x000a,\r\n      0x000b,\r\n      0x000c,\r\n      0x000d,\r\n      0x0020,\r\n      0x0085,\r\n      0x200e,\r\n      0x200f,\r\n      0x2028,\r\n      0x2029,\r\n  ];\r\n  const PATTERN_SYNTAX = expand([\r\n      [0x0021, 0x002f],\r\n      [0x003a, 0x0040],\r\n      [0x005b, 0x005e],\r\n      0x0060,\r\n      [0x007b, 0x007e],\r\n      [0x00a1, 0x00a7],\r\n      0x00a9,\r\n      [0x00ab, 0x00ac],\r\n      0x00ae,\r\n      [0x00b0, 0x00b1],\r\n      0x00b6,\r\n      0x00bb,\r\n      0x00bf,\r\n      0x00d7,\r\n      0x00f7,\r\n      [0x2010, 0x203e],\r\n      [0x2041, 0x2053],\r\n      [0x2190, 0x221a],\r\n      [0x221b, 0x2775],\r\n      [0x2794, 0x2e7f],\r\n      [0x3001, 0x3003],\r\n      [0x3008, 0x3020],\r\n      0x3030,\r\n      [0xfd3e, 0xfd3f],\r\n      [0xfe45, 0xfe46],\r\n  ]);\r\n  const IDENTIFIER_CONTINUE_PROHIBITED = expand([\r\n      [0x0000, 0x0020],\r\n      [0x007f, 0x009f],\r\n      0x005c,\r\n      0x0060,\r\n      [0xfffe, 0xffff],\r\n  ]);\r\n  const IDENTIFIER_START_PROHIBITED = [\r\n      ...IDENTIFIER_CONTINUE_PROHIBITED,\r\n      0x0021,\r\n      0x0022,\r\n      0x0023,\r\n      0x0024,\r\n      0x0025,\r\n      0x0026,\r\n      0x0027,\r\n      0x0028,\r\n      0x0029,\r\n      0x002e,\r\n      0x003a,\r\n      0x003c,\r\n      0x003f,\r\n      0x0040,\r\n      0x005b,\r\n      0x005d,\r\n      0x005e,\r\n      0x007b,\r\n      0x007d,\r\n      0x007e,\r\n  ];\r\n  const WHITE_SPACE = [\r\n      ...PATTERN_WHITE_SPACE,\r\n      0x0000,\r\n      0x00a0,\r\n      0x1680,\r\n      0x180e,\r\n      0x2000,\r\n      0x2001,\r\n      0x2002,\r\n      0x2003,\r\n      0x2004,\r\n      0x2005,\r\n      0x2006,\r\n      0x2007,\r\n      0x2008,\r\n      0x2009,\r\n      0x200a,\r\n      0x202f,\r\n      0x205f,\r\n      0x3000,\r\n  ];\r\n  const CONFUSABLE_CHARACTERS = [\r\n      0x07fa,\r\n      0xfe4d,\r\n      0xfe4e,\r\n      0xfe4f,\r\n      0x2010,\r\n      0x2011,\r\n      0x2012,\r\n      0x2013,\r\n      0xfe58,\r\n      0x2043,\r\n      0x02d7,\r\n      0xff5e,\r\n      0xff1a,\r\n      0x0589,\r\n      0x0703,\r\n      0x0704,\r\n      0xfe30,\r\n      0x205a,\r\n      0x05c3,\r\n      0x02f8,\r\n      0xa789,\r\n      0x2236,\r\n      0xa4fd,\r\n      0x037e,\r\n      0xff01,\r\n      0x01c3,\r\n      0x0294,\r\n      0x097d,\r\n      0x2024,\r\n      0x06d4,\r\n      0x0701,\r\n      0x0702,\r\n      0x0660,\r\n      0x06f0,\r\n      0x30fb,\r\n      0xff65,\r\n      0x0387,\r\n      0x10101,\r\n      0x2027,\r\n      0xff02,\r\n      0x201c,\r\n      0x201d,\r\n  ];\r\n  const INVISIBLE_CHARS = expand([\r\n      ...WHITE_SPACE,\r\n      ...CONFUSABLE_CHARACTERS,\r\n      [0x0000, 0x001f],\r\n      [0x007f, 0x009f],\r\n      0x00ad,\r\n      0x061c,\r\n      0x180e,\r\n      0x200b,\r\n      0x200c,\r\n      0x200d,\r\n      0x200e,\r\n      0x200f,\r\n      0x2060,\r\n      0x2061,\r\n      0x2062,\r\n      0x2063,\r\n      0x2064,\r\n      0x2066,\r\n      0x2067,\r\n      0x2068,\r\n      0x2069,\r\n      0x206a,\r\n      0x206b,\r\n      0x206c,\r\n      0x206d,\r\n      0x206e,\r\n      0x206f,\r\n      0x2800,\r\n      [0xfdd0, 0xfdef],\r\n      0xfeff,\r\n      0xfffe,\r\n      0xffff,\r\n  ]);\r\n  const ESCAPED_CHARS = new Map([\r\n      [0x0000, '\\\\0'],\r\n      [0x0008, '\\\\b'],\r\n      [0x0009, '\\\\t'],\r\n      [0x000a, '\\\\n'],\r\n      [0x000c, '\\\\f'],\r\n      [0x000d, '\\\\r'],\r\n      [0x0020, ' '],\r\n      [0x005c, '\\\\\\\\'],\r\n      [0x0027, \"\\\\'\"],\r\n      [0x0022, '\\\\\"'],\r\n  ]);\r\n  const REVERSED_ESCAPED_CHARS = new Map([\r\n      [0x0030, 0x0000],\r\n      [0x005c, 0x005c],\r\n      [0x0027, 0x0027],\r\n      [0x022, 0x0022],\r\n      [0x0062, 0x0008],\r\n      [0x0066, 0x000c],\r\n      [0x006e, 0x000a],\r\n      [0x0072, 0x000d],\r\n      [0x0073, 0x0020],\r\n      [0x0074, 0x0009],\r\n  ]);\r\n  const HEX_DIGITS = new Map([\r\n      [0x0030, 0],\r\n      [0x0031, 1],\r\n      [0x0032, 2],\r\n      [0x0033, 3],\r\n      [0x0034, 4],\r\n      [0x0035, 5],\r\n      [0x0036, 6],\r\n      [0x0037, 7],\r\n      [0x0038, 8],\r\n      [0x0039, 9],\r\n      [0x0061, 10],\r\n      [0x0041, 10],\r\n      [0x0062, 11],\r\n      [0x0042, 11],\r\n      [0x0063, 12],\r\n      [0x0043, 12],\r\n      [0x0064, 13],\r\n      [0x0044, 13],\r\n      [0x0065, 14],\r\n      [0x0045, 14],\r\n      [0x0066, 15],\r\n      [0x0046, 15],\r\n      [0xff10, 0],\r\n      [0xff11, 1],\r\n      [0xff12, 2],\r\n      [0xff13, 3],\r\n      [0xff14, 4],\r\n      [0xff15, 5],\r\n      [0xff16, 6],\r\n      [0xff17, 7],\r\n      [0xff18, 8],\r\n      [0xff19, 9],\r\n      [0xff21, 10],\r\n      [0xff22, 11],\r\n      [0xff23, 12],\r\n      [0xff24, 13],\r\n      [0xff25, 14],\r\n      [0xff26, 15],\r\n      [0xff41, 10],\r\n      [0xff42, 11],\r\n      [0xff43, 12],\r\n      [0xff44, 13],\r\n      [0xff45, 14],\r\n      [0xff46, 15],\r\n  ]);\r\n  const DIGITS = new Map([\r\n      [0x0030, 0],\r\n      [0x0031, 1],\r\n      [0x0032, 2],\r\n      [0x0033, 3],\r\n      [0x0034, 4],\r\n      [0x0035, 5],\r\n      [0x0036, 6],\r\n      [0x0037, 7],\r\n      [0x0038, 8],\r\n      [0x0039, 9],\r\n      [0xff10, 0],\r\n      [0xff11, 1],\r\n      [0xff12, 2],\r\n      [0xff13, 3],\r\n      [0xff14, 4],\r\n      [0xff15, 5],\r\n      [0xff16, 6],\r\n      [0xff17, 7],\r\n      [0xff18, 8],\r\n      [0xff19, 9],\r\n  ]);\r\n  const FANCY_UNICODE = new Map([\r\n      [0x00ac, '!'],\r\n      [0x00b1, '+-'],\r\n      [0x2213, '-+'],\r\n      [0x00d7, '*'],\r\n      [0x00f7, '/'],\r\n      [0x2215, '/'],\r\n      [0x2024, '.'],\r\n      [0x2025, '..'],\r\n      [0x2026, '...'],\r\n      [0x2027, '.'],\r\n      [0x2032, \"'\"],\r\n      [0x2033, \"''\"],\r\n      [0x2034, \"'''\"],\r\n      [0x2042, '***'],\r\n      [0x2044, '/'],\r\n      [0x2047, '??'],\r\n      [0x2048, '?!'],\r\n      [0x2049, '!?'],\r\n      [0x204e, '*'],\r\n      [0x2051, '**'],\r\n      [0x2056, '...'],\r\n      [0x2059, '.....'],\r\n      [0x205a, ':'],\r\n      [0x205b, '.:.'],\r\n      [0x2062, '*'],\r\n      [0x2064, '+'],\r\n      [0x03c0, 'Pi'],\r\n      [0x203c, '!!'],\r\n      [0x2148, 'ImaginaryI'],\r\n      [0x2147, 'ExponentialE'],\r\n      [0x2102, 'ComplexNumber'],\r\n      [0x211d, 'RealNumber'],\r\n      [0x2115, 'NaturalNumber'],\r\n      [0x2124, 'Integer'],\r\n      [0x211a, 'RationalNumber'],\r\n      [0x2190, '<-'],\r\n      [0x2192, '->'],\r\n      [0x2194, '<->'],\r\n      [0x21a6, '|->'],\r\n      [0x21d0, '=>'],\r\n      [0x21d4, '<=>'],\r\n      [0x2205, 'EmptySet'],\r\n      [0x221e, 'Infinity'],\r\n      [0x29dd, 'ComplexInfinity'],\r\n      [0x2212, '-'],\r\n      [0x2218, '.'],\r\n      [0x22c0, '&&'],\r\n      [0x22c1, '||'],\r\n      [0x2227, '&&'],\r\n      [0x2228, '||'],\r\n      [0x2237, '::'],\r\n      [0x2260, '!='],\r\n      [0x2261, '=='],\r\n      [0x2262, '!=='],\r\n      [0x2263, '==='],\r\n      [0x2a7d, '<='],\r\n      [0x2a7e, '>='],\r\n      [0x2264, '<='],\r\n      [0x2265, '>='],\r\n      [0x2266, '<='],\r\n      [0x2267, '>='],\r\n      [0x226a, '<<'],\r\n      [0x226b, '>>'],\r\n      [0x25b7, '|>'],\r\n      [0x25c1, '<|'],\r\n      [0x29d0, '||>'],\r\n      [0x29cf, '<||'],\r\n      [0x21dd, '~>'],\r\n      [0x21dc, '<~'],\r\n      [0x2208, 'in'],\r\n      [0x2209, '!in'],\r\n      [0x2a75, '=='],\r\n      [0x2a76, '==='],\r\n      [0x2400, '\\\\0'],\r\n      [0x2408, '\\\\b'],\r\n      [0x2409, '\\\\t'],\r\n      [0x240a, '\\\\n'],\r\n      [0x2424, '\\\\n'],\r\n      [0x240d, '\\\\r'],\r\n  ]);\r\n  reverse(FANCY_UNICODE);\r\n  function reverse(table) {\r\n      const result = new Map();\r\n      for (const [k, v] of Object.entries(table)) {\r\n          if (result.has(v)) {\r\n              const ks = result.get(v);\r\n              ks.push(parseInt(k));\r\n              result.set(v, ks);\r\n          }\r\n          else {\r\n              result.set(v, [parseInt(k)]);\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  function expand(source) {\r\n      const result = [];\r\n      for (const entry of source) {\r\n          if (typeof entry === 'number') {\r\n              result.push(entry);\r\n          }\r\n          else {\r\n              for (let i = entry[0]; i <= entry[1]; i++) {\r\n                  result.push(i);\r\n              }\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  function isLinebreak(c) {\r\n      return LINEBREAK_CHARACTER.includes(c);\r\n  }\r\n  function isInlineSpace(c) {\r\n      return c === 0x0009 || c === 0x0020;\r\n  }\r\n  function isWhitespace(c) {\r\n      return WHITE_SPACE.includes(c);\r\n  }\r\n  function isBreak(c) {\r\n      return WHITE_SPACE.includes(c) || PATTERN_SYNTAX.includes(c);\r\n  }\r\n  function isIdentifierContinueProhibited(c) {\r\n      return IDENTIFIER_CONTINUE_PROHIBITED.includes(c);\r\n  }\r\n  function isIdentifierStartProhibited(c) {\r\n      return IDENTIFIER_START_PROHIBITED.includes(c);\r\n  }\r\n  function isInvisible(c) {\r\n      return INVISIBLE_CHARS.includes(c);\r\n  }\r\n  function codePointLength(code) {\r\n      console.assert(String.fromCodePoint(code).length === (code > 0xffff ? 2 : 1));\r\n      return code > 0xffff ? 2 : 1;\r\n  }\n\n  class FatalParsingError extends Error {\r\n      constructor(msg) {\r\n          super();\r\n          this.message = msg;\r\n      }\r\n  }\r\n  class Parser {\r\n      constructor(rules, source, url) {\r\n          this._offset = 0;\r\n          this.length = 0;\r\n          this.rules = rules;\r\n          this.source = source;\r\n          this.url = url;\r\n          this.length = source.length;\r\n          this._trace = [];\r\n      }\r\n      get(offset) {\r\n          return this.source.codePointAt(offset);\r\n      }\r\n      atEnd() {\r\n          return this.offset >= this.source.length;\r\n      }\r\n      atLinebreak() {\r\n          return isLinebreak(this.source.codePointAt(this.offset));\r\n      }\r\n      atString(s) {\r\n          let i = 0;\r\n          let match = true;\r\n          const start = this.offset;\r\n          while (match && i < s.length && i < this.source.length) {\r\n              match = this.get(start + i) === s.codePointAt(i);\r\n              i += 1;\r\n          }\r\n          return match;\r\n      }\r\n      slice(start, end) {\r\n          return this.source.slice(start, end);\r\n      }\r\n      get offset() {\r\n          return this._offset;\r\n      }\r\n      trace(rule) {\r\n          return [\r\n              ...this._trace,\r\n              typeof rule === 'string'\r\n                  ? rule\r\n                  : typeof rule === 'function'\r\n                      ? '???'\r\n                      : rule[0],\r\n          ];\r\n      }\r\n      skipTo(offset) {\r\n          this._offset = offset;\r\n          return this;\r\n      }\r\n      fatalError(msg) {\r\n          throw new FatalParsingError(msg);\r\n      }\r\n      hasRule(rule) {\r\n          return this.rules.has(rule);\r\n      }\r\n      parse(rule, fromOffset) {\r\n          this._trace.push(typeof rule === 'string'\r\n              ? rule\r\n              : typeof rule === 'function'\r\n                  ? '???'\r\n                  : rule[0]);\r\n          if (fromOffset !== undefined)\r\n              this.skipTo(fromOffset);\r\n          let result;\r\n          if (typeof rule === 'string')\r\n              result = this.rules.parse(rule, this);\r\n          else if (typeof rule === 'function')\r\n              result = rule(this);\r\n          else\r\n              result = rule[1](this);\r\n          this._trace.pop();\r\n          return result;\r\n      }\r\n      parseWhitespace() {\r\n          if (!this.hasRule('whitespace'))\r\n              return this.ignore();\r\n          return this.parse('whitespace');\r\n      }\r\n      ignore() {\r\n          const result = new Result(this);\r\n          return result.ignore();\r\n      }\r\n      failure() {\r\n          const result = new Result(this);\r\n          return result.failure();\r\n      }\r\n  }\r\n  class Result {\r\n      constructor(parser) {\r\n          this._parser = parser;\r\n          this._range = [parser.offset, parser.offset];\r\n      }\r\n      copyDiagnostics(from) {\r\n          if (!from.isError)\r\n              return;\r\n          if (this._diagnostics === undefined)\r\n              this._diagnostics = [];\r\n          this._diagnostics = [...this._diagnostics, ...from._diagnostics];\r\n      }\r\n      get parser() {\r\n          return this._parser;\r\n      }\r\n      get diagnostics() {\r\n          return this._diagnostics;\r\n      }\r\n      get isFailure() {\r\n          return this._diagnostics === undefined && this._value === undefined;\r\n      }\r\n      get isEmpty() {\r\n          return this._diagnostics === undefined && this._value === null;\r\n      }\r\n      get isSuccess() {\r\n          return (this._diagnostics === undefined &&\r\n              this._value !== undefined &&\r\n              this._value !== null);\r\n      }\r\n      get isError() {\r\n          return this._diagnostics !== undefined;\r\n      }\r\n      get start() {\r\n          return this._range[0];\r\n      }\r\n      get end() {\r\n          return this._range[1];\r\n      }\r\n      set end(val) {\r\n          this._range[1] = val;\r\n      }\r\n      set range(val) {\r\n          this._range = val;\r\n      }\r\n      get value() {\r\n          return this._value;\r\n      }\r\n      set value(val) {\r\n          this._value = val;\r\n      }\r\n      success(val) {\r\n          this._value = val;\r\n          this._range[1] = this._parser.offset - 1;\r\n          return this;\r\n      }\r\n      failure() {\r\n          this._parser.skipTo(this._range[0]);\r\n          return this;\r\n      }\r\n      ignore() {\r\n          this._value = null;\r\n          return this;\r\n      }\r\n      ignoreUntil(offset) {\r\n          this._parser.skipTo(offset);\r\n          this._range[1] = this._parser.offset;\r\n          this._value = null;\r\n          return this;\r\n      }\r\n      error(value, msg, fixits) {\r\n          this._value = value;\r\n          this._range[1] = this._parser.offset - 1;\r\n          if (!this._diagnostics)\r\n              this._diagnostics = [];\r\n          this._diagnostics.push({\r\n              severity: 'error',\r\n              range: [this._range[0], this._range[1]],\r\n              message: typeof msg === 'function' ? msg(this) : msg,\r\n              fixits,\r\n          });\r\n          return this;\r\n      }\r\n      errorAt(value, msg, pos, fixits) {\r\n          this._value = value;\r\n          this._range[1] = this._parser.offset - 1;\r\n          if (!this._diagnostics)\r\n              this._diagnostics = [];\r\n          this._diagnostics.push({\r\n              severity: 'error',\r\n              range: [this._range[0], this._range[1], pos],\r\n              message: typeof msg === 'function' ? msg(this) : msg,\r\n              fixits,\r\n          });\r\n          return this;\r\n      }\r\n      errorFrom(result, value) {\r\n          this._value = value;\r\n          this._range[1] = this._parser.offset - 1;\r\n          if (!this._diagnostics)\r\n              this._diagnostics = [];\r\n          this._diagnostics = [...this._diagnostics, ...result._diagnostics];\r\n          return this;\r\n      }\r\n      warning(msg, fixits) {\r\n          this._range[1] = this._parser.offset - 1;\r\n          if (!this._diagnostics)\r\n              this._diagnostics = [];\r\n          this._diagnostics.push({\r\n              severity: 'warning',\r\n              range: [this._range[0], this._range[1]],\r\n              message: msg,\r\n              fixits,\r\n          });\r\n          return this;\r\n      }\r\n  }\r\n  function skipUntilString(parser, pattern) {\r\n      let i = parser.offset;\r\n      const cps = [...pattern].map((x) => x.codePointAt(0));\r\n      while (i < pattern.length - cps.length) {\r\n          let c = parser.get(i);\r\n          if (c === cps[0]) {\r\n              let match = true;\r\n              let j = 1;\r\n              while (match && j < cps.length) {\r\n                  c = parser.get(i);\r\n                  match = c === cps[j];\r\n                  if (match) {\r\n                      j += 1;\r\n                      i += codePointLength(c);\r\n                  }\r\n              }\r\n              if (match)\r\n                  return i;\r\n          }\r\n          i += codePointLength(c);\r\n      }\r\n      return -1;\r\n  }\n\n  function description(c) {\r\n      if (typeof c === 'string')\r\n          return c;\r\n      return c[0];\r\n  }\r\n  function parseCodepoint(parser, value) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      if (parser.get(start) !== value)\r\n          result.failure();\r\n      parser.skipTo(start + codePointLength(value));\r\n      return result.success(String.fromCodePoint(value));\r\n  }\r\n  function codepoint(value) {\r\n      return [\r\n          `U+${('0000' + value.toString(16)).slice(-4)} (${String.fromCodePoint(value)})`,\r\n          (parser) => parseCodepoint(parser, value),\r\n      ];\r\n  }\r\n  function combine(parser, f, results, errors, msg) {\r\n      const result = new Result(parser);\r\n      let maxOffset = 0;\r\n      let minOffset = Infinity;\r\n      for (const res of results) {\r\n          result.copyDiagnostics(res);\r\n          if (res.isSuccess || res.isError) {\r\n              maxOffset = Math.max(maxOffset, res.end);\r\n              minOffset = Math.min(minOffset, res.end);\r\n          }\r\n      }\r\n      result.range = [minOffset, maxOffset];\r\n      result.value = results.length > 0 ? f(...results) : null;\r\n      if (msg)\r\n          result.error(result.value, msg);\r\n      if (errors)\r\n          for (const err of errors)\r\n              result.copyDiagnostics(err);\r\n      return result;\r\n  }\r\n  function parseString(parser, value) {\r\n      const result = new Result(parser);\r\n      let i = 0;\r\n      let match = true;\r\n      const start = parser.offset;\r\n      while (i < value.length && match && i < parser.length) {\r\n          match = parser.get(start + i) === value.codePointAt(i);\r\n          i++;\r\n      }\r\n      if (match && i === value.length) {\r\n          parser.skipTo(parser.offset + i);\r\n          result.success(value);\r\n      }\r\n      return result;\r\n  }\r\n  function literal(value) {\r\n      console.assert(value.length > 0);\r\n      if (value.length === 1)\r\n          return codepoint(value.codePointAt(0));\r\n      return [`**\\`${value}\\`**`, (parser) => parseString(parser, value)];\r\n  }\r\n  function sequence(cs, f) {\r\n      return [\r\n          cs.map((x) => description(x)).join(' '),\r\n          (parser) => {\r\n              const results = [];\r\n              const whitespaces = [];\r\n              let isFirst = true;\r\n              whitespaces.push(parser.parseWhitespace());\r\n              for (const c of cs) {\r\n                  const pos = parser.offset;\r\n                  const res = parser.parse(c);\r\n                  results.push(res);\r\n                  if (res.isFailure && isFirst)\r\n                      return res;\r\n                  if (res.isFailure) {\r\n                      return combine(parser, f, results, whitespaces, [\r\n                          'unexpected-symbol',\r\n                          String.fromCodePoint(parser.get(pos)),\r\n                          parser.trace(c),\r\n                      ]);\r\n                  }\r\n                  isFirst = false;\r\n                  whitespaces.push(parser.parseWhitespace());\r\n              }\r\n              return combine(parser, f, results, whitespaces);\r\n          },\r\n      ];\r\n  }\r\n  function either(cs, f) {\r\n      return [\r\n          cs.map((x) => description(x)).join(' | '),\r\n          (parser) => {\r\n              const start = parser.offset;\r\n              let error;\r\n              for (const c of cs) {\r\n                  parser.skipTo(start);\r\n                  const result = parser.parse(c);\r\n                  if (f && (result.isSuccess || result.isError)) {\r\n                      result.value = f(result);\r\n                  }\r\n                  if (result.isSuccess)\r\n                      return result;\r\n                  if (!error && result.isError)\r\n                      error = result;\r\n              }\r\n              if (error) {\r\n                  parser.skipTo(error.end + 1);\r\n                  return error;\r\n              }\r\n              parser.skipTo(start);\r\n              return parser.failure();\r\n          },\r\n      ];\r\n  }\r\n  function some(something, f) {\r\n      return [\r\n          `(${description(something)})*`,\r\n          (parser) => {\r\n              const whitespaces = [parser.parseWhitespace()];\r\n              let res = parser.parse(something);\r\n              const results = [res];\r\n              while (!parser.atEnd() && (res.isSuccess || res.isEmpty)) {\r\n                  whitespaces.push(parser.parseWhitespace());\r\n                  res = parser.parse(something);\r\n                  results.push(res);\r\n              }\r\n              return combine(parser, f, results, whitespaces);\r\n          },\r\n      ];\r\n  }\r\n  function maybe(something) {\r\n      return [\r\n          `\\\\[${description(something)}\\\\]`,\r\n          (parser) => {\r\n              const start = parser.offset;\r\n              const result = parser.parse(something);\r\n              if (result.isSuccess || result.isEmpty)\r\n                  return result;\r\n              if (result.isFailure) {\r\n                  parser.skipTo(start);\r\n                  return parser.ignore();\r\n              }\r\n              return result;\r\n          },\r\n      ];\r\n  }\r\n  function must(something, inMsg) {\r\n      return [\r\n          `(${description(something)})!`,\r\n          (parser) => {\r\n              const result = parser.parse(something);\r\n              if (result.isSuccess || result.isEmpty || result.isError)\r\n                  return result;\r\n              let retryCount = 5;\r\n              const pos = parser.offset;\r\n              let msg = inMsg;\r\n              if (!msg) {\r\n                  msg = parser.atEnd()\r\n                      ? ['expression-expected']\r\n                      : [\r\n                          'unexpected-symbol',\r\n                          String.fromCodePoint(parser.get(pos)),\r\n                          parser.trace(something),\r\n                      ];\r\n              }\r\n              while (retryCount > 0 && !parser.atEnd()) {\r\n                  parser.skipTo(parser.offset + 1);\r\n                  const res = parser.parse(something);\r\n                  if (res.isSuccess || res.isEmpty) {\r\n                      result.errorAt(res.value, msg, pos);\r\n                      result.copyDiagnostics(res);\r\n                      return result;\r\n                  }\r\n                  retryCount -= 1;\r\n              }\r\n              return result.errorAt(result.value, msg, pos);\r\n          },\r\n      ];\r\n  }\r\n  function eof() {\r\n      return [\r\n          '_eof_',\r\n          (parser) => {\r\n              const result = new Result(parser);\r\n              return parser.atEnd() ? result.success(true) : result.failure();\r\n          },\r\n      ];\r\n  }\n\n  function between(open, something, close) {\r\n      return [\r\n          `**\\`${open}\\`** (${description(something)})* **\\`${close}\\`**`,\r\n          (parser) => {\r\n              const result = new Result(parser);\r\n              if (!parser.atString(open))\r\n                  return result.failure();\r\n              const start = parser.offset;\r\n              parser.skipTo(start + open.length);\r\n              const res = parser.parse(something);\r\n              if (res.isError) {\r\n                  result.copyDiagnostics(res);\r\n                  result.range = [result.start, skipUntilString(parser, close)];\r\n                  return result;\r\n              }\r\n              if (!parser.atString(close)) {\r\n                  return result.error(res.value, ['closing-bracket-expected', close]);\r\n              }\r\n              parser.skipTo(parser.offset + close.length);\r\n              result.value = res.value;\r\n              return result;\r\n          },\r\n      ];\r\n  }\r\n  function manySeparatedBetween(open, something, separator, close, f) {\r\n      return [\r\n          `**\\`${open}\\`** (${description(something)}+#**\\`${separator}\\`** **\\`${close}\\`**`,\r\n          (parser) => {\r\n              const result = new Result(parser);\r\n              if (!parser.parse(literal(open)).isSuccess)\r\n                  return result.failure();\r\n              const values = [];\r\n              let done = false;\r\n              while (!done && !parser.atEnd()) {\r\n                  const res = parser.parse(something);\r\n                  result.copyDiagnostics(res);\r\n                  done = !res.isSuccess;\r\n                  if (!done) {\r\n                      values.push(res);\r\n                      done = !parser.parse(literal(separator)).isSuccess;\r\n                  }\r\n              }\r\n              if (values.length === 0) {\r\n                  return result.error(f([]), 'expression-expected');\r\n              }\r\n              if (!parser.parse(literal(close)).isSuccess) {\r\n                  return result.error(f(values), ['closing-bracket-expected', close]);\r\n              }\r\n              return result.success(f(values));\r\n          },\r\n      ];\r\n  }\r\n  function operatorSequence(ops, term, f) {\r\n      const termDesc = description(term);\r\n      return [\r\n          ops\r\n              .map((x) => {\r\n              var _a;\r\n              const [_data, op, prec] = x;\r\n              const assoc = (_a = x[3]) !== null && _a !== void 0 ? _a : 'right';\r\n              if (assoc === 'prefix') {\r\n                  return `**\\`${op}\\`**<sub>${prec}</sub> ${termDesc}`;\r\n              }\r\n              else if (assoc === 'suffix') {\r\n                  return `${termDesc} **\\`${op}\\`**<sub>${prec}</sub>`;\r\n              }\r\n              else if (assoc === 'left') {\r\n                  return `_···_ **\\`${op}\\`**<sub>${prec}L</sub> ${termDesc}`;\r\n              }\r\n              return `${termDesc} **\\`${op}\\`**<sub>${prec}R</sub> _···_`;\r\n          })\r\n              .join(' | '),\r\n          (parser) => parseWithPrecedence(parser, ops, term),\r\n      ];\r\n  }\r\n  function parseWithPrecedence(parser, ops, term, f) {\r\n      return parser.parse(term);\r\n  }\n\n  function parseExponent(parser, prefix) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      let i = start;\r\n      if (i >= parser.length)\r\n          return result.failure();\r\n      if (prefix === 'p') {\r\n          if (parser.get(i) !== 0x0070 && parser.get(i) !== 0x0050)\r\n              return result.failure();\r\n      }\r\n      else {\r\n          if (parser.get(i) !== 0x0065 && parser.get(i) !== 0x0045)\r\n              return result.failure();\r\n      }\r\n      i += 1;\r\n      let sign = 1;\r\n      if (parser.get(i) === 0x002d) {\r\n          i++;\r\n          sign = -1;\r\n      }\r\n      else if (parser.get(i) === 0x002b) {\r\n          i++;\r\n      }\r\n      if (parser.offset !== i && !DIGITS.has(parser.get(i))) {\r\n          parser.skipTo(i);\r\n          return result.error(0, 'exponent-expected');\r\n      }\r\n      let value = 0;\r\n      while (DIGITS.has(parser.get(i))) {\r\n          value = value * 10 + DIGITS.get(parser.get(i++));\r\n      }\r\n      parser.skipTo(i);\r\n      return result.success(sign * value);\r\n  }\r\n  function applyExponent(parser, start, value) {\r\n      const result = new Result(parser);\r\n      let exp = parseExponent(parser, 'e');\r\n      if (exp.isSuccess) {\r\n          value = Number.parseFloat(value.toString() + 'e' + exp.value.toString());\r\n      }\r\n      else if (exp.isFailure) {\r\n          exp = parseExponent(parser, 'p');\r\n          if (exp.isSuccess) {\r\n              value = value * Math.pow(2, exp.value);\r\n          }\r\n      }\r\n      if (exp.isSuccess || exp.isFailure)\r\n          return result.success(value);\r\n      return result.error(value, 'exponent-expected');\r\n  }\r\n  function parseBinaryNumber(parser) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      let i = start;\r\n      if (parser.get(i++) !== 0x0030 || parser.get(i++) !== 0x0062) {\r\n          return result.failure();\r\n      }\r\n      let value = 0;\r\n      let done = false;\r\n      while (!done && i < parser.length) {\r\n          const c = HEX_DIGITS.get(parser.get(i++));\r\n          if (c === 0) {\r\n              value = value << 1;\r\n          }\r\n          else if (c === 1) {\r\n              value = (value << 1) + 1;\r\n          }\r\n          else if (parser.get(i - 1) === 0x005f) ;\r\n          else {\r\n              done = true;\r\n              i -= 1;\r\n          }\r\n      }\r\n      if (parser.get(i) === 0x002e) {\r\n          i += 1;\r\n          let frac = 0.5;\r\n          let fracPart = 0;\r\n          done = false;\r\n          while (!done && i < parser.length) {\r\n              const c = HEX_DIGITS.get(parser.get(i++));\r\n              if (c === 0) {\r\n                  frac = frac / 2;\r\n              }\r\n              else if (c === 1) {\r\n                  fracPart += frac;\r\n                  frac = frac / 2;\r\n              }\r\n              else if (parser.get(i - 1) === 0x005f) ;\r\n              else {\r\n                  done = true;\r\n                  i -= 1;\r\n              }\r\n          }\r\n          value += fracPart;\r\n      }\r\n      parser.skipTo(i);\r\n      return applyExponent(parser, start, value);\r\n  }\r\n  function parseHexadecimalNumber(parser) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      let i = start;\r\n      if (parser.get(i++) !== 0x0030 || parser.get(i++) !== 0x0078) {\r\n          return result.failure();\r\n      }\r\n      let value = 0;\r\n      let done = false;\r\n      while (!done && i < parser.length) {\r\n          const c = parser.get(i++);\r\n          if (HEX_DIGITS.has(c)) {\r\n              value = value * 16 + HEX_DIGITS.get(c);\r\n          }\r\n          else if (c !== 0x005f) {\r\n              done = true;\r\n              i -= 1;\r\n          }\r\n      }\r\n      if (parser.get(i++) === 0x002e) {\r\n          let frac = 0.0625;\r\n          done = false;\r\n          let fracPart = 0;\r\n          while (!done && i < parser.length) {\r\n              const c = parser.get(i++);\r\n              if (HEX_DIGITS.has(c)) {\r\n                  fracPart += frac * HEX_DIGITS.get(c);\r\n                  frac = frac / 16;\r\n              }\r\n              else if (c !== 0x005f) {\r\n                  done = true;\r\n                  i -= 1;\r\n              }\r\n              else {\r\n                  parser.skipTo(i);\r\n                  return result.error(value + fracPart, 'hexadecimal-number-expected');\r\n              }\r\n          }\r\n          value += fracPart;\r\n      }\r\n      parser.skipTo(i);\r\n      return applyExponent(parser, start, value);\r\n  }\r\n  function parseFloatingPointNumber(parser) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      if (!DIGITS.has(parser.get(start)))\r\n          return result.failure();\r\n      let i = start;\r\n      let value = 0;\r\n      let done = false;\r\n      while (!done && i < parser.length) {\r\n          const c = parser.get(i++);\r\n          if (DIGITS.has(c)) {\r\n              value = value * 10 + DIGITS.get(c);\r\n          }\r\n          else if (c !== 0x005f) {\r\n              done = true;\r\n              i -= 1;\r\n          }\r\n      }\r\n      if (parser.get(i) === 0x002e) {\r\n          i += 1;\r\n          let frac = 0.1;\r\n          done = false;\r\n          let fracPart = 0;\r\n          while (!done && i < parser.length) {\r\n              const c = parser.get(i++);\r\n              if (DIGITS.has(c)) {\r\n                  fracPart += frac * DIGITS.get(c);\r\n                  frac = frac / 10;\r\n              }\r\n              else if (c !== 0x005f) {\r\n                  done = true;\r\n                  i -= 1;\r\n              }\r\n              else {\r\n                  parser.skipTo(i);\r\n                  return result.error(value + fracPart, 'decimal-number-expected');\r\n              }\r\n          }\r\n          value += fracPart;\r\n      }\r\n      parser.skipTo(i);\r\n      return applyExponent(parser, start, value);\r\n  }\r\n  function parseNumber(parser) {\r\n      let result = parseBinaryNumber(parser);\r\n      if (result.isFailure)\r\n          result = parseHexadecimalNumber(parser);\r\n      if (result.isFailure)\r\n          result = parseFloatingPointNumber(parser);\r\n      return result;\r\n  }\r\n  function parseSignedNumber(parser) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      let i = start;\r\n      let sign = 1;\r\n      if (parser.get(i) === 0x002d) {\r\n          i++;\r\n          sign = -1;\r\n      }\r\n      else if (parser.get(i) === 0x002b) {\r\n          i++;\r\n      }\r\n      parser.skipTo(i);\r\n      const numResult = parseNumber(parser);\r\n      if (numResult.isSuccess)\r\n          return result.success(sign * numResult.value);\r\n      if (numResult.isError) {\r\n          return result.errorFrom(numResult, sign * numResult.value);\r\n      }\r\n      return result.failure();\r\n  }\n\n  function skipInlineSpaces(parser) {\r\n      let i = parser.offset;\r\n      let c;\r\n      do {\r\n          c = parser.get(i++);\r\n      } while (c === 0x0020 || c === 0x0009);\r\n      parser.skipTo(i - 1);\r\n  }\r\n  function skipUntilLinebreak(parser) {\r\n      let found = false;\r\n      let i = parser.offset;\r\n      while (!found && i < parser.length) {\r\n          const c = parser.get(i++);\r\n          if (c === 0x000d || c === 0x2028 || c === 0x2029) {\r\n              found = true;\r\n          }\r\n          if (c === 0x000a) {\r\n              if (parser.get(i) === 0x000d) {\r\n                  i += 1;\r\n              }\r\n              found = true;\r\n          }\r\n      }\r\n      parser.skipTo(i);\r\n  }\r\n  function skipLinebreak(parser) {\r\n      const c = parser.get(parser.offset);\r\n      if (c === 0x000d || c === 0x2028 || c === 0x2029) {\r\n          parser.skipTo(parser.offset + 1);\r\n          return;\r\n      }\r\n      if (c === 0x000a) {\r\n          if (parser.get(parser.offset + 1) === 0x000d) {\r\n              parser.skipTo(parser.offset + 2);\r\n          }\r\n          else {\r\n              parser.skipTo(parser.offset + 1);\r\n          }\r\n      }\r\n  }\r\n  function parseWhitespace(parser) {\r\n      let done = false;\r\n      const result = new Result(parser);\r\n      let i = parser.offset;\r\n      while (!done && i < parser.length) {\r\n          const offset = parser.offset;\r\n          while (!done) {\r\n              const c = parser.get(i);\r\n              done = !isWhitespace(c);\r\n              if (!done)\r\n                  i += codePointLength(c);\r\n          }\r\n          result.copyDiagnostics(parseLineComment(parser.skipTo(i)));\r\n          result.copyDiagnostics(parseBlockComment(parser));\r\n          if (result.isError)\r\n              return result;\r\n          done = offset === parser.offset;\r\n          i = parser.offset;\r\n      }\r\n      parser.skipTo(i);\r\n      return result.ignore();\r\n  }\r\n  function parseLineComment(parser) {\r\n      const result = new Result(parser);\r\n      if (parser.get(parser.offset) === 0x002f &&\r\n          parser.get(parser.offset + 1) === 0x002f) {\r\n          skipUntilLinebreak(parser);\r\n      }\r\n      return result.ignore();\r\n  }\r\n  function parseBlockComment(parser) {\r\n      const result = new Result(parser);\r\n      let i = parser.offset;\r\n      if (parser.get(i) !== 0x002f || parser.get(i + 1) !== 0x002a) {\r\n          return result.failure();\r\n      }\r\n      i += 2;\r\n      let level = 1;\r\n      while (level > 0 && i < parser.length) {\r\n          const c = parser.get(i);\r\n          if (c === 0x002f && parser.get(i + 1) === 0x002a) {\r\n              level += 1;\r\n              i += 2;\r\n          }\r\n          else if (c === 0x002a && parser.get(i + 1) === 0x002f) {\r\n              level -= 1;\r\n              i += 2;\r\n          }\r\n          else {\r\n              i += codePointLength(c);\r\n          }\r\n      }\r\n      if (level > 0) {\r\n          parser.skipTo(parser.offset + i);\r\n          return result.errorAt(null, 'end-of-comment-expected', result.start);\r\n      }\r\n      return result.ignoreUntil(i);\r\n  }\r\n  function parseShebang(parser) {\r\n      const result = new Result(parser);\r\n      if (parser.offset !== 0 ||\r\n          parser.get(0) !== 0x0023 ||\r\n          parser.get(1) !== 0x0021) {\r\n          return result.failure();\r\n      }\r\n      skipUntilLinebreak(parser);\r\n      return result.success(true);\r\n  }\n\n  function parseEscapeSequence(parser) {\r\n      const result = new Result(parser);\r\n      if (parser.get(parser.offset) !== 0x005c)\r\n          return result.failure();\r\n      const start = parser.offset;\r\n      const replacement = REVERSED_ESCAPED_CHARS.get(parser.get(start + 1));\r\n      if (replacement !== undefined) {\r\n          parser.skipTo(start + 2);\r\n          return result.success(String.fromCodePoint(replacement));\r\n      }\r\n      let i = start + 1;\r\n      const escapeChar = parser.get(i++);\r\n      if (escapeChar !== 0x0075) {\r\n          parser.skipTo(i);\r\n          return result.errorAt(String.fromCodePoint(escapeChar), ['invalid-escape-sequence', '\\\\' + String.fromCodePoint(escapeChar)], start);\r\n      }\r\n      let code = 0;\r\n      let invalidChar = false;\r\n      let done = false;\r\n      let codepointString = '';\r\n      if (parser.get(i) === 0x007b) {\r\n          i += 1;\r\n          while (!done && i < start + 11) {\r\n              const c = parser.get(i++);\r\n              codepointString += String.fromCodePoint(c);\r\n              invalidChar = invalidChar || !HEX_DIGITS.has(c);\r\n              if (!invalidChar)\r\n                  code = 16 * code + HEX_DIGITS.get(c);\r\n              done = parser.get(i) === 0x007d;\r\n          }\r\n          if (done)\r\n              i += 1;\r\n      }\r\n      else {\r\n          while (!invalidChar && i <= parser.offset + 5) {\r\n              const c = parser.get(i++);\r\n              codepointString += String.fromCodePoint(c);\r\n              invalidChar = !HEX_DIGITS.has(c);\r\n              if (!invalidChar)\r\n                  code = 16 * code + HEX_DIGITS.get(c);\r\n          }\r\n          done = i <= parser.length;\r\n      }\r\n      parser.skipTo(i);\r\n      if (invalidChar || !done) {\r\n          return result.errorAt('\\ufffd', ['invalid-unicode-codepoint-string', codepointString], start);\r\n      }\r\n      if (code > 0x10ffff) {\r\n          return result.errorAt('\\ufffd', [\r\n              'invalid-unicode-codepoint-value',\r\n              'U+' + ('00000' + code.toString(16)).slice(-8).toUpperCase(),\r\n          ], start);\r\n      }\r\n      if (code >= 0xd800 && code <= 0xdfff) {\r\n          return result.errorAt('\\ufffd', [\r\n              'invalid-unicode-codepoint-value',\r\n              'U+' + ('0000' + code.toString(16)).slice(-4).toUpperCase(),\r\n          ], start);\r\n      }\r\n      return result.success(String.fromCodePoint(code));\r\n  }\r\n  function parseExtendedString(parser) {\r\n      const start = parser.offset;\r\n      const result = new Result(parser);\r\n      if (parser.get(start) !== 0x0023)\r\n          return result.failure();\r\n      let prefixLength = 0;\r\n      let i = start;\r\n      while (parser.get(i++) === 0x0023)\r\n          prefixLength += 1;\r\n      i -= 1;\r\n      if (parser.get(i++) !== 0x0022)\r\n          return result.failure();\r\n      let value = '';\r\n      let done = false;\r\n      let found = false;\r\n      do {\r\n          const c = parser.get(i++);\r\n          done = i >= parser.length || isLinebreak(c);\r\n          if (c === 0x0022) {\r\n              let j = prefixLength;\r\n              while (j > 0 && parser.get(i + j - 1) === 0x0023)\r\n                  j -= 1;\r\n              found = j === 0;\r\n              if (found)\r\n                  i += prefixLength;\r\n          }\r\n          if (!done && !found)\r\n              value += String.fromCodePoint(c);\r\n      } while (!done && !found);\r\n      parser.skipTo(i);\r\n      if (!found) {\r\n          return result.error(value, [\r\n              'string-literal-closing-delimiter-expected',\r\n              '#'.repeat(prefixLength) + '\"',\r\n          ]);\r\n      }\r\n      return result.success(value);\r\n  }\r\n  function parseInterpolation(parser, expression) {\r\n      const result = new Result(parser);\r\n      if (expression === undefined ||\r\n          parser.get(parser.offset) !== 0x005c ||\r\n          parser.get(parser.offset + 1) !== 0x0028) {\r\n          return result.failure();\r\n      }\r\n      const startExpr = parser.offset + 2;\r\n      const expr = parser.parse(expression, startExpr);\r\n      result.copyDiagnostics(expr);\r\n      if (parser.get(parser.offset) !== 0x0029) {\r\n          return result.error(expr.value, ['closing-bracket-expected', ')']);\r\n      }\r\n      parser.skipTo(parser.offset + 1);\r\n      result.value = expr.value;\r\n      return result;\r\n  }\r\n  function parseSingleLineString(parser, expression) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      if (parser.get(start) !== 0x0022)\r\n          return result.failure();\r\n      if (parser.get(start + 1) === 0x0022 && parser.get(start + 2) !== 0x0022) {\r\n          parser.skipTo(parser.offset + 2);\r\n          return result.success(['']);\r\n      }\r\n      if (parser.get(start + 1) === 0x0022 && parser.get(start + 2) === 0x0022) {\r\n          return result.failure();\r\n      }\r\n      let done = false;\r\n      let found = false;\r\n      parser.skipTo(start + 1);\r\n      const values = [];\r\n      let value = '';\r\n      while (!done && !found && !parser.atEnd()) {\r\n          const c = parser.get(parser.offset);\r\n          found = c === 0x0022;\r\n          done = isLinebreak(c);\r\n          if (c === 0x005c) {\r\n              const interpolation = parseInterpolation(parser, expression);\r\n              if (!interpolation.isFailure) {\r\n                  values.push(value);\r\n                  value = '';\r\n                  result.copyDiagnostics(interpolation);\r\n                  values.push(interpolation.value);\r\n              }\r\n              else {\r\n                  const escape = parseEscapeSequence(parser);\r\n                  result.copyDiagnostics(escape);\r\n                  if (escape.isSuccess) {\r\n                      value += escape.value;\r\n                  }\r\n                  else if (escape.isError) {\r\n                      value += '\\\\' + escape.value;\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              if (!done && !found)\r\n                  value += String.fromCodePoint(c);\r\n              parser.skipTo(parser.offset + 1);\r\n          }\r\n      }\r\n      if (value) {\r\n          values.push(value);\r\n          value = '';\r\n      }\r\n      if (!found) {\r\n          if (values.length === 0 && (parser.atEnd() || parser.atLinebreak())) {\r\n              return result.error([''], ['string-literal-opening-delimiter-expected', '\"']);\r\n          }\r\n          else {\r\n              return result.error(values, [\r\n                  'string-literal-closing-delimiter-expected',\r\n                  '\"',\r\n              ]);\r\n          }\r\n      }\r\n      result.success(values);\r\n      return result;\r\n  }\r\n  function parseMultilineString(parser, expression) {\r\n      const result = new Result(parser);\r\n      const start = parser.offset;\r\n      if (parser.get(start) !== 0x0022 ||\r\n          parser.get(start + 1) !== 0x0022 ||\r\n          parser.get(start + 2) !== 0x0022) {\r\n          return result.failure();\r\n      }\r\n      skipInlineSpaces(parser.skipTo(start + 3));\r\n      if (!parser.atLinebreak()) {\r\n          return result.error([''], 'multiline-string-expected');\r\n      }\r\n      skipLinebreak(parser);\r\n      let done = false;\r\n      let i = parser.offset;\r\n      const lines = [];\r\n      let values = [];\r\n      let value = '';\r\n      while (!done && i < parser.length) {\r\n          const c = parser.get(i);\r\n          if (isLinebreak(c)) {\r\n              if (value)\r\n                  values.push(value);\r\n              value = '';\r\n              lines.push(values);\r\n              values = [];\r\n              skipLinebreak(parser.skipTo(i));\r\n              i = parser.offset;\r\n          }\r\n          else {\r\n              done =\r\n                  c === 0x0022 &&\r\n                      parser.get(i + 1) === 0x0022 &&\r\n                      parser.get(i + 2) === 0x0022;\r\n              if (c === 0x005c) {\r\n                  if (isLinebreak(parser.get(i + 1))) {\r\n                      value += '\\\\\\n';\r\n                      i += 2;\r\n                  }\r\n                  else {\r\n                      parser.skipTo(i);\r\n                      const interpolation = parseInterpolation(parser, expression);\r\n                      if (!interpolation.isFailure) {\r\n                          i = parser.offset;\r\n                          values.push(value);\r\n                          value = '';\r\n                          result.copyDiagnostics(interpolation);\r\n                          values.push(interpolation.value);\r\n                      }\r\n                      else {\r\n                          const escape = parseEscapeSequence(parser);\r\n                          i = parser.offset;\r\n                          if (escape.isSuccess) {\r\n                              value += escape.value;\r\n                          }\r\n                          else if (escape.isError) {\r\n                              value += String.fromCodePoint(c);\r\n                              result.copyDiagnostics(escape);\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n              else {\r\n                  if (!done)\r\n                      value += String.fromCodePoint(c);\r\n                  i += 1;\r\n              }\r\n          }\r\n      }\r\n      parser.skipTo(i + 2);\r\n      const prefix = value;\r\n      let validPrefix = true;\r\n      if (prefix.length > 0) {\r\n          for (const c of prefix) {\r\n              if (!isInlineSpace(c.codePointAt(0)))\r\n                  validPrefix = false;\r\n          }\r\n          if (validPrefix) {\r\n              for (const line of lines) {\r\n                  if (typeof line[0] === 'string' && line[0].startsWith(prefix)) {\r\n                      line[0] = line[0].slice(prefix.length);\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      let resultValue = [];\r\n      for (let i = 0; i <= lines.length - 1; i++) {\r\n          const line = lines[i];\r\n          const lastItem = line[line.length - 1];\r\n          if (typeof lastItem === 'string' &&\r\n              lastItem[lastItem.length - 1] === '\\\\') {\r\n              line[line.length - 1] = lastItem.slice(-1);\r\n              resultValue = [...resultValue, ...line];\r\n          }\r\n          else if (i === lines.length - 1) {\r\n              resultValue = [...resultValue, ...line];\r\n          }\r\n          else {\r\n              resultValue = [...resultValue, ...line, '\\n'];\r\n          }\r\n      }\r\n      if (!validPrefix) {\r\n          return result.error(resultValue, 'multiline-whitespace-expected');\r\n      }\r\n      result.value = resultValue;\r\n      return result;\r\n  }\n\n  function parseIdentifier(parser) {\r\n      const result = parseVerbatimIdentifier(parser);\r\n      if (!result.isFailure)\r\n          return result;\r\n      const start = parser.offset;\r\n      let code = parser.get(start);\r\n      if (isIdentifierStartProhibited(code) || isBreak(code)) {\r\n          return result.failure();\r\n      }\r\n      let done = false;\r\n      let i = start;\r\n      let id = '';\r\n      while (!done && i < parser.length) {\r\n          code = parser.get(i);\r\n          done = isBreak(code) || isIdentifierContinueProhibited(code);\r\n          if (!done) {\r\n              const s = String.fromCodePoint(code);\r\n              id += s;\r\n              i += s.length;\r\n          }\r\n      }\r\n      if (id.length === 0)\r\n          return result.failure();\r\n      parser.skipTo(i);\r\n      return result.success(id);\r\n  }\r\n  function parseVerbatimIdentifier(parser) {\r\n      const result = new Result(parser);\r\n      if (parser.get(parser.offset) !== 0x0060)\r\n          return result.failure();\r\n      let done = false;\r\n      let invalidChar = false;\r\n      let i = parser.offset + 1;\r\n      let id = '';\r\n      let atLinebreak = false;\r\n      while (!done && !atLinebreak && i < parser.length) {\r\n          const code = parser.get(i);\r\n          atLinebreak = isLinebreak(code);\r\n          done = code === 0x0060;\r\n          if (!done) {\r\n              if (code === 0x005c) {\r\n                  parser.skipTo(i);\r\n                  const escSequence = parseEscapeSequence(parser);\r\n                  if (escSequence.isSuccess)\r\n                      id += escSequence.value;\r\n                  i = parser.offset;\r\n              }\r\n              else {\r\n                  invalidChar = invalidChar || isIdentifierContinueProhibited(code);\r\n                  const s = String.fromCodePoint(code);\r\n                  id += s;\r\n                  i += s.length;\r\n              }\r\n          }\r\n      }\r\n      if (!done) {\r\n          parser.skipTo(i);\r\n          return result.errorAt('Missing', ['unbalanced-verbatim-symbol', id], result.start);\r\n      }\r\n      parser.skipTo(i + 1);\r\n      if (id.length === 0) {\r\n          return result.errorAt('Missing', 'empty-verbatim-symbol', result.start);\r\n      }\r\n      if (invalidChar || isIdentifierStartProhibited(id.charCodeAt(0))) {\r\n          return result.errorAt('Missing', ['invalid-symbol-name', id], result.start);\r\n      }\r\n      return result.success(id);\r\n  }\n\n  class Grammar {\r\n      constructor() {\r\n          this.rules = {};\r\n          this.ruleDescription = {};\r\n          this.rule('quoted-text-item', 'U+0000-U+0009 U+000B-U+000C U+000E-U+0021 U+0023-U+2027 U+202A-U+D7FF | U+E000-U+10FFFF');\r\n          this.rule('linebreak', '(U+000A \\\\[U+000D\\\\]) | U+000D | U+2028 | U+2029');\r\n          this.rule('unicode-char', '_quoted-text-item_ | _linebreak_ | U+0022');\r\n          this.rule('pattern-syntax', 'U+0021-U+002F | U+003A-U+0040 | U+005b-U+005E | U+0060 | U+007b-U+007e | U+00A1-U+00A7 | U+00A9 | U+00AB-U+00AC | U+00AE | U+00B0-U+00B1 | U+00B6 | U+00BB | U+00BF | U+00D7 | U+00F7 | U+2010-U+203E | U+2041-U+2053 | U+2190-U+2775 | U+2794-U+27EF | U+3001-U+3003 | U+3008-U+3020 | U+3030 | U+FD3E | U+FD3F | U+FE45 | U+FE46');\r\n          this.rule('inline-space', 'U+0009 | U+0020');\r\n          this.rule('pattern-whitespace', '_inline-space_ | U+000A | U+000B | U+000C | U+000D | U+0085 | U+200E | U+200F | U+2028 | U+2029');\r\n          this.rule('whitespace', '_pattern-whitespace_ | U+0000 | U+00A0 | U+1680 | U+180E | U+2000-U+200A | U+202f | U+205f | U+3000');\r\n          this.rule('line-comment', '**`//`** (_unicode-char_)* _linebreak_)');\r\n          this.rule('block-comment', '**`/*`** (((_unicode-char_)\\\\* _linebreak_)) | _block-comment_) **`*/`**');\r\n          this.rule('digit', 'U+0030-U+0039 | U+FF10-U+FF19');\r\n          this.rule('hex-digit', '_digit_ | U+0041-U+0046 | U+0061-U+0066 | U+FF21-FF26 | U+FF41-U+FF46');\r\n          this.rule('binary-digit', 'U+0030 | U+0031 | U+FF10 | U+FF11');\r\n          this.rule('numerical-constant', '**`NaN`** | **`Infinity`** | **`+Infinity`** | **`-Infinity`**');\r\n          this.rule('base-10-exponent', '(**`e`** | **`E`**) \\\\[_sign_\\\\](_digit_)+');\r\n          this.rule('base-2-exponent', '(**`p`** | **`P`**) \\\\[_sign_\\\\](_digit_)+');\r\n          this.rule('binary-number', '**`0b`** (_binary-digit_)+ \\\\[**`.`** (_binary-digit_)+ \\\\]\\\\[_exponent_\\\\]');\r\n          this.rule('hexadecimal-number', '**`0x`** (_hex-digit_)+ \\\\[**`.`** (_hex-digit_)+ \\\\]\\\\[_exponent_\\\\]');\r\n          this.rule('decimal-number', '(_digit_)+ \\\\[**`.`** (_digit_)+ \\\\]\\\\[_exponent_\\\\]');\r\n          this.rule('sign', '**`+`** | **`-`**');\r\n          this.rule('symbol', '_verbatim-symbol_ | _inline-symbol_');\r\n          this.rule('verbatim-symbol', '**``` ` ```** (_escape-sequence_ | _symbol_start_) (_escape-sequence_ | _symbol_continue_)* **``` ` ```**');\r\n          this.rule('inline-symbol', '_symbol-start_ (_symbol_continue_)*');\r\n          this.rule('escape-expression', '**`\\\\(`** _expression_ **`)`**');\r\n          this.rule('single-line-string', '**`\"`** (_escape-sequence_ | _escape-expression_ | _quoted-text-item_)* **`\"`**');\r\n          this.rule('multiline-string', '**`\"\"\"`** _multiline-string-line_ **`\"\"\"`**');\r\n          this.rule('extended-string', '...');\r\n          this.rule('shebang', '**`#!`** (unicode-char)* (_linebreak | _eof_)');\r\n          this.rule('shebang', parseShebang);\r\n      }\r\n      rule(name, def) {\r\n          if (typeof def === 'string') {\r\n              this.ruleDescription[name] = def;\r\n          }\r\n          else if (typeof def === 'function') {\r\n              if (!this.ruleDescription[name])\r\n                  this.ruleDescription[name] = `_${name}_`;\r\n              this.rules[name] = def;\r\n          }\r\n          else {\r\n              this.ruleDescription[name] = def[0];\r\n              this.rules[name] = def[1];\r\n          }\r\n      }\r\n      toString() {\r\n          return Object.keys(this.ruleDescription)\r\n              .map((x) => `_${x}_ → ${this.ruleDescription[x]}`)\r\n              .join('\\n\\n');\r\n      }\r\n      parse(rule, parser, url) {\r\n          if (typeof parser === 'string') {\r\n              parser = new Parser(this, parser, url);\r\n          }\r\n          if (!this.has(rule))\r\n              throw new Error('Unexpected rule ' + rule);\r\n          return this.rules[rule](parser);\r\n      }\r\n      has(rule) {\r\n          return typeof this.rules[rule] === 'function';\r\n      }\r\n      get(rule) {\r\n          return this.rules[rule];\r\n      }\r\n  }\n\n  const grammar = new Grammar();\r\n  function expressionToString(expr) {\r\n      const strValue = getStringValue(expr);\r\n      if (strValue !== null)\r\n          return strValue;\r\n      const numValue = getNumberValue(expr);\r\n      if (numValue !== null)\r\n          return Number(numValue).toString();\r\n      return expr.toString();\r\n  }\r\n  const JSON_ESCAPE_CHARS = {\r\n      0x00: '\\\\u0000',\r\n      0x01: '\\\\u0001',\r\n      0x02: '\\\\u0002',\r\n      0x03: '\\\\u0003',\r\n      0x04: '\\\\u0004',\r\n      0x05: '\\\\u0005',\r\n      0x06: '\\\\u0006',\r\n      0x07: '\\\\u0007',\r\n      0x08: '\\\\b',\r\n      0x09: '\\\\t',\r\n      0x0a: '\\\\n',\r\n      0x0b: '\\\\u000b',\r\n      0x0c: '\\\\f',\r\n      0x0d: '\\\\r',\r\n      0x0e: '\\\\u000e',\r\n      0x0f: '\\\\u000f',\r\n      0x10: '\\\\u0010',\r\n      0x11: '\\\\u0011',\r\n      0x12: '\\\\u0012',\r\n      0x13: '\\\\u0013',\r\n      0x14: '\\\\u0014',\r\n      0x15: '\\\\u0015',\r\n      0x16: '\\\\u0016',\r\n      0x17: '\\\\u0017',\r\n      0x18: '\\\\u0018',\r\n      0x19: '\\\\u0019',\r\n      0x1a: '\\\\u001a',\r\n      0x1b: '\\\\u001b',\r\n      0x1c: '\\\\u001c',\r\n      0x1d: '\\\\u001d',\r\n      0x1e: '\\\\u001e',\r\n      0x1f: '\\\\u001f',\r\n      0x22: '\\\\\"',\r\n      0x2f: '\\\\/',\r\n      0x5c: '\\\\\\\\',\r\n  };\r\n  function escapeJsonString(s) {\r\n      var _a;\r\n      let result = '';\r\n      for (const c of s)\r\n          result += (_a = JSON_ESCAPE_CHARS[c.codePointAt(0)]) !== null && _a !== void 0 ? _a : c;\r\n      return result;\r\n  }\r\n  function exprOrigin(expr, offsets) {\r\n      if (!Array.isArray(offsets))\r\n          offsets = offsets.range;\r\n      if (Array.isArray(expr))\r\n          return { fn: expr, sourceOffsets: offsets };\r\n      if (typeof expr === 'object')\r\n          return Object.assign(Object.assign({}, expr), { sourceOffsets: offsets });\r\n      if (typeof expr === 'number') {\r\n          return { num: expr.toString(), sourceOffsets: offsets };\r\n      }\r\n      if (typeof expr === 'string' &&\r\n          expr[0] === \"'\" &&\r\n          expr[expr.length - 1] === \"'\") {\r\n          return { str: expr.slice(1, -1), sourceOffsets: offsets };\r\n      }\r\n      return { sym: expr, sourceOffsets: offsets };\r\n  }\r\n  grammar.rule('whitespace', (parser) => parseWhitespace(parser));\r\n  grammar.rule('pragma', either(['pragma-symbol', 'pragma-function']));\r\n  grammar.rule('pragma-symbol', either([\r\n      literal('#line'),\r\n      literal('#column'),\r\n      literal('#filename'),\r\n      literal('#url'),\r\n      literal('#date'),\r\n      literal('#time'),\r\n  ], (fn) => {\r\n      var _a;\r\n      if (fn.value === '#date') {\r\n          const today = new Date();\r\n          return (today.getFullYear() +\r\n              '-' +\r\n              ('00' + (1 + today.getMonth())).slice(-2) +\r\n              '-' +\r\n              ('00' + (1 + today.getDay())).slice(-2));\r\n      }\r\n      if (fn.value === '#time') {\r\n          const today = new Date();\r\n          return (('00' + today.getHours().toString()).slice(-2) +\r\n              ':' +\r\n              ('00' + today.getMinutes().toString()).slice(-2) +\r\n              ':' +\r\n              ('00' + today.getSeconds().toString()).slice(-2));\r\n      }\r\n      if (fn.value === '#url') {\r\n          return (_a = fn.parser.url) !== null && _a !== void 0 ? _a : 'Nothing';\r\n      }\r\n      if (fn.value === '#filename') {\r\n          if (!fn.parser.url)\r\n              return 'Nothing';\r\n          return fn.parser.url.substring(fn.parser.url.lastIndexOf('/') + 1);\r\n      }\r\n      if (fn.value === '#line') {\r\n          const origin = new Origin(fn.parser.source, fn.parser.url);\r\n          return origin.getLinecol(fn.parser.offset)[0];\r\n      }\r\n      if (fn.value === '#column') {\r\n          const origin = new Origin(fn.parser.source, fn.parser.url);\r\n          return origin.getLinecol(fn.parser.offset)[1];\r\n      }\r\n      return 'Nothing';\r\n  }));\r\n  grammar.rule('pragma-function', sequence([\r\n      either([\r\n          literal('#warning'),\r\n          literal('#error'),\r\n          literal('#env'),\r\n          literal('#navigator'),\r\n      ]),\r\n      'function-call-argument-clause',\r\n  ], (fn, args) => {\r\n      if (fn.value === '#warning') {\r\n          const message = mapArgs(args.value, (x) => expressionToString(x)).join(' ');\r\n          console.log(message);\r\n          return { str: message };\r\n      }\r\n      else if (fn.value === '#error') {\r\n          const message = mapArgs(args.value, (x) => expressionToString(x)).join(' ');\r\n          console.error(message);\r\n          throw new FatalParsingError(message);\r\n      }\r\n      else if (fn.value === '#env') {\r\n          if ('process' in globalThis && process.env) {\r\n              return {\r\n                  str: process.env[expressionToString(getArg(args.value, 1))],\r\n              };\r\n          }\r\n      }\r\n      else if (fn.value === '#navigator') {\r\n          if ('navigator' in globalThis) {\r\n              return { str: navigator[expressionToString(getArg(args.value, 1))] };\r\n          }\r\n      }\r\n      return 'Nothing';\r\n  }));\r\n  grammar.rule('function-call-argument-clause', manySeparatedBetween('(', 'expression', ',', ')', (values) => {\r\n      return ['List', ...values.map((x) => x.value)];\r\n  }));\r\n  grammar.rule('signed-number', '_numerical-constant_ | (\\\\[_sign_\\\\] (_binary-number_ | _hexadecimal-number_ | _decimal-number_)');\r\n  grammar.rule('signed-number', (parser) => {\r\n      const result = new Result(parser);\r\n      let litResult = parseString(parser, 'NaN');\r\n      if (litResult.isFailure)\r\n          litResult = parseString(parser, 'Infinity');\r\n      if (litResult.isFailure)\r\n          litResult = parseString(parser, '+Infinity');\r\n      if (litResult.isFailure)\r\n          litResult = parseString(parser, '-Infinity');\r\n      if (litResult.isSuccess) {\r\n          return result.success(exprOrigin({ num: litResult.value }, litResult));\r\n      }\r\n      const numResult = parseSignedNumber(parser);\r\n      if (numResult.isSuccess) {\r\n          return result.success(exprOrigin(numResult.value, numResult));\r\n      }\r\n      return numResult;\r\n  });\r\n  grammar.rule('symbol', '_verbatim-symbol_ | _inline-symbol_');\r\n  grammar.rule('symbol', (parser) => {\r\n      const result = new Result(parser);\r\n      const res = parseIdentifier(parser);\r\n      result.copyDiagnostics(res);\r\n      result.end = res.end;\r\n      if (res.isSuccess || res.isError) {\r\n          result.success(exprOrigin(res.value, res));\r\n      }\r\n      return result;\r\n  });\r\n  grammar.rule('string', '_single-line-string_ | _multiline-string_ | _extended-string_');\r\n  grammar.rule('string', (parser) => {\r\n      let result = parseSingleLineString(parser, 'expression');\r\n      if (result.isFailure)\r\n          result = parseMultilineString(parser, 'expression');\r\n      if (result.isFailure) {\r\n          result = parseExtendedString(parser);\r\n          if (result.isSuccess) {\r\n              return result.success(exprOrigin({ str: result.value }, result));\r\n          }\r\n      }\r\n      if (result.isFailure || result.isEmpty)\r\n          return result;\r\n      const values = [];\r\n      let previousString;\r\n      for (const value of result.value) {\r\n          if (typeof value === 'string') {\r\n              previousString = (previousString !== null && previousString !== void 0 ? previousString : '') + value;\r\n          }\r\n          else if (isStringObject(value)) {\r\n              previousString = (previousString !== null && previousString !== void 0 ? previousString : '') + value.str;\r\n          }\r\n          else {\r\n              if (typeof previousString === 'string') {\r\n                  values.push(previousString);\r\n                  previousString = undefined;\r\n              }\r\n              values.push(value);\r\n          }\r\n      }\r\n      if (typeof previousString === 'string')\r\n          values.push(previousString);\r\n      let value;\r\n      if (values.length === 1 && typeof values[0] === 'string') {\r\n          value = exprOrigin({ str: escapeJsonString(values[0]) }, result);\r\n      }\r\n      else {\r\n          value = exprOrigin([\r\n              'String',\r\n              ...values.map((x) => {\r\n                  return typeof x === 'string' ? { str: x } : x;\r\n              }),\r\n          ], result);\r\n      }\r\n      result.value = value;\r\n      return result;\r\n  });\r\n  grammar.rule('primary', either([\r\n      'pragma',\r\n      'signed-number',\r\n      'symbol',\r\n      'string',\r\n      'parenthesized-expression',\r\n  ]));\r\n  grammar.rule('expression', operatorSequence([\r\n      ['NotMemberOf', '!in', 160],\r\n      ['MemberOf', 'in', 240],\r\n      ['LessEqual', '<=', 241],\r\n      ['GreaterEqual', '>=', 242],\r\n      ['Less', '<', 245],\r\n      ['Greater', '>', 245],\r\n      ['NotEqual', '!=', 255],\r\n      ['Assign', '=', 258],\r\n      ['Equal', '==', 260],\r\n      ['Same', '===', 260],\r\n      ['KeyValue', '->', 265],\r\n      ['Add', '+', 275],\r\n      ['Subtract', '-', 275],\r\n      ['Multiply', '*', 390],\r\n      ['Divide', '/', 660],\r\n      ['Negate', '-', 665, 'prefix'],\r\n      ['Power', '^', 720, 'left'],\r\n      ['Pipe', '|>', 790],\r\n      ['BackPipe', '~>', 790],\r\n      ['Or', '||', 800],\r\n      ['And', '&&', 810],\r\n      ['Not', '!', 820, 'prefix'],\r\n  ], 'primary'));\r\n  grammar.rule('parenthesized-expression', between('(', 'expression', ')'));\r\n  grammar.rule('cortex', must(sequence([\r\n      maybe('shebang'),\r\n      some('expression', (...expressions) => {\r\n          var _a;\r\n          console.assert(expressions && expressions.length > 0);\r\n          const exprs = expressions.filter((x) => !x.isEmpty && !x.isFailure);\r\n          if (exprs.length === 0) {\r\n              return exprOrigin('Nothing', expressions[0]);\r\n          }\r\n          if (exprs.length === 1) {\r\n              return exprOrigin((_a = exprs[0].value) !== null && _a !== void 0 ? _a : 'Nothing', exprs[0]);\r\n          }\r\n          return exprOrigin(['Do', ...exprs.map((x) => x.value)], [exprs[0].start, exprs[exprs.length - 1].end]);\r\n      }),\r\n      must(eof()),\r\n  ], (_shebang, expr, _eof) => { var _a; return exprOrigin((_a = expr.value) !== null && _a !== void 0 ? _a : 'Nothing', expr); })));\r\n  function analyzeErrors(errors) {\r\n      const result = [...errors];\r\n      return result;\r\n  }\r\n  function parseCortex(source, url) {\r\n      const result = grammar.parse('cortex', source, url);\r\n      if (result.isSuccess)\r\n          return [result.value, []];\r\n      const origin = new Origin(source);\r\n      if (result.isError) {\r\n          return [\r\n              result.value,\r\n              analyzeErrors(result.diagnostics).map((x) => {\r\n                  var _a;\r\n                  return Object.assign(Object.assign({}, x), { origin: origin.signalOrigin((_a = x.range[2]) !== null && _a !== void 0 ? _a : x.range[1]) });\r\n              }),\r\n          ];\r\n      }\r\n      if (result.isEmpty)\r\n          return ['Nothing', []];\r\n      if (result.isFailure) {\r\n          return ['Nothing', []];\r\n      }\r\n  }\n\n  function stringToCodepoints(string) {\r\n      const result = [];\r\n      for (let i = 0; i < string.length; i++) {\r\n          let code = string.charCodeAt(i);\r\n          if (code >= 0xd800 && code <= 0xdbff) {\r\n              const nextCode = string.charCodeAt(i + 1);\r\n              if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {\r\n                  const lead = code - 0xd800;\r\n                  const trail = nextCode - 0xdc00;\r\n                  code = 2 ** 16 + lead * 2 ** 10 + trail;\r\n                  i++;\r\n              }\r\n          }\r\n          result.push(code);\r\n      }\r\n      return result;\r\n  }\r\n  const ZWJ = 0x200d;\r\n  const REGIONAL_INDICATOR = [0x1f1e6, 0x1f1ff];\r\n  function isEmojiCombinator(code) {\r\n      if (code === ZWJ)\r\n          return true;\r\n      if (code === 0xfe0e || code === 0xfe0f)\r\n          return true;\r\n      if (code >= 0x1f3fb && code <= 0x1f3fb + 5)\r\n          return true;\r\n      if (code >= 0x1f9b0 && code <= 0x1f9b0 + 4)\r\n          return true;\r\n      if (code >= 0xe0020 && code <= 0xe0020 + 96)\r\n          return true;\r\n      return false;\r\n  }\r\n  function isRegionalIndicator(code) {\r\n      return code >= REGIONAL_INDICATOR[0] && code <= REGIONAL_INDICATOR[1];\r\n  }\r\n  function splitGraphemes(string) {\r\n      if (/^[\\u0020-\\u00FF]*$/.test(string))\r\n          return string;\r\n      const result = [];\r\n      const codePoints = stringToCodepoints(string);\r\n      let index = 0;\r\n      while (index < codePoints.length) {\r\n          const code = codePoints[index++];\r\n          const next = codePoints[index];\r\n          if (next === ZWJ) {\r\n              const baseIndex = index - 1;\r\n              index += 2;\r\n              while (codePoints[index] === ZWJ) {\r\n                  index += 2;\r\n              }\r\n              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex + 1)));\r\n          }\r\n          else if (isEmojiCombinator(next)) {\r\n              const baseIndex = index - 1;\r\n              while (isEmojiCombinator(codePoints[index])) {\r\n                  index += codePoints[index] === ZWJ ? 2 : 1;\r\n              }\r\n              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex)));\r\n          }\r\n          else if (isRegionalIndicator(code)) {\r\n              index += 1;\r\n              result.push(String.fromCodePoint(...codePoints.slice(index - 2, 2)));\r\n          }\r\n          else {\r\n              result.push(String.fromCodePoint(code));\r\n          }\r\n      }\r\n      return result;\r\n  }\n\n  class FormattingBlock {\r\n      constructor(fmt) {\r\n          this.fmt = fmt;\r\n      }\r\n  }\r\n  class EmptyBlock extends FormattingBlock {\r\n      constructor(fmt) {\r\n          super(fmt);\r\n      }\r\n      debug() {\r\n          return 'EmptyBlock';\r\n      }\r\n      serialize(_offset) {\r\n          return '';\r\n      }\r\n      nextCol(offset) {\r\n          return offset;\r\n      }\r\n      cost(_offset) {\r\n          return 0;\r\n      }\r\n  }\r\n  class TextBlock extends FormattingBlock {\r\n      constructor(fmt, s) {\r\n          super(fmt);\r\n          this.s = s;\r\n      }\r\n      debug() {\r\n          if (this.s === ' ')\r\n              return '\" \"';\r\n          return '\"' + this.s + '\"';\r\n      }\r\n      serialize(_offset) {\r\n          return this.s;\r\n      }\r\n      nextCol(offset) {\r\n          return offset + this.s.length;\r\n      }\r\n      cost(offset) {\r\n          const next = this.nextCol(offset);\r\n          if (next >= this.fmt.margin) {\r\n              return ((next - this.fmt.margin) * this.fmt.cost.margin +\r\n                  (this.fmt.margin - this.fmt.softMargin) * this.fmt.cost.softMargin);\r\n          }\r\n          if (next >= this.fmt.softMargin) {\r\n              return (next - this.fmt.softMargin) * this.fmt.cost.softMargin;\r\n          }\r\n          return 0;\r\n      }\r\n  }\r\n  class LineBlock extends FormattingBlock {\r\n      constructor(fmt, ...blocks) {\r\n          super(fmt);\r\n          this.blocks = blocks;\r\n      }\r\n      debug() {\r\n          return 'Line(' + this.blocks.map((x) => x.debug()).join(', ') + ')';\r\n      }\r\n      serialize(offset) {\r\n          const fragments = [];\r\n          for (const block of this.blocks) {\r\n              fragments.push(block.serialize(offset));\r\n              offset = block.nextCol(offset);\r\n          }\r\n          return fragments.join('');\r\n      }\r\n      nextCol(offset) {\r\n          return this.blocks.reduce((acc, val) => val.nextCol(acc), offset);\r\n      }\r\n      cost(offset) {\r\n          let result = 0;\r\n          for (const block of this.blocks) {\r\n              result += block.cost(offset);\r\n              offset = block.nextCol(offset);\r\n          }\r\n          return result;\r\n      }\r\n  }\r\n  class StackBlock extends FormattingBlock {\r\n      constructor(fmt, ...blocks) {\r\n          super(fmt);\r\n          this.blocks = blocks;\r\n      }\r\n      debug() {\r\n          return 'Stack(' + this.blocks.map((x) => x.debug()).join(', ') + ')';\r\n      }\r\n      serialize(offset) {\r\n          let result = '';\r\n          let indent = '';\r\n          for (const block of this.blocks) {\r\n              result += indent + block.serialize(offset);\r\n              if (!indent)\r\n                  indent = this.fmt.linebreak() + this.fmt.indentChars(offset);\r\n          }\r\n          return result;\r\n      }\r\n      nextCol(offset) {\r\n          return offset;\r\n      }\r\n      cost(offset) {\r\n          return this.blocks.reduce((acc, val) => this.fmt.cost.linebreak + acc + val.cost(offset), 0);\r\n      }\r\n  }\r\n  class WrapBlock extends FormattingBlock {\r\n      constructor(fmt, ...blocks) {\r\n          super(fmt);\r\n          this.blocks = blocks;\r\n      }\r\n      debug() {\r\n          return 'Wrap(' + this.blocks.map((x) => x.debug()).join(', ') + ')';\r\n      }\r\n      solution(offset) {\r\n          const lines = [];\r\n          let line = [];\r\n          for (const block of this.blocks) {\r\n              if (line.length === 0) {\r\n                  line.push(block);\r\n              }\r\n              else {\r\n                  const lineBlock = new LineBlock(this.fmt, ...line, block);\r\n                  if (lineBlock.nextCol(offset) <= this.fmt.margin) {\r\n                      line.push(block);\r\n                  }\r\n                  else {\r\n                      lines.push(line);\r\n                      line = [block];\r\n                  }\r\n              }\r\n          }\r\n          if (line.length !== 0)\r\n              lines.push(line);\r\n          return new StackBlock(this.fmt, ...lines.map((x) => new LineBlock(this.fmt, ...x)));\r\n      }\r\n      serialize(offset) {\r\n          return this.solution(offset).serialize(offset);\r\n      }\r\n      nextCol(offset) {\r\n          return this.solution(offset).nextCol(offset);\r\n      }\r\n      cost(offset) {\r\n          return this.solution(offset).cost(offset);\r\n      }\r\n  }\r\n  class ChoiceBlock extends FormattingBlock {\r\n      constructor(fmt, ...blocks) {\r\n          super(fmt);\r\n          this.blocks = blocks;\r\n      }\r\n      debug() {\r\n          return ('Choice(\\n  ' + this.blocks.map((x) => x.debug()).join('\\n  ') + '\\n)');\r\n      }\r\n      choice(offset) {\r\n          let block;\r\n          let minCost = Infinity;\r\n          this.blocks.forEach((x) => {\r\n              const cost = x.cost(offset);\r\n              if (cost < minCost) {\r\n                  minCost = cost;\r\n                  block = x;\r\n              }\r\n          });\r\n          return block;\r\n      }\r\n      serialize(offset) {\r\n          return this.choice(offset).serialize(offset);\r\n      }\r\n      nextCol(offset) {\r\n          return this.choice(offset).nextCol(offset);\r\n      }\r\n      cost(offset) {\r\n          return Math.min(...this.blocks.map((x) => x.cost(offset)));\r\n      }\r\n  }\r\n  class Formatter {\r\n      constructor(options) {\r\n          var _a;\r\n          if ((options === null || options === void 0 ? void 0 : options.indentChar) === 'space') {\r\n              options.indentChar = '\\u0020';\r\n          }\r\n          else if ((options === null || options === void 0 ? void 0 : options.indentChar) === 'tab') {\r\n              options.indentChar = '\\t';\r\n          }\r\n          this.options = Object.assign({ cost: Object.assign({ softMargin: 0.05, margin: 100, linebreak: 2, commentLinebreak: 0.5, flowLinebreak: 0.3, callLinebreak: 0.5, argLinebreak: 5 }, ((_a = options === null || options === void 0 ? void 0 : options.cost) !== null && _a !== void 0 ? _a : {})), indentChar: '\\u0020', indentCharWidth: 1, indentWidth: 2, margin: 80, softMargin: 50, aroundInfixOperator: '\\u0020', aroundRelationalOperator: '\\u0020', afterSeparator: '\\u0020' }, (options !== null && options !== void 0 ? options : {}));\r\n      }\r\n      get cost() {\r\n          return this.options.cost;\r\n      }\r\n      get margin() {\r\n          return this.options.margin;\r\n      }\r\n      get softMargin() {\r\n          return this.options.softMargin;\r\n      }\r\n      indentChars(n = 1) {\r\n          return (this.options.indentChar === 'tab' ? '\\t' : ' ').repeat(n * this.options.indentWidth);\r\n      }\r\n      indentLength(n = 1) {\r\n          return n * this.options.indentWidth * this.options.indentCharWidth;\r\n      }\r\n      linebreak(a, b) {\r\n          if (!a && !b)\r\n              return '\\n';\r\n          if (!b)\r\n              return a + '\\n';\r\n          return a + '\\n' + b;\r\n      }\r\n      countLinebreaks(s) {\r\n          return s.split(/\\r\\n|\\r|\\n/).length;\r\n      }\r\n      normalizedBlocks(blocks) {\r\n          return blocks\r\n              .map((x) => (typeof x === 'string' ? new TextBlock(this, x) : x))\r\n              .filter((x) => !(x instanceof EmptyBlock));\r\n      }\r\n      infixOperator(op) {\r\n          return new TextBlock(this, this.options.aroundInfixOperator + op + this.options.aroundInfixOperator);\r\n      }\r\n      relationalOperator(op) {\r\n          return new TextBlock(this, this.options.aroundRelationalOperator +\r\n              op +\r\n              this.options.aroundRelationalOperator);\r\n      }\r\n      separator(op) {\r\n          return new TextBlock(this, op + this.options.afterSeparator);\r\n      }\r\n      fence(f) {\r\n          return new TextBlock(this, f);\r\n      }\r\n      text(s) {\r\n          if (!s || s.length === 0)\r\n              return new EmptyBlock(this);\r\n          return new TextBlock(this, s);\r\n      }\r\n      line(...inBlocks) {\r\n          const blocks = this.normalizedBlocks(inBlocks);\r\n          const mergedBlocks = [];\r\n          let previousText = '';\r\n          for (const block of blocks) {\r\n              if (block instanceof TextBlock) {\r\n                  if (previousText) {\r\n                      mergedBlocks.pop();\r\n                      previousText = previousText + block.s;\r\n                      mergedBlocks.push(new TextBlock(this, previousText));\r\n                  }\r\n                  else {\r\n                      mergedBlocks.push(block);\r\n                      previousText = block.s;\r\n                  }\r\n              }\r\n              else {\r\n                  previousText = '';\r\n                  mergedBlocks.push(block);\r\n              }\r\n          }\r\n          if (mergedBlocks.length === 1)\r\n              return mergedBlocks[0];\r\n          return new LineBlock(this, ...mergedBlocks);\r\n      }\r\n      stack(...inBlocks) {\r\n          const blocks = this.normalizedBlocks(inBlocks);\r\n          if (blocks.length === 1)\r\n              return blocks[0];\r\n          return new StackBlock(this, ...blocks);\r\n      }\r\n      wrap(...inBlocks) {\r\n          const blocks = this.normalizedBlocks(inBlocks);\r\n          if (blocks.length === 1)\r\n              return blocks[0];\r\n          return new WrapBlock(this, ...blocks);\r\n      }\r\n      indent(block, indent = 1) {\r\n          return new LineBlock(this, new TextBlock(this, this.indentChars(indent)), block);\r\n      }\r\n      choice(...inBlocks) {\r\n          const blocks = this.normalizedBlocks(inBlocks);\r\n          if (blocks.length === 1)\r\n              return blocks[0];\r\n          return new ChoiceBlock(this, ...blocks);\r\n      }\r\n      fencedBlock(open, block, close) {\r\n          if (!block)\r\n              return this.line(this.fence(open), this.fence(close));\r\n          return this.fencedList(open, '', close, [block]);\r\n      }\r\n      fencedList(open, sep, close, blocks) {\r\n          const openBlock = this.fence(open);\r\n          const closeBlock = this.fence(close);\r\n          if (blocks.length === 0)\r\n              return this.line(openBlock, closeBlock);\r\n          if (blocks.length === 1) {\r\n              return this.line(openBlock, blocks[0], closeBlock);\r\n          }\r\n          const sepBlocks = blocks.map((block) => this.line(block, sep));\r\n          const inlineSepBlocks = [...sepBlocks];\r\n          inlineSepBlocks.pop();\r\n          inlineSepBlocks.push(blocks[blocks.length - 1]);\r\n          if (!open && !close) {\r\n              return this.choice(this.line(...inlineSepBlocks), this.wrap(...sepBlocks));\r\n          }\r\n          return this.choice(this.line(openBlock, ...inlineSepBlocks, closeBlock), this.stack(openBlock, this.indent(this.stack(...sepBlocks)), closeBlock));\r\n      }\r\n      list(sep, blocks) {\r\n          return this.fencedList(undefined, sep, undefined, blocks);\r\n      }\r\n  }\n\n  const RESERVED_WORDS = new Set([\r\n      'abstract',\r\n      'at',\r\n      'and',\r\n      'as',\r\n      'assert',\r\n      'await',\r\n      'begin',\r\n      'break',\r\n      'case',\r\n      'catch',\r\n      'class',\r\n      'const',\r\n      'continue',\r\n      'debugger',\r\n      'default',\r\n      'delete',\r\n      'dynamic',\r\n      'do',\r\n      'each',\r\n      'else',\r\n      'end',\r\n      'export',\r\n      'extern',\r\n      'finally',\r\n      'for',\r\n      'from',\r\n      'function',\r\n      'get',\r\n      'global',\r\n      'goto',\r\n      'if',\r\n      'in',\r\n      'inline',\r\n      'interface',\r\n      'internal',\r\n      'import',\r\n      'label',\r\n      'lazy',\r\n      'local',\r\n      'loop',\r\n      'match',\r\n      'module',\r\n      'namespace',\r\n      'native',\r\n      'new',\r\n      'not',\r\n      'of',\r\n      'on',\r\n      'optional',\r\n      'or',\r\n      'package',\r\n      'private',\r\n      'protected',\r\n      'protocol',\r\n      'public',\r\n      'repeat',\r\n      'return',\r\n      'self',\r\n      'set',\r\n      'static',\r\n      'super',\r\n      'switch',\r\n      'this',\r\n      'throw',\r\n      'to',\r\n      'try',\r\n      'until',\r\n      'using',\r\n      'var',\r\n      'warn',\r\n      'when',\r\n      'where',\r\n      'while',\r\n      'with',\r\n      'xor',\r\n      'yield',\r\n  ]);\n\n  const NUMBER_FORMATTING_OPTIONS = {\r\n      precision: 15,\r\n      decimalMarker: '.',\r\n      groupSeparator: '_',\r\n      exponentProduct: '',\r\n      beginExponentMarker: 'e',\r\n      endExponentMarker: '',\r\n      notation: 'auto',\r\n      imaginaryNumber: 'i',\r\n      truncationMarker: '',\r\n      beginRepeatingDigits: '',\r\n      endRepeatingDigits: '',\r\n      positiveInfinity: 'Infinity',\r\n      negativeInfinity: '-Infinity',\r\n      notANumber: 'NaN',\r\n  };\r\n  function serializeCortex(expr, options) {\r\n      const fmt = new Formatter(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.fancySymbols)\r\n          ? {\r\n              aroundInfixOperator: '\\u205f',\r\n              aroundRelationalOperator: '\\u2005',\r\n              afterSeparator: '\\u2009',\r\n          }\r\n          : {})), options));\r\n      function serializeExpression(expr) {\r\n          var _a, _b;\r\n          const stringValue = getStringValue(expr);\r\n          if (stringValue !== null)\r\n              return serializeString(stringValue);\r\n          const comment = serializeComment(expr);\r\n          let body;\r\n          const head = getFunctionHead(expr);\r\n          if (head !== null) {\r\n              body =\r\n                  (_b = (_a = serializeFunction(expr)) !== null && _a !== void 0 ? _a : serializeOperator(expr)) !== null && _b !== void 0 ? _b : serializeGenericFunction(expr);\r\n          }\r\n          if (!body) {\r\n              const symName = getSymbolName(expr);\r\n              if (symName !== null) {\r\n                  body = fmt.text(escapeSymbol(symName));\r\n              }\r\n          }\r\n          if (!body) {\r\n              if (typeof expr === 'number' || isNumberObject(expr)) {\r\n                  body = fmt.text(serializeNumber(expr, NUMBER_FORMATTING_OPTIONS));\r\n              }\r\n          }\r\n          if (!body) {\r\n              const dict = getDictionary(expr);\r\n              if (dict !== null) {\r\n                  const keyValues = Object.keys(dict).map((key) => fmt.line(escapeString(key), fmt.relationalOperator('->'), serializeExpression(dict[key])));\r\n                  if (keyValues.length === 0)\r\n                      return fmt.line(fmt.fence('{'), fmt.relationalOperator('->'), fmt.fence('}'));\r\n                  body = fmt.fencedList('{', fmt.separator(','), '}', keyValues);\r\n              }\r\n          }\r\n          if (body) {\r\n              if (comment instanceof EmptyBlock)\r\n                  return body;\r\n              return fmt.choice(fmt.line(comment, body), fmt.stack(comment, body));\r\n          }\r\n          return fmt.text();\r\n      }\r\n      function serializeString(s) {\r\n          return fmt.text(`\"${escapeString(s)}\"`);\r\n      }\r\n      function serializeComment(expr) {\r\n          if (!(typeof expr === 'object'))\r\n              return fmt.text();\r\n          if ('comment' in expr) {\r\n              if (expr.comment.length > 0) {\r\n                  return fmt.text(`/* ${expr.comment} */`);\r\n              }\r\n          }\r\n          return fmt.text();\r\n      }\r\n      const OPERATORS = {\r\n          NotElementOf: {\r\n              symbol: '!in',\r\n              fancySymbol: '\\u2209',\r\n              relational: true,\r\n              precedence: 160,\r\n          },\r\n          ElementOf: {\r\n              symbol: 'in',\r\n              fancySymbol: '\\u2208',\r\n              relational: true,\r\n              precedence: 240,\r\n          },\r\n          LessEqual: {\r\n              symbol: '<=',\r\n              relational: true,\r\n              fancySymbol: '\\u2A7d',\r\n              precedence: 241,\r\n          },\r\n          GreaterEqual: {\r\n              symbol: '>=',\r\n              fancySymbol: '\\u2A7e',\r\n              relational: true,\r\n              precedence: 242,\r\n          },\r\n          Less: { symbol: '<', relational: true, precedence: 245 },\r\n          Greater: { symbol: '>', relational: true, precedence: 245 },\r\n          NotEqual: {\r\n              symbol: '!=',\r\n              fancySymbol: '\\u2260',\r\n              relational: true,\r\n              precedence: 255,\r\n          },\r\n          Assign: { symbol: '=', relational: true, precedence: 258 },\r\n          Equal: { symbol: '==', relational: true, precedence: 260 },\r\n          Same: {\r\n              symbol: '===',\r\n              fancySymbol: '\\u2263',\r\n              relational: true,\r\n              precedence: 260,\r\n          },\r\n          KeyValue: {\r\n              symbol: '->',\r\n              fancySymbol: '\\u2192',\r\n              precedence: 265,\r\n          },\r\n          Add: { symbol: '+', precedence: 275 },\r\n          Subtract: { symbol: '-', fancySymbol: '\\u2212', precedence: 275 },\r\n          Multiply: { symbol: '*', fancySymbol: '\\u00d7', precedence: 390 },\r\n          Divide: { symbol: '/', fancySymbol: '\\u00f7', precedence: 660 },\r\n          Negate: {\r\n              symbol: '-',\r\n              unary: true,\r\n              fancySymbol: '\\u2212',\r\n              precedence: 665,\r\n          },\r\n          Power: { symbol: '^', precedence: 720 },\r\n          Or: { symbol: '||', fancySymbol: '\\u22c1', precedence: 800 },\r\n          And: { symbol: '&&', fancySymbol: '\\u22c0', precedence: 810 },\r\n          Not: { symbol: '!', unary: true, fancySymbol: '\\u00ac', precedence: 820 },\r\n      };\r\n      const FUNCTIONS = {\r\n          BaseForm: (expr) => {\r\n              var _a;\r\n              const base = (_a = getNumberValue(getArg(expr, 2))) !== null && _a !== void 0 ? _a : 16;\r\n              const arg1 = getArg(expr, 1);\r\n              const value = getNumberValue(arg1);\r\n              if (value === null ||\r\n                  Number.isNaN(value) ||\r\n                  !Number.isFinite(value) ||\r\n                  !(base === 2 || base === 10 || base === 16)) {\r\n                  return serializeGenericFunction(expr);\r\n              }\r\n              if (base === 2) {\r\n                  return fmt.text('0b' + Number(value).toString(2));\r\n              }\r\n              if (base === 10) {\r\n                  return fmt.text(serializeNumber(arg1, NUMBER_FORMATTING_OPTIONS));\r\n              }\r\n              if (base === 16) {\r\n                  if (!Number.isFinite(value)) {\r\n                      return fmt.text(serializeNumber(arg1, NUMBER_FORMATTING_OPTIONS));\r\n                  }\r\n                  if (Number.isInteger(value)) {\r\n                      return fmt.text('0x' + Number(value).toString(16));\r\n                  }\r\n                  return fmt.text(serializeHexFloat(value));\r\n              }\r\n              return serializeGenericFunction(expr);\r\n          },\r\n          String: (expr) => fmt.wrap('\"', ...mapArgs(expr, (x) => {\r\n              const sv = getStringValue(x);\r\n              if (sv !== null)\r\n                  return fmt.text(escapeString(sv));\r\n              return fmt.fencedBlock('\\\\(', serializeExpression(x), ')');\r\n          }), '\"'),\r\n          List: (expr) => fmt.fencedList('{', fmt.separator(','), '}', mapArgs(expr, serializeExpression)),\r\n          Set: (expr) => {\r\n              if (getArgCount(expr) === 0)\r\n                  return fmt.text('EmptySet');\r\n              return fmt.fencedList('[', fmt.separator(','), ']', mapArgs(expr, serializeExpression));\r\n          },\r\n      };\r\n      function serializeFunction(expr) {\r\n          var _a, _b;\r\n          return (_b = (_a = FUNCTIONS[getFunctionName(expr)]) === null || _a === void 0 ? void 0 : _a.call(FUNCTIONS, expr)) !== null && _b !== void 0 ? _b : null;\r\n      }\r\n      function serializeGenericFunction(expr) {\r\n          const head = getFunctionHead(expr);\r\n          if (typeof head === 'string') {\r\n              return fmt.line(escapeSymbol(head), fmt.fencedList('(', fmt.separator(','), ')', mapArgs(expr, serializeExpression)));\r\n          }\r\n          return fmt.line('Apply(', serializeExpression(head), fmt.separator(','), fmt.fencedList('[', fmt.separator(','), ']', mapArgs(expr, serializeExpression)), ')');\r\n      }\r\n      function serializeOperator(expr) {\r\n          var _a;\r\n          const head = getFunctionName(expr);\r\n          if (!head)\r\n              return null;\r\n          const op = OPERATORS[head];\r\n          if (!op)\r\n              return null;\r\n          const opSymbol = (options === null || options === void 0 ? void 0 : options.fancySymbols)\r\n              ? (_a = op.fancySymbol) !== null && _a !== void 0 ? _a : op.symbol\r\n              : op.symbol;\r\n          if (op.unary) {\r\n              if (getArgCount(expr) !== 1)\r\n                  return null;\r\n              const arg = getArg(expr, 1);\r\n              const argHead = getFunctionName(arg);\r\n              const argOp = OPERATORS[argHead];\r\n              if (argOp && argOp.precedence < op.precedence) {\r\n                  return fmt.line(opSymbol, '(', serializeExpression(arg), ')');\r\n              }\r\n              return fmt.line(opSymbol, serializeExpression(arg));\r\n          }\r\n          const operands = mapArgs(expr, (arg) => {\r\n              const argHead = getFunctionName(arg);\r\n              const argOp = OPERATORS[argHead];\r\n              if (argOp && argOp.precedence < op.precedence) {\r\n                  return fmt.line('(', serializeExpression(arg), ')');\r\n              }\r\n              return serializeExpression(arg);\r\n          });\r\n          if (!operands)\r\n              return null;\r\n          return fmt.list(op.relational\r\n              ? fmt.relationalOperator(opSymbol)\r\n              : fmt.infixOperator(opSymbol), operands);\r\n      }\r\n      return serializeExpression(expr).serialize(0);\r\n  }\r\n  function escapeInvisibleCharacter(code) {\r\n      if (ESCAPED_CHARS.has(code))\r\n          return ESCAPED_CHARS.get(code);\r\n      if (isInvisible(code)) {\r\n          if (code < 0x10000) {\r\n              return `\\\\u${('0000' + code.toString(16)).slice(-4)}`;\r\n          }\r\n          return `\\\\u{${('000000000' + code.toString(16)).slice(-8)}}`;\r\n      }\r\n      return String.fromCodePoint(code);\r\n  }\r\n  function escapeString(s) {\r\n      let result = '';\r\n      const graphemes = splitGraphemes(s);\r\n      if (typeof graphemes === 'string') {\r\n          for (const c of graphemes) {\r\n              result += escapeInvisibleCharacter(c.codePointAt(0));\r\n          }\r\n      }\r\n      else {\r\n          for (const c of graphemes) {\r\n              if (c.length === 1) {\r\n                  result += escapeInvisibleCharacter(c.codePointAt(0));\r\n              }\r\n              else {\r\n                  result += c;\r\n              }\r\n          }\r\n      }\r\n      return result;\r\n  }\r\n  function escapeSymbol(s) {\r\n      if (RESERVED_WORDS.has(s))\r\n          return `\\`${s}\\``;\r\n      if (/^[a-zA-Z][a-zA-Z\\d_]*$/.test(s))\r\n          return s;\r\n      const code = s.codePointAt(0);\r\n      if (DIGITS.has(code))\r\n          return `\\`${escapeString(s)}\\``;\r\n      let needVerbatim = false;\r\n      const graphemes = splitGraphemes(s);\r\n      let i = 0;\r\n      while (!needVerbatim && i < graphemes.length) {\r\n          const c = graphemes[i].codePointAt(0);\r\n          needVerbatim = ESCAPED_CHARS.has(c) || isInvisible(c) || isBreak(c);\r\n          i += 1;\r\n      }\r\n      if (!needVerbatim)\r\n          return s;\r\n      return `\\`${escapeString(s)}\\``;\r\n  }\n\n  exports.ComputeEngine = ComputeEngine;\n  exports.LatexSyntax = LatexSyntax;\n  exports.evaluate = evaluate;\n  exports.format = format;\n  exports.parse = parse;\n  exports.parseCortex = parseCortex;\n  exports.serialize = serialize;\n  exports.serializeCortex = serializeCortex;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"],"sourceRoot":""}