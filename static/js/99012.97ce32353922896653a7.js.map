{"version":3,"file":"js/99012.97ce32353922896653a7.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N23-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, texFraction } from '../../modules/outils.js'\nimport { context } from '../../modules/context.js'\nimport { ajouteChampFractionMathLive, ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { fraction } from '../../modules/fractions.js'\nexport const titre = 'Donner différentes écritures de nombres décimaux'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Compléter des égalités sur les nombres décimaux\n * * n/100 = .../10 + .../100\n * * n/100 = .../100 + .../10\n * * .../100 = u+ d/10 + c/100\n * * u = .../10\n * * u = .../100\n * * n/10 = ... + .../10 + .../100\n * @author Rémi Angot\n * 6N23-1\n */\nexport default function ExerciceDifferentesEcrituresNombresDecimaux () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = \"Compléter l'égalité puis donner l'écriture décimale.\"\n  this.spacing = 2\n  this.spacingCorr = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let typesDeQuestions\n    const a = context.isAmc\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6]\n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.nbQuestions === 3) listeTypeDeQuestions = combinaisonListes([choice([1, 2, 6]), 3, choice([4, 5])], this.nbQuestions)\n    for (\n      let i = 0, indexQ = 0, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      const u = randint(2, 9) // chiffre des unités\n      const d = randint(1, 9) // chiffre des dixièmes\n      const c = randint(1, 9) // chiffre des centièmes\n      const n = 100 * u + 10 * d + c\n      let ecritureDecimale\n      switch (typesDeQuestions) {\n        case 1: // n/100 = .... + .../10 + .../100=...\n          ecritureDecimale = texNombre(calcul(u + d / 10 + c / 100))\n          texteCorr = `$${texFraction(n, '100')}=${u}+${texFraction(\n            d,\n            '10'\n          )}+${texFraction(c, '100')}=${ecritureDecimale}$`\n          if (this.interactif && !context.isAmc) {\n            texte = `$${texFraction(n, '100')}=$` + ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, u, { formatInteractif: 'calcul' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 10)\n            setReponse(this, indexQ, fraction(d, 10), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 100)\n            setReponse(this, indexQ, fraction(c, 100), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$=$' + ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, calcul(u + d / 10 + c / 100), { formatInteractif: 'calcul' })\n            indexQ++\n          } else {\n            texte = `$${texFraction(n, '100')}=${a ? 'a' : '\\\\ldots\\\\ldots'}+${texFraction(\n              a ? 'b' : '',\n              10\n            )}+${texFraction(a ? 'c' : '', 100)}=${a ? 'd' : '\\\\ldots'}$`\n            texteCorr = `$${texFraction(n, '100')}=${u}+${texFraction(\n              d,\n              '10'\n            )}+${texFraction(c, '100')}=${ecritureDecimale}$`\n            this.autoCorrection[i] = {\n              enonce: texte,\n              options: { multicols: true },\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: u,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'b',\n                        valeur: d,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'c',\n                        valeur: c,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'd',\n                        valeur: calcul(u + d / 10 + c / 100),\n                        param: {\n                          signe: false,\n                          digits: 5,\n                          decimals: 3\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n          break\n        case 2: // n/100 = ... + .../100 + .../10\n          ecritureDecimale = texNombre(calcul(u + d / 10 + c / 100))\n          texteCorr = `$${texFraction(n, '100')}=${u}+${texFraction(\n            c,\n            100\n          )}+${texFraction(d, 10)}=${ecritureDecimale}$`\n          if (this.interactif && !context.isAmc) {\n            texte = `$${texFraction(n, '100')}=$`\n            texte += ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, u, { formatInteractif: 'calcul' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 100)\n            setReponse(this, indexQ, fraction(c, 100), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 10)\n            setReponse(this, indexQ, fraction(d, 10), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$=$' + ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, calcul(u + d / 10 + c / 100), { formatInteractif: 'calcul' })\n            indexQ++\n          } else {\n            texte = `$${texFraction(n, '100')}=${a ? 'a' : '\\\\ldots\\\\ldots'}+${texFraction(\n              a ? 'b' : '',\n              100\n            )}+${texFraction(a ? 'c' : '', 10)}=${a ? 'd' : '\\\\ldots'}$`\n            this.autoCorrection[i] = {\n              options: { multicols: true },\n              enonce: texte,\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: u,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'b',\n                        valeur: c,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'c',\n                        valeur: d,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'd',\n                        valeur: calcul(u + d / 10 + c / 100),\n                        param: {\n                          signe: false,\n                          digits: 5,\n                          decimals: 3\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n\n          break\n        case 3: // .../... = u+ d/10 + c/100=...\n          ecritureDecimale = texNombre(calcul(u + d / 10 + c / 100))\n          texteCorr = `$${texFraction(n, '100')}=${u}+${texFraction(\n            d,\n            '10'\n          )}+${texFraction(c, '100')}=${ecritureDecimale}$`\n          if (this.interactif && !context.isAmc) {\n            texte = ajouteChampFractionMathLive(this, indexQ, false, false)\n            setReponse(this, indexQ, fraction(u * 100 + d * 10 + c, 100), { formatInteractif: 'NumDen' })\n            indexQ++\n            texte += `$=${u}+${texFraction(d, '10')}+${texFraction(c, '100')}=$`\n            texte += ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, calcul(u + d / 10 + c / 100), { formatInteractif: 'calcul' })\n            indexQ++\n          } else {\n            texte = `$${texFraction(a ? 'a' : '', '100')}=${u}+${texFraction(\n            d,\n            '10'\n          )}+${texFraction(c, '100')}=${a ? 'b' : '\\\\ldots'}$`\n            this.autoCorrection[i] = {\n              options: { multicols: true },\n              enonce: texte,\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: n,\n                        param: {\n                          signe: false,\n                          digits: 4,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'b',\n                        valeur: calcul(u + d / 10 + c / 100),\n                        param: {\n                          signe: false,\n                          digits: 5,\n                          decimals: 3\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n          break\n        case 4: // u = .../10\n          texteCorr = `$${u}=${texFraction(10 * u, '10')}$`\n          if (this.interactif && !context.isAmc) {\n            texte = `$${u}=$`\n            texte += ajouteChampFractionMathLive(this, indexQ, false, 10)\n            setReponse(this, indexQ, fraction(10 * u, 10), { formatInteractif: 'Num' })\n            indexQ++\n          } else {\n            texte = `$${u}=${texFraction(a ? 'a' : '', '10')}$`\n            this.autoCorrection[i] = {\n              enonce: texte,\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: calcul(10 * u),\n                        param: {\n                          signe: false,\n                          digits: 3,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n\n          break\n        case 5: // u = .../100\n          texteCorr = `$${u}=${texFraction(100 * u, '100')}$`\n          if (this.interactif && !context.isAmc) {\n            texte = `$${u}=$`\n            texte += ajouteChampFractionMathLive(this, indexQ, false, 100)\n            setReponse(this, indexQ, fraction(100 * u, 100), { formatInteractif: 'Num' })\n            indexQ++\n          } else {\n            texte = `$${u}=${texFraction(a ? 'a' : '', '100')}$`\n            this.autoCorrection[i] = {\n              enonce: texte,\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: calcul(100 * u),\n                        param: {\n                          signe: false,\n                          digits: 3,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n          break\n        case 6: // n/10 = ... + .../10 + .../100 = ...\n          ecritureDecimale = texNombre(calcul(n / 10))\n          texteCorr = `$${texFraction(n, 10)}=${u * 10 + d}+${texFraction(c, 10)}+${texFraction(0, 100)}=${ecritureDecimale}$`\n          if (this.interactif && !context.isAmc) {\n            texte = `$${texFraction(n, 10)}=$`\n            texte += ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, u * 10 + d, { formatInteractif: 'calcul' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 10)\n            setReponse(this, indexQ, fraction(c, 10), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$+$' + ajouteChampFractionMathLive(this, indexQ, false, 100)\n            setReponse(this, indexQ, fraction(0, 100), { formatInteractif: 'Num' })\n            indexQ++\n            texte += '$=$' + ajouteChampTexteMathLive(this, indexQ, 'largeur10 inline')\n            setReponse(this, indexQ, calcul(n / 10), { formatInteractif: 'calcul' })\n            indexQ++\n          } else {\n            texte = `$${texFraction(n, 10)}=${a ? 'a' : '\\\\ldots\\\\ldots'}+${texFraction(a ? 'b' : '', 10)}+${texFraction(a ? 'c' : '', 100)}=${a ? 'd' : '\\\\ldots'}$`\n            this.autoCorrection[i] = {\n              options: { multicols: true },\n              enonce: texte,\n              propositions: [\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: texteCorr,\n                      reponse: {\n                        texte: 'a',\n                        valeur: calcul(u * 10 + d),\n                        param: {\n                          signe: false,\n                          digits: 3,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'b',\n                        valeur: c,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'c',\n                        valeur: 0,\n                        param: {\n                          signe: false,\n                          digits: 1,\n                          decimals: 0\n                        }\n                      }\n                    }\n                  ]\n                },\n                {\n                  type: 'AMCNum',\n                  propositions: [\n                    {\n                      texte: '',\n                      reponse: {\n                        texte: 'd',\n                        valeur: calcul(n / 10),\n                        param: {\n                          signe: false,\n                          digits: 5,\n                          decimals: 3\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n          break\n      }\n\n      if (this.questionJamaisPosee(i, u, d, c)) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","ExerciceDifferentesEcrituresNombresDecimaux","Exercice","this","consigne","spacing","spacingCorr","nouvelleVersion","typesDeQuestions","listeQuestions","listeCorrections","autoCorrection","a","context","listeTypeDeQuestions","combinaisonListes","nbQuestions","choice","texte","texteCorr","i","indexQ","cpt","u","randint","d","c","n","ecritureDecimale","texNombre","calcul","texFraction","interactif","ajouteChampTexteMathLive","setReponse","formatInteractif","ajouteChampFractionMathLive","fraction","enonce","options","multicols","propositions","type","reponse","valeur","param","signe","digits","decimals","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}