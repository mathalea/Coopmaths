{"version":3,"file":"js/32704.07cf9f57cd74e473d441.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/PE/PEA12.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, base10VersBaseN, combinaisonListes } from '../../modules/outils.js'\nimport Operation from '../../modules/operations.js'\nexport const titre = 'Additions et soustractions dans d\\'autres bases'\nexport const dateDePublication = '31/10/2021'\n\n/**\n* Passer d'une écriture en base 10 à l'écriture dans une autre base ou inversement\n* référence PEA12\n* * soustraction en base n\n* *\n* *\n*\n* @author Jean-Claude Lhote pour les opérations posées et Rémi Angot pour la correction détaillée\n*/\nexport default function AdditionSoustractionBaseN () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Poser et effectuer les calculs suivants :'\n  this.video = '-bIvS95dmYw'\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = 1\n  this.pasDeVersionLatex = true\n  this.spacingCorr = context.isHtml ? 2 : 1\n  this.sup = 3\n  this.sup2 = 3\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeOperations = []\n    let listeBases = []\n    if (this.sup === 1) {\n      listeOperations = Array(this.nbQuestions).fill('+')\n    }\n    if (this.sup === 2) {\n      listeOperations = Array(this.nbQuestions).fill('-')\n    }\n    if (this.sup === 3) {\n      for (let i = 0; i < this.nbQuestions; i++) {\n        listeOperations[i] = (i < this.nbQuestions / 2) ? '+' : '-'\n      }\n    }\n    if (this.sup2 === 1) {\n      listeBases = combinaisonListes([2, 3, 4, 5], this.nbQuestions)\n    }\n    if (this.sup2 === 2) {\n      listeBases = combinaisonListes([12, 16], this.nbQuestions)\n    }\n    if (this.sup2 === 3) {\n      if (this.nbQuestions < 5) {\n        listeBases = combinaisonListes([3, 4, 12, 16], this.nbQuestions)\n      } else {\n        listeBases = combinaisonListes([3, 4, 5, 6, 12, 16], this.nbQuestions)\n      }\n    }\n    for (let i = 0, texte, texteCorr, m, n, mb, nb, base, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      base = listeBases[i]\n      if (listeOperations[i] === '+') {\n        m = randint(base ** 2, base ** 4)\n        n = randint(base ** 2, base ** 4)\n        mb = base10VersBaseN(m, base)\n        nb = base10VersBaseN(n, base)\n        texte = `$(${mb})_{${base}} + (${nb})_{${base}}$`\n        texteCorr = `En base ${base} :<br>` + Operation({ operande1: m, operande2: n, type: 'addition', base: base })\n        const retenue = []\n        for (let rang = 0; rang < Math.max(mb.length, nb.length); rang++) {\n          const somme = parseInt(mb[mb.length - 1 - rang] || 0, base) + parseInt(nb[nb.length - 1 - rang] || 0, base) + parseInt(retenue[rang - 1] || 0, base)\n          texteCorr += `<br> Au rang des $${base}^${rang}$ :  $${mb[mb.length - 1 - rang] || 0} + ${nb[nb.length - 1 - rang] || 0} ${retenue[rang - 1] ? '+' + retenue[rang - 1] : ''}`\n          if (parseInt(mb[mb.length - 1 - rang] || 0, base) > 9 || parseInt(nb[nb.length - 1 - rang] || 0, base) > 9) {\n            // Si un chiffre est un lettre\n            texteCorr += ` = ${parseInt(mb[mb.length - 1 - rang] || 0, base)} + ${parseInt(nb[nb.length - 1 - rang] || 0, base)}`\n          }\n          texteCorr += `= ${somme}`\n          if (somme >= base) {\n            texteCorr += `= (${base10VersBaseN(somme, base)})_{${base}}$ donc on écrit ${base10VersBaseN(somme, base)[1]} et on retient ${base10VersBaseN(somme, base)[0]}. `\n            retenue[rang] = base10VersBaseN(somme, base)[0]\n          } else if (somme >= 10) {\n            texteCorr += `= (${base10VersBaseN(somme, base)})_{${base}}$`\n          } else {\n            texteCorr += '$'\n          }\n        }\n      } else {\n        m = randint(base ** 3, base ** 4)\n        n = randint(base ** 2, m)\n        mb = base10VersBaseN(m, base)\n        nb = base10VersBaseN(n, base)\n        texte = `$(${mb})_{${base}} - (${nb})_{${base}}$`\n        texteCorr = `En base ${base} :<br>` + Operation({ operande1: m, operande2: n, type: 'soustraction', base: base })\n        const retenue = []\n        for (let rang = 0; rang < Math.max(mb.length, nb.length); rang++) {\n          let difference = parseInt(mb[mb.length - 1 - rang] || 0, base) - (parseInt(nb[nb.length - 1 - rang] || 0, base) + parseInt(retenue[rang - 1] || 0, base))\n          if (difference < 0) difference += base\n          if (retenue[rang - 1]) {\n            texteCorr += `<br> Au rang des $${base}^${rang}$ :  $${mb[mb.length - 1 - rang] || 0} - (${nb[nb.length - 1 - rang] || 0} + 1)`\n          } else {\n            texteCorr += `<br> Au rang des $${base}^${rang}$ :  $${mb[mb.length - 1 - rang] || 0} - ${nb[nb.length - 1 - rang] || 0}`\n          }\n          if (parseInt(mb[mb.length - 1 - rang] || 0, base) > 9 || parseInt(nb[nb.length - 1 - rang] || 0, base) > 9) {\n            // Si un chiffre est un lettre\n            if (retenue[rang - 1]) {\n              texteCorr += ` = ${parseInt(mb[mb.length - 1 - rang] || 0, base)} - (${parseInt(nb[nb.length - 1 - rang] || 0, base)} + 1)`\n            } else {\n              texteCorr += ` = ${parseInt(mb[mb.length - 1 - rang] || 0, base)} - ${parseInt(nb[nb.length - 1 - rang] || 0, base)}`\n            }\n          }\n          if (parseInt(mb[mb.length - 1 - rang] || 0, base) < parseInt(nb[nb.length - 1 - rang] || 0, base)) {\n            texteCorr += `$ la soustraction est impossible donc on récupère un paquet de ${base} au rang supérieur.`\n            if (retenue[rang - 1]) {\n              texteCorr += `<br> $${base} + ${parseInt(mb[mb.length - 1 - rang] || 0, base)} - (${parseInt(nb[nb.length - 1 - rang] || 0, base)} + 1)`\n            } else {\n              texteCorr += `<br> $${base} + ${parseInt(mb[mb.length - 1 - rang] || 0, base)} - ${parseInt(nb[nb.length - 1 - rang] || 0, base)}`\n            }\n            retenue[rang] = 1\n          }\n          texteCorr += `= ${difference}$`\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Opérations', 3, '1 : Uniquement des additions\\n2 : Uniquement des soustractions\\n3 Additions et soustractions']\n  this.besoinFormulaire2Numerique = ['Choix des bases', 3, '1 : Bases 2 à 5\\n2 : Bases 12 et 16\\n3 Bases 2 à base 16']\n}\n"],"names":["titre","dateDePublication","AdditionSoustractionBaseN","Exercice","this","consigne","video","nbQuestions","nbCols","nbColsCorr","spacing","pasDeVersionLatex","spacingCorr","context","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","listeOperations","listeBases","Array","fill","i","combinaisonListes","texte","texteCorr","m","n","mb","nb","base","cpt","randint","base10VersBaseN","Operation","operande1","operande2","type","retenue","rang","Math","max","length","somme","parseInt","difference","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique"],"sourceRoot":""}