{"version":3,"file":"js/16898.5bb7c2ca5c6772709f5b.js","mappings":"iTAKO,MAAMA,EAAQ,2CACRC,EAAoB,aACpBC,GAAkB,EAClBC,EAAiB,SACjBC,GAAW,EACXC,EAAU,aAQR,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,SAAW,GAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,IAAM,EACXL,KAAKM,KAAO,EACZN,KAAKO,MAAO,EACZP,KAAKQ,gBAAkB,WACrBR,KAAKK,KAAMI,EAAAA,EAAAA,KAAkB,EAAG,EAAGT,KAAKK,IAAK,GAC7CL,KAAKM,MAAOG,EAAAA,EAAAA,KAAkB,EAAG,EAAGT,KAAKM,KAAM,GAC/CN,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAKY,eAAiB,GACtB,MAAMC,EAAU,GACVC,EAAmB,CAAC,IAC1B,IAAIC,EACJ,MAAMC,EAAe,GACfC,EAAmB,GACnBC,EAAgB,GAChBC,EAAiB,GACjBC,EAAmB,GACnBC,EAAoB,GACpBC,EAAiB,GACjBC,EAAgB,GAChBC,EAAY,GACZC,EAAe,CAAC,OAAQ,OAAQ,OAAQ,QAC9C,IAAK,IAAoBC,EAAQC,EAAOC,EAAGC,EAAGC,EAAQC,EAAOC,EAAWC,EAA/DC,EAAI,EAAGC,EAAM,EAAqED,EAAIlC,KAAKE,aAAeiC,EAAM,IAAK,CAkB5H,OAjBAV,EAAa,GAAKA,EAAa,EAAIS,EAAI,GAEvClB,EAAakB,GAAK,GAClBjB,EAAiBiB,GAAK,GACtBhB,EAAckB,OAAS,EACvBjB,EAAeiB,OAAS,EACxBhB,EAAiBgB,OAAS,EAC1Bf,EAAkBa,GAAK,GACvBZ,EAAeY,GAAK,GACpBpB,EAAiBoB,GAAK,GACtBX,EAAcW,GAAK,GACnBrB,EAAQuB,OAAS,EACjBZ,EAAUU,GAAKlC,KAAKO,KAAO,GAAI8B,EAAAA,EAAAA,MAAS,EAAG,EAAG,GAC9CX,GAASY,EAAAA,EAAAA,KAAa,CAAEC,KAAM,EAAGC,KAAM,EAAGC,KAAM,GAAIC,KAAM,GAAIC,KAAMlB,EAA2B,IAAdzB,KAAKM,KAAa,EAAIN,KAAKM,QAE5GU,EAAakB,GAAGU,KAAKlB,GAEA,IAAb1B,KAAKK,KAAYgC,EAAAA,EAAAA,KAAQ,EAAG,GAAKrC,KAAKK,KAC5C,KAAK,EAEDuB,EADsD,SAApDH,EAA4B,IAAdzB,KAAKM,KAAa,EAAIN,KAAKM,OACvCuC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAItB,EAAUU,GAAK,EAAG,IAAIY,EAAAA,EAAAA,KAAM,EAAItB,EAAUU,GAAK,EAAG,MAEnEW,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,KAAO,KAAQtB,EAAUU,GAAI,IAAIY,EAAAA,EAAAA,KAAM,KAAO,KAAQtB,EAAUU,GAAI,KAEvF,MACF,KAAK,EAEDN,EADsD,SAApDH,EAA4B,IAAdzB,KAAKM,KAAa,EAAIN,KAAKM,OACvCuC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,EAAItB,EAAUU,GAAK,IAAIY,EAAAA,EAAAA,KAAM,GAAI,EAAItB,EAAUU,GAAK,KAEpEW,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,IAAMtB,EAAUU,GAAK,IAAIY,EAAAA,EAAAA,KAAM,GAAI,IAAMtB,EAAUU,GAAK,IAE9E,MACF,KAAK,EAEDN,EADsD,SAApDH,EAA4B,IAAdzB,KAAKM,KAAa,EAAIN,KAAKM,OACvCuC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,EAAItB,EAAUU,KAAKY,EAAAA,EAAAA,KAAM,EAAItB,EAAUU,GAAI,MAE3DW,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,EAAItB,EAAUU,KAAKY,EAAAA,EAAAA,KAAM,KAAM,EAAItB,EAAUU,KAEnE,MACF,KAAK,EAEDN,EADsD,SAApDH,EAA4B,IAAdzB,KAAKM,KAAa,EAAIN,KAAKM,OACvCuC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,GAAKtB,EAAUU,KAAKY,EAAAA,EAAAA,KAAM,GAAKtB,EAAUU,GAAI,KAE7DW,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAM,EAAG,EAAItB,EAAUU,KAAKY,EAAAA,EAAAA,KAAM,KAAM,EAAItB,EAAUU,KAUvE,GANAN,EAAEmB,UAAY,EACdnB,EAAEoB,MAAQC,EAAAA,GAAAA,OAAiB,OAAS,QACpCjC,EAAakB,GAAGU,KAAKhB,GACrBb,EAAkBW,EAAOwB,YAAYC,QAGjCnD,KAAKoD,YAAcH,EAAAA,GAAAA,OACrB,IAAK,IAAII,EAAI,EAAGA,EAAI3B,EAAOwB,YAAYd,OAAQiB,IAC7CvC,EAAiBoB,GAAGU,MAAKU,EAAAA,EAAAA,IAAe5B,EAAOwB,YAAYG,GAAG,GAAI3B,EAAOwB,YAAYG,GAAG,GAAI,CAAEE,OAAQ,GAAKP,MAAO,MAAOQ,MAAO,EAAGC,QAAS,MAGhJ,KAAO1C,EAAgBqB,OAAS,GAAG,CAIjC,IAHAT,GAAQ+B,EAAAA,EAAAA,MAAeZ,EAAAA,EAAAA,KAAM/B,EAAgB,GAAG,GAAIA,EAAgB,GAAG,IAAKa,GAC5EC,EAAI,EACJC,GAAS,EACFD,EAAId,EAAgBqB,SAAWN,IAEhC6B,EAAAA,EAAAA,KAAShC,GAAOmB,EAAAA,EAAAA,KAAM/B,EAAgBc,GAAG,GAAId,EAAgBc,GAAG,KAAO,GACzEC,GAAS,EACJD,IAELC,GAEFjB,EAAQ+B,MAAKgB,EAAAA,EAAAA,KAAO,EAAC,GAAM,IAAU,CAAC7C,EAAgB,GAAIA,EAAgBc,IAAM,CAACd,EAAgBc,GAAId,EAAgB,KACrHA,EAAgB8C,OAAOhC,EAAG,GAC1Bd,EAAgB8C,OAAO,EAAG,IAE1B9C,EAAgB8C,OAAO,EAAG,GAI9B,MAAMC,GAAmBzB,EAAAA,EAAAA,KAAQ,EAAG,IAC9B0B,GAAiBC,EAAAA,EAAAA,KAAQnD,GAASgD,OAAO,EAAGC,GAClD,IAAK,IAAIT,EAAI,EAAGA,EAAIU,EAAe3B,OAAQiB,IACzCnC,EAAc0B,KAAKmB,EAAeV,GAAG,GAAIU,EAAeV,GAAG,IAE7DpB,GAAoBI,EAAAA,EAAAA,KAAQ,EAAG,GAC/B,IAAK,IAAIgB,EAAI,EAAGA,EAAInC,EAAckB,OAAQiB,GAAK,EACzCA,EAAIpB,GACNd,EAAeyB,MAAKE,EAAAA,EAAAA,KAAM5B,EAAcmC,GAAG,GAAInC,EAAcmC,GAAG,KAChElC,EAAeyB,MAAKE,EAAAA,EAAAA,KAAM5B,EAAcmC,EAAI,GAAG,GAAInC,EAAcmC,EAAI,GAAG,OAExElC,EAAeyB,MAAKE,EAAAA,EAAAA,KAAM5B,EAAcmC,GAAG,GAAInC,EAAcmC,GAAG,KAChEjC,EAAiBwB,MAAKE,EAAAA,EAAAA,KAAM5B,EAAcmC,EAAI,GAAG,GAAInC,EAAcmC,EAAI,GAAG,MAG9E,IAAK,IAAIA,EAAI,EAAGA,EAAIlC,EAAeiB,OAAQiB,IACzCrC,EAAakB,GAAGU,MAAKqB,EAAAA,EAAAA,KAAW9C,EAAekC,KAEjD,IAAK,IAAIA,EAAI,EAAGA,EAAIjC,EAAiBgB,OAAQiB,IAC3CpC,EAAiBiB,GAAGU,MAAKqB,EAAAA,EAAAA,KAAW7C,EAAiBiC,GAAI,QAE3D,IAAK,IAAIA,EAAI,EAAGA,EAAIvC,EAAiBoB,GAAGE,OAAQiB,IAAK,CACnDvB,GAAS,EACT,IAAIoC,EAAI,EACR,KAAOA,EAAI9C,EAAiBgB,SAAWN,IACjC6B,EAAAA,EAAAA,KAASvC,EAAiB8C,GAAIpD,EAAiBoB,GAAGmB,GAAGP,OAAS,IAChEhB,GAAS,EACTR,EAAeY,GAAGU,KAAK9B,EAAiBoB,GAAGmB,KAE3Ca,IAGCpC,GACHT,EAAkBa,GAAGU,KAAK9B,EAAiBoB,GAAGmB,IAGlDtB,EAAQkB,EAAAA,GAAAA,MACJ,mPACA,2JAEJlB,IAASoC,EAAAA,EAAAA,KAAW,CAAE5B,MAAO,EAAGC,MAAO,EAAGC,KAAM,GAAIC,KAAM,GAAI0B,MAAO,OAAUpD,EAAakB,MAAOpB,EAAiBoB,IAChHlC,KAAKoD,YAAcH,EAAAA,GAAAA,SACrBlB,GAAU,2BAA0B/B,KAAKqE,kBAAkBnC,aAE7DF,GAAYmC,EAAAA,EAAAA,KAAW,CAAE5B,MAAO,EAAGC,MAAO,EAAGC,KAAM,GAAIC,KAAM,GAAI0B,MAAO,GAAKE,MAAO,aAAetD,KAAiBC,EAAiBiB,IACjIe,EAAAA,GAAAA,QACFjD,KAAKY,eAAesB,GAAK,CACvBqC,OAAQxC,EACRyC,aAAc,CACZ,CACEzC,MAAOC,EACPyC,OAAQ,EACRC,SAAU,GACVC,WAAW,IAGfC,QAAS,CACPC,OAAQ,CAACzD,EAAiBgB,QAC1B0C,MAAO,CACLC,OAAQ,EACRC,OAAO,EACPC,SAAU,EACVC,UAAU,MAKdlF,KAAKmF,oBAAoBjD,EAAG4B,EAAkB7B,EAAmBf,EAAc,GAAG,GAAIA,EAAc,GAAG,MACzGlB,KAAKU,eAAekC,KAAKb,GACzB/B,KAAKW,iBAAiBiC,KAAKZ,GAC3BE,KAEFC,IAEFnC,KAAKoF,sBAAyBlD,IAC5B,IAAImD,EACAC,GAA4B,EAChC,IAAK,MAAMC,KAAYlE,EAAkBa,GACnCqD,EAASC,OACXF,GAA4B,EAC5B/D,EAAcW,GAAGU,MAAKqB,EAAAA,EAAAA,KAAWsB,EAASzC,MAAO,SAEnDyC,EAASE,gBAEX,IAAK,MAAMF,KAAYjE,EAAeY,GAC/BqD,EAASC,KACTjE,EAAcW,GAAGU,MAAKqB,EAAAA,EAAAA,KAAWsB,EAASzC,MAAO,QADlCwC,GAA4B,EAEhDC,EAASE,gBAEX,MAAMC,EAAcC,SAASC,cAAe,mBAAkB5F,KAAKqE,kBAAkBnC,KACrF,IAAK,IAAIL,EAAI,EAAGA,EAAIP,EAAeY,GAAGE,OAAQP,IAC5CP,EAAeY,GAAGL,GAAG4D,gBAEvB,IAAID,GAAO,EACX,IAAK,IAAIK,EAAI,EAAGA,EAAIvE,EAAeY,GAAGE,OAAQyD,IAC5CL,EAAOA,GAAQlE,EAAeY,GAAG2D,GAWnC,OATIP,GAA6BE,GAC/BE,EAAYI,UAAY,KACxBT,EAAW,OAEXK,EAAYI,UAAY,KACxBT,EAAW,MAINA,IAETU,EAAAA,EAAAA,KAAwB/F,OAE1BA,KAAKgG,0BAA4B,CAAC,cAAgB,EAAG,4FACrDhG,KAAKiG,2BAA6B,CAAC,wBAAyB,EAAG,sEAC/DjG,KAAKkG,6BAA+B,CAAC,cAAc,K,gBCvOtC,SAASnG,IAItBC,KAAKR,MAAQ,GACbQ,KAAKmG,YAAa,EAclBnG,KAAKC,SAAW,GAChBD,KAAKoG,mBAAqB,GAC1BpG,KAAKqG,aAAe,GACpBrG,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAKsG,QAAU,GACftG,KAAKuG,kBAAoB,GACzBvG,KAAKY,eAAiB,GACtBZ,KAAKwG,sBAAwB,GAK7BxG,KAAKyG,QAAU,EACfzG,KAAK0G,YAAc,EAKnB1G,KAAK2G,mBAAoB,EACzB3G,KAAK4G,cAAgB,GACrB5G,KAAK6G,oBAAqB,EAC1B7G,KAAK8G,uBAAwB,EAC7B9G,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAK+G,kBAAmB,EACxB/G,KAAKgH,sBAAuB,EAC5BhH,KAAKiH,mBAAoB,EACzBjH,KAAKkH,uBAAwB,EAM7BlH,KAAKmH,QAAS,EACdnH,KAAKoH,gBAAkB,EAKvBpH,KAAKE,YAAc,GACnBF,KAAKqH,mBAAqB,EAC1BrH,KAAKsH,+BAAgC,EACrCtH,KAAKuH,qBAAsB,EAC3BvH,KAAKwH,oBAAqB,EAC1BxH,KAAKyH,MAAQ,GAEbzH,KAAKoD,YAAa,EAClBpD,KAAK0H,uBAAwB,EAE7B1H,KAAKgG,2BAA4B,EACjChG,KAAK2H,uBAAwB,EAC7B3H,KAAK4H,6BAA8B,EAEnC5H,KAAKiG,4BAA6B,EAClCjG,KAAK6H,wBAAyB,EAC9B7H,KAAK8H,8BAA+B,EAEpC9H,KAAK+H,4BAA6B,EAClC/H,KAAKgI,wBAAyB,EAC9BhI,KAAKkG,8BAA+B,EAEpClG,KAAKiI,4BAA6B,EAClCjI,KAAKkI,wBAAyB,EAC9BlI,KAAKmI,8BAA+B,EAMpCnI,KAAKoI,cAAe,EASpBpI,KAAKqI,eAAiB,GAMtBrI,KAAKQ,gBAAkB,SAAU6D,KAQjCrE,KAAKmF,oBAAsB,SAAUjD,KAAMoG,GAC/B,IAANpG,IAASlC,KAAKqI,eAAiB,IACnC,IAAIE,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI1I,KAAKqI,eAAeM,QAAQJ,IAAmB,KAGjDvI,KAAKqI,eAAezF,KAAK2F,IAClB,I,6GCvHb,SAASK,EAAgBC,EAAGC,EAAGC,GAC7BC,EAAAA,IAAAA,KAAqBhJ,MACrB,MAAMiJ,GAAInG,EAAAA,EAAAA,KAAM+F,EAAGC,GACnB9I,KAAK8C,MAAQmG,EACRF,IAASA,EAAU,IACxB,MAAMG,EAAMH,EAAQG,KAAO,CAAEC,QAAS,GAChCC,EAAOL,EAAQK,MAAQ,CAAED,QAAS,IAClCE,EAAQN,EAAQM,OAAS,CAAEF,QAASJ,EAAQtF,SAAW,GAC7DzD,KAAKwF,MAAO,EACZxF,KAAKsJ,IAAM,SAAUC,GACnB,IAAIC,EACJ,MAAMC,GAAQxF,EAAAA,EAAAA,KAAWgF,GAYzB,OAXAQ,EAAMzG,MAAQ+F,EAAQ/F,OAAS+F,EAAQW,SAAW,QAClDD,EAAM1G,UAAYgG,EAAQvF,OAASuF,EAAQhG,WAAa,EACxD0G,EAAME,OAASZ,EAAQa,MAAQb,EAAQY,QAAU,EACjDF,EAAMI,WAAY,EAClBJ,EAAMnF,MAAQyE,EAAQzE,OAAS,IAC/BkF,EAAQ,UAASxJ,KAAK8J,SACtBN,GAAQC,EAAMH,IAAIC,GAAS,KAG3BC,GAAS,eAAcP,EAAEc,KAAKR,WAAeN,EAAEe,KAAKT,WAAeR,EAAQxF,QAAUwF,EAAQkB,OAAS,GAAKV,+CAC3GC,GAAQ,OACDA,GAET,MAAMU,EAAMlK,KACNmK,EAAoB,KACxBxE,SAASyE,oBAAoB,oBAAqBD,GAClD,MAAME,EAAS1E,SAAS2E,eAAgB,GAAEtK,KAAK8J,MACzCS,EAAmB/E,IACvBxF,KAAKwF,KAAOA,GAGd,GAAI6E,EAAQ,CACV,IAAK,MAAMG,KAAOtB,EAChBmB,EAAO/F,MAAMkG,GAAOtB,EAAIsB,GAK1B,SAASC,IACP,IAAK,MAAMD,KAAOpB,EAChBpJ,KAAKsE,MAAMkG,GAAOpB,EAAKoB,GAG3B,SAASE,IACP,IAAK,MAAMF,KAAOtB,EAChBlJ,KAAKsE,MAAMkG,GAAOtB,EAAIsB,GAG1B,SAASG,IACP,GAAIT,EAAI1E,KAAM,CAEZ6E,EAAOO,iBAAiB,YAAaH,GACrCJ,EAAOO,iBAAiB,WAAYF,GAEpC,IAAK,MAAMF,KAAOtB,EAChBlJ,KAAKsE,MAAMkG,GAAOtB,EAAIsB,GAExBN,EAAI1E,MAAO,EACX+E,GAAgB,OACX,CAELF,EAAOD,oBAAoB,YAAaK,GACxCJ,EAAOD,oBAAoB,WAAYM,GAEvC,IAAK,MAAMF,KAAOnB,EAChBrJ,KAAKsE,MAAMkG,GAAOnB,EAAMmB,GAE1BN,EAAI1E,MAAO,GAhCf6E,EAAOO,iBAAiB,YAAaH,GACrCJ,EAAOO,iBAAiB,WAAYF,GACpCL,EAAOO,iBAAiB,QAASD,KAmCrChF,SAASiF,iBAAiB,oBAAqBT,GAC/CnK,KAAKyF,cAAgB,KACnB,MAAM4E,EAAS1E,SAAS2E,eAAgB,GAAEtK,KAAK8J,MAE/CO,EAAOQ,YAAYR,EAAOS,WAAU,KAIjC,SAASxH,KAAmBgF,GACjC,OAAO,IAAIM,KAAkBN,GAS/B,SAASyC,EAAoBC,EAAIC,EAAIC,EAAIC,EAAIpC,GAC3CC,EAAAA,IAAAA,KAAqBhJ,MACrB,MAAMiJ,GAAInG,EAAAA,EAAAA,KAAMkI,EAAIC,GACdG,GAAItI,EAAAA,EAAAA,KAAMoI,EAAID,GACdI,GAAIvI,EAAAA,EAAAA,KAAMoI,EAAIC,GACdG,GAAIxI,EAAAA,EAAAA,KAAMkI,EAAIG,GACdI,GAAYC,EAAAA,EAAAA,KAASvC,EAAGmC,EAAGC,EAAGC,GAC9BG,GAAUD,EAAAA,EAAAA,KAASvC,EAAGmC,EAAGC,EAAGC,GAC7BvC,IAASA,EAAU,IACxB,MAAMG,EAAMH,EAAQG,KAAO,CAAEC,QAAS,GAChCC,EAAOL,EAAQK,MAAQ,CAAED,QAAS,IAClCE,EAAQN,EAAQM,OAAS,CAAEF,QAAS,GACpCO,EAAUX,EAAQW,SAAW,UAC7BgC,OAAmCjD,IAAtBM,EAAQ2C,WAA2B3C,EAAQ2C,UAC9DH,EAAUI,SAAW5C,EAAQ4C,WAAY,EACzCJ,EAAUK,qBAAuB7C,EAAQ6C,sBAAwB,EACjEH,EAAQ1I,UAAYgG,EAAQhG,WAAa,EACzC/C,KAAKwF,KAAOuD,EAAQvD,OAAQ,EAC5BxF,KAAKsJ,IAAM,SAAUC,GACnB,IAAIC,EAQJ,OAPA+B,EAAUM,qBAAuB9C,EAAQ/F,OAAS+F,EAAQW,SAAWX,EAAQ8C,sBAAwB,UACrGN,EAAUxI,UAAY,EACtBwI,EAAU1B,WAAY,EACtBL,EAAQ,mBAAkBxJ,KAAK8J,SAC/BN,GAAQ+B,EAAUjC,IAAIC,GAAS,KAC/BC,GAAQ,OACRA,GAAQiC,EAAQnC,IAAIC,GACbC,GAETxJ,KAAK8L,KAAQvC,IACPvJ,KAAKwF,OAAMiG,EAAQI,qBAAuBnC,GAC9C+B,EAAQE,SAAWJ,EAAUI,SACtBF,EAAQK,KAAKvC,IAEtB,MAAMW,EAAMlK,KACNmK,EAAoB,KACxBxE,SAASyE,oBAAoB,oBAAqBD,GAClD,MAAME,EAAS1E,SAAS2E,eAAe,YAActK,KAAK8J,IACpDS,EAAmB/E,IACvBxF,KAAKwF,KAAOA,GAEd,GAAI6E,EAEF,IAAK,MAAMG,KAAOtB,EAChBmB,EAAO/F,MAAMkG,GAAQxK,KAAKwF,KAAQ6D,EAAMmB,GAAOtB,EAAIsB,GAGvD,GAAIH,GAAUqB,EAAW,CAIvB,SAASjB,IACP,IAAK,MAAMD,KAAOpB,EAChBpJ,KAAKsE,MAAMkG,GAAOpB,EAAKoB,GAG3B,SAASE,IACP,IAAK,MAAMF,KAAOtB,EAChBlJ,KAAKsE,MAAMkG,GAAOtB,EAAIsB,GAG1B,SAASG,IACP,GAAIT,EAAI1E,KAAM,CAEZ6E,EAAOO,iBAAiB,YAAaH,GACrCJ,EAAOO,iBAAiB,WAAYF,GAEpC,IAAK,MAAMF,KAAOtB,EAChBlJ,KAAKsE,MAAMkG,GAAOtB,EAAIsB,GAExBN,EAAI1E,MAAO,EACX+E,GAAgB,OACX,CAELF,EAAOD,oBAAoB,YAAaK,GACxCJ,EAAOD,oBAAoB,WAAYM,GAEvC,IAAK,MAAMF,KAAOnB,EAChBrJ,KAAKsE,MAAMkG,GAAOnB,EAAMmB,GAE1BN,EAAI1E,MAAO,GAhCf6E,EAAOO,iBAAiB,YAAaH,GACrCJ,EAAOO,iBAAiB,WAAYF,GACpCL,EAAOO,iBAAiB,QAASD,KAmCrChF,SAASiF,iBAAiB,oBAAqBT,GAC/CnK,KAAKyF,cAAgB,KACnB,MAAM4E,EAAS1E,SAAS2E,eAAgB,GAAEtK,KAAK8J,MAE/CO,EAAOQ,YAAYR,EAAOS,WAAU,KAIjC,SAASiB,KAAuBzD,GACrC,OAAO,IAAIyC,KAAsBzC,GAG5B,SAAS0D,EAAmBnD,EAAGC,EAAGmD,EAAQC,EAAcnD,GAC7D,MAAMoD,EAAS,GACVpD,IAASA,EAAU,IACxB,MAAMpF,EAAWoF,EAAQpF,UAAY,EAC/ByI,EAAQrD,EAAQqD,OAAS,EACzBC,EAAUtD,EAAQsD,SAAW,EAC7BC,EAASvD,EAAQuD,QAAU,GAC3BC,EAASxD,EAAQwD,QAAU,GACjC,IAAIC,EAAWzD,EAAQyD,UAAY,UAC/BC,EAAW1D,EAAQ0D,UAAY,UAC9BxJ,EAAAA,GAAAA,SACHuJ,EAAWzD,EAAQyD,UAAY,OAC/BC,EAAW1D,EAAQ0D,UAAY,aAEjC,MAAMC,EAAY3D,EAAQ2D,YAAa,EACjCC,EAAY5D,EAAQ4D,YAAa,EACjCjD,EAAUX,EAAQW,SAAW8C,EAC7Bd,OAAmCjD,IAAtBM,EAAQ2C,WAA2B3C,EAAQ2C,UAC9D,IAAIkB,EACJ,IAAK,IAAI1K,EAAI,EAAGA,EAAI+J,EAAQ/J,IAAK,CAC/B0K,GAAI9J,EAAAA,EAAAA,KAAM+F,EAAI3G,GAAKyB,EAAWyI,GAAQtD,GACtC,IAAK,IAAIjH,EAAI,EAAGA,EAAIqK,EAAcrK,IAC5ByK,EAAOO,SAAS3K,EAAIgK,EAAerK,EAAI,GACzCsK,EAAOvJ,KAAKmJ,EAAmBa,EAAE/D,EAAIhH,EAAI8B,EAAWuI,EAAcpD,EAAG8D,EAAE/D,GAAKhH,EAAI,GAAK8B,EAAWuI,EAAcpD,EAAIuD,EAChH,CAAEX,UAAAA,EAAWlG,MAAM,EAAMkE,QAAS8C,EAAUb,SAAUe,KAC/CH,EAAOM,SAAS3K,EAAIgK,EAAerK,EAAI,GAChDsK,EAAOvJ,KAAKmJ,EAAmBa,EAAE/D,EAAIhH,EAAI8B,EAAWuI,EAAcpD,EAAG8D,EAAE/D,GAAKhH,EAAI,GAAK8B,EAAWuI,EAAcpD,EAAIuD,EAChH,CAAEX,UAAAA,EAAWlG,MAAM,EAAMkE,QAAS+C,EAAUd,SAAUgB,KAExDR,EAAOvJ,KAAKmJ,EAAmBa,EAAE/D,EAAIhH,EAAI8B,EAAWuI,EAAcpD,EAAG8D,EAAE/D,GAAKhH,EAAI,GAAK8B,EAAWuI,EAAcpD,EAAIuD,EAAS,CAAEX,UAAAA,EAAWhC,QAAAA,EAASlE,MAAM,KAI7J,OAAO2G","sources":["webpack://mathalea/./src/js/exercices/6e/6G24-4.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/2dinteractif.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, contraindreValeur, randint, choice, shuffle } from '../../modules/outils.js'\nimport { droite, longueur, mathalea2d, papierPointe, point, symetrieAxiale, tracePoint } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nimport { pointCliquable } from '../../modules/2dinteractif.js'\nexport const titre = 'Compléter un nuage de points symétriques'\nexport const dateDePublication = '18/12/2021'\nexport const interactifReady = true\nexport const interactifType = 'custom'\nexport const amcReady = true\nexport const amcType = 'AMCOpenNum'\n\n/**\n * Symétrie axiale sur papier pointé\n * Ref 6G24-4\n * @author Jean-Claude Lhote\n * Publié le 18/12/2021\n */\nexport default function CompleterParSymetrie6e () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.sup3 = true\n  this.nouvelleVersion = function () {\n    this.sup = contraindreValeur(1, 5, this.sup, 1)\n    this.sup2 = contraindreValeur(1, 4, this.sup2, 1)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    const couples = []\n    const pointsCliquables = [[]]\n    let pointsPossibles\n    const objetsEnonce = []\n    const objetsCorrection = []\n    const pointsChoisis = []\n    const pointsAffiches = []\n    const pointsEnPlusCorr = []\n    const pointsNonSolution = []\n    const pointsSolution = []\n    const pointsCliques = []\n    const changeAxe = []\n    const typeDePapier = ['quad', 'quad', 'hexa', 'equi'] // l'élément 0 sera changé aléatoirement pour correspondre au type mélange (this.sup2 % 4)\n    for (let i = 0, cpt = 0, papier, image, d, j, trouve, texte, texteCorr, nbCouplesComplets; i < this.nbQuestions && cpt < 50;) {\n      typeDePapier[0] = typeDePapier[1 + i % 3]\n      // on remet à vide tous les tableaux utilisés pour la question suivante\n      objetsEnonce[i] = []\n      objetsCorrection[i] = []\n      pointsChoisis.length = 0\n      pointsAffiches.length = 0\n      pointsEnPlusCorr.length = 0\n      pointsNonSolution[i] = []\n      pointsSolution[i] = []\n      pointsCliquables[i] = []\n      pointsCliques[i] = []\n      couples.length = 0\n      changeAxe[i] = this.sup3 ? 0 : randint(-2, 2, 0)\n      papier = papierPointe({ xmin: 0, ymin: 0, xmax: 10, ymax: 10, type: typeDePapier[this.sup2 === 4 ? 0 : this.sup2] })\n\n      objetsEnonce[i].push(papier)\n\n      switch (this.sup === 5 ? randint(1, 4) : this.sup) {\n        case 1:\n          if (typeDePapier[(this.sup2 === 5 ? 0 : this.sup2)] === 'quad') {\n            d = droite(point(5 + changeAxe[i] / 2, 0), point(5 + changeAxe[i] / 2, 10))\n          } else {\n            d = droite(point(4.33 + 0.866 * changeAxe[i], 0), point(4.33 + 0.866 * changeAxe[i], 10))\n          }\n          break\n        case 2:\n          if (typeDePapier[(this.sup2 === 4 ? 0 : this.sup2)] === 'quad') {\n            d = droite(point(0, 5 + changeAxe[i] / 2), point(10, 5 + changeAxe[i] / 2))\n          } else {\n            d = droite(point(0, 5.5 + changeAxe[i] / 2), point(10, 5.5 + changeAxe[i] / 2))\n          }\n          break\n        case 3:\n          if (typeDePapier[(this.sup2 === 4 ? 0 : this.sup2)] === 'quad') {\n            d = droite(point(0, 1 + changeAxe[i]), point(9 - changeAxe[i], 10))\n          } else {\n            d = droite(point(0, 3 + changeAxe[i]), point(8.66, 8 + changeAxe[i]))\n          }\n          break\n        case 4:\n          if (typeDePapier[(this.sup2 === 4 ? 0 : this.sup2)] === 'quad') {\n            d = droite(point(0, 10 - changeAxe[i]), point(10 - changeAxe[i], 0))\n          } else {\n            d = droite(point(0, 8 + changeAxe[i]), point(8.66, 3 + changeAxe[i]))\n          }\n          break\n      }\n      d.epaisseur = 2\n      d.color = context.isHtml ? 'blue' : 'black'\n      objetsEnonce[i].push(d)\n      pointsPossibles = papier.listeCoords.slice()\n      // on prépare les points cliquables pour la version interactive\n      // over, out et click sont des ojets pour le style css des évènements de la souris, radius, width, color, size, style sont les paramètres possibles pour la trace du point\n      if (this.interactif && context.isHtml) {\n        for (let p = 0; p < papier.listeCoords.length; p++) {\n          pointsCliquables[i].push(pointCliquable(papier.listeCoords[p][0], papier.listeCoords[p][1], { radius: 0.2, color: 'red', width: 2, opacite: 0.7 }))\n        }\n      }\n      while (pointsPossibles.length > 1) { // si il n'en reste qu'un, on ne peut pas trouver de symétrique\n        image = symetrieAxiale(point(pointsPossibles[0][0], pointsPossibles[0][1]), d)\n        j = 1\n        trouve = false\n        while (j < pointsPossibles.length && !trouve) {\n          // si l'image est proche d'un point, c'est qu'on a deux symétriques donc un couple potentiel.\n          if (longueur(image, point(pointsPossibles[j][0], pointsPossibles[j][1])) < 0.5) {\n            trouve = true\n          } else j++\n        }\n        if (trouve) {\n          // on stocke le couple de symétrique en modifiant aléatoirement l'ordre.\n          couples.push(choice([true, false]) ? [pointsPossibles[0], pointsPossibles[j]] : [pointsPossibles[j], pointsPossibles[0]])\n          pointsPossibles.splice(j, 1) // on retire d'abord le points d'indice j\n          pointsPossibles.splice(0, 1) // puis le point d'indice 0\n        } else {\n          pointsPossibles.splice(0, 1) // Le point d'indice 0 n'a pas de symétrique, on le retire\n        }\n      }\n      // la liste des couples est prête, on va pouvoir choisir les points affichés et ceux qu'on n'affiche pas.\n      const nbCouplesChoisis = randint(8, 12)\n      const couplesChoisis = shuffle(couples).splice(0, nbCouplesChoisis)\n      for (let p = 0; p < couplesChoisis.length; p++) {\n        pointsChoisis.push(couplesChoisis[p][0], couplesChoisis[p][1])\n      }\n      nbCouplesComplets = randint(2, 5)\n      for (let p = 0; p < pointsChoisis.length; p += 2) {\n        if (p < nbCouplesComplets) { // On affiche un certains nombre de couples\n          pointsAffiches.push(point(pointsChoisis[p][0], pointsChoisis[p][1]))\n          pointsAffiches.push(point(pointsChoisis[p + 1][0], pointsChoisis[p + 1][1]))\n        } else { // et on affiche un seul des points pour les couples restants\n          pointsAffiches.push(point(pointsChoisis[p][0], pointsChoisis[p][1]))\n          pointsEnPlusCorr.push(point(pointsChoisis[p + 1][0], pointsChoisis[p + 1][1]))\n        }\n      }\n      for (let p = 0; p < pointsAffiches.length; p++) {\n        objetsEnonce[i].push(tracePoint(pointsAffiches[p]))\n      }\n      for (let p = 0; p < pointsEnPlusCorr.length; p++) {\n        objetsCorrection[i].push(tracePoint(pointsEnPlusCorr[p], 'red'))\n      }\n      for (let p = 0; p < pointsCliquables[i].length; p++) {\n        trouve = false\n        let q = 0\n        while (q < pointsEnPlusCorr.length && !trouve) {\n          if (longueur(pointsEnPlusCorr[q], pointsCliquables[i][p].point) < 0.1) {\n            trouve = true\n            pointsSolution[i].push(pointsCliquables[i][p])\n          } else {\n            q++\n          }\n        }\n        if (!trouve) {\n          pointsNonSolution[i].push(pointsCliquables[i][p])\n        }\n      }\n      texte = context.isAmc\n        ? 'Voici une grille contenant des points et un axe de symétrie.<br>Ajouter un minimum de points afin que la figure soit symétrique par rapport à l\\'axe.<br>Écrire le nombre de points ajoutés dans le cadre. Coder ensuite ce nombre de points.<br>'\n        : 'Voici une grille contenant des points et un axe de symétrie.<br>Ajouter un minimum de points afin que la figure soit symétrique par rapport à l\\'axe.<br>'\n      // On prépare la figure...\n      texte += mathalea2d({ xmin: -1, ymin: -1, xmax: 11, ymax: 11, scale: 0.7 }, ...objetsEnonce[i], ...pointsCliquables[i])\n      if (this.interactif && context.isHtml) {\n        texte += `<div id=\"resultatCheckEx${this.numeroExercice}Q${i}\"></div>`\n      }\n      texteCorr = mathalea2d({ xmin: -1, ymin: -1, xmax: 11, ymax: 11, scale: 0.5, style: 'inline' }, ...objetsEnonce, ...objetsCorrection[i])\n      if (context.isAmc) {\n        this.autoCorrection[i] = {\n          enonce: texte,\n          propositions: [\n            {\n              texte: texteCorr,\n              statut: 1,\n              feedback: '',\n              sanscadre: false\n            }\n          ],\n          reponse: {\n            valeur: [pointsEnPlusCorr.length],\n            param: {\n              digits: 2,\n              signe: false,\n              decimals: 0,\n              vertical: true\n            }\n          }\n        }\n      }\n      if (this.questionJamaisPosee(i, nbCouplesChoisis, nbCouplesComplets, pointsChoisis[0][0], pointsChoisis[0][1])) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    this.correctionInteractive = (i) => {\n      let resultat\n      let aucunMauvaisPointsCliques = true\n      for (const monPoint of pointsNonSolution[i]) {\n        if (monPoint.etat) {\n          aucunMauvaisPointsCliques = false\n          pointsCliques[i].push(tracePoint(monPoint.point, 'red')) // ça c'est pour éventuellement modifier la correction avec les points cliqués par l'utilisateur.\n        }\n        monPoint.stopCliquable()\n      }\n      for (const monPoint of pointsSolution[i]) {\n        if (!monPoint.etat) aucunMauvaisPointsCliques = false\n        else pointsCliques[i].push(tracePoint(monPoint.point, 'red')) // ça c'est pour éventuellement modifier la correction avec les points cliqués par l'utilisateur.\n        monPoint.stopCliquable()\n      }\n      const divFeedback = document.querySelector(`#resultatCheckEx${this.numeroExercice}Q${i}`)\n      for (let j = 0; j < pointsSolution[i].length; j++) {\n        pointsSolution[i][j].stopCliquable()\n      }\n      let etat = true\n      for (let k = 0; k < pointsSolution[i].length; k++) {\n        etat = etat && pointsSolution[i][k]\n      }\n      if (aucunMauvaisPointsCliques && etat) {\n        divFeedback.innerHTML = '😎'\n        resultat = 'OK'\n      } else {\n        divFeedback.innerHTML = '☹️'\n        resultat = 'KO'\n      }\n      // this.listeCorrections[i] = mathalea2d({ xmin: -1, ymin: -1, xmax: 11, ymax: 11, scale: 0.7, style: 'inline' }, ...objetsEnonce[i], ...pointsCliques[i]) + mathalea2d({ xmin: -1, ymin: -1, xmax: 11, ymax: 11, scale: 0.5, style: 'inline' }, ...objetsEnonce, ...objetsCorrection[i])\n      // le contenu est déjà prêt. Il faudra modifier les <svg> à postéreiori...\n      return resultat\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type d\\'axes', 5, '1 : Axe vertical\\n2 : Axe horizontal\\n3 : Axe oblique /\\n4 : Axe oblique \\\\\\n5 : Mélange']\n  this.besoinFormulaire2Numerique = ['Type de papier pointé', 4, '1 : Carrés\\n2 : Hexagones\\n3 : Triangles équilatéraux\\n4 : Mélange']\n  this.besoinFormulaire3CaseACocher = ['Axe centré', true]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { ObjetMathalea2D, point, polygone, tracePoint } from './2d.js'\nimport { context } from './context.js'\n\n/**\n * @author Rémi ANGOT\n * @param {number} x abscisse du point\n * @param {number} y ordonnée du point\n * @param {object} options over, out et click sont des ojets pour le style css des évènements de la souris, radius, width, color, opacite, size, style sont les paramètres possibles pour la trace du point\n */\nfunction PointCliquable (x, y, options) {\n  ObjetMathalea2D.call(this)\n  const A = point(x, y)\n  this.point = A\n  if (!options) options = {}\n  const out = options.out || { opacity: 0 }\n  const over = options.over || { opacity: 0.5 }\n  const click = options.click || { opacity: options.opacite || 1 }\n  this.etat = false // Pour récupérer si le point est affiché ou pas\n  this.svg = function (coeff) {\n    let code\n    const trace = tracePoint(A)\n    trace.color = options.color || options.couleur || 'black'\n    trace.epaisseur = options.width || options.epaisseur || 1\n    trace.taille = options.size || options.taille || 3\n    trace.isVisible = false\n    trace.style = options.style || 'x'\n    code = `<g id=\"${this.id}\">\\n`\n    code += trace.svg(coeff) + '\\n'\n    // Le cercle est la zone d'effet pour les évènements\n    // Comme fill est à none, il faut ajouter pointer-events=\"visible\" cf https://www.smashingmagazine.com/2018/05/svg-interaction-pointer-events-property/\n    code += `<circle cx=\"${A.xSVG(coeff)}\" cy=\"${A.ySVG(coeff)}\" r=\"${(options.radius || options.rayon || 1) * coeff}\" fill=\"none\" pointer-events=\"visible\" />\\n`\n    code += '</g>'\n    return code\n  }\n  const moi = this // Pour utiliser this dans les fonctions\n  const gestionDeLaSouris = () => {\n    document.removeEventListener('exercicesAffiches', gestionDeLaSouris)\n    const groupe = document.getElementById(`${this.id}`)\n    const changeEtatPoint = (etat) => {\n      this.etat = etat\n    }\n    // On initialise avec le style de out\n    if (groupe) {\n      for (const key in out) {\n        groupe.style[key] = out[key]\n      }\n      groupe.addEventListener('mouseover', mouseOverEffect)\n      groupe.addEventListener('mouseout', mouseOutEffect)\n      groupe.addEventListener('click', mouseClick)\n      function mouseOverEffect () {\n        for (const key in over) {\n          this.style[key] = over[key]\n        }\n      }\n      function mouseOutEffect () {\n        for (const key in out) {\n          this.style[key] = out[key]\n        }\n      }\n      function mouseClick () {\n        if (moi.etat) {\n          // On désactive le point\n          groupe.addEventListener('mouseover', mouseOverEffect)\n          groupe.addEventListener('mouseout', mouseOutEffect)\n          // On lui remet le style de out\n          for (const key in out) {\n            this.style[key] = out[key]\n          }\n          moi.etat = false\n          changeEtatPoint(false)\n        } else {\n          // On désactive les listeners\n          groupe.removeEventListener('mouseover', mouseOverEffect)\n          groupe.removeEventListener('mouseout', mouseOutEffect)\n          // On applique le style de click\n          for (const key in click) {\n            this.style[key] = click[key]\n          }\n          moi.etat = true\n        }\n      }\n    }\n  }\n  document.addEventListener('exercicesAffiches', gestionDeLaSouris)\n  this.stopCliquable = () => {\n    const groupe = document.getElementById(`${this.id}`)\n    // On retire tous les listener en le remplaçant par un clone\n    groupe.replaceWith(groupe.cloneNode(true))\n  }\n}\n\nexport function pointCliquable (...args) {\n  return new PointCliquable(...args)\n}\n\n/**\n * @author Rémi ANGOT\n * @param {number} x abscisse du point\n * @param {number} y ordonnée du point\n * @param {object} options over, out et click sont des ojets pour le style css des évènements de la souris, radius, width, color, size, style sont les paramètres possibles pour la trace du point\n */\nfunction RectangleCliquable (x1, y1, x2, y2, options) {\n  ObjetMathalea2D.call(this)\n  const A = point(x1, y1)\n  const B = point(x2, y1)\n  const C = point(x2, y2)\n  const D = point(x1, y2)\n  const rectangle = polygone(A, B, C, D)\n  const bordure = polygone(A, B, C, D)\n  if (!options) options = {}\n  const out = options.out || { opacity: 0 }\n  const over = options.over || { opacity: 0.2 }\n  const click = options.click || { opacity: 1 }\n  const couleur = options.couleur || '#f15929'\n  const cliquable = (options.cliquable !== undefined) ? options.cliquable : true\n  rectangle.hachures = options.hachures || false\n  rectangle.epaisseurDesHachures = options.epaisseurDesHachures || 4\n  bordure.epaisseur = options.epaisseur || 1\n  this.etat = options.etat || false // Pour récupérer si le rectangle est cliqué ou pas\n  this.svg = function (coeff) {\n    let code\n    rectangle.couleurDeRemplissage = options.color || options.couleur || options.couleurDeRemplissage || '#f15929'\n    rectangle.epaisseur = 0\n    rectangle.isVisible = false\n    code = `<g id=\"rectangle${this.id}\">\\n`\n    code += rectangle.svg(coeff) + '\\n'\n    code += '</g>'\n    code += bordure.svg(coeff)\n    return code\n  }\n  this.tikz = (coeff) => {\n    if (this.etat) bordure.couleurDeRemplissage = couleur\n    bordure.hachures = rectangle.hachures\n    return bordure.tikz(coeff)\n  }\n  const moi = this // Pour utiliser this dans les fonctions\n  const gestionDeLaSouris = () => {\n    document.removeEventListener('exercicesAffiches', gestionDeLaSouris)\n    const groupe = document.getElementById('rectangle' + this.id)\n    const changeEtatPoint = (etat) => {\n      this.etat = etat\n    }\n    if (groupe) {\n      // On initialise avec le style de out ou de click suivant l'état\n      for (const key in out) {\n        groupe.style[key] = (this.etat) ? click[key] : out[key]\n      }\n    }\n    if (groupe && cliquable) {\n      groupe.addEventListener('mouseover', mouseOverEffect)\n      groupe.addEventListener('mouseout', mouseOutEffect)\n      groupe.addEventListener('click', mouseClick)\n      function mouseOverEffect () {\n        for (const key in over) {\n          this.style[key] = over[key]\n        }\n      }\n      function mouseOutEffect () {\n        for (const key in out) {\n          this.style[key] = out[key]\n        }\n      }\n      function mouseClick () {\n        if (moi.etat) {\n          // On désactive le point\n          groupe.addEventListener('mouseover', mouseOverEffect)\n          groupe.addEventListener('mouseout', mouseOutEffect)\n          // On lui remet le style de out\n          for (const key in out) {\n            this.style[key] = out[key]\n          }\n          moi.etat = false\n          changeEtatPoint(false)\n        } else {\n          // On désactive les listeners\n          groupe.removeEventListener('mouseover', mouseOverEffect)\n          groupe.removeEventListener('mouseout', mouseOutEffect)\n          // On applique le style de click\n          for (const key in click) {\n            this.style[key] = click[key]\n          }\n          moi.etat = true\n        }\n      }\n    }\n  }\n  document.addEventListener('exercicesAffiches', gestionDeLaSouris)\n  this.stopCliquable = () => {\n    const groupe = document.getElementById(`${this.id}`)\n    // On retire tous les listener en le remplaçant par un clone\n    groupe.replaceWith(groupe.cloneNode(true))\n  }\n}\n\nexport function rectangleCliquable (...args) {\n  return new RectangleCliquable(...args)\n}\n\nexport function fractionCliquable (x, y, unites, denominateur, options) {\n  const objets = []\n  if (!options) options = {}\n  const longueur = options.longueur || 4\n  const ecart = options.ecart || 1\n  const hauteur = options.hauteur || 1\n  const liste1 = options.liste1 || []\n  const liste2 = options.liste2 || []\n  let couleur1 = options.couleur1 || '#f15929'\n  let couleur2 = options.couleur2 || '#1DA962'\n  if (!context.isHtml) {\n    couleur1 = options.couleur1 || 'gray'\n    couleur2 = options.couleur2 || 'lightgray'\n  }\n  const hachures1 = options.hachures1 || false\n  const hachures2 = options.hachures2 || false\n  const couleur = options.couleur || couleur1\n  const cliquable = (options.cliquable !== undefined) ? options.cliquable : true\n  let O\n  for (let i = 0; i < unites; i++) {\n    O = point(x + i * (longueur + ecart), y)\n    for (let j = 0; j < denominateur; j++) {\n      if (liste1.includes(i * denominateur + j + 1)) {\n        objets.push(rectangleCliquable(O.x + j * longueur / denominateur, y, O.x + (j + 1) * longueur / denominateur, y + hauteur,\n          { cliquable, etat: true, couleur: couleur1, hachures: hachures1 }))\n      } else if (liste2.includes(i * denominateur + j + 1)) {\n        objets.push(rectangleCliquable(O.x + j * longueur / denominateur, y, O.x + (j + 1) * longueur / denominateur, y + hauteur,\n          { cliquable, etat: true, couleur: couleur2, hachures: hachures2 }))\n      } else {\n        objets.push(rectangleCliquable(O.x + j * longueur / denominateur, y, O.x + (j + 1) * longueur / denominateur, y + hauteur, { cliquable, couleur, etat: false }))\n      }\n    }\n  }\n  return objets\n}\n"],"names":["titre","dateDePublication","interactifReady","interactifType","amcReady","amcType","CompleterParSymetrie6e","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","sup2","sup3","nouvelleVersion","contraindreValeur","listeQuestions","listeCorrections","autoCorrection","couples","pointsCliquables","pointsPossibles","objetsEnonce","objetsCorrection","pointsChoisis","pointsAffiches","pointsEnPlusCorr","pointsNonSolution","pointsSolution","pointsCliques","changeAxe","typeDePapier","papier","image","d","j","trouve","texte","texteCorr","nbCouplesComplets","i","cpt","length","randint","papierPointe","xmin","ymin","xmax","ymax","type","push","droite","point","epaisseur","color","context","listeCoords","slice","interactif","p","pointCliquable","radius","width","opacite","symetrieAxiale","longueur","choice","splice","nbCouplesChoisis","couplesChoisis","shuffle","tracePoint","q","mathalea2d","scale","numeroExercice","style","enonce","propositions","statut","feedback","sanscadre","reponse","valeur","param","digits","signe","decimals","vertical","questionJamaisPosee","correctionInteractive","resultat","aucunMauvaisPointsCliques","monPoint","etat","stopCliquable","divFeedback","document","querySelector","k","innerHTML","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","args","argsConcatenes","arg","undefined","toString","indexOf","PointCliquable","x","y","options","ObjetMathalea2D","A","out","opacity","over","click","svg","coeff","code","trace","couleur","taille","size","isVisible","id","xSVG","ySVG","rayon","moi","gestionDeLaSouris","removeEventListener","groupe","getElementById","changeEtatPoint","key","mouseOverEffect","mouseOutEffect","mouseClick","addEventListener","replaceWith","cloneNode","RectangleCliquable","x1","y1","x2","y2","B","C","D","rectangle","polygone","bordure","cliquable","hachures","epaisseurDesHachures","couleurDeRemplissage","tikz","rectangleCliquable","fractionCliquable","unites","denominateur","objets","ecart","hauteur","liste1","liste2","couleur1","couleur2","hachures1","hachures2","O","includes"],"sourceRoot":""}