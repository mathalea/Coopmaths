{"version":3,"file":"js/6367.a2d583859bea1dbad54d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6M23.js","webpack://mathalea/./src/js/exercices/6e/_Exercice_conversions_aires.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import ExerciceConversionsAires from './_Exercice_conversions_aires.js'\nexport const titre = 'Convertir des aires'\n\nexport { amcReady, interactifReady, amcType, interactifType } from './_Exercice_conversions_aires.js'\n/**\n * @author Rémi Angot\n * référence 6M23\n *\n*/\nexport default function Reglages6M23 () {\n  ExerciceConversionsAires.call(this)\n  this.titre = titre\n  this.interactif = false\n  this.sup = 3\n  this.nbColsCorr = 1\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, arrondi, texNombre, texTexte, calcul } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, propositionsQcm, setReponse } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = ['qcm', 'mathLive']\n\n/**\n * Conversions d'aires en utilisant le préfixe pour déterminer la multiplication ou division à faire.\n *\n * Dans la correction, on montre que l'on multiplie ou divisie à 2 reprises par le coefficient donné par le préfixe\n *\n * * 1 : De dam², hm², km² vers m²\n * * 2 : De dm², cm², mm² vers m²\n * * 3 : Conversions en mètres-carrés\n * * 4 : Conversions avec des multiplications ou des divisions\n * * 5 : Conversions avec des ares, des centiares et des hectares\n * * 6 : Un mélange de toutes les conversions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Référence 6M23\n */\nexport default function ExerciceConversionsAires (niveau = 1) {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = niveau // Niveau de difficulté de l'exercice\n  this.sup2 = false // Avec des nombres décimaux ou pas\n  this.sup3 = 1 // interactifType Qcm\n  this.titre = \"Conversions d'aires\"\n  this.consigne = 'Compléter :'\n  this.spacing = 2\n  this.nbColsCorr = 1\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n\n  this.nouvelleVersion = function () {\n    this.interactifType = parseInt(this.sup3) === 2 ? 'mathLive' : 'qcm'\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let prefixeMulti = [\n      [' da', '\\\\times10\\\\times10', 100],\n      [' h', '\\\\times100\\\\times100', 10000],\n      [' k', '\\\\times1~000\\\\times1~000', 1000000]\n    ]\n    let prefixeDiv = [\n      [' d', '\\\\div10\\\\div10', 100],\n      [' c', '\\\\div100\\\\div100', 10000],\n      [' m', '\\\\div1~000\\\\div1~000', 1000000]\n    ]\n    const unite = 'm'\n    const listeUnite = ['mm', 'cm', 'dm', 'm', 'dam', 'hm', 'km']\n    const listeDeK = combinaisonListes([0, 1, 2], this.nbQuestions)\n    for (let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      resultat2,\n      resultat3,\n      resultat4,\n      resultat5,\n      typesDeQuestions,\n      texte,\n      texteCorr,\n      cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 6) {\n        typesDeQuestions = this.sup\n      } else {\n        typesDeQuestions = randint(1, 5)\n      }\n      // k = randint(0,2); // Choix du préfixe\n      k = listeDeK[i]\n      if (typesDeQuestions === 1) {\n        // niveau 1\n        div = false // Il n'y aura pas de division\n      } else if (typesDeQuestions === 2) {\n        // niveau 2\n        div = true // Avec des divisions\n      } else if (typesDeQuestions === 3) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions === 4) {\n        div = choice([true, false]) // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2)\n        ])\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9)\n        ])\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n        prefixeMulti = [\n          [' da', '\\\\times10\\\\times10', 100],\n          [' h', '\\\\times100\\\\times100', 10000],\n          [' k', '\\\\times1~000\\\\times1~000', 1000000]\n        ] // On réinitialise cette liste qui a pu être modifiée dans le cas des ares\n        resultat = calcul(a * prefixeMulti[k][2]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^2' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0] + unite) +\n          '^2' +\n          ' =  ' +\n          texNombre(a) +\n          prefixeMulti[k][1] +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      } else if (div && typesDeQuestions < 4) {\n        prefixeDiv = [\n          [' d', '\\\\div10\\\\div10', 100],\n          [' c', '\\\\div100\\\\div100', 10000],\n          [' m', '\\\\div1~000\\\\div1~000', 1000000]\n        ]\n        k = randint(0, 1) // Pas de conversions de mm^2 en m^2 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = calcul(a / prefixeDiv[k][2]).toString() // Attention aux notations scientifiques pour 10e-8\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^2' +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeDiv[k][0] + unite) +\n          '^2' +\n          ' =  ' +\n          texNombre(a) +\n          prefixeDiv[k][1] +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      } else if (typesDeQuestions === 4) {\n        const unite1 = randint(0, 3)\n        let ecart = randint(1, 2) // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1\n        }\n        const unite2 = unite1 + ecart\n        if (randint(0, 1) > 0) {\n          resultat = calcul(a * Math.pow(10, 2 * ecart))\n          resultat2 = calcul(resultat / 10)\n          resultat3 = calcul(resultat * 10)\n          resultat4 = calcul(resultat * 100)\n          resultat5 = calcul(resultat / 100)\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\times' +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            '$'\n        } else {\n          resultat = calcul(a / Math.pow(10, 2 * ecart))\n          resultat2 = calcul(a / Math.pow(10, ecart))\n          resultat3 = calcul(a / Math.pow(10, 2 * ecart + 1))\n          resultat4 = calcul(a / Math.pow(10, -2 * ecart))\n          texte =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' = \\\\dotfill ' +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            '$'\n          texteCorr =\n            '$ ' +\n            texNombre(a) +\n            texTexte(listeUnite[unite1]) +\n            '^2' +\n            ' =  ' +\n            texNombre(a) +\n            '\\\\div' +\n            texNombre(Math.pow(10, 2 * ecart)) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            ' = ' +\n            texNombre(resultat) +\n            texTexte(listeUnite[unite2]) +\n            '^2' +\n            '$'\n        }\n      } else if (typesDeQuestions === 5) {\n        // Pour typesDeQuestions==5\n        prefixeMulti = [\n          ['ha', 10000],\n          ['a', 100]\n        ]\n        k = randint(0, 1)\n        resultat = calcul(a * prefixeMulti[k][1]).toString() // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        resultat2 = calcul(resultat / 10)\n        resultat3 = calcul(resultat * 10)\n        resultat4 = calcul(resultat * 100)\n        resultat5 = calcul(resultat / 100)\n        texte =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0]) +\n          ' = \\\\dotfill ' +\n          texTexte(unite) +\n          '^2' +\n          '$'\n        texteCorr =\n          '$ ' +\n          texNombre(a) +\n          texTexte(prefixeMulti[k][0]) +\n          ' =  ' +\n          texNombre(a) +\n          '\\\\times' +\n          texNombre(prefixeMulti[k][1]) +\n          texTexte(unite) +\n          '^2' +\n          ' = ' +\n          texNombre(resultat) +\n          texTexte(unite) +\n          '^2' +\n          '$'\n      }\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [{\n        texte: `$${texNombre(resultat)}$`,\n        statut: true\n      },\n      {\n        texte: `$${texNombre(resultat2)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat3)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat4)}$`,\n        statut: false\n      },\n      {\n        texte: `$${texNombre(resultat5)}$`,\n        statut: false\n      }\n      ]\n      if (this.interactif && this.interactifType === 'qcm') {\n        texte += propositionsQcm(this, i).texte\n      } else {\n        texte += ajouteChampTexteMathLive(this, i)\n        setReponse(this, i, parseFloat(resultat))\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace('= \\\\dotfill', '\\\\text{ en }')\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            '\\\\dotfill',\n            '................................................'\n          )\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    6,\n    \"1 : Conversions en m² avec des multiplications\\n2 : Conversions en m² avec des divisions\\n3 : Conversions en m² avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions\\n5 : Conversions d'hectares et ares en m² \\n6 : Mélange\"\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec des nombres décimaux']\n  if (context.isHtml && !context.isDiaporama) this.besoinFormulaire3Numerique = ['Exercice interactif', 2, '1 : QCM\\n2 : Numérique'] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Reglages6M23","ExerciceConversionsAires","this","interactif","sup","nbColsCorr","amcReady","amcType","interactifReady","interactifType","niveau","Exercice","sup2","sup3","consigne","spacing","nouvelleVersion","parseInt","listeQuestions","listeCorrections","prefixeMulti","prefixeDiv","unite","listeUnite","listeDeK","combinaisonListes","nbQuestions","a","k","div","resultat","resultat2","resultat3","resultat4","resultat5","typesDeQuestions","texte","texteCorr","i","cpt","autoCorrection","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","ecart","unite2","Math","pow","enonce","propositions","statut","propositionsQcm","ajouteChampTexteMathLive","setReponse","parseFloat","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}