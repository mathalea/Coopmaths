/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_3e_3G32-2_js"],{

/***/ "./src/js/exercices/3e/3G32-2.js":
/*!***************************************!*\
  !*** ./src/js/exercices/3e/3G32-2.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Calculs_trigonometriques2)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n/* harmony import */ var _modules_2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../modules/2d.js */ \"./src/js/modules/2d.js\");\n/* harmony import */ var _modules_3d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../modules/3d.js */ \"./src/js/modules/3d.js\");\n\n\n\n\nconst titre = 'Calculer la hauteur d’un objet vu sous un angle donné'\n\n/**\n * propose de mesurer la hauteur d'un objet en utilisant l'angle sous lequel on voit l'objet et la distance à l'objet. \n * @Auteur Jean-Claude Lhote\n * Référence 3G32-2\n*/\nfunction Calculs_trigonometriques2() {\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"\";\n  this.nb_cols = 1; // Uniquement pour la sortie LaTeX\n  this.nb_cols_corr = 1; // Uniquement pour la sortie LaTeX\n  this.sup = true; // Niveau de difficulté à ne définir que si on peut le modifier avec un formulaire en paramètre\n  this.tailleDiaporama = 100; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = \"\" // Id YouTube ou url\n  this.nb_questions = 1\n  this.spacing_corr=2\n  this.spacing=2\n\n  this.nouvelle_version = function () {\n    this.liste_questions = []; // Liste de questions\n    this.liste_corrections = []; // Liste de questions corrigées\n    let objet = [['arbre', 'un', ''], ['immeuble', 'un', ''], ['éolienne', 'une', 'te'], ['coline', 'une', 'te']]\n    let distance, hauteur,alfa,baita, beta, alpha, teta, taille, index, A, B, O, H, S, C,M,R,R2,Axe,normalV,normalH,P,HP,Sph,OP,PoleNord,PoleSud, objets = [], p\n    if (sortie_html) {\n      alfa='α'\n      baita='β'\n    }\n    else {\n      alfa='\\\\alpha'\n      baita='\\\\beta'\n    }\n\n    for (let i = 0, texte, texte_corr,j, cpt = 0; i < this.nb_questions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n\n        objets=[]\n          distance = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(5, 300)\n          hauteur = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(150, 190) / 100)\n          beta = Math.atan(hauteur / distance)\n          alpha = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(10, 50)\n          teta = alpha * Math.PI / 180 - beta\n          taille = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.arrondi)(hauteur + distance * Math.tan(teta), 1)\n          if (taille < 20) index = 0\n          else if (taille < 50) index = 1\n          else if (taille < 100) index = 2\n          else index = 3\n          A = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.point)(0, 0, 'A')\n          B = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointAdistance)(A, 12, 0, 'B')\n          O = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointAdistance)(A, 3, 90, 'O')\n          H = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointAdistance)(B, 3, 90, 'H')\n          S = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.pointAdistance)(B, 9, 90, 'S')\n          p = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.polygoneAvecNom)(A, B, H, S, O)\n          objets.push(p[1], p[0], (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, B), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.segment)(O, H), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codageAngleDroit)(O, A, B), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codageAngleDroit)(A, B, H), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.codageAngleDroit)(O, H, S))\n          objets.push((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.afficheMesureAngle)(B, O, S, 'black', 3, `${alfa}`), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.afficheMesureAngle)(A, B, O, 'black', 2, `${baita}`), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.afficheMesureAngle)(B, O, H, 'black', 2, `${baita}`))\n          objets.push((0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.texteSurSegment)(`${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(hauteur)} m`, O, A, 'black', -0.5), (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.texteSurSegment)(`${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(distance)} m`, O, H))\n          texte = `Un observateur regarde ${objet[index][1]} ${objet[index][0]} sous un angle de $${alpha}\\\\degree$.<br>`;\n          texte += `Cet${objet[index][2]} ${objet[index][0]} est situé à une distance de $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(distance)}$ m de l'observateur.<br>`\n          texte += `l'oeil de l'observateur est situé à $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(hauteur)}$ m du sol.<br>`\n          if (this.sup) {\n\n            texte += `$O$ représente l'oeil de l'observateur, $[BS]$ représente cet${objet[index][2]} ${objet[index][0]}.<br>`\n\n            texte += `Le schéma ci-dessous n'est pas en vraie grandeur.<br>` + (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: -1, ymin: -1, xmax: 14, ymax: 10, pixelsParCm: 20, scale: 0.5 }, objets);\n            texte += `<br>Calculer d'abord l'angle $${baita}$.<br>`\n            texte += `En déduire la mesure de l'angle $\\\\widehat{HOS}$.<br>`\n            texte += `Calculer alors la longueur $HS$.<br>`\n          }\n          texte += `Calculer la hauteur de cet${objet[index][2]} ${objet[index][0]} arrondie au mètre près.<br>`\n\n          texte_corr = (0,_modules_2d_js__WEBPACK_IMPORTED_MODULE_2__.mathalea2d)({ xmin: -1, ymin: -1, xmax: 14, ymax: 10, pixelsParCm: 20, scale: 0.5 }, objets)\n          texte_corr += `<br>Dans le triangle $OHB$ rectangle en $H$, $\\\\tan(${baita})=\\\\dfrac{HB}{OH}$.<br>D'où $${baita}=\\\\arctan(\\\\dfrac{${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(hauteur)}}{${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(distance)}})\\\\approx ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.arrondi_virgule)(beta)}\\\\degree$.<br>`\n          texte_corr += `$\\\\widehat{HOS}=${alfa}-${baita}\\\\approx ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.arrondi_virgule)(alpha - beta)}$.<br>`\n          texte_corr += `$HS=OH\\\\times \\\\tan(\\\\widehat{HOS})\\\\approx ${distance}\\\\times \\\\tan(${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.arrondi_virgule)(alpha - beta)})\\\\approx ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(taille - hauteur)}$ m.<br>`\n          texte_corr += `$BS=BH+HS=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(hauteur)}+${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(taille - hauteur)}=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(taille)}$ m.<br>`\n          texte_corr += `Cet${objet[index][2]} ${objet[index][0]} mesure $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(Math.round(taille))}$ m de hauteur.`;\n\n      if (this.liste_questions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.liste_questions.push(texte);\n        this.liste_corrections.push(texte_corr);\n        i++;\n      }\n      cpt++;\n    }\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n  };\n  this.besoin_formulaire_case_a_cocher = ['Afficher un schéma et des questions intermédiaires'];\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/3e/3G32-2.js?");

/***/ })

}]);