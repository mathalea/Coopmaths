{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C10-2.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ExerciceTablesMultiplicationsEtMultiplesDe10","tablesParDefaut","Exercice","this","sup","consigne","spacing","tailleDiaporama","nouvelleVersion","autoCorrection","tables","listeQuestions","listeCorrections","split","couples","creerCouples","nbQuestions","a","b","k1","k2","texte","texteCorr","melange","i","choice","randint","c","texNombre","enonce","propositions","texNombre2","statut","feedback","calcul","options","ordered","lastChoice","interactif","propositionsQcm","push","listeQuestionsToContenu","context","besoinFormulaireTexte","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","nbColsCorr","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","message","type","querySelectorAll","uicheck","exerciceQcm","espace","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","valeurs","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","reponses","Array","isArray","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/7638.ed271030688b6398e5bd.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, creerCouples, randint, choice, texNombre, texNombre2, calcul } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 //type de question AMC \nexport const interactifReady = true\n\nexport const titre = 'Tables de multiplications et multiples de 10'\n\n/**\n * Les 2 facteurs peuvent terminer par aucun, 1, 2 ou 3 zéros\n * @author Rémi Angot\n* Référence 6C10-2\n */\nexport default function ExerciceTablesMultiplicationsEtMultiplesDe10 (\n  tablesParDefaut = '2-3-4-5-6-7-8-9'\n) {\n  // Multiplier deux nombres\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = tablesParDefaut\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.titre = titre\n  this.consigne = 'Calculer'\n  this.spacing = 2\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    let tables = []\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) {\n      // Si aucune table n'est saisie\n      this.sup = '2-3-4-5-6-7-8-9'\n    }\n    if (typeof this.sup === 'number') {\n      // Si c'est un nombre c'est qu'il y a qu'une seule table\n      tables[0] = this.sup\n    } else {\n      tables = this.sup.split('-') // Sinon on crée un tableau à partir des valeurs séparées par des ;\n    }\n    const couples = creerCouples(\n      tables,\n      [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      this.nbQuestions\n    ) // Liste tous les couples possibles (2,3)≠(3,2)\n    for (\n      let i = 0, a, b, k1, k2, texte, texteCorr, melange;\n      i < this.nbQuestions;\n      i++\n    ) {\n      this.autoCorrection[i] = {}\n      a = couples[i][0]\n      b = couples[i][1]\n      if (a > 1) {\n        k1 = choice([1, 10, 100, 1000])\n      } else {\n        k1 = choice([10, 100, 1000])\n      }\n      k2 = choice([1, 10, 100, 1000])\n      a = k1 * a\n      b = k2 * b\n      melange = randint(0, 1)\n      if (melange === 1) {\n        // échange a et b pour que les multiplications ne soient pas toujours dans le même ordre (surtout lorsque tables n'a qu'un seul élément)\n        const c = a\n        a = b\n        b = c\n      }\n      texte =\n        '$ ' + texNombre(a) + ' \\\\times ' + texNombre(b) + ' = \\\\dotfill $'\n      texteCorr =\n        '$ ' +\n        texNombre(a) +\n        ' \\\\times ' +\n        texNombre(b) +\n        ' = ' +\n        texNombre(a * b) +\n        ' $'\n\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: `$${texNombre2(a * b)}$`,\n          statut: true,\n          feedback: 'Correct !'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b / 10))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b * 10))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b / 100))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        },\n        {\n          texte: `$${texNombre2(calcul(a * b * 100))}$`,\n          statut: false,\n          feedback: 'Compte le nombre de zéros dans chaque facteur'\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: false,\n        lastChoice: 5\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      this.listeQuestions.push(texte)\n      this.listeCorrections.push(texteCorr)\n    }\n    listeQuestionsToContenu(this)\n    if (context.isAmc) {\n      \n    }\n  }\n  this.besoinFormulaireTexte = [\n    'Choix des tables',\n    'Nombres séparés par des tirets'\n  ] // Texte, tooltip\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1 && exercice.autoCorrection[i].propositions[indiceFeedback].feedback) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.', ',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true, indice } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}${indice || ''}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {array || number} a\n */\nexport function setReponse (exercice, i, valeurs, { digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0 } = {}) {\n  let reponses = []\n  if (!Array.isArray(valeurs)) {\n    reponses = [valeurs]\n  } else {\n    reponses = valeurs\n  }\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n  for (const reponse of reponses) {\n    exercice.autoCorrection[i].reponse.valeur = reponse\n  }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (const prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n/**\n * Fonctions pour gérer les messages utilisateur (feedback erreur|warning ou messages positifs)\n * @module\n */\n\n/**\n * Les types possibles\n * @type {string[]}\n */\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} feedback.message\n * @param {string} [feedback.type=error]\n * @param {string} [feedback.titre]\n * @return {HTMLElement} L'élément du feedback (déjà ajouté dans le container)\n */\nexport function addFeedback (container, { message, type = 'error', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  if (!message) throw Error('Message obligatoire pour tout retour utilisateur')\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}