{"version":3,"file":"js/60691.42b04ae3990a56dacb1b.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2F31-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, choice, randint, calcul, texNombrec, miseEnEvidence, texFraction } from '../../modules/outils.js'\nexport const titre = 'Utiliser les variations des fonctions de référence pour comparer des images'\nexport const dateDePublication = '07/01/2022'\n/**\n * Description didactique de l'exercice\n * @author Gilles Mora\n * Référence\n*/\nfunction ecritureParentheseSiNegatif (a, maximumFractionDigits = 15) {\n  const result = Intl.NumberFormat('fr-FR', { maximumFractionDigits: maximumFractionDigits }).format(a).replace(',', '{,}')\n  return a < 0 ? `(${result})` : result\n}\nexport default function ComparerAvecFctRef () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 2\n  // this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1\n  this.spacingCorr = 2\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typeDeQuestionsDisponibles\n    if (this.sup === 1) {\n      typeDeQuestionsDisponibles = ['carré']\n    } else if (this.sup === 2) {\n      typeDeQuestionsDisponibles = ['inverse']\n    } else if (this.sup === 3) {\n      typeDeQuestionsDisponibles = ['cube']\n    } else if (this.sup === 4) {\n      typeDeQuestionsDisponibles = ['racine carrée']\n    } else if (this.sup === 5) {\n      typeDeQuestionsDisponibles = ['carré', 'carré', 'inverse', 'cube', 'racine carrée']\n    }\n    const listeFractions1 = [[1, 2], [2, 3], [3, 4], [2, 5], [4, 5],\n      [5, 6], [2, 7], [4, 7], [6, 7], [3, 8], [7, 8],\n      [2, 9], [5, 9], [8, 9], [1, 11], [3, 11], [5, 11], [7, 11], [9, 11], [10, 11], [3, 13], [7, 13]]\n    const listeFractions2 = [[1, 3], [1, 4], [1, 5], [3, 5],\n      [1, 6], [1, 7], [3, 7], [5, 7], [1, 8], [5, 8],\n      [1, 9], [4, 9], [7, 9], [2, 11], [4, 11], [6, 11], [8, 11], [9, 11], [1, 13], [5, 13]]\n    const listeTypeQuestions = combinaisonListes(typeDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, a, b, N, texte, texteCorr, fraction1 = [], fraction2 = [], n1, d1, n2, d2, d3, n3, n4, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'carré':\n          N = randint(1, 3)\n          if (N === 1) {\n            a = calcul(randint(0, 5) + randint(5, 9) / 10 + randint(5, 9) / 100 + randint(0, 2) / 1000)\n            b = calcul(a + (2 * randint(1, 9) / 1000) * choice([1, -1]))\n            texte = `En utilisant le sens de variation d'une fonction de référence, comparer $${texNombrec(a)}^2$ et $${texNombrec(b)}^2$.`\n            texteCorr = `On doit comparer les carrés de deux nombres. On utilise donc la fonction carré.<br>\n            La fonction carré étant strictement croissante sur $[0;+\\\\infty[$, elle conserve l'ordre. Cela signifie que deux nombres positifs sont rangés dans le même ordre que leurs carrés.   <br>\n            Autrement dit, si $a$ et $b$ sont deux nombres  positifs et si $a < b$, alors $a^2 < b^2$.`\n\n            if (a < b) {\n              texteCorr += `<br>Comme $${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}$, \n          alors  $${texNombrec(a)}^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}^2$.`\n            } else {\n              texteCorr += `<br>Comme $${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}$, \n          alors  $${texNombrec(b)}^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}^2$.`\n            }\n          }\n          if (N === 2) {\n            fraction1 = choice(listeFractions1)\n            fraction2 = choice(listeFractions2)\n            n1 = fraction1[0]\n            d1 = fraction1[1]\n            n2 = fraction2[0]\n            d2 = fraction2[1]\n            d3 = calcul(d1 * d2)\n            n3 = calcul(n1 * d2)\n            n4 = calcul(n2 * d1)\n            texte = `En utilisant le sens de variation d'une fonction de référence, comparer $\\\\left(${texFraction(n1, d1)}\\\\right)^2$ et $\\\\left(${texFraction(n2, d2)}\\\\right)^2$.`\n            texteCorr = `On doit comparer les carrés de deux nombres. On utilise donc la fonction carré.<br>\n            La fonction carré étant strictement croissante sur $[0;+\\\\infty[$, elle conserve l'ordre. Cela signifie que deux nombres positifs sont rangés dans le même ordre que leurs carrés.<br>\n            Autrement dit, si $a$ et $b$ sont deux nombres  positifs et si $a < b$, alors $a^2 < b^2$.`\n            if (n1 === n2) {\n              texteCorr += `<br>On commence par comparer les fractions $${texFraction(n1, d1)}$ et $${texFraction(n2, d2)}$. <br>\n            Les fractions ont le même numérateur. La plus grande est celle qui a le plus petit dénominateur. <br>\n            `\n              if (d1 < d2) {\n                texteCorr += `On a $${d1}<${d2}$, donc $${texFraction(n2, d2)}<${texFraction(n1, d1)}$.<br>\n                <br>Comme $${texFraction(n2, d2)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n1, d1)}$, alors $\\\\left(${texFraction(n2, d2)}\\\\right)^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\left(${texFraction(n1, d1)}\\\\right)^2$`\n              } else {\n                texteCorr += `On a $${d2}<${d1}$, donc $${texFraction(n1, d1)}<${texFraction(n2, d2)}$.<br>\n                <br> Comme,  $${texFraction(n1, d1)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n2, d2)}$, alors $\\\\left(${texFraction(n1, d1)}\\\\right)^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\left(${texFraction(n2, d2)}\\\\right)^2$`\n              }\n            }\n            if (d1 === d2) {\n              texteCorr += `<br>On commence par comparer les fractions $${texFraction(n1, d1)}$ et $${texFraction(n2, d2)}$. <br>\n            Les fractions ont le même dénomérateur. La plus grande est celle qui a le plus grand numérateur. <br>\n            `\n              if (n2 < n1) {\n                texteCorr += `On a $${n2}<${n1}$, donc $${texFraction(n2, d2)}<${texFraction(n1, d1)}$.<br>\n                <br>Comme $${texFraction(n2, d2)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n1, d1)}$, alors $\\\\left(${texFraction(n2, d2)}\\\\right)^2${miseEnEvidence('<', 'blue')}\\\\left(${texFraction(n1, d1)}\\\\right)^2$`\n              } else {\n                texteCorr += `On a $${n1}<${n2}$, donc $${texFraction(n1, d1)}<${texFraction(n2, d2)}$.<br>\n                <br>Comme,  $${texFraction(n1, d1)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n2, d2)}$, alors $\\\\left(${texFraction(n1, d1)}\\\\right)^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\left(${texFraction(n2, d2)}\\\\right)^2$`\n              }\n            }\n            if (n1 !== n2 && d1 !== d2) {\n              texteCorr += `<br>On commence par comparer les fractions $${texFraction(n1, d1)}$ et $${texFraction(n2, d2)}$. <br>\n          Pour cela on les met au même dénominateur : $${texFraction(n1, d1)}= ${texFraction(n3, d3)}$ et $${texFraction(n2, d2)}= ${texFraction(n4, d3)}$<br>\n          `\n              if (n3 < n4) {\n                texteCorr += `On a $${n3}<${n4}$, donc $${texFraction(n3, d3)}<${texFraction(n4, d3)}$, soit $${texFraction(n1, d1)}<${texFraction(n2, d2)}$.<br>\n                <br>Comme $${texFraction(n1, d1)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n2, d2)}$, alors $\\\\left(${texFraction(n1, d1)}\\\\right)^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\left(${texFraction(n2, d2)}\\\\right)^2$`\n              } else {\n                texteCorr += `On a $${n4}<${n3}$, donc $${texFraction(n4, d3)}<${texFraction(n3, d3)}$ , soit $${texFraction(n2, d2)}<${texFraction(n1, d1)}$.<br>\n                <br>Comme,  $${texFraction(n2, d2)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texFraction(n1, d1)}$, alors $\\\\left(${texFraction(n2, d2)}\\\\right)^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\left(${texFraction(n1, d1)}\\\\right)^2$`\n              }\n            }\n          }\n\n          if (N === 3) {\n            a = calcul((randint(0, 5) + randint(5, 9) / 10 + randint(5, 9) / 100 + randint(0, 2) / 1000) * (-1))\n            b = calcul(a + (2 * randint(1, 9) / 1000) * choice([1, -1]))\n            texte = `En utilisant le sens de variation d'une fonction de référence, comparer $(${texNombrec(a)})^2$ et $(${texNombrec(b)})^2$.`\n            texteCorr = `On doit comparer les carrés de deux nombres. On utilise donc la fonction carré.<br>\n            La fonction carré étant strictement décroissante sur $]-\\\\infty;0]$, elle change l'ordre. <br>\n            Cela signifie que deux nombres négatifs sont rangés dans l'ordre inverse de leurs carrés.<br>\n            Autrement dit, si $a$ et $b$ sont deux nombres  négatifs et si $a < b$, alors $a^2 > b^2$.`\n\n            if (a < b) { texteCorr += `<br>Comme $${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}$, alors  $(${texNombrec(a)})^2${miseEnEvidence('\\\\boldsymbol{>}', 'blue')}(${texNombrec(b)})^2$` } else { texteCorr += `<br>Comme $${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}$, alors  $(${texNombrec(b)})^2${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}(${texNombrec(a)})^2$` }\n          }\n          break\n        case 'inverse':\n          N = randint(1, 2)\n          if (N === 1) {\n            a = calcul(randint(1, 9) + randint(5, 9) / 10)\n            b = calcul(a + (randint(1, 9) / 10) * choice([1, -1]))\n            texte = `En utilisant le sens de variation d'une fonction de référence, comparer $\\\\dfrac{1}{${texNombrec(a)}}$ et $\\\\dfrac{1}{${texNombrec(b)}}$.`\n            texteCorr = `On doit comparer les inverses de deux nombres. On utilise donc la fonction inverse.<br>\n              La fonction inverse étant strictement décroissante sur $]0;+\\\\infty[$, elle change l'ordre. \n              Cela signifie que deux nombres strictement positifs  sont rangés dans l'ordre inverse de leurs inverses.<br>\n              Autrement dit, si $a$ et $b$ sont deux nombres strictement positifs et si $a < b$, alors $\\\\dfrac{1}{a} > \\\\dfrac{1}{b}$.<br>`\n\n            if (a < b) {\n              texteCorr += `Comme $${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}$, alors  $\\\\dfrac{1}{${texNombrec(a)}}${miseEnEvidence('\\\\boldsymbol{>}', 'blue')}\\\\dfrac{1}{${texNombrec(b)}}$`\n            } else { texteCorr += `Comme $${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}$, alors  $\\\\dfrac{1}{${texNombrec(b)}}${miseEnEvidence('\\\\boldsymbol{>}', 'blue')}\\\\dfrac{1}{${texNombrec(a)}}$` }\n          }\n          if (N === 2) {\n            a = calcul(randint(1, 9) + randint(5, 9) / 10)\n            b = calcul(a + (randint(1, 9) / 10) * choice([1, -1]))\n            texte = `En utilisant le sens de variation d'une fonction de référence, comparer $-\\\\dfrac{1}{${texNombrec(a)}}$ et $-\\\\dfrac{1}{${texNombrec(b)}}$.`\n            texteCorr = `On doit comparer $-\\\\dfrac{1}{${texNombrec(a)}}$ et $-\\\\dfrac{1}{${texNombrec(b)}}$ soit $\\\\dfrac{1}{-${texNombrec(a)}}$ et $\\\\dfrac{1}{-${texNombrec(b)}}$, c'est-à-dire \n                les inverses de deux nombres (négatifs). On utilise donc la fonction inverse.<br>\n                La fonction inverse étant strictement décroissante sur $]-\\\\infty;0[$, elle change l'ordre. \n                Cela signifie que deux nombres strictement négatifs  sont rangés dans l'ordre inverse de leurs inverses.<br>\n                Autrement dit, si $a$ et $b$ sont deux nombres strictement négatifs et si $a < b$, alors $\\\\dfrac{1}{a} > \\\\dfrac{1}{b}$.<br>`\n\n            if (a > b) {\n              texteCorr += ` Comme $-${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}-${texNombrec(b)}$, alors  $\\\\dfrac{1}{-${texNombrec(a)}}${miseEnEvidence('\\\\boldsymbol{>}', 'blue')}\\\\dfrac{1}{-${texNombrec(b)}}$`\n            } else { texteCorr += `Comme $-${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}-${texNombrec(a)}$, alors  $\\\\dfrac{1}{-${texNombrec(b)}}${miseEnEvidence('\\\\boldsymbol{>}', 'blue')}\\\\dfrac{1}{-${texNombrec(a)}}$` }\n          }\n          break\n\n        case 'cube':\n          a = calcul(randint(-10, 10) + (randint(-9, 9, 0) / 10) * choice([-1, 1]))\n          b = calcul((a + randint(1, 9) / 10) * choice([-1, 1]))\n          texte = `En utilisant le sens de variation d'une fonction de référence, comparer $${ecritureParentheseSiNegatif(a)}^3$ \n          et $${ecritureParentheseSiNegatif(b)}^3$.`\n          texteCorr = `On doit comparer les cubes de deux nombres. On utilise donc la fonction cube.<br>\n          La fonction cube étant strictement croissante sur $\\\\mathbb{R}$, elle conserve l'ordre. \n          Cela signifie que deux nombres réels  sont rangés dans le même ordre que leurs cubes.<br>\n          Autrement dit, si $a$ et $b$ sont deux nombres réels et si $a < b$, alors $a^3 < b^3$.<br>`\n          if (a < b) { texteCorr += `Comme $${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}$, alors $${ecritureParentheseSiNegatif(a)}^3${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${ecritureParentheseSiNegatif(b)}^3$.` } else { texteCorr += `Comme $${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}$, alors $${ecritureParentheseSiNegatif(b)}^3${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${ecritureParentheseSiNegatif(a)}^3$.` }\n          break\n        case 'racine carrée':\n          a = calcul(randint(0, 10) + (randint(6, 9) / 10))\n          b = calcul((a + (randint(1, 5, 0) / 10) * choice([-1, 1])))\n          texte = `En utilisant le sens de variation d'une fonction de référence, comparer $\\\\sqrt{${texNombrec(a)}}$  et $\\\\sqrt{${texNombrec(b)}}$.`\n          texteCorr = `On doit comparer les racines carrées de deux nombres. On utilise donc la fonction racine carrée.<br>\n          La fonction racine carrée étant strictement croissante sur $[0;+\\\\infty[$, elle conserve l'ordre. \n          Cela signifie que deux nombres réels positifs sont rangés dans le même ordre que leurs racines carrées.<br>\n          Autrement dit, si $a$ et $b$ sont deux nombres réels positifs et si $a < b$, alors $\\\\sqrt{a} < \\\\sqrt{b}$.<br>`\n          if (a < b) {\n            texteCorr += ` Comme $${texNombrec(a)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(b)}$, alors \n          $\\\\sqrt{${texNombrec(a)}}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\sqrt{${texNombrec(b)}}$.`\n          } else {\n            texteCorr += ` Comme $${texNombrec(b)}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}${texNombrec(a)}$, \n          alors $\\\\sqrt{${texNombrec(b)}}${miseEnEvidence('\\\\boldsymbol{<}', 'blue')}\\\\sqrt{${texNombrec(a)}}$.`\n          }\n\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Choix des questions', 3, '1 : carré\\n2 : inverse\\n3 : cube\\n4 : racine carrée\\n5 : mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDePublication","ecritureParentheseSiNegatif","a","maximumFractionDigits","result","Intl","NumberFormat","format","replace","ComparerAvecFctRef","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","spacingCorr","tailleDiaporama","video","nouvelleVersion","typeDeQuestionsDisponibles","listeQuestions","listeCorrections","listeFractions1","listeFractions2","listeTypeQuestions","combinaisonListes","b","N","texte","texteCorr","n1","d1","n2","d2","d3","n3","n4","i","fraction1","fraction2","cpt","randint","calcul","choice","texNombrec","miseEnEvidence","texFraction","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}