{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N43.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["amcReady","titre","Criteres_de_divisibilite","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","qcmDisponible","modeQcm","nouvelleVersion","tabrep","tabicone","qcm","ordered","lastChoices","liste_des_exercices_disponibles","espace","sortieHtml","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","n","u","texte","texteCorr","sommeString","i","cpt","randint","texNombre","choice","toString","sommeDesChiffres","calcul","mathalea","sortieAMC","shuffle2tableaux","length","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/4595.5b3d866179e863e84e80.js","sourcesContent":["import Exercice from '../ClasseExercice.js'\nimport { shuffle2tableaux, listeQuestionsToContenu, randint, choice, combinaisonListes, sommeDesChiffres, calcul, texNombre } from '../../modules/outils.js'\nexport const amcReady = true\n\nexport const titre = 'Critères de divisibilité'\n\n/**\n * Un nombre est-il divisible par :\n *\n * * 2, 5, 10 ?\n * * 3, 9 ?\n * * 2, 3, 5, 9, 10 ?\n * * 2, 3, 5, 9, 10  et un autre nombre qui peut être 7, 13, 17, ou 19 ?\n * @Auteur Rémi Angot\n * 6N43\n */\nexport default function Criteres_de_divisibilite () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 4 // Correspond au facteur commun\n  this.titre = titre\n  this.consigne = 'Répondre aux questions suivantes en justifiant.'\n  this.spacing = 2\n  this.spacingCorr = 1\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.qcmDisponible = true\n  this.modeQcm = false\n\n  this.nouvelleVersion = function () {\n    this.qcm = ['6N43', [], 'Critères de divisibilité', 1, { ordered: true, lastChoices: 2 }]\n    let tabrep, tabicone\n    let espace = ''\n    if (sortieHtml) {\n      espace = '&emsp;'\n    } else {\n      espace = '\\\\qquad'\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let liste_des_exercices_disponibles\n    if (this.sup == 1) {\n      liste_des_exercices_disponibles = [2, 5, 10]\n    }\n    if (this.sup == 2) {\n      liste_des_exercices_disponibles = [3, 9]\n    }\n    if (this.sup == 3) {\n      liste_des_exercices_disponibles = [2, 3, 5, 9, 10]\n    }\n    if (this.sup > 3) {\n      liste_des_exercices_disponibles = [2, 3, 5, 9, 10, 'autre']\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      liste_des_exercices_disponibles,\n      this.nbQuestions\n    )\n    for (\n      let i = 0, n, u, texte, texteCorr, sommeString, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      switch (listeTypeDeQuestions[i]) {\n        case 2:\n          u = randint(1, 2)\n          n = randint(10, 999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $2$ ?`\n          if (u % 2 == 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $2$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $2$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 3:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $3$ ?`\n          if (calcul(sommeString) % 3 == 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${calcul(sommeString) / 3\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $3$ donc $${texNombre(\n              n\n            )}$ est divisible par $3$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=3\\\\times${(calcul(sommeString) - (calcul(sommeString) % 3)) / 3\n              }+${calcul(sommeString) % 3}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $3$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 9:\n          n = choice([randint(100, 999), randint(10000, 99999)]).toString() // transformé en string pour avoir accès aux chiffres\n          sommeString = sommeDesChiffres(n)\n          texte = `$${texNombre(n)}$ est-il divisible par $9$ ?`\n          if (calcul(sommeString) % 9 == 0) {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${calcul(sommeString) / 9\n              }$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ est divisible par $9$ donc $${texNombre(\n              n\n            )}$ est divisible par $9$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `$${sommeString}=${calcul(sommeString)}=9\\\\times${(calcul(sommeString) - (calcul(sommeString) % 9)) / 9\n              }+${calcul(sommeString) % 9}$<br>`\n            texteCorr += `La somme des chiffres de $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $9$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 5:\n          u = choice([randint(1, 9, [0, 5]), randint(1, 9, [0, 5]), 5, 0]) // 1 fois sur 2 ça sera divisible par 5\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $5$ ?`\n          if (u % 5 == 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $5$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $5$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 10:\n          u = choice([randint(1, 9), 0]) // 1 fois sur 2 ça sera divisible par 10\n          n = randint(10, 9999) * 10 + u\n          texte = `$${texNombre(n)}$ est-il divisible par $10$ ?`\n          if (u == 0) {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(n)}$ est divisible par $10$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr = `Le chiffre des unités de $${texNombre(\n              n\n            )}$ est $${u}$ donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $10$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n          break\n\n        case 'autre':\n          n = randint(100, 999)\n          u = choice([7, 7, 7, 7, 13, 17, 19])\n          if (u == 7) {\n            n = choice(\n              [randint(10, 99) * 10 + 7],\n              7 * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par 7, un divisible par 7, un au hasard\n          } else {\n            n = choice(\n              [randint(10, 99) * 100 + u],\n              u * randint(11, 99),\n              randint(100, 999)\n            ) // un nombre qui se termine par u, un divisible par u, un au hasard\n          }\n          texte = `$${texNombre(n)}$ est-il divisible par $${u}$ ?`\n          texteCorr = `On ne connait pas de critère de divisibilité par $${u}$, on calcule donc la division euclidienne de $${texNombre(\n            n\n          )}$ par $${u}$.<br>`\n          if (n % u == 0) {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${texNombre(\n              n / u\n            )}$<br>`\n            texteCorr += `Le reste de la division euclidienne est nul donc $${texNombre(\n              n\n            )}$ est divisible par $${u}$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [1, 0, 0]\n          } else {\n            texteCorr += `$${texNombre(n)}=${u}\\\\times${(n - (n % u)) / u}+${n % u\n              }$<br>`\n            texteCorr += `Le reste de la division euclidienne n'est pas nul donc $${texNombre(\n              n\n            )}$ n'est pas divisible par $${u}$.`\n            tabrep = ['Oui', 'Non', 'Je ne sais pas']\n            tabicone = [0, 1, 0]\n          }\n\n          break\n      }\n      if (this.modeQcm && !mathalea.sortieAMC) {\n        texteCorr = ''\n        texte += `<br><br>  Réponses possibles : ${espace}  `\n        shuffle2tableaux(tabrep, tabicone)\n        for (let i = 0; i < tabrep.length; i++) {\n          texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          if (tabicone[i] == 1) {\n            texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace\n          } else {\n            texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          }\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n        this.qcm[1].push([`${texte}. \\n `,\n          tabrep,\n          tabicone])\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Choix des questions',\n    4,\n    '1 : Critères de divisibilité par 2, 5, 10\\n\\\n2 : Critères de divisibilité par 3,9\\n3 : Critères de divisibilité par 2, 3, 5, 9, 10\\n4 : Avec ou sans critère de divisibilité'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}