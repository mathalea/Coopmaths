{"version":3,"file":"js/5651.16c423feb61f13cc18a3.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2F10-6.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, reduireAxPlusB, choice, ecritureAlgebrique, ecritureAlgebriqueSauf1 } from '../../modules/outils.js'\nimport { tableauDeVariation, mathalea2d, courbe2, repere2 } from '../../modules/2d.js'\n\nexport const titre = 'Déterminer le sens de variation d’une fonction affine'\n\n/**\n* @author Stéphane Guyon\n* 2F10-3\n*/\nexport default function variationsfonctionaffine () {\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 2 // On complète le nb de questions\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.tailleDiaporama = 100\n  this.video = ''\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = []\n    this.listeCorrections = []\n    // let typesDeQuestionsDisponibles = []\n    // typesDeQuestionsDisponibles = [1, 2]// On complète selon le nb de cas dans l'exo (switch)\n\n    // const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, a, b, t, monRepere, maCourbe, ligne1, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) { // on rajoute les variables dont on a besoin\n      // typesDeQuestions = listeTypeDeQuestions[i]\n      if (this.sup === 1) {\n        a = randint(1, 4) * choice([-1, 1])// coefficient a de la fonction affine\n        b = randint(0, 4) * choice([-1, 1])// coefficient b de la fonction affine\n\n        if (a === 0 && b === 0) { // On évite la fonction nulle\n          a = 1\n        }\n\n        texte = 'Déterminer le sens de variation de la fonction $f$ définie sur $\\\\mathbb R$ par'\n        if (b < 0) {\n          t = randint(1, 3)\n          if (t > 1 && a !== 1) { texte += `$f(x)=${b} ${ecritureAlgebrique(a)}x$. <br>` }\n          if (t > 1 && a === 1) { texte += `$f(x)=${b}${ecritureAlgebriqueSauf1(a)}x$.<br>` }\n          if (t > 1) {\n            texteCorr = 'On reconnaît que $f$ est une fonction affine, de la forme $f(x)=ax+b$, '\n            texteCorr += `avec $a=${a}~$ et $b=${b}$. <br>`\n            texteCorr += `On a donc : $f(x)=${reduireAxPlusB(a, b)}$ .<br>`\n          }\n          if (t === 1) { texte += `$f(x)=${reduireAxPlusB(a, b)}$ .<br>` }\n        } else {\n          texte += `$f(x)=${reduireAxPlusB(a, b)}$ .<br>`\n          texteCorr = 'On reconnaît que $f$ est une fonction affine, de la forme $f(x)=ax+b$, '\n          texteCorr += `avec $a=${a}~$ et $b=${b}$. <br>`\n        }\n\n        // texteCorr += `Selon les notations, on peut aussi appeler $f$ sous la forme $f(x)=mx+p$ avec : $m=${a}$ et $p=${b}$. <br>`\n        texteCorr += 'On sait qu\\'une fonction affine est monotone sur $\\\\mathbb{R}$.<br> '\n        texteCorr += 'Son sens de variation dépend du signe de $a$.<br>'\n        if (a > 0) {\n          texteCorr += `Comme $~a~=${a}>0$ , la fonction $f$ est strictement croissante sur $\\\\mathbb{R}$.<br>`\n        } else {\n          texteCorr += `Comme $~a~=${a}<0$ , la fonction $f$ est strictement décroissante sur $\\\\mathbb{R}$.<br>`\n\n          ligne1 = ['Var', 10, '+/', 30, '-/', 30]\n        }\n        texteCorr += 'On peut synthétiser cela dans un tableau de variations :<br><br>'\n        texteCorr += mathalea2d({ xmin: -2, ymin: -6.1, xmax: 15, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              // Première colonne du tableau avec le format [chaine d'entête, hauteur de ligne, nombre de pixels de largeur estimée du texte pour le centrage]\n              ['$x$', 2, 30], [`$f(x)=${reduireAxPlusB(a, b)}$`, 2, 100]\n            ],\n            // Première ligne du tableau avec chaque antécédent suivi de son nombre de pixels de largeur estimée du texte pour le centrage\n            ['$-\\\\infty$', 30, '$+\\\\infty$', 30]\n          ],\n          // tabLines ci-dessous contient les autres lignes du tableau.\n          tabLines: [ligne1],\n          colorBackground: '',\n          espcl: 3.5, // taille en cm entre deux antécédents\n          deltacl: 0.8, // distance entre la bordure et les premiers et derniers antécédents\n          lgt: 8, // taille de la première colonne en cm\n          hauteurLignes: [15, 25]\n        }))\n\n        texteCorr += 'Pour illustrer la situation, on peut représenter graphiquement la fonction :<br><br>'\n        const f = x => a * x + b\n        monRepere = repere2({ xMin: -5, grilleXMin: -5 })\n        maCourbe = courbe2(f, { repere: monRepere })\n        // this.spacing = (context.isHtml) ? 2 : 1\n        texteCorr += mathalea2d({\n          xmin: -7,\n          ymin: -5,\n          xmax: 6,\n          ymax: 6\n        }, monRepere, maCourbe)\n      }\n\n      if (this.questionJamaisPosee(i, this.sup, a, b)) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","variationsfonctionaffine","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","spacing","spacingCorr","sup","nouvelleVersion","parseInt","listeQuestions","listeCorrections","a","b","t","monRepere","maCourbe","ligne1","texte","texteCorr","i","cpt","randint","choice","ecritureAlgebrique","ecritureAlgebriqueSauf1","reduireAxPlusB","mathalea2d","xmin","ymin","xmax","ymax","scale","tableauDeVariation","tabInit","tabLines","colorBackground","espcl","deltacl","lgt","hauteurLignes","f","x","repere2","xMin","grilleXMin","courbe2","repere","questionJamaisPosee","push","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}