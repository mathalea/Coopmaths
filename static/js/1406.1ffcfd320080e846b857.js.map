{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G33.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ReconnaitreQuadrilatereParticulier","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","correctionDetailleeDisponible","context","correctionDetaillee","nouvelleVersion","qcm","listeQuestions","listeCorrections","listeDeQuestions","shuffle","choice","texte","texteCorr","i","cpt","A","B","C","D","O","ABCD","codage","codage1","codage2","codage3","sAC","sBD","marquesDemiDiagonales","marquesDemiDiagonales1","marquesDemiDiagonales2","marquesCotes","tabrep","tabicone","point","polygone","codeSegments","mathalea2d","xmin","xmax","ymin","ymax","push","codageAngleDroit","segment","pointilles","autoCorrection","enonce","propositions","statut","feedback","options","ordered","lastChoice","interactif","propositionsQcm","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","id","type","querySelectorAll","uicheck","classList","add","espace","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/1406.1ffcfd320080e846b857.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, choice, shuffle } from '../../modules/outils.js'\nimport { point, segment, polygone, codageAngleDroit, codeSegments, mathalea2d } from '../../modules/2d.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const amcReady = true\nexport const amcType =1 // QCM \nexport const interactifReady = true\n\nexport const titre = 'Reconnaitre un quadrilatère particulier à partir de ses propriétés'\n\n/**\n * Reconnaitre un quadrilatère particulier à partir de ses propriétés\n * @Auteur Rémi Angot\n * Référence 6G33\n*/\nexport default function ReconnaitreQuadrilatereParticulier () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = false\n  this.nbCols = 2 // Nombre de colonnes pour la sortie LaTeX\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction pour la sortie LaTeX\n  this.correctionDetailleeDisponible = true\n  context.isHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n\n  this.nouvelleVersion = function () {\n    this.qcm = ['6G33', [], \"Trouver la nature d'un quadrilatère.\", 1]\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const listeDeQuestions = shuffle([choice(['losange1', 'losange2']), choice(['rectangle1', 'rectangle2']), choice(['carre1', 'carre2', 'carre3'])])\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = ''\n      texteCorr = ''\n      let A, B, C, D, O, ABCD, codage, codage1, codage2, codage3, sAC, sBD, marquesDemiDiagonales, marquesDemiDiagonales1, marquesDemiDiagonales2, marquesCotes, tabrep, tabicone\n      switch (listeDeQuestions[i]) {\n        case 'losange1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 4 côtés de même longueur ?\"\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          // codage = codageAngleDroit(C, O, B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"|\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'losange2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [1, 0, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses diagonales perpendiculaires et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(2, 3)\n          C = point(0, 6)\n          D = point(-2, 3)\n          O = point(0, 3)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, B)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales1 = codeSegments('|', 'blue', O, A, O, C)\n          marquesDemiDiagonales2 = codeSegments('|||', 'blue', O, B, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -3, xmax: 3, ymin: -1, ymax: 7 }, ABCD, codage, sAC, sBD, marquesDemiDiagonales1, marquesDemiDiagonales2) + '<br>' }\n          texteCorr += \"C'est un losange.\"\n          break\n        case 'rectangle1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant 3 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant 3 angles droits ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'rectangle2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 1, 0, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses diagonales de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(5, 0)\n          C = point(5, 3)\n          D = point(0, 3)\n          O = point(2.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          // codage1 = codageAngleDroit(A,B,C);\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 6, ymin: -1, ymax: 4 }, ABCD, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un rectangle.\"\n          break\n        case 'carre1':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses 4 côtés de même longueur et 4 angles droits ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage1 = codageAngleDroit(A, B, C)\n          codage2 = codageAngleDroit(B, C, D)\n          codage3 = codageAngleDroit(C, D, A)\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage1, codage2, codage3, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre2':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses ses diagonales perpendiculaires, de même longueur et sécantes en leur milieu ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(C, O, D)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          // marquesCotes = codeSegments(\"||\", \"blue\", A, B, B, C, C, D, D, A);\n          sAC = segment(A, C)\n          sBD = segment(B, D)\n          sAC.pointilles = true\n          sBD.pointilles = true\n          marquesDemiDiagonales = codeSegments('||', 'blue', O, A, O, B, O, C, O, D)\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesDemiDiagonales, sAC, sBD) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n        case 'carre3':\n          texte = \"Quelle est la nature d'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ?\"\n          tabrep = ['Losange', 'Rectangle', 'Carré', 'Trapèze', 'Parallélogramme']\n          tabicone = [0, 0, 1, 0, 0]\n          this.qcm[1].push(['Quelle est la nature d\\'un quadrilatère ayant ses 4 côtés de même longueur et un angle droit ? \\\\\\\\ \\n Réponses possibles : ',\n            tabrep,\n            tabicone])\n          A = point(0, 0)\n          B = point(3, 0)\n          C = point(3, 3)\n          D = point(0, 3)\n          O = point(1.5, 1.5)\n          ABCD = polygone(A, B, C, D)\n          codage = codageAngleDroit(A, B, C)\n          // codage2 = codageAngleDroit(B,C,D);\n          // codage3 = codageAngleDroit(C,D,A);\n          // codage4 = codageAngleDroit(D,A,B);\n          marquesCotes = codeSegments('||', 'blue', A, B, B, C, C, D, D, A)\n          // sAC = segment(A, C);\n          // sBD = segment(B, D);\n          // sOA = segment(O, A);\n          // sOB = segment(O, B);\n          // sOC = segment(O, C);\n          // sOD = segment(O, D);\n          // sAC.pointilles = true;\n          // sBD.pointilles = true;\n          // marquesDemiDiagonales = codeSegments(\"||\", \"blue\", O, A, O, B, O, C, O, D);\n          if (this.correctionDetaillee) { texteCorr = mathalea2d({ xmin: -1, xmax: 4, ymin: -1, ymax: 4 }, ABCD, codage, marquesCotes) + '<br>' }\n          texteCorr += \"C'est un carré.\"\n          break\n      }\n      // if (this.modeQcm && !context.isAmc) {\n      //   if (texteCorr.lastIndexOf('\\n') > 0) {\n      //     texteCorr = texteCorr.substring(0, texteCorr.lastIndexOf('\\n'))\n      //   }\n      //   this.tableauSolutionsDuQcm[i] = tabicone\n      //   texte += propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texte\n      //   texteCorr += '<br>' + propositionsQcm(this.numeroExercice, i, tabrep, tabicone).texteCorr\n      // }\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Losange',\n          statut: false,\n          feedback: 'Tous les losanges ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n        },\n        {\n          texte: 'Rectangle',\n          statut: false,\n          feedback: 'Tous les rectangles ont leurs côtés opposés parallèles, ce sont donc aussi des parallélogrammes et des trapèzes.'\n\n        },\n        {\n          texte: 'Carré',\n          statut: false,\n          feedback: 'Tous les carrés ont 4 angles droits, ce sont donc aussi des rectangles. Tous les carrés ont 4 côtés de même longueur, ce sont donc aussi des losanges.'\n\n        },\n        {\n          texte: 'Trapèze',\n          statut: false\n        },\n        {\n          texte: 'Parallélogramme',\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: true,\n        lastChoice: 5\n      }\n      if (listeDeQuestions[i] === 'losange1' || listeDeQuestions[i] === 'losange2') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'rectangle1' || listeDeQuestions[i] === 'rectangle2') {\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (listeDeQuestions[i] === 'carre1' || listeDeQuestions[i] === 'carre2' || listeDeQuestions[i] === 'carre3') {\n        this.autoCorrection[i].propositions[0].statut = true\n        this.autoCorrection[i].propositions[1].statut = true\n        this.autoCorrection[i].propositions[2].statut = true\n        this.autoCorrection[i].propositions[3].statut = true\n        this.autoCorrection[i].propositions[4].statut = true\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3,'1 : ....\\n2 : .....,\\n3 : .....];\n}\n\n// Exercices paramétrés pour correspondre au référentiel\n// Référence 5P10\n// function Proportionnalite_pas_proportionnalite_5e(){\n//  Proportionnalite_pas_proportionnalite.call(this)\n// Pas de paramètres Sup\n// }\n\n// Référence 6C23\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}