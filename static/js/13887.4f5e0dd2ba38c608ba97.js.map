{"version":3,"file":"js/13887.4f5e0dd2ba38c608ba97.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5C11.js","webpack://mathalea/./src/js/exercices/5e/_Ecrire_une_expression_numerique.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import EcrireUneExpressionNumerique from './_Ecrire_une_expression_numerique.js'\nexport const titre = 'Traduire une phrase par une expression'\n\n/**\n * @author Jean-Claude Lhote\n * Référence 5C11\n */\nexport default function TraduireUnePhraseParUneExpression () {\n  EcrireUneExpressionNumerique.call(this)\n  this.version = 1\n  this.sup = false\n  this.sup2 = false\n  this.titre = titre\n}\n","import Exercice from '../Exercice.js'\nimport choisirExpressionNumerique from './_choisirExpressionNumerique.js'\nimport ChoisirExpressionLitterale from './_Choisir_expression_litterale.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCOpenNum'\n/**\n* Fonction noyau pour 6 fonctions qui utilisent les mêmes variables et la fonction choisirExpressionNumerique\n* @author Jean-Claude Lhote\n* Référence 5C11, 5C11-1, 5C11-2, 5C12, 5C12-1, 5L13\n*/\nexport default function EcrireUneExpressionNumerique () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup2 = false // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n  this.sup = false\n  this.sup3 = true\n  this.version = 1 // 1 pour ecrire une expression, 2 pour écrire la phrase, 3 pour écrire l'expression et la calculer, 4 pour calculer une expression numérique\n\n  this.nouvelleVersion = function () {\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles = []\n    let reponse\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    if (!this.sup) { // Si aucune liste n'est saisie\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n    } else {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        typesDeQuestionsDisponibles[0] = this.sup % 6\n      } else {\n        typesDeQuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    let expf; let expn; let expc; let decimal = 1; let nbval; let nbOperations; let resultats\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2) decimal = 10\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      nbOperations = parseInt(listeTypeDeQuestions[i] % 6)\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      if (this.version > 2 && nbOperations === 1 && !this.litteral) nbOperations++\n      if (!this.litteral) { resultats = choisirExpressionNumerique(nbOperations, decimal, this.sup3) } else { resultats = ChoisirExpressionLitterale(nbOperations, decimal, val1, val2, this.sup3) }\n      expf = resultats[0]\n      expn = resultats[1]\n      expc = resultats[2]\n      nbval = resultats[3]\n      switch (this.version) {\n        case 1:\n          this.consigne = 'Traduire la phrase par un calcul (il n’est pas demandé d’effectuer ce calcul).'\n          texte = `${expf}.`\n          texteCorr = `${expf} s'écrit<br>${expn}.`\n          break\n        case 2:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Traduire le calcul par une phrase en français.'\n          texte = `${expn}`\n          expf = 'l' + expf.substring(1)\n          texteCorr = `${expn} est ${expf}.`\n          break\n        case 3:\n          this.consigne = 'Traduire la phrase par un calcul et effectuer ce calcul en respectant les priorités opératoires.'\n          if (!this.litteral) texte = `${expf}.`\n          else if (nbval === 2) texte = `${expf} puis calculer pour $x=${val1}$ et $y=${val2}$.` // nbval contient le nombre de valeurs en cas de calcul littéral\n          else texte = `${expf} puis calculer pour $x=${val1}$.`\n          texteCorr = `${expf} s'écrit ${expn}.<br>`\n          if (!this.litteral) texteCorr = `${expc}.`\n          else if (nbval === 2) texteCorr += `Pour $x=${val1}$ et $y=${val2}$ :<br> ${expc}.`\n          else texteCorr += `Pour $x=${val1}$ :<br>${expc}.`\n          reponse = parseInt(expc.split('=')[expc.split('=').length - 1])\n          break\n        case 4:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Calculer en respectant les priorités opératoires.'\n          if (!this.litteral) texte = `${expn}.`\n          else if (nbval === 2) texte = `Pour $x=${val1}$ et $y=${val2}$, calculer ${expn}.`\n          else texte = `Pour $x=${val1}$, calculer ${expn}.`\n          if (!this.litteral) texteCorr = `${expc}.`\n          else if (nbval === 2) texteCorr = `Pour $x=${val1}$ et $y=${val2}$ :<br>${expc}.`\n          else texteCorr = `Pour $x=${val1}$ :<br>${expc}.`\n          reponse = parseInt(expc.split('=')[expc.split('=').length - 1])\n          break\n      }\n      if (this.questionJamaisPosee(i, expn, expf)) { // Si la question n'a jamais été posée, on en créé une autre\n        if (this.version > 2) {\n          if (!context.isAmc) {\n            texte += '<br>' + ajouteChampTexteMathLive(this, i, 'largeur25 inline', { texte: ' Résultat : ' })\n          } else {\n            texte += '<br>Détailler les calculs dans le cadre et coder le résultat.<br>'\n          }\n          setReponse(this, i, reponse)\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Choix des expressions', 'Nombres séparés par des tirets\\n 1 : Expressions de base à une opération\\n2 : Expressions à deux opérations\\n3 : Expressions à 3 opérations\\n4 : Expressions à 4 opérations\\n5 : Expressions complexes'] // Texte, tooltip\n  this.besoinFormulaire2CaseACocher = ['Avec décimaux.', false]\n  this.besoinFormulaire3CaseACocher = ['Avec le signe × devant les parenthèses', true]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TraduireUnePhraseParUneExpression","EcrireUneExpressionNumerique","this","version","sup","sup2","interactifReady","interactifType","amcReady","amcType","Exercice","consigne","nbQuestions","nbCols","nbColsCorr","sup3","nouvelleVersion","autoCorrection","reponse","expf","expn","expc","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","split","nbval","nbOperations","resultats","decimal","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","val1","val2","i","cpt","parseInt","randint","litteral","ChoisirExpressionLitterale","choisirExpressionNumerique","indexOf","substring","length","questionJamaisPosee","context","ajouteChampTexteMathLive","setReponse","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2CaseACocher","besoinFormulaire3CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}