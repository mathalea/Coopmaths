/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_beta_beta2F20_js"],{

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice() {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigneCorrection = '';\n  this.listeQuestions = [];\n  this.listeCorrections = [];\n  this.introduction = '';\n  this.contenu = '';\n  this.contenuCorrection = '';\n  this.nbQuestions = 10;\n  this.nbCols = 2;\n  this.nbColsCorr = 2;\n  this.spacing = 1;\n  this.spacingCorr = 1;\n  this.beamer = false;\n  this.besoinFormulaireNumerique = false; // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n\n  this.besoinFormulaireTexte = false; // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n\n  this.besoinFormulaireCaseACocher = false; // Sinon this.besoinFormulaireCaseACocher = [texte];\n\n  this.consigneModifiable = true;\n  this.nbQuestionsModifiable = true;\n  this.nbColsModifiable = true;\n  this.nbColsCorrModifiable = true;\n  this.spacingModifiable = true;\n  this.spacingCorrModifiable = true;\n  this.correctionDetailleeDisponible = false;\n  this.correctionDetaillee = true;\n  this.video = '';\n  this.boutonAide = false;\n  this.tailleDiaporama = 50; // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  this.pasDeVersionLatex = false;\n  this.qcm = false; // Pour les exercices de type QCM : contient un tableau.\n\n  this.qcmDisponible = false; // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n\n  this.modeQcm = false; // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false; // pas d'interface par défaut pour les figures MG32\n\n  this.nouvelleVersion = function (numeroExercice) {};\n\n  this.listePackages = []; // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZXhlcmNpY2VzL0NsYXNzZUV4ZXJjaWNlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0aGFsZWEvLi9zcmMvanMvZXhlcmNpY2VzL0NsYXNzZUV4ZXJjaWNlLmpzP2RiNDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogIENsYXNzZSBwYXJlbnRlIGRlIHRvdXMgbGVzIGV4ZXJjaWNlc1xuICpcbiAqIEBBdXRldXIgUsOpbWkgQW5nb3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXhlcmNpY2UgKCkge1xuICAvLyBDbGFzc2UgcGFyZW50ZSBkZSB0b3VzIGxlcyBleGVyY2ljZXMgcXVpIHNlcm9udCBjcsOpw6lzXG4gIHRoaXMudGl0cmUgPSAnJ1xuICB0aGlzLmNvbnNpZ25lID0gJydcbiAgdGhpcy5jb25zaWduZUNvcnJlY3Rpb24gPSAnJ1xuICB0aGlzLmxpc3RlUXVlc3Rpb25zID0gW11cbiAgdGhpcy5saXN0ZUNvcnJlY3Rpb25zID0gW11cbiAgdGhpcy5pbnRyb2R1Y3Rpb24gPSAnJ1xuICB0aGlzLmNvbnRlbnUgPSAnJ1xuICB0aGlzLmNvbnRlbnVDb3JyZWN0aW9uID0gJydcbiAgdGhpcy5uYlF1ZXN0aW9ucyA9IDEwXG4gIHRoaXMubmJDb2xzID0gMlxuICB0aGlzLm5iQ29sc0NvcnIgPSAyXG4gIHRoaXMuc3BhY2luZyA9IDFcbiAgdGhpcy5zcGFjaW5nQ29yciA9IDFcbiAgdGhpcy5iZWFtZXIgPSBmYWxzZVxuXG4gIHRoaXMuYmVzb2luRm9ybXVsYWlyZU51bWVyaXF1ZSA9IGZhbHNlIC8vIFNpbm9uIHRoaXMuYmVzb2luRm9ybXVsYWlyZU51bWVyaXF1ZSA9IFt0ZXh0ZSxtYXgsdG9vbHRpcCBmYWN1bHRhdGlmXTtcbiAgdGhpcy5iZXNvaW5Gb3JtdWxhaXJlVGV4dGUgPSBmYWxzZSAvLyBTaW5vbiB0aGlzLmJlc29pbkZvcm11bGFpcmVUZXh0ZSA9IFt0ZXh0ZSx0b29sdGlwXTtcbiAgdGhpcy5iZXNvaW5Gb3JtdWxhaXJlQ2FzZUFDb2NoZXIgPSBmYWxzZSAvLyBTaW5vbiB0aGlzLmJlc29pbkZvcm11bGFpcmVDYXNlQUNvY2hlciA9IFt0ZXh0ZV07XG4gIHRoaXMuY29uc2lnbmVNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLm5iUXVlc3Rpb25zTW9kaWZpYWJsZSA9IHRydWVcbiAgdGhpcy5uYkNvbHNNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLm5iQ29sc0NvcnJNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLnNwYWNpbmdNb2RpZmlhYmxlID0gdHJ1ZVxuICB0aGlzLnNwYWNpbmdDb3JyTW9kaWZpYWJsZSA9IHRydWVcbiAgdGhpcy5jb3JyZWN0aW9uRGV0YWlsbGVlRGlzcG9uaWJsZSA9IGZhbHNlXG4gIHRoaXMuY29ycmVjdGlvbkRldGFpbGxlZSA9IHRydWVcbiAgdGhpcy52aWRlbyA9ICcnXG4gIHRoaXMuYm91dG9uQWlkZSA9IGZhbHNlXG4gIHRoaXMudGFpbGxlRGlhcG9yYW1hID0gNTAgLy8gVGFpbGxlIGVuIHBpeGVscyBwb3VyIGxlIGNhbGN1bCBjaHJvbm9tw6l0csOpXG4gIC8vIHRoaXMuYm91dG9uQWlkZSA9IG1vZGFsVGV4dGVDb3VydChudW1lcm9FeGVyY2ljZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlXCIsaWNvbmU9XCJpbmZvIGNpcmNsZVwiKVxuICAvLyB0aGlzLmJvdXRvbkFpZGUgPSBtb2RhbFRleHRlTG9uZyhudW1lcm9FeGVyY2ljZSx0aXRyZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlXCIsaWNvbmU9XCJpbmZvIGNpcmNsZVwiKVxuICAvLyB0aGlzLmJvdXRvbkFpZGUgPSBtb2RhbFlvdXR1YmUobnVtZXJvRXhlcmNpY2UsaWRfeW91dHViZSx0ZXh0ZSxsYWJlbF9ib3V0b249XCJBaWRlIC0gVmlkw6lvXCIsaWNvbmU9XCJ5b3V0dWJlXCIpXG4gIC8vIHRoaXMuYm91dG9uQWlkZSA9IG1vZGFsUGRmKG51bWVyb0V4ZXJjaWNlLHVybF9wZGYsdGV4dGU9XCJBaWRlXCIsbGFiZWxfYm91dG9uPVwiQWlkZSAtIFBERlwiLGljb25lPVwiZmlsZSBwZGZcIilcbiAgLy8gdGhpcy52c3BhY2UgPSAtMSAvL0Fqb3V0ZSB1biBcXHZzcGFjZXstMWNtfSBhdmFudCBsJ8Opbm9uY8OpIGNlIHF1aSBwZXV0IMOqdHJlIHByYXRpcXVlIHBvdXIgZGVzIGV4ZXJjaWNlcyBhdmVjIGRlcyBmaWd1cmVzLlxuICB0aGlzLnBhc0RlVmVyc2lvbkxhdGV4ID0gZmFsc2VcbiAgdGhpcy5xY20gPSBmYWxzZSAvLyBQb3VyIGxlcyBleGVyY2ljZXMgZGUgdHlwZSBRQ00gOiBjb250aWVudCB1biB0YWJsZWF1LlxuICB0aGlzLnFjbURpc3BvbmlibGUgPSBmYWxzZSAvLyBQb3VyIGFqb3V0ZXIgdW5lIGNhc2Ugw6AgY29jaGVyIE1vZGUgUUNNIHF1aSBwZXJtZXQgZGUgY2hhbmdlciBsZSBzdGF0dXQgZGUgdGhpcy5tb2RlUWNtXG4gIHRoaXMubW9kZVFjbSA9IGZhbHNlIC8vIFBvdXIgY2hvaXNpciBsYSB2ZXJzaW9uIFFDTSBvdSBsYSB2ZXJzaW9uIGNsYXNzaXF1ZSAoZmFsc2UgPSB2ZXJzaW9uIGNsYXNzaXF1ZSlcblxuICB0aGlzLm1nMzJFZGl0YWJsZSA9IGZhbHNlIC8vIHBhcyBkJ2ludGVyZmFjZSBwYXIgZMOpZmF1dCBwb3VyIGxlcyBmaWd1cmVzIE1HMzJcbiAgdGhpcy5ub3V2ZWxsZVZlcnNpb24gPSBmdW5jdGlvbiAobnVtZXJvRXhlcmNpY2UpIHt9XG4gIHRoaXMubGlzdGVQYWNrYWdlcyA9IFtdIC8vIHN0cmluZyBvdSBsaXN0ZSBkZSBzdHJpbmcgYXZlYyBsZSBub20gZGVzIHBhY2thZ2VzIHNww6ljaWZpcXVlcyDDoCBham91dGVyIGRhbnMgbGUgcHLDqWFtYnVsZVxuICAvLyB0aGlzLnR5cGVFeGVyY2ljZSA9IFwiTUczMlwiO1xuICAvLyB0aGlzLmRpbWVuc2lvbnNEaXZNZzMyID0gWzUwMCwgNDUwXTtcbiAgLy8gdGhpcy50eXBlRXhlcmNpY2UgPSBcIlNjcmF0Y2hcIlxuICAvLyB0aGlzLnFjbT1bXCJRdWVscyBzb250IGxlcyBub21icmVzIHBhaXJzID9cIixbNywxMiwzNCwyNSwxOF0sWzAsMSwxLDAsMV1dID0+W1wiTGEgcXVlc3Rpb25cIixbbGVzIHLDqXBvbnNlc10sW2Jvbm5lPTEgZXQgbWF1dmFpc2U9MF1dXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/exercices/ClasseExercice.js\n");

/***/ }),

/***/ "./src/js/exercices/beta/beta2F20.js":
/*!*******************************************!*\
  !*** ./src/js/exercices/beta/beta2F20.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Factoriser_Identites_remarquables2)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\nconst titre = 'Reconnaître une fonction affine.';\n/**\n * Reconnaître une fonction affine\n* @auteur Stéphane Guyon\n* 2F20\n*/\n\nfunction Factoriser_Identites_remarquables2() {\n  'use strict';\n\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n\n  this.titre = titre;\n  this.video = \"\";\n  this.consigne = \"Déterminer,en expliquant, si les fonctions suivantes sont, ou non, des fonctions affines. :\";\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.spacing = 1;\n  this.spacingCorr = 1;\n  this.nbQuestions = 5;\n  this.spacingCorr = 3;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n\n    this.listeCorrections = []; // Liste de questions corrigées\n\n    let type_de_questions_disponibles = [];\n    type_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8];\n    let listeTypeDeQuestions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaisonListes)(type_de_questions_disponibles, this.nbQuestions);\n\n    for (let i = 0, texte, texteCorr, cpt = 0, a, b, c, d, e, f, k, fraction = [], ns, ds, type_de_questions; i < this.nbQuestions && cpt < 50;) {\n      type_de_questions = listeTypeDeQuestions[i];\n      k = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([-1, 1]);\n      a = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2, 9);\n      a = a * k;\n      b = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, 9);\n      c = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([2, 3, 5, 7, 10, 11, 13, 15, 17]);\n      b = b * k;\n      d = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([2, 3, 5, 7, 10, 11, 13, 15, 17]);\n      e = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2, 9);\n\n      switch (type_de_questions) {\n        case 1:\n          texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a, b)}$`; //f(x)=ax + b\n\n          texteCorr = ` $f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a, b)}$<br>`;\n          texteCorr += `On observe que la fonction $f$ s'écrit bien sous la forme $f(x)= a x+ b$ avec $a$ et $b$ des nombres réels.<br>`;\n          texteCorr += `Ici, on a : $a=${a}$ et $b=${b}$<br>`;\n          texteCorr += `$f$ est donc bien une fonction affine.<br>`;\n          break;\n\n        case 2:\n          if (a = 1) {\n            texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${b}+x$<br>`; //f(x)=b+x\n\n            texteCorr = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${b}+x$<br>`;\n            texteCorr += ` On peut écrire $f$ sous cette forme : $f(x)=x ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)}$<br>`;\n          }\n\n          if (a = -1) {\n            texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${b}-x$<br>`; //f(x)=b-x}\n\n            texteCorr = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${b}-x$<br>`;\n            texteCorr += ` On peut écrire $f$ sous cette forme : $f(x)=-x ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)}$<br>`;\n          } else {\n            texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)} ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(a)}  x$<br>`; //f(x)=b-x}\n\n            texteCorr = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)} ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(a)}  x$<br>`; //f(x)=b-x}\n\n            texteCorr += ` On peut écrire $f$ sous cette forme : $f(x)=-x ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a, b)}$<br>`;\n          }\n\n          texteCorr += `On observe que la fonction $f$ s'écrit bien sous la forme $f(x)= a x+ b$ avec $a$ et $b$ des nombres réels.<br>`;\n          texteCorr += `Ici, on a : $a=${a}$ et $b=${b}$<br>`;\n          texteCorr += `$f$ est donc bien une fonction affine.`;\n          break;\n\n        case 3:\n          texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${a}x^{2}${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)} x${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(c)} $`; //f(x)=ax²+bx+c\n\n          texteCorr = ` $f(x)=${a}x^{2}${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebriqueSauf1)(b)} x${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(c)} $<br>`;\n          texteCorr += `On observe que la fonction $f$ est du second degré, puisqu'il y a un terme en $x^{2}$<br>`;\n          texteCorr += `Elle s'écrit sous la forme $f(x)= a x^{2}+ bx+c$ et non pas sous la forme $ax+b$.<br>`;\n          texteCorr += `$f$ n'est donc pas une fonction affine.<br>`;\n          break;\n\n        case 4:\n          texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=\\\\sqrt{${c}}x + \\\\sqrt{${d}}$`; //f(x)=\\sqrt a x + \\sqrt b\n\n          texteCorr = ` $f(x)=\\\\sqrt{${c}}x + \\\\sqrt{${d}}$<br>`;\n          texteCorr += `On observe que la fonction $f$ s'écrit bien sous la forme $f(x)= a x+ b$ avec $a$ et $b$ des nombres réels.<br>`;\n          texteCorr += `Ici, on a : $a=\\\\sqrt{${c}}$ et $b=\\\\sqrt{${d}}$<br>`;\n          texteCorr += `$f$ est donc bien une fonction affine.<br>`;\n          break;\n\n        case 5:\n          texte = ` Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${a}x^{2}${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(c)} $`; //f(x)=ax²+c\n\n          texteCorr = ` $f(x)=${a}x^{2}${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(c)} $<br>`;\n          texteCorr += `On observe que la fonction $f$ est du second degré, puisqu'il y a un terme en $x^{2}$<br>`;\n          texteCorr += `Elle s'écrit sous la forme $f(x)= a x^{2}+b$ avec $a$ et $b$ des nombres réels, et non pas sous la forme $ax+b$.<br>`;\n          texteCorr += `$f$ n'est donc pas une fonction affine.<br>`;\n          break;\n\n        case 6:\n          texte = `Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=\\\\dfrac{1}{${a}x${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)} }$`; //f(x)=1/(ax+b)\n\n          texteCorr = ` $f(x)=\\\\dfrac{1}{${a}x${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b)} }$<br>`;\n          texteCorr += `On observe que la fonction $f$ est une fonction rationnelle, puisqu'il y une fraction avec des termes en $x$ au dénominateur.<br>`;\n          texteCorr += `Elle ne s'écrit  pas sous la forme $ax+b$.<br>`;\n          texteCorr += `$f$ n'est donc pas une fonction affine.<br>`;\n          break;\n\n        case 7:\n          texte = `Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texFractionSigne)(1, a)}x+${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texFractionSigne)(1, e)} $`; //f(x)=1/ax+1/b\n\n          texteCorr = `$f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texFractionSigne)(1, a)}x+${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texFractionSigne)(1, e)}$<br>`;\n          texteCorr += `On observe que la fonction $f$ s'écrit bien sous la forme $f(x)= a x+ b$ avec $a$ et $b$ des nombres réels.<br>`;\n          texteCorr += `Ici, on a : $a=\\\\dfrac{1}{${a}}$ et $b=\\\\dfrac{1}{${e}}$<br>`;\n          texteCorr += `$f$ est donc bien une fonction affine.<br>`;\n          break;\n\n        case 8:\n          texte = `Soit $f$ la fonction définie sur un intervalle $I$ de $\\\\mathbb R$, par $f(x)=${c}\\\\times (${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a, b)}) $`; //f(x)=k(ax+b)\n\n          texteCorr = `$f(x)=${c}\\\\times (${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a, b)}) $<br>`;\n          texteCorr += `On peut développer l'expression de $f$ et on obtient alors :<br>`;\n          texteCorr += `$f(x)=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.reduireAxPlusB)(a * c, b * c)} $<br>`;\n          texteCorr += `On observe que la fonction $f$ s'écrit bien sous la forme $f(x)= a x+ b$ avec $a$ et $b$ des nombres réels.<br>`;\n          texteCorr += `Ici, on a : $a=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(a * c)}$ et $b=${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecritureAlgebrique)(b * c)}$<br>`;\n          texteCorr += `$f$ est donc bien une fonction affine.<br>`;\n          break;\n      }\n\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n\n      cpt++;\n    }\n\n    (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.listeQuestionsToContenu)(this);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/exercices/beta/beta2F20.js\n");

/***/ })

}]);