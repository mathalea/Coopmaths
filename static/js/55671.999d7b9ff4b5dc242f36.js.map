{"version":3,"file":"js/55671.999d7b9ff4b5dc242f36.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3F12.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texEnumerate, miseEnEvidence, itemize, tikzMachineDiag, numAlpha, texCadreParOrange } from '../../modules/outils.js'\nimport { SvgMachineDiag3F12 } from '../../modules/macroSvgJs.js'\nexport const titre = 'Fonctions : Calculs d’images'\n\n/**\n * 3F12 Notion de fonction - Vocabulaire\n * Déterminer à partir de plusieurs modes de représentation l'image d'un nombre\n * @author Sébastien LOZANO\n */\nexport default function fonctionsCalculsDImages () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = ''\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne += 'Calcule les images avec la méthode demandée.'\n\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 4\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 5\n  let pourcentage, idDuDiv, idDuDivCorr, j\n  const numEx = '3F12' // pour rendre unique les id des SVG, en cas d'utilisation dans plusieurs exercices y faisant appel\n\n  if (context.isHtml) {\n    pourcentage = '100%' // pour l'affichage des svg. On a besoin d'une variable globale\n  } else { // sortie LaTeX\n  };\n  this.nouvelleVersion = function (numeroExercice) {\n    this.sup = Number(this.sup)\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = modalPdf(numeroExercice,\"assets/pdf/FicheFonctions-3F1-act.pdf\",\"Aide mémoire sur les fonctions (Sébastien Lozano)\",\"Aide mémoire\")\n      // this.boutonAide += modalVideo('videoTest','https://coopmaths.fr/videos/Fonctions.mp4','Petit conte mathématique','Intro Vidéo');\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = []\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = [1] // prog de calcul\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = [2] // diagramme\n    } else if (this.sup === 3) {\n      typesDeQuestionsDisponibles = [3] // f(x) = ...\n    } else if (this.sup === 4) {\n      typesDeQuestionsDisponibles = [4] // f : x ---> ...\n    } else if (this.sup === 5) {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4] // mélange\n    };\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, a, b, c, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      if (context.isHtml) {\n        const idUnique = `${numEx}_${i}_${Date.now()}`\n        idDuDiv = `div_svg${numeroExercice}${idUnique}`\n        idDuDivCorr = `div_svg_corr${numeroExercice}${idUnique}`\n      }\n      // on part sur de l'affine avec coeff positifs, on verra ensuite\n      a = randint(2, 9)\n      b = randint(2, 9)\n      c = randint(2, 9)\n\n      switch (typesDeQuestions) {\n        case 1:\n          j = 0 // pour la sous-numérotation\n          texte = 'On donne le programme de calcul suivant qui correspond à une certaine fonction :'\n          texteCorr = 'Avec ce programme de calcul :'\n          if (context.isHtml) {\n            texte += `\n<br>\n<div class=\"ui compact warning message\">\n<p>\n- Choisir un nombre<br>\n- Multiplier ce nombre par ${a}<br>\n- Ajouter ${b} au résultat obtenu<br>\n</p>\n</div>\n<br>`\n            // sous-question a/\n            texte += numAlpha(j) + ` Appliquer ce programme de calcul au nombre ${c}<br>`\n            texteCorr += '<br>' + numAlpha(j) + `\n<br>\n<div class=\"ui compact warning message\">\n<p>\n- On choisit le nombre ${c}<br>\n- On multiplie ce nombre par ${a} : ${a}$\\\\times$ ${c} = ${a * c}<br>\n- On ajoute ${b} au résultat obtenu : ${a * c}+${b}=${a * c + b}<br>\n</p>\n</div>\n<br>\n`\n            j++\n            // sous-question b/\n            texte += numAlpha(j) + ' Traduire ce calcul par une phrase contenant le mot image'\n            texteCorr += numAlpha(j) + `L'image de ${c} par cette fonction vaut ${a * c + b}`\n            texteCorr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par cette fonction`\n          } else {\n            texte += texCadreParOrange(itemize(['Choisir un nombre', `Multiplier ce nombre par ${a}`, `Ajouter ${b} au résultat obtenu`]))\n            // sous-question a/\n            texte += texEnumerate([`Appliquer ce programme de calcul au nombre ${c}`, 'Traduire ce calcul par une phrase contenant le mot image'], this.spacing)\n            // texteCorr +=\n            texteCorr += texEnumerate([texCadreParOrange(itemize([`On choisit le nombre ${c}`, `On multiplie ce nombre par ${a} : $${a} \\\\times ${c} = ${a * c}$ `, `On ajoute ${b} au résultat obtenu : $${a * c}+${b}=${a * c + b}$`])), `L'image de ${c} par cette fonction vaut ${a * c + b}<br>On peut aussi dire que ${a * c + b} est l'image de ${c} par cette fonction`], this.spacing)\n          };\n          break\n        case 2:\n          j = 0 // pour la sous-numérotation\n\n          // les variables a,b,c changent sans refaire un appel à randint\n          texte = `Soit $f$ la fonction définie par l'expression algébrique $f(x)=$ ${a}$x+$${b}`\n          if (context.isHtml) {\n            // sous-question a/\n            texte += '<br>' + numAlpha(j) + ` Calculer l'image de ${c}`\n            texte += '<br>'\n            texteCorr = numAlpha(j) + ` Calculons l'image par $f$ de $x= ${c}$ :`\n            texteCorr += `<br>$f(${miseEnEvidence('\\\\textit{\\\\textbf{x}}')})= ${a} ${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}+${b}$`\n            texteCorr += `<br>$f(${miseEnEvidence(c)})= ${a}\\\\times ${miseEnEvidence(c)}+${b}$`\n            texteCorr += `<br>$f(${miseEnEvidence(c)})= ${a * c}+${b}$`\n            texteCorr += `<br>$f(${miseEnEvidence(c)})= ${a * c + b}$`\n            j++\n            // sous question b/\n            texte += numAlpha(j) + ' Traduire ce calcul par une phrase contenant le mot image'\n            texteCorr += '<br>' + numAlpha(j) + ` L'image de ${c} par la fonction $f$ vaut ${a * c + b}`\n            texteCorr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $f$`\n          } else {\n            // sous-question a/ et b/\n            texte += texEnumerate([`Calculer l'image de ${c}`, 'Traduire ce calcul par une phrase contenant le mot image'], this.spacing)\n            texteCorr = texEnumerate([`Calculons l'image par $f$ de $x= ${c}$ :\n<br>$f(${miseEnEvidence('\\\\textit{\\\\textbf{x}}')})= ${a} ${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}+${b}$\n<br>$f(${miseEnEvidence(c)})= ${a}\\\\times ${miseEnEvidence(c)}+${b}$\n<br>$f(${miseEnEvidence(c)})= ${a * c}+${b}$\n<br>$f(${miseEnEvidence(c)})= ${a * c + b}$`, `L'image de ${c} par la fonction $f$ vaut ${a * c + b}\n<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $f$`\n            ], this.spacing)\n          };\n          break\n        case 3:\n          j = 0 // pour la sous-numérotation\n\n          // les variables a,b,c changent sans refaire un appel à randint\n          texte = `Soit $g$ la fonction définie par $g:x\\\\longmapsto$ ${a}$x+$${b}`\n          if (context.isHtml) {\n            // sous-question a/\n            texte += '<br>' + numAlpha(j) + ` Calculer l'image de ${c}`\n            texte += '<br>'\n            texteCorr = numAlpha(j) + ` Calculons l'image par $g$ de $x= ${c}$ :`\n            texteCorr += `<br>$g:${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}\\\\longmapsto ${a} ${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}+${b}$`\n            texteCorr += `<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a}\\\\times${miseEnEvidence(c)}+${b}$`\n            texteCorr += `<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a * c}+${b}$`\n            texteCorr += `<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a * c + b}$`\n            j++\n            // sous question b/\n            texte += numAlpha(j) + ' Traduire ce calcul par une phrase contenant le mot image'\n            texteCorr += '<br>' + numAlpha(j) + ` L'image de ${c} par la fonction $g$ vaut ${a * c + b}`\n            texteCorr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`\n          } else {\n            // sous-question a/ et b/\n            texte += texEnumerate([`Calculer l'image de ${c}`, 'Traduire ce calcul par une phrase contenant le mot image'], this.spacing)\n            texteCorr = texEnumerate([`Calculons l'image par $g$ de $x= ${c}$ :\n<br>$g:${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}\\\\longmapsto ${a} ${miseEnEvidence('\\\\textit{\\\\textbf{x}}')}+${b}$\n<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a}\\\\times ${miseEnEvidence(c)}+${b}$\n<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a * c}+${b}$\n<br>$g:${miseEnEvidence(c)}\\\\longmapsto ${a * c + b}$`, `L'image de ${c} par la fonction $g$ vaut ${a * c + b}\n<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`\n            ], this.spacing)\n          };\n          break\n        case 4:\n          texte = ''\n          texteCorr = ''\n          texteCorr += 'Calculer avec un diagramme '\n          j = 0 // pour la sous-numérotation\n\n          // les variables a,b,c changent sans refaire un appel à randint\n          texte += 'Soit la fonction $h$ définie par le diagramme '\n          if (context.isHtml) {\n            // sous-question a/\n            texte += `<div id=\"${idDuDiv}\" style=\"width: ${pourcentage}\"; height: 50px; display : table \"></div>`\n            SvgMachineDiag3F12(idDuDiv, 800, 100, 'h', 'x', [['' + a, a + 'x'], ['' + b, a + 'x+' + b]])\n            texte += numAlpha(j) + ` Calculer l'image de ${c}`\n            texte += '<br>'\n            texteCorr += '<br>'\n            texteCorr += numAlpha(j) + ` Calculons l'image par $h$ de $x=$ ${c} :`\n            texteCorr += `<div id=\"${idDuDivCorr}\" style=\"width: ${pourcentage}\"; display : table \"></div>`\n            SvgMachineDiag3F12(idDuDivCorr, 800, 100, 'h', '' + c, [['' + a, '' + (a * c)], ['' + b, '' + (a * c + b)]])\n            j++\n            // sous question b/\n            texte += numAlpha(j) + ' Traduire ce calcul par une phrase contenant le mot image'\n            texteCorr += '<br>' + numAlpha(j) + ` L'image de ${c} par la fonction $h$ vaut ${a * c + b}`\n            texteCorr += `<br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $h$`\n          } else {\n            texte += '<br>' + tikzMachineDiag('h', 'x', [['\\\\times ' + a, a + 'x'], ['+' + b, a + 'x+' + b]])\n            // sous-question a/ et b/\n            texte += texEnumerate([`Calculer l'image de ${c}`, 'Traduire ce calcul par une phrase contenant le mot image'], this.spacing)\n            texteCorr = texEnumerate(\n              [`Calculons l'image par $g$ de $x=$ ${c} :<br>` + tikzMachineDiag('h', c, [['\\\\times ' + a, (a * c)], ['+' + b, (a * c + b)]]),\n`L'image de ${c} par la fonction $g$ vaut ${a * c + b}\n <br> On peut aussi dire que ${a * c + b} est l'image de ${c} par la fonction $g$`\n              ], this.spacing)\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Règle à travailler', 5, \"1 : &Agrave; partir d'un programme de calcul\\n2 : &Agrave; partir de l'expression algébrique sous forme f(x) = ...\\n3 : &Agrave; partir de l'expression algébrique sous forme f : x --> ...\\n4 : &Agrave; partir d'un diagramme\\n5 : Mélange\"]\n}\n"],"names":["titre","fonctionsCalculsDImages","pourcentage","idDuDiv","idDuDivCorr","j","Exercice","this","sup","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","numeroExercice","typesDeQuestions","Number","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","a","b","c","texte","texteCorr","i","cpt","idUnique","Date","now","randint","numAlpha","texCadreParOrange","itemize","texEnumerate","miseEnEvidence","SvgMachineDiag3F12","tikzMachineDiag","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique"],"sourceRoot":""}