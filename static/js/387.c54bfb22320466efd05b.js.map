{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/_Constructibilite_des_triangles.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Constructibilite_des_triangles","type_de_questions_disponibles","Exercice","this","sup","exo","beta","consigne","nbCols","nbColsCorr","nbQuestionsModifiable","listePackages","nouvelleVersion","shuffle","nbQuestions","length","choice","listeTypeDeQuestions","listeQuestions","listeCorrections","texte","texteCorr","l1","l2","l3","a1","a2","a3","i","cpt","l_min","l_max","a_min","a_max","triangle","Triangles","current_triangle","isTrueTriangleLongueurs","randint","getNom","getLongueurs","push","longueur","cote","getCotes","valeur","getLongueursValeurs","sort","a","b","calcul","texteEnCouleur","isPlatTriangleLongueurs","split","getPerimetre","isTrueTriangleAngles","getAngles","angle","getAnglesValeurs","isPlatTriangleAngles","angle_rg","operations_possibles","operation","texNombre","texNombrec","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice"],"mappings":"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","file":"js/387.c54bfb22320466efd05b.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,shuffle,calcul,texNombrec,texNombre,texteEnCouleur,Triangles} from '../../modules/outils.js'\n\nexport const titre = 'Constructibilité des triangles via les longueurs'\n\n/**\n * Constructibilité des triangles\n * Préciser ici les numéros des exos\n * 5G2 exercice parent il faudra supprimmer la version beta5G2 de la liste des choix du fichier mathalea_exercices.js\n * 5G21-1\n * 5G31-1\n * Dans ces exercices je me servais de this.beta pour faire passer l'exo de beta.html à mathalea.html\n * this.beta pouvait prendre la valeur 'beta' ou '', tous les autres this.beta sont devenus des this.debug\n * Mise à jour le 2021-01-25\n * @author Sébastien Lozano\n */\nexport default function Constructibilite_des_triangles() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.sup = 1;\n\tif (this.exo == this.beta + '5G21-1') { // via longueurs\n\t\tthis.titre = titre\n\t\tthis.consigne = `Justifier si les longueurs données permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\n\t} else if (this.exo == this.beta + '5G31-1') { //via angles\n\t\tthis.titre = `Constructibilité des triangles via les angles`;\n\t\tthis.consigne = `Justifier si les angles donnés permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\t} else {\n\t\tthis.titre = \"Constructibilité des triangles\";\n\t\tthis.consigne = `Justifier si les longueurs ou les angles donnés permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\n\t};\n\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\tthis.nbQuestionsModifiable = false;\n\n\tthis.listePackages = `bclogo`;\n\n\tlet type_de_questions_disponibles;\n\n\tthis.nouvelleVersion = function () {\n\n\t\tif (this.exo == this.beta + '5G21-1') { // via longueurs\n\t\t\tif (this.sup == 1) {\n\t\t\t\ttype_de_questions_disponibles = shuffle([1, 2, 3]);\n\t\t\t\tthis.nbQuestions = type_de_questions_disponibles.length;\n\t\t\t} else if (this.sup == 2) {\n\t\t\t\ttype_de_questions_disponibles = [choice([1, 2, 3]), 4];\n\t\t\t\tthis.nbQuestions = type_de_questions_disponibles.length;\n\t\t\t};\n\t\t} else if (this.exo == this.beta + '5G31-1') { //via angles\n\t\t\tif (this.sup == 1) {\n\t\t\t\ttype_de_questions_disponibles = shuffle([5, 6, 7]);\n\t\t\t\tthis.nbQuestions = type_de_questions_disponibles.length;\n\t\t\t} else if (this.sup == 2) {\n\t\t\t\ttype_de_questions_disponibles = [choice([5, 6, 7]), 8];\n\t\t\t\tthis.nbQuestions = type_de_questions_disponibles.length;\n\t\t\t};\n\t\t} else {\n\t\t\ttype_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8];\n\t\t\tthis.nbQuestions = type_de_questions_disponibles.length;\n\t\t};\n\n\t\t//let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\t\tlet listeTypeDeQuestions = type_de_questions_disponibles; // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\n\t\tfor (let i = 0, texte, texteCorr, l1, l2, l3, a1, a2, a3, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\n\t\t\t// on fixe longueur min et max en cm\n\t\t\tlet l_min = 2;\n\t\t\tlet l_max = 20;\n\t\t\t// on fixe angle min et max en degré\n\t\t\tlet a_min = 0;\n\t\t\tlet a_max = 180;\n\n\t\t\t// on crée un objet triangle\n\t\t\tlet triangle = new Triangles();\n\t\t\t// on crée un tableau pour le triangle courant\n\t\t\tlet current_triangle = [];\n\n\t\t\tswitch (listeTypeDeQuestions[i]) {\n\t\t\t\tcase 1: // 3 longueurs constructible\n\t\t\t\t\twhile (!triangle.isTrueTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = randint(l_min, l_max);\n\t\t\t\t\t\tl2 = randint(l_min, l_max);\n\t\t\t\t\t\tl3 = randint(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexteCorr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('plusieurs tels triangles existent')}.`;\n\t\t\t\t\ttexteCorr += `<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // 3 longueurs plat\n\t\t\t\t\twhile (!triangle.isPlatTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = randint(l_min, l_max);\n\t\t\t\t\t\tl2 = randint(l_min, l_max);\n\t\t\t\t\t\tl3 = calcul(l1 + l2);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $ = ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexteCorr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${current_triangle[2].valeur}$ cm aussi.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom() + ' c\\'est un triangle plat')}.`;\n\t\t\t\t\ttexteCorr += `<br><br>${texteEnCouleur('Un seul triangle de ce type existe')}, il s'agit du segment ${current_triangle[2].cote} sur lequel on place le point `;\n\t\t\t\t\tif ((current_triangle[0].longueur.split('')[2] == current_triangle[2].cote.split('')[1]) || (current_triangle[0].longueur.split('')[2] == current_triangle[2].cote.split('')[2])) {\n\t\t\t\t\t\ttexteCorr += `${current_triangle[0].longueur.split('')[1]}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `${current_triangle[0].longueur.split('')[2]}`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\t//`${current_triangle[0].longueur.split('')[2]}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: // 3 longueurs non constructible\n\t\t\t\t\t// on initialise les longueurs sinon la méthode isTrueTriangleLongueurs() renvoie false!\n\t\t\t\t\tl1 = randint(l_min, l_max);\n\t\t\t\t\tl2 = randint(l_min, l_max);\n\t\t\t\t\tl3 = randint(l_min, l_max);\n\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\ttriangle.l3 = l3;\n\n\t\t\t\t\twhile (triangle.isTrueTriangleLongueurs() || triangle.isPlatTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = randint(l_min, l_max);\n\t\t\t\t\t\tl2 = randint(l_min, l_max);\n\t\t\t\t\t\tl3 = randint(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexteCorr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} < ${current_triangle[2].longueur}, les longueurs données ne permettent donc pas de satisfaire à l'inégalité triangulaire.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  ${texteEnCouleur('Aucun triangle de ce type n\\'existe')}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4: // 2 longueurs et le périmètre\n\t\t\t\t\t// on utilise la méthode isTrueTriangleLongueurs(), le triangle ne sera pas plat.\n\t\t\t\t\twhile (!triangle.isTrueTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = randint(l_min, l_max);\n\t\t\t\t\t\tl2 = randint(l_min, l_max);\n\t\t\t\t\t\tl3 = randint(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et dont le périmètre vaut $${triangle.getPerimetre()}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Puisque le périmètre vaut $${triangle.getPerimetre()}$ cm alors la troisième longueur vaut ${triangle.getLongueurs()[2]} = $${triangle.getPerimetre()}$ cm - $${triangle.l1}$ cm - $${triangle.l2}$ cm = $${triangle.l3}$ cm.`;\n\t\t\t\t\ttexteCorr += `<br> Donc dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexteCorr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${calcul(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\t// texteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('deux tels triangles existent')}.`;\n\t\t\t\t\t// texteCorr += `<br> Les deux étant obtenus l'un à partir de l'autre par symétire axiale.`;\n\t\t\t\t\ttexteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('plusieurs tels triangles existent')}.`;\n\t\t\t\t\ttexteCorr += `<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5: //3 angles constructible\n\t\t\t\t\twhile (!triangle.isTrueTriangleAngles()) {\n\t\t\t\t\t\ta1 = randint(a_min, a_max, [0, 180]);\n\t\t\t\t\t\ta2 = randint(a_min, a_max, [0, 180]);\n\t\t\t\t\t\ta3 = calcul(180 - a1 - a2);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexteCorr += `<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6: // 3 angles plat\n\t\t\t\t\twhile (!triangle.isPlatTriangleAngles()) {\n\t\t\t\t\t\ta1 = randint(a_min, a_max);\n\t\t\t\t\t\ta2 = randint(a_min, a_max);\n\t\t\t\t\t\ta3 = calcul(180 - a1 - a2);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br> Deux des trois angles du triangle valent $0\\\\degree$, ${texteEnCouleur(triangle.getNom() + ' est donc un triangle plat')}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexteCorr += `<br> On les obtient en traçant des segments et en plaçant le troisième sommet sur ce segment, les longueurs n'ayant aucune importance.`;\n\t\t\t\t\ttexteCorr += `<br> Dans le cas présent, il s'agit d'un segment $[${current_triangle[2].angle.split('')[12]}${current_triangle[2].angle.split('')[14]}]$ sur lequel on place un point ${current_triangle[2].angle.split('')[13]}.`;\n\t\t\t\t\t//texteCorr += `<br> ${JSON.stringify(current_triangle)}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7: // 3 angles non constructible\n\t\t\t\t\t// on initialise les angles sinon la méthode isTrueTriangleAngles() renvoie false!\n\t\t\t\t\ta1 = randint(a_min, a_max);\n\t\t\t\t\ta2 = randint(a_min, a_max);\n\t\t\t\t\ta3 = randint(a_min, a_max);\n\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\twhile (triangle.isTrueTriangleAngles()) {\n\t\t\t\t\t\ta1 = randint(a_min, a_max);\n\t\t\t\t\t\ta2 = randint(a_min, a_max);\n\t\t\t\t\t\ta3 = randint(a_min, a_max);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${calcul(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> Si le triangle était constructible, la somme des trois angles vaudrait $180\\\\degree$,`;\n\t\t\t\t\ttexteCorr += ` or ce n'est pas le cas.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  ${texteEnCouleur('Aucun triangle de ce type n\\'existe')}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8: // 2 angles et le 3e fonction du 1er ou du 2eme\n\t\t\t\t\tlet angle_rg = randint(0, 1);\n\t\t\t\t\tlet operations_possibles = ['triple', 'quadruple', 'quart'];\n\t\t\t\t\tlet operation = '';\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexteCorr = ``;\n\t\t\t\t\ttexteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\tswitch (angle_rg) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\ta1 = randint(a_min, a_max);\n\t\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\t\toperation = operations_possibles[randint(0, 2)];\n\t\t\t\t\t\t\ttexte += `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${texNombre(triangle.a1)}\\\\degree$ ; `;\n\t\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\t\tcase 'triple':\n\t\t\t\t\t\t\t\t\ta2 = calcul((180 - a1) / 4);\n\t\t\t\t\t\t\t\t\ta3 = calcul(3 * a2);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quadruple':\n\t\t\t\t\t\t\t\t\ta2 = calcul((180 - a1) / 5);\n\t\t\t\t\t\t\t\t\ta3 = calcul(4 * a2);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quart':\n\t\t\t\t\t\t\t\t\ta2 = calcul(4 * (180 - a1) / 5);\n\t\t\t\t\t\t\t\t\ta3 = calcul(a2 / 4);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${texNombre(triangle.a2)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[1]}.`;\n\t\t\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[1].angle} = $${texNombre(current_triangle[1].valeur)}\\\\degree$  d'où ${current_triangle[2].angle} = $${texNombre(current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\ta2 = randint(a_min, a_max);\n\t\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\t\toperation = operations_possibles[randint(0, 2)];\n\t\t\t\t\t\t\ttexte += `${triangle.getNom()} tel que ${triangle.getAngles()[1]} $= ${texNombre(triangle.a2)}\\\\degree$ ; `;\n\t\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\t\tcase 'triple':\n\t\t\t\t\t\t\t\t\ta1 = calcul((180 - a2) / 4);\n\t\t\t\t\t\t\t\t\ta3 = calcul(3 * a1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quadruple':\n\t\t\t\t\t\t\t\t\ta1 = calcul((180 - a2) / 5);\n\t\t\t\t\t\t\t\t\ta3 = calcul(4 * a1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quart':\n\t\t\t\t\t\t\t\t\ta1 = calcul(4 * (180 - a2) / 5);\n\t\t\t\t\t\t\t\t\ta3 = calcul(a1 / 4);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t\t\ttexte += `${triangle.getAngles()[0]} $= ${texNombre(triangle.a1)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[0]}.`;\n\t\t\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttexteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[0].angle} = $${texNombre(current_triangle[0].valeur)}\\\\degree$  d'où ${current_triangle[2].angle} = $${texNombre(current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>Donc ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${texNombre(current_triangle[0].valeur)}\\\\degree + ${texNombre(current_triangle[1].valeur)}\\\\degree + ${texNombre(current_triangle[2].valeur)}\\\\degree = ${texNombrec(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexteCorr += `<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.listeQuestions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\t\tlisteQuestionsToContenu(this);\n\t};\n\tif (this.exo == this.beta + '5G21-1') {\n\t\tthis.besoinFormulaireNumerique = ['Niveau de difficulté', 2, \"1 : 3 longueurs\\n2 : 2 longueurs et le périmètre\"];\n\t} else if (this.exo == this.beta + '5G31-1') {\n\t\tthis.besoinFormulaireNumerique = ['Niveau de difficulté', 2, \"1 : 3 angles\\n2 : 2 angles et le 3e en fonction du 1er ou du 2eme\"];\n\t} else {\n\t\t//this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : sans conversions de longueurs\\n2 : avec conversions de longueurs\"];\n\t};\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}