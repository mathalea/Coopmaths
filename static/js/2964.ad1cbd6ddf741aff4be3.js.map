{"version":3,"sources":["webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","style","split","forEach","paire","exec","key","value","error","console","addText","text","appendChild","window","document","createTextNode","get","id","strict","TypeError","getElementById","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","exerciceInteractif","exercice","amcType","addEventListener","button","querySelector","numeroExercice","event","nbQuestions","i","autoCorrection","spanReponseLigne","champTexte","replaceAll","reponse","valeur","toString","innerHTML","readOnly","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","propositions","length","statut","proposition","indice","label","check","backgroundColor","checked","typeFeedback","feedback","messageFeedback","message","type","querySelectorAll","uicheck","exerciceQcm","eltFeedback","eltExercice","correctionInteractive","exerciceCustom","propositionsQcm","titre","texte","texteCorr","espace","context","undefined","options","ordered","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","interactif","setReponse","valeurs","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","reponses","Array","isArray","param","types","addFeedback","container","includes","cssDiv","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/2964.ad1cbd6ddf741aff4be3.js","sourcesContent":["/* global HTMLElement SVGElement Element */\n/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * Les styles doivent être écrits en camelCase dans le version JS et non CSS\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nexport function setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (const prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n\n/**\n * S'assure que elt est bien un élément du DOM et le retourne (throw sinon)\n * @param {string|HTMLElement|SVGElement|Element} elt Si c'est une string on ira chercher l'élément avec getElementById\n * @param {string} [type] pour restreindre à un type d'élément, html|svg\n * @return {HTMLElement|SVGElement|Element}\n * @throws {TypeError} Si elt n'était pas un élément du type voulu\n */\nexport function enforceElt (elt, type) {\n  if (typeof elt === 'string') {\n    elt = document.getElementById(elt)\n    if (!elt) throw Error(`Aucun élément d’id ${elt}`)\n  }\n  switch (type) {\n    case 'html':\n      if (elt instanceof HTMLElement) return elt\n      throw TypeError('HTMLElement indispensable manquant')\n    case 'svg':\n      if (elt instanceof SVGElement) return elt\n      throw TypeError('SVGElement indispensable manquant')\n    default:\n      if (elt instanceof Element) return elt\n  }\n  throw TypeError('Element indispensable manquant')\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\nimport { addElement, get, setStyles } from './dom.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n  if (exercice.amcType === 'custom') exerciceCustom(exercice)\n  // Pour les exercices de type custom, on appelle la méthode correctionInteractive() définie dans l'exercice\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnValidationEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnValidationEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1 && exercice.autoCorrection[i].propositions[indiceFeedback].feedback) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnValidationEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnValidationEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.', ',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true, indice } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}${indice || ''}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {array || number} a\n */\nexport function setReponse (exercice, i, valeurs, { digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0 } = {}) {\n  let reponses = []\n  if (!Array.isArray(valeurs)) {\n    reponses = [valeurs]\n  } else {\n    reponses = valeurs\n  }\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n  for (const reponse of reponses) {\n    exercice.autoCorrection[i].reponse.valeur = reponse\n  }\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnValidationEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceCustom (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnValidationEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        // Le get est non strict car on sait que l'élément n'existe pas à la première itération de l'exercice\n        let eltFeedback = get(`feedbackEx${exercice.numeroExercice}`, false)\n        // On ajoute le div pour le feedback\n        if (!eltFeedback) {\n          const eltExercice = get(`exercice${exercice.numeroExercice}`)\n          eltFeedback = addElement(eltExercice, 'div', { id: `feedbackEx${exercice.numeroExercice}` })\n        }\n        setStyles(eltFeedback, 'marginBottom: 20px')\n        if (eltFeedback) eltFeedback.innerHTML = ''\n        // On utilise la correction définie dans l'exercice\n        exercice.correctionInteractive(eltFeedback)\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n","import { addElement, addText, get } from './dom'\n/**\n * Fonctions pour gérer les messages utilisateur (feedback erreur|warning ou messages positifs)\n * @module\n */\n\n/**\n * Les types possibles\n * @type {string[]}\n */\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} feedback.message\n * @param {string} [feedback.type=error]\n * @param {string} [feedback.titre]\n * @return {HTMLElement} L'élément du feedback (déjà ajouté dans le container)\n */\nexport function addFeedback (container, { message, type = 'error', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  if (!message) throw Error('Message obligatoire pour tout retour utilisateur')\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'noLatex':\n      addFeedback(container, {\n        titre: 'Pas de contenu Latex pour cet exercice',\n        message: `L'exercice ${exercice} n'a, pour l'instant, pas de version Latex`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n  return div\n}\n"],"sourceRoot":""}