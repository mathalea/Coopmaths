{"version":3,"file":"js/35281.ec697687db4ad2e83cd9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Construire_par_symetrie.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, creerNomDePolygone, numAlpha } from '../../modules/outils.js'\nimport { point, tracePoint, pointSurDroite, labelPoint, droite, droiteVerticaleParPoint, droiteParPointEtPente, codageMediatrice, codageMilieu, segment, polygone, nommePolygone, rotation, symetrieAxiale, grille, seyes, mathalea2d, droiteHorizontaleParPoint, dessousDessus, aireTriangle, projectionOrtho, longueur, translation, vecteur, norme, homothetie, texteParPoint, estSurDroite, vide2d } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\nexport const dateDeModificationImportante = '14/11/2021'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * @author Jean-Claude Lhote  (Ajout AMC par Eric Elter)\n * Fonction générale pour les exercices de construction de symétriques (centrale/axiale et points/triangles)\n * références  6G24-1, 6G24-2, 5G10-1, 5G10-2, 5G11-1 et 5G11-2\n * Permet une sortie html/pdf sur petits carreaux/gros carreaux/papier blanc\n * Relecture : Novembre 2021 par EE\n */\n\nexport default function ConstruireParSymetrie () {\n  Exercice.call(this)\n  this.titre = 'Construire par Symétrie...'\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.sup3 = 1\n  this.figure = false\n  // La fonction qui suit va chercher 3 points au hasard placés par rapport à la droite d de la façon demandée\n  // Elle va s'assurer que la distance entre les projetés n'est pas trop petite afin d'espacer les corrections\n  // Si pour une raison ou une autre elle ne trouve pas de point convenable, un message dans la console le signale.\n  const choisi3Points = function (d, lieu = ['dessus', 'dessous', 'sur']) {\n    let A, B, C\n    let pA, pB, pC\n    let lAB, lAC, lBC\n    let hA, hB, hC\n    let count = 0\n    let count3 = 0\n    do { // on vérifie que les points sont assez espacés les uns des autres.\n      do { // on vérifie que le point est du bon côté et à distance suffisante de la droite.\n        if (lieu[0] === 'sur') A = pointSurDroite(d, randint(-6, 6))\n        else A = point(randint(-8, 8), randint(-8, 8))\n        pA = projectionOrtho(A, d)\n        hA = longueur(A, pA)\n        count++\n      } while (((hA < 2 && lieu[0] !== 'sur') || dessousDessus(d, A) !== lieu[0]) && count < 50)\n      if (count === 50) {\n        window.notify('Choisi3Points : Impossible de trouver le premier des 3 points', { lieu, d })\n      }\n      count = 0\n      do { // on vérifie que le point est du bon côté et à distance suffisante de la droite.\n        if (lieu[1] === 'sur') B = pointSurDroite(d, randint(-6, 6))\n        else B = point(randint(-8, 8, A.x), randint(-8, 8, A.y))\n        pB = projectionOrtho(B, d)\n        hB = longueur(B, pB)\n        count++\n      } while (((hB < 2 && lieu[1] !== 'sur') || dessousDessus(d, B) !== lieu[1]) && count < 50)\n      if (count === 50) {\n        window.notify('Choisi3Points : Impossible de trouver le deuxième des 3 points', { lieu, d })\n      }\n      count = 0\n      do { // on vérifie que le point est du bon côté et à distance suffisante de la droite.\n        if (lieu[2] === 'sur') C = pointSurDroite(d, randint(-8, 8))\n        else C = point(randint(-8, 8, [A.x, B.x]), randint(-8, 8, [A.y, B.y]))\n        pC = projectionOrtho(C, d)\n        hC = longueur(C, pC)\n        count++\n      } while (((hC < 2 && lieu[2] !== 'sur') || dessousDessus(d, C) !== lieu[2]) && count < 50)\n      if (count === 50) {\n        window.notify('Choisi3Points : Impossible de trouver le troisième des 3 points', { lieu, d })\n      }\n      lAB = longueur(pA, pB)\n      lAC = longueur(pA, pC)\n      lBC = longueur(pB, pC)\n      count3++\n    } while ((lAB < 2 || lAC < 2 || lBC < 2 || aireTriangle(polygone(A, B, C)) < 15) && count3 < 20)\n    if (count3 === 50) { // si on en est là, c'est qu'il y a trop de contraintes\n      window.notify('Choisi3Points : Impossible de trouver 3 points', { lieu, d })\n    }\n    return [A, B, C] // Il y aura quand même trois points, même si ils ne conviennent pas au regard des contraintes\n  }\n  this.nouvelleVersion = function () {\n    let lieux, positionLabelDroite\n    this.sup = parseInt(this.sup)\n    this.sup3 = Number(this.sup3)\n    if (this.sup3 === 1) lieux = choice([['dessus', 'dessus', 'dessus'], ['dessous', 'dessous', 'dessous']])\n    else if (this.sup3 === 2) lieux = choice([['dessus', 'sur', 'dessus'], ['dessous', 'sur', 'dessous']])\n    else if (this.sup3 === 3) lieux = choice([['dessus', 'dessous', 'sur'], ['sur', 'dessous', 'dessus'], ['dessus', 'sur', 'dessous']])\n    else if (this.sup3 === 4) lieux = choice([['dessus', 'dessous', 'dessus'], ['dessus', 'dessus', 'dessous']])\n    else lieux = choice([['dessus', 'dessous', 'dessus'], ['dessus', 'dessus', 'dessous'], ['dessus', 'sur', 'dessus'], ['dessous', 'sur', 'dessus'], ['dessus', 'dessous', 'sur'], ['sur', 'dessous', 'dessus'], ['dessus', 'sur', 'dessous'], ['dessus', 'dessous', 'dessus'], ['dessus', 'dessus', 'dessous']])\n    let typesDeQuestionsDisponibles = []\n    switch (this.sup) {\n      case 1:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [3]\n        } else {\n          typesDeQuestionsDisponibles = [0]\n        }\n        break\n      case 2:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [4]\n        } else {\n          typesDeQuestionsDisponibles = [1]\n        }\n        break\n      case 3:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [5]\n        } else {\n          typesDeQuestionsDisponibles = [2]\n        }\n        break\n      case 4:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [3, 4, 5]\n        } else {\n          typesDeQuestionsDisponibles = [0, 1, 2]\n        }\n        break\n      case 5:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [7]\n        } else {\n          typesDeQuestionsDisponibles = [6]\n        }\n        break\n      case 6:\n        if (this.figure) {\n          typesDeQuestionsDisponibles = [3, 4, 5, 7]\n        } else {\n          typesDeQuestionsDisponibles = [0, 1, 2, 6]\n        }\n        break\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, sc\n    if (parseInt(this.sup2) === 2) sc = 0.8\n    else sc = 0.5\n\n    let A; let AA; let cA; let sA\n    let B\n    let C; let CC; let cC; let sC; let sCE\n    let D; let DD; let cD; let sD; let sDE\n    let E; let EE; let cE; let sE; let sED\n    let sEC\n    let d; let enonce\n    let correction\n    let g\n    let carreaux\n    let k\n    const objetsEnonce = []\n    const objetsCorrection = []\n    let p1; let p2; let p1nom\n    for (\n      let i = 0, cpt = 0, numQuestion;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      objetsEnonce.length = 0\n      objetsCorrection.length = 0\n      switch (listeTypeDeQuestions[i]) {\n        case 0: // symétrie d'axe horizontal ou vertical de points\n          p1nom = creerNomDePolygone(5, 'PQX')\n          k = choice([true, false]) // k = true axe horizontal sinon vertical\n          A = point(0, 0)\n          if (k) d = droiteHorizontaleParPoint(A)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6)\n          d.isVisible = true\n          d.epaisseur = 2\n          if (!k) {\n            if (this.sup3 === 1) lieux = choice([['gauche', 'gauche', 'gauche'], ['droite', 'droite', 'droite']])\n            else if (this.sup3 === 2) lieux = choice([['gauche', 'sur', 'gauche'], ['droite', 'droite', 'sur']])\n            else if (this.sup3 === 3) lieux = choice([['sur', 'gauche', 'droite'], ['gauche', 'sur', 'droite']])\n            else lieux = choice([['gauche', 'droite', 'gauche'], ['droite', 'gauche', 'droite']])\n          } else {\n            if (this.sup3 === 1) lieux = choice([['dessus', 'dessus', 'dessus'], ['dessous', 'dessous', 'dessous']])\n            else if (this.sup3 === 2) lieux = choice([['dessus', 'sur', 'dessus'], ['dessous', 'dessous', 'sur']])\n            else if (this.sup3 === 3) lieux = choice([['sur', 'dessus', 'dessous'], ['dessus', 'sur', 'dessous']])\n            else lieux = choice([['dessus', 'dessous', 'dessus'], ['dessous', 'dessus', 'dessous']])\n          }\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'above')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'above')\n          cC = estSurDroite(C, d) ? C : codageMediatrice(C, CC, 'red', '|')\n          cD = estSurDroite(D, d) ? D : codageMediatrice(D, DD, 'blue', 'X')\n          cE = estSurDroite(E, d) ? E : codageMediatrice(E, EE, 'green', 'O')\n          sC = estSurDroite(C, d) ? vide2d() : segment(C, CC)\n          sD = estSurDroite(D, d) ? vide2d() : segment(D, DD)\n          sE = estSurDroite(E, d) ? vide2d() : segment(E, EE)\n          sCE = droite(CC, EE, '', 'gray')\n          sCE.pointilles = true\n          sED = droite(EE, D, '', 'gray')\n          sED.pointilles = true\n          sDE = droite(DD, E, '', 'gray')\n          sDE.pointilles = true\n          sEC = droite(C, E, '', 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(C, D, E, CC, DD, EE), labelPoint(C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(C, D, E), labelPoint(C, D, E), d)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 4) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n\n          break\n        case 1: // symétries axiales d'axes à 45° de points (6ème)\n          p1nom = creerNomDePolygone(5, 'PQX')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 1])\n          d = droiteParPointEtPente(A, k)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          d.isVisible = true\n          d.epaisseur = 2;\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'above')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'above')\n          cC = estSurDroite(C, d) ? C : codageMediatrice(C, CC, 'red', '|')\n          cD = estSurDroite(D, d) ? D : codageMediatrice(D, DD, 'blue', 'X')\n          cE = estSurDroite(E, d) ? E : codageMediatrice(E, EE, 'green', 'O')\n          sC = estSurDroite(C, d) ? vide2d() : segment(C, CC)\n          sD = estSurDroite(D, d) ? vide2d() : segment(D, DD)\n          sE = estSurDroite(E, d) ? vide2d() : segment(E, EE)\n          sCE = droite(CC, EE, '', 'gray')\n          sCE.pointilles = true\n          sED = droite(EE, D, '', 'gray')\n          sED.pointilles = true\n          sDE = droite(DD, E, '', 'gray')\n          sDE.pointilles = true\n          sEC = droite(C, E, '', 'gray')\n          sEC.pointilles = true\n          objetsCorrection.push(d, tracePoint(C, D, E, CC, DD, EE), labelPoint(C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(C, D, E), labelPoint(C, D, E), d)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 4) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n\n          break\n        case 2: // Axe de symétrie légèrement penché (utilisation du quadrillage plus complexe)\n          p1nom = creerNomDePolygone(5, 'PQX')\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, choice([-1, 1], A.y), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 2;\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'above')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'above')\n          cC = estSurDroite(C, d) ? C : codageMediatrice(C, CC, 'red', '|')\n          cD = estSurDroite(D, d) ? D : codageMediatrice(D, DD, 'blue', 'X')\n          cE = estSurDroite(E, d) ? E : codageMediatrice(E, EE, 'green', 'O')\n          sC = estSurDroite(C, d) ? vide2d() : segment(C, CC)\n          sD = estSurDroite(D, d) ? vide2d() : segment(D, DD)\n          sE = estSurDroite(E, d) ? vide2d() : segment(E, EE)\n          sCE = segment(CC, EE, 'gray')\n          sCE.pointilles = true\n          sED = segment(EE, D, 'gray')\n          sED.pointilles = true\n          sDE = segment(DD, E, 'gray')\n          sDE.pointilles = true\n          sEC = segment(C, E, 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(C, D, E, CC, DD, EE), labelPoint(C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(C, D, E), labelPoint(C, D, E), d)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 4) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n          break\n\n        case 3: // symétrie axiale (Axe vertical ou horizontal) d'un triangle\n          p1nom = creerNomDePolygone(5, 'PQX')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([true, false]) // si k est true alors d est horizontale sinon elle est verticale\n          if (k) d = droiteHorizontaleParPoint(A)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n\n          if (!k) {\n            if (this.sup3 === 1) lieux = choice([['gauche', 'gauche', 'gauche'], ['droite', 'droite', 'droite']])\n            else if (this.sup3 === 2) lieux = choice([['gauche', 'sur', 'gauche'], ['droite', 'droite', 'sur']])\n            else if (this.sup3 === 3) lieux = choice([['sur', 'gauche', 'droite'], ['gauche', 'sur', 'droite']])\n            else lieux = choice([['gauche', 'droite', 'gauche'], ['droite', 'gauche', 'droite']])\n          } else {\n            if (this.sup3 === 1) lieux = choice([['dessus', 'dessus', 'dessus'], ['dessous', 'dessous', 'dessous']])\n            else if (this.sup3 === 2) lieux = choice([['dessus', 'sur', 'dessus'], ['dessous', 'dessous', 'sur']])\n            else if (this.sup3 === 3) lieux = choice([['sur', 'dessus', 'dessous'], ['dessus', 'sur', 'dessous']])\n            else lieux = choice([['dessus', 'dessous', 'dessus'], ['dessous', 'dessus', 'dessous']])\n          }\n          d.isVisible = true\n          d.epaisseur = 2;\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = estSurDroite(p1.listePoints[0], d) ? vide2d() : codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = estSurDroite(p1.listePoints[1], d) ? vide2d() : codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = estSurDroite(p1.listePoints[2], d) ? vide2d() : codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = estSurDroite(p1.listePoints[0], d) ? vide2d() : segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = estSurDroite(p1.listePoints[1], d) ? vide2d() : segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = estSurDroite(p1.listePoints[2], d) ? vide2d() : segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          objetsCorrection.push(d, cC, cD, cE, sC, sD, sE, CC, DD, p1, p1.sommets, p2, p2.sommets, sCE, sED)\n          objetsEnonce.push(d, CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n\n          break\n        case 4: // symetrie axiale (Axe à 45°) d'un triangle\n          p1nom = creerNomDePolygone(5, 'PQX')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 1])\n\n          d = droiteParPointEtPente(A, k)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          if (k === 2) {\n            A.positionLabel = 'above'\n            B.positionLabel = 'above'\n          }\n          d.isVisible = true\n          d.epaisseur = 2;\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = estSurDroite(p1.listePoints[0], d) ? vide2d() : codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = estSurDroite(p1.listePoints[1], d) ? vide2d() : codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = estSurDroite(p1.listePoints[2], d) ? vide2d() : codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          objetsCorrection.push(d, cC, cD, cE, sC, sD, sE, CC, DD, p1, p1.sommets, p2, p2.sommets, sCE, sED)\n          objetsEnonce.push(d, CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n          break\n        case 5: // symetrie axiale Axe légèrement penché\n          p1nom = creerNomDePolygone(5, 'PQX')\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, choice([-1, 1]), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 2;\n          [C, D, E] = choisi3Points(d, lieux)\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          E.nom = p1nom[4]\n          E.positionLabel = 'above'\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = estSurDroite(p1.listePoints[0], d) ? vide2d() : codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = estSurDroite(p1.listePoints[1], d) ? vide2d() : codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = estSurDroite(p1.listePoints[2], d) ? vide2d() : codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          //  inter = pointIntersectionDD(sCE, sED)\n          objetsCorrection.push(d, cC, cD, cE, sC, sD, sE, CC, DD, p1, p2, sCE, sED)\n          objetsEnonce.push(d, CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(d)$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\n          correction = 'Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(d)$.<br><br>'\n          break\n        case 6: // 3 symétries centrales de points\n          p1nom = creerNomDePolygone(4, 'PQX')\n          B = point(7, randint(-1, 1), `${p1nom[1]}`, 'above')\n          d = droiteParPointEtPente(B, 0);\n          [A, C, D] = choisi3Points(d, choice([['dessus', 'dessous', 'dessus'], ['dessous', 'dessus', 'dessous']]))\n          A.nom = p1nom[0]\n          A.positionLabel = 'above'\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          CC = rotation(C, B, 180, `${p1nom[2]}'`, 'above')\n          DD = rotation(D, B, 180, `${p1nom[3]}'`, 'above')\n          AA = rotation(A, B, 180, `${p1nom[0]}'`, 'above')\n          cC = codageMilieu(C, CC, 'red', '|', false)\n          cD = codageMilieu(D, DD, 'blue', '||', false)\n          cA = codageMilieu(A, AA, 'green', '|||', false)\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sA = segment(A, AA)\n\n          objetsCorrection.push(tracePoint(A, C, D, CC, DD, AA), labelPoint(C, D, CC, DD, AA), cC, cD, cA, sC, sD, sA)\n          objetsEnonce.push(tracePoint(C, D), labelPoint(C, D))\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[0]}'$ symétrique de $${p1nom[0]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 4) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) + 1)\n          correction = ''\n          break\n        case 7: // Symétrie centrale de triangle\n          p1nom = creerNomDePolygone(4, 'PQX')\n          B = point(7, randint(-1, 1), `${p1nom[1]}`, 'above')\n          d = droiteParPointEtPente(B, 0);\n          [A, C, D] = choisi3Points(d, choice([['dessus', 'dessous', 'dessus'], ['dessous', 'dessus', 'dessous']]))\n          A.nom = p1nom[0]\n          A.positionLabel = 'above'\n          C.nom = p1nom[2]\n          C.positionLabel = 'above'\n          D.nom = p1nom[3]\n          D.positionLabel = 'above'\n          p1 = polygone(A, C, D)\n          p2 = rotation(p1, B, 180)\n          p2.listePoints[0].nom = `${p1nom[0]}'`\n          p2.listePoints[1].nom = `${p1nom[2]}'`\n          p2.listePoints[2].nom = `${p1nom[3]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMilieu(p1.listePoints[0], p2.listePoints[0], 'red', '|', false)\n          cD = codageMilieu(p1.listePoints[1], p2.listePoints[1], 'blue', 'X', false)\n          cA = codageMilieu(p1.listePoints[2], p2.listePoints[2], 'green', 'O', false)\n          sA = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sC = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sD = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\n          objetsCorrection.push(tracePoint(B), labelPoint(B), cC, cD, cA, sC, sD, sA, DD, CC, p1, p2)\n          objetsEnonce.push(tracePoint(B), labelPoint(B), CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[0]}'${p1nom[2]}'${p1nom[3]}'$ symétrique de $${p1nom[0]}${p1nom[2]}${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br><br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = ''\n          break\n      }\n      if (listeTypeDeQuestions[i] < 6) {\n        positionLabelDroite = translation(pointSurDroite(d, d.b === 0 ? Ymin + 1 : Xmin + 1), homothetie(vecteur(d.a, d.b), A, 0.5 / norme(vecteur(d.a, d.b))))\n        objetsEnonce.push(texteParPoint('(d)', positionLabelDroite, 'milieu', 'black', 1.5, 'middle', true))\n        objetsCorrection.push(texteParPoint('(d)', positionLabelDroite, 'milieu', 'black', 1.5, 'middle', true))\n      }\n      const params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: 20,\n        scale: sc\n      }\n      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (parseInt(this.sup2) === 2) {\n        k = 0.8\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        k = 0.5\n        carreaux = ''\n      }\n      objetsEnonce.push(g, carreaux)\n      objetsCorrection.push(g, carreaux)\n      enonce += mathalea2d(params\n        ,\n        objetsEnonce\n      )\n      correction += mathalea2d(\n        params,\n        objetsCorrection\n      )\n\n      if (context.isAmc) {\n        this.autoCorrection[i] =\n          {\n            enonce: enonce,\n            propositions: [\n              {\n                texte: correction,\n                statut: 3, // (ici c'est le nombre de lignes du cadre pour la réponse de l'élève sur AMC)\n                feedback: '',\n                sanscadre: true // EE : ce champ est facultatif et permet (si true) de cacher le cadre et les lignes acceptant la réponse de l'élève\n              }\n            ]\n          }\n      }\n\n      if (this.listeQuestions.indexOf(enonce) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(enonce + '<br>')\n        this.listeCorrections.push(correction + '<br>')\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 6, '1 : Axe horizontal ou vertical\\n2 : Axe oblique à 45°\\n3 : Axe avec une légère pente\\n4 : Toutes les symétries axiales\\n5 : Symétrie centrale\\n6 : Mélange']\n  this.besoinFormulaire2Numerique = [\n    'Type de cahier',\n    3,\n    ' 1 : Cahier à petits carreaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n  this.besoinFormulaire3Numerique = ['Niveau de difficulté pour la symétrie axiale', 5, '1 : Tous les points du même côté de l\\'axe\\n2 : Deux points du même côté et le troisième sur l\\'axe\\n3 : Un point sur l\\'axe et un de chaque côté\\n4 : Deux points d\\'un côté de l\\'axe et le troisième de l\\'autre côté\\n5 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["dateDeModificationImportante","amcReady","amcType","ConstruireParSymetrie","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","sup","sup2","sup3","figure","choisi3Points","d","lieu","A","B","C","pA","pB","pC","lAB","lAC","lBC","hA","hB","hC","count","count3","pointSurDroite","randint","point","projectionOrtho","longueur","dessousDessus","window","notify","x","y","aireTriangle","polygone","nouvelleVersion","lieux","positionLabelDroite","parseInt","Number","choice","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","Xmin","Xmax","Ymin","Ymax","sc","AA","cA","sA","CC","cC","sC","sCE","D","DD","cD","sD","sDE","E","EE","cE","sE","sED","sEC","enonce","correction","g","carreaux","k","listeQuestions","listeCorrections","objetsEnonce","objetsCorrection","p1","p2","p1nom","numQuestion","i","cpt","length","creerNomDePolygone","droiteHorizontaleParPoint","droiteVerticaleParPoint","isVisible","epaisseur","nom","positionLabel","symetrieAxiale","estSurDroite","codageMediatrice","vide2d","segment","droite","pointilles","push","tracePoint","labelPoint","context","numAlpha","Math","floor","min","ceil","max","droiteParPointEtPente","listePoints","nommePolygone","sommets","rotation","codageMilieu","translation","b","homothetie","vecteur","a","norme","texteParPoint","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","seyes","mathalea2d","autoCorrection","propositions","texte","statut","feedback","sanscadre","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3Numerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}