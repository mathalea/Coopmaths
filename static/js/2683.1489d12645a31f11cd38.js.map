{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5R12-2.js","webpack://mathalea/./src/js/exercices/5e/5R12.js"],"names":["titre","Reperage_point_du_plan","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","spacing","spacingCorr","sup","sup2","quart_de_plan","listePackages","nouvelleVersion","numeroExercice","texte","texteCorr","listeQuestions","listeCorrections","contenu","contenuCorrection","grille","w","h","k","xmin","xmax","ymin","ymax","shiftxnom","shiftynom","liste_points","points","Math","round","window","innerHeight","pow","parseInt","nom","liste_abs","liste_ord","i","calcul","push","X0","Y0","creerCouples","j","shuffle","l","lettre","randint","lettreDepuisChiffre","context","id_du_div","Date","now","SVGExist","setInterval","$","length","html","mon_svg","SVG","addTo","viewbox","size","AxesXY","SVG_repere","SVG_tracer_point","clearInterval","Latex_repere","texNombre","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","Reperage_point_du_quart_de_plan"],"mappings":"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","file":"js/2683.1489d12645a31f11cd38.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenuSansNumero, creerCouples, randint, shuffle, calcul, lettreDepuisChiffre, texNombre } from '../../modules/outils.js'\nimport { SVG_tracer_point, SVG_repere, Latex_repere } from '../../modules/macroSvgJs.js'\nimport { SVG } from '@svgdotjs/svg.js'\n\nexport const titre = 'Déterminer les coordonnées (relatives) d’un point'\n\n/**\n * Lire les coordonnées d'un point du plan avec une précision allant de l'unité à 0,25.\n * @author Jean-Claude Lhote\n * Références 5R12-2\n */\nexport default function Reperage_point_du_plan () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Donner les coordonnées des points représentés'\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.sup = 1\n  this.sup2 = true\n  this.quart_de_plan = false\n  this.listePackages = 'tkz-euclide'\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let texte, texteCorr\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n    let liste_points = []; let points = []\n    let grille, w, h, k, xmin, xmax, ymin, ymax, shiftxnom, shiftynom\n    h = Math.round(window.innerHeight * 0.7)\n    w = h\n    k = Math.pow(2, parseInt(this.sup) - 1)\n    const nom = []\n    grille = this.sup2\n    if (this.quart_de_plan) {\n      xmin = 0; ymin = 0; xmax = 10; ymax = 10\n    } else {\n      xmin = -5; ymin = -5; xmax = 5; ymax = 5\n    }\n    const liste_abs = []; const liste_ord = []\n    for (let i = calcul(xmin + 1 / k); i < calcul(xmax - (parseInt(this.sup) - 1) / k); i = calcul(i + 1 / k)) {\n      liste_abs.push(i)\n    }\n    for (let i = calcul(ymin + 1 / k); i < calcul(ymax - (parseInt(this.sup) - 1) / k); i = calcul(i + 1 / k)) {\n      liste_ord.push(i)\n    }\n    let X0 = false; let Y0 = false\n    liste_points = creerCouples(liste_abs, liste_ord, 10 * k)\n    for (let j = 0; j < 5; j++) {\n      points.push(liste_points[j])\n      if (points[j][0] == 0) { X0 = true }\n      if (points[j][1] == 0) { Y0 = true }\n    }\n    if (!X0) { points[0][0] = 0 }\n    if (!Y0) { points[1][1] = 0 }\n    points = shuffle(points)\n\n    for (let l = 0, lettre = randint(1, 20); l < 5; l++) { nom.push(lettreDepuisChiffre(l + lettre)) }\n    if (context.isHtml) {\n      const id_unique = `${Date.now()}`\n      const id_du_div = `div_svg${numeroExercice}${id_unique}`\n      this.consigne = `<div id=\"${id_du_div}\" style=\"height: ${h}px\"></div>`\n      if (!window.SVGExist) { window.SVGExist = {} } // Si SVGExist n'existe pas on le créé\n\n      // SVGExist est un dictionnaire dans lequel on stocke les listenner sur la création des div\n      window.SVGExist[id_du_div] = setInterval(function () {\n        if ($(`#${id_du_div}`).length) {\n          $(`#${id_du_div}`).html('') // Vide le div pour éviter les SVG en doublon\n          const mon_svg = SVG().addTo(`#${id_du_div}`).viewbox(0, 0, 520, 520).size('100%', '100%')\n          const AxesXY = SVG_repere(mon_svg, xmin, xmax, ymin, ymax, k, k, 500, 500, grille)\n          for (let i = 0; i < 5; i++) {\n            if (points[i][0] == 0 || points[i][0] == 0.25) { shiftxnom = 20 } else { shiftxnom = 0 }\n            shiftynom = 0\n            if (points[i][1] == -0.5) { shiftynom = 10 }\n            if (points[i][1] == -0.25) { shiftynom = 20 }\n            SVG_tracer_point(mon_svg, calcul(20 + (points[i][0] - xmin) * 480 / (xmax - xmin)), calcul(480 - (points[i][1] - ymin) * 480 / (ymax - ymin)), nom[i], 'blue', -10 + shiftxnom, 10 + shiftynom, [true, AxesXY[0], AxesXY[1]])\n          }\n          clearInterval(SVGExist[id_du_div]) // Arrête le timer\n        }\n      }, 100) // Vérifie toutes les 100ms\n    } else { // sortie Latex\n      texte = '\\\\begin{tikzpicture}'\n      texte += Latex_repere(xmin, xmax, ymin, ymax, k, k, grille)\n      for (let i = 0; i < 5; i++) {\n        texte += `\\n\\t \\\\tkzDefPoint(${points[i][0]},${points[i][1]}){A}`\n        texte += '\\n\\t \\\\tkzDrawPoint[shape=cross out,color=blue,size=6](A)'\n        texte += `\\n\\t \\\\tkzLabelPoint[above right=3pt,fill=white,fill opacity=0.7,text opacity=1,inner sep=0](A){$${nom[i]}$}`\n      }\n      texte += '\\n\\t \\\\end{tikzpicture}'\n      this.listeQuestions.push(texte)\n\n      texteCorr = '\\\\begin{tikzpicture}'\n      texteCorr += Latex_repere(xmin, xmax, ymin, ymax, k, k, grille)\n      for (let i = 0; i < 5; i++) {\n        texteCorr += `\\n\\t \\\\tkzDefPoint(${points[i][0]},${points[i][1]}){A}`\n        texteCorr += '\\n\\t \\\\tkzDrawPoint[shape=cross out,color=blue,size=6](A)'\n        texteCorr += `\\n\\t \\\\tkzLabelPoint[above right=3pt,fill=white,fill opacity=0.7,text opacity=1,inner sep=0](A){$${nom[i]}$}`\n        texteCorr += '\\n\\t \\\\tkzPointShowCoord(A)'\n      }\n      texteCorr += '\\n\\t \\\\end{tikzpicture}'\n      this.listeCorrections.push(texteCorr)\n    }\n\n    texte = 'Déterminer les coordonnées des points'\n    texteCorr = 'Les coordonnées des points sont :<br>'\n    for (let i = 0; i < 4; i++) {\n      texte += ` $${nom[i]}$,`\n      texteCorr += ` $${nom[i]}(${texNombre(points[i][0])};${texNombre(points[i][1])})$, `\n    }\n    texte += ` $${nom[4]}$.`\n    texteCorr += ` $${nom[4]}(${texNombre(points[4][0])};${texNombre(points[4][1])})$.`\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 3, \"1 : Coordonnées entières\\n2 : Coordonnées 'en demis'\\n3 : Coordonnées 'en quarts'\"]\n  this.besoinFormulaire2CaseACocher = ['Grille de lecture']\n}\n","import Reperage_point_du_plan from './5R12-2.js'\nexport const titre = 'Déterminer les coordonnées (positives) d’un point'\n\n/**\n * Lire les coordonnées d'un point du quart de plan positif avec une précision allant de l'unité à 0,25.\n * @author Jean-Claude Lhote\n * référence 5R12\n */\nexport default function Reperage_point_du_quart_de_plan () {\n  Reperage_point_du_plan.call(this)\n  this.titre = titre\n  this.quart_de_plan = true\n}\n"],"sourceRoot":""}