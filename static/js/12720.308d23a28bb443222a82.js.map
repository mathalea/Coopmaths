{"version":3,"file":"js/12720.308d23a28bb443222a82.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { setReponse, ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, range1, combinaisonListes, ecritureAlgebrique, ecritureParentheseSiNegatif, miseEnEvidence, listeDesDiviseurs, lettreDepuisChiffre } from '../../modules/outils.js'\nexport const titre = 'Calculs utilisant les priorités opératoires'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * Plusieurs type de calcul avec des entiers.\n *\n * Sans parenthèses :\n * * a+b*c\n * * a+b÷c\n * * a/b*c\n * * a*b÷c\n * * a*b+c\n * * a-b+c\n * * a+b+c*d\n * * a*b+c*d\n * * a*b*c+d\n * * a*b-c÷d\n * * a*b+c÷d\n *\n * Avec parenthèses :\n * * a*(b-c)\n * * (a-b)*c\n * * (a-b)÷c\n * * a÷(b+c)\n * * (a-b)÷c\n * * a*(b-c)*d\n * * a*b*(c-d)\n * * a*(b-c*d)\n * * (a+b*c)÷d\n * * a*(b-c*d)\n * * a*b÷(c+d)\n * * a*(b÷c+d)\n * * a-(b+c)\n * * (a+b+c)*d\n * @author Rémi Angot\n * 4C11\n */\nexport default function PrioritesEtRelatifs () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = 'Calculer :'\n  this.nbQuestions = 5\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.sup = 3\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let listeQuestionsDisponibles\n    if (this.sup === 1) {\n      listeQuestionsDisponibles = range1(11)\n    } else if (this.sup === 2) {\n      listeQuestionsDisponibles = range1(20, range1(11))\n    } else {\n      listeQuestionsDisponibles = range1(20)\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      listeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    for (let i = 0, texte, texteCorr, a, b, c, d, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // a+b*c\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(2, 11) * choice([-1, 1])\n            b = randint(2, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}${ecritureAlgebrique(b)}\\\\times${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$${a}${miseEnEvidence('~' + ecritureAlgebrique(b) + '\\\\times' + ecritureParentheseSiNegatif(c))}=${a}${ecritureAlgebrique(b * c)\n            }=${a + b * c}$`\n          setReponse(this, i, a + b * c)\n          break\n        case 2: // a+b/c\n          a = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          b = c * randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(2, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n            b = c * randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}${ecritureAlgebrique(b)}\\\\div${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$${a}${miseEnEvidence('~' + ecritureAlgebrique(b) + '\\\\div' + ecritureParentheseSiNegatif(c))}=${a}${ecritureAlgebrique(b / c)\n            }=${a + b / c}$`\n          setReponse(this, i, a + b / c)\n          break\n        case 3: // a/b*c\n          b = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          a = b * randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            b = randint(2, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n            a = b * randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\div${ecritureParentheseSiNegatif(b)}\\\\times${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$${miseEnEvidence(a + '\\\\div' + ecritureParentheseSiNegatif(b))}\\\\times${ecritureParentheseSiNegatif(c)}=${a / b\n            }\\\\times${ecritureParentheseSiNegatif(c)}=${(a / b) * c}$`\n          setReponse(this, i, (a / b) * c)\n          break\n        case 4: // a*b/c\n          if (choice([true, false])) {\n            // a est un multiple de c\n            c = randint(2, 6) * choice([-1, 1])\n            a = c * randint(2, 5) * choice([-1, 1])\n            b = randint(2, 6) * choice([-1, 1])\n            while (a > 0 && b > 0 && c > 0) {\n              c = randint(2, 6) * choice([-1, 1])\n              a = c * randint(2, 5) * choice([-1, 1])\n              b = randint(2, 6) * choice([-1, 1])\n            }\n          } else {\n            // b est un multiple de c\n            c = randint(2, 6) * choice([-1, 1])\n            b = c * randint(2, 5) * choice([-1, 1])\n            a = randint(2, 6) * choice([-1, 1])\n            while (a > 0 && b > 0 && c > 0) {\n              c = randint(2, 6) * choice([-1, 1])\n              b = c * randint(2, 5) * choice([-1, 1])\n              a = randint(2, 6) * choice([-1, 1])\n            }\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\div${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$${miseEnEvidence(a + '\\\\times' + ecritureParentheseSiNegatif(b))}\\\\div${ecritureParentheseSiNegatif(c)}=${a * b\n            }\\\\div${ecritureParentheseSiNegatif(c)}=${(a * b) / c}$`\n          setReponse(this, i, (a * b) / c)\n          break\n        case 5: // a*b+c\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(2, 11) * choice([-1, 1])\n            b = randint(2, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}${ecritureAlgebrique(c)}$`\n          texteCorr = `$${miseEnEvidence(a + '\\\\times' + ecritureParentheseSiNegatif(b))}${ecritureAlgebrique(c)}=${a * b\n            }${ecritureAlgebrique(c)}=${a * b + c}$`\n          setReponse(this, i, a * b + c)\n          break\n        case 6: // a-b+c\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(2, 11) * choice([-1, 1])\n            b = randint(2, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}-(${ecritureAlgebrique(b)})${ecritureAlgebrique(c)}$`\n          texteCorr = `$${a}${miseEnEvidence(ecritureAlgebrique(-b))}${ecritureAlgebrique(c)}=${a - b}${ecritureAlgebrique(c)}=${a - b + c\n            }$`\n          setReponse(this, i, a - b + c)\n          break\n        case 7: // a+b+c*d\n          a = randint(2, 20) * choice([-1, 1])\n          b = randint(2, 20) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          d = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            a = randint(2, 20) * choice([-1, 1])\n            b = randint(2, 20) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n            d = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}${ecritureAlgebrique(b)}${ecritureAlgebrique(c)}\\\\times${ecritureParentheseSiNegatif(d)}$`\n          texteCorr = `$${a}${ecritureAlgebrique(b)}${miseEnEvidence(\n            ecritureAlgebrique(c) + '\\\\times' + ecritureParentheseSiNegatif(d)\n          )}=${a}${ecritureAlgebrique(b)}${ecritureAlgebrique(c * d)}=${a + b + c * d}$`\n          setReponse(this, i, a + b + c * d)\n          break\n        case 8: // a*b+c*d\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          d = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            a = randint(2, 20) * choice([-1, 1])\n            b = randint(2, 20) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n            d = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}${ecritureAlgebrique(c)}\\\\times${ecritureParentheseSiNegatif(d)}$`\n          texteCorr = `$${a + miseEnEvidence('\\\\times') + ecritureParentheseSiNegatif(b)\n            }${ecritureAlgebrique(c) + miseEnEvidence('\\\\times') + ecritureParentheseSiNegatif(d)}=${a * b}${ecritureAlgebrique(c * d)}=${a * b + c * d\n            }$`\n          setReponse(this, i, a * b + c * d)\n          break\n        case 9: // a*b*c+d\n          a = randint(2, 5) * choice([-1, 1])\n          b = randint(2, 5) * choice([-1, 1])\n          c = randint(2, 5) * choice([-1, 1])\n          d = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            a = randint(2, 5) * choice([-1, 1])\n            b = randint(2, 5) * choice([-1, 1])\n            c = randint(2, 5) * choice([-1, 1])\n            d = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\times${ecritureParentheseSiNegatif(c)}${ecritureAlgebrique(d)}$`\n          texteCorr = `$${miseEnEvidence(\n            a + '\\\\times' + ecritureParentheseSiNegatif(b)\n          )}\\\\times${ecritureParentheseSiNegatif(c)}${ecritureAlgebrique(d)}=${miseEnEvidence(a * b + '\\\\times' + ecritureParentheseSiNegatif(c))}${ecritureAlgebrique(d)}\n          =${a * b * c}${ecritureAlgebrique(d)}\n          =${a * b * c + d}$`\n          setReponse(this, i, a * b * c + d)\n          break\n        case 10:\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(2, 11) * choice([-1, 1])\n          d = randint(2, 11) * choice([-1, 1])\n          c = d * randint(2, 8) * choice([-1, 1])\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}${ecritureAlgebrique(c)}\\\\div${ecritureParentheseSiNegatif(d)}$`\n          texteCorr = `$${a + miseEnEvidence('\\\\times') + ecritureParentheseSiNegatif(b) +\n            ecritureAlgebrique(c) + miseEnEvidence('\\\\div') + ecritureParentheseSiNegatif(d)}=${a * b}${ecritureAlgebrique(c / d)}=${a * b + c / d\n            }$`\n          setReponse(this, i, a * b + c / d)\n          break\n        case 11: // a*(b+c)\n          a = randint(2, 11) * choice([-1, 1])\n          b = randint(1, 11) * choice([-1, 1])\n          c = randint(1, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(2, 11) * choice([-1, 1])\n            b = randint(1, 11) * choice([-1, 1])\n            c = randint(1, 11) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times(${b}${ecritureAlgebrique(c)})$`\n          texteCorr = `$${a}\\\\times(${miseEnEvidence(b + ecritureAlgebrique(c))})=${a}\\\\times${ecritureParentheseSiNegatif(b + c)}=${a * (b + c)}$`\n          setReponse(this, i, a * (b + c))\n          break\n        case 12: // (a+b)*c\n          a = randint(1, 11) * choice([-1, 1])\n          b = randint(1, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(1, 11) * choice([-1, 1])\n            b = randint(1, 11) * choice([-1, 1])\n            c = randint(2, 11) * choice([-1, 1])\n          }\n          texte = `$(${a}${ecritureAlgebrique(b)})\\\\times${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$(${miseEnEvidence(a + ecritureAlgebrique(b))})\\\\times${ecritureParentheseSiNegatif(c)}=${a + b}\\\\times${ecritureParentheseSiNegatif(c)}=${(a + b) * c}$`\n          setReponse(this, i, (a + b) * c)\n          break\n        case 13: // (a+b)/c\n          c = randint(2, 11) * choice([-1, 1])\n          b = randint(11, 39) * choice([-1, 1])\n          a = c * randint(2, 9) * [choice([-1, 1])] - b\n          while (a > 0 && b > 0 && c > 0) {\n            c = randint(2, 11) * choice([-1, 1])\n            b = randint(11, 39) * choice([-1, 1])\n            a = c * randint(2, 9) * [choice([-1, 1])] - b\n          }\n          texte = `$(${a}${ecritureAlgebrique(b)})\\\\div${ecritureParentheseSiNegatif(c)}$`\n          texteCorr = `$(${miseEnEvidence(a + ecritureAlgebrique(b))})\\\\div${ecritureParentheseSiNegatif(c)}=${a + b\n            }\\\\div${ecritureParentheseSiNegatif(c)}=${(a + b) / c}$`\n          setReponse(this, i, (a + b) / c)\n          break\n        case 14: // a/(b+c)\n          b = randint(-5, 5, [-1, 0, 1])\n          c = randint(-6, 6, [-1, 0, 1, -b])\n          a = (b + c) * randint(2, 9) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            b = randint(-5, 5, [-1, 0, 1])\n            c = randint(-6, 6, [-1, 0, 1, -b])\n            a = (b + c) * randint(2, 9) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\div(${b}${ecritureAlgebrique(c)})$`\n          texteCorr = `$${a}\\\\div(${miseEnEvidence(b + ecritureAlgebrique(c))})=${a}\\\\div${ecritureParentheseSiNegatif(b + c)}=${a / (b + c)}$`\n          setReponse(this, i, a / (b + c))\n          break\n        case 15: // a(b+c)*d\n          c = randint(11, 39) * choice([-1, 1])\n          b = randint(2, 5) * choice([-1, 1]) - c\n          a = randint(2, 5) * choice([-1, 1])\n          d = randint(2, 5) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            c = randint(11, 39) * choice([-1, 1])\n            b = (randint(2, 5) - c) * choice([-1, 1])\n            a = randint(2, 5) * choice([-1, 1])\n            d = randint(2, 5) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times(${b}${ecritureAlgebrique(c)})\\\\times${ecritureParentheseSiNegatif(d)}$`\n          texteCorr = `$${a}\\\\times(${miseEnEvidence(b + ecritureAlgebrique(c))})\\\\times${ecritureParentheseSiNegatif(d)}=${a}\\\\times${ecritureParentheseSiNegatif(b + c)}\\\\times${ecritureParentheseSiNegatif(d)}=${a * (b + c) * d}$`\n          setReponse(this, i, a * (b + c) * d)\n          break\n        case 16: // a*b*(c+d)\n          d = randint(11, 39) * choice([-1, 1])\n          c = randint(2, 5) * choice([-1, 1]) - d\n          a = randint(2, 5) * choice([-1, 1])\n          b = randint(2, 5) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            d = randint(11, 39) * choice([-1, 1])\n            c = randint(2, 5) * choice([-1, 1]) - d\n            a = randint(2, 5) * choice([-1, 1])\n            b = randint(2, 5) * choice([-1, 1])\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\times(${c}${ecritureAlgebrique(d)})$`\n          texteCorr = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\times(${miseEnEvidence(\n            c + ecritureAlgebrique(d))})=${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\times${ecritureParentheseSiNegatif(c + d)}=${a * b * (c + d)}$`\n          setReponse(this, i, a * b * (c + d))\n          break\n        case 17: // a*(b/c+d)\n          a = randint(2, 11) * choice([-1, 1])\n          c = randint(2, 11) * choice([-1, 1])\n          b = c * randint(2, 5) * choice([-1, 1])\n          d = randint(2, 6) * choice([-1, 1])\n          texte = `$${a}\\\\times(${b}\\\\div${ecritureParentheseSiNegatif(c)}${ecritureAlgebrique(d)})$`\n          texteCorr = `$${a}\\\\times(${miseEnEvidence(\n            b + '\\\\div' + ecritureParentheseSiNegatif(c)\n          )}${ecritureAlgebrique(d)})=${a}\\\\times(${miseEnEvidence(\n            b / c + ecritureAlgebrique(d)\n          )})=${a}\\\\times${ecritureParentheseSiNegatif(b / c + d)}=${a * (b / c + d)}$`\n          setReponse(this, i, a * (b / c + d))\n          break\n        case 18: // a*b/(c+d)\n          a = randint(2, 11)\n          b = randint(2, 11)\n          while (listeDesDiviseurs(a * b).length < 5) {\n            a = randint(2, 11)\n            b = randint(2, 11)\n          }\n          // eslint-disable-next-line no-case-declarations\n          const liste = listeDesDiviseurs(a * b)\n          if (liste.length > 2) {\n            liste.pop() // on supprime le plus grand diviseur qui est le produit\n            enleveElement(liste, a) // on supprime a\n            enleveElement(liste, b) // on supprime b\n          }\n          // eslint-disable-next-line no-case-declarations\n          const somme = choice(liste, [1]) * choice([-1, 1]) // la somme doit être un diviseur différent de 1\n          c = randint(-30, 30, [0])\n          d = somme - c\n\n          // eslint-disable-next-line no-unmodified-loop-condition\n          while (a > 0 && b > 0 && c > 0 && d > 0) {\n            a *= choice([-1, 1])\n            b *= choice([-1, 1])\n          }\n          texte = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\div(${c}${ecritureAlgebrique(d)})$`\n          texteCorr = `$${a}\\\\times${ecritureParentheseSiNegatif(b)}\\\\div(${miseEnEvidence(\n            c + ecritureAlgebrique(d))})=${miseEnEvidence(a + '\\\\times' + ecritureParentheseSiNegatif(b))}\\\\div${ecritureParentheseSiNegatif(c + d)}=${a * b\n            }\\\\div${ecritureParentheseSiNegatif(c + d)}=${(a * b) / (c + d)}$`\n          setReponse(this, i, (a * b) / (c + d))\n          break\n        case 19: // a-(b+c)\n          a = randint(1, 9) * choice([-1, 1])\n          b = randint(1, 9) * choice([-1, 1])\n          c = randint(1, 9) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(1, 9) * choice([-1, 1])\n            b = randint(1, 9) * choice([-1, 1])\n            c = randint(1, 9) * choice([-1, 1])\n          }\n          texte = `$${a}-(${b}${ecritureAlgebrique(c)})$`\n          texteCorr = `$${a}-(${miseEnEvidence(b + ecritureAlgebrique(c))})=${a}-(${ecritureAlgebrique(b + c)})=${a + ecritureAlgebrique(-b - c)}=${a - b - c}$`\n          setReponse(this, i, a - b - c)\n          break\n        case 20: // (a+b+c)*d\n          a = randint(1, 9) * choice([-1, 1])\n          b = randint(1, 9) * choice([-1, 1])\n          c = randint(1, 9) * choice([-1, 1])\n          d = randint(2, 5) * choice([-1, 1])\n          while (a > 0 && b > 0 && c > 0) {\n            a = randint(1, 9) * choice([-1, 1])\n            b = randint(1, 9) * choice([-1, 1])\n            c = randint(1, 9) * choice([-1, 1])\n          }\n          texte = `$(${a + ecritureAlgebrique(b) + ecritureAlgebrique(c)})\\\\times${ecritureParentheseSiNegatif(d)}$`\n          texteCorr = `$(${miseEnEvidence(a + ecritureAlgebrique(b) + ecritureAlgebrique(c))})\\\\times${ecritureParentheseSiNegatif(d)}=${a + b + c}\\\\times${ecritureParentheseSiNegatif(d)}=${(a + b + c) * d} $`\n          setReponse(this, i, (a + b + c) * d)\n          break\n      }\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.sup2) {\n        texte = `${lettreDepuisChiffre(i + 1)} = ${texte}`\n        // On découpe\n        const etapes = texteCorr.split('=')\n        texteCorr = ''\n        etapes.forEach(function (etape) {\n          etape = etape.replace('$', '')\n          if (context.isHtml) {\n            texteCorr += '<br>'\n          }\n          texteCorr += `${lettreDepuisChiffre(i + 1)} = $${etape}$ <br>`\n        })\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de calculs',\n    3,\n    '1 : Sans opérations entre parenthèses\\n2 : Avec des opérations entre parenthèses\\n3 : Mélange'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Présentation des corrections en colonnes', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","PrioritesEtRelatifs","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","listeQuestionsDisponibles","parseInt","listeQuestions","listeCorrections","range1","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","d","i","cpt","randint","choice","ecritureAlgebrique","ecritureParentheseSiNegatif","miseEnEvidence","setReponse","listeDesDiviseurs","length","liste","pop","enleveElement","somme","ajouteChampTexteMathLive","sup2","lettreDepuisChiffre","etapes","split","forEach","etape","replace","context","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}