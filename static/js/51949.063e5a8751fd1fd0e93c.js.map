{"version":3,"file":"js/51949.063e5a8751fd1fd0e93c.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3G32-3.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, texNombre, texNombrec } from '../../modules/outils.js'\nimport { texteSurSegment, pointAdistance,polygoneAvecNom, afficheMesureAngle, codageAngleDroit, point, segment, texteParPosition, milieu, mathalea2d } from '../../modules/2d.js';\nexport const titre = 'Calculer la hauteur d’une falaise'\n\n/**\n * Propose de calculer la hauteur d'une falaise en utilisant les angles de vue depuis deux positions d'un bateau sans s'en approcher.\n * @author Jean-Claude Lhote\n * Référence 3G32-3\n*/\nexport default function Calculs_trigonometriques3() {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.titre = titre;\n  this.consigne = \"\";\n  this.nbCols = 1; // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1; // Uniquement pour la sortie LaTeX\n  this.sup = true; // Niveau de difficulté \n  this.tailleDiaporama = 100; // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = \"\" // Id YouTube ou url\n  this.nbQuestions = 1\n  this.spacingCorr=2\n  this.spacing=2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let distance, alfa,baita, beta, alpha, taille, A, B, H, S, objets = [], p\n    if (context.isHtml) {\n      alfa='α'\n      baita='β'\n    }\n    else {\n      alfa='\\\\alpha'\n      baita='\\\\beta'\n    }\n\n    for (let i = 0, texte, texteCorr,cpt = 0; i < this.nbQuestions && cpt < 50;) {\n        objets=[]\n          alpha = randint(25, 45)\n          beta = Math.tan(alpha * Math.PI / 180) * Math.tan((alpha + 1) * Math.PI / 180) / (Math.tan((alpha + 1) * Math.PI / 180) - Math.tan(alpha * Math.PI / 180))\n          distance = randint(5, 10)\n          taille = beta * distance\n          A = point(0, 0, 'A')\n          B = pointAdistance(A, 5, 0, 'B')\n          H = pointAdistance(A, 12, 0, 'H')\n          S = pointAdistance(H, 7, 90, 'S')\n          p = polygoneAvecNom(A, B, H, S)\n          objets.push(p[1], p[0], segment(S, B), codageAngleDroit(A, H, S))\n          objets.push(afficheMesureAngle(H, A, S, 'black', 2, `${alfa}`), afficheMesureAngle(H, B, S, 'black', 2, `${baita}`))\n          objets.push(texteSurSegment(`${texNombre(distance)} m`, A, B, 'black', -0.5), texteParPosition(`h`, milieu(H, S).x + 0.5, milieu(H, S).y, 0, 'black', 2, \"middle\", true))\n\n          texte = `Un observateur sur un bateau s'approche d'une falaise dont il veut mesurer la hauteur.<br>`;\n          texte += `Il jette l'ancre puis constate qu'il voit la falaise sous un angle de $${alpha}\\\\degree$.<br>`\n          texte += `Il se rapproche ensuite de la falaise jusqu'à la voir sous un angle de $${alpha + 5}\\\\degree$.<br>`\n          texte += `Il constate qu'entre ses deux mesures, il s'est rapproché de la falaise de $${distance}$ m.<br>`\n          if (this.sup) {\n            texte += `Le schéma ci-dessous n'est pas en vraie grandeur.<br>` + mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets);\n            texte += `<br>Exprimer $h$ en fonction de $BH$ et $${alfa}$ puis en fonction de $AH$ et $${baita}$.<br>`\n            texte += `En déduire $BH$ en fonction de $AB$, $${alfa}$ et $${baita}$.<br>`\n            texte += `Exprimer $HS$ en fonction de $AB$, $${alfa}$ et $${baita}$.<br>`\n          }\n          texte += `Quelle est la hauteur de la falaise ?<br>`\n          texte += `A quelle distance du pied de la falaise se trouve l'observateur lors du deuxième relevé ?<br>`\n          texte += `Arrondir les résultats au mètre près. (On supposera le point d'observation au niveau de l'eau)`\n          texteCorr = mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets)\n          texteCorr += `<br>Dans le triangle $BHS$ rectangle en $H$, $\\\\tan(${baita})=\\\\dfrac{h}{BH}$.<br>D'où $h=BH\\\\times \\\\tan(${baita})$.<br>`\n          texteCorr += `<br>Dans le triangle $AHS$ rectangle en $H$, $\\\\tan(${alfa})=\\\\dfrac{h}{AH}$.<br>D'où $h=AH\\\\times \\\\tan(${alfa})$.<br>`\n          texteCorr += `Or $AH=AB+BH$ donc $h=(AB+BH)\\\\times \\\\tan(${alfa})$.<br>`\n          texteCorr += `On en déduit que $BH\\\\times \\\\tan(${baita})=(AB+BH)\\\\times \\\\tan(${alfa})$ soit $BH\\\\times \\\\tan(${baita})=AB\\\\times \\\\tan(${alfa})+BH\\\\times \\\\tan(${alfa})$.<br>`\n          texteCorr += `D'où $AB\\\\times \\\\tan(${alfa})=BH\\\\times \\\\tan(${baita})-BH\\\\times \\\\tan(${alfa})=BH\\\\times (\\\\tan(${baita})-\\\\tan(${alfa}))$.<br>`\n          texteCorr += `Et $BH=\\\\dfrac{AB\\\\times \\\\tan(${alfa})}{\\\\tan(${baita})-\\\\tan(${alfa})}$.<br>`\n          texteCorr += `Ainsi $h=BH\\\\times \\\\tan(${baita})=\\\\dfrac{AB\\\\times \\\\tan(${alfa})\\\\times \\\\tan(${baita})}{\\\\tan(${baita})-\\\\tan(${alfa})}$.<br>`\n          texteCorr += `Application numérique : <br>`\n          texteCorr += `$h=\\\\dfrac{${distance}\\\\times \\\\tan(${alpha})\\\\times \\\\tan(${alpha + 5})}{\\\\tan(${alpha + 5})-\\\\tan(${alpha})}\\\\approx ${Math.round(taille)}$ m.<br>`\n          texteCorr += `$BH=\\\\dfrac{${distance}\\\\times \\\\tan(${alpha})}{\\\\tan(${alpha + 5})-\\\\tan(${alpha})}\\\\approx ${texNombrec(Math.round(taille / Math.tan((alpha + 5) * Math.PI / 180)))}$ m.<br>`\n          texteCorr += `La hauteur de la falaise est de $${Math.round(taille)}$ m et l'observateur se trouve à $${texNombrec(Math.round(taille / Math.tan((alpha + 5) * Math.PI / 180)))}$ m de celle-ci lors du deuxième relevé.<br>`;\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireCaseACocher = ['Afficher un schéma et des questions intermédiaires'];\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","Calculs_trigonometriques3","Exercice","this","consigne","nbCols","nbColsCorr","sup","tailleDiaporama","video","nbQuestions","spacingCorr","spacing","nouvelleVersion","listeQuestions","listeCorrections","distance","alfa","baita","beta","alpha","taille","A","B","H","S","p","objets","context","texte","texteCorr","i","cpt","randint","Math","tan","PI","point","pointAdistance","polygoneAvecNom","push","segment","codageAngleDroit","afficheMesureAngle","texteSurSegment","texNombre","texteParPosition","milieu","x","y","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","round","texNombrec","indexOf","listeQuestionsToContenu","besoinFormulaireCaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","correctionDetailleeDisponible","correctionDetaillee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}