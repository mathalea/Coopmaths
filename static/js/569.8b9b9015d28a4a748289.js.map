{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C31.js"],"names":["amcReady","interactifReady","interactifType","amcType","titre","DivisionDecimale","Exercice","this","consigne","spacing","context","spacingCorr","nbQuestions","sup","listePackages","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","listeQuestions","listeCorrections","choice","listeTypeDeQuestions","combinaisonListes","typesDeQuestions","texte","texteCorr","a","b","q","i","cpt","randint","calcul","arrondi","texNombre","Operation","operande1","operande2","type","precision","setReponse","interactif","ajouteChampTexte","autoCorrection","enonce","propositions","statut","reponse","valeur","param","digits","nombreDeChiffresDansLaPartieEntiere","nombreDeChiffresDansLaPartieDecimale","decimals","signe","exposantNbChiffres","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique"],"mappings":"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","file":"js/569.8b9b9015d28a4a748289.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport Operation from '../../modules/operations.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, calcul, texNombre, arrondi, nombreDeChiffresDansLaPartieEntiere, nombreDeChiffresDansLaPartieDecimale } from '../../modules/outils.js'\nimport { setReponse, ajouteChampTexte } from '../../modules/gestionInteractif.js'\nexport const amcReady = true // Jusqu'à l'adaptation à la version 2.6\nexport const interactifReady = true\nexport const interactifType = ' '\nexport const amcType = 4 // Question numérique\nexport const titre = 'Divisions décimales'\n\n/**\n * Effectuer les divisions décimales suivantes et donner la valeur exacte de leur quotient.\n *\n * Niveau de difficulté 1 :\n * * entier divisé par 4 quotient : xx,25 ou xx,75\n * * entier divisé par 8 quotient : x,125 ou x,375 ou x,625 ou x,875\n * * entier divisé par 6 quotient : xxx,5\n * * quotient xx,xx division par 2, 3 , 4 ou 5\n * * quotient x,xxx division par 6 à 9\n * * un 0 dans le quotient\n *\n * Niveau de difficulté 2 : division par 3, 7 ou 9\n * @author Rémi Angot\n * Référence 6C31\n */\nexport default function DivisionDecimale () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.interactifReady = interactifReady\n  this.amcType = amcType\n  this.consigne = 'Effectuer les divisions décimales suivantes et donner la valeur exacte de leur quotient.'\n  this.spacing = 2\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1) // Important sinon opdiv n'est pas joli\n  this.nbQuestions = 4\n  this.sup = 1\n  this.listePackages = 'xlop'\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n\n    this.sup === 1\n      ? (typesDeQuestionsDisponibles = [choice([1, 2, 3]), 4, 5, 6])\n      : (typesDeQuestionsDisponibles = [7, 8, 9])\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let typesDeQuestions\n    for (\n      let i = 0, texte, texteCorr, cpt = 0, a, b, q;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      switch (typesDeQuestions) {\n        case 1: // entier divisé par 4 quotient : xx,25 ou xx,75\n          b = 4\n          a = (randint(2, 9) * 10 + randint(2, 9)) * 4 + choice([1, 3])\n          q = calcul(a / b)\n          break\n        case 2: // entier divisé par 8 quotient : x,125 ou x,375 ou x,625 ou x,875\n          b = 8\n          a = randint(2, 9) * 8 + choice([1, 3, 5, 7])\n          q = calcul(a / b)\n          break\n        case 3: // entier divisé par 6 quotient : xxx,5\n          b = 6\n          q = calcul(\n            randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) + 0.5\n          )\n          a = q * 6\n          break\n        case 4: // quotient xx,xx division par 2, 3 , 4 ou 5\n          q = calcul(\n            randint(2, 5) * 10 +\n            randint(2, 5) +\n            randint(2, 5) / 10 +\n            randint(2, 5) / 100\n          )\n          b = randint(2, 5)\n          a = calcul(b * q)\n          break\n        case 5: // quotient x,xxx division par 6 à 9\n          q = calcul(\n            randint(6, 9) +\n            randint(5, 9) / 10 +\n            randint(6, 9) / 100 +\n            randint(6, 9) / 1000\n          )\n          b = randint(6, 9)\n          a = calcul(b * q)\n          break\n        case 6: // un 0 dans le quotient\n          if (randint(1, 2) === 1) {\n            // x0x,x\n            q = calcul(\n              randint(2, 9) * 100 + randint(2, 9) + randint(2, 9) / 10\n            )\n          } else {\n            // xx0,x\n            q = calcul(\n              randint(2, 9) * 100 + randint(2, 9) * 10 + randint(2, 9) / 10\n            )\n          }\n          b = randint(7, 9)\n          a = calcul(b * q)\n          break\n        case 7: // division par 7\n          a = randint(2, 9) * 7 + randint(1, 6)\n          b = 7\n          q = arrondi(a / b, 3)\n          break\n        case 8: // division par 9\n          a = calcul((randint(11, 19) * 9) / 10 + randint(1, 8) / 10)\n          b = 9\n          q = arrondi(a / b, 3)\n          break\n        case 9: // division par 3\n          a = calcul((randint(11, 99) * 3) / 100 + randint(1, 2) / 100)\n          b = 3\n          q = arrondi(a / b, 3)\n      }\n      if (this.sup === 2) {\n        this.consigne =\n          'Effectuer les divisions décimales suivantes et donner une valeur approchée de leur quotient au millième près.'\n      }\n      texte = `$${texNombre(a)}\\\\div${b}$`\n      if (this.sup === 1) {\n        texteCorr = Operation({ operande1: a, operande2: b, type: 'division', precision: 3 })\n        texteCorr += `<br>$${texNombre(a)}\\\\div${b}=${texNombre(q)}$`\n      } else {\n        texteCorr = Operation({ operande1: a, operande2: b, type: 'division', precision: 3 })\n        texteCorr += `<br>$${texNombre(a)}\\\\div${b}\\\\approx${texNombre(q)}$`\n      }\n      setReponse(this, i, q)\n      if (context.isHtml && this.interactif) texte += '$~=$' + ajouteChampTexte(this, i)\n      if (context.isAmc) {\n        this.autoCorrection[i].enonce = texte\n        this.autoCorrection[i].propositions = [{ texte: texteCorr, statut: '' }]\n        this.autoCorrection[i].reponse = { valeur: q, param: { digits: nombreDeChiffresDansLaPartieEntiere(q) + nombreDeChiffresDansLaPartieDecimale(q) + 2, decimals: nombreDeChiffresDansLaPartieDecimale(q) + 1, signe: false, exposantNbChiffres: 0 } }\n      } \n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = [\n    'Type de questions',\n    2,\n    '1 : Déterminer le quotient exact\\n2: Déterminer un quotient approché au millième près'\n  ]\n}\n"],"sourceRoot":""}