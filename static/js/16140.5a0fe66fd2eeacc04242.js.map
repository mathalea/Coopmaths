{"version":3,"file":"js/16140.5a0fe66fd2eeacc04242.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N31-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, calcul, texNombre, miseEnEvidence } from '../../modules/outils.js'\n\nexport const titre = 'Encadrer un décimal par deux entiers consécutifs'\n\n/**\n * * Encadrer_un_decimal_par_deux_entiers_consecutifs\n * * 6N31-1\n * @author Sébastien Lozano\n */\nexport default function EncadrerUnDecimalParDeuxEntiersConsecutifs () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  this.sup = 1\n  if (this.beta) {\n    this.nbQuestions = 3\n  } else {\n    this.nbQuestions = 3\n  };\n\n  this.consigne = 'Encadrer chaque nombre proposé par deux nombres entiers consécutifs.'\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0, 1, 2]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = shuffle([0, 1, 2])\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const m = randint(1, 9)\n      const c = randint(1, 9)\n      const d = randint(1, 9)\n      const u = randint(1, 9)\n      const di = randint(1, 9)\n      const ci = randint(1, 9)\n      const mi = randint(1, 9)\n\n      // pour les situations, autant de situations que de cas dans le switch !\n\n      const enonces = []\n      // for (let k=0;k<3;k++) {\n      enonces.push({\n        enonce: `\n          $\\\\ldots < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001))} < \\\\ldots$`,\n        question: '',\n        correction: `$${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001))} < ${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$`\n      })\n      enonces.push({\n        enonce: `\n          $\\\\ldots < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01))} < \\\\ldots$`,\n        question: '',\n        correction: `$${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01))} < ${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$`\n      })\n      enonces.push({\n        enonce: `\n          $\\\\ldots < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1))} < \\\\ldots$`,\n        question: '',\n        correction: `$${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1))} < ${texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + calcul(di * 0.1))} < ${miseEnEvidence(texNombre(m * 1000 + c * 100 + d * 10 + u * 1 + 1))}$`\n      })\n\n      // };\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 1:\n          texte = `${enonces[1].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n        case 2:\n          texte = `${enonces[2].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[2].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[2].correction}`\n          };\n          break\n      };\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","EncadrerUnDecimalParDeuxEntiersConsecutifs","typesDeQuestionsDisponibles","Exercice","this","beta","sup","nbQuestions","consigne","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","shuffle","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","m","randint","c","d","u","di","ci","mi","enonces","push","enonce","texNombre","calcul","question","correction","miseEnEvidence","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}