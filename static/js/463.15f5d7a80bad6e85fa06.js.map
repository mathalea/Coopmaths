{"version":3,"sources":["webpack://mathalea/./src/js/exercices/CM/CM008.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["titre","amcReady","interactifReady","amcType","Soustraire11","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","i","cpt","randint","setReponse","interactif","ajouteChampTexte","indexOf","push","listeQuestionsToContenu","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","pasDeVersionLatex","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","propositions","length","statut","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","feedback","messageFeedback","id","message","type","querySelectorAll","uicheck","exerciceQcm","propositionsQcm","espace","context","undefined","options","ordered","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","texteApres","inline","numeric","valeurs","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","reponses","Array","isArray","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/463.15f5d7a80bad6e85fa06.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\nimport { ajouteChampTexte, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Soustraire 11'\nexport const amcReady = true\nexport const interactifReady = true\nexport const amcType = 4\n\n/**\n * Un nombre à 2 chiffres -11\n * @author Rémi Angot\n * Référence CM008\n*/\nexport default function Soustraire11 () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.consigne = 'Calculer'\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.tailleDiaporama = 100\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typesDeQuestionsDisponibles = [1, 1, 1, 1, 2]\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    ) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      if (listeTypeDeQuestions[i] === 1) {\n        a = randint(12, 99)\n      } else {\n        a = randint(2, 9) * 10\n      }\n\n      texte = `$${a}-11$`\n      texteCorr = `$${a}-11=${a - 11}$`\n      setReponse(this, i, a - 11)\n      if (this.interactif) texte += ajouteChampTexte(this, i)\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1 && exercice.autoCorrection[i].propositions[indiceFeedback].feedback) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.', ',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true, indice } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}${indice || ''}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {array || number} a\n */\nexport function setReponse (exercice, i, valeurs, { digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0 } = {}) {\n  let reponses = []\n  if (!Array.isArray(valeurs)) {\n    reponses = [valeurs]\n  } else {\n    reponses = valeurs\n  }\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n  for (const reponse of reponses) {\n    exercice.autoCorrection[i].reponse.valeur = reponse\n  }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (const prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n/**\n * Fonctions pour gérer les messages utilisateur (feedback erreur|warning ou messages positifs)\n * @module\n */\n\n/**\n * Les types possibles\n * @type {string[]}\n */\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} feedback.message\n * @param {string} [feedback.type=error]\n * @param {string} [feedback.titre]\n * @return {HTMLElement} L'élément du feedback (déjà ajouté dans le container)\n */\nexport function addFeedback (container, { message, type = 'error', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  if (!message) throw Error('Message obligatoire pour tout retour utilisateur')\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}