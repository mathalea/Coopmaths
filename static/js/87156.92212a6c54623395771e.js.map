{"version":3,"file":"js/87156.92212a6c54623395771e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4L16.js","webpack://mathalea/./src/js/exercices/5e/5L14-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import DeterminerDerniereOperationExpressionLitterale from '../5e/5L14-4.js'\nexport const titre = 'Déterminer si ces expressions sont des sommes, des différences, des produits ou des quotients'\n\n/**\n * @author Guillaume Valmont\n * reference 4L16\n * Publié le 14/08/2021\n */\nexport default function DeterminerStructureExpressionLitterale () {\n  DeterminerDerniereOperationExpressionLitterale.call(this)\n  this.titre = titre\n  this.consigne = 'Déterminer si ces expressions sont des sommes, des différences, des produits ou des quotients.'\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, texteEnCouleur } from '../../modules/outils.js'\nimport ChoisirExpressionLitterale from './_Choisir_expression_litterale.js'\nexport const titre = 'Déterminer la dernière opération à effectuer dans une expression littérale'\n\n/**\n * Référence 5L14-4\n * Déterminer la dernière opération à effectuer dans une expression littérale\n * @author Sébastien Lozano fork Jean-Claude Lhote\n * Rendu paramétrable et ajout de la structure d'une expression le 14/08/2021 : Guillaume Valmont\n */\nexport default function DeterminerDerniereOperationExpressionLitterale () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup2 = false // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n  this.consigne = 'Déterminer la dernière opération à effectuer s\\'il fallait faire le calcul pour des valeurs données de $x$ et de $y$.'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    let typesDeQuestionsDisponibles = []\n    if (!this.sup3 || this.sup3 === 'NaN') { // Si aucune liste n'est saisie\n      typesDeQuestionsDisponibles = ['5']\n    } else {\n      if (typeof (this.sup3) === 'number') { // Si c'est un nombre c'est qu'il y a qu'une expression\n        typesDeQuestionsDisponibles[0] = this.sup3\n      } else {\n        typesDeQuestionsDisponibles = this.sup3.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n      }\n    }\n    let expn; let expc; let decimal = 1; let nbOperations; let resultats; let lastOp; let structureExpression\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2) decimal = 10\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      nbOperations = parseInt(listeTypeDeQuestions[i])\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      // resultats=ChoisirUneExpressionLitteraleBis(nbOperations,decimal,val1,val2)\n      resultats = ChoisirExpressionLitterale(nbOperations, decimal, val1, val2, this.sup)\n      // expf = resultats[0]\n      expn = resultats[1]\n      expc = resultats[2]\n      // nbval = resultats[3]\n      lastOp = resultats[4]\n      structureExpression = resultats[6]\n\n      if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n      texte = `${expn}`\n      if (this.debug) {\n        texte += '<br><br>=====CORRECTION======<br>'\n        texte += `Pour fixer les idées, choissions des valeurs pour $x$ et $y$, par exemple $x=${val1}$ et $y=${val2}$.`\n        texte += `<br>Le calcul serait le suivant :<br> ${expc}.`\n        texte += '<br>Pour n\\'importe quelles valeurs de $x$ et de $y$ choisies, les étapes sont les mêmes, elles respectent les priorités opératoires.'\n        texte += texteEnCouleur(`<br>La dernière opération dans ${expn} est une ${lastOp}.`)\n        texteCorr = ''\n      } else {\n        texteCorr = `Pour fixer les idées, choissions des valeurs pour $x$ et $y$, par exemple $x=${val1}$ et $y=${val2}$.`\n        texteCorr += `<br>Le calcul serait le suivant : ${expc}.`\n        texteCorr += '<br>Pour n\\'importe quelles valeurs de $x$ et de $y$ choisies, les étapes sont les mêmes, elles respectent les priorités opératoires.'\n        texteCorr += texteEnCouleur(`<br>La dernière opération dans ${expn} est une ${lastOp}.`)\n        if (this.consigne === 'Déterminer si ces expressions sont des sommes, des différences, des produits ou des quotients.') {\n          texteCorr += texteEnCouleur(`<br>Cette expression est donc ${structureExpression}.`)\n        }\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Avec le signe × devant les parenthèses', true]\n  this.besoinFormulaire2CaseACocher = ['Avec décimaux.', false]\n  this.besoinFormulaire3Texte = ['Nombre d\\'opérations', 'Nombres séparés par des tirets\\n1 : 1 opération\\n2 : 2 opérations\\n3 : 3 opérations\\n4 : 4 opérations\\n5 : Entre 2 et 5 opérations']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","DeterminerStructureExpressionLitterale","DeterminerDerniereOperationExpressionLitterale","this","consigne","Exercice","debug","nbQuestions","nbCols","nbColsCorr","sup2","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","expn","expc","typesDeQuestionsDisponibles","sup3","split","nbOperations","resultats","lastOp","structureExpression","decimal","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","val1","val2","i","cpt","parseInt","randint","ChoisirExpressionLitterale","sup","indexOf","substring","texteEnCouleur","push","listeQuestionsToContenu","besoinFormulaireCaseACocher","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}