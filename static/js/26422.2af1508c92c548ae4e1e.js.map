{"version":3,"file":"js/26422.2af1508c92c548ae4e1e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/4e/4C22.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, abs, pgcd, texFractionReduite, obtenirListeFacteursPremiers, obtenirListeFractionsIrreductibles, obtenirListeNombresPremiers, decompositionFacteursPremiers, texFraction } from '../../modules/outils.js'\nimport { fraction } from '../../modules/fractions.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Multiplier des fractions'\nexport const amcReady = true\nexport const amcType = 'AMCOpenNum✖︎2' // type de question AMC\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n/**\n * Exercice de calcul de produit de deux fractions.\n *\n * Paramétrages possibles :\n * * 1 : Produits de nombres positifs seulement\n * * 2 : deux questions niveau 1 puis deux questions niveau 3\n * * 3 : Produits de nombres relatifs\n * * Si décomposition cochée : les nombres utilisés sont plus importants.\n * @author Jean-Claude Lhote\n * 4C22\n */\nexport default function ExerciceMultiplierFractions () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1 // Avec ou sans relatifs\n  this.consigne = 'Calculer et donner le résultat sous forme irréductible'\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 5\n  this.nbColsCorr = 1\n  this.sup2 = false // méthode\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles\n    const listeFractions = obtenirListeFractionsIrreductibles()\n\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = [1, 2, 2, 2]// 1*nombre entier,3*fraction (pas de négatifs)\n    } else if (this.sup === 2) {\n      typesDeQuestionsDisponibles = [2, 2, 3, 3] // fractions, 2*positifs, 2*relatifs\n    } else {\n      typesDeQuestionsDisponibles = [3]\n    }\n    let nombreDeSigneMoins\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    for (\n      let i = 0,\n        ab,\n        cd,\n        a,\n        b,\n        c,\n        d,\n        p,\n        aa,\n        bb,\n        cc,\n        dd,\n        signe,\n        numerateur,\n        denominateur,\n        index,\n        texte,\n        texteCorr,\n        reponse,\n        typesDeQuestions,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      do {\n        ab = choice(listeFractions)\n        cd = choice(listeFractions)\n        a = ab[0]\n        b = ab[1]\n        c = cd[0]\n        d = cd[1]\n      } while ((a * c) % (b * d) === 0 || (a * c) % d === 0 || (b * d === 100))\n      if (this.sup2 === false) {\n        // methode 1 : simplifications finale\n        switch (typesDeQuestions) {\n          case 1: // entier * fraction (tout positif)\n            if (a === 1) {\n              a = randint(2, 9)\n            }\n            if (a === c) {\n              a = a + 1\n            }\n            texte = `$${texFraction(a, 1)}\\\\times${texFraction(c, d)}=$`\n            texteCorr = `$${texFraction(a, 1)}\\\\times${texFraction(c, d)}`\n            texteCorr += `=\\\\dfrac{${a}}{1}\\\\times${texFraction(c, d)}`\n            texteCorr += `=${texFraction(\n              a + '\\\\times' + c,\n              '1\\\\times' + d\n            )}`\n            texteCorr += `=${texFraction(a * c, d)}`\n            if (pgcd(a * c, d) !== 1) {\n              texteCorr += `=${texFractionReduite(a * c, d)}$`\n            } else texteCorr += '$'\n            reponse = fraction(a * c, d).simplifie()\n            break\n\n          case 2: // fraction * fraction tout positif\n            p = pgcd(a * c, b * d)\n            texte = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}=$`\n            texteCorr = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}`\n            texteCorr += `=${texFraction(\n              a + '\\\\times' + c,\n              b + '\\\\times' + d\n            )}`\n            texteCorr += `=${texFraction(a * c, b * d)}`\n            if (p !== 1) {\n              texteCorr += `=${texFraction(\n                (a * c) / p + '\\\\times\\\\cancel{' + p + '}',\n                (b * d) / p + '\\\\times\\\\cancel{' + p + '}'\n              )}`\n              texteCorr += `=${texFraction((a * c) / p, (b * d) / p)}$`\n            } else texteCorr += '$'\n            reponse = fraction(a * c, b * d).simplifie()\n\n            break\n\n          case 3:\n            a = a * randint(-1, 1, [0])\n            b = b * randint(-1, 1, [0])\n            c = c * randint(-1, 1, [0])\n            d = d * randint(-1, 1, [0])\n            nombreDeSigneMoins = (a < 0) + (b < 0) + (c < 0) + (d < 0)\n            if (Math.pow(-1, nombreDeSigneMoins) === 1) {\n              signe = ''\n            } else {\n              signe = '-'\n            }\n\n            texte = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}$`\n            texteCorr = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}`\n            aa = abs(a)\n            bb = abs(b)\n            cc = abs(c)\n            dd = abs(d)\n            p = pgcd(aa * cc, bb * dd)\n            texteCorr += `=${signe}${texFraction(\n              aa,\n              bb\n            )}\\\\times${texFraction(cc, dd)}`\n            texteCorr += `=${signe}${texFraction(\n              aa + '\\\\times' + cc,\n              bb + '\\\\times' + dd\n            )}`\n            if (p === 1) {\n              texteCorr += `=${signe}${texFraction(aa * cc, bb * dd)}$`\n            } else {\n              texteCorr += `=${signe}${texFraction(aa * cc, bb * dd)}`\n              if (aa * cc !== bb * dd) {\n                texteCorr += `=${signe}${texFraction(\n                  (aa * cc) / p + '\\\\times\\\\cancel{' + p + '}',\n                  (bb * dd) / p + '\\\\times\\\\cancel{' + p + '}'\n                )}`\n                texteCorr += `=${signe}${texFraction(\n                  (aa * cc) / p,\n                  (bb * dd) / p\n                )}$`\n              } else {\n                texteCorr += `=${signe}1$`\n              }\n            }\n            reponse = fraction(a * c, b * d).simplifie()\n            break\n        }\n      } else {\n        // méthode 2 : décomposition\n        if (a === c) {\n          a++\n        }\n        aa = obtenirListeNombresPremiers()[randint(1, 5)]\n        bb = obtenirListeNombresPremiers()[randint(1, 5, [aa])]\n        a = a * aa\n        d = d * aa\n        b = b * bb\n        c = c * bb\n\n        const listea = obtenirListeFacteursPremiers(a)\n        let listeb = obtenirListeFacteursPremiers(b)\n        const listec = obtenirListeFacteursPremiers(c)\n        const listed = obtenirListeFacteursPremiers(d)\n        let listeAvf, listeBvf\n\n        switch (typesDeQuestions) {\n          case 1: // entier * fraction (tout positif)\n            texte = `$${a}\\\\times${texFraction(c, d)}=$`\n            texteCorr = `$${a}\\\\times${texFraction(c, d)}`\n            texteCorr += `=${texFraction(a + '\\\\times' + c, d)}`\n            texteCorr += `=${texFraction(\n              decompositionFacteursPremiers(a) +\n              '\\\\times' +\n              decompositionFacteursPremiers(c),\n              decompositionFacteursPremiers(d)\n            )}`\n            // texteCorr += `$=${texFraction(decompositionFacteursPremiers(a * c), decompositionFacteursPremiers(d))}$`\n            for (const k in listec) {\n              listea.push(listec[k])\n            }\n            listeb = listed\n            listeAvf = []\n            listeBvf = []\n\n            listea.forEach(function aAjouterDansListeAvf (element) {\n              listeAvf.push([element, true])\n            })\n            listeb.forEach(function aAjouterDansListeBvf (element) {\n              listeBvf.push([element, true])\n            })\n\n            for (index = 0; index < listeb.length;) {\n              for (let j = 0; j <= listea.length;) {\n                if (listeb[index] === listea[j]) {\n                  listeBvf[index] = [listeb[index], false]\n                  listeAvf[j] = [listea[j], false]\n                  listea[j] = 1\n                  listeb[index] = 1\n                  break\n                }\n                j++\n              }\n              index++\n            }\n\n            a = 1\n            b = 1\n            for (const k in listea) {\n              a = a * listea[k]\n            }\n            for (const k in listeb) {\n              b = b * listeb[k]\n            }\n\n            numerateur = ''\n            denominateur = ''\n\n            for (const j in listeAvf) {\n              if (listeAvf[j][1] === true) {\n                numerateur += listeAvf[j][0] + '\\\\times'\n              } else {\n                numerateur += '\\\\cancel{' + listeAvf[j][0] + '}\\\\times'\n              }\n            }\n            numerateur = numerateur.substr(0, numerateur.length - 6)\n\n            for (const j in listeBvf) {\n              if (listeBvf[j][1] === true) {\n                denominateur += listeBvf[j][0] + '\\\\times'\n              } else {\n                denominateur += '\\\\cancel{' + listeBvf[j][0] + '}\\\\times'\n              }\n            }\n            denominateur = denominateur.substr(0, denominateur.length - 6)\n\n            texteCorr += `=\\\\dfrac{${numerateur}}{${denominateur}}`\n            texteCorr += `=${texFraction(a, b)}$`\n            reponse = fraction(a, b)\n            break\n\n          case 2: // fraction * fraction tout positif\n            texte = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}=$`\n            texteCorr = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}`\n            texteCorr += `=${texFraction(\n              a + '\\\\times' + c,\n              b + '\\\\times' + d\n            )}`\n\n            for (const k in listec) {\n              listea.push(listec[k])\n            }\n            for (const k in listed) {\n              listeb.push(listed[k])\n            }\n\n            listeAvf = []\n            listeBvf = []\n\n            listea.forEach(function aAjouterDansListeAvf (element) {\n              listeAvf.push([element, true])\n            })\n            listeb.forEach(function aAjouterDansListeBvf (element) {\n              listeBvf.push([element, true])\n            })\n\n            for (index = 0; index < listeb.length;) {\n              for (let j = 0; j <= listea.length;) {\n                if (listeb[index] === listea[j]) {\n                  listeBvf[index] = [listeb[index], false]\n                  listeAvf[j] = [listea[j], false]\n                  listea[j] = 1\n                  listeb[index] = 1\n                  break\n                }\n                j++\n              }\n              index++\n            }\n\n            a = 1\n            b = 1\n            for (const k in listea) {\n              a = a * listea[k]\n            }\n            for (const k in listeb) {\n              b = b * listeb[k]\n            }\n\n            numerateur = ''\n            denominateur = ''\n\n            for (const j in listeAvf) {\n              if (listeAvf[j][1] === true) {\n                numerateur += listeAvf[j][0] + '\\\\times'\n              } else {\n                numerateur += '\\\\cancel{' + listeAvf[j][0] + '}\\\\times'\n              }\n            }\n            numerateur = numerateur.substr(0, numerateur.length - 6)\n\n            for (const j in listeBvf) {\n              if (listeBvf[j][1] === true) {\n                denominateur += listeBvf[j][0] + '\\\\times'\n              } else {\n                denominateur += '\\\\cancel{' + listeBvf[j][0] + '}\\\\times'\n              }\n            }\n            denominateur = denominateur.substr(0, denominateur.length - 6)\n\n            texteCorr += `=\\\\dfrac{${numerateur}}{${denominateur}}`\n            texteCorr += `=${texFraction(a, b)}$`\n            reponse = fraction(a, b)\n            break\n\n          case 3:\n            a = a * randint(-1, 1, [0])\n            b = b * randint(-1, 1, [0])\n            c = c * randint(-1, 1, [0])\n            d = d * randint(-1, 1, [0])\n            nombreDeSigneMoins = (a < 0) + (b < 0) + (c < 0) + (d < 0)\n            if (Math.pow(-1, nombreDeSigneMoins) === 1) {\n              signe = ''\n            } else {\n              signe = '-'\n            }\n\n            texte = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}$`\n            texteCorr = `$${texFraction(a, b)}\\\\times${texFraction(c, d)}`\n            aa = abs(a)\n            bb = abs(b)\n            cc = abs(c)\n            dd = abs(d)\n\n            texteCorr += `=${signe}${texFraction(\n              aa,\n              bb\n            )}\\\\times${texFraction(cc, dd)}`\n            texteCorr += `=${signe}${texFraction(\n              aa + '\\\\times' + cc,\n              bb + '\\\\times' + dd\n            )}`\n\n            for (const k in listec) {\n              listea.push(listec[k])\n            }\n            for (const k in listed) {\n              listeb.push(listed[k])\n            }\n\n            listeAvf = []\n            listeBvf = []\n\n            listea.forEach(function aAjouterDansListeAvf (element) {\n              listeAvf.push([element, true])\n            })\n            listeb.forEach(function aAjouterDansListeBvf (element) {\n              listeBvf.push([element, true])\n            })\n\n            for (index = 0; index < listeb.length;) {\n              for (let j = 0; j <= listea.length;) {\n                if (listeb[index] === listea[j]) {\n                  listeBvf[index] = [listeb[index], false]\n                  listeAvf[j] = [listea[j], false]\n                  listea[j] = 1\n                  listeb[index] = 1\n                  break\n                }\n                j++\n              }\n              index++\n            }\n\n            a = 1\n            b = 1\n            for (const k in listea) {\n              a = a * listea[k]\n            }\n            for (const k in listeb) {\n              b = b * listeb[k]\n            }\n\n            numerateur = ''\n            denominateur = ''\n\n            for (const j in listeAvf) {\n              if (listeAvf[j][1] === true) {\n                numerateur += listeAvf[j][0] + '\\\\times'\n              } else {\n                numerateur += '\\\\cancel{' + listeAvf[j][0] + '}\\\\times'\n              }\n            }\n            numerateur = numerateur.substr(0, numerateur.length - 6)\n\n            for (const j in listeBvf) {\n              if (listeBvf[j][1] === true) {\n                denominateur += listeBvf[j][0] + '\\\\times'\n              } else {\n                denominateur += '\\\\cancel{' + listeBvf[j][0] + '}\\\\times'\n              }\n            }\n            denominateur = denominateur.substr(0, denominateur.length - 6)\n\n            texteCorr += `=${signe}\\\\dfrac{${numerateur}}{${denominateur}}`\n            texteCorr += `=${signe}${texFraction(a, b)}$`\n            reponse = fraction((signe === '-' ? -1 : 1) * a, b)\n            break\n        }\n      }\n      if (this.questionJamaisPosee(i, a, b, c, d, typesDeQuestions)) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        if (context.isAmc) {\n          this.autoCorrection[i] = {\n            enonce: `Calculer $${texte.substring(1, texte.length - 1)}$ et donner le résultat sous forme irreductible`,\n            propositions: [\n              {\n                texte: texteCorr,\n                statut: 3,\n                feedback: ''\n              }\n            ],\n            reponse: {\n              texte: 'numérateur',\n              valeur: reponse.signe * Math.abs(reponse.num),\n              param: {\n                digits: 2,\n                decimals: 0,\n                exposantNbChiffres: 0,\n                exposantSigne: false,\n                signe: reponse.signe === -1,\n                approx: 0\n              }\n            },\n            reponse2: {\n              texte: 'dénominateur',\n              valeur: Math.abs(reponse.den),\n              param: {\n                digits: 2,\n                decimals: 0,\n                exposantNbChiffres: 0,\n                exposantSigne: false,\n                signe: false,\n                approx: 0\n              }\n            }\n          }\n        } else {\n          texte += ajouteChampTexteMathLive(this, i, 'largeur25 inline')\n          setReponse(this, i, reponse, { formatInteractif: 'fraction' })\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n  this.besoinFormulaireNumerique = [\n    'Niveau de difficulté',\n    3,\n    '1 : Fractions à numérateurs et dénominateurs positifs \\n 2 : Type 1 et type 3 pour 50%/50%\\n 3 : Ecritures fractionnaires à numérateur et dénominateur entiers relatifs'\n  ]\n  this.besoinFormulaire2CaseACocher = ['Avec décomposition']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifReady","interactifType","ExerciceMultiplierFractions","Exercice","this","sup","consigne","spacing","spacingCorr","nbQuestions","nbColsCorr","sup2","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","listeFractions","obtenirListeFractionsIrreductibles","nombreDeSigneMoins","listeTypeDeQuestions","combinaisonListes","ab","cd","a","b","c","d","p","aa","bb","cc","dd","signe","numerateur","denominateur","index","texte","texteCorr","reponse","typesDeQuestions","i","cpt","choice","randint","texFraction","pgcd","texFractionReduite","fraction","simplifie","Math","pow","abs","obtenirListeNombresPremiers","listea","obtenirListeFacteursPremiers","listeb","listec","listed","listeAvf","listeBvf","decompositionFacteursPremiers","k","push","forEach","element","length","j","substr","questionJamaisPosee","context","autoCorrection","enonce","substring","propositions","statut","feedback","valeur","num","param","digits","decimals","exposantNbChiffres","exposantSigne","approx","reponse2","den","ajouteChampTexteMathLive","setReponse","formatInteractif","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}