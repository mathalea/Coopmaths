{"version":3,"file":"js/47906.031793d56cc366de12a2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6P11-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, calcul, prenom, texteEnCouleur, texPrix, numAlpha, nombreDeChiffresDe, nombreDeChiffresDansLaPartieDecimale, arrondi, checkSum } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Résoudre un problème relevant de la proportionnalité avec les propriétés de linéarité.'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Produire une forme littérale en introduisant une lettre pour désigner une valeur inconnue\n * * 6P11-1\n * @author Sébastien Lozano\n */\nexport default function ProportionnaliteParLineariteBis () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  if (this.beta) {\n    this.nbQuestions = 3\n  } else {\n    this.nbQuestions = 1\n  };\n\n  this.consigne = ''\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  // context.isHtml? this.spacing = 3 : this.spacing = 2;\n  // context.isHtml? this.spacingCorr = 3 : this.spacingCorr = 2;\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    const tabHash = []\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [1]\n    } else {\n      typesDeQuestionsDisponibles = [1]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    typesDeQuestionsDisponibles = [1]\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    // let listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // une fonction pour gérer le pluriel\n      function pluriel (n, obj) {\n        if (n > 1) {\n          return obj.achat_plur\n        } else {\n          return obj.achat_sing\n        };\n      };\n\n      // une fonction pour gérer la chaine de sortie et supprimer le coeff 1 !\n      ;\n\n      // une fonction pour calculer la différence positive entre deux entiers\n      function diffInt (n, p) {\n        if (n > p) {\n          return calcul(n - p)\n        } else if (n < p) {\n          return calcul(p - n)\n        } else {\n          return 0\n        }\n      };\n\n      // un compteur pour les sous-questions\n      let k = 0\n      let kCorr = 0\n      // on crée un tableau d'objets pour les situations possibles\n      let n1, n2, n3, n4, nMax\n      do {\n        n1 = randint(1, 9)\n        n2 = randint(1, 9, [n1])\n        n3 = n1 + n2\n        n4 = diffInt(n1, n2)\n        nMax = randint(10, 19, [n3])\n      } while (n4 === 1)\n      // n1 sera toujours le plus grand sinon on intervertit les deux\n      let temp\n      if (n1 < n2) {\n        temp = n1\n        n1 = n2\n        n2 = temp\n      };\n      const situations = [\n        { lieu: 'la boulangerie', achat_sing: 'pain au chocolat', achat_plur: 'pains au chocolat', prenom1: prenom(), prenom2: prenom(), prenom3: prenom(), prenom4: prenom(), prenom_max: prenom(), n1: n1, n2: n2, n3: n3, n4: n4, nMax: nMax, pu: 0.9 }\n      ]\n      const enonces = []\n      const situation = situations[randint(0, situations.length - 1)]\n\n      enonces.push({\n        enonce: `\n          À ${situation.lieu}, ${situation.prenom1} achète $${situation.n1}$ ${pluriel(situation.n1, situation)} et paie $${texPrix(situation.pu * situation.n1)}$ €.\n          <br>${situation.prenom2} achète $${situation.n2}$ ${pluriel(situation.n2, situation)} et paie $${texPrix(situation.pu * situation.n2)}$ €.\n          <br>\n          <br>${numAlpha(k++)} Combien paiera ${situation.prenom3} pour $${situation.n3}$ ${pluriel(situation.n3, situation)} ? ${ajouteChampTexteMathLive(this, 3 * i, 'largeur25 inline')}\n          <br>${numAlpha(k++)} Combien paiera ${situation.prenom4} pour $${situation.n4}$ ${pluriel(situation.n4, situation)} ? ${ajouteChampTexteMathLive(this, 3 * i + 1, 'largeur25 inline')}\n          <br>${numAlpha(k++)} Quel est le nombre maximum de ${situation.achat_plur} que ${situation.prenom_max} peut acheter avec $${texPrix(situation.pu * situation.nMax)}$ € ? ${ajouteChampTexteMathLive(this, 3 * i + 2, 'largeur25 inline')}\n          `,\n        question: '',\n        correction: `\n        C'est une situation de proportionnalité. Nous pouvons donc utiliser les propriétés de linéarité de la proportionnalité.\n        <br>C'est ce que nous allons faire pour les deux premières questions.\n        <br>\n        <br>${numAlpha(kCorr++)} Pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${texPrix(situation.pu * situation.n1)}$ €.\n        <br> Pour $${situation.n2}$ ${pluriel(situation.n2, situation)}, on paie $${texPrix(situation.pu * situation.n2)}$ €.\n        <br> Donc pour $${situation.n1}+${situation.n2}$ ${pluriel(situation.n3, situation)}, on paie $${texPrix(situation.pu * situation.n1)}$ € + $${texPrix(situation.pu * situation.n2)}$ €.\n        <br> ${texteEnCouleur(`${situation.prenom3} paiera donc $${texPrix(situation.pu * situation.n3)}$ € pour $${situation.n3}$ ${pluriel(situation.n3, situation)}.`)}\n        <br>\n        <br>${numAlpha(kCorr++)} Pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${texPrix(situation.pu * situation.n1)}$ €.\n        <br> Pour $${situation.n2}$ ${pluriel(situation.n2, situation)}, on paie $${texPrix(situation.pu * situation.n2)}$ €.\n        <br> Donc pour $${situation.n1}-${situation.n2}$ ${pluriel(situation.n4, situation)}, on paie $${texPrix(situation.pu * situation.n1)}$ € - $${texPrix(situation.pu * situation.n2)}$ €.\n        <br> ${texteEnCouleur(`${situation.prenom4} paiera donc $${texPrix(situation.pu * situation.n4)}$ € pour $${situation.n4}$ ${pluriel(situation.n4, situation)}.`)}\n        <br>\n        <br>${numAlpha(kCorr++)} On peut utiliser l'une ou l'autre des informations de l'énoncé pour répondre en revenant à l'unité.\n        <br> Par exemple pour $${situation.n1}$ ${pluriel(situation.n1, situation)}, on paie $${texPrix(situation.pu * situation.n1)}$ €.\n        <br> Donc $1$ ${situation.achat_sing} coûte $${texPrix(situation.pu * situation.n1)}\\\\div ${situation.n1} = ${texPrix(situation.pu)}$ €.\n        <br> Pour $${texPrix(situation.pu * situation.nMax)}$ € nous aurons donc $${texPrix(situation.pu * situation.nMax)}\\\\div ${texPrix(situation.pu)}$ € $= ${situation.nMax}$ ${pluriel(situation.nMax, situation)}.\n        <br> ${texteEnCouleur(`Avec $${texPrix(situation.pu * situation.nMax)}$ €, ${situation.prenom_max} pourra donc acheter $${situation.nMax}$ ${pluriel(situation.nMax, situation)}.`)}\n        `\n      })\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n      }\n\n      if (tabHash.indexOf(checkSum(situation.prenom4, situation.n3, situation.n2, situation.nMax)) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        tabHash.push(checkSum(situation.prenom4, situation.n3, situation.n2, situation.nMax))\n        if (!context.isAmc) {\n          setReponse(this, 3 * i, arrondi(situation.pu * situation.n3, 2))\n          setReponse(this, 3 * i + 1, arrondi(situation.pu * situation.n4, 2))\n          setReponse(this, 3 * i + 2, situation.nMax)\n        } else {\n          this.autoCorrection[i] = {\n            enonce: texte,\n            propositions: [\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: texteCorr,\n                  statut: '',\n                  reponse: {\n                    texte: 'a) ',\n                    valeur: arrondi(situation.pu * situation.n3, 2),\n                    param: {\n                      digits: nombreDeChiffresDe(arrondi(situation.pu * situation.n3, 2)),\n                      decimals: nombreDeChiffresDansLaPartieDecimale(arrondi(situation.pu * situation.n3, 2)),\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: '',\n                  statut: '',\n                  reponse: {\n                    texte: 'b) ',\n                    valeur: arrondi(situation.pu * situation.n4, 2),\n                    param: {\n                      digits: nombreDeChiffresDe(arrondi(situation.pu * situation.n4, 2)),\n                      decimals: nombreDeChiffresDansLaPartieDecimale(arrondi(situation.pu * situation.n4, 2)),\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: '',\n                  statut: '',\n                  reponse: {\n                    texte: 'c) ',\n                    valeur: situation.nMax,\n                    param: {\n                      digits: 2,\n                      decimals: 0,\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              }\n            ]\n          }\n        }\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","ProportionnaliteParLineariteBis","typesDeQuestionsDisponibles","Exercice","this","beta","nbQuestions","consigne","context","spacing","nbCols","nbColsCorr","nouvelleVersion","tabHash","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","pluriel","n","obj","achat_plur","achat_sing","n1","n2","n3","n4","nMax","temp","k","kCorr","randint","p","calcul","situations","lieu","prenom1","prenom","prenom2","prenom3","prenom4","prenom_max","pu","enonces","situation","length","push","enonce","texPrix","numAlpha","ajouteChampTexteMathLive","question","correction","texteEnCouleur","indexOf","checkSum","autoCorrection","propositions","type","statut","reponse","valeur","arrondi","param","digits","nombreDeChiffresDe","decimals","nombreDeChiffresDansLaPartieDecimale","signe","approx","setReponse","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}