{"version":3,"file":"js/60111.91164a54db100e51745b.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Construire_par_symetrie.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, creerNomDePolygone, numAlpha } from '../../modules/outils.js'\nimport { point, tracePoint, pointSurDroite, pointIntersectionDD, labelPoint, droite, droiteVerticaleParPoint, droiteParPointEtPente, codageMediatrice, codageMilieu, segment, polygone, nommePolygone, rotation, symetrieAxiale, grille, seyes, mathalea2d } from '../../modules/2d.js'\nimport { context } from '../../modules/context.js'\n\n/**\n * @author Jean-Claude Lhote\n * Fonction générale pour les exercices de construction de symétriques (centrale/axiale et points/triangles)\n * références  6G24-1, 6G24-2, 5G10-1, 5G10-2, 5G11-1 et 5G11-2\n * Permet une sortie html/pdf sur petits carreaux/gros carreaux/papier blanc\n */\n\nexport default function ConstruireParSymetrie () {\n  Exercice.call(this)\n  this.titre = 'Construire par Symétrie...'\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 2\n  this.sup2 = 1\n  this.figure = false\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    let typesDeQuestionsDisponibles\n    if (this.sup === 3) { // Symétrie axiale ou centrale\n      if (this.figure === false) typesDeQuestionsDisponibles = [0, 1, 2] // points\n      else typesDeQuestionsDisponibles = [3, 4, 5]\n    } else { // triangle\n      if (this.figure === false) typesDeQuestionsDisponibles = [parseInt(this.sup)] // Le choix 1 ou 2 : points\n      else typesDeQuestionsDisponibles = [parseInt(this.sup) + 3] // figures\n    }\n    const listeTypeDeQuestions = combinaisonListes(\n      typesDeQuestionsDisponibles,\n      this.nbQuestions\n    )\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let Xmin, Xmax, Ymin, Ymax, sc\n    if (parseInt(this.sup2) === 2) sc = 0.8\n    else sc = 0.5\n\n    let A; let AA; let cA; let sA\n    let B\n    let C; let CC; let cC; let sC; let sCE\n    let D; let DD; let cD; let sD; let sDE\n    let E; let EE; let cE; let sE; let sED\n    let sEC; let inter\n    let d; let enonce\n    let correction\n    let g\n    let carreaux\n    let k\n    const objetsEnonce = []\n    const objetsCorrection = []\n    let p1; let p2; let p1nom\n    for (\n      let i = 0, cpt = 0, numQuestion;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      objetsEnonce.length = 0\n      objetsCorrection.length = 0\n      switch (listeTypeDeQuestions[i]) {\n        case 0: // 3 symétries axiales simples de points (6ème)\n          p1nom = creerNomDePolygone(5, 'PQ')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 0, 1, 2])\n\n          if (k < 2) d = droiteParPointEtPente(A, k)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          d.isVisible = true\n          d.epaisseur = 1\n          if (k === 2) {\n            A.positionLabel = 'left'\n            B.positionLabel = 'left'\n          }\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, 'left')\n          // F = point(E.x+1,5-B.y,'F','above left');\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'below left')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above right')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'left')\n          // FF=symetrieAxiale(F,d,'F'','below left')\n          cC = codageMediatrice(C, CC, 'red', '|')\n          cD = codageMediatrice(D, DD, 'blue', 'X')\n          cE = codageMediatrice(E, EE, 'green', 'O')\n          // cF=codageMediatrice(F,FF,'purple','V')\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sE = segment(E, EE)\n          // sF=segment(F,FF)\n          sCE = droite(CC, EE, '', 'gray')\n          sCE.pointilles = true\n          sED = droite(EE, D, '', 'gray')\n          sED.pointilles = true\n          sDE = droite(DD, E, '', 'gray')\n          sDE.pointilles = true\n          sEC = droite(C, E, '', 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 5) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n\n          break\n        case 1: // 3 symétries axiales de points\n          p1nom = creerNomDePolygone(5)\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(10, 13), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 8), randint(-8, -5), `${p1nom[4]}`, 'left')\n          // F = point(E.x+1,5-B.y,'F','above left');\n          CC = symetrieAxiale(C, d, `${p1nom[2]}'`, 'below left')\n          DD = symetrieAxiale(D, d, `${p1nom[3]}'`, 'above right')\n          EE = symetrieAxiale(E, d, `${p1nom[4]}'`, 'left')\n          // FF=symetrieAxiale(F,d,'F'','below left')\n          cC = codageMediatrice(C, CC, 'red', '|')\n          cD = codageMediatrice(D, DD, 'blue', 'X')\n          cE = codageMediatrice(E, EE, 'green', 'O')\n          // cF=codageMediatrice(F,FF,'purple','V')\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sE = segment(E, EE)\n          // sF=segment(F,FF)\n          sCE = segment(CC, EE, 'gray')\n          sCE.pointilles = true\n          sED = segment(EE, D, 'gray')\n          sED.pointilles = true\n          sDE = segment(DD, E, 'gray')\n          sDE.pointilles = true\n          sEC = segment(C, E, 'gray')\n          sEC.pointilles = true\n\n          objetsCorrection.push(d, tracePoint(A, B, C, D, E, CC, DD, EE), labelPoint(A, B, C, D, E, CC, DD, EE), cC, cD, cE, sC, sD, sE, sED, sDE, sCE, sEC)\n          objetsEnonce.push(tracePoint(A, B, C, D, E), labelPoint(A, B, C, D, E), d)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[4]}'$ symétrique de $${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 5) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, E.x, EE.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, E.y, EE.y, CC.y, DD.y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les segments en pointillés se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n          break\n        case 2: // 3 symétries centrales de points\n          p1nom = creerNomDePolygone(4)\n          A = point(0, randint(-1, 4), `${p1nom[0]}`, 'left')\n          B = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          C = point(randint(2, 3), randint(-4, -2), `${p1nom[2]}`, 'left')\n          D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right')\n          CC = rotation(C, B, 180, `${p1nom[2]}'`, 'right')\n          DD = rotation(D, B, 180, `${p1nom[3]}'`, 'above left')\n          AA = rotation(A, B, 180, `${p1nom[0]}'`, 'right')\n          cC = codageMilieu(C, CC, 'red', '|', false)\n          cD = codageMilieu(D, DD, 'blue', '||', false)\n          cA = codageMilieu(A, AA, 'green', '|||', false)\n          sC = segment(C, CC)\n          sD = segment(D, DD)\n          sA = segment(A, AA)\n\n          objetsCorrection.push(tracePoint(A, C, D, CC, DD, AA), labelPoint(A, B, C, D, CC, DD, AA), cC, cD, cA, sC, sD, sA)\n          objetsEnonce.push(tracePoint(A, B, C, D), labelPoint(A, B, C, D))\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le point $${p1nom[2]}'$ symétrique de $${p1nom[2]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ` Construire le point $${p1nom[3]}'$ symétrique de $${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 3) + ` Construire le point $${p1nom[0]}'$ symétrique de $${p1nom[0]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 4) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, AA.x, CC.x, DD.x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, AA.y, CC.y, DD.y) + 1)\n          correction = ''\n          break\n\n        case 3: // symétrie axiale simple d'un triangle\n          p1nom = creerNomDePolygone(5, 'PQ')\n          A = point(0, 0, `${p1nom[0]}`, 'above')\n          k = choice([-1, 0, 1, 2])\n\n          if (k < 2) d = droiteParPointEtPente(A, k)\n          else d = droiteVerticaleParPoint(A)\n          B = pointSurDroite(d, 6, `${p1nom[1]}`, 'above')\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(3, 5), randint(-4, -3), `${p1nom[3]}`, 'below right')\n          // dB = droiteParPointEtPerpendiculaire(B, d);\n          E = point(randint(6, 7), randint(5, 6), `${p1nom[4]}`, 'left')\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          objetsCorrection.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p1.sommets, p2, p2.sommets, sCE, sED)\n          objetsEnonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = ''\n\n          break\n        case 4: // symetrie axiale d'un triangle\n          p1nom = creerNomDePolygone(5)\n\n          A = point(0, randint(-1, 1), `${p1nom[0]}`, 'above')\n          B = point(6, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          d = droite(A, B)\n          d.isVisible = true\n          d.epaisseur = 1\n          C = point(randint(2, 3), randint(3, 4), `${p1nom[2]}`, 'above left')\n          D = point(randint(10, 13), randint(-4, -2), `${p1nom[3]}`, 'below right')\n          E = point(randint(6, 8), randint(-8, -6), `${p1nom[4]}`, 'left')\n          p1 = polygone(C, D, E)\n          p2 = symetrieAxiale(p1, d)\n          p2.listePoints[0].nom = `${p1nom[2]}'`\n          p2.listePoints[1].nom = `${p1nom[3]}'`\n          p2.listePoints[2].nom = `${p1nom[4]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMediatrice(p1.listePoints[0], p2.listePoints[0], 'red', '|')\n          cD = codageMediatrice(p1.listePoints[1], p2.listePoints[1], 'blue', 'X')\n          cE = codageMediatrice(p1.listePoints[2], p2.listePoints[2], 'green', 'O')\n          sC = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sD = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sE = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n          sCE = droite(p1.listePoints[2], p1.listePoints[1], '', 'gray')\n          sCE.pointilles = true\n          sED = droite(p2.listePoints[2], p2.listePoints[1], '', 'gray')\n          sED.pointilles = true\n          inter = pointIntersectionDD(sCE, sED)\n          objetsCorrection.push(d, tracePoint(A, B), labelPoint(A, B), cC, cD, cE, sC, sD, sE, CC, DD, p1, p2, sCE, sED)\n          objetsEnonce.push(d, tracePoint(A, B), labelPoint(A, B), CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[2]}'${p1nom[3]}'${p1nom[4]}'$ symétrique de $${p1nom[2]}${p1nom[3]}${p1nom[4]}$ par rapport à la droite $(${p1nom[0]}${p1nom[1]})$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(inter.x, A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(inter.y, A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n\n          correction = `Contrôler la figure en vérifiant que les côtés des deux triangles se coupent bien sur la droite $(${p1nom[0]}${p1nom[1]})$<br>`\n          break\n        case 5:\n          p1nom = creerNomDePolygone(4)\n          A = point(0, randint(-1, 4), `${p1nom[0]}`, 'left')\n          B = point(7, randint(-1, 1, A.y), `${p1nom[1]}`, 'above')\n          C = point(randint(2, 3), randint(-6, -4), `${p1nom[2]}`, 'left')\n          D = point(randint(10, 13), randint(-6, -5), `${p1nom[3]}`, 'below right')\n          p1 = polygone(A, C, D)\n          p2 = rotation(p1, B, 180)\n          p2.listePoints[0].nom = `${p1nom[0]}'`\n          p2.listePoints[1].nom = `${p1nom[2]}'`\n          p2.listePoints[2].nom = `${p1nom[3]}'`\n          CC = nommePolygone(p1)\n          DD = nommePolygone(p2)\n          cC = codageMilieu(p1.listePoints[0], p2.listePoints[0], 'red', '|', false)\n          cD = codageMilieu(p1.listePoints[1], p2.listePoints[1], 'blue', 'X', false)\n          cA = codageMilieu(p1.listePoints[2], p2.listePoints[2], 'green', 'O', false)\n          sA = segment(p1.listePoints[0], p2.listePoints[0], 'red')\n          sC = segment(p1.listePoints[1], p2.listePoints[1], 'blue')\n          sD = segment(p1.listePoints[2], p2.listePoints[2], 'green')\n\n          objetsCorrection.push(tracePoint(B), labelPoint(B), cC, cD, cA, sC, sD, sA, DD, CC, p1, p2)\n          objetsEnonce.push(tracePoint(B), labelPoint(B), CC, p1)\n          if (context.isHtml) {\n            numQuestion = 0\n            enonce = numAlpha(numQuestion) + ' Reproduire la figure ci-dessous.<br>'\n          } else {\n            numQuestion = -1\n            enonce = ''\n          }\n          enonce += numAlpha(numQuestion + 1) + ` Construire le triangle  $${p1nom[0]}'${p1nom[2]}'${p1nom[3]}'$ symétrique de $${p1nom[0]}${p1nom[2]}${p1nom[3]}$ par rapport au point $${p1nom[1]}$.<br>`\n          enonce += numAlpha(numQuestion + 2) + ' Coder la figure.<br>'\n          Xmin = Math.floor(Math.min(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) - 1)\n          Xmax = Math.ceil(Math.max(A.x, B.x, C.x, D.x, p1.listePoints[0].x, p1.listePoints[1].x, p1.listePoints[2].x, p2.listePoints[0].x, p2.listePoints[1].x, p2.listePoints[2].x) + 1)\n          Ymin = Math.floor(Math.min(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) - 1)\n          Ymax = Math.ceil(Math.max(A.y, B.y, C.y, D.y, p1.listePoints[0].y, p1.listePoints[1].y, p1.listePoints[2].y, p2.listePoints[0].y, p2.listePoints[1].y, p2.listePoints[2].y) + 1)\n          correction = ''\n          break\n      }\n\n      const params = {\n        xmin: Xmin,\n        ymin: Ymin,\n        xmax: Xmax,\n        ymax: Ymax,\n        pixelsParCm: 20,\n        scale: sc\n      }\n      if (this.sup2 < 3) g = grille(Xmin, Ymin, Xmax, Ymax, 'gray', 0.7)\n      else g = ''\n      if (parseInt(this.sup2) === 2) {\n        k = 0.8\n        carreaux = seyes(Xmin, Ymin, Xmax, Ymax)\n      } else {\n        k = 0.5\n        carreaux = ''\n      }\n      objetsEnonce.push(g, carreaux)\n      objetsCorrection.push(g, carreaux)\n      enonce += mathalea2d(params\n        ,\n        objetsEnonce\n      )\n      correction += mathalea2d(\n        params,\n        objetsCorrection\n      )\n      if (this.listeQuestions.indexOf(enonce) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(enonce + '<br>')\n        this.listeCorrections.push(correction + '<br>')\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 4, '0 : symétries axiales simples\\n 1 : Symétrie axiale\\n 2 : Symétrie centrale\\n 3 : Mélange']\n  this.besoinFormulaire2Numerique = [\n    'Type de cahier',\n    3,\n    '1 : Cahier à petits careaux\\n 2 : Cahier à gros carreaux (Seyes)\\n 3 : Feuille blanche'\n  ]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["ConstruireParSymetrie","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","sup","sup2","figure","nouvelleVersion","typesDeQuestionsDisponibles","parseInt","listeTypeDeQuestions","combinaisonListes","Xmin","Xmax","Ymin","Ymax","sc","A","AA","cA","sA","B","C","CC","cC","sC","sCE","D","DD","cD","sD","sDE","E","EE","cE","sE","sED","sEC","inter","d","enonce","correction","g","carreaux","k","listeQuestions","listeCorrections","objetsEnonce","objetsCorrection","p1","p2","p1nom","numQuestion","i","cpt","length","creerNomDePolygone","point","choice","droiteParPointEtPente","droiteVerticaleParPoint","pointSurDroite","isVisible","epaisseur","positionLabel","randint","symetrieAxiale","codageMediatrice","segment","droite","pointilles","push","tracePoint","labelPoint","context","numAlpha","Math","floor","min","x","ceil","max","y","rotation","codageMilieu","polygone","listePoints","nom","nommePolygone","sommets","pointIntersectionDD","params","xmin","ymin","xmax","ymax","pixelsParCm","scale","grille","seyes","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}