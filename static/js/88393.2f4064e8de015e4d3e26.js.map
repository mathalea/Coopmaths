{"version":3,"file":"js/88393.2f4064e8de015e4d3e26.js","mappings":"qPACO,MAAMA,EAAQ,mFASN,SAASC,IACtBC,EAAAA,QAAAA,KAA6BC,Q,0ICRxB,MAAMH,EAAQ,4BACRI,GAAkB,EAClBC,EAAiB,WAcf,SAASH,IACtBI,EAAAA,QAAAA,KAAcH,MACdA,KAAKH,MAAQA,EACbG,KAAKC,gBAAkBA,EACvBD,KAAKE,eAAiBA,EACtBF,KAAKI,SAAW,GAChBJ,KAAKK,YAAc,EACnBL,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAKQ,IAAM,EAEXR,KAAKS,gBAAkB,WACrBT,KAAKQ,IAAME,SAASV,KAAKQ,KACzBR,KAAKW,eAAiB,GACtBX,KAAKY,iBAAmB,GACxB,IAAIC,EAA8B,GACjB,IAAbb,KAAKQ,MACPK,EAA8B,CAAC,WAEhB,IAAbb,KAAKQ,MACPK,EAA8B,CAAC,cAEhB,IAAbb,KAAKQ,MACPK,EAA8B,CAAC,aAEhB,IAAbb,KAAKQ,MACPK,EAA8B,CAAC,SAAU,YAAa,aAExD,MACMC,GAAuBC,EAAAA,EAAAA,KAAkBF,EAA6Bb,KAAKK,aAC3EW,GAAoBD,EAAAA,EAAAA,KAFI,CAAC,OAAQ,gBAAiB,UAAW,cAEAf,KAAKK,aACxE,IAAIY,EAAMC,EAAYC,EAAeC,EAAeC,EAASC,EAC7D,IAAK,IAAWC,EAAOC,EAAWC,EAAQC,EAAQC,EAAMC,EAAOC,EAAtDC,EAAI,EAA2DC,EAAM,EAAGD,EAAI9B,KAAKK,aAAe0B,EAAM,IAAK,CAClH,OAAQf,EAAkBc,IACxB,IAAK,OAMH,OALAL,GAASO,EAAAA,EAAAA,KAAO,EAACC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAQ,GAAI,IAAM,KAAKA,EAAAA,EAAAA,KAAQ,GAAI,IAAuB,IAAlBA,EAAAA,EAAAA,KAAQ,GAAI,MAC5EP,GAAOK,EAAAA,EAAAA,KAAO,CAAC,GAAI,GAAI,GAAI,GAAI,KAC/BL,IAAQK,EAAAA,EAAAA,KAAO,EAAE,EAAG,IACpBJ,GAAQO,EAAAA,EAAAA,KAAW,EAAIR,EAAO,KAC9BD,GAASO,EAAAA,EAAAA,KAAOR,GAAU,EAAIE,EAAO,MAC7Bb,EAAqBgB,IAC3B,IAAK,SACCH,EAAO,GACTJ,EAAS,wBAAsBa,EAAAA,EAAAA,KAAQX,oCAAyCE,qCAChFH,EAAa,wBAAuBG,8CAAiDA,WAAc,IAAMA,WAAcC,MACvHJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQX,aAAkBG,QAAWQ,EAAAA,EAAAA,KAAQV,MAClEF,GAAc,2CAAyCY,EAAAA,EAAAA,KAAQV,QAC/DG,EAAUH,IAEVH,EAAS,wBAAsBa,EAAAA,EAAAA,KAAQX,kCAAuCE,qCAC9EH,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,MACxHJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQX,aAAkBG,QAAWQ,EAAAA,EAAAA,KAAQV,MAClEF,GAAc,2CAAyCY,EAAAA,EAAAA,KAAQV,QAC/DG,EAAUH,GAEZ,MACF,IAAK,WACCC,EAAO,GACTJ,EAAS,8BAA6BI,wCAA0CS,EAAAA,EAAAA,KAAQV,iDACxFF,EAAa,wBAAuBG,8CAAiDA,SAAY,IAAMA,WAAcC,+EAAmFA,KACxMJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQV,WAAgBE,QAAWQ,EAAAA,EAAAA,KAAQX,MAChED,GAAc,iDAA+CY,EAAAA,EAAAA,KAAQX,QACrEI,EAAUJ,IAEVF,EAAS,YAAWI,wCAA0CS,EAAAA,EAAAA,KAAQV,6CACtEF,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,+EAAmFA,KAC3MJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQV,WAAgBE,QAAWQ,EAAAA,EAAAA,KAAQX,MAChED,GAAc,6CAA2CY,EAAAA,EAAAA,KAAQX,QACjEI,EAAUJ,GAEZ,MACF,IAAK,YACCE,EAAO,GACTJ,EAAS,4BAA0Ba,EAAAA,EAAAA,KAAQX,4BAAgCW,EAAAA,EAAAA,KAAQV,yDACnFF,EAAa,KAAGY,EAAAA,EAAAA,KAAQV,YAAgBU,EAAAA,EAAAA,KAAQX,QAAaG,QAAY,IAAMD,mBAAsBA,SACrGH,GAAc,mCAAkCI,6BAAiCD,UACjFE,EAAUF,IAEVJ,EAAS,4BAA0Ba,EAAAA,EAAAA,KAAQX,4BAAgCW,EAAAA,EAAAA,KAAQV,uDACnFF,EAAa,KAAGY,EAAAA,EAAAA,KAAQV,YAAgBU,EAAAA,EAAAA,KAAQX,QAAaG,QAAY,IAAMD,kBAAqBA,SACpGH,GAAc,mCAAkCI,6BAAgCS,EAAAA,EAAAA,KAAIV,WACpFE,GAAUQ,EAAAA,EAAAA,KAAIV,IAIpB,MACF,IAAK,gBAKH,QAAQO,EAAAA,EAAAA,KAAQ,EAAG,IACjB,KAAK,EACHT,EAAS,IAAKS,EAAAA,EAAAA,KAAQ,EAAG,IACzBP,EAAO,GAAIO,EAAAA,EAAAA,KAAQ,EAAG,GACtB,MACF,KAAK,EACHT,EAAS,IAAKS,EAAAA,EAAAA,KAAQ,GAAI,IAC1BP,EAAO,GAAIO,EAAAA,EAAAA,KAAQ,EAAG,GACtB,MACF,KAAK,EACHT,EAAS,KAAMS,EAAAA,EAAAA,KAAQ,EAAG,IAC1BP,GAAOO,EAAAA,EAAAA,KAAQ,EAAG,IAStB,OANAR,GAASO,EAAAA,EAAAA,KAAOR,GAAU,EAAIE,EAAO,MACrCC,GAAQO,EAAAA,EAAAA,KAAW,EAAIR,EAAO,KAC9BV,EAAO,IAAIqB,KACXpB,EAAaD,EAAKsB,cAClBpB,EAAgBD,EAAa,EAC7BE,GAAgBY,EAAAA,EAAAA,KAAO,CAAC,UAAW,UAC3BlB,EAAqBgB,IAC3B,IAAK,SACCH,EAAO,GACTJ,EAAS,MAAKH,aAAwBoB,EAAAA,EAAAA,KAAUf,iBAAsBN,gDAA4DQ,+CAAkDP,iBACpLI,EAAa,wBAAuBG,8CAAiDA,WAAc,IAAMA,WAAcC,MACvHJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUf,aAAkBG,QAAWY,EAAAA,EAAAA,KAAUd,MACtEF,GAAc,0BAAwBiB,EAAAA,EAAAA,KAAaf,qBAA0BN,KAC7ES,EAAUH,IAEVH,EAAS,MAAKH,aAAwBoB,EAAAA,EAAAA,KAAUf,iBAAsBN,gDAA2DkB,EAAAA,EAAAA,KAAIV,gDAAmDP,iBACxLI,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,MACxHJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUf,aAAkBG,QAAWY,EAAAA,EAAAA,KAAUd,MACtEF,GAAc,0BAAwBiB,EAAAA,EAAAA,KAAaf,qBAA0BN,KAC7ES,EAAUH,GAEZ,MACF,IAAK,WACCC,EAAO,GACTJ,EAAS,UAASJ,6BAAyCC,oBAAgCO,+BAAiCa,EAAAA,EAAAA,KAAUd,8CAAmDP,4BACzLK,EAAa,wBAAuBG,8CAAiDA,WAAc,IAAMA,WAAcC,sGAA0GA,KACjOJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUd,WAAgBE,QAAWY,EAAAA,EAAAA,KAAUf,MACpED,GAAc,UAASL,kBAA6BsB,EAAAA,EAAAA,KAAahB,qBAA0BL,KAC3FS,EAAUJ,IAEVF,EAAS,UAASJ,6BAAyCC,mBAA+BO,+BAAiCa,EAAAA,EAAAA,KAAUd,8CAAmDP,4BACxLK,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,sGAA0GA,KAClOJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUd,WAAgBE,QAAWY,EAAAA,EAAAA,KAAUf,MACpED,GAAc,UAASL,kBAA6BsB,EAAAA,EAAAA,KAAahB,qBAA0BL,KAC3FS,EAAUJ,GAEZ,MACF,IAAK,YACHF,EAAS,MAAKJ,mBAA8BqB,EAAAA,EAAAA,KAAUf,sBAA2BL,SAAqBF,iBAAyBsB,EAAAA,EAAAA,KAAUd,qFACrIC,EAAO,GACTH,EAAa,KAAGgB,EAAAA,EAAAA,KAAUd,YAAgBc,EAAAA,EAAAA,KAAUf,QAAaG,QAAY,IAAMD,mBAAsBA,SACzGH,GAAc,8CAA6CI,6BAAiCD,UAC5FE,EAAUF,IAEVJ,EAAS,4BAA0BiB,EAAAA,EAAAA,KAAUf,4BAAgCe,EAAAA,EAAAA,KAAUd,uDACvFF,EAAa,KAAGgB,EAAAA,EAAAA,KAAUd,YAAgBU,EAAAA,EAAAA,KAAQX,QAAaG,QAAY,IAAMD,kBAAqBA,SACtGH,GAAc,8CAA6CI,6BAAgCS,EAAAA,EAAAA,KAAIV,WAC/FE,GAAUQ,EAAAA,EAAAA,KAAIV,IAIpB,MACF,IAAK,UAOH,OANAF,GAASS,EAAAA,EAAAA,KAAQ,IAAK,MACtBP,GAAOO,EAAAA,EAAAA,KAAQ,EAAG,IAClBP,IAAQK,EAAAA,EAAAA,KAAO,EAAE,EAAG,IACpBJ,GAAQO,EAAAA,EAAAA,KAAW,EAAIR,EAAO,KAC9BD,GAASO,EAAAA,EAAAA,KAAOR,GAAU,EAAIE,EAAO,MACrCN,GAAUW,EAAAA,EAAAA,KAAO,CAAC,oCAAqC,6BAA8B,uBAAwB,iBAAkB,wBACvHlB,EAAqBgB,IAC3B,IAAK,SACCH,EAAO,GACTJ,EAAS,cAAaF,gBAAqBe,EAAAA,EAAAA,KAAQX,+CAAoDE,qCACvGH,EAAa,wBAAuBG,8CAAiDA,WAAc,IAAMA,WAAcC,MACvHJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQX,aAAkBG,QAAWQ,EAAAA,EAAAA,KAAQV,MAClEF,GAAc,kBAAiBH,wBAA6Be,EAAAA,EAAAA,KAAQV,QACpEG,EAAUH,IAEVH,EAAS,cAAaF,gBAAqBe,EAAAA,EAAAA,KAAQX,+CAAmDY,EAAAA,EAAAA,KAAIV,sCAC1GH,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,MACxHJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQX,aAAkBG,QAAWQ,EAAAA,EAAAA,KAAQV,MAClEF,GAAc,kBAAiBH,wBAA6Be,EAAAA,EAAAA,KAAQV,QACpEG,EAAUH,GAEZ,MACF,IAAK,WACCC,EAAO,GACTJ,EAAS,8BAA6BI,qBAAwBN,sBAA2Be,EAAAA,EAAAA,KAAQV,iDACjGF,EAAa,wBAAuBG,8CAAiDA,SAAY,IAAMA,WAAcC,+EAAmFA,KACxMJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQV,WAAgBE,QAAWQ,EAAAA,EAAAA,KAAQX,MAChED,GAAc,uCAAsCH,eAAoBe,EAAAA,EAAAA,KAAQX,QAChFI,EAAUJ,IAEVF,EAAS,6BAA2Bc,EAAAA,EAAAA,KAAIV,WAAcN,wBAA6Be,EAAAA,EAAAA,KAAQV,6CAC3FF,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,+EAAmFA,KAC3MJ,GAAc,SAAOY,EAAAA,EAAAA,KAAQV,WAAgBE,QAAWQ,EAAAA,EAAAA,KAAQX,MAChED,GAAc,sCAAqCH,eAAoBe,EAAAA,EAAAA,KAAQX,QAC/EI,EAAUJ,GAEZ,MACF,IAAK,YACCE,EAAO,GACTJ,EAAS,cAAaF,oBAAyBe,EAAAA,EAAAA,KAAQX,aAAiBW,EAAAA,EAAAA,KAAQV,qDAChFF,EAAa,KAAGY,EAAAA,EAAAA,KAAQV,YAAgBU,EAAAA,EAAAA,KAAQX,QAAaG,QAAY,IAAMD,mBAAsBA,SACrGH,GAAc,mCAAkCI,6BAAiCD,UACjFE,EAAUF,IAEVJ,EAAS,cAAaF,oBAAyBe,EAAAA,EAAAA,KAAQX,aAAiBW,EAAAA,EAAAA,KAAQV,mDAChFF,EAAa,KAAGY,EAAAA,EAAAA,KAAQV,YAAgBU,EAAAA,EAAAA,KAAQX,QAAaG,QAAY,IAAMD,kBAAqBA,SACpGH,GAAc,mCAAkCI,6BAAgCS,EAAAA,EAAAA,KAAIV,WACpFE,GAAUQ,EAAAA,EAAAA,KAAIV,IAIpB,MACF,IAAK,aAOH,OANAF,GAASO,EAAAA,EAAAA,KAAO,CAAmB,KAAlBE,EAAAA,EAAAA,KAAQ,GAAI,IAA8B,KAAlBA,EAAAA,EAAAA,KAAQ,GAAI,MACrDP,GAAOO,EAAAA,EAAAA,KAAQ,EAAG,IAClBP,IAAQK,EAAAA,EAAAA,KAAO,EAAE,EAAG,IACpBJ,GAAQO,EAAAA,EAAAA,KAAW,EAAIR,EAAO,KAC9BD,GAASO,EAAAA,EAAAA,KAAOR,GAAU,EAAIE,EAAO,MACrCL,GAAKY,EAAAA,EAAAA,KAAQ,EAAG,IACRpB,EAAqBgB,IAC3B,IAAK,SACCH,EAAO,GACTJ,EAAS,UAASD,+CAA+CkB,EAAAA,EAAAA,KAAUf,8CAAmDE,gEAC9HH,EAAa,wBAAuBG,8CAAiDA,WAAc,IAAMA,WAAcC,MACvHJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUf,aAAkBG,QAAWY,EAAAA,EAAAA,KAAUd,MACtEF,GAAc,wDAAsDgB,EAAAA,EAAAA,KAAUd,mBAE9EH,EAAS,UAASD,+CAA+CkB,EAAAA,EAAAA,KAAUf,8CAAkDY,EAAAA,EAAAA,KAAIV,iEACjIH,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,MACxHJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUf,aAAkBG,QAAWY,EAAAA,EAAAA,KAAUd,MACtEF,GAAc,wDAAsDgB,EAAAA,EAAAA,KAAUd,kBAEhFG,EAAUH,EACV,MACF,IAAK,WACCC,EAAO,GACTJ,EAAS,MAAKD,mDAAoDK,8BAAgCa,EAAAA,EAAAA,KAAUd,kDAAuDJ,SACnKE,EAAa,wBAAuBG,8CAAiDA,SAAY,IAAMA,WAAcC,qGAAyGA,KAC9NJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUd,WAAgBE,QAAWY,EAAAA,EAAAA,KAAUf,MACpED,GAAc,cAAaF,gCAAgCkB,EAAAA,EAAAA,KAAUf,mBAErEF,EAAS,MAAKD,mDAAmDe,EAAAA,EAAAA,KAAIV,+BAAiCa,EAAAA,EAAAA,KAAUd,kDAAuDJ,SACvKE,EAAa,uBAAqBa,EAAAA,EAAAA,KAAIV,6CAAgDA,WAAc,IAAMA,WAAcC,qGAAyGA,KACjOJ,GAAc,SAAOgB,EAAAA,EAAAA,KAAUd,WAAgBE,QAAWY,EAAAA,EAAAA,KAAUf,MACpED,GAAc,cAAaF,gCAAgCkB,EAAAA,EAAAA,KAAUf,kBAEvEI,EAAUJ,EACV,MACF,IAAK,YACCE,EAAO,GACTJ,EAAS,MAAKD,mDAAmDkB,EAAAA,EAAAA,KAAUf,qBAAyBe,EAAAA,EAAAA,KAAUd,mDAC9GF,EAAa,KAAGgB,EAAAA,EAAAA,KAAUd,YAAgBc,EAAAA,EAAAA,KAAUf,QAAaG,QAAY,IAAMD,mBAAsBA,SACzGH,GAAc,0CAAyCI,+BAAkCS,EAAAA,EAAAA,KAAIV,aAE7FJ,EAAS,MAAKD,mDAAmDkB,EAAAA,EAAAA,KAAUf,qBAAyBe,EAAAA,EAAAA,KAAUd,iDAC9GF,EAAa,KAAGgB,EAAAA,EAAAA,KAAUd,YAAgBc,EAAAA,EAAAA,KAAUf,QAAaG,QAAY,IAAMD,kBAAqBA,SACxGH,GAAc,0CAAyCI,8BAAiCS,EAAAA,EAAAA,KAAIV,YAE9FE,GAAUQ,EAAAA,EAAAA,KAAIV,KAKtBe,EAAAA,EAAAA,IAAW1C,KAAM8B,EAAGD,GACpBN,IAASoB,EAAAA,EAAAA,IAAyB3C,KAAM8B,IACI,IAAxC9B,KAAKW,eAAeiC,QAAQrB,KAC9BvB,KAAKW,eAAekC,KAAKtB,GACzBvB,KAAKY,iBAAiBiC,KAAKrB,GAC3BM,KAEFC,KAEFe,EAAAA,EAAAA,KAAwB9C,OAE1BA,KAAK+C,0BAA4B,CAAC,uBAAwB,EAAG,+M,gBC7RhD,SAAS5C,IAItBH,KAAKH,MAAQ,GACbG,KAAKgD,YAAa,EAclBhD,KAAKI,SAAW,GAChBJ,KAAKiD,mBAAqB,GAC1BjD,KAAKkD,aAAe,GACpBlD,KAAKW,eAAiB,GACtBX,KAAKY,iBAAmB,GACxBZ,KAAKmD,QAAU,GACfnD,KAAKoD,kBAAoB,GACzBpD,KAAKqD,eAAiB,GACtBrD,KAAKsD,sBAAwB,GAK7BtD,KAAKuD,QAAU,EACfvD,KAAKwD,YAAc,EAKnBxD,KAAKyD,mBAAoB,EACzBzD,KAAK0D,cAAgB,GACrB1D,KAAK2D,oBAAqB,EAC1B3D,KAAK4D,uBAAwB,EAC7B5D,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAK6D,kBAAmB,EACxB7D,KAAK8D,sBAAuB,EAC5B9D,KAAK+D,mBAAoB,EACzB/D,KAAKgE,uBAAwB,EAM7BhE,KAAKiE,QAAS,EACdjE,KAAKkE,gBAAkB,EAKvBlE,KAAKK,YAAc,GACnBL,KAAKmE,mBAAqB,EAC1BnE,KAAKoE,+BAAgC,EACrCpE,KAAKqE,qBAAsB,EAC3BrE,KAAKsE,oBAAqB,EAC1BtE,KAAKuE,MAAQ,GAEbvE,KAAKwE,YAAa,EAClBxE,KAAKyE,uBAAwB,EAE7BzE,KAAK+C,2BAA4B,EACjC/C,KAAK0E,uBAAwB,EAC7B1E,KAAK2E,6BAA8B,EAEnC3E,KAAK4E,4BAA6B,EAClC5E,KAAK6E,wBAAyB,EAC9B7E,KAAK8E,8BAA+B,EAEpC9E,KAAK+E,4BAA6B,EAClC/E,KAAKgF,wBAAyB,EAC9BhF,KAAKiF,8BAA+B,EAEpCjF,KAAKkF,4BAA6B,EAClClF,KAAKmF,wBAAyB,EAC9BnF,KAAKoF,8BAA+B,EAMpCpF,KAAKqF,cAAe,EASpBrF,KAAKsF,eAAiB,GAMtBtF,KAAKS,gBAAkB,SAAU8E,KAQjCvF,KAAKwF,oBAAsB,SAAU1D,KAAM2D,GAC/B,IAAN3D,IAAS9B,KAAKsF,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI7F,KAAKsF,eAAe1C,QAAQ8C,IAAmB,KAGjD1F,KAAKsF,eAAezC,KAAK6C,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/2e/2S11-2.js","webpack://mathalea/./src/js/exercices/3e/3P10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import EvolutionsEnPourcentage from '../3e/3P10.js'\nexport const titre = 'Calculer une évolution en pourcentages, une valeur finale ou une valeur initiale'\nexport { interactifReady, interactifType } from '../3e/3P10.js'\n// export { amcReady, amcType } from '../3e/3P10.js'\n\n/**\n * Clone de 3P10 pour les 2nde\n *\n * @author Sébastien LOZANO\n */\nexport default function EvolutionsEnPourcentage2nde () {\n  EvolutionsEnPourcentage.call(this)\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, abs, calcul, texNombrec, texNombre, stringNombre, texPrix } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Variations en pourcentage'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n* Problèmes de variations en pourcentage\n*\n* * Situations variées : prix soldé ou augmenté, effectif d'un collège ou lycée, facture, population d'une ville\n*\n* * Calculer le résultat d'une évolution\n* * Exprimer l'évolution en pourcentage\n* * Retrouver la situation initiale\n* * Mélange des 3 types de problèmes\n* @author Rémi Angot\n* 3P10\n*/\nexport default function EvolutionsEnPourcentage () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 4 // type de questions\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles = []\n    if (this.sup === 1) {\n      typesDeQuestionsDisponibles = ['finale']\n    }\n    if (this.sup === 2) {\n      typesDeQuestionsDisponibles = ['evolution']\n    }\n    if (this.sup === 3) {\n      typesDeQuestionsDisponibles = ['initiale']\n    }\n    if (this.sup === 4) {\n      typesDeQuestionsDisponibles = ['finale', 'evolution', 'initiale']\n    }\n    const situationsDisponibles = ['prix', 'etablissement', 'facture', 'population']\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const typesDeSituations = combinaisonListes(situationsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    let date, cetteAnnee, anneeDerniere, etablissement, facture, nb\n    for (let i = 0, texte, texteCorr, depart, arrive, taux, coeff, reponse, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (typesDeSituations[i]) {\n        case 'prix':\n          depart = choice([calcul(randint(11, 99) / 10), randint(11, 99), randint(11, 99) * 10])\n          taux = choice([10, 20, 30, 40, 60])\n          taux *= choice([-1, 1])\n          coeff = texNombrec(1 + taux / 100)\n          arrive = calcul(depart * (1 + taux / 100))\n          switch (listeTypeDeQuestions[i]) {\n            case 'finale':\n              if (taux > 0) {\n                texte = `Un article coûtait $${texPrix(depart)}$ € et son prix a augmenté de $${taux}~\\\\%$. Calculer son nouveau prix.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texPrix(depart)}\\\\times ${coeff} = ${texPrix(arrive)}$`\n                texteCorr += `<br>Le nouveau prix de cet article est ${texPrix(arrive)} €.`\n                reponse = arrive\n              } else {\n                texte = `Un article coûtait $${texPrix(depart)}$ € et son prix est soldé à $${taux}~\\\\%$. Calculer son nouveau prix.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texPrix(depart)}\\\\times ${coeff} = ${texPrix(arrive)}$`\n                texteCorr += `<br>Le nouveau prix de cet article est ${texPrix(arrive)} €.`\n                reponse = arrive\n              }\n              break\n            case 'initiale':\n              if (taux > 0) {\n                texte = `Après une augmentation de $${taux}~\\\\%$ un article coûte maintenant $${texPrix(arrive)}$ €. Calculer son prix avant l'augmentation.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\%=${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`\n                texteCorr += `<br>$${texPrix(arrive)}\\\\div ${coeff} = ${texPrix(depart)}$`\n                texteCorr += `<br>Avant l'augmentation cet article coûtait ${texPrix(depart)} €.`\n                reponse = depart\n              } else {\n                texte = `Soldé à $${taux}~\\\\%$ un article coûte maintenant $${texPrix(arrive)}$ €. Calculer son prix avant les soldes.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`\n                texteCorr += `<br>$${texPrix(arrive)}\\\\div ${coeff} = ${texPrix(depart)}$`\n                texteCorr += `<br>Avant les soldes cet article coûtait ${texPrix(depart)} €.`\n                reponse = depart\n              }\n              break\n            case 'evolution':\n              if (taux > 0) {\n                texte = `Un article qui coûtait $${texPrix(depart)}$ € coûte maintenant $${texPrix(arrive)}$ €. Exprimer l'augmentation du prix en pourcentage.`\n                texteCorr = `$${texPrix(arrive)}\\\\div ${texPrix(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%+${taux}~\\\\%$`\n                texteCorr += `<br>Le prix a été multiplié par ${coeff}, il a donc augmenté de $${taux}~\\\\%$.`\n                reponse = taux\n              } else {\n                texte = `Un article qui coûtait $${texPrix(depart)}$ € coûte maintenant $${texPrix(arrive)}$ €. Exprimer la réduction du prix en pourcentage.`\n                texteCorr = `$${texPrix(arrive)}\\\\div ${texPrix(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%${taux}~\\\\%$`\n                texteCorr += `<br>Le prix a été multiplié par ${coeff}, il a donc diminué de $${abs(taux)}~\\\\%$.`\n                reponse = abs(taux)\n              }\n              break\n          }\n          break\n        case 'etablissement':\n          // Le nombre d'élève doit être entier\n          // Multiple de 50 et multiple de 2%\n          // Multiple de 20 et multiple de 5%\n          // Multiple de 100 et n%\n          switch (randint(1, 3)) {\n            case 1:\n              depart = 50 * randint(7, 24)\n              taux = 2 * randint(1, 5)\n              break\n            case 2:\n              depart = 20 * randint(17, 60)\n              taux = 5 * randint(1, 3)\n              break\n            case 3:\n              depart = 100 * randint(4, 12)\n              taux = randint(1, 11)\n              break\n          }\n          arrive = calcul(depart * (1 + taux / 100))\n          coeff = texNombrec(1 + taux / 100)\n          date = new Date()\n          cetteAnnee = date.getFullYear()\n          anneeDerniere = cetteAnnee - 1\n          etablissement = choice(['collège', 'lycée'])\n          switch (listeTypeDeQuestions[i]) {\n            case 'finale':\n              if (taux > 0) {\n                texte = `Un ${etablissement} avait $${texNombre(depart)}$ élèves en ${anneeDerniere}. Depuis, le nombre d'élèves a augmenté de $${taux}~\\\\%$. Calculer le nombre d'élèves dans ce ${etablissement} cette année.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texNombre(depart)}\\\\times ${coeff} = ${texNombre(arrive)}$`\n                texteCorr += `<br>Il y a maintenant ${stringNombre(arrive)} élèves dans ce ${etablissement}.`\n                reponse = arrive\n              } else {\n                texte = `Un ${etablissement} avait $${texNombre(depart)}$ élèves en ${anneeDerniere}. Depuis, le nombre d'élèves a diminué de $${abs(taux)}~\\\\%$. Calculer le nombre d'élèves dans ce ${etablissement} cette année.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texNombre(depart)}\\\\times ${coeff} = ${texNombre(arrive)}$`\n                texteCorr += `<br>Il y a maintenant ${stringNombre(arrive)} élèves dans ce ${etablissement}.`\n                reponse = arrive\n              }\n              break\n            case 'initiale':\n              if (taux > 0) {\n                texte = `Depuis ${anneeDerniere} le nombre d'élèves d'un ${etablissement} a augmenté de $${taux}~\\\\%$. Il y a maintenant $${texNombre(arrive)}$ élèves. Calculer le nombre d'élèves en ${anneeDerniere} dans cet établissement.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le nombre initial d'élèves, on va donc diviser le nombre actuel d'élèves par ${coeff}.`\n                texteCorr += `<br>$${texNombre(arrive)}\\\\div ${coeff} = ${texNombre(depart)}$`\n                texteCorr += `<br>En ${anneeDerniere}, il y avait ${stringNombre(depart)} élèves dans ce ${etablissement}.`\n                reponse = depart\n              } else {\n                texte = `Depuis ${anneeDerniere} le nombre d'élèves d'un ${etablissement} a diminué de $${taux}~\\\\%$. Il y a maintenant $${texNombre(arrive)}$ élèves. Calculer le nombre d'élèves en ${anneeDerniere} dans cet établissement.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le nombre initial d'élèves, on va donc diviser le nombre actuel d'élèves par ${coeff}.`\n                texteCorr += `<br>$${texNombre(arrive)}\\\\div ${coeff} = ${texNombre(depart)}$`\n                texteCorr += `<br>En ${anneeDerniere}, il y avait ${stringNombre(depart)} élèves dans ce ${etablissement}.`\n                reponse = depart\n              }\n              break\n            case 'evolution':\n              texte = `En ${anneeDerniere}, il y avait $${texNombre(depart)}$ élèves dans un ${etablissement}. En ${cetteAnnee}, ils sont $${texNombre(arrive)}$. Exprimer la variation du nombre d'élèves de cet établissement en pourcentage.`\n              if (taux > 0) {\n                texteCorr = `$${texNombre(arrive)}\\\\div ${texNombre(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%+${taux}~\\\\%$`\n                texteCorr += `<br>Le nombre d'élèves a été multiplié par ${coeff}, il a donc augmenté de $${taux}~\\\\%$.`\n                reponse = taux\n              } else {\n                texte = `Un article qui coûtait $${texNombre(depart)}$ € coûte maintenant $${texNombre(arrive)}$ €. Exprimer la réduction du prix en pourcentage.`\n                texteCorr = `$${texNombre(arrive)}\\\\div ${texPrix(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%${taux}~\\\\%$`\n                texteCorr += `<br>Le nombre d'élèves a été multiplié par ${coeff}, il a donc diminué de $${abs(taux)}~\\\\%$.`\n                reponse = abs(taux)\n              }\n              break\n          }\n          break\n        case 'facture':\n          depart = randint(700, 1400)\n          taux = randint(1, 12)\n          taux *= choice([-1, 1])\n          coeff = texNombrec(1 + taux / 100)\n          arrive = calcul(depart * (1 + taux / 100))\n          facture = choice([\"ma facture annuelle d'électricité\", 'ma facture annuelle de gaz', \"ma taxe d'habitation\", 'mon ordinateur', 'mon vélo électrique'])\n          switch (listeTypeDeQuestions[i]) {\n            case 'finale':\n              if (taux > 0) {\n                texte = `Le prix de ${facture} était de $${texPrix(depart)}$ € l'année dernière et il a augmenté de $${taux}~\\\\%$. Calculer son nouveau prix.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texPrix(depart)}\\\\times ${coeff} = ${texPrix(arrive)}$`\n                texteCorr += `<br>Le prix de ${facture} est maintenant de ${texPrix(arrive)} €.`\n                reponse = arrive\n              } else {\n                texte = `Le prix de ${facture} était de $${texPrix(depart)}$ € l'année dernière et il a diminué de $${abs(taux)}~\\\\%$. Calculer son nouveau prix.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texPrix(depart)}\\\\times ${coeff} = ${texPrix(arrive)}$`\n                texteCorr += `<br>Le prix de ${facture} est maintenant de ${texPrix(arrive)} €.`\n                reponse = arrive\n              }\n              break\n            case 'initiale':\n              if (taux > 0) {\n                texte = `Après une augmentation de $${taux}~\\\\%$ le prix de ${facture} est maintenant $${texPrix(arrive)}$ €. Calculer son prix avant l'augmentation.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\%=${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`\n                texteCorr += `<br>$${texPrix(arrive)}\\\\div ${coeff} = ${texPrix(depart)}$`\n                texteCorr += `<br>Avant l'augmentation le prix de ${facture} était de ${texPrix(depart)} €.`\n                reponse = depart\n              } else {\n                texte = `Après une diminution de $${abs(taux)}~\\\\%$ ${facture} coûte maintenant $${texPrix(arrive)}$ €. Calculer son prix avant les soldes.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver le prix initial, on va donc diviser le prix final par ${coeff}.`\n                texteCorr += `<br>$${texPrix(arrive)}\\\\div ${coeff} = ${texPrix(depart)}$`\n                texteCorr += `<br>Avant la diminution le prix de ${facture} était de ${texPrix(depart)} €.`\n                reponse = depart\n              }\n              break\n            case 'evolution':\n              if (taux > 0) {\n                texte = `Le prix de ${facture} est passé de $${texPrix(depart)}$ € à $${texPrix(arrive)}$ €. Exprimer cette augmentation en pourcentage.`\n                texteCorr = `$${texPrix(arrive)}\\\\div ${texPrix(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%+${taux}~\\\\%$`\n                texteCorr += `<br>Le prix a été multiplié par ${coeff}, il a donc augmenté de $${taux}~\\\\%$.`\n                reponse = taux\n              } else {\n                texte = `Le prix de ${facture} est passé de $${texPrix(depart)}$ € à $${texPrix(arrive)}$ €. Exprimer cette diminution en pourcentage.`\n                texteCorr = `$${texPrix(arrive)}\\\\div ${texPrix(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%${taux}~\\\\%$`\n                texteCorr += `<br>Le prix a été multiplié par ${coeff}, il a donc diminué de $${abs(taux)}~\\\\%$.`\n                reponse = abs(taux)\n              }\n              break\n          }\n          break\n        case 'population':\n          depart = choice([randint(11, 99) * 1000, randint(11, 99) * 10000])\n          taux = randint(5, 35)\n          taux *= choice([-1, 1])\n          coeff = texNombrec(1 + taux / 100)\n          arrive = calcul(depart * (1 + taux / 100))\n          nb = randint(5, 15)\n          switch (listeTypeDeQuestions[i]) {\n            case 'finale':\n              if (taux > 0) {\n                texte = `Il y a ${nb} ans, la population d'une ville était de $${texNombre(depart)}$ habitants. Depuis, elle a augmenté de $${taux}~\\\\%$. Calculer le nombre d'habitants actuel de cette ville.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texNombre(depart)}\\\\times ${coeff} = ${texNombre(arrive)}$`\n                texteCorr += `<br>La population de cette ville est maintenant de $${texNombre(arrive)}$ habitants.`\n              } else {\n                texte = `Il y a ${nb} ans, la population d'une ville était de $${texNombre(depart)}$ habitants. Depuis, elle a diminué de $${abs(taux)}~\\\\%$. Calculer le nombre d'habitants actuel de cette ville.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.`\n                texteCorr += `<br>$${texNombre(depart)}\\\\times ${coeff} = ${texNombre(arrive)}$`\n                texteCorr += `<br>La population de cette ville est maintenant de $${texNombre(arrive)}$ habitants.`\n              }\n              reponse = arrive\n              break\n            case 'initiale':\n              if (taux > 0) {\n                texte = `En ${nb} ans, la population d'une ville a augmenté de $${taux}~\\\\%$ et est maintenant $${texNombre(arrive)}$ habitants. Calculer sa population d'il y a ${nb} ans.`\n                texteCorr = `Une augmentation de $${taux}~\\\\%$ revient à multiplier par $100~\\\\% + ${taux}~\\\\%=${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver la population initiale, on va donc diviser le nombre d'habitants actuel par ${coeff}.`\n                texteCorr += `<br>$${texNombre(arrive)}\\\\div ${coeff} = ${texNombre(depart)}$`\n                texteCorr += `<br>Il y a ${nb} ans cette ville comptait $${texNombre(depart)}$ habitants.`\n              } else {\n                texte = `En ${nb} ans, la population d'une ville a diminué de $${abs(taux)}~\\\\%$ et est maintenant $${texNombre(arrive)}$ habitants. Calculer sa population d'il y a ${nb} ans.`\n                texteCorr = `Une diminution de $${abs(taux)}~\\\\%$ revient à multiplier par $100~\\\\% ${taux}~\\\\% = ${100 + taux}~\\\\% = ${coeff}$.<br>Pour retrouver la population initiale, on va donc diviser le nombre d'habitants actuel par ${coeff}.`\n                texteCorr += `<br>$${texNombre(arrive)}\\\\div ${coeff} = ${texNombre(depart)}$`\n                texteCorr += `<br>Il y a ${nb} ans cette ville comptait $${texNombre(depart)}$ habitants.`\n              }\n              reponse = depart\n              break\n            case 'evolution':\n              if (taux > 0) {\n                texte = `En ${nb} ans, la population d'une ville est passé de $${texNombre(depart)}$ habitants à $${texNombre(arrive)}$. Exprimer cette augmentation en pourcentage.`\n                texteCorr = `$${texNombre(arrive)}\\\\div ${texNombre(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%+${taux}~\\\\%$`\n                texteCorr += `<br>La population a été multipliée par ${coeff} elle a donc augmenté de $${abs(taux)}~\\\\%$.`\n              } else {\n                texte = `En ${nb} ans, la population d'une ville est passé de $${texNombre(depart)}$ habitants à $${texNombre(arrive)}$. Exprimer cette diminution en pourcentage.`\n                texteCorr = `$${texNombre(arrive)}\\\\div ${texNombre(depart)} = ${coeff} =  ${100 + taux}~\\\\% = 100~\\\\%${taux}~\\\\%$`\n                texteCorr += `<br>La population a été multipliée par ${coeff} elle a donc diminué de $${abs(taux)}~\\\\%$.`\n              }\n              reponse = abs(taux)\n              break\n          }\n          break\n      }\n      setReponse(this, i, reponse)\n      texte += ajouteChampTexteMathLive(this, i)\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 4, '1 : Déterminer le résultat après une variation en pourcentage\\n2 : Exprimer une variation en pourcentage\\n3 : Calculer la valeur initiale en connaissant la variation et la situation finale\\n4 : Mélange']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","EvolutionsEnPourcentage2nde","EvolutionsEnPourcentage","this","interactifReady","interactifType","Exercice","consigne","nbQuestions","nbCols","nbColsCorr","sup","nouvelleVersion","parseInt","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","listeTypeDeQuestions","combinaisonListes","typesDeSituations","date","cetteAnnee","anneeDerniere","etablissement","facture","nb","texte","texteCorr","depart","arrive","taux","coeff","reponse","i","cpt","choice","calcul","randint","texNombrec","texPrix","abs","Date","getFullYear","texNombre","stringNombre","setReponse","ajouteChampTexteMathLive","indexOf","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}