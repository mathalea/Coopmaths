{"version":3,"file":"js/19066.c0fe6a917a7325ac7977.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/can/6e/can6G07.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, shuffle } from '../../../modules/outils.js'\nimport { droite, longueur, mathalea2d, papierPointe, point, symetrieAxiale, tracePoint } from '../../../modules/2d.js'\nimport { context } from '../../../modules/context.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../../modules/gestionInteractif.js'\nexport const titre = 'Compter les points symétriques manquant'\nexport const dateDePublication = '18/12/2021'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n\n/**\n * Symétrie axiale sur papier pointé\n * Ref can6G07\n * @author Jean-Claude Lhote\n * Publié le 18/12/2021\n */\nexport default function CompleterParSymetrieCan () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.nouvelleVersion = function () {\n    this.sup = randint(1, 2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    const couples = []\n    let pointsPossibles\n    const pointsChoisis = []\n    const pointsAffiches = []\n    const pointsEnPlusCorr = []\n    const typeDePapier = ['quad', 'quad', 'hexa', 'equi'] // l'élément 0 sera changé aléatoirement pour correspondre au type mélange (this.sup2 % 4)\n    for (let i = 0, cpt = 0, papier, image, d, j, trouve, texte, texteCorr, objetsEnonce, nbCouplesComplets, objetsCorrection; i < this.nbQuestions && cpt < 50;) {\n      typeDePapier[0] = typeDePapier[1 + i % 3]\n      // on remet à vide tous les tableaux utilisés pour la question suivante\n      objetsEnonce = []\n      objetsCorrection = []\n      pointsChoisis.length = 0\n      pointsAffiches.length = 0\n      pointsEnPlusCorr.length = 0\n      couples.length = 0\n\n      papier = papierPointe({ xmin: 0, ymin: 0, xmax: 6, ymax: 6, type: 'quad' })\n\n      objetsEnonce.push(papier)\n\n      switch (randint(1, 2)) {\n        case 1:\n          d = droite(point(3, 0), point(3, 6))\n          break\n        case 2:\n          d = droite(point(0, 3), point(6, 3))\n          break\n      }\n      d.epaisseur = 2\n      d.color = context.isHtml ? 'blue' : 'black'\n      objetsEnonce.push(d)\n      pointsPossibles = papier.listeCoords.slice()\n      // on prépare les points cliquables pour la version interactive\n      while (pointsPossibles.length > 1) { // si il n'en reste qu'un, on ne peut pas trouver de symétrique\n        image = symetrieAxiale(point(pointsPossibles[0][0], pointsPossibles[0][1]), d)\n        j = 1\n        trouve = false\n        while (j < pointsPossibles.length && !trouve) {\n          // si l'image est proche d'un point, c'est qu'on a deux symétriques donc un couple potentiel.\n          if (longueur(image, point(pointsPossibles[j][0], pointsPossibles[j][1])) < 0.5) {\n            trouve = true\n          } else j++\n        }\n        if (trouve) {\n          // on stocke le couple de symétrique en modifiant aléatoirement l'ordre.\n          couples.push(choice([true, false]) ? [pointsPossibles[0], pointsPossibles[j]] : [pointsPossibles[j], pointsPossibles[0]])\n          pointsPossibles.splice(j, 1) // on retire d'abord le points d'indice j\n          pointsPossibles.splice(0, 1) // puis le point d'indice 0\n        } else {\n          pointsPossibles.splice(0, 1) // Le point d'indice 0 n'a pas de symétrique, on le retire\n        }\n      }\n      // la liste des couples est prête, on va pouvoir choisir les points affichés et ceux qu'on n'affiche pas.\n      const nbCouplesChoisis = randint(4, 7)\n      const couplesChoisis = shuffle(couples).splice(0, nbCouplesChoisis)\n      for (let p = 0; p < couplesChoisis.length; p++) {\n        pointsChoisis.push(couplesChoisis[p][0], couplesChoisis[p][1])\n      }\n      nbCouplesComplets = randint(1, 3)\n      for (let p = 0; p < pointsChoisis.length; p += 2) {\n        if (p < nbCouplesComplets) { // On affiche un certains nombre de couples\n          pointsAffiches.push(point(pointsChoisis[p][0], pointsChoisis[p][1]))\n          pointsAffiches.push(point(pointsChoisis[p + 1][0], pointsChoisis[p + 1][1]))\n        } else { // et on affiche un seul des points pour les couples restants\n          pointsAffiches.push(point(pointsChoisis[p][0], pointsChoisis[p][1]))\n          pointsEnPlusCorr.push(point(pointsChoisis[p + 1][0], pointsChoisis[p + 1][1]))\n        }\n      }\n      for (let p = 0; p < pointsAffiches.length; p++) {\n        objetsEnonce.push(tracePoint(pointsAffiches[p]))\n      }\n      for (let p = 0; p < pointsEnPlusCorr.length; p++) {\n        objetsCorrection.push(tracePoint(pointsEnPlusCorr[p], 'red'))\n      }\n      texte = context.isAmc\n        ? 'Voici une grille contenant des points et un axe de symétrie.<br>Quel nombre minimum de points faut-il ajouter pour que chacun ait son symétrique ?<br>Écrire le nombre de points ajoutés dans le cadre. Coder ensuite ce nombre de points.<br>'\n        : 'Voici une grille contenant des points et un axe de symétrie.<br>Quel nombre minimum de points faut-il ajouter pour que chacun ait son symétrique ?<br>'\n      texteCorr = ''\n      // On prépare la figure...\n      texte += mathalea2d({ xmin: -0.5, ymin: -0.5, xmax: 6.5, ymax: 6.5, scale: 0.7 }, ...objetsEnonce)\n      if (this.interactif && context.isHtml) {\n        texte += ajouteChampTexteMathLive(this, i, 'largeur10 inline')\n      }\n      texteCorr += mathalea2d({ xmin: -0.5, ymin: -0.5, xmax: 6.5, ymax: 6.5, scale: 0.5 }, ...objetsEnonce, ...objetsCorrection)\n      setReponse(this, i, pointsEnPlusCorr.length)\n      if (this.questionJamaisPosee(i, nbCouplesChoisis, nbCouplesComplets, pointsChoisis[0][0], pointsChoisis[0][1])) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Type d\\'axes', 4, '1 : Axe vertical\\n2 : Axe horizontal\\n3 : Axe oblique\\n4 : Mélange']\n  // this.besoinFormulaire2Numerique = ['Type de papier pointé', 4, '1 : Carrés\\n2 : Hexagones\\n3 : Triangles équilatéraux\\n4 : Mélange']\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","dateDePublication","interactifReady","interactifType","amcReady","amcType","CompleterParSymetrieCan","sup","sup2","randint","couples","pointsPossibles","pointsChoisis","pointsAffiches","pointsEnPlusCorr","typeDePapier","papier","image","d","j","trouve","texte","texteCorr","objetsEnonce","nbCouplesComplets","objetsCorrection","cpt","length","papierPointe","xmin","ymin","xmax","ymax","type","droite","point","epaisseur","color","context","listeCoords","slice","symetrieAxiale","longueur","choice","splice","nbCouplesChoisis","couplesChoisis","shuffle","p","tracePoint","mathalea2d","scale","ajouteChampTexteMathLive","setReponse","listeQuestionsToContenu"],"sourceRoot":""}