{"version":3,"file":"js/86319.599130722332d4780409.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G42.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes, choisitLettresDifferentes } from '../../modules/outils.js'\nimport { mathalea2d, point, rotation, codeSegments, segment, polygoneAvecNom, codageAngleDroit, labelPoint, similitude } from '../../modules/2d.js'\nexport const titre = 'Nature de parallélogrammes'\n\n/**\n * Description didactique de l'exercice\n * @author\n * Référence 5G42\n*/\nexport default function demonstrationsParallelogrammes () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 7\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.tailleDiaporama = 50 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    const typesDeQuestionsDisponibles = ['type1', 'type2', 'type3', 'type4', 'type5', 'type6', 'type7'] // On créé 3 types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, objets, O, A, B, C, D, p, t1, t2, t3, t4, s1, s2, s3, s4, d1, d2, texte, texteCorr, noms, nom, prop1, prop2, type, def, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      noms = choisitLettresDifferentes(5, 'Q')\n      nom = `$${noms[0] + noms[1] + noms[2] + noms[3]}$`\n      objets = []\n      O = point(0, 0, noms[4], 'above left')\n      A = rotation(point(3, 0), O, randint(0, 90), noms[0])\n      B = similitude(A, O, 80 + randint(0, 20), 0.8 + randint(1, 40) / 100, noms[1])\n      C = similitude(A, O, 180, 0.9 + randint(1, 20) / 100, noms[2])\n      D = similitude(B, O, 180, 0.9 + randint(1, 20) / 100, noms[3])\n      p = polygoneAvecNom(A, B, C, D)\n      s1 = segment(A, B)\n      s2 = segment(B, C)\n      s3 = segment(C, D)\n      s4 = segment(D, A)\n      d1 = segment(A, C)\n      d2 = segment(B, D)\n      s1.color = 'blue'\n      s3.color = 'blue'\n      s2.color = 'red'\n      s4.color = 'red'\n      objets.push(s1, s2, s3, s4, p[1])\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'type1': // rectangle 1\n          def = `ses diagonales $[${noms[0] + noms[2]}]$ et $[${noms[1] + noms[3]}]$ ont la même longueur`\n          prop1 = 'a des diagonales de même longueur'\n          prop2 = `$${noms[0] + noms[2]}=${noms[1] + noms[3]}$`\n          type = 'rectangle'\n          t2 = codeSegments('||', 'red', B, O, O, D)\n          t1 = codeSegments('||', 'red', A, O, O, C)\n          objets.push(t1, t2, d1, d2)\n          break\n        case 'type2': // losange 1\n          def = `ses diagonales $[${noms[0] + noms[2]}]$ et $[${noms[1] + noms[3]}]$ sont perpendiculaires`\n          prop1 = 'a des diagonales perpendiculaires'\n          prop2 = `$[${noms[0] + noms[2]}]\\\\perp[${noms[1] + noms[3]}]$`\n          type = 'losange'\n          t1 = codeSegments('||', 'red', A, O, O, C)\n          t2 = codageAngleDroit(A, O, D)\n          t3 = codeSegments('|||', 'blue', B, O, O, D)\n          t4 = labelPoint(O)\n          objets.push(t1, t2, t3, t4, d1, d2)\n          break\n        case 'type3': // carré 1\n          prop2 = `$[${noms[0] + noms[2]}]\\\\perp[${noms[1] + noms[3]}]$ et $${noms[0] + noms[2]}=${noms[1] + noms[3]}$`\n          def = `ses diagonales $[${noms[0] + noms[2]}]$ et $[${noms[1] + noms[3]}]$ ont la même longueur et sont perpendiculaires`\n          prop1 = 'a des diagonales perpendiculaires et de même longueur'\n          t1 = codeSegments('||', 'red', A, O, O, C)\n          t2 = codageAngleDroit(A, O, D)\n          t3 = codeSegments('||', 'red', B, O, O, D)\n          t4 = labelPoint(O)\n          objets.push(t1, t2, t3, t4, d1, d2)\n          type = 'carré'\n          break\n        case 'type4': // losange 2\n          prop2 = `$${noms[0] + noms[1]}=${noms[1] + noms[2]}$`\n          def = `ses côtés $[${noms[0] + noms[1]}]$ et $[${noms[1] + noms[2]}]$ ont la même longueur`\n          prop1 = 'a deux côtés consécutifs de même longueur'\n          type = 'losange'\n          t3 = codeSegments('O', 'green', A, B, B, C)\n          objets.push(t3)\n          break\n        case 'type5': // rectangle 2\n          prop2 = `$[${noms[0] + noms[1]}]\\\\perp[${noms[1] + noms[2]}]$`\n          def = `ses côtés $[${noms[0] + noms[1]}]$ et $[${noms[1] + noms[2]}]$ sont perpendiculaires`\n          prop1 = 'a deux côtés consécutifs perpendiculaires'\n          t3 = codageAngleDroit(A, B, C)\n          objets.push(t3)\n          type = 'rectangle'\n          break\n        case 'type6': // carré 2\n          prop2 = `$[${noms[0] + noms[1]}]\\\\perp[${noms[1] + noms[2]}]$ et $${noms[0] + noms[1]}=${noms[1] + noms[2]}$`\n          def = `ses côtés $[${noms[0] + noms[1]}]$ et $[${noms[1] + noms[2]}]$ sont perpendiculaires et de même longueur`\n          prop1 = 'a deux côtés consécutifs perpendiculaires et de même longueur'\n          t2 = codeSegments('O', 'green', A, B, B, C)\n          t3 = codageAngleDroit(A, B, C)\n          objets.push(t2, t3)\n          type = 'carré'\n          break\n        case 'type7': // carré 3\n          prop2 = `$[${noms[0] + noms[1]}]\\\\perp[${noms[1] + noms[2]}]$ et $[${noms[0] + noms[2]}]\\\\perp[${noms[1] + noms[3]}]$`\n          def = `ses côtés $[${noms[0] + noms[1]}]$ et $[${noms[1] + noms[2]}]$ sont perpendiculaires et ses diagonales $[${noms[0] + noms[2]}]$ et $[${noms[1] + noms[3]}]$ aussi`\n          prop1 = 'a deux côtés consécutifs perpendiculaires et des diagonales perpendiculaires'\n          type = 'carré'\n          t1 = codageAngleDroit(A, O, B)\n          t2 = codageAngleDroit(A, B, C)\n          t4 = labelPoint(O)\n          objets.push(t1, t2, t4, d1, d2)\n          break\n      }\n      texte = `${nom} est un parallélogramme tel que ${def}.<br>`\n      texte += `Déterminer la nature de ${nom} en justifiant la réponse.`\n      texteCorr = 'Les segments de même couleur sont parallèles sur le schéma suivant :<br>'\n      texteCorr += mathalea2d({ xmin: -5, ymin: -4.5, xmax: 5, ymax: 4.5, pixelsParCm: 20, scale: 0.5, mainlevee: true, amplitude: 0.3 }, objets) + '<br>'\n      texteCorr += `On sait que ${prop2}.<br>`\n      texteCorr += `Si un parralélogramme ${prop1}, alors c'est un ${type}.<br>`\n      texteCorr += `${nom} est donc un ${type}.`\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',3];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","demonstrationsParallelogrammes","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","objets","O","A","B","C","D","p","t1","t2","t3","t4","s1","s2","s3","s4","d1","d2","texte","texteCorr","noms","nom","prop1","prop2","type","def","i","cpt","choisitLettresDifferentes","point","rotation","randint","similitude","polygoneAvecNom","segment","color","push","codeSegments","codageAngleDroit","labelPoint","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","amplitude","indexOf","listeQuestionsToContenu","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}