/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_5e__Constructibilite_des_triangles_js"],{

/***/ "./src/js/exercices/5e/_Constructibilite_des_triangles.js":
/*!****************************************************************!*\
  !*** ./src/js/exercices/5e/_Constructibilite_des_triangles.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Constructibilite_des_triangles)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\n\nconst titre = 'Constructibilité des triangles via les longueurs'\n\n/**\n * Constructibilité des triangles\n * Préciser ici les numéros des exos\n * 5G2 exercice parent il faudra supprimmer la version beta5G2 de la liste des choix du fichier mathalea_exercices.js\n * 5G21-1\n * 5G31-1\n * Dans ces exercices je me servais de this.beta pour faire passer l'exo de beta.html à mathalea.html\n * this.beta pouvait prendre la valeur 'beta' ou '', tous les autres this.beta sont devenus des this.debug\n * Mise à jour le 2021-01-25\n * @author Sébastien Lozano\n */\nfunction Constructibilite_des_triangles() {\n\t'use strict';\n\t_ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n\tthis.sup = 1;\n\tif (this.exo == this.beta + '5G21-1') { // via longueurs\n\t\tthis.titre = titre\n\t\tthis.consigne = `Justifier si les longueurs données permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\n\t} else if (this.exo == this.beta + '5G31-1') { //via angles\n\t\tthis.titre = `Constructibilité des triangles via les angles`;\n\t\tthis.consigne = `Justifier si les angles donnés permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\t} else {\n\t\tthis.titre = \"Constructibilité des triangles\";\n\t\tthis.consigne = `Justifier si les longueurs ou les angles donnés permettent de construire le triangle.`;\n\t\tthis.consigne += `<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.`;\n\n\t};\n\n\tthis.nb_cols = 1;\n\tthis.nb_cols_corr = 1;\n\tthis.nb_questions_modifiable = false;\n\n\tthis.liste_packages = `bclogo`;\n\n\tlet type_de_questions_disponibles;\n\n\tthis.nouvelle_version = function () {\n\n\t\tif (this.exo == this.beta + '5G21-1') { // via longueurs\n\t\t\tif (this.sup == 1) {\n\t\t\t\ttype_de_questions_disponibles = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.shuffle)([1, 2, 3]);\n\t\t\t\tthis.nb_questions = type_de_questions_disponibles.length;\n\t\t\t} else if (this.sup == 2) {\n\t\t\t\ttype_de_questions_disponibles = [(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([1, 2, 3]), 4];\n\t\t\t\tthis.nb_questions = type_de_questions_disponibles.length;\n\t\t\t};\n\t\t} else if (this.exo == this.beta + '5G31-1') { //via angles\n\t\t\tif (this.sup == 1) {\n\t\t\t\ttype_de_questions_disponibles = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.shuffle)([5, 6, 7]);\n\t\t\t\tthis.nb_questions = type_de_questions_disponibles.length;\n\t\t\t} else if (this.sup == 2) {\n\t\t\t\ttype_de_questions_disponibles = [(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.choice)([5, 6, 7]), 8];\n\t\t\t\tthis.nb_questions = type_de_questions_disponibles.length;\n\t\t\t};\n\t\t} else {\n\t\t\ttype_de_questions_disponibles = [1, 2, 3, 4, 5, 6, 7, 8];\n\t\t\tthis.nb_questions = type_de_questions_disponibles.length;\n\t\t};\n\n\t\t//let liste_type_de_questions = combinaison_listes(type_de_questions_disponibles,this.nb_questions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\t\tlet liste_type_de_questions = type_de_questions_disponibles; // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n\t\tthis.liste_questions = []; // Liste de questions\n\t\tthis.liste_corrections = []; // Liste de questions corrigées\n\n\t\tfor (let i = 0, texte, texte_corr, l1, l2, l3, a1, a2, a3, cpt = 0; i < this.nb_questions && cpt < 50;) {\n\n\t\t\t// on fixe longueur min et max en cm\n\t\t\tlet l_min = 2;\n\t\t\tlet l_max = 20;\n\t\t\t// on fixe angle min et max en degré\n\t\t\tlet a_min = 0;\n\t\t\tlet a_max = 180;\n\n\t\t\t// on crée un objet triangle\n\t\t\tlet triangle = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Triangles();\n\t\t\t// on crée un tableau pour le triangle courant\n\t\t\tlet current_triangle = [];\n\n\t\t\tswitch (liste_type_de_questions[i]) {\n\t\t\t\tcase 1: // 3 longueurs constructible\n\t\t\t\t\twhile (!triangle.isTrueTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('plusieurs tels triangles existent')}.`;\n\t\t\t\t\ttexte_corr += `<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // 3 longueurs plat\n\t\t\t\t\twhile (!triangle.isPlatTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(l1 + l2);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $ = ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${current_triangle[2].valeur}$ cm aussi.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom() + ' c\\'est un triangle plat')}.`;\n\t\t\t\t\ttexte_corr += `<br><br>${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Un seul triangle de ce type existe')}, il s'agit du segment ${current_triangle[2].cote} sur lequel on place le point `;\n\t\t\t\t\tif ((current_triangle[0].longueur.split('')[2] == current_triangle[2].cote.split('')[1]) || (current_triangle[0].longueur.split('')[2] == current_triangle[2].cote.split('')[2])) {\n\t\t\t\t\t\ttexte_corr += `${current_triangle[0].longueur.split('')[1]}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexte_corr += `${current_triangle[0].longueur.split('')[2]}`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte_corr += `.`;\n\t\t\t\t\t//`${current_triangle[0].longueur.split('')[2]}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3: // 3 longueurs non constructible\n\t\t\t\t\t// on initialise les longueurs sinon la méthode isTrueTriangleLongueurs() renvoie false!\n\t\t\t\t\tl1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\tl2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\tl3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\ttriangle.l3 = l3;\n\n\t\t\t\t\twhile (triangle.isTrueTriangleLongueurs() || triangle.isPlatTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} < ${current_triangle[2].longueur}, les longueurs données ne permettent donc pas de satisfaire à l'inégalité triangulaire.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Aucun triangle de ce type n\\'existe')}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4: // 2 longueurs et le périmètre\n\t\t\t\t\t// on utilise la méthode isTrueTriangleLongueurs(), le triangle ne sera pas plat.\n\t\t\t\t\twhile (!triangle.isTrueTriangleLongueurs()) {\n\t\t\t\t\t\tl1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\tl3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(l_min, l_max);\n\t\t\t\t\t\ttriangle.l1 = l1;\n\t\t\t\t\t\ttriangle.l2 = l2;\n\t\t\t\t\t\ttriangle.l3 = l3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `;\n\t\t\t\t\ttexte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et dont le périmètre vaut $${triangle.getPerimetre()}$ cm.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Puisque le périmètre vaut $${triangle.getPerimetre()}$ cm alors la troisième longueur vaut ${triangle.getLongueurs()[2]} = $${triangle.getPerimetre()}$ cm - $${triangle.l1}$ cm - $${triangle.l2}$ cm = $${triangle.l3}$ cm.`;\n\t\t\t\t\ttexte_corr += `<br> Donc dans le triangle ${triangle.getNom()}, ${current_triangle[2].cote} qui mesure $${current_triangle[2].valeur}$ cm est le plus grand côté.`;\n\t\t\t\t\ttexte_corr += `<br> De plus ${current_triangle[0].longueur} + ${current_triangle[1].longueur} = $${current_triangle[0].valeur}$ cm + $${current_triangle[1].valeur}$ cm = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur)}$ cm.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que ${current_triangle[0].longueur} + ${current_triangle[1].longueur} > ${current_triangle[2].longueur}`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\t// texte_corr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texte_en_couleur('deux tels triangles existent')}.`;\n\t\t\t\t\t// texte_corr += `<br> Les deux étant obtenus l'un à partir de l'autre par symétire axiale.`;\n\t\t\t\t\ttexte_corr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('plusieurs tels triangles existent')}.`;\n\t\t\t\t\ttexte_corr += `<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5: //3 angles constructible\n\t\t\t\t\twhile (!triangle.isTrueTriangleAngles()) {\n\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max, [0, 180]);\n\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max, [0, 180]);\n\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(180 - a1 - a2);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexte_corr = ``;\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexte_corr += `<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6: // 3 angles plat\n\t\t\t\t\twhile (!triangle.isPlatTriangleAngles()) {\n\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(180 - a1 - a2);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexte_corr = ``;\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br> Deux des trois angles du triangle valent $0\\\\degree$, ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)(triangle.getNom() + ' est donc un triangle plat')}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexte_corr += `<br> On les obtient en traçant des segments et en plaçant le troisième sommet sur ce segment, les longueurs n'ayant aucune importance.`;\n\t\t\t\t\ttexte_corr += `<br> Dans le cas présent, il s'agit d'un segment $[${current_triangle[2].angle.split('')[12]}${current_triangle[2].angle.split('')[14]}]$ sur lequel on place un point ${current_triangle[2].angle.split('')[13]}.`;\n\t\t\t\t\t//texte_corr += `<br> ${JSON.stringify(current_triangle)}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7: // 3 angles non constructible\n\t\t\t\t\t// on initialise les angles sinon la méthode isTrueTriangleAngles() renvoie false!\n\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\twhile (triangle.isTrueTriangleAngles()) {\n\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t};\n\t\t\t\t\ttexte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `;\n\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`;\n\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t};\n\t\t\t\t\t// on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n\t\t\t\t\tcurrent_triangle.sort(function (a, b) {\n\t\t\t\t\t\treturn a.valeur - b.valeur;\n\t\t\t\t\t});\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${current_triangle[0].valeur}\\\\degree + ${current_triangle[1].valeur}\\\\degree + ${current_triangle[2].valeur}\\\\degree = ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> Si le triangle était constructible, la somme des trois angles vaudrait $180\\\\degree$,`;\n\t\t\t\t\ttexte_corr += ` or ce n'est pas le cas.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Aucun triangle de ce type n\\'existe')}.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8: // 2 angles et le 3e fonction du 1er ou du 2eme\n\t\t\t\t\tlet angle_rg = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 1);\n\t\t\t\t\tlet operations_possibles = ['triple', 'quadruple', 'quart'];\n\t\t\t\t\tlet operation = '';\n\t\t\t\t\ttexte = ``;\n\t\t\t\t\ttexte_corr = ``;\n\t\t\t\t\ttexte_corr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`;\n\t\t\t\t\tswitch (angle_rg) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\t\toperation = operations_possibles[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 2)];\n\t\t\t\t\t\t\ttexte += `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle.a1)}\\\\degree$ ; `;\n\t\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\t\tcase 'triple':\n\t\t\t\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((180 - a1) / 4);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(3 * a2);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quadruple':\n\t\t\t\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((180 - a1) / 5);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(4 * a2);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quart':\n\t\t\t\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(4 * (180 - a1) / 5);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(a2 / 4);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t\t\ttexte += `${triangle.getAngles()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle.a2)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[1]}.`;\n\t\t\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[1].angle} = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[1].valeur)}\\\\degree$  d'où ${current_triangle[2].angle} = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\ta2 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(a_min, a_max);\n\t\t\t\t\t\t\ttriangle.a2 = a2;\n\t\t\t\t\t\t\toperation = operations_possibles[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, 2)];\n\t\t\t\t\t\t\ttexte += `${triangle.getNom()} tel que ${triangle.getAngles()[1]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle.a2)}\\\\degree$ ; `;\n\t\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\t\tcase 'triple':\n\t\t\t\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((180 - a2) / 4);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(3 * a1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quadruple':\n\t\t\t\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)((180 - a2) / 5);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(4 * a1);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'quart':\n\t\t\t\t\t\t\t\t\ta1 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(4 * (180 - a2) / 5);\n\t\t\t\t\t\t\t\t\ta3 = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.calcul)(a1 / 4);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttriangle.a1 = a1;\n\t\t\t\t\t\t\ttriangle.a3 = a3;\n\t\t\t\t\t\t\ttexte += `${triangle.getAngles()[0]} $= ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(triangle.a1)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[0]}.`;\n\t\t\t\t\t\t\t// on crée l'objet longueurs + valeurs des côtés du triangle\n\t\t\t\t\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\t\t\t\t\tcurrent_triangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] });\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\ttexte_corr += `<br>Dans le triangle ${triangle.getNom()}, ${current_triangle[2].angle} est le ${operation} de ${current_triangle[0].angle} = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[0].valeur)}\\\\degree$  d'où ${current_triangle[2].angle} = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t\ttexte_corr += `<br>Donc ${current_triangle[0].angle} + ${current_triangle[1].angle} + ${current_triangle[2].angle} = $${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[0].valeur)}\\\\degree + ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[1].valeur)}\\\\degree + ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombre)(current_triangle[2].valeur)}\\\\degree = ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.tex_nombrec)(current_triangle[0].valeur + current_triangle[1].valeur + current_triangle[2].valeur)}\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.`;\n\t\t\t\t\ttexte_corr += `<br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('On peut donc construire le triangle ' + triangle.getNom())}.`;\n\t\t\t\t\ttexte_corr += `<br><br>  ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur)('Il existe une infinité de triangles avec ces mesures.')}`;\n\t\t\t\t\ttexte_corr += `<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.liste_questions.indexOf(texte) == -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.liste_questions.push(texte);\n\t\t\t\tthis.liste_corrections.push(texte_corr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n\t};\n\tif (this.exo == this.beta + '5G21-1') {\n\t\tthis.besoin_formulaire_numerique = ['Niveau de difficulté', 2, \"1 : 3 longueurs\\n2 : 2 longueurs et le périmètre\"];\n\t} else if (this.exo == this.beta + '5G31-1') {\n\t\tthis.besoin_formulaire_numerique = ['Niveau de difficulté', 2, \"1 : 3 angles\\n2 : 2 angles et le 3e en fonction du 1er ou du 2eme\"];\n\t} else {\n\t\t//this.besoin_formulaire_numerique = ['Niveau de difficulté',2,\"1 : sans conversions de longueurs\\n2 : avec conversions de longueurs\"];\n\t};\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/5e/_Constructibilite_des_triangles.js?");

/***/ }),

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ })

}]);