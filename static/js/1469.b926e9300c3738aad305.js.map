{"version":3,"sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/2G51-1.js"],"names":["Exercice","this","titre","consigne","consigneCorrection","listeQuestions","listeCorrections","introduction","contenu","contenuCorrection","nbQuestions","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","nouvelleVersion","numeroExercice","listePackages","equationcartesienne","sup","parseInt","listeTypeQuestions","combinaisonListes","xA","yA","xu","yu","texte","texteCorr","i","cpt","randint","ecritureAlgebriqueSauf1","ecritureParentheseSiNegatif","ecritureAlgebrique","reduireAxPlusB","indexOf","push","listeQuestionsToContenu"],"mappings":"yGAMe,SAASA,IAEtBC,KAAKC,MAAQ,GACbD,KAAKE,SAAW,GAChBF,KAAKG,mBAAqB,GAC1BH,KAAKI,eAAiB,GACtBJ,KAAKK,iBAAmB,GACxBL,KAAKM,aAAe,GACpBN,KAAKO,QAAU,GACfP,KAAKQ,kBAAoB,GACzBR,KAAKS,YAAc,GACnBT,KAAKU,OAAS,EACdV,KAAKW,WAAa,EAClBX,KAAKY,QAAU,EACfZ,KAAKa,YAAc,EACnBb,KAAKc,QAAS,EAEdd,KAAKe,2BAA4B,EACjCf,KAAKgB,uBAAwB,EAC7BhB,KAAKiB,6BAA8B,EACnCjB,KAAKkB,oBAAqB,EAC1BlB,KAAKmB,uBAAwB,EAC7BnB,KAAKoB,kBAAmB,EACxBpB,KAAKqB,sBAAuB,EAC5BrB,KAAKsB,mBAAoB,EACzBtB,KAAKuB,uBAAwB,EAC7BvB,KAAKwB,+BAAgC,EACrCxB,KAAKyB,qBAAsB,EAC3BzB,KAAK0B,MAAQ,GACb1B,KAAK2B,YAAa,EAClB3B,KAAK4B,gBAAkB,GAMvB5B,KAAK6B,mBAAoB,EACzB7B,KAAK8B,YAAa,EAClB9B,KAAK+B,uBAAwB,EAC7B/B,KAAKgC,KAAM,EACXhC,KAAKiC,eAAgB,EACrBjC,KAAKkC,SAAU,EACflC,KAAKmC,eAAiB,GACtBnC,KAAKoC,sBAAwB,GAC7BpC,KAAKqC,cAAe,EACpBrC,KAAKsC,gBAAkB,SAAUC,KACjCvC,KAAKwC,cAAgB,G,+HClDhB,MAAMvC,EAAQ,+FAON,SAASwC,IACtB1C,eAAcC,MACdA,KAAKC,MAAQA,EACbD,KAAKE,SAAW,6DAChBF,KAAKS,YAAc,EACnBT,KAAKU,OAAS,EACdV,KAAKW,WAAa,EAClBX,KAAK0C,IAAM,EACX1C,KAAK4B,gBAAkB,IACvB5B,KAAK0B,MAAQ,GAEb1B,KAAKsC,gBAAkB,WACrBtC,KAAK0C,IAAMC,SAAS3C,KAAK0C,KACzB1C,KAAKI,eAAiB,GACtBJ,KAAKK,iBAAmB,GAExB,MACMuC,GAAqBC,SADM,CAAC,gBACqC7C,KAAKS,aAC5E,IAAK,IAAWqC,EAAIC,EAAIC,EAAIC,EAAIC,EAAOC,EAA9BC,EAAI,EAAqCC,EAAM,EAAGD,EAAIpD,KAAKS,aAAe4C,EAAM,IAAK,CAE5F,OAAQT,EAAmBQ,IACzB,IAAK,eACHN,GAAKQ,UAAS,EAAG,GACjBP,GAAKO,UAAS,EAAG,GACjBN,GAAKM,UAAS,EAAG,GACjBL,GAAKK,UAAS,EAAG,GACjBJ,EAAS,gDAA+CJ,KAAMC,oDAAqDC,QAASC,4CAC3G,IAAbjD,KAAK0C,MACPS,EAAY,2EACZA,GAAa,+CACbA,GAAa,uGACbA,GAAa,sDACbA,GAAc,8DAA6DH,QAASC,oBACpFE,GAAc,qCAAoCH,YAAaC,MAC/DE,GAAc,wDAAuDF,QAAQM,UAAyBP,gBACtGG,GAAc,8FAA6FL,KAAMC,iBACjHI,GAAc,eAAcF,cAAcO,SAA4BV,OAAOW,UAAoBT,eAAeQ,SAA4BT,YAC5II,GAAc,gBAAeF,EAAKH,MAAMW,UAAoBT,EAAKD,aACjEI,GAAc,oBAAmBL,EAAKG,EAAKF,EAAKC,MACrC,IAAPA,EAAYG,GAAc,gEAA8DO,SAAeT,EAAI,OAAMQ,UAAoBX,EAAKG,EAAKF,EAAKC,UAE3I,IAAPA,IAAYG,GAAc,gEAA8DO,SAAeT,EAAI,SAAQQ,UAAoBX,EAAKG,EAAKF,EAAKC,WAC9I,IAARA,EAAiB,IAALC,IAAUE,GAAc,gEAA8DO,SAAeT,EAAI,SAAQQ,UAAoBX,EAAKG,EAAKF,EAAKC,WACxJ,IAARA,EAAiB,IAALC,IAAUE,GAAc,kEAAgEM,UAAoBX,EAAKG,EAAKF,EAAKC,UAChI,IAAPA,EAAkB,IAAPA,GAAmB,IAARA,IAAaG,GAAc,gEAA8DO,SAAeT,GAAKD,QAAQS,UAAoBX,EAAKG,EAAKF,EAAKC,YAGrK,IAAbhD,KAAK0C,MACPS,EAAY,0EACZA,GAAa,+CACbA,GAAa,6BACbA,GAAa,kFACbA,GAAa,iFACbA,GAAa,8EACbA,GAAa,uGACbA,GAAc,6DAA2DK,SAA4BV,MAAOE,WAAWQ,SAA4BT,MAAOE,yBAC1JE,GAAc,8CAA4CK,SAA4BV,cAAeG,UAAUO,SAA4BT,gBAAgBS,SAA4BR,QACvLG,GAAc,0CAAyCF,QAAQM,UAAyBP,UAAUQ,SAA4BV,cAAeG,MAAMQ,SAAmBV,eAAeS,SAA4BR,QACjNG,GAAc,4EAA0EO,SAAeT,GAAKD,QAAQO,UAAyBT,EAAKG,EAAKF,EAAKC,WAItH,IAAxChD,KAAKI,eAAeuD,QAAQT,KAE9BlD,KAAKI,eAAewD,KAAKV,GACzBlD,KAAKK,iBAAiBuD,KAAKT,GAC3BC,KAEFC,KAEFQ,SAAwB7D,OAE1BA,KAAKe,0BAA4B,CAAC,uBAAwB,EAAG","file":"js/1469.b926e9300c3738aad305.js","sourcesContent":["/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, ecritureAlgebrique, ecritureParentheseSiNegatif, ecritureAlgebriqueSauf1, reduireAxPlusB } from '../../modules/outils.js'\nexport const titre = 'Déterminer une équation cartésienne de droite à partir d\\'un point et d\\'un vecteur directeur.'\n\n/**\n * Description didactique de l'exercice\n * @author Stéphane Guyon\n * Référence\n*/\nexport default function equationcartesienne () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Déterminer une équation cartésienne de la droite $\\\\bm(d)$'\n  this.nbQuestions = 2\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typeQuestionsDisponibles = ['cartesienne1']\n    const listeTypeQuestions = combinaisonListes(typeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, xA, yA, xu, yu, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'cartesienne1':\n          xA = randint(-5, 5)\n          yA = randint(-5, 5)\n          xu = randint(-5, 5)\n          yu = randint(-5, 5)\n          texte = `passant par le point $A$ de coordonnées : $A(${xA};${yA})$ et ayant le vecteur $\\\\vec u \\\\begin{pmatrix}${xu}\\\\\\\\${yu}\\\\end{pmatrix}$ comme vecteur directeur.`\n          if (this.sup === 1) {\n            texteCorr = 'On sait qu\\'une équation cartésienne de la droite $(AB)$ est de la forme '\n            texteCorr += ' $(d) : ax+by+c=0$, avec $(a;b)\\\\neq (0;0)$.'\n            texteCorr += '<br>On sait aussi que dans ces conditions, un vecteur directeur de cette droite a pour coordonnées :'\n            texteCorr += ' $\\\\vec {u} \\\\begin{pmatrix}-b\\\\\\\\a\\\\end{pmatrix}$.'\n            texteCorr += `<br>Avec les données de l'énoncé, $\\\\vec u \\\\begin{pmatrix}${xu}\\\\\\\\${yu}\\\\end{pmatrix}$.`\n            texteCorr += ` <br>On en déduit donc que :$-b = ${xu}$ et $a=${yu}$.`\n            texteCorr += ` <br>L'équation cartésienne est donc de la forme : $ ${yu} x ${ecritureAlgebriqueSauf1(-xu)} y + c=0$. `\n            texteCorr += `<br>On cherche maintenant la valeur correspondante de $c$. <br>On utilise pour cela que $A(${xA};${yA}) \\\\in(AB)$. `\n            texteCorr += ` <br>$\\\\iff ${yu} \\\\times ${ecritureParentheseSiNegatif(xA)} ${ecritureAlgebrique(-xu)} \\\\times ${ecritureParentheseSiNegatif(yA)}+ c=0$ `\n            texteCorr += ` <br>$\\\\iff  ${yu * xA} ${ecritureAlgebrique(-xu * yA)} + c=0$ `\n            texteCorr += ` <br>$\\\\iff  c= ${-xA * yu + yA * xu}$ `\n            if (xu === 0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yu, 0)} ${ecritureAlgebrique(-xA * yu + yA * xu)}=0$ ` } \n            else {\n              if (xu === 1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yu, 0)}-y ${ecritureAlgebrique(-xA * yu + yA * xu)}=0$ ` }\n              if (xu === -1 & yu!==0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yu, 0)}+y ${ecritureAlgebrique(-xA * yu + yA * xu)}=0$ ` }\n              if (xu === -1 & yu===0) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): y ${ecritureAlgebrique(-xA * yu + yA * xu)}=0$ ` }\n              if (xu !== 0 & xu !== 1 & xu !== -1) { texteCorr += ` <br>Une équation cartésienne est donc de la forme : $ (d): ${reduireAxPlusB(yu, -xu)}y ${ecritureAlgebrique(-xA * yu + yA * xu)}=0$ ` }\n            }\n          }\n          if (this.sup === 2) {\n            texteCorr = 'On sait qu\\'une équation cartésienne de la droite $(d)$ est de la forme '\n            texteCorr += ' $(d) : ax+by+c=0$, avec $(a;b)\\\\neq (0;0)$.'\n            texteCorr += '<br>Soit $M(x;y) \\\\in (d)$'\n            texteCorr += ' <br>$\\\\overrightarrow {AM}$ est donc un vecteur directeur de la droite $(d)$. '\n            texteCorr += ' <br>$\\\\overrightarrow {AM}$ et $\\\\vec u$ sont donc des vecteurs colinéaires. '\n            texteCorr += ' <br>On en déduit que $Det\\\\big(\\\\overrightarrow {AM};\\\\vec u\\\\big)=0$ <br>'\n            texteCorr += ' <br>$\\\\phantom{On en déduit que} \\\\iff \\\\begin{vmatrix}x-x_A&x_u\\\\\\\\y-y_A&y_u\\\\end{vmatrix}=0$ <br>'\n            texteCorr += `<br>$\\\\phantom{On en déduit que} \\\\iff \\\\begin{vmatrix}x-${ecritureParentheseSiNegatif(xA)}&${xu}\\\\\\\\y-${ecritureParentheseSiNegatif(yA)}&${yu}\\\\end{vmatrix}=0$<br>`\n            texteCorr += `<br>$\\\\phantom{On en déduit que} \\\\iff (x-${ecritureParentheseSiNegatif(xA)})\\\\times ${yu}-( y-${ecritureParentheseSiNegatif(yA)}) \\\\times ${ecritureParentheseSiNegatif(xu)}=0$`\n            texteCorr += `<br>$\\\\phantom{On en déduit que} \\\\iff ${yu} x ${ecritureAlgebriqueSauf1(-xu)} y -${ecritureParentheseSiNegatif(xA)} \\\\times ${yu} ${ecritureAlgebrique(yA)} \\\\times ${ecritureParentheseSiNegatif(xu)}=0$`\n            texteCorr += ` <br>Après réduction, une équation cartésienne est de la forme : $ (d): ${reduireAxPlusB(yu, -xu)}y ${ecritureAlgebriqueSauf1(-xA * yu + yA * xu)}=0$ `\n          }\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de correction :', 2, '1 : Correction avec le cours\\n2 : Correction avec la démonstration']\n}\n"],"sourceRoot":""}