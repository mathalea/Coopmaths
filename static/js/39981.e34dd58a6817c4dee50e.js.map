{"version":3,"file":"js/39981.e34dd58a6817c4dee50e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, texNombre, modalPdf, numAlpha, premiersEntreBornes, warnMessage, decompositionFacteursPremiersArray } from '../../modules/outils.js'\nexport const titre = 'Fractions irréductibles'\n\n/**\n * 3A12 - Fractions irreductibles\n * @author Sébastien Lozano\n */\nexport default function FractionsIrreductibles () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Rendre irréductible une fraction et son inverse à partir des décompositions en produit de facteurs premiers.'\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 4 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 4 : this.spacingCorr = 2\n  this.nbQuestions = 1\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.listePackages = 'bclogo'\n  this.sup = true\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A12.pdf', 'Aide mémoire sur les fonctions (Sébastien Lozano)', 'Aide mémoire')\n      // this.boutonAide += modalVideo('conteMathsNombresPremiers','https://coopmaths.fr/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    // let typesDeQuestionsDisponibles = [1,2,3,4];\n    const typesDeQuestionsDisponibles = [1]\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    this.introduction = warnMessage('À la question ' + numAlpha(3) + ' une observation judicieuse et argumentée pourra faire gagner du temps !', 'nombres', 'Coup de pouce')\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      let nb1 // nbre 1\n      let nb2 // nbre 2\n\n      // on fixe le tableau de choix\n      const candidatsPremiersCommuns = this.sup ? [2, 3, 5] : premiersEntreBornes(2, 13) // tableau des candidats premiers communs\n      // on fixe le nombre de divisuers premiers communs\n      const nbDivPremCommuns = this.sup ? 3 : 4 // nombre de diviseurs premiers communs\n      // on initialise le tableau des diviseurs premiers communs\n      const premiersCommuns = [] // tableau des diviseurs premiers communs\n      // on initialise le tableau des rangs\n      const r = [] // tableau pour le choix des rangs des diviseurs premiers communs\n      // on initialise le tableau des rangs déjà choisis\n      const rExclus = [] // tableau pour la boucle de creation de r\n      // on complète le tableau des rangs des rangs des diviseurs premiers choisis\n      for (let k = 0; k < nbDivPremCommuns; k++) {\n        for (let m = 0; m < k; m++) {\n          rExclus.push(r[m])\n        };\n        r[k] = randint(0, candidatsPremiersCommuns.length - 1, rExclus)\n      };\n      // on complète le tableau des diviseurs premiers communs\n      for (let k = 0; k < nbDivPremCommuns; k++) {\n        premiersCommuns.push(candidatsPremiersCommuns[r[k]])\n      };\n      // on initialise et on complète le tableau des multiplicités des diviseurs premiers communs\n      const multiplicitesPremiersCommuns = [] // tableau des multiplicités des diviseurs premiers communs\n      let zeroDejaDonne = false\n      for (let k = 0; k < nbDivPremCommuns; k++) {\n        const multipliciteHAsard = zeroDejaDonne ? randint(1, 2) : randint(0, 2)\n        if (multipliciteHAsard === 0) zeroDejaDonne = true\n        multiplicitesPremiersCommuns.push(multipliciteHAsard)\n      };\n      // on supprime les diviseurs premiers de multiplicité 0 et leur multiplicité\n      let idx = multiplicitesPremiersCommuns.indexOf(0)\n      while (idx !== -1) {\n        premiersCommuns.splice(idx, 1)\n        multiplicitesPremiersCommuns.splice(idx, 1)\n        idx = multiplicitesPremiersCommuns.indexOf(0)\n      };\n      // on initialise le tableau des diviseurs du premier et du second nombre avec les diviseurs premiers communs\n      const tabNb1 = [] // tableau pour les diviseurs de nb1\n      const tabNb2 = [] // tableau pour les diviseurs de nb2\n      for (let k = 0; k < premiersCommuns.length; k++) {\n        tabNb1[k] = premiersCommuns[k]\n        tabNb2[k] = premiersCommuns[k]\n      };\n      // on initialise les tableaux de multiplicité, ils sont les mêmes mais on pourrait vouloir qu'ils soient différents\n      const multiplicitesNb1 = []\n      const multiplicitesNb2 = []\n      for (let k = 0; k < premiersCommuns.length; k++) {\n        multiplicitesNb1[k] = multiplicitesPremiersCommuns[k]\n        multiplicitesNb2[k] = multiplicitesPremiersCommuns[k]\n      };\n      // on ajoute un facteur premier distinct pour chaque nombre plus petit que maBorne\n      const maBorne = this.sup ? 13 : 30\n      const rEx = randint(0, premiersEntreBornes(2, maBorne).length - 1) // pour exlcure le rang de nb1\n      const nb1Dist = premiersEntreBornes(2, maBorne)[rEx] // diviseur unique du premier nombre\n      const nb2Dist = premiersEntreBornes(2, maBorne)[randint(0, premiersEntreBornes(2, maBorne).length - 1, rEx)] // diviseur unique du deuxième nombre\n      // on ajoute nb1_dist, nb2_dist dans les tableaux des diviseurs premiers du premier et du second nombre\n      // nb1\n      let bool = false\n      let n = 0\n      while (n < tabNb1.length && bool !== true) {\n        if (nb1Dist === tabNb1[n]) { // si le diviseur premier est déjà présent on incrémente sa multiplicité\n          multiplicitesNb1[n]++\n          bool = true\n        };\n        n++\n      };\n      // on teste la valeur de sortie de bool et on ajoute la nouvelle valeur si necessaire\n      if (!bool) { // il n'est pas présent on l'ajoute avec la multipplicité 1\n        tabNb1.push(nb1Dist)\n        multiplicitesNb1.push(1)\n        bool = true\n      };\n      // nb2\n      bool = false\n      n = 0\n      while (n < tabNb2.length && !bool) {\n        if (nb2Dist === tabNb2[n]) { // si le diviseur premier est déjà présent on incrémente sa multiplicité\n          multiplicitesNb2[n]++\n          bool = true\n        };\n        n++\n      };\n      // on teste la valeur de sortie de bool et on ajoute la nouvelle valeur si necessaire\n      if (!bool) { // il n'est pas présent on l'ajoute avec la multipplicité 1\n        tabNb2.push(nb2Dist)\n        multiplicitesNb2.push(1)\n        bool = true\n      };\n      // on crée un tableau associatif à partir des deux tableaux tab_ni et multiplicites_ni\n      const tabPremMultNb1 = []\n      for (let k = 0; k < tabNb1.length; k++) {\n        tabPremMultNb1[k] = { prem: tabNb1[k], mult: multiplicitesNb1[k] }\n      };\n      const tabPremMultNb2 = []\n      for (let k = 0; k < tabNb2.length; k++) {\n        tabPremMultNb2[k] = { prem: tabNb2[k], mult: multiplicitesNb2[k] }\n      };\n      // on range selon prem croissant\n      tabPremMultNb1.sort(function (a, b) {\n        return a.prem > b.prem\n      })\n      tabPremMultNb2.sort(function (a, b) {\n        return a.prem > b.prem\n      })\n      // on initialise nb1 et nb2 et on les calcule à partir des tableaux\n      nb1 = 1\n      for (let k = 0; k < tabNb1.length; k++) {\n        nb1 = nb1 * tabPremMultNb1[k].prem ** tabPremMultNb1[k].mult\n      };\n      nb2 = 1\n      for (let k = 0; k < tabNb2.length; k++) {\n        nb2 = nb2 * tabPremMultNb2[k].prem ** tabPremMultNb2[k].mult\n      };\n\n      switch (typesDeQuestions) {\n        case 1: // décomposition de A\n          texte = numAlpha(0) + ` Décomposer $A = ${texNombre(nb1)}$ en produit de facteurs premiers.`\n          texteCorr = numAlpha(0) + ' La décomposition en produit de facteurs premier de $A = '\n          switch (tabPremMultNb1[0].mult) {\n            case 1:\n              texteCorr += `${tabPremMultNb1[0].prem}`\n              break\n            default:\n              texteCorr += `${tabPremMultNb1[0].prem}^{${tabPremMultNb1[0].mult}}`\n              break\n          };\n          for (let k = 1; k < tabNb1.length; k++) {\n            switch (tabPremMultNb1[k].mult) {\n              case 1:\n                texteCorr += `\\\\times${tabPremMultNb1[k].prem}`\n                break\n              default:\n                texteCorr += `\\\\times${tabPremMultNb1[k].prem}^{${tabPremMultNb1[k].mult}}`\n                break\n            };\n          };\n          texteCorr += '$.'\n          // break;\n          // case 2 : // décomposition de B\n          texte += '<br>' + numAlpha(1) + ` Décomposer $B = ${texNombre(nb2)}$ en produit de facteurs premiers.`\n          texteCorr += '<br>' + numAlpha(1) + ' La décomposition en produit de facteurs premier de $B = '\n          switch (tabPremMultNb2[0].mult) {\n            case 1:\n              texteCorr += `${tabPremMultNb2[0].prem}`\n              break\n            default:\n              texteCorr += `${tabPremMultNb2[0].prem}^{${tabPremMultNb2[0].mult}}`\n              break\n          };\n          for (let k = 1; k < tabNb2.length; k++) {\n            switch (tabPremMultNb2[k].mult) {\n              case 1:\n                texteCorr += `\\\\times${tabPremMultNb2[k].prem}`\n                break\n              default:\n                texteCorr += `\\\\times${tabPremMultNb2[k].prem}^{${tabPremMultNb2[k].mult}}`\n                break\n            };\n          };\n          texteCorr += '$.'\n          // break;\n          // case 3 : // reduction de A sur B\n          texte += '<br>' + numAlpha(2) + ` Rendre la fraction $\\\\dfrac{A}{B} = \\\\dfrac{${texNombre(nb1)}}{${texNombre(nb2)}}$ irréductible `\n          if (context.isHtml) {\n            texte += ' à l\\'aide des décompositions obtenues au ' + numAlpha(0) + 'et au ' + numAlpha(1) + '.'\n          } else {\n            texte += ' à l\\'aide des questions ' + numAlpha(0) + 'et ' + numAlpha(1) + '.'\n          };\n          texteCorr += '<br>' + numAlpha(2) + ` $\\\\dfrac{A}{B} = \\\\dfrac{${texNombre(nb1)}}{${texNombre(nb2)}} = `\n          texteCorr += '\\\\dfrac{'\n          texteCorr += '\\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[0] + '}'\n          for (let k = 1; k < decompositionFacteursPremiersArray(nb1 / nb1Dist).length; k++) {\n            texteCorr += '\\\\times \\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[k] + '}'\n          };\n          texteCorr += `\\\\times ${nb1Dist}}{`\n          texteCorr += '\\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[0] + '}'\n          for (let k = 1; k < decompositionFacteursPremiersArray(nb1 / nb1Dist).length; k++) {\n            texteCorr += '\\\\times \\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[k] + '}'\n          };\n          texteCorr += `\\\\times ${nb2Dist}} = `\n          texteCorr += `\\\\dfrac{${nb1Dist}}{${nb2Dist}}$`\n          // break;\n          // case 4 : // reduction de B sur A\n          texte += '<br>' + numAlpha(3) + ` Rendre la fraction $\\\\dfrac{B}{A} = \\\\dfrac{${texNombre(nb2)}}{${texNombre(nb1)}}$ irréductible`\n          if (context.isHtml) {\n            texte += ' à l\\'aide des décompositions obtenues au ' + numAlpha(0) + 'et au ' + numAlpha(1) + '.'\n          } else {\n            texte += ' à l\\'aide des questions ' + numAlpha(0) + 'et ' + numAlpha(1) + '.'\n          };\n          texteCorr += '<br>' + numAlpha(3) + ` $\\\\dfrac{B}{A}$ est l'inverse de $\\\\dfrac{A}{B}$ donc $\\\\dfrac{B}{A} = \\\\dfrac{${texNombre(nb2)}}{${texNombre(nb1)}} = `\n          texteCorr += '\\\\dfrac{'\n          texteCorr += '\\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[0] + '}'\n          for (let k = 1; k < decompositionFacteursPremiersArray(nb1 / nb1Dist).length; k++) {\n            texteCorr += '\\\\times \\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[k] + '}'\n          };\n          texteCorr += `\\\\times ${nb2Dist}}{`\n          texteCorr += '\\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[0] + '}'\n          for (let k = 1; k < decompositionFacteursPremiersArray(nb1 / nb1Dist).length; k++) {\n            texteCorr += '\\\\times \\\\cancel{' + decompositionFacteursPremiersArray(nb1 / nb1Dist)[k] + '}'\n          };\n          texteCorr += `\\\\times ${nb1Dist}} = `\n          texteCorr += `\\\\dfrac{${nb2Dist}}{${nb1Dist}}$.`\n          // break;\n          // case 5 : // calculer le produit A/B x B/A et réduire. Remarque?\n          // texte += `<br>`+numAlpha(4)+` Combien alculer le produit de $\\\\dfrac{A}{B} = \\\\dfrac{${texNombre(nb1)}}{${texNombre(nb2)}}$ et de $\\\\dfrac{B}{A} = \\\\dfrac{${texNombre(nb2)}}{${texNombre(nb1)}}$.`;\n          // texte += `<br>Donner le résultat sous forme de fraction irréductible.`\n          // texte += `<br>`+numAlpha(4)+` Remarque ?`\n          // texteCorr += `<br>`+numAlpha(4)+' corr type 5';\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      };\n      cpt++\n    };\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Décomposition « simple »']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","FractionsIrreductibles","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","sup","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","introduction","warnMessage","numAlpha","texte","texteCorr","i","cpt","nb1","nb2","candidatsPremiersCommuns","premiersEntreBornes","nbDivPremCommuns","premiersCommuns","r","rExclus","k","m","push","randint","length","multiplicitesPremiersCommuns","zeroDejaDonne","multipliciteHAsard","idx","indexOf","splice","tabNb1","tabNb2","multiplicitesNb1","multiplicitesNb2","maBorne","rEx","nb1Dist","nb2Dist","bool","n","tabPremMultNb1","prem","mult","tabPremMultNb2","sort","a","b","texNombre","decompositionFacteursPremiersArray","listeQuestionsToContenu","besoinFormulaireCaseACocher","consigneCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}