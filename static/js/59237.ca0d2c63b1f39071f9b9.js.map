{"version":3,"file":"js/59237.ca0d2c63b1f39071f9b9.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A11-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleurEtGras, itemize, modalPdf, modalVideo, cribleEratostheneN, warnMessage } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Primalité ou pas - Variante avec les critères de divisibilité par 7 et par 11'\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const amcReady = true\nexport const amcType = 'qcmMono'\n\n/**\n * 3A11-1 justifier la non primalité réinvestissement des critères de divisibilité\n * Nombres à 3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 11, sous forme d'un produit de deux nombres premiers inférieurs à 100\n * et un nombre premier inferieur à 529\n * variante de 3A11 avec les critères par 7 et 11 en plus\n * @author Sébastien Lozano\n */\nexport default function PremierOuPasCriterePar7Par11 () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Justifier que les nombres suivants sont premiers ou pas. Penser aux critères de divisibilité.'\n\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 7\n\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.listePackages = 'bclogo'\n  const prems = cribleEratostheneN(529) // constante contenant tous les nombres premiers jusqu'à 529...\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'https://coopmaths.fr/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n    if (this.interactif) {\n      this.consigne = 'Les nombres suivants sont-ils premiers ? Penser aux critères de divisibilité.'\n    }\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7]\n    typesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles) // on mélange l'ordre des questions\n\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    let stringRappelB = 'Ces critères de divisibilité pourront être utiles :'\n    if (context.isHtml) {\n      stringRappelB += '<br>'\n      stringRappelB += '- Un nombre est divisible par 7 si la somme de son nombre de dizaines et de cinq fois son chiffre des unités l’est.<br>'\n      stringRappelB += '- Un nombre est divisible par 11 si la différence entre la somme de ses chiffres de rangs pairs et la somme de ses chiffres de rangs impairs est nulle ou égale à un multiple de 11.'\n      stringRappelB += '<br> <br>'\n    } else {\n      stringRappelB += itemize([\n        'Un nombre est divisible par 7 si la somme de son nombre de dizaines et de cinq fois son chiffre des unités l’est.',\n        'Un nombre est divisible par 11 si la différence entre la somme de ses chiffres de rangs pairs et la somme de ses chiffres de rangs impairs est nulle ou égale à un multiple de 11.'\n      ])\n      stringRappelB += '\\\\par\\\\vspace{0.5cm}'\n    };\n    stringRappelB += 'Ainsi que cette liste des nombres premiers inférieurs à 100 : '\n    if (context.isHtml) {\n      stringRappelB += '<br>'\n    } else {\n      stringRappelB += '\\\\par\\\\vspace{0.25cm}'\n    };\n    stringRappelB += prems[0]\n    for (let k = 1; k < 25; k++) {\n      stringRappelB += ', ' + prems[k]\n    };\n    stringRappelB += '.'\n\n    this.introduction = warnMessage(stringRappelB, 'nombres', 'Coup de pouce')\n\n    for (let i = 0, texte, texteCorr, N, sum, bonneReponse, evenSum, oddSum, r, r1, r2, tabPremiersATester, prime1, prime2, NLongueur, N1Longueur, N1, sum1, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      switch (typesDeQuestions) {\n        case 1: // nombre pair\n          N = 2 * randint(51, 4999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme ${nombreAvecEspace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 2: // Multiple de 3\n          sum = 0 // pour la valeur de la somme;\n          N = 3 * randint(34, 3333) // on initialise avant la boucle car on a peut être de la chance\n          while ((N % 2 === 0) || (N % 5 === 0)) {\n            N = 3 * randint(34, 3333)\n          };\n          texte = nombreAvecEspace(N)\n          texteCorr = 'Comme ' + N.toString().charAt(0)\n          sum = Number(N.toString().charAt(0))\n          for (let k = 1; k < N.toString().length; k++) {\n            texteCorr += ' + ' + N.toString().charAt(k)\n            sum += Number(N.toString().charAt(k))\n          };\n          texteCorr += ` = ${sum} est un multiple de 3 donc ${nombreAvecEspace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 3: // Multiple de 5\n          N = 5 * randint(20, 1999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme le dernier chiffre de ${nombreAvecEspace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombreAvecEspace(N)} est divisible par 5, `\n          texteCorr += 'il admet donc au moins trois diviseurs qui sont 1, 5 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 4: // Multiple de 7\n          // NLongueur pour la taille du string N\n          // N1 pour la repetiton du critère\n          // N1Longueur  pour la taille du string N1\n          // sum1 pour la somme de la répétition du critère\n          N = 7 * randint(15, 1428)\n          texte = nombreAvecEspace(N)\n          NLongueur = N.toString().length\n          texteCorr = ` 7 divise ${nombreAvecEspace(N)}, en effet : `\n          texteCorr += '<br>'\n          N1 = N\n          N1Longueur = NLongueur\n          sum1 = Number(N1.toString().substring(0, N1Longueur - 1)) + 5 * Number(N1.toString().charAt(N1Longueur - 1))\n          while (sum1 >= 56) {\n            texteCorr += `${N1.toString().substring(0, N1Longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1Longueur - 1)}`\n            texteCorr += ` = ${Number(N1.toString().substring(0, N1Longueur - 1)) + 5 * Number(N1.toString().charAt(N1Longueur - 1))}`\n            texteCorr += '<br>'\n            N1 = sum1\n            N1Longueur = N1.toString().length\n            sum1 = Number(N1.toString().substring(0, N1Longueur - 1)) + 5 * Number(N1.toString().charAt(N1Longueur - 1))\n          };\n          texteCorr += `Comme ${N1.toString().substring(0, N1Longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1Longueur - 1)} = ${sum1} est un multiple de 7 alors 7 divise ${N} aussi `\n          texteCorr += 'qui admet donc au moins trois diviseurs : 1, 7 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 5: // multiple de 11\n          // evenSum  pour la somme des chiffres de rang impair\n          // oddSum pour la somme des chiffres de rang pair\n          N = 11 * randint(10, 909)\n          texte = nombreAvecEspace(N)\n          texteCorr = `D'une part, la somme des chiffres de rang impair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            evenSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let k = 3; k < N.toString().length; k++) {\n              if (k % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                evenSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + evenSum + '. <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            evenSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let m = 1; m < N.toString().length; m++) {\n              if (m % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                evenSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + evenSum + '. <br> '\n          };\n          texteCorr += `D'autre part, la somme des chiffres de rang pair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            oddSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let k = 1; k < N.toString().length; k++) {\n              if (k % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                oddSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + oddSum + '. <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            oddSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let m = 3; m < N.toString().length; m++) {\n              if (m % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                oddSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + oddSum + '. <br> '\n          };\n          texteCorr += 'La différence entre la somme des chiffres de rangs pairs et celle des chiffres de rangs impairs vaut '\n          if ((oddSum - evenSum) === 0) {\n            texteCorr += `${oddSum - evenSum} `\n          } else {\n            texteCorr += `${Math.abs(oddSum - evenSum)} `\n          };\n          texteCorr += 'qui est un multiple de 11, <br>'\n          texteCorr += ` cela signifie que ${nombreAvecEspace(N)} est divisible par 11, il admet donc au moins trois diviseurs qui sont 1, 11 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 6: // produit de deux nombres premiers inférieurs à 100\n          // rang du premier facteur premier\n          r1 = randint(0, 24)\n          // rang du second facteur premier\n          r2 = randint(0, 24)\n          prime1 = prems[r1] // on tire un nombre premier inférieur à 100, il n'y en a que 25!\n          prime2 = prems[r2] // on tire un autre nombre premier inférieur à 100, ça peut être le même qu'avant!\n          N = prime1 + '$\\\\times$' + prime2\n          texte = N\n          texteCorr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `\n          if (prime1 === prime2) {\n            texteCorr += `trois divisieurs qui sont 1, ${prime1} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          } else {\n            texteCorr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          };\n          texteCorr += texteEnCouleurEtGras(`${N} = ` + nombreAvecEspace(prime1 * prime2) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 7: // nombre premier inférieur à 529\n          // rang du nombre premier choisi\n          r = randint(0, prems.length - 1)\n          N = prems[r] // on choisit un nombre premier inférieur à 529\n          texte = N + ''\n          r = 0\n          tabPremiersATester = []\n          while (prems[r] ** 2 < N) {\n            tabPremiersATester.push(prems[r])\n            r++\n          }\n          texteCorr = `Testons la divisibilité de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est-à-dire par les nombres `\n          texteCorr += tabPremiersATester[0]\n          for (let k = 1; k < tabPremiersATester.length; k++) {\n            texteCorr += ', ' + tabPremiersATester[k]\n          };\n          texteCorr += '.'\n          texteCorr += `<br> Aucun de ces nombres premiers ne divise ${N}, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          bonneReponse = 'oui'\n          break\n      }\n      if (this.interactif || context.isAmc) {\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].options = { ordered: true }\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: 'est premier',\n            statut: bonneReponse !== 'non'\n          },\n          {\n            texte: 'n\\'est pas premier',\n            statut: bonneReponse !== 'oui'\n          }\n        ]\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","PremierOuPasCriterePar7Par11","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","listePackages","prems","cribleEratostheneN","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","interactif","listeQuestions","listeCorrections","autoCorrection","contenu","contenuCorrection","typesDeQuestionsDisponibles","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","stringRappelB","itemize","k","introduction","warnMessage","texte","texteCorr","N","sum","bonneReponse","evenSum","oddSum","r","r1","r2","tabPremiersATester","prime1","prime2","NLongueur","N1Longueur","N1","sum1","i","cpt","randint","nombreAvecEspace","texteEnCouleurEtGras","toString","charAt","Number","length","substring","m","Math","abs","push","options","ordered","enonce","propositions","statut","propositionsQcm","indexOf","listeQuestionsToContenu","consigneCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}