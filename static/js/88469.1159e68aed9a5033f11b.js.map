{"version":3,"file":"js/88469.1159e68aed9a5033f11b.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/1e/1AN14-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { signe, listeQuestionsToContenu, randint, combinaisonListes, ecritureAlgebrique, lettreMinusculeDepuisChiffre, rienSi1, reduireAxPlusB, texNombrec2 } from '../../modules/outils.js'\nimport { Polynome } from '../../modules/fonctionsMaths.js'\nimport { simplify, parse, derivative, abs } from 'mathjs'\nconst math = { simplify: simplify, parse: parse, derivative: derivative }\nexport const titre = 'Dérivée d\\'un produit'\n\n/**\n * Calculer la dérivée d'un produit\n * @author Jean-Léon Henry\n * Référence 1AN14-4\n */\n\n/**\n * @param {string} expression expression parsée\n * @returns expression en LaTeX avec multication implicite\n */\nfunction prettyTex (expression) {\n  return expression.toTex({ implicit: 'hide' }).replaceAll('\\\\cdot', '')\n}\n\nexport default function DeriveeProduit () {\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = \"Pour chacune des fonctions suivantes, dire sur quel ensemble elle est dérivable, puis déterminer l'expression de sa fonction dérivée.\"\n  this.nbQuestions = 10\n  // Sortie LaTeX\n  this.nbCols = 2 // Nombre de colonnes\n  this.nbColsCorr = 2 // Nombre de colonnes dans la correction\n  this.sup = 1\n  this.sup2 = false\n  // On modifie les règles de simplifications par défaut de math.js pour éviter 10x+10 = 10(x+1) et -4x=(-4x)\n  // const reglesDeSimplifications = math.simplify.rules.slice()\n  // reglesDeSimplifications.splice(reglesDeSimplifications.findIndex(rule => rule.l === 'n1*n2 + n2'), 1)\n  // reglesDeSimplifications.splice(reglesDeSimplifications.findIndex(rule => rule.l === 'n1*n3 + n2*n3'), 1)\n  // reglesDeSimplifications.push({ l: '-(n1*v)', r: '-n1*v' })\n  // reglesDeSimplifications.push('-(n1/n2) -> -n1/n2')\n\n  this.nouvelleVersion = function () {\n    this.sup = Number(this.sup)\n    this.sup2 = Boolean(this.sup2)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.liste_valeurs = [] // Les questions sont différentes du fait du nom de la fonction, donc on stocke les valeurs\n\n    // Types d'énoncés\n    const listeTypeDeQuestionsDisponibles = ['monome2/poly1', 'inv/poly1']\n    if (this.sup === 2) {\n      listeTypeDeQuestionsDisponibles.push('racine/poly', 'racine/poly2centre', 'monome2/racine')\n      if (this.sup2) {\n        listeTypeDeQuestionsDisponibles.push('exp/poly', 'exp/poly2centre')\n      }\n    }\n    const listeTypeDeQuestions = combinaisonListes(listeTypeDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, terme1, terme2, expression, askFacto, askFormule, askQuotient, ensembleDerivation, namef, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // On commence par générer des fonctions qui pourrait servir\n      const dictFonctions = {\n        exp: 'e^x',\n        racine: 'sqrt(x)',\n        inv: '1/x',\n        poly1: new Polynome({ rand: true, deg: 1 }),\n        poly2centre: new Polynome({ rand: true, coeffs: [[10, true], [0], [10, true]] }),\n        monome2: new Polynome({ rand: true, coeffs: [[0], [0], [10, true]] }),\n        poly: new Polynome({ rand: true, deg: randint(1, 2) })\n      }\n      const listeTypeFonctions = listeTypeDeQuestions[i].split('/')\n      // On précise les énoncés\n      askFacto = listeTypeFonctions.includes('exp')\n      askFormule = listeTypeFonctions.includes('poly1')\n      askQuotient = listeTypeFonctions.includes('inv')\n      // On randomise l'ordre des termes, sauf pour l'inverse et un monome devant une racine/une affine\n      let f1 = 0\n      let f2 = 1\n      if (!(['monome2/racine', 'monome2/poly1', 'inv/poly1'].includes(listeTypeDeQuestions[i]))) {\n        f1 = randint(0, 1)\n        f2 = 1 - f1\n      }\n      const typef1 = listeTypeFonctions[f1]\n      const typef2 = listeTypeFonctions[f2]\n      // On gère les parenthèses autour des fonctions spéciales\n      const noPar = type => ['racine', 'exp', 'monome2', 'inv'].includes(type)\n      const parenth = (expr, type) => (noPar(type) ? expr : `(${expr})`)\n      // On crée les expressions des fonctions : les polynômes dans dictFonctions ne sont pas des chaînes\n      const exprf1 = ['poly', 'mono'].includes(typef1.substring(0, 4)) ? dictFonctions[typef1].toMathExpr() : dictFonctions[typef1]\n      const exprf2 = ['poly', 'mono'].includes(typef2.substring(0, 4)) ? dictFonctions[typef2].toMathExpr() : dictFonctions[typef2]\n      terme1 = parenth(exprf1, typef1)\n      terme2 = parenth(exprf2, typef2)\n      // Expression finale de la fonction\n      expression = terme1 + '*' + terme2\n      // Ensemble de dérivation\n      ensembleDerivation = listeTypeFonctions.includes('racine') ? '\\\\mathbb{R}_+^*' : '\\\\mathbb{R}'\n      ensembleDerivation = listeTypeFonctions.includes('inv') ? '\\\\mathbb{R}^*' : ensembleDerivation\n\n      // Enoncé\n      namef = lettreMinusculeDepuisChiffre(i + 6)\n      texte = askFacto ? 'Dans cette question, on demande la réponse sous forme factorisée.<br>' : ''\n      texte = askFormule ? `Dans cette question, on demande d'utiliser la formule de dérivation d'un produit. ${askQuotient ? 'Mettre le résultat sous forme d\\'un quotient.' : ''}<br>` : texte\n      texte += `$${namef}:x\\\\longmapsto ${prettyTex(math.parse(expression))}$`\n      // Correction\n      texteCorr = `$${namef}$ est dérivable sur $${ensembleDerivation}$. Soit $x\\\\in${ensembleDerivation}$.<br>`\n      texteCorr += 'On rappelle le cours : si $u,v$ sont  deux fonctions dérivables sur un même intervalle $I$ alors leur produit est dérivable sur $I$ et on a la formule : '\n      texteCorr += '\\\\[(u\\\\times v)\\'=u\\'\\\\times v+u\\\\times v\\'.\\\\]'\n      texteCorr += `Ici $${namef}=u\\\\times v$ avec : `\n      texteCorr += `\\\\[\\\\begin{aligned}u&:x\\\\mapsto ${prettyTex(math.parse(exprf1))}\\\\\\\\ v&:x\\\\mapsto${prettyTex(math.parse(exprf2))}.\\\\end{aligned}\\\\]`\n      switch (listeTypeDeQuestions[i]) {\n        case 'inv/poly1': {\n          const b = dictFonctions[typef2].monomes[0] // coeffs du poly1\n          const a = dictFonctions[typef2].monomes[1] // coeffs du poly1\n          // Début correction\n          texteCorr += 'On utilise la formule rappelée plus haut et on a : '\n          texteCorr += `\\\\[${namef}'(x)=\\\\underbrace{-\\\\frac{1}{x^2}}_{u'(x)}\\\\times${prettyTex(math.parse(terme2))}+\\\\frac{1}{x}\\\\times\\\\underbrace{${a > 0 ? a : `(${a})`}}_{v'(x)}.\\\\]`\n          texteCorr += `Ce qui donne, en simplifiant : \\\\[${namef}'(x)=\\\\frac{${reduireAxPlusB(-a, -b)}}{x^2}+\\\\frac{${a}}{x}.\\\\]`\n          texteCorr += 'On additionne les deux fractions pour obtenir : '\n          texteCorr += `\\\\[${namef}'(x)=\\\\frac{${reduireAxPlusB(-a, -b)}}{x^2}+\\\\frac{${Polynome.print([0, a])}}{x^2}=\\\\frac{${reduireAxPlusB(-a, -b)}${ecritureAlgebrique(a)}x}{x^2}.\\\\]`\n          texteCorr += 'Des termes se simplifient au numérateur et on a : '\n          texteCorr += `\\\\[${namef}'(x)=\\\\frac{${reduireAxPlusB(0, -b)}}{x^2}.\\\\]`\n          // Remarque sur la méthode alternative\n          const fExpand = math.simplify(`${a}${ecritureAlgebrique(b)}/x`)\n          texteCorr += `<b>Remarque</b> : on pourrait bien entendu développer avant de dériver.<br>Dans ce cas, $${namef}(x)=${prettyTex(fExpand)}$.<br>`\n          texteCorr += `Et donc $${namef}'(x)=${prettyTex(math.simplify(math.derivative(fExpand, 'x')))}$. Ce qui est bien cohérent avec le résultat trouvé plus haut.`\n          break\n        }\n        case 'monome2/poly1': {\n          const b = dictFonctions[typef2].monomes[0] // coeffs du poly1\n          const a = dictFonctions[typef2].monomes[1] // coeffs du poly1\n          const mon2 = dictFonctions[typef1]\n          const m = mon2.monomes[2] // coeff du monome2\n          const polExpand = new Polynome({ coeffs: [0, 0, m * b, m * a] })\n          // Début correction\n          texteCorr += `On utilise la formule rappelée plus haut et on a  \\\\[${namef}'(x)=\\\\underbrace{${mon2.derivee().toMathExpr()}}_{u'(x)}\\\\times(${exprf2})${mon2.toMathExpr(true)}\\\\times\\\\underbrace{${a > 0 ? a : `(${a})`}}_{v'(x)}.\\\\]`\n          texteCorr += `On développe pour obtenir : \\\\[${namef}'(x)=${2 * m * a}x^2${ecritureAlgebrique(2 * m * b)}x${ecritureAlgebrique(m * a)}x^2.\\\\]`\n          texteCorr += `Puis, en regroupant les termes de même degré : \\\\[${namef}'(x)=${polExpand.derivee().toMathExpr()}.\\\\]`\n          // Remarque sur la méthode alternative\n          texteCorr += `<b>Remarque</b> : on pourrait bien entendu développer avant de dériver.<br>Dans ce cas, $${namef}(x)=${polExpand.toMathExpr()}$.<br>`\n          texteCorr += `Et donc $${namef}'(x)=${polExpand.derivee().toMathExpr()}$. Ce qui est bien cohérent avec le résultat trouvé plus haut.`\n          console.log(polExpand)\n          break\n        }\n        case 'monome2/racine': {\n          const mon2 = dictFonctions[typef1]\n          const m = mon2.monomes[2] // coeff du monome2\n          texteCorr += 'On applique la  formule rappellée plus haut : '\n          texteCorr += `\\\\[${namef}'(x)=\\\\underbrace{${mon2.derivee().toMathExpr()}}_{u'(x)}\\\\times\\\\sqrt{x}${mon2.toMathExpr(true)}\\\\times\\\\underbrace{\\\\frac{1}{2\\\\sqrt{x}}}_{v'(x)}.\\\\]`\n          texteCorr += 'On peut réduire un peu l\\'expression : '\n          texteCorr += `\\\\[${namef}'(x)=${rienSi1(2 * m)}x\\\\sqrt{x}${signe(m)}` // attention l'équation finit ligne suivante\n          if (m % 2 !== 0) texteCorr += `\\\\frac{${rienSi1(abs(m))}x^2}{2\\\\sqrt{x}}.\\\\]`\n          else texteCorr += `\\\\frac{${texNombrec2(abs(m / 2))}x^2}{\\\\sqrt{x}}.\\\\]`\n          break\n        }\n        case 'racine/poly2centre': // traité ci-après\n        case 'racine/poly': {\n          const racineGauche = typef1 === 'racine'\n          const poly = listeTypeDeQuestions[i] === 'racine/poly2centre' ? dictFonctions.poly2centre : dictFonctions.poly\n          const derivee = poly.derivee()\n          // 1ère étape : application de la formule\n          let intermediaire\n          if (racineGauche) intermediaire = `\\\\underbrace{\\\\frac{1}{2\\\\sqrt{x}}}_{u'(x)}\\\\times(${poly.toMathExpr()})+\\\\sqrt{x}\\\\times\\\\underbrace{(${derivee.toMathExpr()})}_{v'(x)}`\n          else intermediaire = `\\\\underbrace{(${derivee.toMathExpr()})}_{u'(x)}\\\\times\\\\sqrt{x}+(${poly.toMathExpr()})\\\\times\\\\underbrace{\\\\frac{1}{2\\\\sqrt{x}}}_{v'(x)}`\n          texteCorr += `On utilise la formule rappelée plus haut et on a \\\\[${namef}'(x)=${intermediaire}.\\\\]`\n          // 2ème étape : simplification\n          let interm2\n          if (racineGauche) interm2 = `\\\\frac{${poly.toMathExpr()}}{2\\\\sqrt{x}}${derivee.toMathExpr(true)}\\\\sqrt{x}`\n          else interm2 = `${!derivee.isMon() ? `(${derivee.toMathExpr()})` : derivee.toMathExpr()}\\\\sqrt{x}+\\\\frac{${poly.toMathExpr()}}{2\\\\sqrt{x}}`\n          texteCorr += 'L\\'énoncé ne demandant rien de plus, on se contente de simplifier l\\'expression :'\n          texteCorr += `\\\\[${namef}'(x)=${interm2}\\\\]`\n          console.log(poly)\n        }\n        case 'exp/poly': // traité ci-après\n        case 'exp/poly2centre': {\n          const expGauche = typef1 === 'exp'\n          const poly = listeTypeDeQuestions[i] === 'exp/poly2centre' ? dictFonctions.poly2centre : dictFonctions.poly\n          const derivee = poly.derivee()\n          // 1ère étape : application de la formule\n          let intermediaire\n          if (expGauche) intermediaire = `\\\\underbrace{e^x}_{u'(x)}\\\\times(${poly.toMathExpr()})+e^x\\\\times\\\\underbrace{(${derivee.toMathExpr()})}_{v'(x)}`\n          else intermediaire = `\\\\underbrace{(${derivee.toMathExpr()})}_{u'(x)}\\\\times e^x+(${poly.toMathExpr()})\\\\times\\\\underbrace{e^x}_{v'(x)}`\n          texteCorr += `On utilise la formule rappelée plus haut et on a \\\\[${namef}'(x)=${intermediaire}.\\\\]`\n          // 2ème étape : Factorisation\n          const interm2 = `(${poly.toMathExpr()}${derivee.toMathExpr(true)})`\n          const termeGauche = expGauche ? 'e^x' : interm2\n          const termeDroite = expGauche ? interm2 : 'e^x'\n          texteCorr += 'Comme demandé, on factorise l\\'expression par $e^x$ : '\n          texteCorr += `\\\\[${namef}'(x)=${termeGauche}${termeDroite}\\\\]`\n          // 3e étape : Simplification si nécessaire\n          const interm2Simp = `(${poly.add(derivee).toMathExpr()})`\n          const termeGauche2 = expGauche ? 'e^x' : interm2Simp\n          const termeDroite2 = expGauche ? interm2Simp : 'e^x'\n          if (`${termeGauche2}${termeDroite2}` !== `${termeGauche}${termeDroite}`) {\n            texteCorr += 'On peut réduire ou réordonner l\\'expression entre parenthèses : '\n            texteCorr += `\\\\[${namef}'(x)=${termeGauche2}${termeDroite2}\\\\]`\n          }\n          break\n        }\n\n        default:\n          texteCorr += 'Correction non encore implémentée.'\n          break\n      }\n      texte = texte.replaceAll('\\\\frac', '\\\\dfrac')\n      texteCorr = texteCorr.replaceAll('\\\\frac', '\\\\dfrac')\n\n      if (this.liste_valeurs.indexOf(expression) === -1) {\n        this.liste_valeurs.push(expression)\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Affine*inverse, affine*ax^2\\n2 : Niveau 1 et polynômes, racine']\n  this.besoinFormulaire2CaseACocher = ['Inclure l\\'exponentielle dans le niveau 2']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["math","simplify","parse","derivative","titre","prettyTex","expression","toTex","implicit","replaceAll","DeriveeProduit","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","Number","Boolean","listeQuestions","listeCorrections","liste_valeurs","listeTypeDeQuestionsDisponibles","push","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","terme1","terme2","askFacto","askFormule","askQuotient","ensembleDerivation","namef","i","cpt","dictFonctions","exp","racine","inv","poly1","Polynome","rand","deg","poly2centre","coeffs","monome2","poly","randint","listeTypeFonctions","split","includes","f1","f2","typef1","typef2","noPar","type","parenth","expr","exprf1","substring","toMathExpr","exprf2","lettreMinusculeDepuisChiffre","b","monomes","a","reduireAxPlusB","ecritureAlgebrique","fExpand","mon2","m","polExpand","derivee","console","log","rienSi1","signe","abs","texNombrec2","racineGauche","intermediaire","interm2","isMon","expGauche","termeGauche","termeDroite","interm2Simp","add","termeGauche2","termeDroite2","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}