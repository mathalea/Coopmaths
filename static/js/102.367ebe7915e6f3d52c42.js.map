{"version":3,"file":"js/102.367ebe7915e6f3d52c42.js","mappings":"4KAGO,MAAMA,EAAQ,mDAaN,SAASC,IAwBtB,IAAIC,EAtBJC,EAAAA,QAAAA,KAAcC,MACdA,KAAKC,IAAM,EACXD,KAAKE,YAAc,EACfF,KAAKG,MAAQH,KAAKI,KAAO,UAC3BJ,KAAKJ,MAAQA,EACbI,KAAKK,SAAW,2EAChBL,KAAKK,UAAY,yFACRL,KAAKG,MAAQH,KAAKI,KAAO,UAClCJ,KAAKJ,MAAQ,gDACbI,KAAKK,SAAW,uEAChBL,KAAKK,UAAY,0FAEjBL,KAAKJ,MAAQ,iCACbI,KAAKK,SAAW,wFAChBL,KAAKK,UAAY,yFAGnBL,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAElBP,KAAKQ,cAAgB,SAIrBR,KAAKS,gBAAkB,WAErB,GADAT,KAAKC,IAAMS,SAASV,KAAKC,KACrBD,KAAKG,MAAQH,KAAKI,KAAO,UAC3B,GAAiB,IAAbJ,KAAKC,IACPH,EAA8B,CAAC,EAAG,EAAG,QAChC,GAAiB,IAAbE,KAAKC,IAAW,CACzB,MAAMU,GAAIC,EAAAA,EAAAA,KAAQ,EAAG,GACOd,EAAH,IAArBE,KAAKE,YAAiD,CAAC,GAC7B,IAArBF,KAAKE,YAAiD,CAAC,EAAGS,GACrC,IAArBX,KAAKE,YAAiD,CAAC,EAAGS,EAAGA,EAAI,EAAI,GAC3C,CAAC,EAAG,EAAG,EAAG,SAE1C,GAAIX,KAAKG,MAAQH,KAAKI,KAAO,UAClC,GAAiB,IAAbJ,KAAKC,IACPH,EAA8B,CAAC,EAAG,EAAG,QAChC,GAAiB,IAAbE,KAAKC,IAAW,CACzB,MAAMU,GAAIC,EAAAA,EAAAA,KAAQ,EAAG,GACOd,EAAH,IAArBE,KAAKE,YAAiD,CAAC,GAC7B,IAArBF,KAAKE,YAAiD,CAAC,EAAGS,GACrC,IAArBX,KAAKE,YAAiD,CAAC,EAAGS,GAAIA,EAAI,GAAK,EAAI,GACjD,CAAC,EAAG,EAAG,EAAG,SAG/Cb,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGtD,MAAMe,GAAuBC,EAAAA,EAAAA,KAAkBhB,EAA6BE,KAAKE,aAEjFF,KAAKe,eAAiB,GACtBf,KAAKgB,iBAAmB,GACxBhB,KAAKiB,eAAiB,GACtB,IAAK,IAAWC,EAAOC,EAAWC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAA7CC,EAAI,EAA6CC,EAAM,EAAGD,EAAI1B,KAAKE,aAAeyB,EAAM,IAAK,CAEpG,MAAMC,EAAO,EACPC,EAAO,GAEPC,EAAO,EACPC,EAAO,IAGPC,EAAW,IAAIC,EAAAA,IAEfC,EAAkB,GAExB,OAAQrB,EAAqBa,IAC3B,KAAK,EACH,MAAQM,EAASG,2BACff,GAAKR,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBR,GAAKT,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBP,GAAKV,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBG,EAASZ,GAAKA,EACdY,EAASX,GAAKA,EACdW,EAASV,GAAKA,EAEhBJ,EAAS,GAAEc,EAASI,oBAAoBJ,EAASK,eAAe,SAASL,EAASZ,YAClFF,GAAU,GAAEc,EAASK,eAAe,SAASL,EAASX,aAAaW,EAASK,eAAe,SAASL,EAASV,UAE7G,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEC,SAAUP,EAASK,eAAeX,GAAIc,KAAMR,EAASS,WAAWf,GAAIgB,OAAQV,EAASW,sBAAsBjB,KAGpIQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGM,oBAAoBN,EAAgB,GAAGQ,qCACrHvB,GAAc,gBAAee,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,eAAeL,EAAgB,GAAGQ,iBAAiBR,EAAgB,GAAGQ,kBAAiBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,eAC9NvB,GAAc,wBAAuBe,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,YAC1HpB,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,aACtFjB,GAAc,iJAA+I4B,EAAAA,EAAAA,KAAe,wCAC5K5B,GAAa,oGACb,MACF,KAAK,EACH,MAAQa,EAASgB,2BACf5B,GAAKR,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBR,GAAKT,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBP,GAAKwB,EAAAA,EAAAA,KAAO1B,EAAKC,GACjBW,EAASZ,GAAKA,EACdY,EAASX,GAAKA,EACdW,EAASV,GAAKA,EAEhBJ,EAAS,GAAEc,EAASI,oBAAoBJ,EAASK,eAAe,UAAUL,EAASZ,YACnFF,GAAU,GAAEc,EAASK,eAAe,SAASL,EAASX,aAAaW,EAASK,eAAe,SAASL,EAASV,UAE7G,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEC,SAAUP,EAASK,eAAeX,GAAIc,KAAMR,EAASS,WAAWf,GAAIgB,OAAQV,EAASW,sBAAsBjB,KAGpIQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGM,oBAAoBN,EAAgB,GAAGQ,qCACrHvB,GAAc,gBAAee,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,eAAeL,EAAgB,GAAGQ,iBAAiBR,EAAgB,GAAGQ,iBAAiBR,EAAgB,GAAGQ,oBAC3LvB,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,SAAW,8BACjGjB,GAAc,YAAU4B,EAAAA,EAAAA,KAAe,+DAA+Db,EAAgB,GAAGM,qCACpHN,EAAgB,GAAGK,SAASU,MAAM,IAAI,KAAOf,EAAgB,GAAGM,KAAKS,MAAM,IAAI,IAAQf,EAAgB,GAAGK,SAASU,MAAM,IAAI,KAAOf,EAAgB,GAAGM,KAAKS,MAAM,IAAI,GACzK9B,GAAc,GAAEe,EAAgB,GAAGK,SAASU,MAAM,IAAI,KAEtD9B,GAAc,GAAEe,EAAgB,GAAGK,SAASU,MAAM,IAAI,KAExD9B,GAAa,IAEb,MACF,KAAK,EASH,IAPAC,GAAKR,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBR,GAAKT,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBP,GAAKV,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBG,EAASZ,GAAKA,EACdY,EAASX,GAAKA,EACdW,EAASV,GAAKA,EAEPU,EAASG,2BAA6BH,EAASgB,2BACpD5B,GAAKR,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBR,GAAKT,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBP,GAAKV,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBG,EAASZ,GAAKA,EACdY,EAASX,GAAKA,EACdW,EAASV,GAAKA,EAEhBJ,EAAS,GAAEc,EAASI,oBAAoBJ,EAASK,eAAe,SAASL,EAASZ,YAClFF,GAAU,GAAEc,EAASK,eAAe,SAASL,EAASX,aAAaW,EAASK,eAAe,SAASL,EAASV,UAE7G,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEC,SAAUP,EAASK,eAAeX,GAAIc,KAAMR,EAASS,WAAWf,GAAIgB,OAAQV,EAASW,sBAAsBjB,KAGpIQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGM,oBAAoBN,EAAgB,GAAGQ,qCACrHvB,GAAc,gBAAee,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,eAAeL,EAAgB,GAAGQ,iBAAiBR,EAAgB,GAAGQ,kBAAiBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,eAC9NvB,GAAc,wBAAuBe,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,mGAC1HpB,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,8CAAgDf,EAASI,aAC7FjB,GAAc,cAAY4B,EAAAA,EAAAA,KAAe,yCACzC,MACF,KAAK,EAEH,MAAQf,EAASG,2BACff,GAAKR,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBR,GAAKT,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBP,GAAKV,EAAAA,EAAAA,KAAQgB,EAAMC,GACnBG,EAASZ,GAAKA,EACdY,EAASX,GAAKA,EACdW,EAASV,GAAKA,EAEhBJ,EAAS,GAAEc,EAASI,oBAAoBJ,EAASK,eAAe,SAASL,EAASZ,YAClFF,GAAU,GAAEc,EAASK,eAAe,SAASL,EAASX,qCAAqCW,EAASkB,sBAEpG,IAAK,IAAIxB,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEC,SAAUP,EAASK,eAAeX,GAAIc,KAAMR,EAASS,WAAWf,GAAIgB,OAAQV,EAASW,sBAAsBjB,KAGpIQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,kCAAiCa,EAASkB,uDAAuDlB,EAASK,eAAe,SAASL,EAASkB,yBAAyBlB,EAASZ,aAAaY,EAASX,aAAaW,EAASV,UACvOH,GAAc,8BAA6Ba,EAASI,aAAaF,EAAgB,GAAGM,oBAAoBN,EAAgB,GAAGQ,qCAC3HvB,GAAc,gBAAee,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,eAAeL,EAAgB,GAAGQ,iBAAiBR,EAAgB,GAAGQ,kBAAiBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,eAC9NvB,GAAc,wBAAuBe,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,cAAcL,EAAgB,GAAGK,WAC1HpB,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,aAGtFjB,GAAc,iJAA+I4B,EAAAA,EAAAA,KAAe,wCAC5K5B,GAAa,oGACb,MACF,KAAK,EACH,MAAQa,EAASmB,wBACf5B,GAAKX,EAAAA,EAAAA,KAAQkB,EAAMC,EAAM,CAAC,EAAG,MAC7BP,GAAKZ,EAAAA,EAAAA,KAAQkB,EAAMC,EAAM,CAAC,EAAG,MAC7BN,GAAKqB,EAAAA,EAAAA,KAAO,IAAMvB,EAAKC,GACvBQ,EAAST,GAAKA,EACdS,EAASR,GAAKA,EACdQ,EAASP,GAAKA,EAEhBP,EAAQ,GACRC,EAAY,GACZD,EAAS,GAAEc,EAASI,oBAAoBJ,EAASoB,YAAY,SAASpB,EAAST,iBAC/EL,GAAU,GAAEc,EAASoB,YAAY,SAASpB,EAASR,kBAAkBQ,EAASoB,YAAY,SAASpB,EAASP,eAE5G,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEe,MAAOrB,EAASoB,YAAY1B,GAAIgB,OAAQV,EAASsB,mBAAmB5B,KAG7FQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,YAAYnB,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,qBAAoBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,oBAC7VvB,GAAa,sFACbA,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,aACtFjB,GAAc,cAAY4B,EAAAA,EAAAA,KAAe,2DACzC5B,GAAa,0FACb,MACF,KAAK,EACH,MAAQa,EAASuB,wBACfhC,GAAKX,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBP,GAAKZ,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBN,GAAKqB,EAAAA,EAAAA,KAAO,IAAMvB,EAAKC,GACvBQ,EAAST,GAAKA,EACdS,EAASR,GAAKA,EACdQ,EAASP,GAAKA,EAEhBP,EAAQ,GACRC,EAAY,GACZD,EAAS,GAAEc,EAASI,oBAAoBJ,EAASoB,YAAY,SAASpB,EAAST,iBAC/EL,GAAU,GAAEc,EAASoB,YAAY,SAASpB,EAASR,kBAAkBQ,EAASoB,YAAY,SAASpB,EAASP,eAE5G,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEe,MAAOrB,EAASoB,YAAY1B,GAAIgB,OAAQV,EAASsB,mBAAmB5B,KAG7FQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,YAAYnB,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,qBAAoBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,oBAC7VvB,GAAa,sFACbA,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,aACtFjB,GAAc,+DAA6D4B,EAAAA,EAAAA,KAAef,EAASI,SAAW,iCAC9GjB,GAAc,cAAY4B,EAAAA,EAAAA,KAAe,2DACzC5B,GAAa,yIACbA,GAAc,sDAAqDe,EAAgB,GAAGmB,MAAMJ,MAAM,IAAI,MAAMf,EAAgB,GAAGmB,MAAMJ,MAAM,IAAI,sCAAsCf,EAAgB,GAAGmB,MAAMJ,MAAM,IAAI,OAExN,MACF,KAAK,EAQH,IANA1B,GAAKX,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBP,GAAKZ,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBN,GAAKb,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBC,EAAST,GAAKA,EACdS,EAASR,GAAKA,EACdQ,EAASP,GAAKA,EACPO,EAASmB,wBACd5B,GAAKX,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBP,GAAKZ,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBN,GAAKb,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBC,EAAST,GAAKA,EACdS,EAASR,GAAKA,EACdQ,EAASP,GAAKA,EAEhBP,EAAS,GAAEc,EAASI,oBAAoBJ,EAASoB,YAAY,SAASpB,EAAST,iBAC/EL,GAAU,GAAEc,EAASoB,YAAY,SAASpB,EAASR,kBAAkBQ,EAASoB,YAAY,SAASpB,EAASP,eAE5G,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEe,MAAOrB,EAASoB,YAAY1B,GAAIgB,OAAQV,EAASsB,mBAAmB5B,KAG7FQ,EAAgBU,MAAK,SAAUjC,EAAGkC,GAChC,OAAOlC,EAAE+B,OAASG,EAAEH,UAEtBvB,EAAa,oDAAmDa,EAASI,6BACzEjB,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,YAAYnB,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,oBAAoBR,EAAgB,GAAGQ,qBAAoBI,EAAAA,EAAAA,KAAOZ,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,oBAC7VvB,GAAa,6FACbA,GAAa,2BACbA,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,8CAAgDf,EAASI,aAC7FjB,GAAc,cAAY4B,EAAAA,EAAAA,KAAe,yCACzC,MACF,KAAK,EAAG,CACN,MAAMS,GAAU5C,EAAAA,EAAAA,KAAQ,EAAG,GACrB6C,EAAsB,CAAC,SAAU,YAAa,SACpD,IAAIC,EAAY,GAIhB,OAHAxC,EAAQ,GACRC,EAAY,GACZA,EAAa,oDAAmDa,EAASI,6BACjEoB,GACN,KAAK,EAKH,OAJAjC,GAAKX,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBC,EAAST,GAAKA,EACdmC,EAAYD,GAAoB7C,EAAAA,EAAAA,KAAQ,EAAG,IAC3CM,GAAU,GAAEc,EAASI,oBAAoBJ,EAASoB,YAAY,UAASO,EAAAA,EAAAA,KAAU3B,EAAST,kBAClFmC,GACN,IAAK,SACHlC,GAAKsB,EAAAA,EAAAA,MAAQ,IAAMvB,GAAM,GACzBE,GAAKqB,EAAAA,EAAAA,KAAO,EAAItB,GAChB,MACF,IAAK,YACHA,GAAKsB,EAAAA,EAAAA,MAAQ,IAAMvB,GAAM,GACzBE,GAAKqB,EAAAA,EAAAA,KAAO,EAAItB,GAChB,MACF,IAAK,QACHA,GAAKsB,EAAAA,EAAAA,KAAO,GAAK,IAAMvB,GAAM,GAC7BE,GAAKqB,EAAAA,EAAAA,KAAOtB,EAAK,GAGrBQ,EAASR,GAAKA,EACdQ,EAASP,GAAKA,EACdP,GAAU,GAAEc,EAASoB,YAAY,UAASO,EAAAA,EAAAA,KAAU3B,EAASR,mBAAmBQ,EAASoB,YAAY,aAAaM,QAAgB1B,EAASoB,YAAY,MAEvJ,IAAK,IAAI1B,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEe,MAAOrB,EAASoB,YAAY1B,GAAIgB,OAAQV,EAASsB,mBAAmB5B,KAE7FP,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGmB,gBAAgBK,QAAgBxB,EAAgB,GAAGmB,aAAYM,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,0BAA0BR,EAAgB,GAAGmB,aAAYM,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,oBAChQ,MACF,KAAK,EAKH,OAJAlB,GAAKZ,EAAAA,EAAAA,KAAQkB,EAAMC,GACnBC,EAASR,GAAKA,EACdkC,EAAYD,GAAoB7C,EAAAA,EAAAA,KAAQ,EAAG,IAC3CM,GAAU,GAAEc,EAASI,oBAAoBJ,EAASoB,YAAY,UAASO,EAAAA,EAAAA,KAAU3B,EAASR,kBAClFkC,GACN,IAAK,SACHnC,GAAKuB,EAAAA,EAAAA,MAAQ,IAAMtB,GAAM,GACzBC,GAAKqB,EAAAA,EAAAA,KAAO,EAAIvB,GAChB,MACF,IAAK,YACHA,GAAKuB,EAAAA,EAAAA,MAAQ,IAAMtB,GAAM,GACzBC,GAAKqB,EAAAA,EAAAA,KAAO,EAAIvB,GAChB,MACF,IAAK,QACHA,GAAKuB,EAAAA,EAAAA,KAAO,GAAK,IAAMtB,GAAM,GAC7BC,GAAKqB,EAAAA,EAAAA,KAAOvB,EAAK,GAGrBS,EAAST,GAAKA,EACdS,EAASP,GAAKA,EACdP,GAAU,GAAEc,EAASoB,YAAY,UAASO,EAAAA,EAAAA,KAAU3B,EAAST,mBAAmBS,EAASoB,YAAY,aAAaM,QAAgB1B,EAASoB,YAAY,MAEvJ,IAAK,IAAI1B,EAAI,EAAGA,EAAI,EAAGA,IACrBQ,EAAgBI,KAAK,CAAEe,MAAOrB,EAASoB,YAAY1B,GAAIgB,OAAQV,EAASsB,mBAAmB5B,KAE7FP,GAAc,wBAAuBa,EAASI,aAAaF,EAAgB,GAAGmB,gBAAgBK,QAAgBxB,EAAgB,GAAGmB,aAAYM,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,0BAA0BR,EAAgB,GAAGmB,aAAYM,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,oBAGpQvB,GAAc,YAAWe,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,WAAWnB,EAAgB,GAAGmB,aAAYM,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,sBAAqBiB,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,sBAAqBiB,EAAAA,EAAAA,KAAUzB,EAAgB,GAAGQ,sBAAqBkB,EAAAA,EAAAA,KAAW1B,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,OAASR,EAAgB,GAAGQ,oBAChWvB,GAAa,sFACbA,GAAc,SAAO4B,EAAAA,EAAAA,KAAe,uCAAyCf,EAASI,aACtFjB,GAAc,cAAY4B,EAAAA,EAAAA,KAAe,2DACzC5B,GAAa,0FACb,QAGwC,IAAxCnB,KAAKe,eAAe8C,QAAQ3C,KAC9BlB,KAAKe,eAAeuB,KAAKpB,GACzBlB,KAAKgB,iBAAiBsB,KAAKnB,GAC3BO,KAEFC,KAEFmC,EAAAA,EAAAA,KAAwB9D,OAEtBA,KAAKG,MAAQH,KAAKI,KAAO,SAC3BJ,KAAK+D,0BAA4B,CAAC,uBAAwB,EAAG,oDACpD/D,KAAKG,MAAQH,KAAKI,KAAO,WAClCJ,KAAK+D,0BAA4B,CAAC,uBAAwB,EAAG,0E,gBC9XlD,SAAShE,IAItBC,KAAKJ,MAAQ,GACbI,KAAKgE,YAAa,EAclBhE,KAAKK,SAAW,GAChBL,KAAKiE,mBAAqB,GAC1BjE,KAAKkE,aAAe,GACpBlE,KAAKe,eAAiB,GACtBf,KAAKgB,iBAAmB,GACxBhB,KAAKmE,QAAU,GACfnE,KAAKoE,kBAAoB,GACzBpE,KAAKiB,eAAiB,GACtBjB,KAAKqE,sBAAwB,GAK7BrE,KAAKsE,QAAU,EACftE,KAAKuE,YAAc,EAKnBvE,KAAKwE,mBAAoB,EACzBxE,KAAKQ,cAAgB,GACrBR,KAAKyE,oBAAqB,EAC1BzE,KAAK0E,uBAAwB,EAC7B1E,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAK2E,kBAAmB,EACxB3E,KAAK4E,sBAAuB,EAC5B5E,KAAK6E,mBAAoB,EACzB7E,KAAK8E,uBAAwB,EAM7B9E,KAAK+E,QAAS,EACd/E,KAAKgF,gBAAkB,EAKvBhF,KAAKE,YAAc,GACnBF,KAAKiF,mBAAqB,EAC1BjF,KAAKkF,+BAAgC,EACrClF,KAAKmF,qBAAsB,EAC3BnF,KAAKoF,oBAAqB,EAC1BpF,KAAKqF,MAAQ,GAEbrF,KAAKsF,YAAa,EAClBtF,KAAKuF,uBAAwB,EAE7BvF,KAAK+D,2BAA4B,EACjC/D,KAAKwF,uBAAwB,EAC7BxF,KAAKyF,6BAA8B,EAEnCzF,KAAK0F,4BAA6B,EAClC1F,KAAK2F,wBAAyB,EAC9B3F,KAAK4F,8BAA+B,EAEpC5F,KAAK6F,4BAA6B,EAClC7F,KAAK8F,wBAAyB,EAC9B9F,KAAK+F,8BAA+B,EAEpC/F,KAAKgG,4BAA6B,EAClChG,KAAKiG,wBAAyB,EAC9BjG,KAAKkG,8BAA+B,EAMpClG,KAAKmG,cAAe,EASpBnG,KAAKoG,eAAiB,GAMtBpG,KAAKS,gBAAkB,SAAU4F,KAQjCrG,KAAKsG,oBAAsB,SAAU5E,KAAM6E,GAC/B,IAAN7E,IAAS1B,KAAKoG,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI3G,KAAKoG,eAAevC,QAAQ2C,IAAmB,KAGjDxG,KAAKoG,eAAe9D,KAAKkE,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/5e/_Constructibilite_des_triangles.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, calcul, texNombrec, texNombre, texteEnCouleur, Triangles } from '../../modules/outils.js'\n\nexport const titre = 'Constructibilité des triangles via les longueurs'\n\n/**\n * Constructibilité des triangles\n * Préciser ici les numéros des exos\n * 5G2 exercice parent il faudra supprimmer la version beta5G2 de la liste des choix du fichier mathalea_exercices.js\n * 5G21-1\n * 5G31-1\n * Dans ces exercices je me servais de this.beta pour faire passer l'exo de beta.html à context.html\n * this.beta pouvait prendre la valeur 'beta' ou '', tous les autres this.beta sont devenus des this.debug\n * Mise à jour le 2021-01-25\n * @author Sébastien Lozano\n */\nexport default function ConstructibiliteDesTriangles () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = 1\n  this.nbQuestions = 3\n  if (this.exo === this.beta + '5G21-1') { // via longueurs\n    this.titre = titre\n    this.consigne = 'Justifier si les longueurs données permettent de construire le triangle.'\n    this.consigne += '<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.'\n  } else if (this.exo === this.beta + '5G31-1') { // via angles\n    this.titre = 'Constructibilité des triangles via les angles'\n    this.consigne = 'Justifier si les angles donnés permettent de construire le triangle.'\n    this.consigne += '<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.'\n  } else {\n    this.titre = 'Constructibilité des triangles'\n    this.consigne = 'Justifier si les longueurs ou les angles donnés permettent de construire le triangle.'\n    this.consigne += '<br>Dire si tous les élèves qui doivent construire ce triangle auront la même figure.'\n  };\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n\n  this.listePackages = 'bclogo'\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    if (this.exo === this.beta + '5G21-1') { // via longueurs\n      if (this.sup === 1) {\n        typesDeQuestionsDisponibles = [1, 2, 3]\n      } else if (this.sup === 2) {\n        const a = randint(1, 3)\n        if (this.nbQuestions === 1) typesDeQuestionsDisponibles = [4]\n        else if (this.nbQuestions === 2) typesDeQuestionsDisponibles = [4, a]\n        else if (this.nbQuestions === 3) typesDeQuestionsDisponibles = [4, a, a % 3 + 1]\n        else typesDeQuestionsDisponibles = [4, 1, 2, 3]\n      };\n    } else if (this.exo === this.beta + '5G31-1') { // via angles\n      if (this.sup === 1) {\n        typesDeQuestionsDisponibles = [5, 6, 7]\n      } else if (this.sup === 2) {\n        const a = randint(5, 7)\n        if (this.nbQuestions === 1) typesDeQuestionsDisponibles = [8]\n        else if (this.nbQuestions === 2) typesDeQuestionsDisponibles = [8, a]\n        else if (this.nbQuestions === 3) typesDeQuestionsDisponibles = [8, a, (a - 4) % 3 + 5]\n        else typesDeQuestionsDisponibles = [8, 5, 6, 7]\n      };\n    } else {\n      typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7, 8]\n    };\n\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    for (let i = 0, texte, texteCorr, l1, l2, l3, a1, a2, a3, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // on fixe longueur min et max en cm\n      const lMin = 2\n      const lMax = 20\n      // on fixe angle min et max en degré\n      const aMin = 0\n      const aMax = 180\n\n      // on crée un objet triangle\n      const triangle = new Triangles()\n      // on crée un tableau pour le triangle courant\n      const currentTriangle = []\n\n      switch (listeTypeDeQuestions[i]) {\n        case 1: // 3 longueurs constructible\n          while (!triangle.isTrueTriangleLongueurs()) {\n            l1 = randint(lMin, lMax)\n            l2 = randint(lMin, lMax)\n            l3 = randint(lMin, lMax)\n            triangle.l1 = l1\n            triangle.l2 = l2\n            triangle.l3 = l3\n          };\n          texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `\n          texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[2].cote} qui mesure $${currentTriangle[2].valeur}$ cm est le plus grand côté.`\n          texteCorr += `<br> De plus ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} = $${currentTriangle[0].valeur}$ cm + $${currentTriangle[1].valeur}$ cm = $${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur)}$ cm.`\n          texteCorr += `<br> On constate que ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} > ${currentTriangle[2].longueur}.`\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('plusieurs tels triangles existent')}.`\n          texteCorr += '<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.'\n          break\n        case 2: // 3 longueurs plat\n          while (!triangle.isPlatTriangleLongueurs()) {\n            l1 = randint(lMin, lMax)\n            l2 = randint(lMin, lMax)\n            l3 = calcul(l1 + l2)\n            triangle.l1 = l1\n            triangle.l2 = l2\n            triangle.l3 = l3\n          };\n          texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $ = ${triangle.l1}$ cm ; `\n          texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[2].cote} qui mesure $${currentTriangle[2].valeur}$ cm est le plus grand côté.`\n          texteCorr += `<br> De plus ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} = $${currentTriangle[0].valeur}$ cm + $${currentTriangle[1].valeur}$ cm = $${currentTriangle[2].valeur}$ cm aussi.`\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom() + ' c\\'est un triangle plat')}.`\n          texteCorr += `<br><br>${texteEnCouleur('Un seul triangle de ce type existe')}, il s'agit du segment ${currentTriangle[2].cote} sur lequel on place le point `\n          if ((currentTriangle[0].longueur.split('')[2] === currentTriangle[2].cote.split('')[1]) || (currentTriangle[0].longueur.split('')[2] === currentTriangle[2].cote.split('')[2])) {\n            texteCorr += `${currentTriangle[0].longueur.split('')[1]}`\n          } else {\n            texteCorr += `${currentTriangle[0].longueur.split('')[2]}`\n          };\n          texteCorr += '.'\n          // `${currentTriangle[0].longueur.split('')[2]}.`;\n          break\n        case 3: // 3 longueurs non constructible\n          // on initialise les longueurs sinon la méthode isTrueTriangleLongueurs() renvoie false!\n          l1 = randint(lMin, lMax)\n          l2 = randint(lMin, lMax)\n          l3 = randint(lMin, lMax)\n          triangle.l1 = l1\n          triangle.l2 = l2\n          triangle.l3 = l3\n\n          while (triangle.isTrueTriangleLongueurs() || triangle.isPlatTriangleLongueurs()) {\n            l1 = randint(lMin, lMax)\n            l2 = randint(lMin, lMax)\n            l3 = randint(lMin, lMax)\n            triangle.l1 = l1\n            triangle.l2 = l2\n            triangle.l3 = l3\n          };\n          texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `\n          texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et ${triangle.getLongueurs()[2]} $= ${triangle.l3}$ cm.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[2].cote} qui mesure $${currentTriangle[2].valeur}$ cm est le plus grand côté.`\n          texteCorr += `<br> De plus ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} = $${currentTriangle[0].valeur}$ cm + $${currentTriangle[1].valeur}$ cm = $${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur)}$ cm.`\n          texteCorr += `<br> On constate que ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} < ${currentTriangle[2].longueur}, les longueurs données ne permettent donc pas de satisfaire à l'inégalité triangulaire.`\n          texteCorr += `<br> ${texteEnCouleur('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br><br>  ${texteEnCouleur('Aucun triangle de ce type n\\'existe')}.`\n          break\n        case 4: // 2 longueurs et le périmètre\n          // on utilise la méthode isTrueTriangleLongueurs(), le triangle ne sera pas plat.\n          while (!triangle.isTrueTriangleLongueurs()) {\n            l1 = randint(lMin, lMax)\n            l2 = randint(lMin, lMax)\n            l3 = randint(lMin, lMax)\n            triangle.l1 = l1\n            triangle.l2 = l2\n            triangle.l3 = l3\n          };\n          texte = `${triangle.getNom()} tel que ${triangle.getLongueurs()[0]} $= ${triangle.l1}$ cm ; `\n          texte += `${triangle.getLongueurs()[1]} $= ${triangle.l2}$ cm et dont le périmètre vaut $${triangle.getPerimetre()}$ cm.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ longueur: triangle.getLongueurs()[i], cote: triangle.getCotes()[i], valeur: triangle.getLongueursValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Puisque le périmètre vaut $${triangle.getPerimetre()}$ cm alors la troisième longueur vaut ${triangle.getLongueurs()[2]} = $${triangle.getPerimetre()}$ cm - $${triangle.l1}$ cm - $${triangle.l2}$ cm = $${triangle.l3}$ cm.`\n          texteCorr += `<br> Donc dans le triangle ${triangle.getNom()}, ${currentTriangle[2].cote} qui mesure $${currentTriangle[2].valeur}$ cm est le plus grand côté.`\n          texteCorr += `<br> De plus ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} = $${currentTriangle[0].valeur}$ cm + $${currentTriangle[1].valeur}$ cm = $${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur)}$ cm.`\n          texteCorr += `<br> On constate que ${currentTriangle[0].longueur} + ${currentTriangle[1].longueur} > ${currentTriangle[2].longueur}`\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`\n          // texteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('deux tels triangles existent')}.`;\n          // texteCorr += `<br> Les deux étant obtenus l'un à partir de l'autre par symétire axiale.`;\n          texteCorr += `<br><br>  Si on considère que le triangle nommé dans le sens des aiguilles d'une montre et celui nommé dans le sens inverse sont différents, ${texteEnCouleur('plusieurs tels triangles existent')}.`\n          texteCorr += '<br> Ils sont obtenus les uns à partir des autres par symétire axiale par rapport à un des côtés.'\n          break\n        case 5: // 3 angles constructible\n          while (!triangle.isTrueTriangleAngles()) {\n            a1 = randint(aMin, aMax, [0, 180])\n            a2 = randint(aMin, aMax, [0, 180])\n            a3 = calcul(180 - a1 - a2)\n            triangle.a1 = a1\n            triangle.a2 = a2\n            triangle.a3 = a3\n          };\n          texte = ''\n          texteCorr = ''\n          texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `\n          texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[0].angle} + ${currentTriangle[1].angle} + ${currentTriangle[2].angle} = $${currentTriangle[0].valeur}\\\\degree + ${currentTriangle[1].valeur}\\\\degree + ${currentTriangle[2].valeur}\\\\degree = ${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur + currentTriangle[2].valeur)}\\\\degree$.`\n          texteCorr += '<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.'\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`\n          texteCorr += '<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.'\n          break\n        case 6: // 3 angles plat\n          while (!triangle.isPlatTriangleAngles()) {\n            a1 = randint(aMin, aMax)\n            a2 = randint(aMin, aMax)\n            a3 = calcul(180 - a1 - a2)\n            triangle.a1 = a1\n            triangle.a2 = a2\n            triangle.a3 = a3\n          };\n          texte = ''\n          texteCorr = ''\n          texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `\n          texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[0].angle} + ${currentTriangle[1].angle} + ${currentTriangle[2].angle} = $${currentTriangle[0].valeur}\\\\degree + ${currentTriangle[1].valeur}\\\\degree + ${currentTriangle[2].valeur}\\\\degree = ${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur + currentTriangle[2].valeur)}\\\\degree$.`\n          texteCorr += '<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.'\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br> Deux des trois angles du triangle valent $0\\\\degree$, ${texteEnCouleur(triangle.getNom() + ' est donc un triangle plat')}.`\n          texteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`\n          texteCorr += '<br> On les obtient en traçant des segments et en plaçant le troisième sommet sur ce segment, les longueurs n\\'ayant aucune importance.'\n          texteCorr += `<br> Dans le cas présent, il s'agit d'un segment $[${currentTriangle[2].angle.split('')[12]}${currentTriangle[2].angle.split('')[14]}]$ sur lequel on place un point ${currentTriangle[2].angle.split('')[13]}.`\n          // texteCorr += `<br> ${JSON.stringify(currentTriangle)}`;\n          break\n        case 7: // 3 angles non constructible\n          // on initialise les angles sinon la méthode isTrueTriangleAngles() renvoie false!\n          a1 = randint(aMin, aMax)\n          a2 = randint(aMin, aMax)\n          a3 = randint(aMin, aMax)\n          triangle.a1 = a1\n          triangle.a2 = a2\n          triangle.a3 = a3\n          while (triangle.isTrueTriangleAngles()) {\n            a1 = randint(aMin, aMax)\n            a2 = randint(aMin, aMax)\n            a3 = randint(aMin, aMax)\n            triangle.a1 = a1\n            triangle.a2 = a2\n            triangle.a3 = a3\n          };\n          texte = `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${triangle.a1}\\\\degree$ ; `\n          texte += `${triangle.getAngles()[1]} $= ${triangle.a2}\\\\degree$ et ${triangle.getAngles()[2]} $= ${triangle.a3}\\\\degree$.`\n          // on crée l'objet longueurs + valeurs des côtés du triangle\n          for (let i = 0; i < 3; i++) {\n            currentTriangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] })\n          };\n          // on trie les couples longueurs/valeurs du triangle selon les valeurs croissantes.\n          currentTriangle.sort(function (a, b) {\n            return a.valeur - b.valeur\n          })\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[0].angle} + ${currentTriangle[1].angle} + ${currentTriangle[2].angle} = $${currentTriangle[0].valeur}\\\\degree + ${currentTriangle[1].valeur}\\\\degree + ${currentTriangle[2].valeur}\\\\degree = ${calcul(currentTriangle[0].valeur + currentTriangle[1].valeur + currentTriangle[2].valeur)}\\\\degree$.`\n          texteCorr += '<br> Si le triangle était constructible, la somme des trois angles vaudrait $180\\\\degree$,'\n          texteCorr += ' or ce n\\'est pas le cas.'\n          texteCorr += `<br> ${texteEnCouleur('On ne peut donc pas construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br><br>  ${texteEnCouleur('Aucun triangle de ce type n\\'existe')}.`\n          break\n        case 8: { // 2 angles et le 3e fonction du 1er ou du 2eme\n          const angleRg = randint(0, 1)\n          const operationsPossibles = ['triple', 'quadruple', 'quart']\n          let operation = ''\n          texte = ''\n          texteCorr = ''\n          texteCorr = `Supposons que l'on puisse construire un triangle ${triangle.getNom()} avec ces mesures.`\n          switch (angleRg) {\n            case 0:\n              a1 = randint(aMin, aMax)\n              triangle.a1 = a1\n              operation = operationsPossibles[randint(0, 2)]\n              texte += `${triangle.getNom()} tel que ${triangle.getAngles()[0]} $= ${texNombre(triangle.a1)}\\\\degree$ ; `\n              switch (operation) {\n                case 'triple':\n                  a2 = calcul((180 - a1) / 4)\n                  a3 = calcul(3 * a2)\n                  break\n                case 'quadruple':\n                  a2 = calcul((180 - a1) / 5)\n                  a3 = calcul(4 * a2)\n                  break\n                case 'quart':\n                  a2 = calcul(4 * (180 - a1) / 5)\n                  a3 = calcul(a2 / 4)\n                  break\n              };\n              triangle.a2 = a2\n              triangle.a3 = a3\n              texte += `${triangle.getAngles()[1]} $= ${texNombre(triangle.a2)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[1]}.`\n              // on crée l'objet longueurs + valeurs des côtés du triangle\n              for (let i = 0; i < 3; i++) {\n                currentTriangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] })\n              };\n              texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[2].angle} est le ${operation} de ${currentTriangle[1].angle} = $${texNombre(currentTriangle[1].valeur)}\\\\degree$  d'où ${currentTriangle[2].angle} = $${texNombre(currentTriangle[2].valeur)}\\\\degree$.`\n              break\n            case 1:\n              a2 = randint(aMin, aMax)\n              triangle.a2 = a2\n              operation = operationsPossibles[randint(0, 2)]\n              texte += `${triangle.getNom()} tel que ${triangle.getAngles()[1]} $= ${texNombre(triangle.a2)}\\\\degree$ ; `\n              switch (operation) {\n                case 'triple':\n                  a1 = calcul((180 - a2) / 4)\n                  a3 = calcul(3 * a1)\n                  break\n                case 'quadruple':\n                  a1 = calcul((180 - a2) / 5)\n                  a3 = calcul(4 * a1)\n                  break\n                case 'quart':\n                  a1 = calcul(4 * (180 - a2) / 5)\n                  a3 = calcul(a1 / 4)\n                  break\n              };\n              triangle.a1 = a1\n              triangle.a3 = a3\n              texte += `${triangle.getAngles()[0]} $= ${texNombre(triangle.a1)}\\\\degree$ et ${triangle.getAngles()[2]} est le ${operation} de ${triangle.getAngles()[0]}.`\n              // on crée l'objet longueurs + valeurs des côtés du triangle\n              for (let i = 0; i < 3; i++) {\n                currentTriangle.push({ angle: triangle.getAngles()[i], valeur: triangle.getAnglesValeurs()[i] })\n              };\n              texteCorr += `<br>Dans le triangle ${triangle.getNom()}, ${currentTriangle[2].angle} est le ${operation} de ${currentTriangle[0].angle} = $${texNombre(currentTriangle[0].valeur)}\\\\degree$  d'où ${currentTriangle[2].angle} = $${texNombre(currentTriangle[2].valeur)}\\\\degree$.`\n              break\n          };\n          texteCorr += `<br>Donc ${currentTriangle[0].angle} + ${currentTriangle[1].angle} + ${currentTriangle[2].angle} = $${texNombre(currentTriangle[0].valeur)}\\\\degree + ${texNombre(currentTriangle[1].valeur)}\\\\degree + ${texNombre(currentTriangle[2].valeur)}\\\\degree = ${texNombrec(currentTriangle[0].valeur + currentTriangle[1].valeur + currentTriangle[2].valeur)}\\\\degree$.`\n          texteCorr += '<br> On constate que la somme des trois angles du triangle vaut bien $180\\\\degree$.'\n          texteCorr += `<br> ${texteEnCouleur('On peut donc construire le triangle ' + triangle.getNom())}.`\n          texteCorr += `<br><br>  ${texteEnCouleur('Il existe une infinité de triangles avec ces mesures.')}`\n          texteCorr += '<br> On les obtient les uns à partir des autres par un agrandissement ou une réduction.'\n          break\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  if (this.exo === this.beta + '5G21-1') {\n    this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : 3 longueurs\\n2 : 2 longueurs et le périmètre']\n  } else if (this.exo === this.beta + '5G31-1') {\n    this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : 3 angles\\n2 : 2 angles et le 3ème en fonction du 1er ou du 2ème']\n  } else {\n    // this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : sans conversions de longueurs\\n2 : avec conversions de longueurs\"];\n  };\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConstructibiliteDesTriangles","typesDeQuestionsDisponibles","Exercice","this","sup","nbQuestions","exo","beta","consigne","nbCols","nbColsCorr","listePackages","nouvelleVersion","parseInt","a","randint","listeTypeDeQuestions","combinaisonListes","listeQuestions","listeCorrections","autoCorrection","texte","texteCorr","l1","l2","l3","a1","a2","a3","i","cpt","lMin","lMax","aMin","aMax","triangle","Triangles","currentTriangle","isTrueTriangleLongueurs","getNom","getLongueurs","push","longueur","cote","getCotes","valeur","getLongueursValeurs","sort","b","calcul","texteEnCouleur","isPlatTriangleLongueurs","split","getPerimetre","isTrueTriangleAngles","getAngles","angle","getAnglesValeurs","isPlatTriangleAngles","angleRg","operationsPossibles","operation","texNombre","texNombrec","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}