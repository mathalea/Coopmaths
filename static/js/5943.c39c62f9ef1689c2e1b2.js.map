{"version":3,"file":"js/5943.c39c62f9ef1689c2e1b2.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3G12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, choice, shuffle, nombreAvecEspace, arcenciel, texcolors } from '../../modules/outils.js'\nimport { pavage, tracePoint, labelPoint, segment, rotation, rotationAnimee, codeAngle, texteParPosition, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Trouver l’image d’une figure par une rotation dans un pavage'\n\n/**\n * Publié le 16/12/2020\n * @author Jean-Claude Lhote\n * Trouver l'image par sune rotation d'une figure dans un pavage\n * Ref 3G12\n */\nexport default function PavageEtRotation2D () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = true\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1 // 1 pour des pavages modestes, 2 pour des plus grand.\n  this.sup2 = false // On cache les barycentres par défaut.\n  this.sup3 = 7\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function () {\n    this.sup = Number(this.sup)\n    this.sup3 = Number(this.sup3)\n    const videcouples = function (tableau) {\n      for (let k = 0; k < tableau.length; k++) {\n        if (tableau[k][0] === tableau[k][1]) {\n          tableau.splice(k, 1)\n        }\n        for (let j = k + 1; j < tableau.length; j++) {\n          // eslint-disable-next-line no-empty\n          if (tableau[k][1] === tableau[j][0]) {\n\n          }\n        }\n      }\n      return tableau\n    }\n    const compare2polys = function (poly1, poly2) {\n      if (comparenbsommets(poly1, poly2)) {\n        if (comparesommets(poly1, poly2)) { return true } else { return false }\n      } else { return false }\n    }\n    const comparenbsommets = function (poly1, poly2) {\n      if (poly1.listePoints.length === poly2.listePoints.length) {\n        return true\n      } else { return false }\n    }\n\n    const compare2sommets = function (sommet1, sommet2) {\n      if (egal(sommet1.x, sommet2.x, 0.1) && egal(sommet1.y, sommet2.y, 0.1)) {\n        return true\n      } else { return false }\n    }\n    const comparesommets = function (poly1, poly2) {\n      let trouve = false; let trouves = 0\n      if (comparenbsommets(poly1, poly2)) {\n        for (const P of poly1.listePoints) {\n          for (const M of poly2.listePoints) {\n            if (compare2sommets(M, P)) {\n              trouve = true\n            }\n            if (trouve) { break }\n          }\n          if (trouve) {\n            trouves++\n            trouve = false\n          } else {\n            trouves -= 100\n          }\n          if (trouves < 0) { break }\n        }\n      }\n      if (trouves === poly1.listePoints.length) { return true } else { return false }\n    }\n\n    const rotaccion = function (pavage, A, angle, numero) {\n      const poly = pavage.polygones[numero - 1]\n      let pol\n      const result = -1\n      const sympoly = rotation(poly, A, angle)\n      for (let k = 0; k < pavage.polygones.length; k++) {\n        pol = pavage.polygones[k]\n        if (compare2polys(sympoly, pol)) {\n          return k + 1\n        }\n      }\n      return result\n    }\n\n    const objets = []; const objetsCorrection = []\n    let taillePavage = parseInt(this.sup)\n    if (taillePavage < 1 || taillePavage > 2) {\n      taillePavage = 1\n    }\n    if (this.nbQuestions > 5) {\n      taillePavage = 2\n    }\n    this.listeCorrections = []\n    this.listeQuestions = []\n    let Nx; let Ny; let index1; let A; let image; let couples = []; let tailles = []; let monpavage; let fenetre\n    let texte = ''; let texteCorr = ''; let typeDePavage = parseInt(this.sup)\n    let nombreTentatives; let nombrePavageTestes = 1\n    let sensdirect, M, N, trace, label, P1, P2, P3, t\n    const alphas = [[60, 120, 180], [90, 180], [60, 120, 180], [60, 120, 180, 90], [45, 90, 135, 180], [60, 120, 180], [60, 120, 180]]; let alpha\n    if (this.sup3 === 8) {\n      typeDePavage = randint(1, 7)\n    } else {\n      typeDePavage = parseInt(this.sup3)\n    }\n    while (couples.length < this.nbQuestions && nombrePavageTestes < 6) {\n      nombreTentatives = 0\n      monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n      tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2], [3, 2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2], [5, 3]]]\n\n      Nx = tailles[taillePavage - 1][typeDePavage - 1][0]\n      Ny = tailles[taillePavage - 1][typeDePavage - 1][1]\n      monpavage.construit(typeDePavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n      fenetre = monpavage.fenetre\n      // fenetreMathalea2d = [fenetre.xmin, fenetre.ymin, fenetre.xmax, fenetre.ymax];\n      while (couples.length < this.nbQuestions + 2 && nombreTentatives < 3) { // On cherche d pour avoir suffisamment de couples\n        couples = [] // On vide la liste des couples pour une nouvelle recherche\n\n        index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 1 point dans un des polygones\n        if (choice([true, false])) {\n          A = monpavage.polygones[index1].listePoints[randint(0, monpavage.polygones[index1].listePoints.length - 1)] // On choisit un sommet\n        } else {\n          A = monpavage.barycentres[index1] // Ou on choisit un barycentre\n        }\n        while (A.x - 5 < fenetre.xmin || A.x + 5 > fenetre.xmax || A.y - 5 < fenetre.ymin || A.y + 5 > fenetre.ymax) {\n          index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 1 point dans un des polygones\n          if (choice([true, false])) {\n            A = monpavage.polygones[index1].listePoints[randint(0, monpavage.polygones[index1].listePoints.length - 1)] // On choisit un sommet\n          } else {\n            A = monpavage.barycentres[index1] // Ou on choisit un barycentre\n          }\n        }\n        A.nom = 'A'\n        A.positionLabel = 'above left'\n        trace = tracePoint(A) // la trace du centre de symétrie sera rouge et grosse\n        label = labelPoint(A)\n        trace.epaisseur = 3\n        trace.taille = 4\n        trace.color = 'red'\n        alpha = alphas[typeDePavage - 1][randint(0, alphas[typeDePavage - 1].length - 1)]\n        sensdirect = choice([1, -1])\n        for (let i = 1; i <= monpavage.nb_polygones; i++) { // on crée une liste des couples (antécédents, images)\n          image = rotaccion(monpavage, A, alpha * sensdirect, i)\n          if (image !== -1) { // si l'image du polygone i existe, on ajoute le couple à la liste\n            couples.push([i, image])\n          }\n        }\n        couples = videcouples(couples) // supprime tous les couples en double (x,y)=(y,x)\n        nombreTentatives++\n      }\n      if (couples.length < this.nbQuestions) {\n        if (this.sup3 === 7) {\n          typeDePavage = (typeDePavage + 1) % 5 + 1\n        }\n        nombrePavageTestes++\n      }\n    }\n    if (couples.length < this.nbQuestions) {\n      console.log('Trop de questions, augmentez la taille du pavage !')\n      return\n    }\n\n    objets.push(trace) // le centre est OK on pousse sa trace\n    objets.push(label) // et son label\n    couples = shuffle(couples) // on mélange les couples\n    for (let i = 0; i < monpavage.nb_polygones; i++) {\n      objets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n    }\n    if (this.sup2) { // Doit-on montrer les centres des figures ?\n      for (let i = 0; i < monpavage.nb_polygones; i++) {\n        objets.push(monpavage.tracesCentres[i])\n      }\n    }\n    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n      objets.push(monpavage.polygones[i])\n    }\n    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n    texte += `<br>Soit la rotation de centre $A$ et d'angle ${alpha}° dans le sens `\n    if (sensdirect === 1) {\n      texte += 'inverse des aiguilles d\\'une montre.<br>'\n    } else {\n      texte += 'des aiguilles d\\'une montre.<br>'\n    }\n    texteCorr += `Soit la rotation de centre $A$ et d'angle ${alpha}° dans le sens `\n    if (sensdirect === 1) {\n      texteCorr += 'inverse des aiguilles d\\'une montre. <br>'\n    } else {\n      texteCorr += 'des aiguilles d\\'une montre. <br>'\n    }\n    for (let i = 0; i < this.nbQuestions; i++) {\n      texte += `Quelle est l'image de la figure $${couples[i][0]}$ ?<br>`\n      texteCorr += `L'image de la figure $${couples[i][0]}$ est la figure ${couples[i][1]}.<br>`\n\n      if (this.correctionDetaillee) {\n        t = this.nbQuestions * 3\n        M = monpavage.barycentres[couples[i][0] - 1]\n        N = monpavage.barycentres[couples[i][1] - 1]\n        P1 = monpavage.polygones[couples[i][0] - 1]\n        P1.color = texcolors(i)\n        P1.couleurDeRemplissage = texcolors(i)\n        P1.opaciteDeRemplissage = 0.5\n        P1.epaisseur = 2\n        P2 = monpavage.polygones[couples[i][1] - 1]\n        P2.color = texcolors(i)\n        P2.couleurDeRemplissage = texcolors(i)\n        P2.opaciteDeRemplissage = 0.5\n        P2.epaisseur = 2\n        P3 = rotationAnimee(P1, A, alpha * sensdirect, `begin=\"${i * 3}s;${i * 3 + t}s;${i * 3 + t * 2}s\" end=\"${i * 3 + 2}s;${i * 3 + t + 2}s;${i * 3 + t * 2 + 2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9 * this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n        P3.color = texcolors(i)\n        P3.epaisseur = 2\n        objetsCorrection.push(tracePoint(M, N), segment(A, M, texcolors(i)), segment(A, N, arcenciel(i)), codeAngle(M, A, N, 0.8, '', arcenciel(i), 1, 1, 'blue', 0.2, true), P1, P2, P3)\n      }\n    }\n    if (this.correctionDetaillee) {\n      texteCorr += mathalea2d(fenetre, objets, objetsCorrection)\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, ' 1 : Taille modeste\\n 2 : Grande taille']\n  this.besoinFormulaire2CaseACocher = ['Montrer les centres']\n  this.besoinFormulaire3Numerique = ['Choix du pavage', 8, '1 : Triangles équilatéraux\\n2 : Carrés\\n3 : Hexagones réguliers\\n4 : Carrés et triangles équilatéraux\\n5 : Octogones et carrés\\n 6 : Losanges (pavage hexagonal d\\'écolier)\\n7 : Hexagones et triangles équilatéraux\\n8 : Un des sept pavages au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","PavageEtRotation2D","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetailleeDisponible","correctionDetaillee","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","Number","videcouples","tableau","k","length","splice","j","comparenbsommets","poly1","poly2","listePoints","comparesommets","trouve","trouves","P","M","sommet1","sommet2","egal","x","y","rotaccion","pavage","A","angle","numero","poly","polygones","pol","sympoly","rotation","objets","objetsCorrection","Nx","Ny","index1","image","taillePavage","parseInt","listeCorrections","listeQuestions","monpavage","fenetre","nombreTentatives","sensdirect","N","trace","label","P1","P2","P3","t","couples","tailles","texte","texteCorr","typeDePavage","nombrePavageTestes","alphas","alpha","randint","construit","Math","floor","nb_polygones","ceil","choice","barycentres","xmin","xmax","ymin","ymax","nom","positionLabel","tracePoint","labelPoint","epaisseur","taille","color","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","tracesCentres","mathalea2d","texcolors","couleurDeRemplissage","opaciteDeRemplissage","rotationAnimee","segment","arcenciel","codeAngle","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}