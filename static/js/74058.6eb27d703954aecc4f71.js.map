{"version":3,"sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/operations.js"],"names":["Exercice","this","titre","consigne","consigneCorrection","listeQuestions","listeCorrections","introduction","contenu","contenuCorrection","nbQuestions","nbCols","nbColsCorr","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulair2eNumerique","besoinFormulair2eTexte","besoinFormulair2eCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","nouvelleVersion","numeroExercice","listePackages","math","format","Operation","operande1","operande2","type","precision","Code","nombreDeChiffresApresLaVirgule","x","s","Number","toString","pe","Math","floor","length","cacherleszerosdevant","chaine","blancs","substr","i","DivisionPosee3d","divid","divis","objets","zeroutile","min","calcul","decalage","dec1","dec2","notation","lowerExp","upperExp","ecriresoustraction","upos","P","push","texteParPosition","k","ecrirereste","R","segment","ecrirequotient","Q","n","divd","dividende","diviseur","log10","ordreDeGrandeur","m","parseInt","z","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","context","max","code","sresultat","resultat","lresultat","sop1","sop2","lop1","lop2","longueuroperandes","retenues","j","AdditionPosee3d","charAt","SoustractionPosee3d","operandex","lignesinutiles","produits","strprod","sommes","longueurtotale","MultiplicationPosee3d"],"mappings":"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","file":"js/74058.6eb27d703954aecc4f71.js","sourcesContent":["/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte,tooltip];\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte];\n  this.besoinFormulair2eNumerique = false // Sinon this.besoinFormulair2eNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulair2eTexte = false // Sinon this.besoinFormulair2eTexte = [texte,tooltip];\n  this.besoinFormulair2eCaseACocher = false // Sinon this.besoinFormulair2eCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* globals context.isHtml */\nimport { ordreDeGrandeur, calcul } from './outils.js'\nimport { mathalea2d, texteParPosition, segment } from './2d.js'\nimport { context } from './context.js'\nimport { format } from 'mathjs'\nconst math = { format: format }\n/**\n *\n * Pose une opération\n * @author Jean-Claude Lhote\n * les types possibles sont : addition, soustraction, multiplication, division, additiond, soustractiond, multiplicationd, divisiond\n * Le paramètre précision précise pour divisiond, le nombre de chiffres après la virgule dans le quotient.\n */\n\nexport default function Operation ({ operande1 = 1, operande2 = 2, type = 'addition', precision = 0 }) { // precision est pour le quotient décimal\n  let Code\n  const nombreDeChiffresApresLaVirgule = function (x) {\n    const s = Number(x).toString()\n    const pe = Number(Math.floor(x)).toString()\n    if (pe.length == s.length) return 0\n    return s.length - pe.length - 1\n  }\n\n  const cacherleszerosdevant = function (chaine) {\n    let blancs = ''\n    while (chaine[0] == '0') {\n      chaine = chaine.substr(1)\n      blancs += ' '\n    }\n    for (let i = 0; i < chaine.length; i++) {\n      blancs += `${chaine[i]}`\n    }\n    return blancs\n  }\n\n  const DivisionPosee3d = function (divid, divis, precision = 0) {\n    const objets = []; let zeroutile = false; const periode = 0\n    precision = Math.min(precision, nombreDeChiffresApresLaVirgule(calcul(divid / divis)))\n    const decalage = nombreDeChiffresApresLaVirgule(divis)\n    const dec1 = nombreDeChiffresApresLaVirgule(divid)\n    if (divid < divis) { zeroutile = true }\n    divis = calcul(`${divis}*10^${decalage}`)\n    divid = calcul(`${divid}*10^${decalage + dec1}`)\n    let dec2 = nombreDeChiffresApresLaVirgule(divid)\n    dec2 = precision - dec2 - dec1\n    divid = math.format(divid * 10 ** dec2, { notation: 'auto', lowerExp: -12, upperExp: 12, precision: 12 })\n    const ecriresoustraction = function (upos, P) {\n      objets.push(texteParPosition('-', upos - P.length - 0.5, 10 - i * 2, 'milieu', 'black', 1.2, 'middle', true))\n      for (let k = 0; k < P.length; k++) {\n        objets.push(texteParPosition(P[P.length - k - 1], upos - k - 1, 10 - i * 2, 'milieu', 'black', 1.2, 'middle', true))\n      }\n    }\n    const ecrirereste = function (upos, R) {\n      objets.push(segment(i - 1, 9.6 - i * 2, i + R.length, 9.6 - i * 2))\n      for (let k = 0; k < R.length; k++) {\n        objets.push(texteParPosition(R[R.length - k - 1], upos - k - 1, 9 - i * 2, 'milieu', 'black', 1.2, 'middle', true))\n      }\n    }\n    const ecrirequotient = function (x, Q) {\n      objets.push(texteParPosition(Q, n + 1.5 + x, 10, 'milieu', 'black', 1.2, 'middle', true))\n    }\n\n    const divd = []; const Q = []; const R = []; const P = []\n    const dividende = Number(divid).toString()\n    const diviseur = Number(divis).toString()\n    const n = Math.log10(ordreDeGrandeur(divid, 1)) // nombre de chiffres du dividende\n    const m = Math.log10(ordreDeGrandeur(divis, 1)) // nombre de chiffre du diviseur\n    let upos = m\n\n    for (let i = 0; i < n; i++) { // on écrit le dividende\n      objets.push(texteParPosition(dividende[i], i, 11, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    for (let i = 0; i < m; i++) { // on écrit le diviseur\n      objets.push(texteParPosition(diviseur[i], i + n + 1.5, 11, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    if (dec1 + dec2 != 0) {\n      objets.push(texteParPosition(',', n - dec1 - dec2 - 1 + 0.5, 11, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    objets.push(segment(n, 11.5, n, 11.5 - n * 2)) // on trace le trait vertical\n\n    let i = 0\n    divd.push(dividende.substr(0, m))\n    if (parseInt(divd[0]) < divis) {\n      divd[0] += dividende.substr(m, 1)\n      if (divis / (10 ** dec2) < divis && zeroutile) ecrirequotient(-1, '0')\n      upos++\n    } else if (zeroutile) { ecrirequotient(-1, '0') }\n    while (upos <= n) {\n      Q.push(Number(Math.floor(parseInt(divd[i]) / divis)).toString())\n      R.push(Number(parseInt(divd[i]) % divis).toString())\n      P.push('')\n      if (Q[i] == '0') {\n        for (let z = 0; z < m; z++) {\n          P[i] += '0'\n        }\n      } else {\n        P[i] += Number(parseInt(Q[i]) * divis).toString()\n      }\n      ecriresoustraction(upos, P[i])\n      if (upos < n) {\n        R[i] += dividende.substr(upos, 1)\n        ecrirereste(upos + 1, R[i])\n      } else {\n        ecrirereste(upos, R[i])\n      }\n      //  for (let r=0;r<i;r++){\n      //      if (R[i]==R[r]) periode=i-r\n      //  }\n      divd.push(R[i])\n      upos++\n\n      //  if (periode!=0) {\n      //      ecrirequotient(i,'...')\n      //      break\n      //  }\n      //  else\n      ecrirequotient(i, Q[i])\n      i++\n    }\n    if (precision > 0 && periode == 0) {\n      objets.push(texteParPosition(',', n + 1 + i - dec2 - dec1, 10, 'milieu', 'black', 1.2, 'middle', true))\n    } else if (periode != 0) {\n      objets.push(texteParPosition(',', 2 * n - dec2 - dec1, 10, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    objets.push(segment(n, 10.5, n + m + i, 10.5)) // on trace le trait horizontal\n\n    const code = mathalea2d({ xmin: -1.5, ymin: 10 - 2 * n, xmax: n + m + 10, ymax: 11.5, pixelsParCm: 20, scale: 0.8 }, objets)\n    return code\n  }\n\n  const AdditionPosee3d = function (operande1, operande2) {\n    const dec1 = nombreDeChiffresApresLaVirgule(operande1)\n    const dec2 = nombreDeChiffresApresLaVirgule(operande2)\n    const decalage = Math.max(dec1, dec2)\n    operande1 = calcul(`${operande1}*10^${decalage}`)\n    operande2 = calcul(`${operande2}*10^${decalage}`)\n    let code = ''; const objets = []\n    let sop1 = Number(operande1).toString()\n    let sop2 = Number(operande2).toString()\n\n    let sresultat, resultat, lresultat\n    const lop1 = sop1.length\n    const lop2 = sop2.length\n    const longueuroperandes = Math.max(lop1, lop2)\n    let retenues = ' '\n    if (lop1 > lop2) { // si op1 a plus de chiffres qu'op2 on complète op2 avec des zéros.\n      for (let j = 0; j < lop1 - lop2; j++) {\n        sop2 = ' ' + sop2\n      }\n    } else if (lop2 > lop1) { // on fait pareil pour op1 si c'est op2 le plus 'grand'\n      for (let j = 0; j < lop2 - lop1; j++) {\n        sop1 = ' ' + sop1\n      }\n    }\n    // les deux operande ont le même nomre de chiffres\n    for (let i = longueuroperandes - 1; i > 0; i--) { // on construit la chaine des retenues.\n      if (parseInt(sop1[i]) + parseInt(sop2[i]) > 9) {\n        retenues = `1${retenues}`\n      } else {\n        retenues = ` ${retenues}`\n      }\n    }\n    retenues = ' ' + retenues\n    sop1 = ` ${sop1}`\n    sop2 = `+${sop2}`\n    resultat = operande1 + operande2\n    sresultat = Number(resultat).toString()\n    lresultat = sresultat.length\n    for (let i = 0; i < longueuroperandes + 1 - lresultat; i++) {\n      sresultat = ` ${sresultat}`\n    }\n    for (let i = 0; i < longueuroperandes + 1; i++) {\n      if (sop1[i] != ' ') objets.push(texteParPosition(sop1[i], i * 0.6, 4, 'milieu', 'black', 1.2, 'middle', true))\n      if (sop2[i] != ' ') objets.push(texteParPosition(sop2[i], i * 0.6, 3, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(segment(0, 2, (longueuroperandes + 1) * 0.6, 2))\n      if (retenues[i] != ' ') objets.push(texteParPosition(retenues[i], i * 0.6, 2.5, 'milieu', 'red', 0.8, 'middle', true))\n      if (sresultat[i] != ' ') objets.push(texteParPosition(sresultat[i], i * 0.6, 1, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    if (decalage != 0) {\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 4, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 3, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 1, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    code += mathalea2d({ xmin: -0.5, ymin: 0, xmax: longueuroperandes, ymax: 5, pixelsParCm: 20, scale: 0.8 }, objets)\n    return code\n  }\n\n  const SoustractionPosee3d = function (operande1, operande2) {\n    const dec1 = nombreDeChiffresApresLaVirgule(operande1)\n    const dec2 = nombreDeChiffresApresLaVirgule(operande2)\n    const decalage = Math.max(dec1, dec2)\n    operande1 = calcul(`${operande1}*10^${decalage}`)\n    operande2 = calcul(`${operande2}*10^${decalage}`)\n    let code = ''; let sop1; let sop2; const objets = []\n    if (operande1 < operande2) {\n      sop2 = Number(operande1).toString()\n      sop1 = Number(operande2).toString()\n    } else {\n      sop1 = Number(operande1).toString()\n      sop2 = Number(operande2).toString()\n    }\n    let sresultat, resultat, lresultat\n    const lop1 = sop1.length\n    const lop2 = sop2.length\n    const longueuroperandes = lop1\n    let retenues = '00'\n    if (lop1 > lop2) { // si op1 a plus de chiffres qu'op2 on complète op2 avec des blancs.\n      for (let j = 0; j < lop1 - lop2; j++) {\n        sop2 = ' ' + sop2\n      }\n    }\n\n    // les deux operande ont le même nomre de chiffres\n    for (let i = longueuroperandes - 1; i >= lop1 - lop2; i--) { // on construit la chaine des retenues.\n      if (parseInt(sop1[i]) < (parseInt(sop2[i]) + parseInt(retenues.charAt(0)))) {\n        retenues = `1${retenues}`\n      } else {\n        retenues = `0${retenues}`\n      }\n    }\n    sop1 = ` ${sop1}`\n    sop2 = `-${sop2}`\n    retenues = `0${retenues}`\n    resultat = operande1 - operande2\n    sresultat = Number(resultat).toString()\n    lresultat = sresultat.length\n    for (let i = 0; i < longueuroperandes + 1 - lresultat; i++) {\n      sresultat = ` ${sresultat}`\n    }\n    for (let i = 0; i < longueuroperandes + 1; i++) {\n      if (retenues[i] != '0') objets.push(texteParPosition(retenues[i], i * 0.6 + 0.4, 4.1, 'milieu', 'red', 0.8, 'middle', true))\n      if (sop1[i] != ' ') objets.push(texteParPosition(sop1[i], i * 0.6, 4, 'milieu', 'black', 1.2, 'middle', true))\n      if (sop2[i] != ' ') objets.push(texteParPosition(sop2[i], i * 0.6, 3, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(segment(0, 2, (longueuroperandes + 1) * 0.6, 2))\n      if (retenues[i] != '0') objets.push(texteParPosition(retenues[i], i * 0.6, 2.6, 'milieu', 'blue', 0.8, 'middle', true))\n      if (sresultat[i] != ' ') objets.push(texteParPosition(sresultat[i], i * 0.6, 1, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    if (decalage != 0) {\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 4, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 3, 'milieu', 'black', 1.2, 'middle', true))\n      objets.push(texteParPosition(',', 0.3 + 0.6 * (longueuroperandes - decalage), 1, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    code += mathalea2d({ xmin: -0.5, ymin: 0, xmax: longueuroperandes, ymax: 5, pixelsParCm: 20, scale: 0.8 }, objets)\n    return code\n  }\n  const MultiplicationPosee3d = function (operande1, operande2) {\n    let code; let sop1; let sop2; const objets = []; let dec1; let dec2; let operandex; let lignesinutiles = 0\n\n    const produits = []; let strprod; const sommes = []\n    if (operande1 < operande2) {\n      operandex = operande1\n      operande1 = operande2\n      operande2 = operandex\n    }\n    dec1 = nombreDeChiffresApresLaVirgule(operande1)\n    dec2 = nombreDeChiffresApresLaVirgule(operande2)\n    operande1 = calcul(`${operande1}*10^${dec1}`)\n    operande2 = calcul(`${operande2}*10^${dec2}`)\n    sop1 = Number(operande1).toString()\n    sop2 = Number(operande2).toString()\n    let sresultat, resultat, lresultat\n    const lop1 = sop1.length\n    const lop2 = sop2.length\n    const longueurtotale = lop1 + lop2 + 1\n    const retenues = []\n    for (let i = 0; i < sop2.length; i++) {\n      retenues.push('0')\n      produits.push('')\n      for (let k = 0; k < i; k++) {\n        retenues[i] = `${retenues[i]}0`\n        produits[i] = `${produits[i]}°`\n      }\n      if (sop2[lop2 - i - 1] != '0') {\n        for (let j = 0; j < sop1.length; j++) {\n          strprod = parseInt(sop1[lop1 - j - 1] * parseInt(sop2[lop2 - i - 1])) + parseInt(retenues[i][0])\n          retenues[i] = `${Number(Math.floor(strprod / 10)).toString()}${retenues[i]}`\n          produits[i] = `${Number(strprod % 10).toString()}${produits[i]}`\n        }\n        produits[i] = `${retenues[i][0]}${produits[i]}`\n      } else {\n        for (let j = 0; j < sop1.length; j++) {\n          retenues[i] = `0${retenues[i]}`\n          produits[i] = `°${produits[i]}`\n        }\n      }\n    }\n\n    for (let i = lop2; i < longueurtotale; i++) {\n      sop2 = ` ${sop2}`\n    }\n    for (let i = lop1; i <= longueurtotale; i++) {\n      sop1 = ` ${sop1}`\n    }\n    for (let i = 0; i < lop2; i++) {\n      for (let j = retenues[i].length; j <= longueurtotale; j++) {\n        retenues[i] = `0${retenues[i]}`\n      }\n    }\n    resultat = calcul(`${operande1}*${operande2}`)\n    sresultat = Number(resultat).toString()\n    lresultat = sresultat.length\n    for (let i = 0; i < lop2; i++) {\n      for (let j = produits[i].length; j <= lresultat; j++) {\n        produits[i] = `0${produits[i]}`\n      }\n    }\n    retenues.push('0')\n    for (let i = 0; i < lresultat - 1; i++) {\n      sommes.push(0)\n      sommes[i] += parseInt(retenues[lop2][0])\n      for (let j = 0; j < lop2; j++) {\n        if (produits[j][lresultat - i] != '0' && produits[j][lresultat - i] != '°') {\n          sommes[i] += parseInt(produits[j][lresultat - i])\n        }\n      }\n      retenues[lop2] = `${Number(Math.floor(sommes[i] / 10)).toString()[0]}${retenues[lop2]}`\n    }\n    for (let i = 0; i < lop2; i++) {\n      produits[i] = cacherleszerosdevant(produits[i])\n      for (let j = produits[i].length; j <= longueurtotale; j++) {\n        produits[i] = ` ${produits[i]}`\n      }\n    }\n    sop2 = `×${sop2}`\n    for (let i = lresultat; i <= longueurtotale; i++) {\n      sresultat = ` ${sresultat}`\n    }\n    for (let i = retenues[lop2].length; i <= longueurtotale; i++) {\n      retenues[lop2] = `0${retenues[lop2]}`\n    }\n    for (let i = 0; i <= longueurtotale; i++) {\n      if (sop1[i] != ' ') objets.push(texteParPosition(sop1[i], i * 0.6, 7, 'milieu', 'black', 1.2, 'middle', true))\n      if (sop2[i] != ' ') objets.push(texteParPosition(sop2[i], i * 0.6, 6, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    if (dec1 != 0) { objets.push(texteParPosition(',', 0.3 + (longueurtotale - dec1) * 0.6, 7, 'milieu', 'black', 1.2, 'middle', true)) }\n    if (dec2 != 0) { objets.push(texteParPosition(',', 0.3 + (longueurtotale - dec2) * 0.6, 6, 'milieu', 'black', 1.2, 'middle', true)) }\n\n    for (let j = 0; j < lop2; j++) {\n      if (sop2[longueurtotale - j] != '0') {\n        for (let i = 0; i <= longueurtotale; i++) {\n          if (produits[j][i] != ' ' & produits[j][i] != '°') objets.push(texteParPosition(produits[j][i], i * 0.6, 5 - j + lignesinutiles, 'milieu', 'black', 1.2, 'middle', true))\n          if (retenues[j][i] != '0') objets.push(texteParPosition(retenues[j][i], i * 0.6, 5.5 - j + lignesinutiles, 'milieu', 'blue', 0.7, 'middle', true))\n        }\n      } else { lignesinutiles++ }\n    }\n\n    for (let i = 0; i <= longueurtotale; i++) {\n      if (retenues[lop2][i] != '0') objets.push(texteParPosition(retenues[lop2][i], i * 0.6, 5.5 - lop2 + lignesinutiles, 'milieu', 'red', 0.7, 'middle', true))\n    }\n    objets.push(segment(0, 5.2 - lop2 + lignesinutiles, (longueurtotale + 1) * 0.6, 5.2 - lop2 + lignesinutiles))\n    objets.push(segment(0, 5.7, (longueurtotale + 1) * 0.6, 5.7))\n    for (let i = 0; i <= longueurtotale; i++) {\n      if (sresultat[i] != ' ') objets.push(texteParPosition(sresultat[i], i * 0.6, 4.5 - lop2 + lignesinutiles, 'milieu', 'black', 1.2, 'middle', true))\n    }\n    if (dec1 + dec2 != 0) { objets.push(texteParPosition(',', 0.3 + (longueurtotale - dec2 - dec1) * 0.6, 4.5 - lop2 + lignesinutiles, 'milieu', 'black', 1.2, 'middle', true)) }\n\n    code = mathalea2d({ xmin: -0.5, ymin: 4 - lop2, xmax: longueurtotale + 2, ymax: 8, pixelsParCm: 20, scale: 0.8 }, objets)\n\n    return code\n  }\n\n  switch (type) {\n    case 'addition':\n      if (context.isHtml) { Code = AdditionPosee3d(operande1, operande2) } else { Code = `$\\\\opadd[decimalsepsymbol={,}]{${operande1}}{${operande2}}$` }\n\n      break\n    case 'soustraction':\n      if (context.isHtml) { Code = SoustractionPosee3d(operande1, operande2) } else { Code = `$\\\\opsub[decimalsepsymbol={,}]{${operande1}}{${operande2}}$` }\n      break\n    case 'multiplication':\n      if (context.isHtml) { Code = MultiplicationPosee3d(operande1, operande2) } else { Code = `$\\\\opmul[decimalsepsymbol={,}]{${operande1}}{${operande2}}$` }\n      break\n    case 'division':\n      if (context.isHtml) { Code = DivisionPosee3d(operande1, operande2, precision) } else { Code = `$\\\\opdiv[displayintermediary=all,voperation=top,period,decimalsepsymbol={,},shiftdecimalsep=none]{${operande1}}{${operande2}}$` }\n      break\n    case 'divisionE':\n      if (context.isHtml) { Code = DivisionPosee3d(operande1, operande2, 0) } else { Code = `$\\\\opidiv{${operande1}}{${operande2}}$` }\n      break\n  }\n  return Code\n}\n"],"sourceRoot":""}