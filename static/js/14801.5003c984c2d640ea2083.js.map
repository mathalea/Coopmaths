{"version":3,"file":"js/14801.5003c984c2d640ea2083.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3I1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint } from '../../modules/outils.js'\nexport const titre = 'Instruction conditionelle (scratch)'\n\n/**\n * * Instructions conditionnelles\n * * numéro de l'exo ex : 3Algo1\n * * publié le  24/11/2020\n * @author Erwan Duplessy\n */\nexport default function InstructionConditionelle () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.sup = 1\n  this.nbQuestions = 2\n\n  this.titre = titre\n  this.consigne = 'Donner les coordonnées de la position finale du lutin.'\n  this.typeExercice = 'Scratch'\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.nbQuestionsModifiable = false\n  context.isHtml ? this.spacing = 1 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 1 : this.spacingCorr = 1\n  this.listePackages = 'scratch3'\n  // let typesDeQuestionsDisponibles;\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    function scratchblocksTikz (codeSvg, codeTikz) {\n      if (context.isHtml) {\n        return codeSvg\n      } else {\n        return codeTikz\n      };\n    };\n\n    let texte = \"La position initiale d'un lutin dans un repère est (0,0). Dans le programme, x désigne l'abscisse, et y désigne l'ordonnée d'un lutin. <br>\" // texte de l'énoncé\n    texte += 'Une variable a été créée, elle s\\'appelle <code class=\"b\">(var) :: ring</code>. <br>'\n    let texteCorr = ' ' // texte du corrigé\n    let codeTikz = '' // code pour dessiner les blocs en tikz\n    let codeSvg = '' // code pour dessiner les blocs en svg\n    let xLutin = 0\n    let yLutin = 0\n\n    codeTikz += '\\\\medskip \\\\\\\\ \\\\begin{scratch} <br>'\n    codeSvg += '<pre class=\\'blocks\\'>'\n\n    const n1 = randint(1, 10)\n    const n2 = randint(1, 10)\n    const n3 = randint(1, 10)\n    const n4 = randint(1, 10)\n\n    codeTikz += '\\\\blockmove{aller à x: \\\\ovalnum{0} y: \\\\ovalnum{0}}'\n    codeSvg += 'quand le drapeau vert pressé <br>'\n    codeSvg += 'Aller à x:(0) y:(0) <br>'\n    codeSvg += `mettre (var) à (${n1}) <br>`\n    codeSvg += ` si <(var) < [${n2}]> alors <br>`\n    codeSvg += ' ajouter (100) à x <br>'\n    if (this.sup > 1) {\n      codeSvg += ` si <(var) > [${n3}]> alors <br>`\n      codeSvg += ' ajouter (50) à x <br>'\n      codeSvg += ' fin <br>'\n    }\n    codeSvg += ' sinon <br>'\n    codeSvg += ' ajouter (70) à y <br>'\n    if (this.sup > 2) {\n      codeSvg += ` si <(var) > [${n4}]> alors <br>`\n      codeSvg += ' ajouter (40) à y <br>'\n      codeSvg += ' fin <br>'\n    }\n    codeSvg += ' fin <br>'\n\n    codeSvg += '</pre>'\n    codeTikz += '\\\\end{scratch}'\n\n    texte += scratchblocksTikz(codeSvg, codeTikz)\n\n    if (n1 < n2) {\n      texteCorr += `Comme l'inégalité \"${n1} < ${n2}\" est vraie, alors on ajoute 100 à l'abscisse du lutin. <br>`\n      xLutin += 100\n      if (this.sup > 1) {\n        if (n1 > n3) {\n          texteCorr += `Comme l'inégalité \"${n1} > ${n3}\" est vraie, alors on ajoute 50 à l'abscisse du lutin. <br>`\n          xLutin += 50\n        } else {\n          texteCorr += `Comme l'inégalité \"${n1} > ${n3}\" est fausse, alors on ne change pas l'abscisse du lutin. <br>`\n        }\n      }\n    } else {\n      texteCorr += `Comme l'inégalité \"${n1} < ${n2}\" est fausse, alors on ajoute 70 à l'ordonnée du lutin. <br>`\n      yLutin += 70\n      if (this.sup > 2) {\n        if (n1 > n4) {\n          texteCorr += `Comme l'inégalité \"${n1} > ${n4}\" est vraie, on ajoute 40 à l'ordonnée du lutin. <br>`\n          yLutin += 40\n        } else {\n          texteCorr += `Comme l'inégalité \"${n1} > ${n4}\" est fausse, alors on ne change pas l'ordonnée du lutin. <br>`\n        }\n      }\n    }\n    texteCorr += ` La position finale est donc : (${xLutin} ; ${yLutin}).`\n\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Variante ', 3, '1 : sans condition imbriquée\\n2 : avec une condition imbriquée\\n3 : avec deux conditions imbriquées']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","InstructionConditionelle","Exercice","this","debug","sup","nbQuestions","consigne","typeExercice","nbCols","nbColsCorr","nbQuestionsModifiable","context","spacing","spacingCorr","listePackages","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","codeTikz","codeSvg","xLutin","yLutin","n1","randint","n2","n3","n4","scratchblocksTikz","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}