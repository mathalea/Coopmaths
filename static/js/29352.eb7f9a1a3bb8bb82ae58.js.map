{"version":3,"file":"js/29352.eb7f9a1a3bb8bb82ae58.js","mappings":"sMAIO,MAAMA,EAAQ,oCAON,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,GAChBD,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAKI,KAAM,EACXJ,KAAKK,gBAAkB,EACvBL,KAAKM,MAAQ,GACbN,KAAKO,YAAc,EACnBP,KAAKQ,YAAc,EACnBR,KAAKS,QAAU,EAEfT,KAAKU,gBAAkB,WAGrB,IAAIC,EAAcC,EAAUC,EAAWC,EAAUC,EAAWC,EAAYC,EAAOC,EAAOC,EAAOC,EAAOC,EAFpGrB,KAAKsB,eAAiB,GACtBtB,KAAKuB,iBAAmB,GAC+E,IAAqBC,EAAjBC,EAAS,GAChHC,EAAAA,GAAAA,QACFd,EAAO,IACPC,EAAQ,MAERD,EAAO,UACPC,EAAQ,UAEV,IAAK,IAAWc,EAAOC,EAAWC,EAAzBC,EAAI,EAAwBC,EAAM,EAAGD,EAAI9B,KAAKO,aAAewB,EAAM,IAC1EN,EAAS,GACTV,GAAQiB,EAAAA,EAAAA,KAAQ,GAAI,IACpBH,EAAI,EACJf,EAAOC,GAAQiB,EAAAA,EAAAA,KAAQ,EAAG,GAC1BrB,EAA4B,IAAjBqB,EAAAA,EAAAA,KAAQ,EAAG,IACtBhB,EAASiB,KAAKC,MAAMvB,GAAYsB,KAAKE,IAAIrB,EAAOmB,KAAKG,GAAK,KAAOH,KAAKE,IAAIpB,EAAQkB,KAAKG,GAAK,OAC5FnB,GAAIoB,EAAAA,EAAAA,KAAM,EAAG,EAAG,KAChBnB,GAAImB,EAAAA,EAAAA,KAAM,EAAG,EAAG,KAChBjB,GAAIiB,EAAAA,EAAAA,KAAM,EAAG,EAAG,KAChBlB,GAAIkB,EAAAA,EAAAA,KAAM,GAAI,EAAG,KACjBb,GAAIc,EAAAA,EAAAA,KAAgBrB,EAAGC,EAAGE,EAAGD,GAC7BE,GAAIiB,EAAAA,EAAAA,MAAgBD,EAAAA,EAAAA,KAAM,GAAI,IAAIA,EAAAA,EAAAA,KAAM,IAAK,IAAIA,EAAAA,EAAAA,KAAM,GAAI,IAAIA,EAAAA,EAAAA,KAAM,EAAG,IACxEhB,EAAE,GAAGkB,MAAQ,OACblB,EAAE,GAAGmB,qBAAuB,OAC5BnB,EAAE,GAAGoB,qBAAuB,GAC5BpB,EAAE,GAAGqB,QAAU,GACfjB,EAAOkB,KAAKnB,EAAE,GAAIA,EAAE,GAAIH,EAAE,IAAIuB,EAAAA,EAAAA,KAAQ3B,EAAGG,IAAIyB,EAAAA,EAAAA,KAAiB5B,EAAGC,EAAGE,IACpEK,EAAOkB,MAAKG,EAAAA,EAAAA,KAAmB5B,EAAGD,EAAGG,EAAG,QAAS,EAAI,GAAER,MAASkC,EAAAA,EAAAA,KAAmB5B,EAAGD,EAAGE,EAAG,QAAS,EAAI,GAAEN,MAC3GY,EAAOkB,MAAKI,EAAAA,EAAAA,KAAiB,IAAEC,EAAAA,EAAAA,KAAUrC,OAAeM,EAAGC,EAAG,SAAU,KAAM+B,EAAAA,EAAAA,KAAiB,KAAKC,EAAAA,EAAAA,KAAO9B,EAAGD,GAAGgC,GAAGD,EAAAA,EAAAA,KAAO9B,EAAGD,GAAGiC,EAAI,GAAK,EAAG,QAAS,EAAG,UAAU,IAEnKzB,EAAQ,yDACRA,GAAS,uEACTA,GAAS,yFACTA,GAAS,iJACTA,GAAU,0EAAyEhB,oDACnFgB,GAAU,sEAAqEf,yCAA4CC,UACvHb,KAAKI,MACPuB,GAAU,IAAE0B,EAAAA,EAAAA,KAASxB,8CAA8CjB,UACnEiB,IACAF,GAAU,IAAE0B,EAAAA,EAAAA,KAASxB,8CAA8ChB,UACnEgB,KAEFF,GAAU,IAAE0B,EAAAA,EAAAA,KAASxB,4CAA4CjB,aAAgBC,UACjFgB,IACAF,GAAU,IAAE0B,EAAAA,EAAAA,KAASxB,kEAAkEjB,KAAQG,kBAAsBF,KAASC,kBAC9Ha,IAAS2B,EAAAA,EAAAA,KAAW,CAAEC,MAAO,EAAGC,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,YAAa,GAAIC,MAAO,IAAOnC,GAAU,OACtGI,EAAI,EACJD,GAAY0B,EAAAA,EAAAA,KAAW,CAAEC,MAAO,EAAGC,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,YAAa,GAAIC,MAAO,IAAOnC,GAAU,OACrGzB,KAAKI,MACPwB,GAAc,IAAEyB,EAAAA,EAAAA,KAASxB,2DAA2DjB,gDAAmDA,WACvIiB,IACAD,GAAc,IAAEyB,EAAAA,EAAAA,KAASxB,2DAA2DhB,gDAAoDA,WACxIgB,KAEFD,GAAc,IAAEyB,EAAAA,EAAAA,KAASxB,+BAA+BhB,8BAAkCD,mCAAsCC,YAAgBD,YAChJiB,IACAD,GAAc,IAAEyB,EAAAA,EAAAA,KAASxB,cAAclB,mBAA0BG,YAAeC,eAAmBC,aAEvD,IAAxChB,KAAKsB,eAAeuC,QAAQlC,KAE9B3B,KAAKsB,eAAeqB,KAAKhB,GACzB3B,KAAKuB,iBAAiBoB,KAAKf,GAC3BE,KAEFC,KAEF+B,EAAAA,EAAAA,KAAwB9D,OAE1BA,KAAK+D,4BAA8B,CAAC,wD,gBCxFvB,SAAShE,IAItBC,KAAKH,MAAQ,GACbG,KAAKgE,YAAa,EAclBhE,KAAKC,SAAW,GAChBD,KAAKiE,mBAAqB,GAC1BjE,KAAKkE,aAAe,GACpBlE,KAAKsB,eAAiB,GACtBtB,KAAKuB,iBAAmB,GACxBvB,KAAKmE,QAAU,GACfnE,KAAKoE,kBAAoB,GACzBpE,KAAKqE,eAAiB,GACtBrE,KAAKsE,sBAAwB,GAK7BtE,KAAKS,QAAU,EACfT,KAAKQ,YAAc,EAKnBR,KAAKuE,mBAAoB,EACzBvE,KAAKwE,cAAgB,GACrBxE,KAAKyE,oBAAqB,EAC1BzE,KAAK0E,uBAAwB,EAC7B1E,KAAKE,OAAS,EACdF,KAAKG,WAAa,EAClBH,KAAK2E,kBAAmB,EACxB3E,KAAK4E,sBAAuB,EAC5B5E,KAAK6E,mBAAoB,EACzB7E,KAAK8E,uBAAwB,EAM7B9E,KAAK+E,QAAS,EACd/E,KAAKK,gBAAkB,EAKvBL,KAAKO,YAAc,GACnBP,KAAKgF,mBAAqB,EAC1BhF,KAAKiF,+BAAgC,EACrCjF,KAAKkF,qBAAsB,EAC3BlF,KAAKmF,oBAAqB,EAC1BnF,KAAKM,MAAQ,GAEbN,KAAKoF,YAAa,EAClBpF,KAAKqF,uBAAwB,EAE7BrF,KAAKsF,2BAA4B,EACjCtF,KAAKuF,uBAAwB,EAC7BvF,KAAK+D,6BAA8B,EAEnC/D,KAAKwF,4BAA6B,EAClCxF,KAAKyF,wBAAyB,EAC9BzF,KAAK0F,8BAA+B,EAEpC1F,KAAK2F,4BAA6B,EAClC3F,KAAK4F,wBAAyB,EAC9B5F,KAAK6F,8BAA+B,EAEpC7F,KAAK8F,4BAA6B,EAClC9F,KAAK+F,wBAAyB,EAC9B/F,KAAKgG,8BAA+B,EAMpChG,KAAKiG,cAAe,EASpBjG,KAAKkG,eAAiB,GAMtBlG,KAAKU,gBAAkB,SAAUyF,KAQjCnG,KAAKoG,oBAAsB,SAAUtE,KAAMuE,GAC/B,IAANvE,IAAS9B,KAAKkG,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIzG,KAAKkG,eAAerC,QAAQyC,IAAmB,KAGjDtG,KAAKkG,eAAevD,KAAK2D,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/3e/3G32.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, numAlpha, texNombre } from '../../modules/outils.js'\nimport { texteSurSegment, polygoneAvecNom, afficheMesureAngle, codageAngleDroit, point, segment, texteParPosition, milieu, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Calculer la largeur d’une rivière'\n\n/**\n * Propose de calculer la largeur d'une rivière\n * @author Jean-Claude Lhote\n * Référence 3G32\n*/\nexport default function CalculsTrigonometriques () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.sup = true\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.nbQuestions = 1\n  this.spacingCorr = 2\n  this.spacing = 2\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let distance; let alfa; let baita; let beta; let alpha; let taille; let A; let B; let S; let C; let R; let objets = []; let p\n    if (context.isHtml) {\n      alfa = 'α'\n      baita = 'β'\n    } else {\n      alfa = '\\\\alpha'\n      baita = '\\\\beta'\n    }\n    for (let i = 0, texte, texteCorr, j, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objets = []\n      alpha = randint(25, 65)\n      j = 0\n      beta = alpha + randint(2, 5)\n      distance = randint(7, 15) * 10\n      taille = Math.round(distance * (Math.tan(beta * Math.PI / 180) - Math.tan(alpha * Math.PI / 180)))\n      A = point(0, 7, 'A')\n      B = point(0, 0, 'B')\n      C = point(7, 0, 'C')\n      S = point(12, 0, 'S')\n      p = polygoneAvecNom(A, B, C, S)\n      R = polygoneAvecNom(point(7, -1), point(12, -1), point(12, 8), point(7, 8))\n      R[0].color = 'blue'\n      R[0].couleurDeRemplissage = 'blue'\n      R[0].opaciteDeRemplissage = 0.5\n      R[0].opacite = 0.5\n      objets.push(p[1], p[0], R[0], segment(A, C), codageAngleDroit(A, B, C))\n      objets.push(afficheMesureAngle(B, A, C, 'black', 1, `${alfa}`), afficheMesureAngle(B, A, S, 'black', 2, `${baita}`))\n      objets.push(texteSurSegment(`${texNombre(distance)} m`, A, B, 'black', -0.5), texteParPosition('l', milieu(C, S).x, milieu(C, S).y + 0.5, 0, 'black', 2, 'middle', true))\n\n      texte = 'Un géomètre veut mesurer la largeur d\\'une rivière.<br>'\n      texte += 'Pour cela, il remarque une souche notée $S$ sur la rive opposée.<br>'\n      texte += 'Il a placé un cône sur sa rive en face de la souche, son emplacement est noté $C$.<br>'\n      texte += 'Ensuite il s\\'est éloigné de la berge en restant aligné avec la souche $S$ et le cône $C$ jusqu\\'à un endroit où il place un bâton noté $B$.<br>'\n      texte += `Du bâton, il effectue un quart de tour et s'éloigne d'une distance de $${distance}$ m jusqu'à son appareil de mesure noté $A$.<br>`\n      texte += `À l'aide de son appareil, il mesure l'angle $\\\\widehat{BAC}$ noté $${alfa}$  et l'angle $\\\\widehat{BAS}$ noté $${baita}$.<br>`\n      if (this.sup) {\n        texte += `${numAlpha(j)}Exprimer $BC$ en fonction de $AB$ et de $${alfa}$.<br>`\n        j++\n        texte += `${numAlpha(j)}Exprimer $BS$ en fonction de $AB$ et de $${baita}$.<br>`\n        j++\n      }\n      texte += `${numAlpha(j)}Exprimer $CS$ en fonction de $AB$, de $${alfa}$ et de $${baita}$.<br>`\n      j++\n      texte += `${numAlpha(j)}Calculer la largeur de la rivière au mètre près sachant que $${alfa}=${alpha}\\\\degree$ et $${baita}=${beta}\\\\degree$.<br>`\n      texte += mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n      j = 0\n      texteCorr = mathalea2d({ xmin: -1, ymin: -1, xmax: 14, ymax: 8, pixelsParCm: 20, scale: 0.5 }, objets) + '<br>'\n      if (this.sup) {\n        texteCorr += `${numAlpha(j)}Dans le triangle $ABC$ rectangle en $B$ on a : $\\\\tan(${alfa})=\\\\dfrac{BC}{AB}$ d'où $BC=AB\\\\times \\\\tan(${alfa})$.<br>`\n        j++\n        texteCorr += `${numAlpha(j)}Dans le triangle $ABS$ rectangle en $B$ on a : $\\\\tan(${baita})=\\\\dfrac{BS}{AB}$ d'où $BS=AB\\\\times \\\\tan(${baita})$.<br>`\n        j++\n      }\n      texteCorr += `${numAlpha(j)}Comme $BS=AB\\\\times \\\\tan(${baita})$ et $BC=AB\\\\times \\\\tan(${alfa})$, alors $CS=AB\\\\times (\\\\tan(${baita})-\\\\tan(${alfa}))$.<br>`\n      j++\n      texteCorr += `${numAlpha(j)}Donc $CS=${distance}\\\\times (\\\\tan(${beta})-\\\\tan(${alpha}))\\\\approx ${taille}$ m.<br>`\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Afficher un schéma et des questions intermédiaires']\n}\n\n// python3 list-to-js.py pour faire apparaitre l'exercice dans le menu\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","CalculsTrigonometriques","Exercice","this","consigne","nbCols","nbColsCorr","sup","tailleDiaporama","video","nbQuestions","spacingCorr","spacing","nouvelleVersion","distance","alfa","baita","beta","alpha","taille","A","B","S","C","R","listeQuestions","listeCorrections","p","objets","context","texte","texteCorr","j","i","cpt","randint","Math","round","tan","PI","point","polygoneAvecNom","color","couleurDeRemplissage","opaciteDeRemplissage","opacite","push","segment","codageAngleDroit","afficheMesureAngle","texteSurSegment","texNombre","texteParPosition","milieu","x","y","numAlpha","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","indexOf","listeQuestionsToContenu","besoinFormulaireCaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}