{"version":3,"sources":["webpack://mathalea/./src/js/exercices/5e/5A10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","listeDesDiviseurs_5e","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","typesDeQuestions","listeQuestions","listeCorrections","contenu","contenuCorrection","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","M","randint","cribleEratostheneN","nbre_diviseurs_M","listeDiviseurs","length","m","texteOuPas","w","tableau_de_choix","tableau_de_choix_3chiffres","push","N","rg_N","rg_Nb_3chiffres","Math","trunc","sqrt","indexOf","listeQuestionsToContenu","consigneCorrection","introduction","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/9531.7036ea9f641f969581f7.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,combinaisonListesSansChangerOrdre,listeDiviseurs,cribleEratostheneN,texteOuPas} from '../../modules/outils.js'\n\n\nexport const titre = 'Écrire la liste de tous les diviseurs d’un entier'\n\n/**\n * 5A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano\n */\nexport default function listeDesDiviseurs_5e() {\n\t'use strict';\n\tExercice.call(this); // Héritage de la classe Exercice()\n\tthis.titre = titre;\n\t// pas de différence entre la version html et la version latex pour la consigne\n\t//this.consigne =`Écrire la liste de tous les diviseurs d'un entier.`;\n\tthis.consigne = ``;\n\t//this.consigne += `<br>`;\n\tcontext.isHtml ? this.spacing = 2 : this.spacing = 1;\n\tcontext.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1;\n\tthis.nbQuestions = 3;\n\t//this.correctionDetailleeDisponible = true;\n\tthis.nbCols = 1;\n\tthis.nbColsCorr = 1;\n\n\tthis.nouvelleVersion = function () {\n\t\tlet typesDeQuestions;\n\t\tif (context.isHtml) { // les boutons d'aide uniquement pour la version html\n\t\t\t//this.boutonAide = '';\n\t\t\t//this.boutonAide = modalPdf(numeroExercice,\"assets/pdf/FicheArithmetique-3A10.pdf\",\"Aide mémoire sur la division euclidienne (Sébastien Lozano)\",\"Aide mémoire\")\t\t\n\t\t\t//this.boutonAide += modalVideo('conteMathsNombresPremiers','/videos/LesNombresPremiers.mp4','Petit conte mathématique','Intro Vidéo');\n\t\t} else { // sortie LaTeX\n\t\t};\n\n\t\tthis.listeQuestions = []; // Liste de questions\n\t\tthis.listeCorrections = []; // Liste de questions corrigées\n\t\tthis.contenu = ''; // Liste de questions\n\t\tthis.contenuCorrection = ''; // Liste de questions corrigées\n\n\t\tlet typesDeQuestionsDisponibles = [1, 1, 2];\n\t\t//let typesDeQuestionsDisponibles = [1];\n\t\tlet listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions);\n\n\t\tfor (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n\t\t\ttypesDeQuestions = listeTypeDeQuestions[i];\n\n\t\t\tswitch (typesDeQuestions) {\n\t\t\t\tcase 1: // Compléter un tableau pour trouver la liste de tous les diviseurs d'un entier\n\t\t\t\t\t// on choisit un entier non premier inférieur à 99\n\t\t\t\t\tlet M = randint(2, 99, cribleEratostheneN(99));\n\t\t\t\t\t// on calcule le nombre de diviseur de M pour prévoir le nombre de lignes du tableau\n\t\t\t\t\tlet nbre_diviseurs_M = listeDiviseurs(M).length;\n\n\t\t\t\t\ttexte = `Compléter le tableau suivant et faire la liste de tous les diviseurs de ${M}`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexte += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `<br>`;\n\t\t\t\t\tif (context.isHtml) {\n\t\t\t\t\t\ttexte += `$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexte += `$\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\ttexte += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`;\n\t\t\t\t\ttexte += `\\\\hline\\n`;\n\n\t\t\t\t\tif (nbre_diviseurs_M % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n\t\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[m]) + ` & ` + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[m]) + ` & ` + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexte += texteOuPas(listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2]) + ` & ` + texteOuPas(listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2]) + `& ${texteOuPas(M)} \\\\\\\\\\n`;\n\t\t\t\t\t\ttexte += `\\\\hline\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexte += `\\\\end{array}\\n$`;\n\n\t\t\t\t\t// correction\n\t\t\t\t\ttexteCorr = `Le tableau suivant contient tous les couples de facteurs dont le produit vaut ${M}`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\tif (context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexteCorr += `$\\\\begin{array}{|c|c|c|}\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\ttexteCorr += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`;\n\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\n\t\t\t\t\tif (nbre_diviseurs_M % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[m] + ` & ` + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[m] + ` & ` + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexteCorr += listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2] + ` & ` + listeDiviseurs(M)[(nbre_diviseurs_M - 1) / 2] + `& ${M} \\\\\\\\\\n`;\n\t\t\t\t\t\ttexteCorr += `\\\\hline\\n`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `\\\\end{array}\\n$`;\n\t\t\t\t\tif (!context.isHtml) {\n\t\t\t\t\t\ttexteCorr += `$\\\\medskip$`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `<br>`;\n\t\t\t\t\ttexteCorr += `${M} a donc ${nbre_diviseurs_M} diviseurs qui sont : `;\n\t\t\t\t\ttexteCorr += `1`;\n\t\t\t\t\tfor (let w = 1; w < listeDiviseurs(M).length; w++) {\n\t\t\t\t\t\ttexteCorr += ` ; ` + listeDiviseurs(M)[w];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2: // liste des diviseurs\n\t\t\t\t\t// on définit un tableau pour les choix du nombre dont on veut les diviseurs\n\t\t\t\t\t// 3 parmis 2,99 y compris les premiers et 1 parmis les entiers à 3 chiffres ayant au moins 8 diviseurs, il y en a 223 !\n\t\t\t\t\tlet tableau_de_choix = [];\n\t\t\t\t\ttableau_de_choix = [randint(2, 99), randint(2, 99, [tableau_de_choix[0]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1]]), randint(2, 99, [tableau_de_choix[0], tableau_de_choix[1], tableau_de_choix[2]])];\n\t\t\t\t\tlet tableau_de_choix_3chiffres = [];\n\t\t\t\t\tfor (let m = 101; m < 999; m++) {\n\t\t\t\t\t\tif (listeDiviseurs(m).length > 8) {\n\t\t\t\t\t\t\ttableau_de_choix_3chiffres.push(m);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t// on ajoute un nombre à trois chiffre avec au moins 8 diviseurs dans les choix possibles\n\t\t\t\t\tlet rg_Nb_3chiffres = randint(0, (tableau_de_choix_3chiffres.length - 1));\n\t\t\t\t\ttableau_de_choix.push(tableau_de_choix_3chiffres[rg_Nb_3chiffres]);\n\n\t\t\t\t\tlet N; // on déclare le nombre dont on va chercher les diviseurs\n\t\t\t\t\tlet rg_N; // pour tirer le rang du nombre dans le tableau des choix\n\t\t\t\t\trg_N = randint(0, (tableau_de_choix.length - 1));\n\t\t\t\t\tN = tableau_de_choix[rg_N];\n\t\t\t\t\ttexte = `Écrire la liste de tous les diviseurs de ${N}.`;\n\t\t\t\t\ttexteCorr = `Pour trouver la liste des diviseurs de ${N} on cherche tous les produits de deux facteurs qui donnent ${N}. En écrivant toujours le plus petit facteur en premier.<br>`;\n\t\t\t\t\ttexteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${N}, par exemple ici, ${Math.trunc(Math.sqrt(N))}$\\\\times $${Math.trunc(Math.sqrt(N))} = ${Math.trunc(Math.sqrt(N)) * Math.trunc(Math.sqrt(N))}<${N}`;\n\t\t\t\t\ttexteCorr += ` et ${Math.trunc(Math.sqrt(N)) + 1}$\\\\times $${Math.trunc(Math.sqrt(N)) + 1} = ${(Math.trunc(Math.sqrt(N)) + 1) * (Math.trunc(Math.sqrt(N)) + 1)}>${N} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(N))}.`;\n\t\t\t\t\ttexteCorr += ` En effet, si ${N} est le produit de deux entiers p$\\\\times $q avec p < q alors si p$\\\\times $p > ${N} c'est que q$\\\\times $q < ${N} mais dans ce cas p serait supérieur à q sinon p$\\\\times $q serait inférieur à ${N} ce qui ne doit pas être le cas.<br>`;\n\t\t\t\t\tif (listeDiviseurs(N).length % 2 == 0) { //si il y a un nombre pair de diviseurs\n\t\t\t\t\t\tfor (let m = 0; m < (listeDiviseurs(N).length / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + ` = ${N}<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let m = 0; m < ((listeDiviseurs(N).length - 1) / 2); m++) {\n\t\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[m] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - m - 1)] + `<br>`;\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttexteCorr += `` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + `$\\\\times $` + listeDiviseurs(N)[(listeDiviseurs(N).length - 1) / 2] + ` = ${N}<br>`;\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${N}.<br>`;\n\t\t\t\t\ttexteCorr += `La liste des diviseurs de ${N} est donc `;\n\t\t\t\t\ttexteCorr += `1`;\n\t\t\t\t\tfor (let w = 1; w < listeDiviseurs(N).length; w++) {\n\t\t\t\t\t\ttexteCorr += ` ; ` + listeDiviseurs(N)[w];\n\t\t\t\t\t};\n\t\t\t\t\ttexteCorr += `.`;\n\t\t\t\t\tbreak;\n\t\t\t};\n\n\t\t\tif (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n\t\t\t\tthis.listeQuestions.push(texte);\n\t\t\t\tthis.listeCorrections.push(texteCorr);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcpt++;\n\t\t}\n\n\t\tlisteQuestionsToContenu(this);\n\t};\n\t//this.besoinFormulaireNumerique = ['Règle à travailler',5,\"1 : Produit de deux puissances de même base\\n2 : Quotient de deux puissances de même base\\n3 : Puissance de puissance\\n4 : Produit de puissances de même exposant\\n5 : Mélange\"]; \n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}