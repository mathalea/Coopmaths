{"version":3,"file":"js/82434.e55ec94beca2a2d8b975.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/PE/PEA11.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, choice, combinaisonListes, texNombre, miseEnEvidence } from '../../modules/outils.js'\nexport const titre = 'Passer de la base dix à une autre base et inversement'\n\n/**\n* Passer d'une écriture en base 10 à l'écriture dans une autre base ou inversement\n* référence PEA11\n* * Convertir en base 10\n* * Convertir vers une base entre 2 et 7\n* * Trouver le plus grand nombre à 3 ou 4 chiffres d'une base ainsi que son successeur et le convertir en base 10 ou le plus petit et son prédecesseur\n*\n* @author Rémi Angot\n*/\nexport default function PasserDUneBaseA1Autre () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = ['vers_base_10', choice(['vers_base_n_3_chiffres', 'vers_base_n_4_chiffres']), choice(['plus_grand_4_chiffres', 'plus_grand_3_chiffres', 'plus_petit_4_chiffres', 'plus_petit_3_chiffres'])]\n    if (this.nbQuestions > 3) {\n      typesDeQuestionsDisponibles = ['vers_base_10', 'vers_base_n_3_chiffres', 'vers_base_n_4_chiffres', 'plus_grand_4_chiffres', 'plus_grand_3_chiffres', 'plus_petit_4_chiffres', 'plus_petit_3_chiffres']\n    }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, b, n, m, chiffre1, chiffre2, chiffre3, chiffre4, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      b = randint(2, 7)\n      switch (listeTypeDeQuestions[i]) {\n        case 'vers_base_10':\n          n = randint(1, b - 1) * 10 + randint(0, b - 1)\n          m = randint(1, b - 1) * 1000 + randint(0, b - 1) * 100 + randint(0, b - 1) * 10 + randint(0, b - 1)\n          texte = `Les nombres $(${n})_${b}$ et $(${m})_${b}$ sont écrits en base ${b}. Exprimer leur écriture en base dix.`\n          texteCorr = `$(${n})_${b}=${n.toString()[0]}\\\\times${b}+${n.toString()[1]}=${parseInt(n, b)}$`\n          texteCorr += `<br>$(${m})_${b}=${m.toString()[0]}\\\\times${b}^3+${m.toString()[1]}\\\\times${b}^2+${m.toString()[2]}\\\\times${b}+${m.toString()[3]}=${parseInt(m, b)}$`\n          break\n        case 'vers_base_n_3_chiffres':\n          chiffre1 = randint(1, b - 1)\n          chiffre2 = randint(0, b - 1)\n          chiffre3 = randint(0, b - 1)\n          n = chiffre1 * b ** 2 + chiffre2 * b + chiffre3\n          texte = `Écrire en base ${b} le nombre dont l'écriture décimale est ${n}.`\n          texteCorr = `$${n}=${b}\\\\times${Math.floor(n / b)}+${miseEnEvidence(n % b)}$`\n          texteCorr += `<br>$${Math.floor(n / b)}=${b}\\\\times${miseEnEvidence(chiffre1)}+${miseEnEvidence(chiffre2)}$`\n          texteCorr += `<br> Finalement $${n}=(${chiffre1}${chiffre2}${chiffre3})_${b}$`\n          break\n        case 'vers_base_n_4_chiffres':\n          chiffre1 = randint(1, b - 1)\n          chiffre2 = randint(0, b - 1)\n          chiffre3 = randint(0, b - 1)\n          chiffre4 = randint(0, b - 1)\n          n = chiffre1 * b ** 3 + chiffre2 * b ** 2 + chiffre3 * b + chiffre4\n          texte = `Écrire en base ${b} le nombre dont l'écriture décimale est ${n}.`\n          texteCorr = `$${n}=${b}\\\\times${Math.floor(n / b)}+${miseEnEvidence(n % b)}$`\n          texteCorr += `<br>$${Math.floor(n / b)}=${b}\\\\times${Math.floor(Math.floor(n / b) / b)}+${miseEnEvidence(Math.floor(n / b) % b)}$`\n          texteCorr += `<br>$${Math.floor(Math.floor(n / b) / b)}=${b}\\\\times${miseEnEvidence(chiffre1)}+${miseEnEvidence(chiffre2)}$`\n          texteCorr += `<br> Finalement $${n}=(${chiffre1}${chiffre2}${chiffre3}${chiffre4})_${b}$`\n          break\n        case 'plus_grand_4_chiffres':\n          texte = `Quel est le plus grand nombre à 4 chiffres que l'on peut écrire en base ${b} ?`\n          texte += `<br>Comment s'écrit son successeur immédiat en base ${b} ? En déduire l'écriture en base dix de ces 2 nombres.`\n          texteCorr = `En base ${b} les chiffres sont 0`\n          for (let i = 1; i < b; i++) {\n            texteCorr += `, ${i}`\n          }\n          texteCorr += ` donc le plus grand nombre à 4 chiffres est $(${b - 1}${b - 1}${b - 1}${b - 1})_${b}$ et son successeur immédiat est $(10000)_${b}$.`\n          texteCorr += `<br> $(10000)_${b}=1\\\\times${b}^4=${texNombre(b ** 4)}$ donc $(${b - 1}${b - 1}${b - 1}${b - 1})_${b}=${b ** 4}-1=${texNombre(b ** 4 - 1)}$.`\n          break\n        case 'plus_grand_3_chiffres':\n          texte = `Quel est le plus grand nombre à 3 chiffres que l'on peut écrire en base ${b} ?`\n          texte += `<br>Comment s'écrit son successeur immédiat en base ${b} ? En déduire l'écriture en base dix de ces 2 nombres.`\n          texteCorr = `En base ${b} les chiffres sont 0`\n          for (let i = 1; i < b; i++) {\n            texteCorr += `, ${i}`\n          }\n          texteCorr += ` donc le plus grand nombre à 3 chiffres est $(${b - 1}${b - 1}${b - 1})_${b}$ et son successeur immédiat est $(1000)_${b}$.`\n          texteCorr += `<br> $(1000)_${b}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(${b - 1}${b - 1}${b - 1})_${b}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          break\n        case 'plus_petit_4_chiffres':\n          texte = `Quel est le plus petit nombre à 4 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son prédécesseur immédiat en base ${b} ? En déduire l'écriture en base dix de ces 2 nombres.`\n          texteCorr = `En base ${b} les chiffres sont 0`\n          for (let i = 1; i < b; i++) {\n            texteCorr += `, ${i}`\n          }\n          texteCorr += ` donc le plus petit nombre à 4 chiffres est $(1000)_${b}$ et son prédécesseur immédiat est $(${b - 1}${b - 1}${b - 1})_${b}$.`\n          texteCorr += `<br> $(1000)_${b}=1\\\\times${b}^3=${texNombre(b ** 3)}$ donc $(${b - 1}${b - 1}${b - 1})_${b}=${b ** 3}-1=${texNombre(b ** 3 - 1)}$.`\n          break\n        case 'plus_petit_3_chiffres':\n          texte = `Quel est le plus petit nombre à 3 chiffres que l'on peut écrire en base ${b}.`\n          texte += `<br>Comment s'écrit son prédécesseur immédiat en base ${b} ? En déduire l'écriture en base dix de ces 2 nombres.`\n          texteCorr = `En base ${b} les chiffres sont 0`\n          for (let i = 1; i < b; i++) {\n            texteCorr += `, ${i}`\n          }\n          texteCorr += ` donc le plus petit nombre à 3 chiffres est $(100)_${b}$ et son prédécesseur immédiat est $(${b - 1}${b - 1})_${b}$.`\n          texteCorr += `<br> $(100)_${b}=1\\\\times${b}^2=${texNombre(b ** 2)}$ donc $(${b - 1}${b - 1})_${b}=${b ** 2}-1=${texNombre(b ** 2 - 1)}$.`\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","PasserDUneBaseA1Autre","context","typesDeQuestionsDisponibles","choice","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","b","n","m","chiffre1","chiffre2","chiffre3","chiffre4","cpt","randint","parseInt","Math","floor","miseEnEvidence","texNombre","listeQuestionsToContenu"],"sourceRoot":""}