{"version":3,"file":"js/65434.bd717ae42afecfda6f2f.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5A12-1.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleurEtGras, modalPdf, modalVideo, cribleEratostheneN, warnMessage } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\n\nexport const titre = 'Primalité ou pas'\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const amcReady = true\nexport const amcType = 'qcmMono'\n\n/**\n * Justifier la non primalité réinvestissement des critères de divisibilité\n * Nombres à 3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 9, de 10, sous forme d'un produit de deux nombres premiers inférieurs à 30\n * et un nombre premier inferieur à 529\n * 5A12-1\n * @author Sébastien Lozano\n */\nexport default function PremierOuPas5e () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Justifier que les nombres suivants sont premiers ou pas.'\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 7\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.listePackages = 'bclogo'\n\n  this.nouvelleVersion = function (numeroExercice) {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(numeroExercice, 'assets/pdf/FicheArithmetique-5A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'https://coopmaths.fr/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6, 7]\n    typesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles) // on mélange l'ordre des questions\n\n    // let typesDeQuestionsDisponibles = [1];\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    let stringRappel = 'Cette liste des nombres premiers inférieurs à 30 pourra être utile : <br>' + cribleEratostheneN(100)[0]\n    for (let k = 1; k < cribleEratostheneN(30).length; k++) {\n      stringRappel += ', ' + cribleEratostheneN(30)[k]\n    };\n    stringRappel += '.'\n    this.introduction = warnMessage(stringRappel, 'nombres', 'Coup de pouce')\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      let N // le nombre de la question\n      let bonneReponse\n      switch (typesDeQuestions) {\n        case 1: // nombre pair\n          N = 2 * randint(51, 4999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme ${nombreAvecEspace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 2: { // Multiple de 3\n          let sum3 = 0 // pour la valeur de la somme;\n          N = 3 * randint(34, 3333) // on initialise avant la boucle car on a peut être de la chance\n          while ((N % 2 === 0) || (N % 5 === 0)) {\n            N = 3 * randint(34, 3333)\n          };\n          texte = nombreAvecEspace(N)\n          texteCorr = 'Comme ' + N.toString().charAt(0)\n          sum3 = Number(N.toString().charAt(0))\n          for (let k = 1; k < N.toString().length; k++) {\n            texteCorr += ' + ' + N.toString().charAt(k)\n            sum3 += Number(N.toString().charAt(k))\n          };\n          texteCorr += ` = ${sum3} est un multiple de 3 donc ${nombreAvecEspace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        }\n        case 3: // Multiple de 5\n          N = 5 * randint(20, 1999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme le dernier chiffre de ${nombreAvecEspace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombreAvecEspace(N)} est divisible par 5, `\n          texteCorr += 'il admet donc au moins trois diviseurs qui sont 1, 5 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 4: { // Multiple de 9\n          let sum9 = 0 // pour la valeur de la somme;\n          N = 9 * randint(12, 1111) // on initialise avant la boucle car on a peut être de la chance\n          while ((N % 2 === 0) || (N % 5 === 0)) {\n            N = 9 * randint(34, 3333)\n          };\n          texte = nombreAvecEspace(N)\n          texteCorr = 'Comme ' + N.toString().charAt(0)\n          sum9 = Number(N.toString().charAt(0))\n          for (let k = 1; k < N.toString().length; k++) {\n            texteCorr += ' + ' + N.toString().charAt(k)\n            sum9 += Number(N.toString().charAt(k))\n          };\n          texteCorr += ` = ${sum9} est un multiple de 9 donc ${nombreAvecEspace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 9 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        }\n        case 5: // multiple de 10\n          N = 10 * randint(10, 999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme le nombre ${nombreAvecEspace(N)} se termine par un ${N.toString().charAt(N.toString().length - 1)} alors ${nombreAvecEspace(N)} est un multiple de 10, `\n          texteCorr += 'il admet donc au moins trois diviseurs qui sont 1, 10 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 6: { // produit de deux nombres premiers inférieurs à 30\n          // rang du premier facteur premier\n          const r1 = randint(0, cribleEratostheneN(30).length - 1)\n          // rang du second facteur premier\n          const r2 = randint(0, cribleEratostheneN(30).length - 1)\n          const prime1 = cribleEratostheneN(100)[r1] // on tire un nombre premier inférieur à 100, il n'y en a que 25!\n          const prime2 = cribleEratostheneN(100)[r2] // on tire un autre nombre premier inférieur à 100, ça peut être le même qu'avant!\n          N = prime1 + '$\\\\times $' + prime2\n          texte = N\n          texteCorr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `\n          if (prime1 === prime2) {\n            texteCorr += `trois divisieurs qui sont 1, ${prime1} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)} `\n          } else {\n            texteCorr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          };\n          texteCorr += texteEnCouleurEtGras(`${N} = ` + nombreAvecEspace(prime1 * prime2) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        }\n        case 7: { // nombre premier inférieur à 29\n          // rang du nombre premier choisi\n          const r = randint(0, cribleEratostheneN(29).length - 1)\n          N = cribleEratostheneN(29)[r] // on choisit un nombre premier inférieur à 29\n          const prems = cribleEratostheneN(29)\n          const tabPremiersATester = []\n          let rg = 0\n          while (prems[rg] ** 2 < N) {\n            tabPremiersATester.push(prems[rg])\n            rg++\n          }\n          let stringNbCorr1 = ''\n          if (tabPremiersATester.length === 1) {\n            stringNbCorr1 = 'le nombre'\n          } else {\n            stringNbCorr1 = 'les nombres'\n          }\n\n          const tabPremiersToTest = cribleEratostheneN(N)\n          let stringNbCorr2 = ''\n          if (tabPremiersToTest.length === 1) {\n            stringNbCorr2 = 'le nombre'\n          } else {\n            stringNbCorr2 = 'les nombres'\n          }\n\n          texte = N + ''\n          texteCorr = '<b>Proposition de deux corrections valables :</b> <br>'\n          texteCorr += '<b>Proposition de correction 1 :</b> <br>'\n          texteCorr += `En effectuant la division euclidienne de ${N} par tous les nombres premiers dont le carré est inférieur à $${N}$, c'est-à-dire par ${stringNbCorr1} `\n          texteCorr += tabPremiersATester[0]\n          for (let k = 1; k < tabPremiersATester.length; k++) {\n            texteCorr += ', ' + tabPremiersATester[k]\n          };\n          texteCorr += ', le reste n\\'est jamais nul.'\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          texteCorr += '<hr>'\n          texteCorr += '<b>Proposition de correction 2 :</b> <br>'\n          texteCorr += `En effectuant la division euclidienne de ${N} par tous les nombres premiers inférieurs à $${N}$, c'est-à-dire par ${stringNbCorr2} `\n          texteCorr += tabPremiersToTest[0]\n          for (let k = 1; k < tabPremiersToTest.length - 1; k++) {\n            texteCorr += ', ' + tabPremiersToTest[k]\n          };\n          texteCorr += ', le reste n\\'est jamais nul.'\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          bonneReponse = 'oui'\n          break\n        }\n      };\n      if (this.interactif || context.isAmc) {\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].options = { ordered: true }\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: 'est premier',\n            statut: bonneReponse !== 'non'\n          },\n          {\n            texte: 'n\\'est pas premier',\n            statut: bonneReponse !== 'oui'\n          }\n        ]\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","PremierOuPas5e","Exercice","this","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","sup","listePackages","nouvelleVersion","numeroExercice","typesDeQuestions","boutonAide","modalPdf","modalVideo","listeQuestions","listeCorrections","autoCorrection","contenu","contenuCorrection","typesDeQuestionsDisponibles","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","stringRappel","cribleEratostheneN","k","length","introduction","warnMessage","texte","texteCorr","i","cpt","N","bonneReponse","randint","nombreAvecEspace","texteEnCouleurEtGras","sum3","toString","charAt","Number","sum9","r1","r2","prime1","prime2","r","prems","tabPremiersATester","rg","push","stringNbCorr1","tabPremiersToTest","stringNbCorr2","interactif","options","ordered","enonce","propositions","statut","propositionsQcm","indexOf","listeQuestionsToContenu","consigneCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}