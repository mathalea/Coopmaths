{"version":3,"file":"js/63241.574dc20a595a1e35e340.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A14.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListesSansChangerOrdre, randint, texteEnCouleurEtGras, listeDesDiviseurs, sp, numAlpha } from '../../modules/outils.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Problème Les iris et les roses'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Description didactique de l'exercice\n * 3 problèmes : Trouver le nombre maximal de groupes, de bouquets ou de corbeilles\n * en cherchant le plus grand diviseur commun de deux nombres.\n * Donner ensuite la composition de chaque groupe, bouquet ou corbeille.\n * @author Laurence Candille et Jean-Claude Lhote (pour l'export AMC)\n * Référence 3A14\n * Date août 2021\n*/\nexport default function NomQuelconqueDeLaFonctionQuiCreeExercice () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestionsModifiable = true\n  this.nbQuestions = 3\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.interactif = true\n  this.interactifType = 'mathLive'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    let QuestionsDisponibles = [] // 3 problèmes différents\n    let listeQuestions = []\n\n    if (!this.sup) { // Si aucune liste n'est saisie\n      QuestionsDisponibles = [1, 2, 3]\n    } else {\n      if (typeof (this.sup) === 'number') { // Si c'est un nombre c'est qu'il y a qu'un problème\n        QuestionsDisponibles[0] = this.sup\n      } else {\n        QuestionsDisponibles = this.sup.split('-')// Sinon on créé un tableau à partir des valeurs séparées par des -\n        this.nbQuestions = QuestionsDisponibles.length\n        for (let i = 0; i < QuestionsDisponibles.length; i++) { // on a un tableau avec des strings : ['1', '1', '2']\n          QuestionsDisponibles[i] = parseInt(QuestionsDisponibles[i]) // parseInt en fait un tableau d'entiers\n        }\n      }\n    }\n\n    listeQuestions = combinaisonListesSansChangerOrdre(QuestionsDisponibles, this.nbQuestions)\n    const nombrePremier = [2, 3, 5, 7, 11]\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      const objet = randint(30, 39) // objet représente : le nombre max de bouquets, de corbeilles ou de groupes\n      const a = randint(0, 4)\n      const var1 = nombrePremier[a] // var 1 est le nbre d iris, de croissants ou de garçons\n      const b = randint(0, 4, [a])\n      const var2 = nombrePremier[b] // var 2 est le nbre de roses, de brioches ou de filles\n      switch (listeQuestions[i]) {\n        case 1:\n          if (this.interactif && !context.isAmc) {\n            texte = `Un fleuriste dispose de ${var1 * objet} iris et de ${var2 * objet} roses. <br>`\n            texte += 'Il veut, en utilisant toutes ses fleurs, réaliser un maximum de bouquets '\n            texte += 'contenant tous le même nombre d’iris et le même nombre de roses. <br>'\n            texte += 'Donner le nombre maximal de bouquets que le fleuriste peut réaliser '\n            texte += 'et la composition du bouquet.<br><br>'\n            texte += numAlpha(0) + `Nombre maximal de bouquets :${sp(20)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i, 'inline largeur25') + '<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)}- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de bouquets est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n            setReponse(this, 3 * i, objet)\n\n            texte += numAlpha(1) + `Nombre d’iris dans chaque bouquet :${sp(8)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i + 1, 'inline largeur25') + '<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre d’iris dans chaque bouquet est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n            setReponse(this, 3 * i + 1, var1)\n\n            texte += numAlpha(2) + ' Nombre de roses dans chaque bouquet :'\n            texte += ajouteChampTexteMathLive(this, 3 * i + 2, 'inline largeur25') + '<br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de roses dans chaque bouquet est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n            setReponse(this, 3 * i + 2, var2)\n          } else {\n            texte = `Un fleuriste dispose de ${var1 * objet} iris et de ${var2 * objet} roses. <br>`\n            texte += 'Il veut, en utilisant toutes ses fleurs, réaliser un maximum de bouquets '\n            texte += 'contenant tous le même nombre d’iris et le même nombre de roses. <br><br>'\n            texte += numAlpha(0) + 'Quel est le nombre maximal de bouquets ?<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)}- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de bouquets est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n\n            texte += numAlpha(1) + 'Quel est le nombre d’iris dans chaque bouquet ?<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre d’iris dans chaque bouquet est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n\n            texte += numAlpha(2) + ' Quel est le nombre de roses dans chaque bouquet ?<br><br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de roses dans chaque bouquet est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n          }\n          break\n        case 2:\n          if (this.interactif && !context.isAmc) {\n            texte = `Un professeur organise une sortie pédagogique au Futuroscope pour ses élèves de 3ème. Il est accompagné de ${var1 * objet} garçons et de ${var2 * objet} filles. <br>`\n            texte += 'Il souhaite répartir tous les élèves en réalisant un maximum de groupes '\n            texte += 'contenant tous le même nombre de garçons et le même nombre de filles. <br>'\n            texte += 'Donner le nombre maximal de groupes que le professeurs peut réaliser '\n            texte += 'et la composition de chaque groupe.<br><br>'\n            texte += numAlpha(0) + `Nombre maximal de groupes :${sp(26)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i, 'inline largeur25') + '<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)}- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de groupes est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n            setReponse(this, 3 * i, objet)\n\n            texte += numAlpha(1) + 'Nombre de garçons dans chaque groupe :'\n            texte += ajouteChampTexteMathLive(this, 3 * i + 1, 'inline largeur25') + '<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre de garçons dans chaque groupe est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n            setReponse(this, 3 * i + 1, var1)\n\n            texte += numAlpha(2) + ` Nombre de filles dans chaque groupe :${sp(6)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i + 2, 'inline largeur25') + '<br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de filles dans chaque groupe est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n            setReponse(this, 3 * i + 2, var2)\n          } else {\n            texte = `Un professeur organise une sortie pédagogique au Futuroscope pour ses élèves de 3ème. Il est accompagné de ${var1 * objet} garçons et de ${var2 * objet} filles. <br>`\n            texte += 'Il souhaite répartir tous les élèves en réalisant un maximum de groupes '\n            texte += 'contenant tous le même nombre de garçons et le même nombre de filles. <br><br>'\n            texte += numAlpha(0) + 'Quel est le nombre maximal de groupes ?<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)}- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de groupes est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n\n            texte += numAlpha(1) + 'Quel est le nombre de garçons dans chaque groupe ?<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre de garçons dans chaque groupe est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n\n            texte += numAlpha(2) + ' Quel est le nombre de filles dans chaque groupe ?<br><br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de filles dans chaque groupe est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n          }\n          break\n        default: // si un utilisateur saisit 4 ou une valeur erronnée renvoie par défaut vers le prbme 3\n          if (this.interactif && !context.isAmc) {\n            texte = `Un boulanger dispose de ${var1 * objet} croissants et de ${var2 * objet} brioches. <br>`\n            texte += 'Il veut, en utilisant toutes ses viennoiseries, réaliser un maximum de corbeilles '\n            texte += 'contenant toutes le même nombre de croissants et le même nombre de brioches. <br>'\n            texte += 'Donner le nombre maximal de corbeilles que le boulanger peut réaliser '\n            texte += 'et la composition de chaque corbeille.<br><br>'\n            texte += numAlpha(0) + 'Nombre maximal de corbeilles :' + `${sp(30)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i, 'inline largeur25') + '<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)};- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de corbeilles est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n            setReponse(this, 3 * i, objet)\n\n            texte += numAlpha(1) + 'Nombre de croissants dans chaque corbeille :'\n            texte += ajouteChampTexteMathLive(this, 3 * i + 1, 'inline largeur25') + '<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre de croissants dans chaque corbeille est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n            setReponse(this, 3 * i + 1, var1)\n\n            texte += numAlpha(2) + ` Nombre de brioches dans chaque corbeille :${sp(2)}`\n            texte += ajouteChampTexteMathLive(this, 3 * i + 2, 'inline largeur25') + '<br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de brioches dans chaque corbeille est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n            setReponse(this, 3 * i + 2, var2)\n          } else {\n            texte = `Un boulanger dispose de ${var1 * objet} croissants et de ${var2 * objet} brioches. <br>`\n            texte += 'Il veut, en utilisant toutes ses viennoiseries, réaliser un maximum de corbeilles '\n            texte += 'contenant toutes le même nombre de croissants et le même nombre de brioches. <br>'\n            texte += numAlpha(0) + 'Quel est le nombre maximal de corbeilles ?<br><br>'\n            texteCorr = numAlpha(0)\n            texteCorr += `- Les diviseurs de ${var1 * objet} sont : ${listeDesDiviseurs(var1 * objet).join(', ')}.<br>`\n            texteCorr += `${sp(2)}- Les diviseurs de ${var2 * objet} sont : ${listeDesDiviseurs(var2 * objet).join(', ')}.<br>`\n            texteCorr += `${objet} est le plus grand nombre qui divise à la fois ${var1 * objet} et ${var2 * objet} <br>`\n            texteCorr += ' Le nombre maximal de corbeilles est donc : ' + texteEnCouleurEtGras(`${objet}<br><br>`)\n\n            texte += numAlpha(1) + 'Quel est le nombre de croissants dans chaque corbeille ?<br><br>'\n            texteCorr += numAlpha(1) + ` $${var1 * objet} \\\\div ${objet} = ${var1}$.<br>`\n            texteCorr += 'Le nombre de croissants dans chaque corbeille est :' + texteEnCouleurEtGras(` ${var1} <br><br>`)\n\n            texte += numAlpha(2) + ' Quel est le nombre de brioches dans chaque corbeille ?<br><br>'\n            texteCorr += numAlpha(2) + ` $${var2 * objet} \\\\div ${objet} = ${var2}$.<br>`\n            texteCorr += 'Le nombre de brioches dans chaque corbeille est :' + texteEnCouleurEtGras(` ${var2} <br>`)\n          }\n          break\n      } // fin du switch\n      if (this.questionJamaisPosee(i, var1, var2, objet)) {\n        if (context.isAmc) {\n          this.autoCorrection[i] = {\n            enonce: texte,\n            propositions: [\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: texteCorr,\n                  statut: '',\n                  reponse: {\n                    texte: 'a) ',\n                    valeur: objet,\n                    param: {\n                      digits: 2,\n                      decimals: 0,\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: '',\n                  statut: '',\n                  reponse: {\n                    texte: 'b) ',\n                    valeur: var1,\n                    param: {\n                      digits: 2,\n                      decimals: 0,\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              },\n              {\n                type: 'AMCNum',\n                propositions: [{\n                  texte: '',\n                  statut: '',\n                  reponse: {\n                    texte: 'c) ',\n                    valeur: var2,\n                    param: {\n                      digits: 2,\n                      decimals: 0,\n                      signe: false,\n                      approx: 0\n                    }\n                  }\n                }]\n              }\n            ]\n          }\n        }\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    } // fin du for\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Choix des expressions', 'Nombres séparés par des tirets\\n 1 : Fleuriste\\n2 : Boulanger\\n3 : Professeur\\n']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","NomQuelconqueDeLaFonctionQuiCreeExercice","Exercice","this","consigne","nbQuestionsModifiable","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","interactif","nouvelleVersion","listeQuestions","listeCorrections","QuestionsDisponibles","split","length","i","parseInt","combinaisonListesSansChangerOrdre","nombrePremier","texte","texteCorr","cpt","objet","randint","a","var1","var2","context","numAlpha","sp","ajouteChampTexteMathLive","listeDesDiviseurs","join","texteEnCouleurEtGras","setReponse","questionJamaisPosee","autoCorrection","enonce","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","push","listeQuestionsToContenu","besoinFormulaireTexte","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","correctionDetailleeDisponible","correctionDetaillee","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}