{"version":3,"file":"js/85779.087f550cd0b15bbcc08f.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3G23.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable prefer-const */\n/* eslint-disable no-case-declarations */\nimport Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, choice, shuffle, texteEnCouleur, texteGras } from '../../modules/outils.js'\nimport { point, tracePoint, milieu, pointSurSegment, pointIntersectionDD, labelPoint, barycentre, droite, vecteur, segment, polygone, nommePolygone, aireTriangle, arc, rotation, translationAnimee, rotationAnimee, codeSegments, grille, angleOriente, mathalea2d } from '../../modules/2d.js'\nexport const titre = 'Reconnaître des triangles égaux dans différentes configurations'\n\n/**\n * 3G23 reconnaitre des triangles égaux\n * @author Jean-Claude Lhote et Sébastien Lozano\n */\nexport default function TrianglesEgaux () {\n  Exercice.call(this)\n  this.debug = false\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let texte = ''\n    let texteCorr = ''\n    const typesDeQuestions = randint(1, 1)\n    switch (typesDeQuestions) {\n      case 1:\n        let trouve = false; let aireABC; let A; let B; let C; let M; let p; let q; let r; let s; let X; let G; let Gq; let nom1; let grid\n        // on génère le triangle ABC avec une contrainte sur son aire\n        while (!trouve) {\n          A = point(choice([0, 3]), choice([0, 3]), 'A') // le point A !\n          B = point(choice([6, 9]), choice([6, 9]), 'B') // le point B !\n          C = rotation(B, A, 90, 'C') // le point C à partir de B par rotation autour de A!\n          C.x += choice([0, 3, 6]) // on décale l'abscise de C de 0, 3 ou 6 !\n          C.y += choice([-3, 0, 3]) // on décale l'abscise de C de -3, 0 ou 3 !\n          p = polygone(A, B, C) // on trace le polygone ABC\n          aireABC = aireTriangle(p) // Je savais bien que cette formule servirait un jour !\n          if (aireABC < 11 && aireABC > 5) { trouve = true }\n        };\n        G = barycentre(p) // le barycentre de ABC\n        const angleChoisi1 = choice([0, 90, 270])\n        p = rotation(p, G, angleChoisi1) // on tourne ABC de façon aléatoire autour de son barycentre\n        p.couleurDeRemplissage = 'gray' // remplissage de ABC\n        p.opaciteDeRemplissage = 0.2 // 0.5;//remplissage de ABC\n        nom1 = nommePolygone(p, 'ABC', 0.4) // on  nomme ABC en plaçant A,B et C à 0,4\n        grid = grille(-3, -3, 27, 18, 'gray', 0.4, 1) // on trace une grille\n        M = point(9, 12) // un point M fixe pour tourner autour\n        q = rotation(p, M, 90) // on fait tourner ABC autour de M de 90°\n\n        // on a besoin de récupérer le polygone non tracé\n        Gq = barycentre(q) // on construit son barycentre\n\n        // let angleChoisi2 = 270;\n        const angleChoisi2 = choice([0, 90, 180, 270])\n        r = rotation(q, Gq, angleChoisi2) // on fait tourner q encore autour de son barycentre\n        X = milieu(r.listePoints[0], r.listePoints[1]) // on place le milieu des deux premiers points de la figure obtenue qui sont les images des points A et B initiaux\n        s = rotation(r, X, 180) // on fait topurner r autour du milieu des deux extremites du plus grand côté\n        r.couleurDeRemplissage = 'red' // solution 1 en rouge\n        r.opaciteDeRemplissage = 0.2 // 0.5; //\n        s.couleurDeRemplissage = 'blue' // solution 2 en bleu\n        s.opaciteDeRemplissage = 0.2 // 0.5; //\n\n        // mes ajouts par rapport à la figure de JC\n        // on fixe une place pour D et E\n        const D = r.listePoints[0]\n        D.nom = 'D'\n        const E = r.listePoints[1]\n        E.nom = 'E'\n        // on crée un tableau avec les noms proposé pour les points\n        let tabPointsNames = ['F', 'G', 'H', 'I']\n        // on mélange le tableau\n        tabPointsNames = shuffle(tabPointsNames)\n        // on place les deux solutions\n        const I = r.listePoints[2]\n        // I.nom='I';\n        I.nom = tabPointsNames[0]\n        const I1 = rotation(I, X, 180)\n        // I1.nom='I1';\n        I1.nom = tabPointsNames[1]\n        // on place les mauvaises solutions\n        const F = point(I1.x + 1, I1.y + 1)\n        // F.nom='F';\n        F.nom = tabPointsNames[2]\n        const L = point(I.x - 1, I.y - 3)\n        // L.nom='L';\n        L.nom = tabPointsNames[3]\n        // on trace le segment [DE] en pointillés pour que la figure soit plus lisible\n        const sgmt_DE = segment(D, E, 'blue')\n        sgmt_DE.pointilles = true\n        sgmt_DE.epaisseur = 1.5\n\n        // on prépare la fenetre mathalea2d\n        const fenetreMathalea2D = { xmin: -3, ymin: -3, xmax: 27, ymax: 18, pixelsParCm: 20, scale: 0.5 }\n\n        // on prépare les corrections\n        const centre_rot = {\n          sol1: pointIntersectionDD(droite(p.listePoints[1], E), droite(D, p.listePoints[0])),\n          sol2: pointIntersectionDD(droite(E, p.listePoints[0]), droite(p.listePoints[1], D))\n        }\n        const vect_trans = {\n          sol1: vecteur(p.listePoints[1], E),\n          sol2: vecteur(p.listePoints[1], D)\n        }\n        const transformationAnimee = {\n          sol1: '',\n          // nature_sol1:``,\n          sol2: ''\n        }\n        // pour construire les droites et les centres passant par les centres de rotations\n        let d, d1, d2, d3, d4, d5, J1, J2\n        switch (angleChoisi2) {\n          case 0:\n            transformationAnimee.sol1 = rotationAnimee(p, M, 90, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol1=`rotation`;\n            // la 1ere compo\n            d = droite(M, Gq)\n            d1 = rotation(d, M, -45)\n            d2 = rotation(d, Gq, 0)\n            J1 = pointIntersectionDD(d1, d2) // centre de la composée, ici l'angle vaut 90\n\n            // 2eme compo\n            d3 = droite(J1, X)\n            d4 = rotation(d3, J1, -45)\n            d5 = rotation(d3, X, 90)\n            J2 = pointIntersectionDD(d4, d5) // centre après la seconde composition angle 270 à 2pi près\n            transformationAnimee.sol2 = rotationAnimee(p, J2, -90, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol2=`rotation`;\n            break\n          case 90:\n            transformationAnimee.sol1 = rotationAnimee(p, centre_rot.sol1, 180, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol1=`rotation`;\n            transformationAnimee.sol2 = translationAnimee(p, vect_trans.sol2, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol2=`translation`;\n            break\n          case 180:\n            // la 1ere compo\n            d = droite(M, Gq)\n            d1 = rotation(d, M, -45)\n            d2 = rotation(d, Gq, 90)\n            J1 = pointIntersectionDD(d1, d2) // centre de la composée, ici l'angle vaut 270 à 2pi près\n\n            // 2eme compo\n            d3 = droite(J1, X)\n            d4 = rotation(d3, J1, -135)\n            d5 = rotation(d3, X, 90)\n            J2 = pointIntersectionDD(d4, d5) // centre après la seconde composition angle 450 à 2pi près\n            transformationAnimee.sol1 = rotationAnimee(p, J1, -90, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol1=`rotation`;\n            transformationAnimee.sol2 = rotationAnimee(p, J2, 90, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol2=`rotation`;\n            break\n          case 270:\n            transformationAnimee.sol1 = translationAnimee(p, vect_trans.sol1, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol1=`translation`;\n            transformationAnimee.sol2 = rotationAnimee(p, centre_rot.sol2, 180, 'begin=\"0s\" dur=\"4s\" repeatCount=\"indefinite\"')\n            // transformationAnimee.nature_sol2=`rotation`;\n            break\n        }\n        // DE = AB\n        const seg_DE_corr = segment(D, E, 'blue')\n        seg_DE_corr.epaisseur = 2\n        const seg_AB_corr = segment(p.listePoints[0], p.listePoints[1], 'blue')\n        seg_AB_corr.epaisseur = 2\n        // DI = AC ou EI1 = AC\n        const seg_DI_corr = segment(D, I, 'red')\n        const seg_EI1_corr = segment(E, I1, 'red')\n        seg_DI_corr.epaisseur = 2\n        seg_EI1_corr.epaisseur = 2\n        const seg_AC_corr = segment(p.listePoints[0], p.listePoints[2], 'red')\n        seg_AC_corr.epaisseur = 2\n        // EI = BC ou DI1 = BC\n        const seg_EI_corr = segment(E, I, 'green')\n        const seg_DI1_corr = segment(D, I1, 'green')\n        seg_EI_corr.epaisseur = 2\n        seg_DI1_corr.epaisseur = 2\n        const seg_BC_corr = segment(p.listePoints[1], p.listePoints[2], 'green')\n        seg_BC_corr.epaisseur = 2\n        // angle ABC = DEI ou ABC = EDI1\n        const ang_ABC = angleOriente(p.listePoints[0], p.listePoints[1], p.listePoints[2])\n        const ang_DEI = angleOriente(D, E, I)\n        const ang_EDI1 = angleOriente(E, D, I1)\n        // angle BCA = EID ou  BCA = DI1E\n        const ang_BCA = angleOriente(p.listePoints[1], p.listePoints[2], p.listePoints[0])\n        const ang_EID = angleOriente(E, I, D)\n        const ang_EI1D = angleOriente(E, I1, D)\n        // angle CAB = IDE ou CAB = I1ED\n        const ang_CAB = angleOriente(p.listePoints[2], p.listePoints[0], p.listePoints[1])\n        const ang_IDE = angleOriente(I, D, E)\n        const ang_I1ED = angleOriente(I1, E, D)\n\n        const codages_correction = {\n          sol1: [\n            // les segments\n            seg_AB_corr,\n            seg_DE_corr,\n            codeSegments('×', 'blue', p.listePoints[0], p.listePoints[1], D, E),\n            seg_AC_corr,\n            seg_DI_corr,\n            codeSegments('||', 'red', p.listePoints[0], p.listePoints[2], D, I),\n            seg_BC_corr,\n            seg_EI_corr,\n            codeSegments('O', 'green', p.listePoints[1], p.listePoints[2], I, E),\n            // les angles\n            arc(pointSurSegment(p.listePoints[1], p.listePoints[0], 0.8), p.listePoints[1], ang_ABC, true, 'red'),\n            arc(pointSurSegment(E, D, 0.8), E, ang_DEI, true, 'red'),\n            arc(pointSurSegment(p.listePoints[2], p.listePoints[1], 0.8), p.listePoints[2], ang_BCA, true, 'blue'),\n            arc(pointSurSegment(I, E, 0.8), I, ang_EID, true, 'blue'),\n            arc(pointSurSegment(p.listePoints[0], p.listePoints[2], 0.8), p.listePoints[0], ang_CAB, true, 'green'),\n            arc(pointSurSegment(D, I, 0.8), D, ang_IDE, true, 'green')\n          ],\n          sol2: [\n            // les segments\n            seg_AB_corr,\n            seg_DE_corr,\n            codeSegments('×', 'blue', p.listePoints[0], p.listePoints[1], D, E),\n            seg_BC_corr,\n            seg_DI1_corr,\n            codeSegments('O', 'green', p.listePoints[1], p.listePoints[2], D, I1),\n            seg_AC_corr,\n            seg_EI1_corr,\n            codeSegments('||', 'red', p.listePoints[0], p.listePoints[2], E, I1),\n            // les angles\n            arc(pointSurSegment(p.listePoints[1], p.listePoints[0], 0.8), p.listePoints[1], ang_ABC, true, 'red'),\n            arc(pointSurSegment(D, E, 0.8), D, ang_EDI1, true, 'red'),\n            arc(pointSurSegment(p.listePoints[2], p.listePoints[1], 0.8), p.listePoints[2], ang_BCA, true, 'blue'),\n            arc(pointSurSegment(I1, E, 0.8), I1, ang_EI1D, true, 'blue'),\n            arc(pointSurSegment(p.listePoints[0], p.listePoints[2], 0.8), p.listePoints[0], ang_CAB, true, 'green'),\n            arc(pointSurSegment(E, I1, 0.8), E, ang_I1ED, true, 'green')\n          ]\n        }\n\n        // on crée un objet pour stocker les figures et les corrections\n        const figures = {\n          enonce: `\n                        Où placer le point $M$ pour que les triangles $ABC$ et $DEM$ soient égaux ? \n                        <br>En $F$ ? En $G$? En $H$ ? En $I$ ?\n                        <br>\n                        ${mathalea2d(\n                        fenetreMathalea2D,\n                        p,\n                        nom1,\n                        grid,\n                        tracePoint(D, E, I, I1, F, L),\n                        labelPoint(D, E, I, I1, F, L),\n                        sgmt_DE\n                    )}`,\n          corr_solution1: `\n                        Les triangles $ABC$ et $DE${I.nom}$ ont les mêmes longueurs et les mêmes angles.\n                        <br> ${texteEnCouleur(`Donc le point ${I.nom} est un point qui convient`)}\n                        <br>\n                        ${mathalea2d(\n                        fenetreMathalea2D,\n                        p,\n                        nom1,\n                        grid,\n                        tracePoint(D, E, I, I1, F, L),\n                        labelPoint(D, E, I, I1, F, L),\n                        sgmt_DE,\n                        r,\n                        // s,\n                        codages_correction.sol1\n                    )}`,\n          corr_solution2: `\n                        Les triangles $ABC$ et $DE${I1.nom}$ ont les mêmes longueurs et les mêmes angles.\n                        <br> ${texteEnCouleur(`Donc le point ${I1.nom} est un point qui convient`)}\n                        <br>\n                        ${mathalea2d(\n                        fenetreMathalea2D,\n                        p,\n                        nom1,\n                        grid,\n                        tracePoint(D, E, I, I1, F, L),\n                        labelPoint(D, E, I, I1, F, L),\n                        sgmt_DE,\n                        // r,\n                        s,\n                        codages_correction.sol2\n                    )}`,\n          corr_animmee_sol1: `\n                        Les triangles $ABC$ et $DE${I.nom}$ ont les mêmes longueurs et les mêmes angles.\n                        <br> ${texteEnCouleur(`Donc le point ${I.nom} est un point qui convient`)}\n                        <br>\n                        ${mathalea2d(\n                        fenetreMathalea2D,\n                        p,\n                        nom1,\n                        grid,\n                        // tracePoint(D,E,I,I1,F,L),\n                        tracePoint(I1, F, L),\n                        // labelPoint(D,E,I,I1,F,L),\n                        labelPoint(I1, F, L),\n                        nommePolygone(r, 'DE' + I.nom, 0.4),\n                        // sgmt_DE,\n                        r,\n                        transformationAnimee.sol1,\n                        codages_correction.sol1\n                    )}`,\n          corr_animmee_sol2: `\n                        Les triangles $ABC$ et $DE${I1.nom}$ ont les mêmes longueurs et les mêmes angles.\n                        <br> ${texteEnCouleur(`Donc le point ${I1.nom} est un point qui convient`)}\n                        <br>\n                        Une solution est donc le point ${I1.nom}\n                        <br>\n                        ${mathalea2d(\n                        fenetreMathalea2D,\n                        p,\n                        nom1,\n                        grid,\n                        // tracePoint(D,E,I,I1,F,L),\n                        tracePoint(I, F, L),\n                        // labelPoint(D,E,I,I1,F,L),\n                        labelPoint(I, F, L),\n                        nommePolygone(s, 'DE' + I1.nom, 0.4),\n                        // sgmt_DE,\n                        // r,\n                        s,\n                        transformationAnimee.sol2,\n                        codages_correction.sol2\n                    )}`\n        }\n        // texte=mathalea2d({xmin:-3,ymin:-3,xmax:27,ymax:18,pixelsParCm:20,scale:0.5},p,nom1,grid,r,s)\n        texte = `${figures.enonce}`\n        if (this.debug) {\n          texte += `<br>${texteGras('===== Première solution ======')}<br>${figures.corr_animmee_sol1}`\n          texte += `<br><br>${texteGras('===== Seconde solution ======')}<br>${figures.corr_animmee_sol2}`\n        } else {\n          texteCorr += `${texteGras('===== Première solution ======')}<br>${figures.corr_animmee_sol1}`\n          texteCorr += `<br><br>${texteGras('===== Seconde solution ======')}<br>${figures.corr_animmee_sol2}`\n        }\n        this.listeQuestions[0] = texte\n        this.listeCorrections[0] = texteCorr\n        listeQuestionsToContenu(this)\n        break\n    }\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","TrianglesEgaux","Exercice","this","debug","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","texte","texteCorr","randint","aireABC","A","B","C","M","p","q","r","s","X","G","Gq","nom1","grid","trouve","point","choice","rotation","x","y","polygone","aireTriangle","barycentre","angleChoisi1","couleurDeRemplissage","opaciteDeRemplissage","nommePolygone","grille","angleChoisi2","milieu","listePoints","D","nom","E","tabPointsNames","shuffle","I","I1","F","L","sgmt_DE","segment","pointilles","epaisseur","fenetreMathalea2D","xmin","ymin","xmax","ymax","pixelsParCm","scale","centre_rot","sol1","pointIntersectionDD","droite","sol2","vect_trans","vecteur","transformationAnimee","d","d1","d2","d3","d4","d5","J1","J2","rotationAnimee","translationAnimee","seg_DE_corr","seg_AB_corr","seg_DI_corr","seg_EI1_corr","seg_AC_corr","seg_EI_corr","seg_DI1_corr","seg_BC_corr","ang_ABC","angleOriente","ang_DEI","ang_EDI1","ang_BCA","ang_EID","ang_EI1D","ang_CAB","ang_IDE","ang_I1ED","codages_correction","codeSegments","arc","pointSurSegment","figures","enonce","mathalea2d","tracePoint","labelPoint","corr_solution1","texteEnCouleur","corr_solution2","corr_animmee_sol1","corr_animmee_sol2","texteGras","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push"],"sourceRoot":""}