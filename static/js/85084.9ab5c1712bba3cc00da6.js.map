{"version":3,"file":"js/85084.9ab5c1712bba3cc00da6.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5S12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { premiereLettreEnMajuscule, listeQuestionsToContenuSansNumero, texcolors, arrondiVirgule, texFraction, combinaisonListes, tableauColonneLigne, choice, randint } from '../../modules/outils.js'\nimport { traceGraphiqueCartesien, segment, mathalea2d, arc, point, rotation, motifs, tracePoint, vecteur, translation, carre, texteParPosition, repere2, traceBarre, cercleCentrePoint } from '../../modules/2d.js'\n\nexport const titre = 'Représenter des données par un diagramme'\n\n/**\n * @author Jean-Claude Lhote\n * Référence 5S12\n */\nexport default function ConstruireUnDiagramme () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.pasDeVersionLatex = false\n  this.pas_de_version_HMTL = false\n  this.sup = 3\n  this.sup2 = 1\n  this.sup3 = 1\n\n  //  this.sup3 = false;\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n    let typesDeQuestionsDisponibles\n    if (this.sup3 < 5) {\n      typesDeQuestionsDisponibles = [parseInt(this.sup3)]\n    } else {\n      typesDeQuestionsDisponibles = [randint(1, 4)]\n    }\n    const listeHachuresDisponibles = [0, 1, 3, 4, 5, 6, 7, 8, 9, 10]\n    const listeMotifs = combinaisonListes(listeHachuresDisponibles, 4)\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let N = 0; let nom; let texte; let texteCorr\n    let nbAnimaux = 4 // nombre d'animaux différents dans l'énoncé\n    const lstAnimauxExo = [] // liste des animaux uniquement cités dans l'exercice\n    const lstNombresAnimaux = [] // liste des effectifs de chaque animal\n    let lstVal = [10, 20] // liste des valeurs à éviter pour les effectifs\n\n    let paramsEnonce, paramsCorrection, coef, r, lstElementGraph, g\n    const objetsEnonce = []\n    const objetsCorrection = []\n    const lstAnimaux = ['girafes', 'zèbres', 'gnous', 'buffles', 'gazelles', 'crocodiles', 'rhinocéros', 'léopards', 'guépards', 'hyènes', 'lycaons', 'servals', 'phacochères']\n    const lstNomParc = ['Dramve', 'Fatenmin', 'Batderfa', 'Vihi', 'Genser', 'Barbetdou', 'Dramrendu', 'Secai', 'Cipeudram', 'Cigel', 'Lisino', 'Fohenlan',\n      'Farnfoss', 'Kinecardine', 'Zeffari', 'Barmwich', 'Swadlincote', 'Swordbreak', 'Loshull', 'Ruyron', 'Fluasall', 'Blueross', 'Vlane']\n\n    texte = 'Dans le parc naturel de ' + choice(lstNomParc) + ', il y a beaucoup d’animaux.<br> Voici un tableau qui donne le nombre d’individus de quelques espèces.<br><br>'\n    texteCorr = ''\n    const entete = ['\\\\text{Animaux}']\n    let contenutableau, A, B, T, angle, a, legende, textelegende, hachures, a0, t, alpha\n    switch (parseInt(this.sup)) {\n      case 1: nbAnimaux = 2; break\n      case 2: nbAnimaux = 3; break\n      case 3: nbAnimaux = 4; break\n      default: nbAnimaux = 4\n    }\n    switch (parseInt(this.sup2)) {\n      case 1:\n        for (let i = 0; i < nbAnimaux; i++) {\n          N = randint(10, 50, lstVal) // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n          lstNombresAnimaux.push(N)\n          lstVal = lstVal.concat([N - 1, N, N + 1]) // valeurs à supprimer pour éviter des valeurs proches\n        }\n        break\n      case 2:\n        for (let i = 0; i < nbAnimaux; i++) {\n          N = randint(10, 50, lstVal) // choisit un nombre entre 2 et 100 sauf dans les valeurs à éviter\n          lstNombresAnimaux.push(10 * N)\n          lstVal = lstVal.concat([N - 1, N, N + 1]) // valeurs à supprimer pour éviter des valeurs proches\n        }\n        break\n    }\n    let effectiftotal = 0\n    for (let i = 0; i < nbAnimaux; i++) {\n      effectiftotal += lstNombresAnimaux[i]\n    }\n    for (let i = 0; i < nbAnimaux; i++) {\n      nom = choice(lstAnimaux, lstAnimauxExo) // choisit un animal au hasard sauf parmi ceux déjà utilisés\n      lstAnimauxExo.push(nom)\n      entete.push(`\\\\text{${nom}}`)\n    }\n    texte += `${tableauColonneLigne(entete, ['\\\\text{Effectifs}'], lstNombresAnimaux)}<br><br>`\n\n    switch (listeTypeDeQuestions[0]) {\n      case 1:\n        texte += 'Représenter ces données par un diagramme circulaire.<br><br>'\n        entete.push('\\\\text{Totaux}')\n        contenutableau = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(lstNombresAnimaux[i])\n        }\n        contenutableau.push(effectiftotal)\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(texFraction(lstNombresAnimaux[i], effectiftotal) + '\\\\approx ' + arrondiVirgule(lstNombresAnimaux[i] / effectiftotal, 2))\n        }\n        contenutableau.push('1')\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(`${texFraction(lstNombresAnimaux[i], effectiftotal)} \\\\times 360 \\\\approx ${Math.round(lstNombresAnimaux[i] * 360 / effectiftotal)}\\\\degree`)\n        }\n        contenutableau.push('360\\\\degree')\n\n        texteCorr += `${tableauColonneLigne(entete, ['\\\\text{Éffectifs}', '\\\\text{Fréquences}', '\\\\text{Angles}'], contenutableau, 3)}<br>`\n\n        A = point(0, 0)\n        B = point(6, 0)\n        T = point(7, 0)\n        a0 = cercleCentrePoint(A, B, 'black')\n        objetsEnonce.push(a0)\n        objetsCorrection.push(a0)\n        alpha = 90\n\n        t = tracePoint(A)\n        t.style = '+'\n        objetsEnonce.push(t)\n        objetsCorrection.push(t)\n\n        for (let i = 0; i < nbAnimaux; i++) {\n          angle = 360 * lstNombresAnimaux[i] / effectiftotal\n          a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n          hachures = motifs(listeMotifs[i])\n          a.hachures = hachures\n          a.couleurDeRemplissage = texcolors(i + 1)\n          a.couleurDesHachures = a.couleurDeRemplissage\n          objetsCorrection.push(a)\n          alpha += angle\n          legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n          legende.couleurDeRemplissage = a.couleurDeRemplissage\n          legende.couleurDesHachures = a.couleurDesHachures\n          legende.hachures = hachures\n          legende.opaciteDeRemplissage = 0.7\n          textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + 0.5, 0, 'black', 1.5, 'gauche', false)\n          objetsCorrection.push(legende, textelegende)\n          paramsEnonce = { xmin: -6.5, ymin: -6.5, xmax: 6.5, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n          paramsCorrection = { xmin: -6.5, ymin: -6.5, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n        }\n        break\n      case 2:\n        texte += 'Représenter ces données par un diagramme semi-circulaire.<br><br>'\n        entete.push('\\\\text{Totaux}')\n        contenutableau = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(lstNombresAnimaux[i])\n        }\n        contenutableau.push(effectiftotal)\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(texFraction(lstNombresAnimaux[i], effectiftotal) + '\\\\approx ' + arrondiVirgule(lstNombresAnimaux[i] / effectiftotal, 2))\n        }\n        contenutableau.push('1')\n        for (let i = 0; i < nbAnimaux; i++) {\n          contenutableau.push(`${texFraction(lstNombresAnimaux[i], effectiftotal)} \\\\times 180 \\\\approx ${Math.round(lstNombresAnimaux[i] * 180 / effectiftotal)}\\\\degree`)\n        }\n        contenutableau.push('180\\\\degree')\n\n        texteCorr += `${tableauColonneLigne(entete, ['\\\\text{Éffectifs}', '\\\\text{Fréquences}', '\\\\text{Angles}'], contenutableau, 3)}<br>`\n\n        A = point(0, 0)\n        B = point(6, 0)\n        T = point(7, 0)\n        a0 = arc(B, A, 180, true, 'white', 'black')\n        objetsEnonce.push(a0)\n        objetsCorrection.push(a0)\n        alpha = 0\n        t = tracePoint(A)\n        t.style = '+'\n        objetsEnonce.push(t)\n        objetsCorrection.push(t)\n\n        for (let i = 0; i < nbAnimaux; i++) {\n          angle = 180 * lstNombresAnimaux[i] / effectiftotal\n          a = arc(rotation(B, A, alpha), A, angle, true, texcolors(i + 1), 'black', 0.7)\n          hachures = motifs(listeMotifs[i])\n          a.hachures = hachures\n          a.couleurDeRemplissage = texcolors(i + 1)\n          a.couleurDesHachures = a.couleurDeRemplissage\n          objetsCorrection.push(a)\n          alpha += angle\n          legende = carre(translation(T, vecteur(0, 1.5 * i)), translation(T, vecteur(1, 1.5 * i)), 'black')\n          legende.couleurDeRemplissage = a.couleurDeRemplissage\n          legende.couleurDesHachures = a.couleurDesHachures\n          legende.hachures = hachures\n          legende.opaciteDeRemplissage = 0.7\n          textelegende = texteParPosition(lstAnimauxExo[i], 8.5, i * 1.5 + 0.5, 0, 'black', 1.5, 'gauche', false)\n          objetsCorrection.push(legende, textelegende)\n          paramsEnonce = { xmin: -6.5, ymin: -0.2, xmax: 6.5, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n          paramsCorrection = { xmin: -6.5, ymin: -0.2, xmax: 20, ymax: 6.5, pixelsParCm: 20, scale: 1, mainlevee: false }\n        }\n        break\n      case 3:\n        texte += 'Représenter ces données par un diagramme en barres.<br>'\n        coef = 1\n        switch (parseInt(this.sup2)) {\n          case 1:\n            coef = 1\n            break\n          case 2:\n            coef = 10\n            break\n        }\n        r = repere2({\n          grilleX: false,\n          grilleY: 'pointilles',\n          xThickListe: [],\n          xLabelListe: [],\n          yUnite: 0.1 / coef,\n          yThickDistance: 10 * coef,\n          yMax: 60 * coef,\n          xMin: 0,\n          xMax: 10,\n          yMin: 0,\n          axeXStyle: '',\n          yLegende: \"Nombre d'individus\"\n        })\n\n        lstElementGraph = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          objetsCorrection.push(traceBarre((((r.xMax - r.xMin) / (nbAnimaux + 1)) * (i + 1)), lstNombresAnimaux[i], premiereLettreEnMajuscule(lstAnimauxExo[i]), { unite: 0.1 / coef, couleurDeRemplissage: texcolors(i + 1), hachures: 'north east lines' }))\n        }\n        objetsCorrection.push(r)\n        paramsEnonce = { xmin: -6.5, ymin: 0, xmax: 6.5, ymax: 0, pixelsParCm: 20, scale: 1, mainlevee: false }\n        paramsCorrection = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7, pixelsParCm: 20, scale: 1, mainlevee: false }\n\n        break\n\n      case 4:\n        texte += 'Représenter ces données par un graphique cartésien.<br>'\n        coef = 1\n        switch (parseInt(this.sup2)) {\n          case 1:\n            coef = 1\n            break\n          case 2:\n            coef = 10\n            break\n        }\n        r = repere2({\n          grilleX: false,\n          grilleY: 'pointilles',\n          xThickListe: [],\n          xLabelListe: [],\n          yUnite: 0.1 / coef,\n          yThickDistance: 10 * coef,\n          yMax: 60 * coef,\n          xMin: 0,\n          xMax: 10,\n          yMin: 0,\n          axeXStyle: '',\n          yLegende: \"Nombre d'individus\"\n        })\n\n        lstElementGraph = []\n        for (let i = 0; i < nbAnimaux; i++) {\n          lstElementGraph.push([(i + 1) * 2, lstNombresAnimaux[i]])\n          objetsCorrection.push(texteParPosition(lstAnimauxExo[i], (i + 1) * 2, -0.2, 66, 'black', 1, 'gauche'))\n          objetsCorrection.push(segment((i + 1) * 2, -0.1, (i + 1) * 2, 0.1))\n        }\n        g = traceGraphiqueCartesien(lstElementGraph, r, {\n          couleurDesPoints: 'red',\n          couleurDuTrait: 'lightgray',\n          styleDuTrait: '', // plein par défaut\n          epaisseurDuTrait: 1,\n          styleDesPoints: 'o', // croix par défaut\n          tailleDesPoints: 3\n        })\n\n        objetsCorrection.push(r, g)\n\n        paramsEnonce = { xmin: -6.5, ymin: 0, xmax: 6.5, ymax: 0, pixelsParCm: 20, scale: 1, mainlevee: false }\n        paramsCorrection = { xmin: -6.5, ymin: -3, xmax: 20, ymax: 7, pixelsParCm: 20, scale: 1, mainlevee: false }\n\n        break\n    }\n    texte += mathalea2d(paramsEnonce, objetsEnonce)\n    texteCorr += mathalea2d(paramsCorrection, objetsCorrection)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  this.besoinFormulaireNumerique = ['Nombre d\\'espèces différentes', 3, '1 : Deux espèces\\n2 : Trois espèces\\n3 : Quatre espèces']\n  this.besoinFormulaire2Numerique = ['Valeurs numériques', 2, '1 : Entre 1 et 100\\n2 : Entre 100 et 1 000']\n  this.besoinFormulaire3Numerique = ['Type de diagramme', 5, '1 : Diagramme circulaire\\n2 : Diagramme semi-circulaire\\n3 : Diagramme en barres\\n4 : Diagramme cartésien\\n5 : Au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConstruireUnDiagramme","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","sup3","nouvelleVersion","typesDeQuestionsDisponibles","listeQuestions","listeCorrections","autoCorrection","parseInt","randint","listeMotifs","combinaisonListes","listeTypeDeQuestions","nom","texte","texteCorr","N","nbAnimaux","lstAnimauxExo","lstNombresAnimaux","paramsEnonce","paramsCorrection","coef","r","lstElementGraph","g","lstVal","objetsEnonce","objetsCorrection","lstAnimaux","choice","entete","contenutableau","A","B","T","angle","a","legende","textelegende","hachures","a0","t","alpha","i","push","concat","effectiftotal","tableauColonneLigne","texFraction","arrondiVirgule","Math","round","point","cercleCentrePoint","tracePoint","style","arc","rotation","texcolors","motifs","couleurDeRemplissage","couleurDesHachures","carre","translation","vecteur","opaciteDeRemplissage","texteParPosition","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","repere2","grilleX","grilleY","xThickListe","xLabelListe","yUnite","yThickDistance","yMax","xMin","xMax","yMin","axeXStyle","yLegende","traceBarre","premiereLettreEnMajuscule","unite","segment","traceGraphiqueCartesien","couleurDesPoints","couleurDuTrait","styleDuTrait","epaisseurDuTrait","styleDesPoints","tailleDesPoints","mathalea2d","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","besoinFormulaire2Numerique","besoinFormulaire3Numerique","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}