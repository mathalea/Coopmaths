{"version":3,"file":"js/27145.49abc18b87ca0d66a55a.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/betaProbaAouB.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { listeQuestionsToContenu, randint, combinaisonListes, choice, texFraction, texFractionReduite } from '../../modules/outils.js'\nimport { context } from '../../modules/context.js'\nimport Exercice from '../Exercice.js'\nexport const titre = '2S30-6' // Probabilité A ou B dans situation concrète\n\nconst multiple = (n, d) => n % d === 0\nconst impair = (n, _) => n % 2 // ou not(multiple(n,2))\nconst pair = (n, _) => !(n % 2)\nconst inf = (n, d) => n < d\nconst sup = (n, d) => n > d\nconst egal = (n, d) => n === d\nconst choixFnct = [\n  [multiple, 'multiple de', 2], // besoin de 2 paramètres pour \"est multiple de...\"\n  [impair, 'impair', 1], // 1 seul paramètre\n  [pair, 'pair', 1],\n  [inf, 'strictement inférieur à', 2],\n  [sup, 'strictement supérieur à', 2],\n  [egal, 'égal à', 2]\n]\n\n/**\n * Description didactique de l'exercice\n * @author Eric Schrafstetter\n * Référence\n*/\nexport default function calculDeProbabilitesAvecDeuxEnsemblesAetB () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = 'Pour chaque expérience, calculer $P(A)$, $P(B)$, $P(A\\\\cap B)$ et $P(A\\\\cup B)$'\n  this.nbQuestions = 2\n  this.nbCols = 1 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 1 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1)\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    const typesDeQuestionsDisponibles = ['type1']\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n\n    for (let i = 0, texte, texteCorr, n, a, b, faces, res_a, res_b, nb_a, nb_b, res_aEtb, nb_aEtb, res_aOub, nb_aOub, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      n = choice([4, 6, 8, 10, 12, 20]) // nb de faces du dé\n      faces = Array(n).fill(0).map((_, i) => 1 + i) // [1, 2,..., n]\n      a = [choice(choixFnct), randint(2, n - 1)] // choix de la fonction à utiliser (multiple, impair...) et du paramètre éventuel\n      b = [choice(choixFnct), randint(2, n - 1)]\n      res_a = faces.filter(v => a[0][0](v, a[1])) // Eléments vérifiant A\n      nb_a = res_a.length // Cardinal de A\n      res_b = faces.filter(v => b[0][0](v, b[1])) // Eléments vérifiant B\n      nb_b = res_b.length\n      res_aEtb = res_a.filter(v => b[0][0](v, b[1])) // Eléments vérifiant A et B\n      nb_aEtb = res_aEtb.length\n      res_aOub = faces.filter(v => a[0][0](v, a[1]) || b[0][0](v, b[1])) // Eléments vérifiant A ou B\n      nb_aOub = res_aOub.length\n\n      switch (listeTypeDeQuestions[i]) {\n        case 'type1':\n\n          // Enoncé\n          texte = `On lance un dé équilibré à $${n}$ faces numéroté de 1 à $${n}$. On considère les 2 événements :<br>`\n          texte += `$A$ = \"Obtenir un résultat ${a[0][1]} ${a[0][2] === 2 ? a[1] : ''}\"<br>`\n          texte += `$B$ = \"Obtenir un résultat ${b[0][1]} ${b[0][2] === 2 ? b[1] : ''}\"`\n\n          break\n      }\n      texteCorr = `Les $\\\\textbf{\\\\text{issues}}$ possibles (appelées aussi $\\\\textbf{\\\\text{événements élémentaires}}$) du lancer d'un dé à ${n} faces sont les nombres entiers entre $1$ à $${n}$. `\n      texteCorr += `L'$\\\\textbf{\\\\text{univers}}$ est  $\\\\Omega = \\\\{1,2,${n > 4 ? '...' : 3},${n}\\\\}$<br>`\n      texteCorr += `L'$\\\\textbf{\\\\text{événement}}$ $A$ = \"Obtenir un résultat ${a[0][1]} ${a[0][2] === 2 ? a[1] : ''}\" est constitué de l'${nb_a > 1 ? `ensemble des $${nb_a}$ ` : ''}issue${nb_a > 1 ? 's' : ''} : $${res_a.toString()}$<br>`\n      texteCorr += `L'$\\\\textbf{\\\\text{événement}}$ $B$ = \"Obtenir un résultat ${b[0][1]} ${b[0][2] === 2 ? b[1] : ''}\" est constitué de l'${nb_b > 1 ? `ensemble des $${nb_b}$ ` : ''}issue${nb_b > 1 ? 's' : ''} : $${res_b.toString()}$<br>`\n      texteCorr += `Comme $A=\\\\{${res_a.toString()}\\\\}$ et $B=\\\\{${res_b.toString()}\\\\}$, on en déduit que :<br>`\n      texteCorr += `$P(A) = ${nb_a} \\\\times ${texFraction(1, n)} = ${texFractionReduite(nb_a, n)}$<br>`\n      texteCorr += `$P(B) = ${nb_b} \\\\times ${texFraction(1, n)} = ${texFractionReduite(nb_b, n)}$<br>`\n      texteCorr += '$A\\\\cap B$ est l\\'intersection des événements $A$ et $B$, c\\'est-à-dire les issues appartenant à la fois à $A$ et à $B$<br>'\n      if (nb_aEtb === 0) {\n        texteCorr += 'Il n\\'y en a aucune (on dit que $A$ et $B$ sont $\\\\textbf{\\\\text{incompatibles}}$). Donc $P(A\\\\cap B) = 0$<br>'\n      } else {\n        texteCorr += `Il y a ${nb_aEtb > 1 ? `${nb_aEtb} issues` : 'une seule issue'} : $A\\\\cap B=\\\\{${res_aEtb.toString()}\\\\}$<br>`\n        texteCorr += `Donc $P(A\\\\cap B) = ${nb_aEtb} \\\\times ${texFraction(1, n)} = ${texFractionReduite(nb_aEtb, n)}$<br>`\n      }\n      texteCorr += 'Comme $P(A\\\\cup B) = P(A) + P(B) - P(A\\\\cap B)$, on en déduit que :<br>'\n      texteCorr += `$P(A\\\\cup B) = ${texFractionReduite(nb_a, n)} + ${texFractionReduite(nb_b, n)} - ${texFractionReduite(nb_aEtb, n)} = ${texFractionReduite(nb_aOub, n)}$`\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 3]\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","choixFnct","n","d","_","calculDeProbabilitesAvecDeuxEnsemblesAetB","sup","context","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","faces","res_a","res_b","nb_a","nb_b","res_aEtb","nb_aEtb","res_aOub","nb_aOub","cpt","choice","Array","fill","map","randint","filter","v","length","texFraction","texFractionReduite","listeQuestionsToContenu"],"sourceRoot":""}