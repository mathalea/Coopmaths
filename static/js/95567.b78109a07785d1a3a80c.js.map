{"version":3,"file":"js/95567.b78109a07785d1a3a80c.js","mappings":"sMAIO,MAAMA,EAAQ,kEAQN,SAASC,IAEtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,GAChBD,KAAKE,YAAc,EACnBF,KAAKG,uBAAwB,EAC7BH,KAAKI,qBAAsB,EAC3BJ,KAAKK,+BAAgC,EACrCL,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAKQ,IAAM,EACXR,KAAKS,MAAO,EACZT,KAAKU,KAAO,EACZC,EAAAA,GAAAA,OAAkBX,KAAKY,YAAc,IAAQZ,KAAKY,YAAc,IAChEZ,KAAKa,gBAAkB,WACrBb,KAAKQ,IAAMM,OAAOd,KAAKQ,KACvBR,KAAKU,KAAOI,OAAOd,KAAKU,MACxB,MAAMK,EAAc,SAAUC,GAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAClC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIH,EAAQE,OAAQC,IAClCH,EAAQC,GAAG,KAAOD,EAAQG,GAAG,IAC/BH,EAAQI,OAAOD,EAAG,GAIxB,OAAOH,GAOHK,EAAmB,SAAUC,EAAOC,GACxC,OAAID,EAAME,YAAYN,SAAWK,EAAMC,YAAYN,QAK/CO,EAAkB,SAAUC,EAASC,GACzC,UAAIC,EAAAA,EAAAA,KAAKF,EAAQG,EAAGF,EAAQE,EAAG,OAAQD,EAAAA,EAAAA,KAAKF,EAAQI,EAAGH,EAAQG,EAAG,MAI9DC,EAAiB,SAAUT,EAAOC,GACtC,IAAIS,GAAS,EAAWC,EAAU,EAClC,GAAIZ,EAAiBC,EAAOC,GAC1B,IAAK,MAAMW,KAAKZ,EAAME,YAAa,CACjC,IAAK,MAAMW,KAAKZ,EAAMC,YAIpB,GAHIC,EAAgBU,EAAGD,KACrBF,GAAS,GAEPA,EAAQ,MAQd,GANIA,GACFC,IACAD,GAAS,GAETC,GAAW,IAETA,EAAU,EAAK,MAGvB,OAAIA,IAAYX,EAAME,YAAYN,QAG9BkB,EAAc,SAAUC,EAAQC,EAAGC,GACvC,MAAMC,EAAOH,EAAOI,UAAUF,EAAS,GAAI,IAAIG,EAC/C,MACMC,GAAUC,EAAAA,EAAAA,KAAYJ,EAAMF,GAClC,IAAK,IAAIrB,EAAI,EAAGA,EAAIoB,EAAOI,UAAUvB,OAAQD,IAE3C,GADAyB,EAAML,EAAOI,UAAUxB,GA1CrBI,EAD0BC,EA4CVqB,EA5CiBpB,EA4CRmB,IA1CvBX,EAAeT,EAAOC,GA2CxB,OAAON,EAAI,EA7CK,IAAUK,EAAOC,EAgDrC,OARgB,GAWZsB,EAAS,GACTC,EAAmB,GACzB,IAAIC,EAAIC,EAAIC,EAAIC,EAWZC,EAAIC,EAAIC,EAAQC,EAAQC,EAAGC,EAAGC,EAAGC,EACjCC,EAAWC,EAXXC,EAAe7D,KAAKQ,IACpBsD,EAAU,IACVD,EAAe,GAAKA,EAAe,KACrCA,EAAe,GAEb7D,KAAKE,YAAc,IACrB2D,EAAe,GAEjB7D,KAAK+D,iBAAmB,GACxB/D,KAAKgE,eAAiB,GAGtB,IAGIC,EAAkD3B,EAHlD4B,EAAQ,GACRC,EAAY,GACZC,EAAepE,KAAKQ,IACE6D,EAAqB,EAO/C,IANAV,GAAYtB,EAAAA,EAAAA,OAEV+B,EADgB,IAAdpE,KAAKU,MACQ4D,EAAAA,EAAAA,KAAQ,EAAG,GAEXC,SAASvE,KAAKU,MAExBoD,EAAQ5C,OAASlB,KAAKE,aAAemE,EAAqB,GAAG,CAClEJ,EAAmB,EACnBN,GAAYtB,EAAAA,EAAAA,OACZ,MAAMmC,EAAU,CAAC,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAAK,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,KAKhI,IAJArB,EAAKqB,EAAQX,EAAe,GAAGO,EAAe,GAAG,GACjDhB,EAAKoB,EAAQX,EAAe,GAAGO,EAAe,GAAG,GACjDT,EAAUc,UAAUL,EAAcjB,EAAIC,EAAI,GAC1CQ,EAAUD,EAAUC,QACbE,EAAQ5C,OAASlB,KAAKE,YAAc,GAAK+D,EAAmB,GAAG,CAIpE,IAHAH,EAAU,GACVT,GAASiB,EAAAA,EAAAA,KAAQI,KAAKC,MAAMhB,EAAUiB,aAAe,GAAIF,KAAKG,KAA8B,EAAzBlB,EAAUiB,aAAmB,IAChGtB,GAASgB,EAAAA,EAAAA,KAAQI,KAAKC,MAAMhB,EAAUiB,aAAe,GAAIF,KAAKG,KAA8B,EAAzBlB,EAAUiB,aAAmB,GAAIvB,IAC5FhC,EAAiBsC,EAAUlB,UAAUY,GAASM,EAAUlB,UAAUa,KACxEA,GAAUA,EAAS,IAAMK,EAAUlB,UAAUvB,OAAS,GAKxD,IAHAqC,EAAII,EAAUmB,YAAYzB,GAC1BG,EAAIG,EAAUmB,YAAYxB,GAC1BhB,GAAIyC,EAAAA,EAAAA,KAAQxB,EAAGC,GACR/B,EAAgB8B,EAAGC,IAAI,CAE5B,IADAF,GAASgB,EAAAA,EAAAA,KAAQI,KAAKC,MAAMhB,EAAUiB,aAAe,GAAIF,KAAKG,KAA8B,EAAzBlB,EAAUiB,aAAmB,GAAIvB,IAC5FhC,EAAiBsC,EAAUlB,UAAUY,GAASM,EAAUlB,UAAUa,KACxEA,GAAUA,EAAS,IAAMK,EAAUlB,UAAUvB,OAAS,GAExDqC,EAAII,EAAUmB,YAAYzB,GAC1BG,EAAIG,EAAUmB,YAAYxB,GAC1BhB,GAAIyC,EAAAA,EAAAA,KAAQxB,EAAGC,GAEjBC,GAAIuB,EAAAA,EAAAA,KAAQzB,EAAGC,GACfC,EAAEwB,gBAAkB,KACpBxB,EAAEyB,MAAQ,MACVzB,EAAE0B,UAAY,EACd,IAAK,IAAIC,EAAI,EAAGA,GAAKzB,EAAUiB,aAAcQ,IAC3C1B,EAAQtB,EAAYuB,EAAWrB,EAAG8C,IACnB,IAAX1B,GACFI,EAAQuB,KAAK,CAACD,EAAG1B,IAGrBI,EAAU/C,EAAY+C,GACtBG,IAEEH,EAAQ5C,OAASlB,KAAKE,cACN,IAAdF,KAAKU,OACP0D,GAAgBA,EAAe,GAAK,EAAI,GAE1CC,KAGJ,GAAIP,EAAQ5C,OAASlB,KAAKE,YACxBoF,QAAQC,IAAI,wDADd,CAKA1C,EAAOwC,KAAK5B,GACZK,GAAU0B,EAAAA,EAAAA,KAAQ1B,GAClB,IAAK,IAAIsB,EAAI,EAAGA,EAAIzB,EAAUiB,aAAcQ,IAC1CvC,EAAOwC,MAAKI,EAAAA,EAAAA,MAAiBC,EAAAA,EAAAA,KAAiBN,EAAI,GAAIzB,EAAUmB,YAAYM,GAAGvD,EAAI,GAAK8B,EAAUmB,YAAYM,GAAGtD,EAAG,SAAU,OAAQ,EAAG,GAAG,IAE9I,GAAI9B,KAAKS,KACP,IAAK,IAAI2E,EAAI,EAAGA,EAAIzB,EAAUiB,aAAcQ,IAC1CvC,EAAOwC,KAAK1B,EAAUgC,cAAcP,IAGxC,IAAK,IAAIA,EAAI,EAAGA,EAAIzB,EAAUiB,aAAcQ,IAC1CvC,EAAOwC,KAAK1B,EAAUlB,UAAU2C,IAElClB,GAAQ0B,EAAAA,EAAAA,KAAWhC,EAASf,GAC5BqB,GAAS,OACT,IAAK,IAAIkB,EAAI,EAAGA,EAAIpF,KAAKE,YAAakF,IACpClB,GAAU,oCAAmCJ,EAAQsB,GAAG,mDAAmD/B,EAAS,oBAAoBC,EAAS,WACjJa,GAAc,yBAAwBL,EAAQsB,GAAG,mDAAmD/B,EAAS,oBAAoBC,EAAS,oBAAoBQ,EAAQsB,GAAG,SAErKpF,KAAKI,sBACPmD,EAAII,EAAUmB,YAAYhB,EAAQsB,GAAG,GAAK,GAC1C5B,EAAIG,EAAUmB,YAAYhB,EAAQsB,GAAG,GAAK,GAC1C3B,EAAInB,EAAEuD,aAAatC,EAAGC,GACtBC,EAAEyB,OAAQY,EAAAA,EAAAA,KAAUV,GACpBlC,EAAuB,EAAnBlD,KAAKE,YACT6C,EAAKY,EAAUlB,UAAUqB,EAAQsB,GAAG,GAAK,GACzCrC,EAAGmC,OAAQY,EAAAA,EAAAA,KAAUV,GACrBrC,EAAGgD,sBAAuBD,EAAAA,EAAAA,KAAUV,GACpCrC,EAAGiD,qBAAuB,GAC1BjD,EAAGoC,UAAY,EACfnC,EAAKW,EAAUlB,UAAUqB,EAAQsB,GAAG,GAAK,GACzCpC,EAAGkC,OAAQY,EAAAA,EAAAA,KAAUV,GACrBpC,EAAG+C,sBAAuBD,EAAAA,EAAAA,KAAUV,GACpCpC,EAAGgD,qBAAuB,GAC1BhD,EAAGmC,UAAY,EACflC,GAAKgD,EAAAA,EAAAA,KAAkBlD,EAAIT,EAAI,UAAa,EAAJ8C,MAAc,EAAJA,EAAQlC,MAAU,EAAJkC,EAAY,EAAJlC,YAAoB,EAAJkC,EAAQ,MAAU,EAAJA,EAAQlC,EAAI,MAAU,EAAJkC,EAAY,EAAJlC,EAAQ,oDAAoD,EAAIlD,KAAKE,0BAA0BkF,WAC/NnC,EAAGiC,OAAQY,EAAAA,EAAAA,KAAUV,GACrBnC,EAAGkC,UAAY,EACfrC,EAAiBuC,MAAKa,EAAAA,EAAAA,KAAW3C,EAAGC,GAAIC,GAAG0C,EAAAA,EAAAA,KAAY5C,EAAGC,EAAG,MAAMsC,EAAAA,EAAAA,KAAUV,IAAKrC,EAAIC,EAAIC,IAG1FjD,KAAKI,sBACP+D,IAAayB,EAAAA,EAAAA,KAAWhC,EAASf,EAAQC,IAE3C9C,KAAKgE,eAAeqB,KAAKnB,GACzBlE,KAAK+D,iBAAiBsB,KAAKlB,IAC3BiC,EAAAA,EAAAA,KAAwBpG,QAE1BA,KAAKqG,0BAA4B,CAAC,sEAAuE,EAAG,2CAC5GrG,KAAKsG,6BAA+B,CAAC,uBACrCtG,KAAKuG,2BAA6B,CAAC,kBAAmB,EAAG,4P,gBCpN5C,SAASxG,IAItBC,KAAKH,MAAQ,GACbG,KAAKwG,YAAa,EAclBxG,KAAKC,SAAW,GAChBD,KAAKyG,mBAAqB,GAC1BzG,KAAK0G,aAAe,GACpB1G,KAAKgE,eAAiB,GACtBhE,KAAK+D,iBAAmB,GACxB/D,KAAK2G,QAAU,GACf3G,KAAK4G,kBAAoB,GACzB5G,KAAK6G,eAAiB,GACtB7G,KAAK8G,sBAAwB,GAK7B9G,KAAK+G,QAAU,EACf/G,KAAKY,YAAc,EAKnBZ,KAAKgH,mBAAoB,EACzBhH,KAAKiH,cAAgB,GACrBjH,KAAKkH,oBAAqB,EAC1BlH,KAAKG,uBAAwB,EAC7BH,KAAKM,OAAS,EACdN,KAAKO,WAAa,EAClBP,KAAKmH,kBAAmB,EACxBnH,KAAKoH,sBAAuB,EAC5BpH,KAAKqH,mBAAoB,EACzBrH,KAAKsH,uBAAwB,EAM7BtH,KAAKuH,QAAS,EACdvH,KAAKwH,gBAAkB,EAKvBxH,KAAKE,YAAc,GACnBF,KAAKyH,mBAAqB,EAC1BzH,KAAKK,+BAAgC,EACrCL,KAAKI,qBAAsB,EAC3BJ,KAAK0H,oBAAqB,EAC1B1H,KAAK2H,MAAQ,GAEb3H,KAAK4H,YAAa,EAClB5H,KAAK6H,uBAAwB,EAE7B7H,KAAKqG,2BAA4B,EACjCrG,KAAK8H,uBAAwB,EAC7B9H,KAAK+H,6BAA8B,EAEnC/H,KAAKgI,4BAA6B,EAClChI,KAAKiI,wBAAyB,EAC9BjI,KAAKsG,8BAA+B,EAEpCtG,KAAKuG,4BAA6B,EAClCvG,KAAKkI,wBAAyB,EAC9BlI,KAAKmI,8BAA+B,EAEpCnI,KAAKoI,4BAA6B,EAClCpI,KAAKqI,wBAAyB,EAC9BrI,KAAKsI,8BAA+B,EAMpCtI,KAAKuI,cAAe,EASpBvI,KAAKwI,eAAiB,GAMtBxI,KAAKa,gBAAkB,SAAU4H,KAQjCzI,KAAK0I,oBAAsB,SAAUtD,KAAMuD,GAC/B,IAANvD,IAASpF,KAAKwI,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI/I,KAAKwI,eAAeQ,QAAQJ,IAAmB,KAGjD5I,KAAKwI,eAAenD,KAAKuD,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/4e/4G11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, shuffle, nombreAvecEspace, texcolors } from '../../modules/outils.js'\nimport { tracePoint, vecteur, segment, translation, translationAnimee, codeSegment, texteParPosition, mathalea2d, pavage } from '../../modules/2d.js'\nexport const titre = 'Trouver l’image d’une figure par une translation dans un pavage'\n\n/**\n * @author Jean-Claude Lhote\n * publié le 16/12/2020\n * Réf : 4G11\n * Trouver une figure image dans un pavage par une translation. 6 pavages différents.\n */\nexport default function PavageEtTranslation2d () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = true\n  this.correctionDetaillee = true\n  this.correctionDetailleeDisponible = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1 // 1 pour des pavages modestes, 2 pour des plus grand.\n  this.sup2 = false // On cache les centres par défaut.\n  this.sup3 = 7\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function () {\n    this.sup = Number(this.sup)\n    this.sup3 = Number(this.sup3)\n    const videcouples = function (tableau) {\n      for (let k = 0; k < tableau.length; k++) {\n        for (let j = k + 1; j < tableau.length; j++) {\n          if (tableau[k][1] === tableau[j][0]) {\n            tableau.splice(j, 1)\n          }\n        }\n      }\n      return tableau\n    }\n    const compare2polys = function (poly1, poly2) {\n      if (comparenbsommets(poly1, poly2)) {\n        if (comparesommets(poly1, poly2)) { return true } else { return false }\n      } else { return false }\n    }\n    const comparenbsommets = function (poly1, poly2) {\n      if (poly1.listePoints.length === poly2.listePoints.length) {\n        return true\n      } else return false\n    }\n\n    const compare2sommets = function (sommet1, sommet2) {\n      if (egal(sommet1.x, sommet2.x, 0.1) && egal(sommet1.y, sommet2.y, 0.1)) {\n        return true\n      } else return false\n    }\n    const comparesommets = function (poly1, poly2) {\n      let trouve = false; let trouves = 0\n      if (comparenbsommets(poly1, poly2)) {\n        for (const P of poly1.listePoints) {\n          for (const M of poly2.listePoints) {\n            if (compare2sommets(M, P)) {\n              trouve = true\n            }\n            if (trouve) break\n          }\n          if (trouve) {\n            trouves++\n            trouve = false\n          } else {\n            trouves -= 100\n          }\n          if (trouves < 0) { break }\n        }\n      }\n      if (trouves === poly1.listePoints.length) { return true } else return false\n    }\n\n    const translacion = function (pavage, v, numero) { // retourne le numero du polygone image ou -1 si il n'existe pas\n      const poly = pavage.polygones[numero - 1]; let pol\n      const result = -1\n      const sympoly = translation(poly, v)\n      for (let k = 0; k < pavage.polygones.length; k++) {\n        pol = pavage.polygones[k]\n        if (compare2polys(sympoly, pol)) {\n          return k + 1\n        }\n      }\n      return result\n    }\n\n    const objets = []\n    const objetsCorrection = []\n    let P1, P2, P3, t\n    let taillePavage = this.sup\n    let couples = []\n    if (taillePavage < 1 || taillePavage > 2) {\n      taillePavage = 1\n    }\n    if (this.nbQuestions > 5) {\n      taillePavage = 2\n    }\n    this.listeCorrections = []\n    this.listeQuestions = []\n    let Nx, Ny, index1, index2, A, B, d, image\n    let monpavage, fenetre\n    let texte = ''\n    let texteCorr = ''\n    let typeDePavage = this.sup\n    let nombreTentatives; let nombrePavageTestes = 1; let v\n    monpavage = pavage()\n    if (this.sup3 === 8) {\n      typeDePavage = randint(1, 7)\n    } else {\n      typeDePavage = parseInt(this.sup3)\n    }\n    while (couples.length < this.nbQuestions && nombrePavageTestes < 6) {\n      nombreTentatives = 0\n      monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n      const tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2], [3, 2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2], [5, 3]]]\n      Nx = tailles[taillePavage - 1][typeDePavage - 1][0]\n      Ny = tailles[taillePavage - 1][typeDePavage - 1][1]\n      monpavage.construit(typeDePavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n      fenetre = monpavage.fenetre\n      while (couples.length < this.nbQuestions + 2 && nombreTentatives < 3) { // On cherche d pour avoir suffisamment de couples\n        couples = [] // On vide la liste des couples pour une nouvelle recherche\n        index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 2 points dans 2 polygones distincts.\n        index2 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3), index1)\n        while (!comparenbsommets(monpavage.polygones[index1], monpavage.polygones[index2])) { // On vérifie que les deux polygones sont compatibles\n          index2 = (index2 + 1) % (monpavage.polygones.length - 1)\n        }\n        A = monpavage.barycentres[index1] // On prends  les barycentres\n        B = monpavage.barycentres[index2]\n        v = vecteur(A, B)\n        while (compare2sommets(A, B)) { // On vérifie qu'ils sont bien distincts sinon, on change.\n          index2 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3), index1)\n          while (!comparenbsommets(monpavage.polygones[index1], monpavage.polygones[index2])) { // On vérifie que les deux polygones sont compatibles\n            index2 = (index2 + 1) % (monpavage.polygones.length - 1)\n          }\n          A = monpavage.barycentres[index1] // On prends  les barycentres\n          B = monpavage.barycentres[index2]\n          v = vecteur(A, B)\n        }\n        d = segment(A, B)\n        d.styleExtremites = '->'\n        d.color = 'red'\n        d.epaisseur = 3\n        for (let i = 1; i <= monpavage.nb_polygones; i++) { // on crée une liste des couples (antécédents, images)\n          image = translacion(monpavage, v, i)\n          if (image !== -1) { // si l'image du polygone i existe, on ajoute le couple à la liste\n            couples.push([i, image])\n          }\n        }\n        couples = videcouples(couples) // supprime tous les couples en double (x,y)=(y,x)\n        nombreTentatives++\n      }\n      if (couples.length < this.nbQuestions) {\n        if (this.sup3 === 7) {\n          typeDePavage = (typeDePavage + 1) % 5 + 1\n        }\n        nombrePavageTestes++\n      }\n    }\n    if (couples.length < this.nbQuestions) {\n      console.log('trop de questions, augmentez la taille du pavage')\n      return\n    }\n\n    objets.push(d) // la droite d est trouvée\n    couples = shuffle(couples) // on mélange les couples\n    for (let i = 0; i < monpavage.nb_polygones; i++) {\n      objets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n    }\n    if (this.sup2) { // Doit-on montrer les centres des figures ?\n      for (let i = 0; i < monpavage.nb_polygones; i++) {\n        objets.push(monpavage.tracesCentres[i])\n      }\n    }\n    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n      objets.push(monpavage.polygones[i])\n    }\n    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n    texte += '<br>'\n    for (let i = 0; i < this.nbQuestions; i++) {\n      texte += `Quelle est l'image de la figure $${couples[i][0]}$ dans la translation transformant la figure $${index1 + 1}$ en la figure $${index2 + 1}$ ?<br>`\n      texteCorr += `L'image de la figure $${couples[i][0]}$ dans la translation transformant la figure $${index1 + 1}$ en la figure $${index2 + 1}$ est la figure ${couples[i][1]}<br>`\n      //      symetriques=associesommets(monpavage.polygones[couples[i][0]-1],monpavage.polygones[couples[i][1]-1],d)\n      if (this.correctionDetaillee) {\n        A = monpavage.barycentres[couples[i][0] - 1]\n        B = monpavage.barycentres[couples[i][1] - 1]\n        d = v.representant(A, B)\n        d.color = texcolors(i)\n        t = this.nbQuestions * 3\n        P1 = monpavage.polygones[couples[i][0] - 1]\n        P1.color = texcolors(i)\n        P1.couleurDeRemplissage = texcolors(i)\n        P1.opaciteDeRemplissage = 0.5\n        P1.epaisseur = 2\n        P2 = monpavage.polygones[couples[i][1] - 1]\n        P2.color = texcolors(i)\n        P2.couleurDeRemplissage = texcolors(i)\n        P2.opaciteDeRemplissage = 0.5\n        P2.epaisseur = 2\n        P3 = translationAnimee(P1, v, `begin=\"${i * 3}s;${i * 3 + t}s;${i * 3 + t * 2}s\" end=\"${i * 3 + 2}s;${i * 3 + t + 2}s;${i * 3 + t * 2 + 2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9 * this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n        P3.color = texcolors(i)\n        P3.epaisseur = 2\n        objetsCorrection.push(tracePoint(A, B), d, codeSegment(A, B, '//', texcolors(i)), P1, P2, P3)\n      }\n    }\n    if (this.correctionDetaillee) {\n      texteCorr += mathalea2d(fenetre, objets, objetsCorrection)\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, ' 1 : Taille modeste\\n 2 : Grande taille']\n  this.besoinFormulaire2CaseACocher = ['Montrer les centres']\n  this.besoinFormulaire3Numerique = ['Choix du pavage', 8, '1 : Triangles équilatéraux\\n2 : Carrés\\n3 : Hexagones réguliers\\n4 : Carrés et triangles équilatéraux\\n5 : Octogones et carrés\\n 6 : Losanges (pavage hexagonal d\\'écolier)\\n7 : Hexagones et triangles équilatéraux\\n8 : Un des sept pavages au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","PavageEtTranslation2d","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetaillee","correctionDetailleeDisponible","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","Number","videcouples","tableau","k","length","j","splice","comparenbsommets","poly1","poly2","listePoints","compare2sommets","sommet1","sommet2","egal","x","y","comparesommets","trouve","trouves","P","M","translacion","pavage","v","numero","poly","polygones","pol","sympoly","translation","objets","objetsCorrection","P1","P2","P3","t","Nx","Ny","index1","index2","A","B","d","image","monpavage","fenetre","taillePavage","couples","listeCorrections","listeQuestions","nombreTentatives","texte","texteCorr","typeDePavage","nombrePavageTestes","randint","parseInt","tailles","construit","Math","floor","nb_polygones","ceil","barycentres","vecteur","segment","styleExtremites","color","epaisseur","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","tracesCentres","mathalea2d","representant","texcolors","couleurDeRemplissage","opaciteDeRemplissage","translationAnimee","tracePoint","codeSegment","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}