{"version":3,"file":"js/52654.55263eb724587453c5c1.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5L14-6.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, combinaisonListes } from '../../modules/outils.js'\nimport ChoisirUneExpressionLitterale from './_Choisir_expression_litterale.js'\n\nexport const titre = 'Déterminer la dernière opération à effectuer dans une expression numérique'\n\n/**\n * Référence 5L14-6\n * Déterminer la dernière opération à effectuer dans une expression numérique\n * @author Sébastien Lozano\n */\nexport default function DeterminerDerniereOperationExpNum () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.debug = false\n  this.consigne = ''\n  this.nbQuestions = 4\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = true\n  this.sup2 = false // si false alors utilisation de nombres entiers, si true alors utilisation de nombres à un chiffre après la virgule.\n  this.titre = titre\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    const typesDeQuestionsDisponibles = [5] // expressions complexes\n    let expn; let expc; let decimal = 1; let nbOperations; let resultats; let lastOp\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    if (this.sup2) decimal = 10\n    for (let i = 0, texte, texteCorr, val1, val2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      nbOperations = parseInt(listeTypeDeQuestions[i])\n      val1 = randint(2, 5)\n      val2 = randint(6, 9)\n      resultats = ChoisirUneExpressionLitterale(nbOperations, decimal, val1, val2, this.sup)\n      expn = resultats[1]\n      expc = resultats[2]\n      lastOp = resultats[4]\n      const str = expc.split('=')\n\n      switch (listeTypeDeQuestions[i]) {\n        case 5:\n          if (expn.indexOf('ou') > 0) expn = expn.substring(0, expn.indexOf('ou')) // on supprime la deuxième expression fractionnaire\n          this.consigne = 'Déterminer la dernière opération à effectuer .'\n          texte = `$${str[1]}$`\n          // texte=`${expn}`\n          if (this.debug) {\n            texte += '<br><br>=====CORRECTION======<br>'\n            texte += '$'\n            for (let l = 1; l < str.length - 1; l++) {\n              texte += `${str[l]}=`\n            };\n            texte += `${str[str.length - 1]}`\n            texte += `<br>$\\\\textbf{La dernière opération dans $${str[1]}$ est donc une ${lastOp}.}$`\n            texteCorr = ''\n          } else {\n            texteCorr = '$'\n            for (let l = 1; l < str.length - 1; l++) {\n              texteCorr += `${str[l]}=`\n            };\n            texteCorr += `${str[str.length - 1]}`\n            texteCorr += `<br>$\\\\textbf{La dernière opération dans $${str[1]}$ est donc une ${lastOp}.}$`\n          };\n\n          break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaire2CaseACocher = ['Avec décimaux.', false]\n  this.besoinFormulaireCaseACocher = ['Avec le signe × devant les parenthèses', true]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","DeterminerDerniereOperationExpNum","Exercice","this","debug","consigne","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","expn","expc","nbOperations","resultats","lastOp","decimal","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","val1","val2","i","cpt","parseInt","randint","ChoisirUneExpressionLitterale","str","split","indexOf","substring","l","length","push","listeQuestionsToContenu","besoinFormulaire2CaseACocher","besoinFormulaireCaseACocher","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}