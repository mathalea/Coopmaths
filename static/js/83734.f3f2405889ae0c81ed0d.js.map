{"version":3,"file":"js/83734.f3f2405889ae0c81ed0d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2N20-1.js","webpack://mathalea/./src/js/exercices/5e/5A10.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import ListeDesDiviseurs5e from '../5e/5A10.js'\nexport const titre = 'Écrire la liste de tous les diviseurs d’un entier'\nexport { interactifReady, interactifType } from '../5e/5A10.js'\nexport const dateDeModifImportante = '28/10/2021'\n/**\n * Clone de 5A10 pour les 2nde\n *\n * @author Jean-Claude Lhote\n */\nexport default function ListeDesDiviseurs2nde () {\n  ListeDesDiviseurs5e.call(this)\n  this.sup = '3-3-3'\n  this.sup2 = '8-10-12'\n  this.sup3 = 12\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, combinaisonListesSansChangerOrdre, listeDiviseurs, texteOuPas, contraindreValeur, texNombre } from '../../modules/outils.js'\n\nimport { setReponse, ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\n\nexport const dateDeModifImportante = '28/10/2021'\nexport const titre = 'Écrire la liste de tous les diviseurs d’un entier'\n\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\n\n/**\n * 5A10 - Division Euclidienne; diviseurs, multiples, critères de divisibilité\n * Exercice bilan\n * @author Sébastien Lozano & Jean Claude Lhote\n */\nexport default function ListeDesDiviseurs5e () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  // this.consigne += `<br>`;\n  context.isHtml ? this.spacing = 2 : this.spacing = 1\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = '2-2-2'\n  this.sup2 = '6-6-6'\n  this.sup3 = 10\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestions\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n    this.autoCorrection = []\n\n    const typesDeQuestionsDisponibles = [1, 1, 2]\n    const nbChiffresMax = combinaisonListesSansChangerOrdre(this.sup.split('-'), this.nbQuestions)\n    const nbDiviseursMax = combinaisonListesSansChangerOrdre(this.sup2.split('-'), this.nbQuestions)\n    this.sup3 = contraindreValeur(2, 16, parseFloat(this.sup3), 10)\n\n    for (let i = 0; i < this.nbQuestions; i++) {\n      nbChiffresMax[i] = contraindreValeur(1, 5, parseFloat(nbChiffresMax[i]), 2)\n    }\n    for (let i = 0; i < this.nbQuestions; i++) {\n      nbDiviseursMax[i] = contraindreValeur(2, parseInt(this.sup3), parseFloat(nbDiviseursMax[i]), 6)\n    }\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    for (let i = 0, listeDiviseursM = [], nbDiviseursM, M, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n      if (nbDiviseursMax[i] > 10) {\n        nbChiffresMax[i] = Math.min(nbChiffresMax[i], 3)\n      }\n      do {\n        M = randint(10 ** (nbChiffresMax[i] - 1), 10 ** nbChiffresMax[i] - 1)\n        listeDiviseursM = listeDiviseurs(M)\n        nbDiviseursM = listeDiviseursM.length\n      } while (nbDiviseursM < Math.max(2, nbDiviseursMax[i] - 3) || nbDiviseursM > nbDiviseursMax[i])\n\n      switch (typesDeQuestions) {\n        case 1:\n          texte = ''\n          if (this.interactif) {\n            texte += `À l'aide du tableau, écrire la liste de tous les diviseurs de $${texNombre(M)}$ <b>dans l'ordre croissant séparés par une virgule.</b>`\n          } else {\n            texte += `Compléter le tableau suivant et faire la liste de tous les diviseurs de ${texNombre(M)}`\n          }\n          if (!context.isHtml) {\n            texte += '$\\\\medskip$'\n          };\n          texte += '<br>'\n          if (context.isHtml) {\n            texte += '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n'\n          } else {\n            texte += '$\\\\begin{array}{|c|c|c|}\\n'\n          };\n          texte += '\\\\hline\\n'\n          texte += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`\n          texte += '\\\\hline\\n'\n\n          if (nbDiviseursM % 2 === 0) { // si il y a un nombre pair de diviseurs\n            for (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n              texte += texteOuPas(listeDiviseurs(M)[m]) + ' & ' + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`\n              texte += '\\\\hline\\n'\n            };\n          } else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n            for (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n              texte += texteOuPas(listeDiviseurs(M)[m]) + ' & ' + texteOuPas(listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)]) + `& ${texteOuPas(M)} \\\\\\\\\\n`\n            };\n            texte += texteOuPas(listeDiviseurs(M)[(nbDiviseursM - 1) / 2]) + ' & ' + texteOuPas(listeDiviseurs(M)[(nbDiviseursM - 1) / 2]) + `& ${texteOuPas(M)} \\\\\\\\\\n`\n            texte += '\\\\hline\\n'\n          };\n          texte += '\\\\end{array}\\n$'\n          texte += '<br>'\n          // correction\n          texteCorr = `Le tableau suivant contient tous les couples de facteurs dont le produit vaut ${M}`\n          if (!context.isHtml) {\n            texteCorr += '$\\\\medskip$'\n          };\n          texteCorr += '<br>'\n          if (context.isHtml) {\n            texteCorr += '$\\\\def\\\\arraystretch{2.5}\\\\begin{array}{|c|c|c|}\\n'\n          } else {\n            texteCorr += '$\\\\begin{array}{|c|c|c|}\\n'\n          };\n          texteCorr += '\\\\hline\\n'\n          texteCorr += `\\\\text{Facteur n°1} & \\\\text{Facteur n°2} & \\\\text{Produit donnant } ${M} \\\\\\\\\\n`\n          texteCorr += '\\\\hline\\n'\n\n          if (nbDiviseursM % 2 === 0) { // si il y a un nombre pair de diviseurs\n            for (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n              texteCorr += listeDiviseurs(M)[m] + ' & ' + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`\n              texteCorr += '\\\\hline\\n'\n            };\n          } else { // sinon il est impair, cela n'arrive qu'avvec les carrés parfaits\n            for (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n              texteCorr += listeDiviseurs(M)[m] + ' & ' + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + `& ${M} \\\\\\\\\\n`\n            };\n            texteCorr += listeDiviseurs(M)[(nbDiviseursM - 1) / 2] + ' & ' + listeDiviseurs(M)[(nbDiviseursM - 1) / 2] + `& ${M} \\\\\\\\\\n`\n            texteCorr += '\\\\hline\\n'\n          };\n          texteCorr += '\\\\end{array}\\n$'\n          if (!context.isHtml) {\n            texteCorr += '$\\\\medskip$'\n          };\n          texteCorr += '<br>'\n          texteCorr += `${M} a donc ${nbDiviseursM} diviseurs qui sont : `\n          texteCorr += '1'\n          for (let w = 1; w < listeDiviseurs(M).length; w++) {\n            texteCorr += ' ; ' + listeDiviseurs(M)[w]\n          };\n          texteCorr += '.'\n          break\n        case 2: // liste des diviseurs\n          texte = ''\n          if (this.interactif) {\n            texte += `Écrire la liste de tous les diviseurs de $${texNombre(M)}$ <b>dans l'ordre croissant séparés par une virgule.</b>`\n          } else {\n            texte += `Écrire la liste de tous les diviseurs de ${texNombre(M)}.`\n          }\n          texteCorr = `Pour trouver la liste des diviseurs de ${M} on cherche tous les produits de deux facteurs qui donnent ${M}. En écrivant toujours le plus petit facteur en premier.<br>`\n          texteCorr += `Il est suffisant de chercher des diviseurs inférieurs au plus grand nombre dont le carré vaut ${M}, par exemple ici, ${Math.trunc(Math.sqrt(M))}$\\\\times $${Math.trunc(Math.sqrt(M))} = ${Math.trunc(Math.sqrt(M)) * Math.trunc(Math.sqrt(M))}<${M}`\n          texteCorr += ` et ${Math.trunc(Math.sqrt(M)) + 1}$\\\\times $${Math.trunc(Math.sqrt(M)) + 1} = ${(Math.trunc(Math.sqrt(M)) + 1) * (Math.trunc(Math.sqrt(M)) + 1)}>${M} donc il suffit d'arrêter la recherche de facteur à ${Math.trunc(Math.sqrt(M))}.`\n          texteCorr += ` En effet, si ${M} est le produit de deux entiers p$\\\\times $q avec p < q alors si p$\\\\times $p > ${M} c'est que q$\\\\times $q < ${M} mais dans ce cas p serait supérieur à q sinon p$\\\\times $q serait inférieur à ${M} ce qui ne doit pas être le cas.<br>`\n          if (listeDiviseurs(M).length % 2 === 0) { // si il y a un nombre pair de diviseurs\n            for (let m = 0; m < (listeDiviseurs(M).length / 2); m++) {\n              texteCorr += '' + listeDiviseurs(M)[m] + '$\\\\times $' + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + ` = ${M}<br>`\n            };\n          } else {\n            for (let m = 0; m < ((listeDiviseurs(M).length - 1) / 2); m++) {\n              texteCorr += '' + listeDiviseurs(M)[m] + '$\\\\times $' + listeDiviseurs(M)[(listeDiviseurs(M).length - m - 1)] + '<br>'\n            };\n            texteCorr += '' + listeDiviseurs(M)[(listeDiviseurs(M).length - 1) / 2] + '$\\\\times $' + listeDiviseurs(M)[(listeDiviseurs(M).length - 1) / 2] + ` = ${M}<br>`\n          };\n          texteCorr += `Chacun des facteurs de la liste ci-dessus est un diviseur de ${M}.<br>`\n          texteCorr += `La liste des diviseurs de ${M} est donc `\n          texteCorr += '1'\n          for (let w = 1; w < listeDiviseurs(M).length; w++) {\n            texteCorr += ' ; ' + listeDiviseurs(M)[w]\n          };\n          texteCorr += '.'\n          break\n      };\n      setReponse(this, i, JSON.stringify(listeDiviseurs(M)).replace('[', '').replace(']', ''))\n      texte += ajouteChampTexteMathLive(this, i, 'largeur35 inline', { texte: `<br> Les diviseurs de $${texNombre(M)}$ sont : ` })\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireTexte = ['Nombres de chiffres des entiers (un par question) séparés par des tirets', '2-2-2']\n  this.besoinFormulaire2Texte = ['Nombre maximum de diviseurs des entiers (un par question) séparés par des tirets', '6-6-6']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","dateDeModifImportante","ListeDesDiviseurs2nde","ListeDesDiviseurs5e","this","sup","sup2","sup3","interactifReady","interactifType","Exercice","consigne","context","spacing","spacingCorr","nbQuestions","nbCols","nbColsCorr","nouvelleVersion","typesDeQuestions","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","nbChiffresMax","combinaisonListesSansChangerOrdre","split","nbDiviseursMax","contraindreValeur","parseFloat","i","parseInt","listeTypeDeQuestions","nbDiviseursM","M","texte","texteCorr","listeDiviseursM","cpt","Math","min","randint","listeDiviseurs","length","max","interactif","texNombre","m","texteOuPas","w","trunc","sqrt","setReponse","JSON","stringify","replace","ajouteChampTexteMathLive","indexOf","push","listeQuestionsToContenu","besoinFormulaireTexte","besoinFormulaire2Texte","boutonAide","consigneCorrection","introduction","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}