{"version":3,"file":"js/5414.ca64d2972cc21474c198.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2F32.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, arrondi, texNombre, inferieurouegal, superieurouegal, texteEnCouleurEtGras, miseEnEvidence, enleveDoublonNum } from '../../modules/outils.js'\nimport { antecedentInterpole, graphiqueInterpole, imageInterpolee, latexParCoordonnees, mathalea2d, point, repere2, segment, tracePoint } from '../../modules/2d.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport { context } from '../../modules/context.js'\nexport const titre = 'Lecture graphique'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCHybride'\n\n/**\n * Description didactique de l'exercice\n * @author\n * Référence\n*/\nexport default function LecturesGraphiques () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n  this.nbQuestions = 6\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.sup = 1 // Niveau de difficulté\n  this.tailleDiaporama = 100 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    const typeFonctionsDisponibles = ['minimum', 'maximum', 'image', 'plusPetitAntécédent', 'plusGrandAntécédent', 'nombreAntécédents'] // On créé 3 types de questions\n    const listeTypeQuestions = combinaisonListes(typeFonctionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    let mini = 4\n    let maxi = -4\n    let antecedentTrouve\n    let enonceAMC = ''\n    const reponses = []\n    const origine = latexParCoordonnees('O', -0.5, -0.5, 'black', 10, 10, '')\n    let antecedents = []\n    let s = []\n    const r = repere2({\n      xMin: -4,\n      yMin: -4,\n      xMax: 4,\n      yMax: 4,\n      yUnite: 2,\n      xUnite: 3,\n      grilleSecondaire: true,\n      grilleSecondaireYDistance: 0.1,\n      grilleSecondaireXDistance: 0.1,\n      grilleSecondaireXMin: -4,\n      grilleSecondaireXMax: 4,\n      grilleSecondaireYMin: -4,\n      grilleSecondaireYMax: 4\n    })\n    const noeuds = []\n    for (let x = -4, y = -5; x < 5; x += 2) {\n      y = randint(-4, 4, y)\n      noeuds.push([x, y])\n      mini = Math.min(y, mini)\n      maxi = Math.max(y, maxi)\n    }\n    const minimum = [-15, 5]\n    const maximum = [-15, -5]\n    for (let i = 0; i < noeuds.length; i++) {\n      if (minimum[1] > noeuds[i][1]) {\n        minimum[0] = noeuds[i][0]\n        minimum[1] = noeuds[i][1]\n      }\n      if (maximum[1] < noeuds[i][1]) {\n        maximum[0] = noeuds[i][0]\n        maximum[1] = noeuds[i][1]\n      }\n    }\n    const graph = graphiqueInterpole(noeuds, { repere: r, step: 0.1 })\n    this.introduction = 'Voici la représentation graphique de la fonction $f$ définie sur $[-4;4]$.<br>' + mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, origine) + '<br>'\n\n    for (let i = 0, x0, y0, k, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      switch (listeTypeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 'minimum':\n          texte = 'Lire graphiquement le minimum de la fonction $f$ sur l\\'intervalle $[-4;4]$.<br>'\n          if (!context.isAmc) setReponse(this, i, minimum[1])\n          reponses[i] = minimum[1]\n          texte += ajouteChampTexteMathLive(this, i)\n          texteCorr = `Le minimum de $f$ est $${minimum[1]}$ et il est atteint en $x=${minimum[0]}$.`\n          if (this.correctionDetaillee) {\n            s[0] = segment(minimum[0] * 3, 0, minimum[0] * 3, minimum[1] * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            s[1] = segment(minimum[0] * 3, minimum[1] * 2, 0, minimum[1] * 2)\n            s[1].color = 'red'\n            s[1].pointilles = true\n            s[2] = tracePoint(point(minimum[0] * 3, minimum[1] * 2), 'red')\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n        case 'maximum':\n          texte = 'Lire graphiquement le maximum de la fonction $f$ sur l\\'intervalle $[-4;4]$.<br>'\n          if (!context.isAmc) setReponse(this, i, maximum[1])\n          reponses[i] = maximum[1]\n          texte += ajouteChampTexteMathLive(this, i)\n          texteCorr = `Le maximum de $f$ est $${maximum[1]}$ et il est atteint en $x=${maximum[0]}$.`\n          if (this.correctionDetaillee) {\n            s[0] = segment(maximum[0] * 3, 0, maximum[0] * 3, maximum[1] * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            s[1] = segment(maximum[0] * 3, maximum[1] * 2, 0, maximum[1] * 2)\n            s[1].color = 'red'\n            s[1].pointilles = true\n            s[2] = tracePoint(point(maximum[0] * 3, maximum[1] * 2), 'red')\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n\n        case 'image':\n          s = []\n          x0 = randint(-4, 4)\n          k = 0\n          while (x0 > noeuds[k + 1][0]) {\n            k++\n          }\n          y0 = arrondi(imageInterpolee([[noeuds[k][0], noeuds[k][1]], [noeuds[k + 1][0], noeuds[k + 1][1]]], x0), 1)\n          texte = `Lire graphiquement l'image de ${texNombre(x0)} par la fonction $f$.<br>Donner la réponse à 0,1 près.<br>`\n          if (!context.isAmc) setReponse(this, i, y0)\n          reponses[i] = y0\n          texte += ajouteChampTexteMathLive(this, i)\n          texteCorr = `$f(${texNombre(x0)})=${texNombre(y0)}$.`\n          if (this.correctionDetaillee) {\n            s[0] = segment(0, y0 * 2, x0 * 3, y0 * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            s[1] = segment(x0 * 3, y0 * 2, x0 * 3, 0)\n            s[1].color = 'red'\n            s[1].pointilles = true\n            s[2] = tracePoint(point(x0 * 3, y0 * 2), 'red')\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n        case 'plusPetitAntécédent':\n          s = []\n          antecedentTrouve = false\n          while (!antecedentTrouve) {\n            y0 = randint(mini * 10 + 2, maxi * 10 - 2) / 10\n            k = 0\n            while (k < noeuds.length && (y0 > Math.max(noeuds[k][1], noeuds[k + 1][1]) || y0 < Math.min(noeuds[k][1], noeuds[k + 1][1]))) {\n              k++\n            }\n            if (k < noeuds.length) antecedentTrouve = true\n          }\n          x0 = antecedentInterpole([[noeuds[k][0], noeuds[k][1]], [noeuds[k + 1][0], noeuds[k + 1][1]]], y0)\n          texte = `Lire graphiquement le plus petit antécédent de ${texNombre(y0)} par la fonction $f$.<br>Donner la réponse à 0,1 près.<br>`\n          if (!context.isAmc) setReponse(this, i, arrondi(x0, 1))\n          reponses[i] = arrondi(x0, 1)\n          texte += ajouteChampTexteMathLive(this, i)\n          texteCorr = `Le plus petit antécédent à $0,1$ près de $${texNombre(y0)}$ est $${miseEnEvidence(texNombre(arrondi(x0, 1)))}$.`\n          if (this.correctionDetaillee) {\n            s[0] = segment(-15, y0 * 2, 15, y0 * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            s[1] = segment(x0 * 3, y0 * 2, x0 * 3, 0)\n            s[1].color = 'red'\n            s[1].pointilles = true\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n        case 'plusGrandAntécédent':\n          s = []\n          antecedentTrouve = false\n          while (!antecedentTrouve) {\n            y0 = randint(mini * 10 + 2, maxi * 10 - 2) / 10\n            k = noeuds.length - 1\n            while (k > 0 && (y0 > Math.max(noeuds[k - 1][1], noeuds[k][1]) || y0 < Math.min(noeuds[k - 1][1], noeuds[k][1]))) {\n              k--\n            }\n            if (k > 0) antecedentTrouve = true\n          }\n          x0 = antecedentInterpole([[noeuds[k - 1][0], noeuds[k - 1][1]], [noeuds[k][0], noeuds[k][1]]], y0)\n          texte = `Lire graphiquement le plus grand antécédent de ${texNombre(y0)} par la fonction $f$.<br>Donner la réponse à 0,1 près.<br>`\n          if (!context.isAmc) setReponse(this, i, arrondi(x0, 1))\n          reponses[i] = arrondi(x0, 1)\n          texte += ajouteChampTexteMathLive(this, i)\n          texteCorr = `Le plus grand antécédent de $${texNombre(y0)}$ à $0,1$ près est $${miseEnEvidence(texNombre(arrondi(x0, 1)))}$.`\n          if (this.correctionDetaillee) {\n            s[0] = segment(-15, y0 * 2, 15, y0 * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            s[1] = segment(x0 * 3, y0 * 2, x0 * 3, 0)\n            s[1].color = 'red'\n            s[1].pointilles = true\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n        case 'nombreAntécédents':\n          antecedents = []\n          s = []\n          antecedentTrouve = 0\n          y0 = randint(mini * 10 + 2, maxi * 10 - 2) / 10\n          k = 0\n          while (k < noeuds.length - 1) {\n            if (inferieurouegal(y0, Math.max(noeuds[k][1], noeuds[k + 1][1])) && superieurouegal(y0, Math.min(noeuds[k][1], noeuds[k + 1][1]))) {\n              // il y a un antécédent sur l'intervalle [ymini,ymaxi]\n              x0 = antecedentInterpole([[noeuds[k][0], noeuds[k][1]], [noeuds[k + 1][0], noeuds[k + 1][1]]], y0)\n              antecedents.push(x0)\n            }\n            k++\n          }\n          antecedents = enleveDoublonNum(antecedents, 0.1)\n          antecedentTrouve = antecedents.length\n          texte = `Lire graphiquement le nombre d'antécédents de ${texNombre(y0)} par la fonction $f$.<br>`\n          texte += ajouteChampTexteMathLive(this, i)\n          switch (antecedentTrouve) {\n            case 0:\n              texteCorr = `$${texNombre(y0)}$ ${texteEnCouleurEtGras(\"ne possède pas d'antécédent\")} sur $[-4;4]$.<br>`\n              break\n            case 1 :\n              texteCorr = `$${texNombre(y0)}$ ${texteEnCouleurEtGras('possède un unique antécédent')} sur $[-4;4]$.<br>`\n              texteCorr = `L'antécédent de $${texNombre(y0)}$ est aux environs de $${texNombre(arrondi(antecedents[0], 1))}$.<br>`\n              break\n            default :\n              texteCorr = `$${texNombre(y0)}$ possède $${miseEnEvidence(antecedentTrouve)}$ antécédents sur $[-4;4]$.<br>`\n              texteCorr += `Les antécédents de $${texNombre(y0)}$ sont aux environs des nombres suivants : `\n              for (let l = 0; l < antecedentTrouve - 1; l++) {\n                texteCorr += `$${texNombre(arrondi(antecedents[l], 1))}$ ; `\n              }\n              texteCorr += `$${texNombre(arrondi(antecedents[antecedentTrouve - 1], 1))}$.<br>`\n              break\n          }\n          if (!context.isAmc) setReponse(this, i, antecedentTrouve)\n          reponses[i] = antecedentTrouve\n          if (this.correctionDetaillee) {\n            s[0] = segment(-15, y0 * 2, 15, y0 * 2)\n            s[0].pointilles = true\n            s[0].color = 'blue'\n            for (let l = 0; l < antecedentTrouve; l++) {\n              s[l * 2 + 1] = tracePoint(point(antecedents[l] * 3, y0 * 2), 'red')\n              s[l * 2 + 1].epaisseur = 2\n              s[l * 2 + 2] = segment(antecedents[l] * 3, 0, antecedents[l] * 3, y0 * 2)\n              s[l * 2 + 2].pointilles = true\n              s[l * 2 + 2].color = 'red'\n            }\n            texteCorr += mathalea2d({ xmin: -13.5, ymin: -9, xmax: 13.5, ymax: 9, scale: 0.5 }, r, graph, s, origine)\n          }\n          break\n      }\n      graph.epaisseur = 2\n      if (this.questionJamaisPosee(i, listeTypeQuestions[i], x0, y0, k)) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    if (context.isAmc) {\n      enonceAMC = this.introduction\n      for (let i = 0; i < this.nbQuestions; i++) {\n        enonceAMC += `${i + 1}) ${this.listeQuestions[i]}<br>`\n      }\n      this.autoCorrection[0] = {\n        enonce: enonceAMC,\n        propositions: []\n      }\n      for (let i = 0; i < this.nbQuestions; i++) {\n        if (listeTypeQuestions[i] === 'nombreAntécédents') {\n          this.autoCorrection[0].propositions[i] =\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: this.listeCorrections[i],\n              statut: '',\n              reponse: {\n                texte: '',\n                valeur: reponses[i],\n                param: {\n                  digits: 1,\n                  decimals: 0,\n                  signe: false,\n                  approx: 0\n                }\n              }\n            }]\n          }\n        } else {\n          this.autoCorrection[0].propositions[i] =\n          {\n            type: 'AMCNum',\n            propositions: [{\n              texte: this.listeCorrections[i],\n              statut: '',\n              reponse: {\n                texte: '',\n                valeur: reponses[i],\n                param: {\n                  digits: 2,\n                  decimals: 1,\n                  signe: true,\n                  approx: 0\n                }\n              }\n            }]\n          }\n        }\n      }\n    } else listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté', 2,'1 : Facile\\n2 : Difficile'];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","LecturesGraphiques","Exercice","this","consigne","correctionDetailleeDisponible","correctionDetaillee","nbQuestions","nbCols","nbColsCorr","sup","tailleDiaporama","video","nouvelleVersion","listeQuestions","listeCorrections","listeTypeQuestions","combinaisonListes","antecedentTrouve","mini","maxi","enonceAMC","reponses","origine","latexParCoordonnees","antecedents","s","r","repere2","xMin","yMin","xMax","yMax","yUnite","xUnite","grilleSecondaire","grilleSecondaireYDistance","grilleSecondaireXDistance","grilleSecondaireXMin","grilleSecondaireXMax","grilleSecondaireYMin","grilleSecondaireYMax","noeuds","x","y","randint","push","Math","min","max","minimum","maximum","i","length","graph","graphiqueInterpole","repere","step","introduction","mathalea2d","xmin","ymin","xmax","ymax","scale","x0","y0","k","texte","texteCorr","cpt","context","setReponse","ajouteChampTexteMathLive","segment","pointilles","color","tracePoint","point","arrondi","imageInterpolee","texNombre","antecedentInterpole","miseEnEvidence","inferieurouegal","superieurouegal","enleveDoublonNum","texteEnCouleurEtGras","l","epaisseur","questionJamaisPosee","autoCorrection","enonce","propositions","type","statut","reponse","valeur","param","digits","decimals","signe","approx","listeQuestionsToContenu","boutonAide","consigneCorrection","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}