{"version":3,"file":"js/98062.f1bed34bb304d727653d.js","mappings":"2LAIO,MAAMA,EAAQ,4CAMN,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,SAAW,GAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,gBAAkB,IACvBL,KAAKM,MAAQ,GACbN,KAAKO,QAAU,EACfP,KAAKQ,YAAc,EACnBR,KAAKS,IAAM,EAEXT,KAAKU,gBAAkB,WACrBV,KAAKS,IAAME,SAASX,KAAKS,KACzBT,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,IAKdC,EAAAA,EAAAA,KAAiB,KAAM,IAAM,GAAK,SAAU,QAAS,GAE/D,IAAK,IAAWC,EAAGC,EAASC,EAAIC,EAAIC,EAAWC,EAAUC,EAAQC,EAAOC,EAA/DC,EAAI,EAAsEC,EAAM,EACvFD,EAAIxB,KAAKE,aAAeuB,EAAM,IAAK,CAEnC,GAAiB,IAAbzB,KAAKS,IAAW,CAClBM,GAAIW,EAAAA,EAAAA,KAAQ,EAAG,IAAKC,EAAAA,EAAAA,KAAO,EAAE,EAAG,IAChCX,GAAIU,EAAAA,EAAAA,KAAQ,EAAG,IAAKC,EAAAA,EAAAA,KAAO,EAAE,EAAG,IAEtB,IAANZ,GAAiB,IAANC,IACbD,EAAI,GAGNO,EAAS,8EAA4EM,EAAAA,EAAAA,KAAeb,EAAGC,WAEvGO,EAAY,6EACZA,GAAc,kCAAiCR,yCAAyCC,WAExFO,GAAa,qFACbA,GAAa,0EACbA,GAAa,8EACbA,GAAa,yCACbA,GAAc,yCAAuCK,EAAAA,EAAAA,KAAeb,EAAGC,aACvEO,GAAc,6BAA2BM,EAAAA,EAAAA,MAAoBb,EAAGD,WAChEQ,GAAc,eAAcR,IACxBA,EAAI,GACNQ,GAAc,wCAAsCM,EAAAA,EAAAA,MAAoBb,EAAGD,+BAA8Bc,EAAAA,EAAAA,MAAoBb,EAAGD,WAChIM,EAAS,CAAC,OAAQ,GAAI,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,OAE/CE,GAAc,wCAAsCM,EAAAA,EAAAA,MAAoBb,EAAGD,+BAA8Bc,EAAAA,EAAAA,MAAoBb,EAAGD,WAChIM,EAAS,CAAC,OAAQ,GAAI,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,MAEjDE,GAAa,uDACbA,IAAaO,EAAAA,EAAAA,KAAW,CAAEC,MAAO,GAAKC,MAAO,IAAKC,KAAM,GAAIC,KAAM,GAAKC,MAAO,KAAOC,EAAAA,EAAAA,KAAmB,CACtGC,QAAS,CACP,CAEE,CAAC,MAAO,EAAG,IAAK,CAAE,UAAQT,EAAAA,EAAAA,KAAeb,EAAGC,MAAO,EAAG,KAGxD,CAAC,aAAc,GAAK,SAAOa,EAAAA,EAAAA,MAAoBb,EAAGD,MAAO,GAAI,aAAc,KAG7EuB,SAAU,CAACjB,GACXkB,gBAAiB,GACjBC,MAAO,IACPC,QAAS,GACTC,IAAK,EACLC,cAAe,CAAC,GAAI,OAGtBpB,GAAa,mFACb,MAAMqB,EAAIC,GAAK9B,EAAI8B,EAAI7B,EACvBG,GAAY2B,EAAAA,EAAAA,OACZ1B,GAAW2B,EAAAA,EAAAA,KAAQH,EAAG,CAAEI,OAAQ7B,IAChC,MAAM8B,GAAIC,EAAAA,EAAAA,MAAOlC,EAAID,EAAG,EAAG,SAC3BG,GAAKiC,EAAAA,EAAAA,KAAWF,EAAG,OACnBhC,GAAKmC,EAAAA,EAAAA,KAAWH,EAAG,OACnB1B,IAAaO,EAAAA,EAAAA,KAAW,CACtBC,MAAO,EACPC,MAAO,EACPC,KAAM,EACNC,KAAM,GACLf,EAAWC,EAAUH,EAAIC,GAG1BlB,KAAKqD,oBAAoB7B,EAAGxB,KAAKS,IAAKM,EAAGC,KAE3ChB,KAAKY,eAAe0C,KAAKhC,GACzBtB,KAAKa,iBAAiByC,KAAK/B,GAC3BC,KAEFC,KAGF8B,EAAAA,EAAAA,KAAwBvD,OAE1BA,KAAKwD,0BAA4B,CAAC,qBAAsB,EAAG,uD,gBCtG9C,SAASzD,IAItBC,KAAKH,MAAQ,GACbG,KAAKyD,YAAa,EAclBzD,KAAKC,SAAW,GAChBD,KAAK0D,mBAAqB,GAC1B1D,KAAK2D,aAAe,GACpB3D,KAAKY,eAAiB,GACtBZ,KAAKa,iBAAmB,GACxBb,KAAK4D,QAAU,GACf5D,KAAK6D,kBAAoB,GACzB7D,KAAK8D,eAAiB,GACtB9D,KAAK+D,sBAAwB,GAK7B/D,KAAKO,QAAU,EACfP,KAAKQ,YAAc,EAKnBR,KAAKgE,mBAAoB,EACzBhE,KAAKiE,cAAgB,GACrBjE,KAAKkE,oBAAqB,EAC1BlE,KAAKmE,uBAAwB,EAC7BnE,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKoE,kBAAmB,EACxBpE,KAAKqE,sBAAuB,EAC5BrE,KAAKsE,mBAAoB,EACzBtE,KAAKuE,uBAAwB,EAM7BvE,KAAKwE,QAAS,EACdxE,KAAKK,gBAAkB,EAKvBL,KAAKE,YAAc,GACnBF,KAAKyE,mBAAqB,EAC1BzE,KAAK0E,+BAAgC,EACrC1E,KAAK2E,qBAAsB,EAC3B3E,KAAK4E,oBAAqB,EAC1B5E,KAAKM,MAAQ,GAEbN,KAAK6E,YAAa,EAClB7E,KAAK8E,uBAAwB,EAE7B9E,KAAKwD,2BAA4B,EACjCxD,KAAK+E,uBAAwB,EAC7B/E,KAAKgF,6BAA8B,EAEnChF,KAAKiF,4BAA6B,EAClCjF,KAAKkF,wBAAyB,EAC9BlF,KAAKmF,8BAA+B,EAEpCnF,KAAKoF,4BAA6B,EAClCpF,KAAKqF,wBAAyB,EAC9BrF,KAAKsF,8BAA+B,EAEpCtF,KAAKuF,4BAA6B,EAClCvF,KAAKwF,wBAAyB,EAC9BxF,KAAKyF,8BAA+B,EAMpCzF,KAAK0F,cAAe,EASpB1F,KAAK2F,eAAiB,GAMtB3F,KAAKU,gBAAkB,SAAUkF,KAQjC5F,KAAKqD,oBAAsB,SAAU7B,KAAMqE,GAC/B,IAANrE,IAASxB,KAAK2F,eAAiB,IACnC,IAAIG,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAIjG,KAAK2F,eAAeO,QAAQJ,IAAmB,KAGjD9F,KAAK2F,eAAerC,KAAKwC,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/2e/2F10-5.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, reduireAxPlusB, choice, texFractionReduite } from '../../modules/outils.js'\nimport { tableauDeVariation, mathalea2d, texteParPosition, repere, labelPoint, point, tracePoint, courbe2, repere2 } from '../../modules/2d.js'\n\nexport const titre = 'Déterminer le signe d’une fonction affine'\n\n/**\n* @author Stéphane Guyon\n* 2F10-3\n*/\nexport default function signefonctionaffine () {\n  Exercice.call(this)\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3 // On complète le nb de questions\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.tailleDiaporama = 100\n  this.video = ''\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = []\n    this.listeCorrections = []\n    // let typesDeQuestionsDisponibles = []\n    // typesDeQuestionsDisponibles = [1, 2]// On complète selon le nb de cas dans l'exo (switch)\n\n    // const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    const o = texteParPosition('O', -0.5, -0.5, 'milieu', 'black', 1)\n\n    for (let i = 0, a, b, F, r, tA, lA, monRepere, maCourbe, ligne1, texte, texteCorr, cpt = 0;\n      i < this.nbQuestions && cpt < 50;) { // on rajoute les variables dont on a besoin\n      // typesDeQuestions = listeTypeDeQuestions[i]\n      if (this.sup === 1) {\n        a = randint(1, 4) * choice([-1, 1])// coefficient a de la fonction affine\n        b = randint(0, 4) * choice([-1, 1])// coefficient b de la fonction affine\n\n        if (a === 0 && b === 0) { // On évite la fonction nulle\n          a = 1\n        }\n\n        texte = `Déterminer le signe de la fonction $f$ définie sur $\\\\mathbb R$ par $f(x)=${reduireAxPlusB(a, b)}$ <br>`\n\n        texteCorr = 'On reconnaît que $f$ est une fonction affine, de la forme $f(x)=ax+b$.<br>'\n        texteCorr += `Son coefficient $a$ vaut : $~a=${a}~$ et son coefficient $b$ vaut : $~b=${b}$. <br>`\n        // texteCorr += `Selon les notations, on peut aussi appeler $f$ sous la forme $f(x)=mx+p$ avec : $m=${a}$ et $p=${b}$. <br>`\n        texteCorr += 'On sait qu\\'une fonction affine non constante admet une unique racine, $~x_0$.<br> '\n        texteCorr += '$f(x)$ est du signe de $~a~$ pour les valeurs supérieures à $~x_0$,<br>'\n        texteCorr += 'et du signe de l\\'opposé de $~a~$ pour les valeurs inférieures à $~x_0$.<br>'\n        texteCorr += 'On cherche donc la valeur de $~x_0~$, '\n        texteCorr += `qui est la solution de l'équation : $${reduireAxPlusB(a, b)}=0$.<br>`\n        texteCorr += `On obtient alors : $~x_0=${texFractionReduite(-b, a)} $<br>`\n        texteCorr += `Comme  $~a=~${a}`\n        if (a > 0) {\n          texteCorr += `>0~$, $~f(x)$ est positive pour $~x>${texFractionReduite(-b, a)} ~$ et négative pour $~x<${texFractionReduite(-b, a)} $<br>`\n          ligne1 = ['Line', 30, '', 0, '-', 20, 'z', 20, '+']\n        } else {\n          texteCorr += `<0$,  $f(x)~$ est négative pour $~x>${texFractionReduite(-b, a)} ~$ et positive pour $~x<${texFractionReduite(-b, a)} $<br>`\n          ligne1 = ['Line', 30, '', 0, '+', 20, 'z', 20, '-']\n        }\n        texteCorr += 'On peut synthétiser cela dans un tableau de signes :'\n        texteCorr += mathalea2d({ xmin: -0.5, ymin: -6.1, xmax: 30, ymax: 0.1, scale: 0.5 }, tableauDeVariation({\n          tabInit: [\n            [\n              // Première colonne du tableau avec le format [chaine d'entête, hauteur de ligne, nombre de pixels de largeur estimée du texte pour le centrage]\n              ['$x$', 2, 30], [`$f(x)=${reduireAxPlusB(a, b)}$`, 2, 50]\n            ],\n            // Première ligne du tableau avec chaque antécédent suivi de son nombre de pixels de largeur estimée du texte pour le centrage\n            ['$-\\\\infty$', 30, `$x_0=${texFractionReduite(-b, a)}$`, 20, '$+\\\\infty$', 30]\n          ],\n          // tabLines ci-dessous contient les autres lignes du tableau.\n          tabLines: [ligne1],\n          colorBackground: '',\n          espcl: 3.5, // taille en cm entre deux antécédents\n          deltacl: 0.8, // distance entre la bordure et les premiers et derniers antécédents\n          lgt: 8, // taille de la première colonne en cm\n          hauteurLignes: [15, 15]\n        }))\n\n        texteCorr += 'Pour illustrer la situation, on peut représenter graphiquement la fonction :<br>'\n        const f = x => a * x + b\n        monRepere = repere2()\n        maCourbe = courbe2(f, { repere: monRepere })\n        const A = point(-b / a, 0, '$x_0$')\n        lA = labelPoint(A, 'red')\n        tA = tracePoint(A, 'red') // Variable qui trace les points avec une croix\n        texteCorr += mathalea2d({\n          xmin: -5,\n          ymin: -5,\n          xmax: 6,\n          ymax: 6\n        }, monRepere, maCourbe, tA, lA)\n      }\n\n      if (this.questionJamaisPosee(i, this.sup, a, b)) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Types de question ', 2, '1 : Valeurs entières\\n2 : Valeurs fractionnaires.']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","signefonctionaffine","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","spacing","spacingCorr","sup","nouvelleVersion","parseInt","listeQuestions","listeCorrections","texteParPosition","a","b","tA","lA","monRepere","maCourbe","ligne1","texte","texteCorr","i","cpt","randint","choice","reduireAxPlusB","texFractionReduite","mathalea2d","xmin","ymin","xmax","ymax","scale","tableauDeVariation","tabInit","tabLines","colorBackground","espcl","deltacl","lgt","hauteurLignes","f","x","repere2","courbe2","repere","A","point","labelPoint","tracePoint","questionJamaisPosee","push","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}