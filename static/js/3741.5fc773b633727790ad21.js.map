{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G10-2.js","webpack://mathalea/./src/js/exercices/6e/_Utiliser_le_codage_pour_decrire.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Utiliser_le_codage_pour_decrire_6e","Utiliser_le_codage_pour_decrire","this","classe","Exercice","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","type_de_questions_disponibles","listeQuestions","listeCorrections","nom","params_enonce","params_correction","objets_enonce","objets_correction","A","B","C","D","E","F","s1","s2","s3","s4","s5","s6","s7","s8","medAC","medBC","dBD","dBC","dAC","dAF","sommets","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","creerNomDePolygone","push","shuffle","point","pointAdistance","randint","segment","similitude","pointSurSegment","longueur","mediatrice","droite","rotation","pointIntersectionDD","x","xmin","Math","min","ymin","y","xmax","max","ymax","pixelsParCm","scale","mainlevee","amplitude","codageAngleDroit","codeSegments","labelPoint","polygone","affiniteOrtho","angleOriente","translation2Points","codeAngle","length","mathalea2d","indexOf","listeQuestionsToContenu","consigne","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/3741.5fc773b633727790ad21.js","sourcesContent":["import Utiliser_le_codage_pour_decrire from './_Utiliser_le_codage_pour_decrire.js';\nexport const titre = 'Utiliser le codage pour décrire une figure'\n\n/**\n * Exercice du test de positionnement 5e\n * Variantes à venir...\n * @Auteur Jean-Claude Lhote\n * Référence 6G10-2\n */\nexport default function Utiliser_le_codage_pour_decrire_6e() {\n  Utiliser_le_codage_pour_decrire.call(this)\n  this.titre = titre;\n  this.classe = 6\n}\n\n","import Exercice from '../ClasseExercice.js';\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListes, creerNomDePolygone } from '../../modules/outils.js';\nimport { point, pointSurSegment, pointIntersectionDD, pointAdistance, labelPoint, droite, mediatrice, segment, polygone, translation2Points, rotation, affiniteOrtho, similitude, codageAngleDroit, codeSegments, codeAngle, longueur, angleOriente, mathalea2d } from '../../modules/2d.js';\n\nexport default function Utiliser_le_codage_pour_decrire() {\n  \"use strict\";\n  Exercice.call(this);\n  this.titre = \"Utiliser le codage pour décrire une figure\";\n  this.nbQuestions = 1;\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.sup = 1;\n  this.sup2 = 1;\n  this.nouvelleVersion = function () {\n    let type_de_questions_disponibles;\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let nom, sommets = [], params_enonce, params_correction, objets_enonce, objets_correction;\n    let A, B, C, D, E, F, s1, s2, s3, s4, s5, s6, s7, s8, medAC, medBC, dBD, dBC, dAC, dAF;\n    if (this.classe == 6)\n      type_de_questions_disponibles = [1, 2, 3];\n    else\n      type_de_questions_disponibles = [1, 2, 3, 4];\n    let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles, this.nbQuestions);\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objets_enonce = [];\n      objets_correction = [];\n      params_enonce = {};\n      params_correction = {};\n      nom = creerNomDePolygone(6, \"PQ\");\n      for (let i = 0; i < 6; i++)\n        sommets.push(nom[i]);\n      sommets = shuffle(sommets);\n\n      A = point(0, 0, sommets[0], 'left');\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          C = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[2], 'right');\n          s2 = segment(A, C);\n          B = similitude(C, A, -85, randint(5, 7) / 10, sommets[1], 'below');\n          s1 = segment(A, B);\n          E = pointSurSegment(A, C, longueur(A, C) / 2.2, sommets[4], 'below');\n          medBC = mediatrice(C, B);\n          medAC = mediatrice(A, C);\n          dBC = droite(C, B);\n          dBD = rotation(dBC, B, randint(-40, -20));\n          dAC = droite(A, C);\n          dAF = rotation(dAC, A, randint(30, 40));\n          D = pointIntersectionDD(dBD, medBC, sommets[3], 'below');\n          D.x += randint(-2, 2, 0) / 5;\n          F = pointIntersectionDD(dAF, medAC, sommets[5], 'above');\n          F.x += randint(-2, 2, 0) / 5;\n          s5 = segment(B, D);\n          s6 = segment(C, D);\n          s3 = segment(A, F);\n          s7 = segment(C, F);\n          s8 = segment(E, F);\n          s4 = segment(B, C);\n          params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1.5), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 };\n          objets_enonce.push(s1, s2, s4, s8, s7, s3, s6, s5, codageAngleDroit(B, A, C), codeSegments('//', 'black', A, F, F, C), codeSegments('|||', 'black', A, E, E, C), codeSegments('O', 'black', B, D, D, C), labelPoint(A, B, C, D, E, F), codageAngleDroit(A, E, F));\n          texte = `<br>À l'aide du schéma ci-dessous, déterminer :<br>`;\n          texte += `- deux segments de même longueur ;<br>`;\n          texte += `- le milieu d'un segment ;<br>`;\n          texte += `- un triangle rectangle ;<br>`;\n          texte += `- un triangle isocèle ;<br>`;\n          texteCorr = `- Deux segments de même mesure : [$${sommets[0] + sommets[4]}$] et $[${sommets[4] + sommets[2]}]$ ou $[${sommets[0] + sommets[5]}]$ et $[${sommets[5] + sommets[2]}]$`;\n          texteCorr += ` ou $[${sommets[1] + sommets[3]}]$ et $[${sommets[3] + sommets[2]}]$.<br>`;\n          texteCorr += `- $${sommets[4]}$ est le milieu du segment $[${sommets[0] + sommets[2]}]$.<br>`;\n          texteCorr += `- $${sommets[0] + sommets[1] + sommets[2]}$ est un triangle rectangle en $${sommets[0]}$, $${sommets[0] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$ et $${sommets[2] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$.<br>`;\n          texteCorr += `- $${sommets[0] + sommets[5] + sommets[2]}$ est un triangle isocèle en $${sommets[5]}$ et $${sommets[1] + sommets[3] + sommets[2]}$ est un triangle isocèle en $${sommets[3]}$.<br>`;\n          break;\n        case 2:\n          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above');\n          C = similitude(A, B, randint(85, 90), 0.95, sommets[2], 'below');\n          D = similitude(B, A, randint(-93, -87), 1, sommets[3], 'below');\n          F = similitude(B, C, -55, 0.8, sommets[5], 'right');\n          E = similitude(C, D, 57, randint(85, 115) / 100, sommets[4], 'right');\n          s1 = segment(D, E);\n          s2 = segment(C, E);\n          s4 = segment(C, F);\n          s5 = segment(B, F);\n          s6 = polygone(A, B, C, D);\n          params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 };\n          objets_correction.push(labelPoint(A, B, C, D, E, F), s1, s2, s4, s5, s6);\n          objets_correction.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A));\n          objets_correction.push(codeSegments('||', 'black', D, E, C, E), codeSegments('O', 'black', A, B, B, C, C, D, D, A), codeSegments('|||', 'black', F, C, B, F));\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un carré et $${sommets[3] + sommets[2] + sommets[4]}$ est un triangle équilatéral ($${sommets[4]}$ est à l'intérieur du carré $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`;\n          texte += ` $${sommets[1] + sommets[2] + sommets[5]}$ est un triangle isocèle en $${sommets[5]}$ ($${sommets[5]}$ est à l'extérieur du carré $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`;\n          texte += `Représenter cette configuration par un schéma à main levée et ajouter les codages nécessaires.`;\n          texteCorr = `Voilà ci-dessous un schéma qui pourrait convenir à la situation.<br>`;\n          break;\n        case 3:\n          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above');\n          C = similitude(A, B, randint(85, 90), 0.5, sommets[2], 'below');\n          D = similitude(B, A, randint(-93, -87), 0.53, sommets[3], 'below');\n          s1 = segment(D, B);\n          s2 = segment(A, C);\n          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above');\n          F = affiniteOrtho(E, droite(B, C), -1.1, sommets[5], 'right');\n          s3 = polygone(A, B, C, D);\n          s4 = segment(B, F);\n          s5 = segment(C, F);\n          params_correction = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 };\n          objets_correction.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5);\n          objets_correction.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A));\n          objets_correction.push(codeSegments('||', 'black', D, E, E, B, A, E, E, C, F, C, B, F), codeSegments('O', 'black', A, B, D, C), codeSegments('/', 'black', A, D, B, C));\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`;\n          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`;\n          texte += `Représenter cette configuration par un schéma à main levée et ajouter les codages nécssaires.`;\n          texteCorr = `Voilà ci-dessous un schéma qui pourrait convenir à la situation.<br>`;\n          break;\n        case 4:\n          B = pointAdistance(A, randint(6, 7), randint(-30, 30), sommets[1], 'above right');\n          F = similitude(A, B, randint(-70, -50), randint(80, 90) / 100, sommets[5], 'left');\n          D = similitude(B, A, angleOriente(A, B, F) + randint(3, 5), randint(15, 20) / 10, sommets[3], 'below');\n          C = translation2Points(point(B.x + 1, B.y + 1), A, D, sommets[2], 'below right');\n          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above right');\n          s3 = polygone(A, B, C, D);\n          s4 = segment(B, F);\n          s5 = segment(A, F);\n          s1 = segment(B, D);\n          s2 = segment(A, C);\n          params_enonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 0.8 };\n          objets_enonce.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5);\n          objets_enonce.push(codeAngle(D, A, B, 2, '|', 'red', 2), codeAngle(B, C, D, 2, '|', 'red', 2), codeAngle(A, B, F, 2, '|', 'red', 2));\n          objets_enonce.push(codeAngle(A, B, C, 2, '||', 'blue', 2), codeAngle(A, D, C, 2, '||', 'blue', 2));\n          objets_enonce.push(codeAngle(B, A, F, 2, '///', 'green', 3), codeAngle(B, F, A, 2, '///', 'green', 3));\n\n          objets_enonce.push(codeSegments('||', 'black', B, E, E, D), codeSegments('O', 'black', A, E, E, C));\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`;\n          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`;\n          texte = `<br>À l'aide du schéma ci-dessous, déterminer :<br>`;\n          texte += `- la nature du triangle $${sommets[0] + sommets[1] + sommets[5]}$ ;<br>`;\n          texte += `- la nature du quadrilatère $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ ;<br>`;\n          texte += `- la nature de l'angle $\\\\widehat{${sommets[5] + sommets[1] + sommets[2]}}$ ;<br>`;\n          texteCorr = `Le triangle $${sommets[0] + sommets[1] + sommets[5]}$ a deux angles de même mesure, c'est donc un triangle isocèle en $${sommets[1]}$.<br>`;\n          texteCorr += `Le quadrilatère  $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ a des diagonales qui se coupent en leur milieu, c'est donc un parallélogramme.<br>`;\n          texteCorr += `Dans un parallélogramme, les angles consécutifs sont supplémentaires (leur somme vaut 180°).<br>`;\n          texteCorr += ` D'après le codage, l'angle $\\\\widehat{${sommets[2] + sommets[1] + sommets[5]}}$ est la somme de deux angles supplémentaires. C'est donc un angle plat.<br>`;\n\n\n          break;\n      }\n      if (objets_enonce.length > 0)\n        texte += mathalea2d(params_enonce, objets_enonce);\n      if (objets_correction.length > 0)\n        texteCorr += mathalea2d(params_correction, objets_correction);\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}