{"version":3,"file":"js/78246.f36be6ed3853ff96a2ab.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A12-2.js","webpack://mathalea/./src/js/exercices/4e/4A12.js"],"sourcesContent":["import ProblemesEvenementsRecurrents from '../4e/4A12.js'\nexport const titre = 'Problèmes d\\'évenements récurrents'\n\n/**\n * Problèmes d'événements récurrents avec résolution à l'aide de décompositions en produits de facteurs premiers\n * @author Guillaume Valmont\n * reference 3A12-2\n * 30/10/2021\n */\nexport default function ProblemesEvenementsRecurrents3e () {\n  ProblemesEvenementsRecurrents.call(this)\n  this.titre = titre\n  this.sup = 2\n}\n","import Exercice from '../Exercice.js'\nimport { combinaisonListes, listeNombresPremiersStrictJusqua, listeQuestionsToContenu, nombreAvecEspace, randint, texteEnCouleurEtGras, personne, warnMessage } from '../../modules/outils.js'\nimport { setReponse, ajouteChampTexteMathLive } from '../../modules/gestionInteractif.js'\nimport { svgEngrenages } from '../../modules/macroSvgJs.js'\nimport { context } from '../../modules/context.js'\nexport const interactifReady = true // pour définir qu'exercice peut s'afficher en mode interactif.\nexport const interactifType = 'mathLive'\nexport const amcReady = true // pour définir que l'exercice est exportable AMC\nexport const amcType = 'AMCNum'\n\nexport const titre = 'Problèmes d\\'évenements récurrents'\n\n/**\n * Problèmes d'événements récurrents avec résolution à l'aide de décompositions en produits de facteurs premiers\n * @author Guillaume Valmont\n * Référence 4A12\n * 30/10/2021\n*/\nexport default function ProblemesEvenementsRecurrents () {\n  Exercice.call(this)\n  this.nbQuestions = 1\n  this.sup = 1\n  this.besoinFormulaireNumerique = ['Difficulté', 3, '1 : 1 facteur commun, 1 facteur spécifique\\n2 : 2 facteurs communs, 1 facteur spécifique\\n3 : 2 facteurs communs, 2 facteurs spécifiques']\n  this.correctionDetailleeDisponible = true\n  this.interactif = false\n\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = []\n    this.autoCorrection = []\n\n    const preListePremiers = listeNombresPremiersStrictJusqua(12)\n    const listePremiers = combinaisonListes(preListePremiers, this.nbQuestions * 5)\n    const saveurs = combinaisonListes(['guirlande', 'voiture', 'fusée', 'restau-ciné', 'engrenages'], this.nbQuestions)\n    for (let i = 0, texte, texteCorr, indicesFacteursCommuns, indicesFacteursA, indicesFacteursB, Commun, A, B, decompositionCommun, decompositionA, decompositionB, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      indicesFacteursCommuns = []\n      switch (this.sup) {\n        case 1:\n          indicesFacteursCommuns = [randint(0, 2)]\n          indicesFacteursA = [randint(0, 4, indicesFacteursCommuns)]\n          indicesFacteursB = [randint(0, 4, indicesFacteursCommuns.concat(indicesFacteursA))]\n          Commun = listePremiers[indicesFacteursCommuns[0] + i * 5]\n          A = listePremiers[indicesFacteursA[0] + i * 5]\n          B = listePremiers[indicesFacteursB[0] + i * 5]\n          break\n        case 2:\n          indicesFacteursCommuns = [randint(0, 2), randint(0, 2)]\n          indicesFacteursCommuns = indicesFacteursCommuns.sort()\n          indicesFacteursA = [randint(3, 4, indicesFacteursCommuns)]\n          indicesFacteursB = [randint(3, 4, indicesFacteursCommuns.concat(indicesFacteursA))]\n          Commun = listePremiers[indicesFacteursCommuns[0] + i * 5] * listePremiers[indicesFacteursCommuns[1] + i * 5]\n          A = listePremiers[indicesFacteursA[0] + i * 5]\n          B = listePremiers[indicesFacteursB[0] + i * 5]\n          break\n        case 3:\n          indicesFacteursCommuns = [randint(0, 2), randint(0, 2)]\n          indicesFacteursCommuns = indicesFacteursCommuns.sort((a, b) => a - b)\n          indicesFacteursA = [randint(0, 2), randint(3, 4, indicesFacteursCommuns)]\n          indicesFacteursB = [randint(0, 2, indicesFacteursA), randint(3, 4, indicesFacteursCommuns.concat(indicesFacteursA))]\n          Commun = listePremiers[indicesFacteursCommuns[0] + i * 5] * listePremiers[indicesFacteursCommuns[1] + i * 5]\n          A = listePremiers[indicesFacteursA[0] + i * 5] * listePremiers[indicesFacteursA[1] + i * 5]\n          B = listePremiers[indicesFacteursB[0] + i * 5] * listePremiers[indicesFacteursB[1] + i * 5]\n          break\n        default: // identique au cas 1\n          indicesFacteursCommuns = [randint(0, 2)]\n          indicesFacteursA = [randint(0, 4, indicesFacteursCommuns)]\n          indicesFacteursB = [randint(0, 4, indicesFacteursCommuns.concat(indicesFacteursA))]\n          Commun = listePremiers[indicesFacteursCommuns[0] + i * 5]\n          A = listePremiers[indicesFacteursA[0] + i * 5]\n          B = listePremiers[indicesFacteursB[0] + i * 5]\n          break\n      }\n      let unite, phenomene1, phenomene2, texte1, texte2, texte3, texte4, cycles\n      const variableEngrenages = randint(1, 3)\n      const Robert = personne()\n      switch (saveurs[i]) {\n        case 'guirlande':\n          texte = `Une guirlande électrique est constituée de lumières rouges et vertes.<br>\n          les lumières rouges s’allument toutes les ${nombreAvecEspace(Commun * A)} secondes et les vertes toutes les ${nombreAvecEspace(Commun * B)} secondes.<br>\n          À un instant donné, on voit les lumières rouges et vertes allumées en même temps.<br>\n          Au bout de combien de temps ce phénomène se reproduira-t-il une nouvelle fois ?`\n          unite = 'secondes'\n          phenomene1 = 'les lumières rouges'\n          phenomene2 = 'les lumières vertes'\n          texte1 = 'Les lumières rouges seront allumées'\n          texte2 = 'les lumières vertes'\n          texte3 = 'Les lumières rouges et vertes seront allumées en même temps'\n          texte4 = 'le temps nécessaire pour qu\\'elle se rallument la première fois simultanément'\n          cycles = ' cycles'\n          break\n        case 'voiture':\n          texte = `Pour l'entretien de sa voiture, ${Robert.prenom} veut se tenir à un calendrier très précis :<br>\n          ${Robert.pronom} nettoie l'intérieur de sa voiture tous les ${nombreAvecEspace(Commun * A)} jours et l'extérieur tous les ${nombreAvecEspace(Commun * B)} jours.<br>\n          Aujourd'hui, ${Robert.pronom} a fait les deux.<br>\n          Au bout de combien de temps fera-t-${Robert.pronom} les deux dans la même journée ?`\n          unite = 'jours'\n          phenomene1 = 'le nettoyage intérieur'\n          phenomene2 = 'le nettoyage extérieur'\n          texte1 = 'L\\'intérieur sera nettoyé'\n          texte2 = 'l\\'extérieur'\n          texte3 = 'Les nettoyages intérieur et extérieur auront lieu le même jour'\n          texte4 = 'le nombre de jours avant un nettoyage intérieur et extérieur'\n          cycles = ' nettoyages'\n          break\n        case 'fusée':\n          texte = `Pour l'entretien de sa fusée, ${Robert.prenom} doit se tenir à un calendrier très précis :<br>\n          ${Robert.pronom} remplace la coiffe tous les ${nombreAvecEspace(Commun * A)} jours et les boosters tous les ${nombreAvecEspace(Commun * B)} jours.<br>\n          Aujourd'hui, ${Robert.pronom} a fait les deux.<br>\n          Au bout de combien de temps fera-t-${Robert.pronom} les deux dans la même journée ?`\n          unite = 'jours'\n          phenomene1 = 'le remplacement de la coiffe'\n          phenomene2 = 'le remplacement des boosters'\n          texte1 = 'La coiffe sera remplacée'\n          texte2 = 'les boosters'\n          texte3 = 'Le remplacement de la coiffe et des boosters auront lieu le même jour'\n          texte4 = 'le nombre de jours avant le remplacement de la coiffe et des boosters'\n          cycles = ' remplacements'\n          break\n        case 'restau-ciné':\n          texte = `Pour sa résolution de cette année, ${Robert.prenom} a décidé de ne pas abuser des bonnes choses :<br>\n          ${Robert.Pronom} s'accorde le droit d'aller au restaurant tous les ${nombreAvecEspace(Commun * A)} jours et d'aller au cinéma tous les ${nombreAvecEspace(Commun * B)} jours.<br>\n          Aujourd'hui, ${Robert.pronom} s'est fait un « restau - ciné ».<br>\n          Au bout de combien de temps s'en fera-t-${Robert.pronom} un autre ?`\n          unite = 'jours'\n          phenomene1 = 'aller au restaurant'\n          phenomene2 = 'aller au cinéma'\n          texte1 = `${Robert.Pronom} va au restaurant`\n          texte2 = 'au cinéma'\n          texte3 = `${Robert.pronom} se fera à nouveau un « restau - ciné »`\n          texte4 = 'le nombre de jours avant le prochain « restau - ciné »'\n          cycles = ' sorties'\n          break\n        case 'engrenages':\n          if (context.isHtml) {\n            // eslint-disable-next-line no-var\n            var pourcentage = '100%'\n            let txtIntro = ''\n            const idUnique = `${numeroExercice}_${Date.now()}`\n            const idDivIntro = `divIntro${idUnique}`\n            txtIntro += warnMessage('Attention, les roues ci-dessous ne comportent pas le nombre de dents de l\\'énoncé!', 'nombres', 'Coup de pouce')\n            txtIntro += `<div id=\"${idDivIntro}\" style=\"width: ${pourcentage}; height: 50px; display : table \"></div>`\n            svgEngrenages(idDivIntro, 200, 200)\n            this.introduction = txtIntro\n          }\n          texte = `Une première roue possède ${nombreAvecEspace(Commun * A)} dents et une seconde en possède ${nombreAvecEspace(Commun * B)}.<br>\n          Elles tournent jusqu'à revenir (pour la première fois) en position initiale<br>`\n          if (this.interactif) {\n            switch (variableEngrenages) {\n              case 1:\n                texte += 'De combien de dents chaque roue aura tourné ?'\n                break\n              case 2:\n                texte += 'Combien de tours aura fait la première roue ?'\n                break\n              case 3:\n                texte += 'Combien de tours aura fait la deuxième roue ?'\n                break\n              default:\n                break\n            }\n          } else {\n            texte += `De combien de dents chaque roue aura tourné ?<br>\n            Combien de tours aura effectué chaque roue ?`\n          }\n          unite = 'dents'\n          phenomene1 = 'la première roue'\n          phenomene2 = 'la deuxième roue'\n          texte1 = 'La première fera un tour'\n          texte2 = 'la seconde'\n          texte3 = 'Elles reviendront en position initiale'\n          texte4 = 'le nombre de dents avant de revenir pour la première fois en position initiale'\n          cycles = ' tours'\n          break\n        default:\n          break\n      }\n      switch (this.sup) {\n        case 1:\n          decompositionCommun = texteEnCouleurEtGras(nombreAvecEspace(Commun), 'blue')\n          decompositionA = texteEnCouleurEtGras(nombreAvecEspace(A), 'red')\n          decompositionB = texteEnCouleurEtGras(nombreAvecEspace(B), 'green')\n          break\n        case 2:\n          decompositionCommun = `${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursCommuns[0] + i * 5]), 'blue')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursCommuns[1] + i * 5]), 'blue')}`\n          decompositionA = texteEnCouleurEtGras(nombreAvecEspace(A), 'red')\n          decompositionB = texteEnCouleurEtGras(nombreAvecEspace(B), 'green')\n          break\n        case 3:\n          decompositionCommun = `${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursCommuns[0] + i * 5]), 'blue')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursCommuns[1] + i * 5]), 'blue')}`\n          decompositionA = `${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursA[0] + i * 5]), 'red')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursA[1] + i * 5]), 'red')}`\n          decompositionB = `${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursB[0]]), 'green')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(listePremiers[indicesFacteursB[1] + i * 5]), 'green')}`\n          break\n\n        default:\n          decompositionCommun = texteEnCouleurEtGras(nombreAvecEspace(Commun), 'blue')\n          decompositionA = texteEnCouleurEtGras(nombreAvecEspace(A), 'red')\n          decompositionB = texteEnCouleurEtGras(nombreAvecEspace(B), 'green')\n          break\n      }\n      texteCorr = ''\n      if (this.correctionDetaillee) {\n        texteCorr += `${texte1} à chaque multiple de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} ${unite}, ${texte2} à chaque multiple de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} ${unite}.<br>\n        ${texte3} à chaque multiple commun de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} et de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')}.<br>\n        Pour trouver ${texte4}, on cherche le plus petit multiple qu'ils ont en commun.<br>\n        Un moyen d'y arriver est de décomposer les nombres de ${unite} en produits de facteurs premiers et d'identifier les différences entre les décompositions :<br>`\n      }\n      if (this.sup === 3) {\n        if (indicesFacteursA[0] >= indicesFacteursCommuns[1]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[0] + i * 5], 'red')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[1] + i * 5], 'red')} <br>`\n        } else if (indicesFacteursA[0] >= indicesFacteursCommuns[0] && indicesFacteursA[0] < indicesFacteursCommuns[1]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[0] + i * 5], 'red')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[1] + i * 5], 'red')} <br>`\n        } else if (indicesFacteursA[0] < indicesFacteursCommuns[0]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[0] + i * 5], 'red')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursA[1] + i * 5], 'red')} <br>`\n        }\n        if (indicesFacteursB[0] >= indicesFacteursCommuns[1]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[0]], 'green')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[1] + i * 5], 'green')} <br>`\n        } else if (indicesFacteursB[0] >= indicesFacteursCommuns[0] && indicesFacteursB[0] < indicesFacteursCommuns[1]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[0]], 'green')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[1] + i * 5], 'green')} <br>`\n        } else if (indicesFacteursB[0] < indicesFacteursCommuns[0]) {\n          texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} = ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[0]], 'green')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[0] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursCommuns[1] + i * 5], 'blue')} $\\\\times$ ${texteEnCouleurEtGras(listePremiers[indicesFacteursB[1] + i * 5], 'green')} <br>`\n        }\n      } else {\n        texteCorr += `${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} = ${decompositionCommun} $\\\\times$ ${decompositionA} <br>\n        ${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} = ${decompositionCommun} $\\\\times$ ${decompositionB}<br>`\n      }\n      if (this.correctionDetaillee) {\n        texteCorr += 'On multiplie les facteurs communs aux deux décompositions avec les facteurs spécifiques à chaque décomposition :<br>'\n      }\n      texteCorr += `${decompositionCommun} $\\\\times$ ${decompositionA} $\\\\times$ ${decompositionB} = ${nombreAvecEspace(Commun * A * B)}<br>\n      Ce phénomène se produira à nouveau au bout de ${nombreAvecEspace(Commun * A * B)} ${unite}.<br>\n      (Après ${texteEnCouleurEtGras(nombreAvecEspace(B) + cycles, 'green')} pour ${texteEnCouleurEtGras(phenomene1, 'red')} et après ${texteEnCouleurEtGras(nombreAvecEspace(A) + cycles, 'red')} pour ${texteEnCouleurEtGras(phenomene2, 'green')})<br>`\n      if (this.correctionDetaillee) {\n        texteCorr += `${nombreAvecEspace(Commun * A * B)} est bien un multiple de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} car :\n         ${decompositionCommun} $\\\\times$ ${decompositionA} $\\\\times$ ${decompositionB} =\n         (${decompositionCommun} $\\\\times$ ${decompositionA}) $\\\\times$ ${decompositionB} =\n         ${texteEnCouleurEtGras(nombreAvecEspace(Commun * A), 'red')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(B), 'green')}<br>\n        ${nombreAvecEspace(Commun * A * B)} est bien un multiple de ${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} car :\n         ${decompositionCommun} $\\\\times$ ${decompositionA} $\\\\times$ ${decompositionB} =\n         ${decompositionCommun} $\\\\times$ ${decompositionB} $\\\\times$ ${decompositionA} =\n         (${decompositionCommun} $\\\\times$ ${decompositionB}) $\\\\times$ ${decompositionA} =\n         ${texteEnCouleurEtGras(nombreAvecEspace(Commun * B), 'green')} $\\\\times$ ${texteEnCouleurEtGras(nombreAvecEspace(A), 'red')}<br>`\n      }\n      if (saveurs[i] === 'engrenages') {\n        switch (variableEngrenages) {\n          case 1:\n            setReponse(this, i, Commun * A * B)\n            break\n          case 2:\n            setReponse(this, i, B)\n            break\n          case 3:\n            setReponse(this, i, A)\n            break\n          default:\n            break\n        }\n      } else {\n        setReponse(this, i, Commun * A * B)\n      }\n      if (this.interactif && !context.isAmc) { // Si l'exercice est interactif\n        if (saveurs[i] === 'engrenages' && variableEngrenages > 1) {\n          texte += ajouteChampTexteMathLive(this, i, 'inline largeur 25', { texteApres: ' tours' })\n        } else {\n          texte += ajouteChampTexteMathLive(this, i, 'inline largeur 25', { texteApres: ' ' + unite })\n        }\n      }\n      if (this.questionJamaisPosee(i, Commun, A * B)) {\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["titre","ProblemesEvenementsRecurrents3e","ProblemesEvenementsRecurrents","this","sup","interactifReady","interactifType","amcReady","amcType","Exercice","nbQuestions","besoinFormulaireNumerique","correctionDetailleeDisponible","interactif","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","autoCorrection","preListePremiers","listeNombresPremiersStrictJusqua","listePremiers","combinaisonListes","saveurs","texte","texteCorr","indicesFacteursCommuns","indicesFacteursA","indicesFacteursB","Commun","A","B","decompositionCommun","decompositionA","decompositionB","i","cpt","randint","concat","sort","a","b","unite","phenomene1","phenomene2","texte1","texte2","texte3","texte4","cycles","variableEngrenages","Robert","personne","nombreAvecEspace","prenom","pronom","Pronom","context","txtIntro","idDivIntro","Date","now","warnMessage","svgEngrenages","introduction","texteEnCouleurEtGras","correctionDetaillee","setReponse","ajouteChampTexteMathLive","texteApres","questionJamaisPosee","push","listeQuestionsToContenu"],"sourceRoot":""}