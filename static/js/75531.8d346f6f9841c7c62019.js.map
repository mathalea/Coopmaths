{"version":3,"file":"js/75531.8d346f6f9841c7c62019.js","mappings":"8QAIO,MAAMA,EAAQ,iDACRC,GAAW,EACXC,EAAU,UACVC,EAAiB,MAEjBC,GAAkB,EAMhB,SAASC,IACtBC,EAAAA,QAAAA,KAAcC,MACdA,KAAKP,MAAQA,EACbO,KAAKN,SAAWA,EAChBM,KAAKL,QAAUA,EACfK,KAAKH,gBAAkBA,EACvBG,KAAKJ,eAAiBA,EACtBI,KAAKC,SAAW,GAChBD,KAAKE,YAAc,EACnBF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,IAAM,EACXC,EAAAA,GAAAA,OAAkBN,KAAKO,YAAc,EAAMP,KAAKO,YAAc,EAE9DP,KAAKQ,gBAAkB,WACrBR,KAAKK,IAAMI,SAAST,KAAKK,KACzBL,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAKY,eAAiB,GACtB,IAAIC,EAAuB,GAEzBA,EADe,IAAbb,KAAKK,KACgBS,EAAAA,EAAAA,KAAkB,CAAC,aAAcd,KAAKE,aACvC,IAAbF,KAAKK,KACSS,EAAAA,EAAAA,KAAkB,CAAC,iBAAkBd,KAAKE,cAE1CY,EAAAA,EAAAA,KAAkB,CAAC,YAAa,iBAAkBd,KAAKE,aAEhF,MAAMa,EAA8B,CAClC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,EAAG,IACP,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KACT,CAAC,GAAI,GAAI,KAELC,EAAgB,GACtB,IACE,IACEC,EACAC,EACAC,EACAC,EACAC,EAAGC,EAAGC,EAAGC,EACTC,EACAC,EACAC,EAREC,EAAI,EASNC,EAAM,EACRD,EAAI5B,KAAKE,aAAe2B,EAAM,IAE9B,CAwBA,GAvBA7B,KAAKY,eAAegB,GAAK,GAEzB5B,KAAKY,eAAegB,GAAGE,QAAU,CAAEC,SAAS,GAC5C/B,KAAKY,eAAegB,GAAGI,aAAe,CACpC,CACEf,MAAO,MACPgB,QAAQ,GAEV,CACEhB,MAAO,MACPgB,QAAQ,IAGZR,GAAcS,EAAAA,EAAAA,KAAmB,EAAGlB,GACpCA,EAAcmB,KAAKV,GACnBH,EAAIG,EAAY,GAChBF,EAAIE,EAAY,GAChBD,EAAIC,EAAY,GAChBC,GAAUU,EAAAA,EAAAA,KAAOrB,IACjBsB,EAAAA,EAAAA,KAActB,EAA6BW,GAC3CP,EAAIO,EAAQ,GACZN,EAAIM,EAAQ,GACZL,EAAIK,EAAQ,GACoB,kBAA5Bb,EAAqBe,GAEvB,IADAP,GAAIiB,EAAAA,EAAAA,KAAQC,KAAKC,IAAInB,EAAI,EAAGD,EAAI,GAAIC,EAAI,GACjCF,GAAK,EAAIC,GAAK,IAAMC,GAAK,GAE9BA,GAAIiB,EAAAA,EAAAA,KAAQC,KAAKC,IAAInB,EAAI,EAAGD,EAAI,GAAIC,EAAI,GAU5C,OAPIF,EAAI,IAAKiB,EAAAA,EAAAA,KAAO,EAAC,GAAM,GAAM,GAAM,MAErCjB,GAAIsB,EAAAA,EAAAA,KAAOtB,EAAI,IACfC,GAAIqB,EAAAA,EAAAA,KAAOrB,EAAI,IACfC,GAAIoB,EAAAA,EAAAA,KAAOpB,EAAI,KAEjBM,GAAgBW,EAAAA,EAAAA,KAAQ,EAAG,GACnBX,GACN,KAAK,EACHV,EAAS,gBAAeQ,mBAA6BH,EAAIC,MACnDmB,EAAAA,EAAAA,KAAUrB,YAAYC,EAAIE,MAAKkB,EAAAA,EAAAA,KAAUtB,cAAcG,EAAIC,MAC3DkB,EAAAA,EAAAA,KAAUvB,UAChB,MACF,KAAK,EACHF,EAAS,gBAAeQ,oBAA8BF,EAAIC,MACpDkB,EAAAA,EAAAA,KAAUvB,YAAYG,EAAIE,MAAKkB,EAAAA,EAAAA,KAAUtB,cAAcE,EAAIC,MAC3DmB,EAAAA,EAAAA,KAAUrB,UAChB,MACF,KAAK,EACHJ,EAAS,gBAAeQ,mBAA6BH,EAAIE,MACnDkB,EAAAA,EAAAA,KAAUtB,YAAYE,EAAIC,MAAKmB,EAAAA,EAAAA,KAAUrB,gBAAgBE,EAAIC,MAC7DkB,EAAAA,EAAAA,KAAUvB,UAGpBF,GAAS,qCACTC,EAAa,qBAAoBO,gCAA0CH,EAAIC,OAE/EL,GAAc,QAAOI,EAAIC,QAAOmB,EAAAA,EAAAA,KAAUrB,SAAQsB,EAAAA,EAAAA,KAChDtB,GAAK,MAEPH,GAAc,QAAOI,EAAIE,OAAOD,EAAIC,QAAOkB,EAAAA,EAAAA,KAAUtB,SAAQsB,EAAAA,EAAAA,KAC3DvB,SACKwB,EAAAA,EAAAA,KAAWvB,GAAK,EAAID,GAAK,MACA,cAA5BN,EAAqBe,IACvB5B,KAAKY,eAAegB,GAAGI,aAAa,GAAGC,QAAS,EAChDf,GAAc,wBAAuBI,EAAIC,OAAOD,EAAIE,OAAOD,EAAIC,mDACXC,wBAAkCD,QAEtFxB,KAAKY,eAAegB,GAAGI,aAAa,GAAGC,QAAS,EAChDf,GAAc,wBAAuBI,EAAIC,YAAYD,EAAIE,OAAOD,EAAIC,yDACVC,2BAExDnB,EAAAA,GAAAA,QACFN,KAAKY,eAAegB,GAAGgB,OAAS3B,EAChCjB,KAAKY,eAAegB,GAAGI,aAAa,GAAGa,SAAW3B,GAEhDlB,KAAK8C,aACP7B,IAAS8B,EAAAA,EAAAA,IAAgB/C,KAAM4B,GAAGX,QAEQ,IAAxCjB,KAAKU,eAAesC,QAAQ/B,KAE9BjB,KAAKU,eAAeyB,KAAKlB,GACzBjB,KAAKW,iBAAiBwB,KAAKjB,GAC3BU,KAEFC,KAEFoB,EAAAA,EAAAA,KAAwBjD,OAE1BA,KAAKkD,0BAA4B,CAAC,oBAAqB,EAAG,uJ,gBClM7C,SAASnD,IAItBC,KAAKP,MAAQ,GACbO,KAAKmD,YAAa,EAclBnD,KAAKC,SAAW,GAChBD,KAAKoD,mBAAqB,GAC1BpD,KAAKqD,aAAe,GACpBrD,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxBX,KAAKsD,QAAU,GACftD,KAAKuD,kBAAoB,GACzBvD,KAAKY,eAAiB,GACtBZ,KAAKwD,sBAAwB,GAK7BxD,KAAKyD,QAAU,EACfzD,KAAKO,YAAc,EAKnBP,KAAK0D,mBAAoB,EACzB1D,KAAK2D,cAAgB,GACrB3D,KAAK4D,oBAAqB,EAC1B5D,KAAK6D,uBAAwB,EAC7B7D,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAK8D,kBAAmB,EACxB9D,KAAK+D,sBAAuB,EAC5B/D,KAAKgE,mBAAoB,EACzBhE,KAAKiE,uBAAwB,EAM7BjE,KAAKkE,QAAS,EACdlE,KAAKmE,gBAAkB,EAKvBnE,KAAKE,YAAc,GACnBF,KAAKoE,mBAAqB,EAC1BpE,KAAKqE,+BAAgC,EACrCrE,KAAKsE,qBAAsB,EAC3BtE,KAAKuE,oBAAqB,EAC1BvE,KAAKwE,MAAQ,GAEbxE,KAAK8C,YAAa,EAClB9C,KAAKyE,uBAAwB,EAE7BzE,KAAKkD,2BAA4B,EACjClD,KAAK0E,uBAAwB,EAC7B1E,KAAK2E,6BAA8B,EAEnC3E,KAAK4E,4BAA6B,EAClC5E,KAAK6E,wBAAyB,EAC9B7E,KAAK8E,8BAA+B,EAEpC9E,KAAK+E,4BAA6B,EAClC/E,KAAKgF,wBAAyB,EAC9BhF,KAAKiF,8BAA+B,EAEpCjF,KAAKkF,4BAA6B,EAClClF,KAAKmF,wBAAyB,EAC9BnF,KAAKoF,8BAA+B,EAMpCpF,KAAKqF,cAAe,EASpBrF,KAAKsF,eAAiB,GAMtBtF,KAAKQ,gBAAkB,SAAU+E,KAQjCvF,KAAKwF,oBAAsB,SAAU5D,KAAM6D,GAC/B,IAAN7D,IAAS5B,KAAKsF,eAAiB,IACnC,IAAII,EAAiB,GACrB,IAAK,MAAMC,KAAOF,OACJG,IAARD,IAAmBD,GAAkBC,EAAIE,YAE/C,QAAI7F,KAAKsF,eAAetC,QAAQ0C,IAAmB,KAGjD1F,KAAKsF,eAAenD,KAAKuD,IAClB,I","sources":["webpack://mathalea/./src/js/exercices/4e/4G21.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, enleveElement, choice, combinaisonListes, calcul, texNombrec, creerNomDePolygone, texNombre } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Déterminer si un triangle est rectangle ou pas'\nexport const amcReady = true\nexport const amcType = 'qcmMono' // QCM\nexport const interactifType = 'qcm'\n\nexport const interactifReady = true\n/**\n * À partir de la donnée des 3 longueurs d'un triangle, déterminer si il est rectangle ou pas.\n * @author Rémi Angot\n * 4G21\n */\nexport default function ReciproquePythagore () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.interactifType = interactifType\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 3\n  context.isHtml ? (this.spacingCorr = 2) : (this.spacingCorr = 1)\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let listeTypeDeQuestions = []\n    if (this.sup === 1) {\n      listeTypeDeQuestions = combinaisonListes(['rectangle'], this.nbQuestions)\n    } else if (this.sup === 2) {\n      listeTypeDeQuestions = combinaisonListes(['pas_rectangle'], this.nbQuestions)\n    } else { // (this.sup === 3)\n      listeTypeDeQuestions = combinaisonListes(['rectangle', 'pas_rectangle'], this.nbQuestions)\n    }\n    const listeTripletsPythagoriciens = [\n      [3, 4, 5],\n      [5, 12, 13],\n      [6, 8, 10],\n      [7, 24, 25],\n      [8, 15, 17],\n      [9, 12, 15],\n      [9, 40, 41],\n      [10, 24, 26],\n      [11, 60, 61],\n      [12, 16, 20],\n      [12, 35, 37],\n      [13, 84, 85],\n      [14, 48, 50],\n      [15, 20, 25],\n      [15, 36, 39],\n      [16, 30, 34],\n      [16, 63, 65],\n      [18, 24, 30],\n      [18, 80, 82],\n      [20, 21, 29],\n      [20, 48, 52],\n      [21, 28, 35],\n      [21, 72, 75],\n      [24, 32, 40],\n      [24, 45, 51],\n      [24, 70, 74],\n      [25, 60, 65],\n      [27, 36, 45],\n      [28, 45, 53],\n      [28, 96, 100],\n      [30, 40, 50],\n      [30, 72, 78],\n      [32, 60, 68],\n      [33, 44, 55],\n      [33, 56, 65],\n      [35, 84, 91],\n      [36, 48, 60],\n      [36, 77, 85],\n      [39, 52, 65],\n      [39, 80, 89],\n      [40, 42, 58],\n      [40, 75, 85],\n      [42, 56, 70],\n      [45, 60, 75],\n      [48, 55, 73],\n      [48, 64, 80],\n      [51, 68, 85],\n      [54, 72, 90],\n      [57, 76, 95],\n      [60, 63, 87],\n      [60, 80, 100],\n      [65, 72, 97]\n    ]\n    const nomsTriangles = [] // on mémorise les noms des triangles pour ne pas les redonner\n    for (\n      let i = 0,\n        texte,\n        texteCorr,\n        a,\n        b,\n        c, A, B, C,\n        nomTriangle,\n        triplet,\n        ordreDesCotes,\n        cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      this.autoCorrection[i] = {}\n\n      this.autoCorrection[i].options = { ordered: true }\n      this.autoCorrection[i].propositions = [\n        {\n          texte: 'Oui',\n          statut: false\n        },\n        {\n          texte: 'Non',\n          statut: false\n        }\n      ]\n      nomTriangle = creerNomDePolygone(3, nomsTriangles)\n      nomsTriangles.push(nomTriangle)\n      A = nomTriangle[0]\n      B = nomTriangle[1]\n      C = nomTriangle[2]\n      triplet = choice(listeTripletsPythagoriciens)\n      enleveElement(listeTripletsPythagoriciens, triplet) // Supprime le triplet pour les prochaines questions\n      a = triplet[0]\n      b = triplet[1]\n      c = triplet[2]\n      if (listeTypeDeQuestions[i] === 'pas_rectangle') {\n        c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        while (a ** 2 + b ** 2 === c ** 2) {\n          // si par hasard (est-ce possible ?) on retombe sur un triplet pythagoricien on change les valeurs\n          c = randint(Math.max(c - 3, b + 1), c + 3) // on modifie c en faisant attention à ce qu'il reste plus grand que b\n        }\n      }\n      if (a > 9 && choice([true, true, true, false])) {\n        // le plus souvent on utilise des décimaux\n        a = calcul(a / 10)\n        b = calcul(b / 10)\n        c = calcul(c / 10)\n      }\n      ordreDesCotes = randint(1, 3)\n      switch (ordreDesCotes) {\n        case 1:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + B\n            }=${texNombre(c)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n        case 2:\n          texte = `Le triangle $${nomTriangle}$ est tel que  $${B + C\n            }=${texNombre(a)}$ cm, $${A + C}=${texNombre(b)}$ cm et $${A + B\n            }=${texNombre(c)}$ cm.`\n          break\n        case 3:\n          texte = `Le triangle $${nomTriangle}$ est tel que $${A + C\n            }=${texNombre(b)}$ cm, $${A + B}=${texNombre(c)}$ cm,  et $${B + C\n            }=${texNombre(a)}$ cm.`\n          break\n      }\n      texte += '<br>Ce triangle est-il rectangle ?'\n      texteCorr = `Dans le triangle $${nomTriangle}$, le plus grand côté est $[${A + B\n        }]$.`\n      texteCorr += `<br>$${A + B}^2=${texNombre(c)}^2=${texNombrec(\n        c ** 2\n      )}$`\n      texteCorr += `<br>$${A + C}^2+${B + C}^2=${texNombre(b)}^2+${texNombre(\n        a\n      )}^2=${texNombrec(b ** 2 + a ** 2)}$`\n      if (listeTypeDeQuestions[i] === 'rectangle') {\n        this.autoCorrection[i].propositions[0].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore est vérifiée donc $${nomTriangle}$ est rectangle en $${C}$.`\n      } else {\n        this.autoCorrection[i].propositions[1].statut = true\n        texteCorr += `<br>On constate que $${A + B}^2\\\\not=${A + C}^2+${B + C\n          }^2$, l'égalité de Pythagore n'est pas vérifiée donc $${nomTriangle}$ n'est pas rectangle.`\n      }\n      if (context.isAmc) {\n        this.autoCorrection[i].enonce = texte\n        this.autoCorrection[i].propositions[0].feedback = texteCorr\n      }\n      if (this.interactif) {\n        texte += propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 3, \"1 : Démontrer qu'un triangle est rectangle\\n2 : Démontrer qu'un triangle n'est pas rectangle\\n3 : Déterminer si un triangle est rectangle ou pas \"]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","amcReady","amcType","interactifType","interactifReady","ReciproquePythagore","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","sup","context","spacingCorr","nouvelleVersion","parseInt","listeQuestions","listeCorrections","autoCorrection","listeTypeDeQuestions","combinaisonListes","listeTripletsPythagoriciens","nomsTriangles","texte","texteCorr","a","b","c","A","B","C","nomTriangle","triplet","ordreDesCotes","i","cpt","options","ordered","propositions","statut","creerNomDePolygone","push","choice","enleveElement","randint","Math","max","calcul","texNombre","texNombrec","enonce","feedback","interactif","propositionsQcm","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}