{"version":3,"file":"js/21534.19cd0f48d72c416ece50.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/2e/2S30-5.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/arbres.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { choice, listeQuestionsToContenu, randint, shuffle } from '../../modules/outils.js'\nimport { fraction } from '../../modules/fractions.js'\nimport { Arbre, texProba } from '../../modules/arbres.js'\nimport { mathalea2d } from '../../modules/2d.js'\nimport { ajouteChampTexteMathLive, setReponse } from '../../modules/gestionInteractif.js'\nimport FractionX from '../../modules/FractionEtendue.js'\nexport const titre = 'Expérience aléatoire à deux épreuves'\nexport const dateDePublication = '28/12/2021'\nexport const interactifReady = true\nexport const interactifType = 'mathLive'\nexport const amcReady = true\nexport const amcType = 'AMCNum'\n\n/**\n * On doit calculer la probabilité qu'un événement se réalise après une expérience aléatoire à deux épreuves\n * @author Jean-Claude Lhote\n * Référence 2S30-5\n*/\nexport default function CalculProbaExperience2Epreuves3e () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.sup = true\n  this.sup2 = false\n  this.tailleDiaporama = 2\n  this.sup3 = false\n  this.nbQuestions = 1\n  this.spacing = 2\n  this.spacingCorr = 3\n\n  function cas1 (exercice, i, sup, sup2, sup3) {\n    const p = []\n    const choix = randint(0, 2)\n    let nombres1, nombres2, n1, n2, urne1, urne2, texte, texteCorr\n    if (!sup3) {\n      nombres1 = choice([[1, 2, 3], [1, 1, 2], [1, 2, 2], [1, 1, 3]])\n      nombres2 = choice([[1, 2, 3], [1, 1, 2], [1, 2, 2], [1, 1, 3]])\n    } else {\n      nombres1 = [1, 2, 3]\n      nombres2 = [1, 2, 3]\n    }\n    const B = ['B', 'R', 'V']\n    const boules = ['bleue', 'rouge', 'verte']\n    do {\n      n1 = shuffle(nombres1)\n      n2 = shuffle(nombres2)\n    } while (n1[0] === n2[0] && n1[1] === n2[1])\n    const card1 = n1[0] + n1[1] + n1[2]\n    const card2 = n2[0] + n2[1] + n2[2]\n    if (sup2) {\n      urne1 = new Arbre({\n        racine: false,\n        rationnel: true,\n        nom: 'Pile',\n        proba: fraction(0.5),\n        visible: true,\n        alter: '',\n        enfants: []\n      })\n      urne2 = new Arbre({\n        racine: false,\n        rationnel: true,\n        nom: 'Face',\n        proba: fraction(0.5),\n        visible: true,\n        alter: '',\n        enfants: []\n      })\n      for (let j = 0; j < 3; j++) {\n        urne1.enfants.push(new Arbre({ nom: B[j], proba: fraction(n1[j], card1), rationnel: true, visible: true }))\n      }\n      for (let j = 0; j < 3; j++) {\n        urne2.enfants.push(new Arbre({ nom: B[j], proba: fraction(n2[j], card2), rationnel: true, visible: true }))\n      }\n    } else {\n      urne1 = new Arbre({\n        racine: false,\n        rationnel: true,\n        nom: 'Pile',\n        proba: fraction(0.5),\n        visible: false,\n        alter: '',\n        enfants: []\n      })\n      urne2 = new Arbre({\n        racine: false,\n        rationnel: true,\n        nom: 'Face',\n        proba: fraction(0.5),\n        visible: false,\n        alter: '',\n        enfants: []\n      })\n      for (let j = 0; j < 3; j++) {\n        for (let b = 0; b < n1[j]; b++) {\n          urne1.enfants.push(new Arbre({ nom: B[j], proba: fraction(1, card1), rationnel: true, visible: false }))\n        }\n      }\n      for (let j = 0; j < 3; j++) {\n        for (let b = 0; b < n2[j]; b++) {\n          urne2.enfants.push(new Arbre({ nom: B[j], proba: fraction(1, card2), rationnel: true, visible: false }))\n        }\n      }\n    }\n\n    // On définit l'arbre complet\n    const omega = new Arbre({\n      racine: true,\n      rationnel: true,\n      nom: '',\n      proba: 1,\n      visible: false,\n      alter: '',\n      enfants: [\n        urne1,\n        urne2\n      ]\n    })\n\n    omega.setTailles() // On calcule les tailles des arbres.\n    const objets = omega.represente(0, 11, 0, sup2 ? 2.5 : 1.2, false, -1) // On crée l'arbre complet echelle 1.4 feuilles verticales sens gauche-droite\n    for (let j = 0; j < 3; j++) {\n      p[j] = omega.getProba(B[j], true) // on calcule P(C) décimale.\n    }\n    texte = 'On lance une pièce équilibrée.<br>'\n    texte += \"Si la pièce tombe sur 'Pile', on tire une boule dans une urne contenant \"\n    for (let j = 0; j < 2; j++) {\n      texte += `${n1[j]} boule${n1[j] > 1 ? 's' : ''} ${boules[j]}${n1[j] > 1 ? 's' : ''}, `\n    }\n    texte += ` et ${n1[2]} boule${n1[2] > 1 ? 's' : ''} ${boules[2]}${n1[2] > 1 ? 's' : ''}.<br>`\n    texte += \"Si la pièce tombe sur 'Face', on tire une boule dans une urne contenant \"\n    for (let j = 0; j < 2; j++) {\n      texte += `${n2[j]} boule${n2[j] > 1 ? 's' : ''} ${boules[j]}${n2[j] > 1 ? 's' : ''}, `\n    }\n    texte += ` et ${n2[2]} boule${n2[2] > 1 ? 's' : ''} ${boules[2]}${n2[2] > 1 ? 's' : ''}.<br>`\n    texte += sup ? 'On a représenté l\\'expérience par l\\'arbre ci-dessous' : ''\n    texte += sup ? mathalea2d({ xmin: -0.1, xmax: 16, ymin: 0, ymax: 12 }, ...objets) : ''\n    texte += `Donner la probabilité d'obtenir une boule ${boules[choix]}.` + ajouteChampTexteMathLive(exercice, i, 'largeur15 inline')\n    setReponse(exercice, i, new FractionX(p[choix].n, p[choix].d), { formatInteractif: 'fractionEgale' })\n    texteCorr = \"La probabilité que la pièce tombe sur 'Pile' est de $\\\\dfrac{1}{2}$ et \"\n    texteCorr += `la probabilité de tirer une boule ${boules[choix]} dans la première urne est de $${texProba(urne1.getProba(B[choix], true), true)}$.<br>`\n    texteCorr += `La probabilité de l'issue ('Pile','${boules[choix]}') est donc : $\\\\dfrac{1}{2}\\\\times ${texProba(urne1.getProba(B[choix], true), true)}=${texProba(fraction(n1[choix], 2 * card1), true)}$.<br>`\n    texteCorr += \"La probabilité que la pièce tombe sur 'Face' est de $\\\\dfrac{1}{2}$ et \"\n    texteCorr += `la probabilité de tirer une boule ${boules[choix]} dans la deuxième urne est de $${texProba(urne2.getProba(B[choix], true), true)}$.<br>`\n    texteCorr += `La probabilité de l'issue ('Face','${boules[choix]}') est donc : $\\\\dfrac{1}{2}\\\\times ${texProba(urne2.getProba(B[choix], true), true)}=${texProba(fraction(n2[choix], 2 * card2), true)}$.<br>`\n    texteCorr += `L'événement 'obtenir une boule ${boules[choix]}' est réalisé par les issues ('Pile','${boules[choix]}') et ('Face','${boules[choix]}'), donc sa probabilité est la somme des probabilités calculées ci-dessus.<br>`\n    texteCorr += `La probabilité d'obtenir une boule ${boules[choix]} est donc de $${texProba(fraction(n1[choix], 2 * card1), true)}+${texProba(fraction(n2[choix], 2 * card2), true)}=${texProba(p[choix], true)}$.`\n\n    return { texte: texte, texteCorr: texteCorr, alea: [...n1, ...n2] }\n  }\n\n  /* function cas2 (exercice, i, sup, sup2, niveau) {\n    return { texte: texte, texteCorr: texteCorr, alea: [] }\n  }\n*/\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    for (let i = 0, cpt = 0, question; i < this.nbQuestions && cpt < 50;) {\n      // On choisit les probas de l'arbre\n      question = cas1(this, i, this.sup, this.sup2, this.sup3)\n      if (this.questionJamaisPosee(i, ...question.alea)) {\n        this.listeQuestions.push(question.texte)\n        this.listeCorrections.push(question.texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireCaseACocher = ['Avec arbre', false]\n  this.besoinFormulaire2CaseACocher = ['Arbre pondéré', false]\n  this.besoinFormulaire3CaseACocher = ['Équiprobabilité', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import { add, number, multiply } from 'mathjs'\nimport { barycentre, latexParPoint, milieu, point, polygone, segment } from './2d'\nimport { fraction } from './fractions'\nimport { arrondi, calcul } from './outils'\n\nexport function texProba (proba, rationnel, precision) {\n  return rationnel ? fraction(proba).toLatex() : number(arrondi(proba, precision)).toString().replace('.', '{,}')\n}\n/**\n * classe pour faire des arbres de probabilités\n * @author Jean-Claude Lhote\n * la classe Arbre permet de définir un arbre de probabilité.\n * à son sommet, il y a un Arbre qui parent = null\n * Ses enfants sont eux-mêmes Arbre(s) qui l'ont comme parent.\n * Un Arbre possède un nom (de type string) qui l'identifie de façon unique (c'est important si on veut éviter des proba aléatoires)\n * chaque Arbre possède une proba. C'est la probabilité qu'on a d'atteindre cet arbre à partir de son parent.\n * Exemple: const pin = new Arbre(null, 'pin', 1) (c'est une forêt de pins)\n */\nexport class Arbre {\n  constructor ({ nom, proba, enfants, rationnel, visible, alter, racine } = {}) {\n    this.racine = racine !== undefined ? Boolean(racine) : false\n    this.enfants = enfants !== undefined ? Array(...enfants) : []\n    this.nom = nom !== undefined ? String(nom) : ''\n    this.rationnel = rationnel !== undefined ? Boolean(rationnel) : true\n    this.proba = proba !== undefined ? (rationnel ? fraction(proba) : number(proba)) : 0\n    this.visible = visible !== undefined ? visible : true\n    this.alter = alter !== undefined ? String(alter) : ''\n    this.taille = 0\n    this.pos = 0\n  }\n\n  // questionnement : est-ce qu'on vérifie à chaque ajout que la somme des probabilités ne dépasse pas 1 ?\n  /**\n   * @param {String} nom Le nom de cet Arbre-fils\n   * @param {Number} proba La probabilité d'aller à ce fils depuis le père.\n   * @returns l'Arbre-fils créé\n   * Exemple : const sylvestre = pin.setFils('sylvestre', 0.8) un 'pin' a une probabilité de 0.8 d'être 'sylvestre'.\n   */\n  setFils (nom, proba, rationnel) {\n    const arbre = new Arbre(this, nom, proba, (rationnel || this.rationnel))\n    this.enfants.push(arbre)\n    return arbre\n  }\n\n  /**\n   * Fonction récursive qui cherche dans la descendance complète un arbre nommé.\n   * @param {String} nom Le nom de l'Arbre recherché dans les fils\n   * @returns l'Arbre descendant portant ce nom.\n   * Exemple : const unArbre = pin.getFils('sylvestre')\n   */\n  getFils (nom) {\n    const monArbre = []\n    for (const arbre of this.enfants) {\n      if (arbre.nom === nom) return [arbre]\n      else {\n        monArbre.push(...arbre.getFils(nom))\n      }\n    }\n    return monArbre\n  }\n\n  // est-ce qu'on vérifie si la somme des probabilités ne dépasse pas 1 ?\n  /**\n   *\n   * @param {String} nom Le nom de l'Arbre recherché dans les fils\n   * @param {Number} proba La probabilité du fils pour le père.\n   * @returns l'Arbre-fils.\n   */\n  setFilsProba (nom, proba, rationnel) { // si le fils nommé nom existe, on fixe sa proba (en gros, on la modifie)\n    let arbre = this.getFils(nom)\n    if (arbre) {\n      arbre.proba = (rationnel || this.rationnel) ? fraction(proba) : number(proba)\n    } else { // sinon on ajoute ce fils.\n      arbre = new Arbre(this, nom, proba, (rationnel || this.rationnel))\n      this.enfants.push(arbre)\n    }\n    return arbre\n  }\n\n  // Essai de fonction récursive pour calculer la probabilité d'un événement.\n  /**\n   *\n   * @param {String} nom Le nom d'un descendant ou pas\n   * @param {Number} proba facultatif : Si elle est fixée à 1, alors on obtient la probabilité conditionnelle.\n   * Si elle n'est pas fixée, c'est la probabilité de l'arbre duquel on part qui est pris pour le calcul.\n   * @returns Probabilité conditionnelle ou pas d'atteindre l'arbre nommé à partir du père.\n   * Exemple : si pin.getFilsProba('sylvestre')===0.8 et si sylvestre.getFilsProba('malade')===0.5\n   * alors pin.getProba('malade')===0.4 et sylvestre.getProba('malade')===0.4 aussi ! par contre\n   * sylvestre.getProba('malade', 1)= 0.5\n   */\n  getProba (nom, rationnel) {\n    let p = rationnel ? fraction(0, 1) : 0\n    let probaArbre = rationnel ? fraction(0, 1) : 0\n    if (this.nom === nom) return (rationnel || this.rationnel) ? fraction(this.proba) : number(this.proba)\n    else {\n      for (const arbre of this.enfants) {\n        if (arbre.nom === nom) p = add(p, (rationnel || this.rationnel) ? fraction(arbre.proba) : number(arbre.proba))\n        else {\n          if (rationnel) {\n            probaArbre = add(fraction(probaArbre), multiply(fraction(arbre.proba), fraction(arbre.getProba(nom, true))))\n          } else {\n            probaArbre = number(probaArbre) + number(multiply(arbre.proba, number(arbre.getProba(nom, false))))\n          }\n        }\n      }\n      p = add(p, (rationnel || this.rationnel) ? fraction(probaArbre) : number(probaArbre))\n    }\n    return rationnel ? fraction(p) : number(p)\n  }\n\n  // méthode pour compter les descendants de l'arbre (le nombre de feuilles terminales).\n  branches () {\n    let nbBranches = 0\n    if (this.enfants.length === 0) return 1\n    else {\n      for (const enfant of this.enfants) {\n        nbBranches += enfant.branches()\n      }\n    }\n    return nbBranches\n  }\n\n  // Methode à appeler avant de représenter l'arbre car elle va récursivement définir toutes les tailles...\n  setTailles () {\n    try {\n      this.taille = this.branches()\n      for (const arbre of this.enfants) {\n        arbre.setTailles()\n      }\n    } catch (error) {\n      console.log(error)\n      return false\n    }\n    return true\n  }\n\n  /**\n   * xOrigine et yOrigine définissent le point de référence de l'arbre... c'est un angle du cadre dans lequel l'arbre est construit par la position de la racine\n   * decalage vaut 0 lors de l'appel initial... cette valeur est modifiée pendant le parcours de l'arbre.\n   * echelle est à fixé à 3 si on utilise des fractions et peut être déscendu à 2 si on utilise des nombres décimaux... echelle peut être décimal.\n   * vertical est un booléen. Si true, alors l'arbre sera construit de bas en haut ou de haut en bas, sinon, il sera construit de gauche à droite ou de droite à gauche.\n   * sens indique la direction de pousse : 1 positif, -1 négatif.\n   */\n  represente (xOrigine = 0, yOrigine = 0, decalage = 0, echelle = 1, vertical = false, sens = -1) {\n    const objets = []\n    const A = point(vertical\n      ? xOrigine\n      : xOrigine + decalage + this.taille * echelle / 2\n    , vertical\n      ? yOrigine + decalage - this.taille * echelle / 2\n      : yOrigine\n    , '', 'center')\n    const B = point(vertical\n      ? xOrigine - sens * 5\n      : xOrigine\n    , vertical\n      ? yOrigine\n      : yOrigine - sens * 5\n    )\n    const labelA = latexParPoint(this.nom, A, 'black', 8 * this.nom.length, 20, 'white', 10)\n    const positionProba = vertical ? barycentre(polygone(A, A, A, B, B), '', 'center') : milieu(A, B, '', 'center') // Proba au 2/5 de [AB] en partant de A.\n    const probaA = this.visible\n      ? latexParPoint(texProba(this.proba, this.rationnel, 2), positionProba, 'black', 20, 24, 'white', 8)\n      : latexParPoint(this.alter, positionProba, 'black', 20, 24, 'white', 8)\n    if (this.enfants.length === 0) {\n      return [segment(B, A), labelA, probaA]\n    } else {\n      for (let i = 0; i < this.enfants.length; i++) {\n        objets.push(...this.enfants[i].represente(vertical\n          ? xOrigine + sens * 5\n          : xOrigine + decalage + this.taille * echelle / 2\n        , vertical\n          ? yOrigine + decalage - this.taille * echelle / 2\n          : yOrigine + sens * 5\n        , vertical\n          ? calcul(echelle * ((this.enfants.length / 2 - i) * this.enfants[i].taille))\n          : calcul(echelle * ((i - this.enfants.length / 2) * this.enfants[i].taille)),\n        echelle, vertical, sens))\n      }\n      if (this.racine) {\n        objets.push(labelA)\n      } else {\n        objets.push(segment(B, A), labelA, probaA)\n      }\n    }\n    return objets\n  }\n}\n"],"names":["titre","dateDePublication","interactifReady","interactifType","amcReady","amcType","CalculProbaExperience2Epreuves3e","cas1","exercice","i","sup","sup2","sup3","p","choix","randint","nombres1","nombres2","n1","n2","urne1","urne2","texte","texteCorr","choice","B","boules","shuffle","card1","card2","Arbre","racine","rationnel","nom","proba","fraction","visible","alter","enfants","j","push","b","omega","setTailles","objets","represente","getProba","mathalea2d","xmin","xmax","ymin","ymax","ajouteChampTexteMathLive","setReponse","FractionX","n","d","formatInteractif","texProba","alea","Exercice","this","tailleDiaporama","nbQuestions","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","question","cpt","questionJamaisPosee","listeQuestionsToContenu","besoinFormulaireCaseACocher","besoinFormulaire2CaseACocher","besoinFormulaire3CaseACocher","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","args","argsConcatenes","arg","undefined","toString","indexOf","precision","toLatex","number","arrondi","replace","constructor","Boolean","Array","String","taille","pos","setFils","arbre","getFils","monArbre","setFilsProba","probaArbre","add","multiply","branches","nbBranches","length","enfant","error","console","log","xOrigine","yOrigine","decalage","echelle","vertical","sens","A","point","labelA","latexParPoint","positionProba","barycentre","polygone","milieu","probaA","segment","calcul"],"sourceRoot":""}