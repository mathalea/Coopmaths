{"version":3,"file":"js/49721.cb24f1671cdd33a352a1.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/exercices/beta/beta4C31.js"],"sourcesContent":["/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n","import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, choice, rangeMinMax, ecriturePuissance, numAlpha, texteEnCouleurEtGras, texNombre } from '../../modules/outils.js'\n\nexport const titre = 'Puissances de 10'\n\n/**\n * * Comparer des puissances de 10.\n *\n * Paramétrages possibles :\n * 1 : Puissances de 10 seules\n * 2 : mantisses différentes et même exposant\n * 3 : mêmes mantisses et exposants différents\n * 4 : mantisses et exposants différents\n * 5 : mantisses (négatives) et exposants différents\n * 6 : Tous types\n * Programmes : p130 : \"Comparer, ranger, encadrer des nombres rationnels en écriture décimale, fractionnaire ou scientifique\n * @author Erwan Duplessy\n * date : 15/11/2020\n * 4C30-4\n */\nexport default function ComparerPuissance10 () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = 'Dans chaque cas, comparer les deux nombres. Les deux nombres sont écrits en écriture scientifique.'\n  this.nbQuestions = 5 // Ici le nombre de questions\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.correctionDetailleeDisponible = true\n  context.isHtml ? this.correctionDetaillee = true : this.correctionDetaillee = false\n  this.spacing = 2\n  this.spacingCorr = 2\n  this.nbQuestions = 5\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.sup = 1\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let typesDeQuestionsDisponibles = []\n    typesDeQuestionsDisponibles = [1, 2, 3, 4, 5]\n\n    for (let i = 0, texte = '', texteCorr = '', cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      let a1 = 0 // mantisse 1\n      let a2 = 0 // mantisse 2\n      let n1 = 0 // puissance 1\n      let n2 = 0 // puissance 2\n      let nbA1 = 0 // valeur numérique du nombre 1\n      let nbA2 = 0 // valeur numérique du nombre 2\n      this.listeQuestions = [] // tableau contenant la liste des questions\n      this.listeCorrections = []\n      const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          a1 = 1\n          n1 = randint(-9, 9)\n          a2 = 1\n          n2 = choice(rangeMinMax(-9, 9), [n1])\n          nbA1 = a1 * 10 ** n1\n          nbA2 = a2 * 10 ** n2\n          break\n        case 2:\n          a1 = randint(1, 9) + 0.1 * randint(1, 9) * randint(0, 1)\n          n1 = randint(-9, 9)\n          a2 = choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [a1]) + 0.1 * randint(1, 9) * randint(0, 1)\n          n2 = n1\n          nbA1 = a1 * 10 ** n1\n          nbA2 = a2 * 10 ** n2\n          break\n        case 3:\n          a1 = randint(1, 9) + 0.1 * randint(0, 9) + 0.01 * randint(0, 9)\n          n1 = randint(-9, 9)\n          a2 = a1\n          n2 = randint(-9, 9)\n          break\n        case 4:\n          a1 = randint(1, 9) + 0.1 * randint(0, 9)\n          n1 = randint(-9, 9)\n          a2 = choice(rangeMinMax(1, 99)) / 10\n          n2 = randint(-9, 9)\n          break\n        case 5:\n          a1 = choice(rangeMinMax(-99, 99, [0])) / 10\n          n1 = randint(-9, 9)\n          a2 = choice(rangeMinMax(-99, 99, [0])) / 10\n          n2 = randint(-9, 9)\n          break\n      }\n      nbA1 = a1 * 10 ** n1\n      nbA2 = a2 * 10 ** n2\n      texte += numAlpha(i) + ' ' + ecriturePuissance(a1, 10, n1) + ' et ' + ecriturePuissance(a2, 10, n2) + '<br>'\n      // début correction détaillée\n      texteCorr += numAlpha(i) + ' '\n      if (this.correctionDetaillee) {\n        if (nbA1 === nbA2) {\n          texteCorr += 'Les deux nombres ont la même écriture, ils sont donc égaux. <br>'\n        } else {\n          if (a1 * a2 === 0) {\n            texteCorr += 'L\\'un des deux nombres est nul. Il suffit de regarder le signe de l\\'autre. <br>'\n          } else {\n            if (a1 * a2 < 0) { // a1 et a2 de signes opposés\n              texteCorr += 'Les deux nombres sont de signes opposés. Le plus petit nombre est donc le nombre négatif. <br>'\n            } else {\n              if (a1 > 0 && a2 > 0) { // a1 et a2 strictement positifs\n                texteCorr += 'Les deux nombres sont positifs. On compare les exposants de l\\'écriture scientifique : '\n                if (n1 > n2) {\n                  texteCorr += `$${n1} > ${n2}$. <br>`\n                }\n                if (n1 === n2) {\n                  texteCorr += `Les exposants sont égaux. On compare ${texNombre(a1)} et ${texNombre(a2)} : `\n                  if (a1 < a2) {\n                    texteCorr += `$${texNombre(a1)} < ${texNombre(a2)}$. <br>`\n                  } else {\n                    texteCorr += `$${texNombre(a1)} > ${texNombre(a2)}$. <br>`\n                  }\n                }\n                if (n1 < n2) {\n                  texteCorr += `$${n1} < ${n2}$.<br>`\n                }\n              }\n              if (a1 < 0 && a2 < 0) { // a1 et a2 strictement négatifs\n                texteCorr += `Les deux nombres sont négatifs. Ils sont rangés dans l'ordre contraire de leur opposé : ${ecriturePuissance(-a1, 10, n1)} et ${ecriturePuissance(-a2, 10, n2)}. <br>`\n                texteCorr += 'On compare les exposants de l\\'écriture scientifique : '\n                if (n1 > n2) {\n                  texteCorr += `$${n1} > ${n2}$. Donc ${ecriturePuissance(-a1, 10, n1)} $>$ ${ecriturePuissance(-a2, 10, n2)}. <br>`\n                }\n                if (n1 === n2) {\n                  texteCorr += `les exposants sont égaux. On compare ${texNombre(a1)} et ${texNombre(a2)} : `\n                  if (a1 < a2) {\n                    texteCorr += `$${texNombre(a1)} < ${texNombre(a2)}$. Donc ${ecriturePuissance(-a1, 10, n1)} $<$ ${ecriturePuissance(-a2, 10, n2)}. <br><br>`\n                  } else {\n                    texteCorr += `$${texNombre(a1)} > ${texNombre(a2)}$. Donc ${ecriturePuissance(-a1, 10, n1)} $>$ ${ecriturePuissance(-a2, 10, n2)}. <br><br>`\n                  }\n                }\n                if (n1 < n2) {\n                  texteCorr += `$${n1} < ${n2}$. Donc ${ecriturePuissance(-a1, 10, n1)} $<$ ${ecriturePuissance(-a2, 10, n2)}. <br>`\n                }\n              }\n            }\n          }\n        }\n        texteCorr += texteEnCouleurEtGras('Conclusion : ')\n      } // fin de la correction détaillée\n      // correction courte :\n      if (nbA1 > nbA2) {\n        texteCorr += texteEnCouleurEtGras(` ${ecriturePuissance(a1, 10, n1)} $>$ ${ecriturePuissance(a2, 10, n2)} <br>`)\n      } else {\n        if (nbA1 === nbA2) {\n          texteCorr += texteEnCouleurEtGras(` ${ecriturePuissance(a1, 10, n1)} $=$ ${ecriturePuissance(a2, 10, n2)} <br>`)\n        } else {\n          texteCorr += texteEnCouleurEtGras(` ${ecriturePuissance(a1, 10, n1)} $<$ ${ecriturePuissance(a2, 10, n2)} <br>`)\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // Espacement de 2 em entre chaque questions.\n  }\n}\n"],"names":["Exercice","this","titre","boutonAide","consigne","consigneCorrection","introduction","listeQuestions","listeCorrections","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbCols","nbColsCorr","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","nbQuestions","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","nouvelleVersion","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","toString","indexOf","push","ComparerPuissance10","context","sup","typesDeQuestionsDisponibles","texte","texteCorr","cpt","a1","a2","n1","n2","nbA1","nbA2","combinaisonListes","randint","choice","rangeMinMax","numAlpha","ecriturePuissance","texNombre","texteEnCouleurEtGras","listeQuestionsToContenu"],"sourceRoot":""}