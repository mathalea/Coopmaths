{"version":3,"file":"js/62525.57a75902dcaaccae4799.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/3e/3A11.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, nombreAvecEspace, texteEnCouleurEtGras, modalPdf, modalVideo, cribleEratostheneN, warnMessage } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\nexport const titre = 'Primalité ou pas'\nexport const interactifReady = true\nexport const interactifType = 'qcm'\nexport const amcReady = true\nexport const amcType = 'qcmMono'\n\n/**\n * 3A11 justifier la non primalité réinvestissement des critères de divisibilité\n * Nombres à 3 ou 4 chiffres, un multiple de 2, de 3, de 5, de 7, de 11, sous forme d'un produit de deux nombres premiers inférieurs à 100\n * et un nombre premier inferieur à 529\n * dans cet exo on n'utilise pas les critères par 7 et 11\n * @author Sébastien Lozano + Jean-Claude Lhote pour l'interactivité.\n */\nexport default function PremierOuPas () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  // pas de différence entre la version html et la version latex pour la consigne\n  this.consigne = 'Justifier que les nombres suivants sont premiers ou pas. Penser aux critères de divisibilité.'\n  context.isHtml ? this.spacing = 1 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2 : this.spacingCorr = 1\n\n  // this.correctionDetailleeDisponible = true;\n  this.nbCols = 2\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = true\n  this.nbQuestionsModifiable = false\n  this.listePackages = 'bclogo'\n  const prems = cribleEratostheneN(529) // constante contenant tous les nombres premiers jusqu'à 529...\n\n  this.nouvelleVersion = function () {\n    let typesDeQuestions\n    if (context.isHtml) { // les boutons d'aide uniquement pour la version html\n      // this.boutonAide = '';\n      this.boutonAide = modalPdf(this.numeroExercice, 'assets/pdf/FicheArithmetique-3A11.pdf', 'Aide mémoire sur les nombres premiers (Sébastien Lozano)', 'Aide mémoire')\n      this.boutonAide += modalVideo('conteMathsNombresPremiers', 'https://coopmaths.fr/videos/LesNombresPremiers.mp4', 'Petit conte mathématique - Les Nombres Premiers', 'Intro Vidéo')\n    } else { // sortie LaTeX\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n\n    this.contenu = '' // Liste de questions\n    this.contenuCorrection = '' // Liste de questions corrigées\n\n    let typesDeQuestionsDisponibles // = [1, 2, 3, 6, 7];\n    if (Number(this.sup) === 1) {\n      this.nbQuestions = 4\n      typesDeQuestionsDisponibles = [1, 2, 3, 8]\n    } else {\n      this.nbQuestions = 5\n      typesDeQuestionsDisponibles = [1, 2, 3, 6, 7]\n    }\n    typesDeQuestionsDisponibles = shuffle(typesDeQuestionsDisponibles) // on mélange l'ordre des questions\n\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions)\n\n    let stringRappel = 'Cette liste des nombres premiers inférieurs à 100 pourra être utile : <br>' + prems[0]\n    for (let k = 1; k < 25; k++) {\n      stringRappel += ', ' + prems[k]\n    };\n    stringRappel += '.'\n\n    if (this.sup2) {\n      this.introduction = warnMessage(stringRappel, 'nombres', 'Coup de pouce')\n    } else this.introduction = ''\n\n    for (let i = 0, texte, texteCorr, r1, r2, prime1, prime2, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      typesDeQuestions = listeTypeDeQuestions[i]\n\n      let N // le nombre de la question\n      let r\n      let tabPremiersATester\n      let sum\n\n      let Nlongueur // pour la taille du string N\n      let N1 // pour la repetiton du critère\n      let N1longueur // pour la taille du string N1\n      let sum1 // pour la somme de la répétition du critère\n\n      let evenSum // pour la somme des chiffres de rang impair\n      let oddSum // pour la somme des chiffres de rang pair\n      let bonneReponse\n      switch (typesDeQuestions) {\n        case 1: // nombre pair\n          N = 2 * randint(51, 4999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme ${nombreAvecEspace(N)} est pair, il admet donc au moins trois diviseurs qui sont 1, 2 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 2: // Multiple de 3\n          sum = 0 // pour la valeur de la somme;\n          N = 3 * randint(34, 3333) // on initialise avant la boucle car on a peut être de la chance\n          while ((N % 2 === 0) || (N % 5 === 0)) {\n            N = 3 * randint(34, 3333)\n          };\n          texte = nombreAvecEspace(N)\n          texteCorr = 'Comme ' + N.toString().charAt(0)\n          sum = Number(N.toString().charAt(0))\n          for (let k = 1; k < N.toString().length; k++) {\n            texteCorr += ' + ' + N.toString().charAt(k)\n            sum += Number(N.toString().charAt(k))\n          };\n          texteCorr += ` = ${sum} est un multiple de 3 donc ${nombreAvecEspace(N)} aussi, il admet donc au moins trois diviseurs qui sont 1, 3 et lui-même, `\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 3: // Multiple de 5\n          N = 5 * randint(20, 1999)\n          texte = nombreAvecEspace(N)\n          texteCorr = `Comme le dernier chiffre de ${nombreAvecEspace(N)} est un ${N.toString().charAt(N.toString().length - 1)} alors ${nombreAvecEspace(N)} est divisible par 5, `\n          texteCorr += 'il admet donc au moins trois diviseurs qui sont 1, 5 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 4: // Multiple de 7\n          N = 7 * randint(15, 1428)\n          texte = nombreAvecEspace(N)\n          Nlongueur = N.toString().length\n          texteCorr = ` 7 divise ${nombreAvecEspace(N)}, en effet : `\n          texteCorr += '<br>'\n          N1 = N\n          N1longueur = Nlongueur\n          sum1 = Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))\n          while (sum1 >= 56) {\n            texteCorr += `${N1.toString().substring(0, N1longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1longueur - 1)}`\n            texteCorr += ` = ${Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))}`\n            texteCorr += '<br>'\n            N1 = sum1\n            N1longueur = N1.toString().length\n            sum1 = Number(N1.toString().substring(0, N1longueur - 1)) + 5 * Number(N1.toString().charAt(N1longueur - 1))\n          };\n          texteCorr += `Comme ${N1.toString().substring(0, N1longueur - 1)} + 5$\\\\times$${N1.toString().charAt(N1longueur - 1)} = ${sum1} est un multiple de 7 alors 7 divise ${N} aussi `\n          texteCorr += 'qui admet donc au moins trois diviseurs : 1, 7 et lui-même, '\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 5: // multiple de 11\n          N = 11 * randint(10, 909)\n          texte = nombreAvecEspace(N)\n          texteCorr = `D'une part, la somme des chiffres de rang impair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            evenSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let k = 3; k < N.toString().length; k++) {\n              if (k % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                evenSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + evenSum + ' <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            evenSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let m = 1; m < N.toString().length; m++) {\n              if (m % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                evenSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + evenSum + '<br> '\n          };\n          texteCorr += `d'autre part, la somme des chiffres de rang pair de ${nombreAvecEspace(N)} vaut `\n          if (Number(N.toString().length) % 2 === 0) { // si N a un nombre pair de chiffres\n            oddSum = Number(N.toString().charAt(0))\n            texteCorr += N.toString().charAt(0)\n            for (let k = 1; k < N.toString().length; k++) {\n              if (k % 2 === 0) {\n                texteCorr += ' + ' + N.toString().charAt(k)\n                oddSum += Number(N.toString().charAt(k))\n              };\n            };\n            texteCorr += ' = ' + oddSum + ' <br> '\n          } else { // sinon N a un nombre impair de chiffres\n            oddSum = Number(N.toString().charAt(1))\n            texteCorr += N.toString().charAt(1)\n            for (let m = 3; m < N.toString().length; m++) {\n              if (m % 2 === 1) {\n                texteCorr += ' + ' + N.toString().charAt(m)\n                oddSum += Number(N.toString().charAt(m))\n              };\n            };\n            texteCorr += ' = ' + oddSum + '<br> '\n          };\n          texteCorr += 'la différence entre la somme des chiffres de rangs pairs et celle des chiffres de rangs impairs vaut '\n          if ((oddSum - evenSum) === 0) {\n            texteCorr += `${oddSum - evenSum}, `\n          } else {\n            texteCorr += `${Math.abs(oddSum - evenSum)} qui est un multiple de 11, `\n          };\n          texteCorr += '<br>'\n          texteCorr += ` cela signifie que ${nombreAvecEspace(N)} est divisible par 11, il admet donc au moins trois diviseurs qui sont 1, 11 et lui-même,`\n          texteCorr += texteEnCouleurEtGras(nombreAvecEspace(N) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 6: // produit de deux nombres premiers inférieurs à 100\n          // rang du premier facteur premier\n          r1 = randint(0, 24)\n          // rang du second facteur premier\n          r2 = randint(0, 24)\n          prime1 = prems[r1] // on tire un nombre premier inférieur à 100, il n'y en a que 25!\n          prime2 = prems[r2] // on tire un autre nombre premier inférieur à 100, ça peut être le même qu'avant!\n          N = prime1 + '$\\\\times$' + prime2\n          texte = N\n          texteCorr = `${N} est le produit de ${prime1} et de ${prime2}, il admet donc au moins `\n          if (prime1 === prime2) {\n            texteCorr += `trois divisieurs qui sont 1, ${prime1} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          } else {\n            texteCorr += `quatre diviseurs qui sont 1, ${prime1}, ${prime2} et lui-même ${N}=${nombreAvecEspace(prime1 * prime2)}, `\n          };\n          texteCorr += texteEnCouleurEtGras(`${N} = ` + nombreAvecEspace(prime1 * prime2) + ' n\\'est donc pas premier.')\n          bonneReponse = 'non'\n          break\n        case 7: // nombre premier inférieur à 529\n          // rang du nombre premier choisi\n          r = randint(0, prems.length - 1)\n          N = prems[r] // on choisit un nombre premier inférieur à 529\n          texte = N + ''\n          r = 0\n          tabPremiersATester = []\n          while (prems[r] ** 2 < N) {\n            tabPremiersATester.push(prems[r])\n            r++\n          }\n          texteCorr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est-à-dire par `\n          if (N === 2 || N === 3) {\n            texteCorr += 'aucun nombre dans le cas présent, le reste n\\'est jamais nul !'\n          } else {\n            texteCorr += 'les nombres '\n            texteCorr += tabPremiersATester[0]\n            for (let k = 1; k < tabPremiersATester.length; k++) {\n              texteCorr += ', ' + tabPremiersATester[k]\n            };\n            texteCorr += ', le reste n\\'est jamais nul.'\n          }\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n\n          bonneReponse = 'oui'\n          break\n        case 8: // nombre premier inférieur à 100 pour permettre les tests de divisibilité sans calculatrice\n          // rang du nombre premier choisi\n          r = randint(0, 24)\n          N = prems[r] // on choisit un nombre premier inférieur à 100\n          texte = N + ''\n          r = 0\n          tabPremiersATester = []\n          while (prems[r] ** 2 < N) {\n            tabPremiersATester.push(prems[r])\n            r++\n          }\n          texteCorr = `En effectuant la division euclidienne de ${N} par tous les nombres premiers inférieurs à $\\\\sqrt{${N}}$, c'est-à-dire par `\n          if (N === 2 || N === 3) {\n            texteCorr += 'aucun nombre dans le cas présent, le reste n\\'est jamais nul !'\n          } else {\n            texteCorr += 'les nombres '\n            texteCorr += tabPremiersATester[0]\n            for (let k = 1; k < tabPremiersATester.length; k++) {\n              texteCorr += ', ' + tabPremiersATester[k]\n            };\n            texteCorr += ', le reste n\\'est jamais nul.'\n          }\n          texteCorr += '<br>' + texteEnCouleurEtGras(nombreAvecEspace(N) + ' est donc un nombre premier.')\n          bonneReponse = 'oui'\n          break\n      };\n      if (this.interactif || context.isAmc) {\n        this.autoCorrection[i] = {}\n        this.autoCorrection[i].options = { ordered: true }\n        this.autoCorrection[i].enonce = `${texte}\\n`\n        this.autoCorrection[i].propositions = [\n          {\n            texte: 'est premier',\n            statut: bonneReponse !== 'non'\n          },\n          {\n            texte: 'n\\'est pas premier',\n            statut: bonneReponse !== 'oui'\n          }\n        ]\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en créé une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Niveau de difficulté', 2, '1 : Sans Calculatrice\\n2 : Avec calculatrice']\n  this.besoinFormulaire2CaseACocher = ['Afficher la liste des nombres premiers inférieurs à 100']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","interactifReady","interactifType","amcReady","amcType","PremierOuPas","Exercice","this","consigne","context","spacing","spacingCorr","nbCols","nbColsCorr","sup","sup2","nbQuestionsModifiable","listePackages","prems","cribleEratostheneN","nouvelleVersion","typesDeQuestions","typesDeQuestionsDisponibles","boutonAide","modalPdf","numeroExercice","modalVideo","listeQuestions","listeCorrections","autoCorrection","contenu","contenuCorrection","Number","nbQuestions","shuffle","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","stringRappel","k","introduction","warnMessage","texte","texteCorr","r1","r2","prime1","prime2","i","cpt","N","r","tabPremiersATester","sum","Nlongueur","N1","N1longueur","sum1","evenSum","oddSum","bonneReponse","randint","nombreAvecEspace","texteEnCouleurEtGras","toString","charAt","length","substring","m","Math","abs","push","interactif","options","ordered","enonce","propositions","statut","propositionsQcm","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionDetailleeDisponible","correctionDetaillee","correctionIsCachee","video","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}