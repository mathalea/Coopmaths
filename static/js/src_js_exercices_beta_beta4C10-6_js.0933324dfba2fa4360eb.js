/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmathalea"] = self["webpackChunkmathalea"] || []).push([["src_js_exercices_beta_beta4C10-6_js"],{

/***/ "./src/js/exercices/ClasseExercice.js":
/*!********************************************!*\
  !*** ./src/js/exercices/ClasseExercice.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exercice)\n/* harmony export */ });\n/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nfunction Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = '';\n  this.consigne = '';\n  this.consigne_correction = '';\n  this.liste_questions = []\n  this.liste_corrections = []\n  this.introduction = '';\n  this.contenu = '';\n  this.contenu_correction = '';\n  this.nb_questions = 10\n  this.nb_cols = 2\n  this.nb_cols_corr = 2\n  this.spacing = 1\n  this.spacing_corr = 1\n  this.beamer = false\n\n  this.besoin_formulaire_numerique = false // Sinon this.besoin_formulaire_numerique = [texte,max,tooltip facultatif];\n  this.besoin_formulaire_texte = false // Sinon this.besoin_formulaire_texte = [texte,tooltip];\n  this.besoin_formulaire_case_a_cocher = false // Sinon this.besoin_formulaire_case_a_cocher = [texte];\n  this.consigne_modifiable = true\n  this.nb_questions_modifiable = true\n  this.nb_cols_modifiable = true\n  this.nb_cols_corr_modifiable = true\n  this.spacing_modifiable = true\n  this.spacing_corr_modifiable = true\n  this.correction_detaillee_disponible = false\n  this.correction_detaillee = true\n  this.video = ''\n  this.bouton_aide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.bouton_aide = modal_texte_court(numero_de_l_exercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_texte_long(numero_de_l_exercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.bouton_aide = modal_youtube(numero_de_l_exercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.bouton_aide = modal_pdf(numero_de_l_exercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pas_de_version_LaTeX = false\n  this.QCM = false // Pour les exercices de type QCM : contient un tableau.\n  this.QCM_disponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.ModeQCM\n  this.ModeQCM = false // Pour choisir la version QCM ou la version classique (false = version classique)\n\n  this.MG32editable = false //pas d'interface par défaut pour les figures MG32\n  this.nouvelle_version = function (numero_de_l_exercice) {}\n  this.liste_packages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  //this.type_exercice = \"MG32\";\n  //this.taille_div_MG32 = [500, 450];\n  //this.type_exercice = \"Scratch\"\n  // this.QCM=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/ClasseExercice.js?");

/***/ }),

/***/ "./src/js/exercices/beta/beta4C10-6.js":
/*!*********************************************!*\
  !*** ./src/js/exercices/beta/beta4C10-6.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"titre\": () => (/* binding */ titre),\n/* harmony export */   \"default\": () => (/* binding */ Exercice_tableau_multiplications_relatifs)\n/* harmony export */ });\n/* harmony import */ var _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ClasseExercice.js */ \"./src/js/exercices/ClasseExercice.js\");\n/* harmony import */ var _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/outils.js */ \"./src/js/modules/outils.js\");\n\n\nconst titre = 'Multiplications et quotients de relatifs : signe avec une lettre'\n\n/**\n* Effectuer des multiplications de relatifs dans un tableau à double entrée\n*\n* @Auteur Cédric GROLLEAU\n* 4C10-6\n*/\nfunction Exercice_tableau_multiplications_relatifs() {\n  _ClasseExercice_js__WEBPACK_IMPORTED_MODULE_0__.default.call(this); // Héritage de la classe Exercice()\n  this.sup = 3;\n  this.titre = titre;\n  this.consigne = '';\n  this.correction_detaillee_disponible = true;\n  this.correction_detaillee = false;\n  this.spacing = 2;\n  this.nb_questions = 3;\n  this.nb_questions_modifiable = true;\n\n  this.nouvelle_version = function () {\n    this.sup = parseInt(this.sup);\n\tthis.liste_questions = []; // Liste de questions\n    this.liste_corrections = []; // Liste de questions corrigées\n    let type_de_questions_disponibles;\n\tswitch (this.sup) {\n        case 1: // multiplications\n          type_de_questions_disponibles = [1];\n          break;\n        case 2: // Quotient\n          type_de_questions_disponibles = [2];\n          break;\n        case 3: // multiplications et quotients\n          type_de_questions_disponibles = [1, 2];\n          break;\n        case 4: // avec puissances\n          type_de_questions_disponibles = [3, 4];\n          break;\n\t\tcase 5: // mélange\n          type_de_questions_disponibles = [1, 2, 3, 4];\n          break;\n     }\n\tlet liste_type_de_questions = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.combinaison_listes)(type_de_questions_disponibles, this.nb_questions);\n\tfor (let i = 0, texte, texte_corr, cpt = 0; i < this.nb_questions && cpt < 50;) {\n\t\t// on ne choisit que des nombres compris entre 1 et 20\n\t\tlet nb_max = 20;\n\t\t// Le tableau des relatifs necessaires, il m'en faut max 5 !\n\t\tlet num = new _modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.Relatif(\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nb_max),\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nb_max),\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nb_max),\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nb_max),\n\t\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]) * (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1, nb_max)\n\t\t);\n\t\tlet lettre_tab = ['n','x','y','a','m'];\n\t\tlet lettre = lettre_tab[(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, lettre_tab.length-1)];\n\t\tlet nom_expression = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.lettre_depuis_chiffre)(i + 1);\n\t\tlet signe_expression = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n\t\tlet nb_termes = liste_type_de_questions[i] == 1 ? (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(3, 5) : (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(4, 6);\n\t\tlet place_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, nb_termes-1);\n\t\tlet liste_nombres = num.relatifs.slice(0,nb_termes-1);\n\t\tlet liste_termes = [];\n\t\tfor (let indice=0 ; indice < liste_nombres.length; indice++ ) {\n\t\t\tliste_termes.push((0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.ecriture_nombre_relatif)(liste_nombres[indice]));\n\t\t}\n\t\tliste_termes.splice(place_lettre,0,lettre);\n\t\tlet calcul = \"\";\n\t\tlet signe_lettre, calcul_nombres;\n\t\ttexte = `Donne le signe de $ ${lettre} $ pour que ${nom_expression} soit ${signe_expression==-1 ? 'negatif' : 'positif'}. <br>`;\n\t\ttexte_corr = `${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons que \" + lettre + \" soit positif : \")}`; \n\t\tswitch (liste_type_de_questions[i]) {\n\t\t\tcase 1: // multiplications\n\t\t\t\tcalcul += `${liste_termes[0]} `;\n\t\t\t\tfor (let k=1; k<nb_termes ; k++) {\n\t\t\t\t\tcalcul += `\\\\times ${liste_termes[k]}`\n\t\t\t\t}\n\t\t\t\ttexte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\t\t\t\tif (this.correction_detaillee) {\n\t\t\t\t\t//texte_corr += `<br> $ ${ecriture_nombre_relatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n\t\t\t\t\t//for (let k=1; k<nb_termes-2 ; k++) {\n\t\t\t\t\t//\ttexte_corr += `  , $ ${ecriture_nombre_relatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n\t\t\t\t\t//}\n\t\t\t\t\t//texte_corr += `  et $ ${ecriture_nombre_relatif(liste_nombres[parseInt(nb_termes-2)])} $ est ${num.getSigneString()[parseInt(nb_termes-2)]}`;\n\t\t\t\t\tliste_nombres.push(1);\n\t\t\t\t\ttexte_corr += `<br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\ttexte_corr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre +\" est positif\",\"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres),\"black\")}.`;\n\t\t\t\t\ttexte_corr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons maintenant que \" + lettre + \" soit négatif : \")}`;\n\t\t\t\t\t//texte_corr += ` $ ${ecriture_nombre_relatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n\t\t\t\t\t//for (let k=1; k<nb_termes-1 ; k++) {\n\t\t\t\t\t//\ttexte_corr += `  , $ ${ecriture_nombre_relatif(liste_nombres[k])} $ est ${num.getSigneString()[k]} `\n\t\t\t\t\t//}\n\t\t\t\t\t//texte_corr += ` et ${lettre} est négatif.`;\n\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\ttexte_corr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre +\" est négatif\",\"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres),\"black\")}.`;\n\t\t\t\t\ttexte_corr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Conclusion :\")} <br>` + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Il faut donc que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'négatif' : 'positif'} pour que ${nom_expression} soit ${signe_expression==-1 ? 'négatif' : 'positif'}`,\"black\");\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\ttexte_corr = `<br> Il faut que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'positif' : 'négatif'} pour que ${nom_expression} soit ${signe_expression==-1 ? 'négatif' : 'positif'}.`;\n\t\t\t\t}\n\t\t\t\tbreak;\t\t\t\t\n\t\t\tcase 2: // quotient de 2 produits\n\t\t\t\tcalcul += '\\\\dfrac {' + liste_termes[0];\n\t\t\t\tlet nb_num = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2, nb_termes-2);\n\t\t\t\tfor (let k=1; k<nb_num+1 ; k++) {\n\t\t\t\t\tcalcul += `\\\\times ${liste_termes[k]}`\n\t\t\t\t}\n\t\t\t\tcalcul += '}{' + liste_termes[nb_num+1];\n\t\t\t\tfor (let denom=nb_num+2; denom<nb_termes ; denom++) {\n\t\t\t\t\tcalcul += `\\\\times ${liste_termes[denom]}`\n\t\t\t\t}\n\t\t\t\tcalcul += '}';\n\t\t\t\ttexte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\t\t\t\tif (this.correction_detaillee) {\n\t\t\t\t\t//texte_corr += `$ ${ecriture_nombre_relatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n\t\t\t\t\t//for (let k=1; k<nb_termes-1 ; k++) {\n\t\t\t\t\t//\ttexte_corr += `  et $ ${ecriture_nombre_relatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n\t\t\t\t\t//}\n\t\t\t\t\ttexte_corr += `<br> ${num.setRegleSigneQuotient(...liste_nombres)}`;\n\t\t\t\t\ttexte_corr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre+\" est positif\",\"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres),\"black\")}.`;\n\t\t\t\t\ttexte_corr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Supposons maintenant que \" + lettre + \" soit négatif : \")}`\n\t\t\t\t\t//$ ${ecriture_nombre_relatif(liste_nombres[0])} $ est ${num.getSigneString()[0]}`;\n\t\t\t\t\t//for (let k=1; k<nb_termes-1 ; k++) {\n\t\t\t\t\t//\ttexte_corr += `  et $ ${ecriture_nombre_relatif(liste_nombres[k])} $ est ${num.getSigneString()[k]}`\n\t\t\t\t\t//}\n\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\ttexte_corr += `<br> ${num.setRegleSigneQuotient(...liste_nombres)}`;\n\t\t\t\t\ttexte_corr += `<br><br> Donc si ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(lettre+\" est négatif\",\"black\")} $ ${calcul} $ est ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(num.getSigneProduitString(...liste_nombres),\"black\")}.`;\n\t\t\t\t\ttexte_corr += `<br><br> ${(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(\"Conclusion :\")} <br>` + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Il faut donc que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'négatif' : 'positif'} pour que ${nom_expression} soit ${signe_expression==-1 ? 'négatif' : 'positif'}`,\"black\");\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\ttexte_corr = `<br> Il faut que $ ${lettre} $ soit ${signe_expression == num.getSigneProduitNumber(...liste_nombres) ? 'positif' : 'négatif'} pour que ${nom_expression} soit ${signe_expression==-1 ? 'négatif' : 'positif'}.`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3: // produit avec plusieurs fois la lettre\n\t\t\t\tsigne_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n\t\t\t\ttexte = `Donne le signe de ${nom_expression} si $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}. <br>`;\n\t\t\t\ttexte_corr = '';\n\t\t\t\tlet nb_lettres = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(1,3);\n\t\t\t\tplace_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(0, nb_termes-1);\n\t\t\t\tfor (let k=0; k<nb_lettres;k++) {\n\t\t\t\t  liste_termes.splice(place_lettre,0,lettre);\n\t\t\t\t}\n\t\t\t\tcalcul += `${liste_termes[0]} `;\n\t\t\t\tfor (let k=1; k<nb_termes+nb_lettres ; k++) {\n\t\t\t\t\tcalcul += `\\\\times ${liste_termes[k]}`\n\t\t\t\t}\n\t\t\t\tcalcul_nombres = `${liste_nombres[0]} `;\n\t\t\t\tfor (let k=1; k<nb_termes-1 ; k++) {\n\t\t\t\t\tcalcul_nombres += `\\\\times ${liste_nombres[k]}`\n\t\t\t\t}\n\t\t\t\ttexte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\t\t\t\tif (this.correction_detaillee) {\n\t\t\t\t\tif (nb_lettres==1 || nb_lettres==3) {\n\t\t\t\t\t\ttexte_corr += `On trouve ${nb_lettres+1} fois le facteur $ ${lettre} $.<br> Or ${nb_lettres+1} est pair donc leur produit sera positif.`;\n\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe de : $ ${calcul_nombres} $`;\n\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.`,\"black\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexte_corr += `On trouve ${nb_lettres+1} fois le facteur $ ${lettre} $. <br> Or ${nb_lettres+1} est impair donc leur produit est du signe de $ ${lettre} $ soit ${signe_lettre==-1 ? 'négatif' : 'positif'}.`;\n\t\t\t\t\t\tif (signe_lettre==-1) {\n\t\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n\t\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}.`,\"black\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n\t\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}.`,\"black\");\n\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t}\t\t\n\t\t\t\t} else {\n\t\t\t\t\tif (nb_lettres==1 || nb_lettres==3) {\n\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.<br>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (signe_lettre==-1) {\n\t\t\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est négatif.<br>`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est positif.<br>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4: // produit avec plusieurs fois la lettre\n\t\t\t\tsigne_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(-1, 1, [0]);\n\t\t\t\ttexte = `Donne le signe de ${nom_expression} si $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}. <br>`;\n\t\t\t\ttexte_corr = '';\n\t\t\t\tlet exp_lettre = (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.randint)(2,7);\n\t\t\t\tif (place_lettre==0) {\n\t\t\t\t\t\tcalcul += liste_termes[0]+ \"^{\" + exp_lettre +\"}\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcalcul += liste_termes[0];\n\t\t\t\t\t}\n\t\t\t\tfor (let k=1; k<nb_termes ; k++) {\n\t\t\t\t\tif (k==place_lettre) {\n\t\t\t\t\t\tcalcul += '\\\\times ' + liste_termes[k]+ \"^{\" + exp_lettre +\"}\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcalcul += '\\\\times ' + liste_termes[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcalcul_nombres = `${liste_nombres[0]} `;\n\t\t\t\tfor (let k=1; k<nb_termes-1 ; k++) {\n\t\t\t\t\tcalcul_nombres += `\\\\times ${liste_nombres[k]}`\n\t\t\t\t}\n\t\t\t\ttexte += ` ${nom_expression} = $ ${calcul} $ <br>`;\n\t\t\t\tif (this.correction_detaillee) {\n\t\t\t\t\tif (exp_lettre % 2 == 0) {\n\t\t\t\t\t\ttexte_corr += `On trouve ${exp_lettre} fois le facteur $ ${lettre} $.<br> Or ${exp_lettre} est pair donc leur produit sera positif.`;\n\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe de : $ ${calcul_nombres} $`;\n\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.`,\"black\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexte_corr += `On trouve ${exp_lettre} fois le facteur $ ${lettre} $. <br> Or ${exp_lettre} est impair donc leur produit est du signe de $ ${lettre} $ soit ${signe_lettre==-1 ? 'négatif' : 'positif'}.`;\n\t\t\t\t\t\tif (signe_lettre==-1) {\n\t\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n\t\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}.`,\"black\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexte_corr += `<br>Le signe de l'expression a donc le signe opposé à : $ ${calcul_nombres} $`;\n\t\t\t\t\t\t\ttexte_corr += `<br><br> ${num.setRegleSigneProduit(...liste_nombres)}`;\n\t\t\t\t\t\t\ttexte_corr += '<br><br>' + (0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.texte_en_couleur_et_gras)(`Donc ${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quand $ ${lettre} $ est ${signe_lettre==-1 ? 'négatif' : 'positif'}.`,\"black\");\n\t\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t}\t\t\n\t\t\t\t} else {\n\t\t\t\t\tif (exp_lettre % 2 == 0) {\n\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} quelque soit le signe de $ ${lettre} $.<br>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (signe_lettre==-1) {\n\t\t\t\t\t\t\tliste_nombres.push(-1);\n\t\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est négatif.<br>`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexte_corr = `${nom_expression} est ${num.getSigneProduitString(...liste_nombres)} si $ ${lettre} $ est positif.<br>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\t\n\t\t}\n\t\tif (this.liste_questions.indexOf(texte) == -1) {\n\t\t// Si la question n'a jamais été posée, on en créé une autre\n\t\tthis.liste_questions.push(texte);\n\t\tthis.liste_corrections.push(texte_corr);\n\t\ti++;\n\t\t}\n\t\tcpt++;\n    }\n\t(0,_modules_outils_js__WEBPACK_IMPORTED_MODULE_1__.liste_de_question_to_contenu)(this);\n  }\n  this.besoin_formulaire_numerique = [\n    \"Niveau de difficulté\",\n    3,\n    '1 : Multiplications\\n2 : Quotients \\n3 : Multiplications et quotients \\n4 : Multiplications avec plusieurs fois la lettre (dont puissances) \\n5 : Mélange ',\n  ];\n}\n\n\n\n\n//# sourceURL=webpack://mathalea/./src/js/exercices/beta/beta4C10-6.js?");

/***/ })

}]);