{"version":3,"file":"js/5335.b5e0ac332ab7f30a154d.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N43-4.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, combinaisonListes, randint, texNombre, nombreAvecEspace } from '../../modules/outils.js'\nimport Operation from '../../modules/operations.js'\nimport { context } from '../../modules/context.js'\nimport { choixDeroulant, setReponse } from '../../modules/gestionInteractif.js'\nexport const titre = 'Trouver des phrases avec les mots : divisible, diviseur et multiple'\nexport const interactifReady = true\nexport const interactifType = 'listeDeroulante'\n\n/**\n * Compléter des phrases avec les mots divisible, divieur et multiple\n * @author Rémi Angot\n * Référence 6N43-4\n*/\nexport default function DivisibleDiviseurMultiple () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.consigne = ''\n  this.nbQuestions = 6 // 6 questions au maximum\n  this.nbCols = 2 // Uniquement pour la sortie LaTeX\n  this.nbColsCorr = 2 // Uniquement pour la sortie LaTeX\n  this.tailleDiaporama = 3 // Pour les exercices chronométrés. 50 par défaut pour les exercices avec du texte\n  this.video = '' // Id YouTube ou url\n  this.listePackages = 'xlop'\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let b = randint(6, 17, [9, 10])\n    let q = randint(11, 99)\n    let r = randint(1, b - 1)\n    let a = b * q\n    let a1 = b * q + r\n    while (q % b === 0 || q % r === 0 || b % r === 0 || a1 % r === 0) {\n      b = randint(6, 17, [9, 10])\n      q = randint(11, 99)\n      r = randint(1, b - 1)\n      a = b * q\n      a1 = b * q + r\n    }\n    this.introduction = `À l'aide des calculs suivants, compléter les phrases suivantes avec les nombres $${texNombre(a1)}$, $${texNombre(a)}$, $${texNombre(b)}$ ou $${texNombre(q)}$.<br><br>`\n    if (randint(0, 1) === 0) {\n      this.introduction += Operation({ operande1: a, operande2: b, type: 'divisionE' })\n      if (!context.isHtml) this.introduction += '\\\\qquad'\n      this.introduction += Operation({ operande1: a1, operande2: b, type: 'divisionE' })\n    } else {\n      this.introduction += Operation({ operande1: a1, operande2: b, type: 'divisionE' })\n      if (!context.isHtml) this.introduction += '\\\\qquad'\n      this.introduction += Operation({ operande1: a, operande2: b, type: 'divisionE' })\n    }\n\n    const typesDeQuestionsDisponibles = [1, 2, 3, 4, 5, 6] // On créé 3 types de questions\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posés mais l'ordre diffère à chaque \"cycle\"\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // Boucle principale où i+1 correspond au numéro de la question\n      switch (listeTypeDeQuestions[i]) { // Suivant le type de question, le contenu sera différent\n        case 1:\n          texte = '... est divisible par ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'est divisible par' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(a)}$ est divisible par $${texNombre(b)}$ ou $${texNombre(a)}$ est divisible par $${texNombre(q)}$.`\n          setReponse(this, i, [[nombreAvecEspace(a), nombreAvecEspace(b)], [nombreAvecEspace(a), nombreAvecEspace(q)]])\n          break\n        case 2:\n          texte = '... est un diviseur de ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'est un diviseur de' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(b)}$ est un diviseur de $${texNombre(a)}$ ou $${texNombre(q)}$ est un diviseur de $${texNombre(a)}$.`\n          setReponse(this, i, [[nombreAvecEspace(b), nombreAvecEspace(a)], [nombreAvecEspace(q), nombreAvecEspace(a)]])\n          break\n        case 3:\n          texte = '... est un multiple de ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'est un multiple de' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(a)}$ est un multiple de $${texNombre(b)}$ ou $${texNombre(a)}$ est un multiple de $${texNombre(q)}$.`\n          setReponse(this, i, [[nombreAvecEspace(a), nombreAvecEspace(b)], [nombreAvecEspace(a), nombreAvecEspace(q)]])\n          break\n        case 4:\n          texte = '... n\\'est pas divisible par ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'n\\'est pas divisible par' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(a1)}$ n'est pas divisible par $${texNombre(b)}$ ou $${texNombre(a1)}$ n'est pas divisible par $${texNombre(q)}$.`\n          setReponse(this, i, [[nombreAvecEspace(a1), nombreAvecEspace(b)], [nombreAvecEspace(a1), nombreAvecEspace(q)]])\n          break\n        case 5:\n          texte = '... n\\'est pas un diviseur de ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'n\\'est pas un diviseur de' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(b)}$ n'est pas un diviseur de $${texNombre(a1)}$ ou $${texNombre(q)}$ n'est pas un diviseur de $${texNombre(a1)}$.`\n          setReponse(this, i, [[nombreAvecEspace(b), nombreAvecEspace(a1)], [nombreAvecEspace(q), nombreAvecEspace(a1)]])\n          break\n        case 6:\n          texte = '... n\\'est pas un multiple de ...'\n          if (this.interactif) {\n            texte = choixDeroulant(this, i, 0, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)]) + 'n\\'est pas un multiple de' + choixDeroulant(this, i, 1, [nombreAvecEspace(a1), nombreAvecEspace(a), nombreAvecEspace(b), nombreAvecEspace(q)])\n          }\n          texteCorr = `$${texNombre(a1)}$ n'est pas un multiple de $${texNombre(b)}$ ou $${texNombre(a1)}$ est n'est pas un multiple de $${texNombre(q)}$.`\n          setReponse(this, i, [[nombreAvecEspace(a1), nombreAvecEspace(b)], [nombreAvecEspace(a1), nombreAvecEspace(q)]])\n          break\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        // texte = '<div class=\"ui form>' + texte + '</div>'\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n"],"names":["titre","interactifReady","interactifType","DivisibleDiviseurMultiple","Exercice","this","consigne","nbQuestions","nbCols","nbColsCorr","tailleDiaporama","video","listePackages","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","b","randint","q","r","a","a1","introduction","texNombre","Operation","operande1","operande2","type","context","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","interactif","choixDeroulant","nombreAvecEspace","setReponse","indexOf","push","listeQuestionsToContenu"],"sourceRoot":""}