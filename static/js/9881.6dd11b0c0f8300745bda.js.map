{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/_Pavages_et_transformations.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["Pavages_et_transformations","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","sortieHtml","spacingCorr","nouvelleVersion","numeroExercice","listeQuestions","listeCorrections","objets_enonce","objets_correction","paves","Math","sin","PI","quad","quadInitial","quad1","quad2","quad3","mediatrice1","mediatrice2","mediatrice3","centre1","centre2","centre3","arc1","arc2","arc3","rayon11","rayon12","rayon21","rayon22","rayon31","rayon32","vecteur1","vecteur2","vecteur3","vector1","vector2","vector3","origine1","origine2","origine3","B","C","D","texte","texteCorr","tabfigA","tabfigB","tabfigC","tabfigD","choixPave","pave","parseInt","sup","randint","console","log","nx","ny","xB","yB","xC","yC","xD","yD","Zoom","Angle","A","point","similitude","x","y","polygone","xAI","yAI","I","milieu","J","xAJ","yAJ","xAxy","yAxy","numAxy","indexA","numA","indexcentre1","indexD","numD","indexcentre2","indexC","numC","indexcentre3","num1","num2","num3","punto","trouver","xmil1","ymil1","xmil2","ymil2","xmil3","ymil3","xc","yc","xb","yb","xa","ya","xV1","yV1","xV2","yV2","xV3","yV3","s0","choice","s1","s2","Xmin","min","Xmax","max","Ymin","Ymax","push","translation","vecteur","rotation","i","length","texteParPoint","barycentre","mathalea","fenetreMathalea2d","indexsym1","imagePointParTransformation","j","egal","mediatrice","color","epaisseur","isVisible","couleurDeRemplissage","opaciteDeRemplissage","numAlpha","texteEnCouleurEtGras","indexsym2","tracePoint","indexsym3","floor","symetrieAnimee","mathalea2d","xmin","xmax","ymin","ymax","pixelsParCm","scale","optionsTikz","mainlevee","labelPoint","rotationAnimee","arc","segment","pointilles","iB1","iB2","iB3","iC1","iA1","iD1","representant","translationAnimee","listeQuestionsToContenuSansNumero","besoinFormulaireNumerique","titre","consigneCorrection","introduction","contenu","contenuCorrection","spacing","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","listePackages"],"mappings":"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","file":"js/9881.6dd11b0c0f8300745bda.js","sourcesContent":["import { translation, mathalea2d, polygone, point, segment, rotation, similitude, arc, vecteur, milieu, barycentre, texteParPoint, labelPoint, mediatrice, tracePoint, symetrieAnimee, rotationAnimee, translationAnimee } from '../../modules/2d.js'\nimport Exercice from '../ClasseExercice.js'\nimport { egal, listeQuestionsToContenuSansNumero, randint, choice, imagePointParTransformation, texteEnCouleurEtGras, numAlpha } from '../../modules/outils.js'\n\n/**\n * Trouver l'image d'une figure par une symétrie centrale dans un pavage (7 motifs différents)\n * @Auteur Jean-Claude Lhote\n * fonction servant à tous les niveaux\n * Pas de version Latex !\n * Références 5G12-1, 6G25-2, 4G11-1, 3G12-1\n */\nexport default function Pavages_et_transformations () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n\n  //\tthis.titre = \"Trouver l'image d'une figure par une symétrie centrale\";\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  //\tthis.sup = 1; // 1 pour symétrie axiale, 2 pour symétrie centrale, 3 pour translations, et 4 pour rotations ; paramètre fixé par les variantes respectives.\n  sortieHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n  this.nouvelleVersion = function (numeroExercice) {\n    this.listeQuestions = []\n    this.listeCorrections = [] // Liste de questions corrigées\n    const objets_enonce = []\n    const objets_correction = []\n\n    // listes de pavages [nx,ny,xB,yB,xC,yC,xD,yD,zoom,anngle]  : 0=carrés, 1=cerf-volant 2=quadri concave 3=quadri quelconque 4=parallélogrammes 5=triangles rectangles isocèles 6=triangles équilatéraux 7=losanges\n    const paves = [[5, 5, 4, 0, 4, 4, 0, 4, 30, 0], [5, 5, 6, 0, 8, 8, 0, 6, 60, -9], [5, 5, 8, 0, 4, 4, 2, 8, 50, 0], [5, 5, 4, 0, 6, 4, 0, 6, 50, 5], [4, 6, 8, 0, 7, 4, -1, 4, 50, 10], [5, 5, 8, 0, 4, 4, 0, 8, 50, 0], [5, 5, 4, 0, 3, 2 * Math.sin(Math.PI / 3), 2, 4 * Math.sin(Math.PI / 3), 20, 0], [4, 4, 3, 1, 4, 4, 1, 3, 20, 0]]\n    const quad = []; let quadInitial; let quad1; let quad2; let quad3\n    let mediatrice1, mediatrice2, mediatrice3, centre1, centre2, centre3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32\n    let vecteur1, vecteur2, vecteur3, vector1, vector2, vector3, origine1, origine2, origine3\n    let B, C, D\n    let texte = ''; let texteCorr = ''\n    const tabfigA = []; const tabfigB = []; const tabfigC = []; const tabfigD = []\n    let pave = []\n    let choixPave\n    switch (parseInt(this.sup)) {\n      case 1:\n\n        choixPave = 0 // pavages adaptés à symétrie axiale (carrés)\n        break\n      case 2:\n        choixPave = randint(0, 7)// pavages adaptés à symétrie centrale (tous)\n        console.log(choixPave)\n        break\n      case 3:\n        choixPave = randint(0, 7) // pavages adaptés à translation (tous)\n        break\n      case 4:\n        choixPave = 0 // pavages adaptés à rotation (carrés  )\n        break\n    }\n    pave = paves[choixPave]\n\n    const nx = pave[0]; const ny = pave[1]; let xB = pave[2]; let yB = pave[3]; let xC = pave[4]; let yC = pave[5]; let xD = pave[6]; let yD = pave[7]; const Zoom = pave[8]; const Angle = pave[9]\n    const A = point(0, 0)\n    if (choixPave != 0 && choixPave != 6 && choixPave != 7) {\n        \tB = similitude(point(xB, yB), A, Angle, 22 / Zoom)\n        \tC = similitude(point(xC, yC), A, Angle, 22 / Zoom)\n        \tD = similitude(point(xD, yD), A, Angle, 22 / Zoom)\n      xB = B.x\n      yB = B.y\n      xC = C.x\n      yC = C.y\n      xD = D.x\n      yD = D.y\n    } else {\n      B = point(xB, yB)\n      C = point(xC, yC)\n      D = point(xD, yD)\n    }\n    quadInitial = polygone(A, B, C, D)\n    const xAI = xB + xC - xD\n    const yAI = yB + yC - yD\n    const I = milieu(B, C)\n    const J = milieu(D, C)\n    const xAJ = xC + xD - xB\n    const yAJ = yC + yD - yB\n    let xAxy, yAxy, numAxy\n    let punto = [0, 0, 0]\n    let trouver = false; let indexA; let numA; let indexcentre1; let xmil1 = 0; let ymil1 = 0; let indexD; let numD; let indexcentre2; let xmil2 = 0; let ymil2 = 0; let indexC; let numC; let indexcentre3; let xmil3 = 0; let ymil3 = 0; let num1; let num2; let num3\n    let xc = 0; let yc = 0; let xb = 0; let yb = 0; let xa = 0; let ya = 0; let xV1 = 0; let yV1 = 0; let xV2 = 0; let yV2 = 0; let xV3 = 0; let yV3 = 0\n    const s0 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'])\n    const s1 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'], [s0])\n    const s2 = choice(['S', 'T', 'L', 'W', 'R', 'G', 'E', 'F', 'G', 'K'], [s0, s1])\n    const Xmin = Math.min(-1, ny * xAJ)\n    const Xmax = Math.max(nx * xAI + 1, nx * xAI + ny * xAJ + 1)\n    const Ymin = Math.min(-1, nx * yAI)\n    const Ymax = Math.max(nx * yAI + ny * yAJ + 1, ny * yAJ + 1)\n\n    for (let y = 0; y < ny; y++) { // On initialise les tableaux avec les coordonnées des puntos de référence (A,B,C et D) de chaque translaté et son numéro dans le pavage.\n      for (let x = 0; x < nx; x++) {\n        xAxy = x * xAI + y * xAJ\n        yAxy = x * yAI + y * yAJ\n        numAxy = 2 * x + 4 * y * nx\n        tabfigA.push([xAxy, yAxy, numAxy])\n        quad[numAxy] = translation(polygone(A, B, C, D), vecteur(xAxy, yAxy))\n        tabfigB.push([xAxy + xB, yAxy + yB, numAxy + 1])\n        quad[numAxy + 1] = translation(rotation(polygone(A, B, C, D), I, 180), vecteur(xAxy, yAxy))\n        tabfigD.push([xAxy + xD, yAxy + yD, numAxy + 2 * nx])\n        quad[numAxy + 2 * nx] = translation(rotation(polygone(A, B, C, D), J, 180), vecteur(xAxy, yAxy))\n        tabfigC.push([xAxy + xC, yAxy + yC, numAxy + 2 * nx + 1])\n        quad[numAxy + 2 * nx + 1] = translation(translation(polygone(A, B, C, D), vecteur(A, C)), vecteur(xAxy, yAxy))\n      }\n    }\n    for (let i = 0; i < quad.length; i++) {\n      objets_enonce.push(quad[i], texteParPoint(i, barycentre(quad[i], '', 'center'), 'milieu', 'black', 1, 'middle', false))\n      objets_correction.push(quad[i], texteParPoint(i, barycentre(quad[i], '', 'center'), 'milieu', 'black', 1, 'middle', false))\n    }\n\n    mathalea.fenetreMathalea2d = [Xmin, Ymin, Xmax, Ymax]\n    switch (parseInt(this.sup)) {\n      case 1: // symétrie axiale\n        // Première question : une figure type A par symétrie d'axe // à [BD] est une figure type A. le symétrique du sommet A est le sommet C\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        let indexsym1 = randint(0, nx * ny - 1, [indexA]) // sert à choisir un axe [BD].\n        xmil1 = tabfigD[indexsym1][0] // sert pour faire passer l'axe de symétrie.\n        ymil1 = tabfigD[indexsym1][1]\n        punto = imagePointParTransformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigA[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              mediatrice1 = mediatrice(point(xa, ya), point(punto[0], punto[1]), '(d_1)')\n              mediatrice1.color = 'green'\n              mediatrice1.epaisseur = 2\n              mediatrice1.isVisible = true\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexsym1 = randint(0, nx * ny - 1, [indexA])\n            xmil1 = tabfigD[indexsym1][0]\n            ymil1 = tabfigD[indexsym1][1]\n            punto = imagePointParTransformation(2, [tabfigA[indexA][0], tabfigA[indexA][1]], [xmil1, ymil1])\n          }\n        }\n        texte = numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numA} dans la symétrie par rapport à $(d_1)$ ?<br>`, 'green')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numA} dans la symétrie par rapport à $(d_1)$ porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure type D par symétrie d'axe // à [AC] est une figure type B. le symétrique du sommet B est le sommet D\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        let indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert à choisir un axe [AC].\n        xmil2 = tabfigA[indexsym2][0] // sert pour faire passer l'axe de symétrie.\n        ymil2 = tabfigA[indexsym2][1]\n        punto = imagePointParTransformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigB[j][2]\n              xb = tabfigD[indexD][0]\n              yb = tabfigD[indexD][1] - 4\n              objets_enonce.push(tracePoint(point(xb, yb), point(punto[0], punto[1])))\n              mediatrice2 = mediatrice(point(xb, yb + 4), point(punto[0], punto[1]), '(d_2)')\n              mediatrice2.color = 'red'\n              mediatrice2.epaisseur = 2\n              mediatrice2.isVisible = true\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n\n              break\n            }\n          }\n          if (trouver == false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexsym2 = randint(0, nx * ny - 1, [indexD]) // sert à choisir un axe [AC].\n            xmil2 = tabfigA[indexsym2][0] // sert pour faire passer l'axe de symétrie.\n            ymil2 = tabfigA[indexsym2][1]\n            punto = imagePointParTransformation(1, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numD} dans la symétrie par rapport à $(d_2)$ ?<br>`, 'red')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numD} dans la symétrie par rapport à $(d_2)$ porte le numéro ${num2}.<br>`, 'red')\n        // troisième question : une figure type D par symétrie d'axe // à [DC] est une figure type A. le symétrique du sommet D est le sommet A'\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        const indexsym3 = randint(0, 4, Math.floor(indexC / 5)) * 5 // sert à choisir un axe [AC].\n        xmil3 = tabfigC[indexsym3][0] // sert pour faire passer l'axe de symétrie.\n        ymil3 = tabfigC[indexsym3][1]\n        punto = imagePointParTransformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigB[j][2]\n              xc = tabfigC[indexC][0]\n              yc = tabfigC[indexC][1]\n              mediatrice3 = mediatrice(point(xc, yc), point(punto[0], punto[1]), '(d_3)')\n              mediatrice3.color = 'blue'\n              mediatrice3.epaisseur = 2\n              mediatrice3.isVisible = true\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            const indexsym3 = randint(0, 4, Math.floor(indexC / 5)) * 5 // sert à choisir un axe [AC].\n            xmil3 = tabfigC[indexsym3][0] // sert pour faire passer l'axe de symétrie.\n            ymil3 = tabfigC[indexsym3][1]\n            punto = imagePointParTransformation(3, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numC} dans la symétrie par rapport à $(d_3)$ ?<br>`, 'blue')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numC} dans la symétrie par rapport à $(d_3)$ porte le numéro ${num3}.<br>`, 'blue')\n        objets_enonce.push(mediatrice1, mediatrice2, mediatrice3)\n        objets_correction.push(mediatrice1, mediatrice2, mediatrice3, symetrieAnimee(quad[numA], mediatrice1, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), symetrieAnimee(quad[numD], mediatrice2, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), symetrieAnimee(quad[numC], mediatrice3, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_enonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        objets_correction.push(quad1, quad2, quad3)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_correction\n        )\n\n        break\n      case 2: // symétrie centrale\n        // Première question : une figure dans tabfigA, une symétrie par rapport au milieu d'un [B'C'], logiquement : l'image est dans tabfigB et B' est l'image de C !\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        indexcentre1 = randint(0, nx * ny - 1, indexA) // indexcentre1 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu de [BC] on ajoute aux coordonnées du milieu de [BC] celles du vecteur BB'. (j'aurais pu réduire mais cela aurait rendu le calcul plus opaque)\n        xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB\n        ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB\n        punto = imagePointParTransformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigB[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              centre1 = point(xmil1, ymil1, s0, 'left')\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver === false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexcentre1 = randint(0, nx * ny - 1, indexA)\n            xmil1 = (xB + xC) / 2 + tabfigB[indexcentre1][0] - xB\n            ymil1 = (yB + yC) / 2 + tabfigB[indexcentre1][1] - yB\n            punto = imagePointParTransformation(7, [tabfigC[indexA][0], tabfigC[indexA][1]], [xmil1, ymil1])\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numA} dans la symétrie par rapport à ${s0} ?<br>`, 'green')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numA} dans la symétrie par rapport à ${s0} porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure dans tabfigD, une symétrie par rapport au milieu d'un [C'D'], le résultat est une figure dans tabfigA et C' est l'image de D !\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        indexcentre2 = randint(0, nx * ny - 1, [indexD]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu de [DC] on ajoute aux coordonnées du milieu de [DC] celles du vecteur DD'.\n        xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD\n        ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD\n        punto = imagePointParTransformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigA[j][2]\n              xb = tabfigA[indexD][0]\n              yb = tabfigA[indexD][1]\n              centre2 = point(xmil2, ymil2, s1, 'left')\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n\n              break\n            }\n          }\n          if (trouver == false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexcentre2 = randint(0, nx * ny - 1, [indexD])\n            xmil2 = (xD + xC) / 2 + tabfigD[indexcentre2][0] - xD\n            ymil2 = (yD + yC) / 2 + tabfigD[indexcentre2][1] - yD\n            punto = imagePointParTransformation(7, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2])\n          }\n        }\n\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numD} dans la symétrie par rapport à ${s1} ?<br>`, 'red')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numD} dans la symétrie par rapport à ${s1} porte le numéro ${num2}.<br>`, 'red')\n        // troisième question : une figure dans tabfigC, une symétrie par rapport au symétrique du milieu de [A'D'] par rapport au milieu de [C'D']... pas très clair\n        // le résultat est une figure dans tabfigD et le point (C'+ vecteur AC) a pour image D' !\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        indexcentre3 = randint(0, nx * ny - 1, [indexC]) // indexcentre2 est l'index du bloc de 4 figures A,B,C et D, il sert dans les 4 tableaux.\n\n        // on calcule les coordonnées du milieu du centre de symétrie : (C' + D + AC)/2=AC+AD/2 que l'on translate de CC' donc ça fait AC' + AD/2\n        xmil3 = xD / 2 + tabfigC[indexcentre3][0]\n        ymil3 = yD / 2 + tabfigC[indexcentre3][1]\n        punto = imagePointParTransformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3]) // c'est le sommet C + AC qui a pour image D.\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], tabfigD[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigD[j][2]\n              xc = tabfigA[indexC][0]\n              yc = tabfigA[indexC][1]\n              centre3 = point(xmil3, ymil3, s2, 'left')\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            indexcentre3 = randint(0, nx * ny - 1, [indexC])\n            xmil3 = xD / 2 + tabfigC[indexcentre3][0]\n            ymil3 = yD / 2 + tabfigC[indexcentre3][1]\n            punto = imagePointParTransformation(7, [tabfigC[indexC][0] + xC, tabfigC[indexC][1] + yC], [xmil3, ymil3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure symétrique de la figure ${numC} dans la symétrie par rapport à ${s2} ?<br>`, 'blue')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure symétrique de la figure ${numC} dans la symétrie par rapport à ${s2} porte le numéro ${num3}.<br>`, 'blue')\n\n        objets_enonce.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3))\n        objets_correction.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3)\n          , rotationAnimee(quad[numA], centre1, 180, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numD], centre2, 180, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numC], centre3, 180, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_enonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        arc1 = arc(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1, 180)\n        rayon11 = segment(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1)\n        rayon12 = rotation(rayon11, centre1, 180)\n        rayon11.pointilles = 2\n        rayon12.pointilles = 2\n        arc1.pointilles = 2\n        arc2 = arc(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2, 180)\n        rayon21 = segment(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2)\n        rayon22 = rotation(rayon21, centre2, 180)\n        rayon21.pointilles = 2\n        rayon22.pointilles = 2\n        arc2.pointilles = 2\n        arc3 = arc(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3, 180)\n        rayon31 = segment(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3)\n        rayon32 = rotation(rayon31, centre3, 180)\n        rayon31.pointilles = 2\n        rayon32.pointilles = 2\n        arc3.pointilles = 2\n        objets_correction.push(quad1, quad2, quad3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_correction\n        )\n\n        break\n\n      case 3: // translations\n        let iB1, iB2, iB3, iC1, iA1, iD1\n\n        // Première question : une figure dans tabfigA, l'image dans tabfigA...\n        // On choisit deux figures de type B pour définir le vecteur de translation.\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        iB1 = randint(0, nx * ny - 1)\n        iB2 = randint(0, nx * ny - 1, [iB1])\n        xV1 = tabfigB[iB2][0] - tabfigB[iB1][0]\n        yV1 = tabfigB[iB2][1] - tabfigB[iB1][1]\n        punto = imagePointParTransformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0, 0], [xV1, yV1])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigA[j][0], 0.001) && egal(punto[1], tabfigA[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigA[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              origine1 = point(tabfigB[iB1][0], tabfigB[iB1][1])\n              vector1 = vecteur(origine1, point(tabfigB[iB2][0], tabfigB[iB2][1]))\n              vecteur1 = vector1.representant(origine1)\n              vecteur1.color = 'green'\n              vecteur1.epaisseur = 2\n              vecteur1.pointilles = 2\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            iB1 = randint(0, nx * ny - 1)\n            iB2 = randint(0, nx * ny - 1, [iB1])\n            xV1 = tabfigB[iB2][0] - tabfigB[iB1][0]\n            yV1 = tabfigB[iB2][1] - tabfigB[iB1][1]\n            punto = imagePointParTransformation(8, [tabfigA[indexA][0], tabfigA[indexA][1]], [0, 0], [xV1, yV1])\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} quelle est le numéro de l'image de la figure ${numA} ?<br>`, 'green')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure image de la figure ${numA}  dans la translation qui transforme la figure ${tabfigB[iB1][2]} en la figure ${tabfigB[iB2][2]} porte le numéro ${num1}.<br>`, 'green')\n        // Deuxième question : une figure dans tabfigD, l'image dans tabfigB...\n        // On choisit une figure C et une figure A pour définir le vecteur de translation.\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        iC1 = randint(0, nx * ny - 1)\n        iA1 = randint(0, nx * ny - 1, [iC1])\n        xV2 = tabfigA[iA1][0] - tabfigC[iC1][0]\n        yV2 = tabfigA[iA1][1] - tabfigC[iC1][1]\n        punto = imagePointParTransformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0, 0], [xV2, yV2])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigB[j][0], 0.001) && egal(punto[1], tabfigB[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigB[j][2]\n              xb = tabfigD[indexD][0]\n              yb = tabfigD[indexD][1]\n              origine2 = point(tabfigC[iC1][0], tabfigC[iC1][1])\n              vector2 = vecteur(origine2, point(tabfigA[iA1][0], tabfigA[iA1][1]))\n              vecteur2 = vector2.representant(origine2)\n              vecteur2.color = 'red'\n              vecteur2.epaisseur = 2\n              vecteur2.pointilles = 2\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            iC1 = randint(0, nx * ny - 1)\n            iA1 = randint(0, nx * ny - 1, [iC1])\n            xV2 = tabfigA[iA1][0] - tabfigC[iC1][0]\n            yV2 = tabfigA[iA1][1] - tabfigC[iC1][1]\n            punto = imagePointParTransformation(8, [tabfigD[indexD][0], tabfigD[indexD][1]], [0, 0], [xV2, yV2])\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} quelle est le numéro de l'image de la figure ${numD} ?<br>`, 'red')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure image de la figure ${numD}  dans la translation qui transforme la figure ${tabfigC[iC1][2]} en la figure ${tabfigA[iA1][2]} porte le numéro ${num2}.<br>`, 'red')\n\n        // troisième question : une figure dans tabfigC, l'image dans tabfigA...\n        // On choisit une figure D et une figure B pour définir le vecteur de translation.\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        iD1 = randint(0, nx * ny - 1)\n        iB3 = randint(0, nx * ny - 1, [iD1])\n        xV3 = tabfigA[iB3][0] - tabfigC[iD1][0]\n        yV3 = tabfigA[iB3][1] - tabfigC[iD1][1]\n        punto = imagePointParTransformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0, 0], [xV3, yV3])\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigA[j][0], 0.001) && egal(punto[1], tabfigA[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigA[j][2]\n              xc = tabfigC[indexC][0]\n              yc = tabfigC[indexC][1]\n              origine3 = point(tabfigC[iD1][0], tabfigC[iD1][1])\n              vector3 = vecteur(origine3, point(tabfigA[iB3][0], tabfigA[iB3][1]))\n              vecteur3 = vector3.representant(origine3)\n              vecteur3.color = 'blue'\n              vecteur3.epaisseur = 2\n              vecteur3.pointilles = 2\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            iD1 = randint(0, nx * ny - 1)\n            iB3 = randint(0, nx * ny - 1, [iD1])\n            xV3 = tabfigA[iB3][0] - tabfigC[iD1][0]\n            yV3 = tabfigA[iB3][1] - tabfigC[iD1][1]\n            punto = imagePointParTransformation(8, [tabfigC[indexC][0], tabfigC[indexC][1]], [0, 0], [xV3, yV3])\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} quelle est le numéro de l'image de la figure ${numC} ?<br>`, 'blue')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure image de la figure ${numC}  dans la translation qui transforme la figure ${tabfigC[iD1][2]} en la figure ${tabfigA[iB3][2]} porte le numéro ${num3}.<br>`, 'blue')\n\n        objets_enonce.push(vecteur1, vecteur2, vecteur3)\n        objets_correction.push(vecteur1, vecteur2, vecteur3\n          , translationAnimee(quad[numA], vector1, `id=\"anim${numeroExercice}A\" dur=\"2s\" repeatcount=\"1\"`), translationAnimee(quad[numD], vector2, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), translationAnimee(quad[numC], vector3, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_enonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        rayon11 = vector1.representant(point(xa, ya))\n        rayon11.color = 'green'\n        rayon11.epaisseur = 2\n        rayon21 = vector2.representant(point(xb, yb))\n        rayon21.color = 'red'\n        rayon21.epaisseur = 2\n        rayon31 = vector3.representant(point(xc, yc))\n        rayon31.color = 'blue'\n        rayon31.epaisseur = 2\n        objets_correction.push(quad1, quad2, quad3, rayon11, rayon21, rayon31)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_correction\n        )\n\n        break\n\n      case 4: // rotations\n\n        // première question : centre A, rotation de 90° sens anti-horaire, une figure de tabfigA donne une figure de tabfigD, le point B donne le point D.\n        indexA = randint(0, nx * ny - 1)\n        numA = tabfigA[indexA][2]\n        indexcentre1 = randint(0, nx * ny - 1, [indexA])\n        xmil1 = tabfigA[indexcentre1][0]\n        ymil1 = tabfigA[indexcentre1][1]\n        punto = imagePointParTransformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], tabfigD[j][1], 0.001)) {\n              trouver = true\n              num1 = tabfigD[j][2]\n              xa = tabfigA[indexA][0]\n              ya = tabfigA[indexA][1]\n              centre1 = point(xmil1, ymil1, s0, 'left')\n              quad[numA].couleurDeRemplissage = 'green'\n              quad[numA].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexA = randint(0, nx * ny - 1)\n            numA = tabfigA[indexA][2]\n            indexcentre1 = randint(0, nx * ny - 1, [indexA])\n            xmil1 = tabfigA[indexcentre1][0]\n            ymil1 = tabfigA[indexcentre1][1]\n            punto = imagePointParTransformation(6, [tabfigB[indexA][0], tabfigB[indexA][1]], [xmil1, ymil1]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(0) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90° dans le sens des aiguilles d'une montre ?<br>`, 'green')\n        texteCorr = numAlpha(0) + texteEnCouleurEtGras(` La figure image de la figure ${numA} dans la rotation de centre ${s0} et d'angle 90° dans le sens des aiguilles d'une montre porte le numéro ${num1}.<br>`, 'green')\n\n        // deuxième question : centre B, rotation 90° sens horaire, une figure de tabfigD donne une figure de tabfigC\n        indexD = randint(0, nx * ny - 1)\n        numD = tabfigD[indexD][2]\n        indexcentre2 = randint(0, nx * ny - 1, [indexD])\n        xmil2 = tabfigB[indexcentre2][0]\n        ymil2 = tabfigB[indexcentre2][1]\n        punto = imagePointParTransformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], 4 + tabfigC[j][0], 0.001) && egal(punto[1], tabfigC[j][1], 0.001)) {\n              trouver = true\n              num2 = tabfigC[j][2]\n              xb = tabfigA[indexD][0]\n              yb = tabfigA[indexD][1]\n              centre2 = point(xmil2, ymil2, s1, 'left')\n              quad[numD].couleurDeRemplissage = 'red'\n              quad[numD].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexD = randint(0, nx * ny - 1)\n            numD = tabfigD[indexD][2]\n            indexcentre2 = randint(0, nx * ny - 1, [indexD])\n            xmil2 = tabfigB[indexcentre2][0]\n            ymil2 = tabfigB[indexcentre2][1]\n            punto = imagePointParTransformation(5, [tabfigD[indexD][0], tabfigD[indexD][1]], [xmil2, ymil2]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(1) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90° dans le sens inverse des aiguilles d'une montre ?<br>`, 'red')\n        texteCorr += numAlpha(1) + texteEnCouleurEtGras(` La figure image de la figure ${numD} dans la rotation de centre ${s1} et d'angle 90° dans le sens inverse des aiguilles d'une montre porte le numéro ${num2}.<br>`, 'red')\n\n        // troisième question : centre B, rotation 90° sens anti-horaire, une figure de tabfigC donne une figure de tabfigD\n        indexC = randint(0, nx * ny - 1)\n        numC = tabfigC[indexC][2]\n        indexcentre3 = randint(0, nx * ny - 1, [indexC])\n        xmil3 = tabfigB[indexcentre3][0]\n        ymil3 = tabfigB[indexcentre3][1]\n        punto = imagePointParTransformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repère est direct, donc le sens de rotation est inversé...\n        trouver = false\n        while (trouver == false) {\n          for (let j = 0; j < nx * ny; j++) {\n            if (egal(punto[0], tabfigD[j][0], 0.001) && egal(punto[1], 4 + tabfigD[j][1], 0.001)) {\n              trouver = true\n              num3 = tabfigD[j][2]\n              xc = tabfigA[indexC][0]\n              yc = tabfigA[indexC][1]\n              centre3 = point(xmil3, ymil3, s2, 'left')\n              quad[numC].couleurDeRemplissage = 'blue'\n              quad[numC].opaciteDeRemplissage = 0.6\n              break\n            }\n          }\n          if (trouver == false) {\n            indexC = randint(0, nx * ny - 1)\n            numC = tabfigC[indexC][2]\n            indexcentre3 = randint(0, nx * ny - 1, [indexC])\n            xmil3 = tabfigB[indexcentre3][0]\n            ymil3 = tabfigB[indexcentre3][1]\n            punto = imagePointParTransformation(6, [tabfigC[indexC][0], tabfigC[indexC][1]], [xmil3, ymil3]) // le repère est direct, donc le sens de rotation est inversé...\n          }\n        }\n        texte += numAlpha(2) + texteEnCouleurEtGras(` Quel est le numéro de la figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90° dans le sens des aiguilles d'une montre ?<br>`, 'blue')\n        texteCorr += numAlpha(2) + texteEnCouleurEtGras(` La figure image de la figure ${numC} dans la rotation de centre ${s2} et d'angle 90° dans le sens des aiguilles d'une montre porte le numéro ${num3}.<br>`, 'blue')\n\n        objets_enonce.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3))\n        objets_correction.push(tracePoint(centre1), tracePoint(centre2), tracePoint(centre3), labelPoint(centre1), labelPoint(centre2), labelPoint(centre3)\n          , rotationAnimee(quad[numA], centre1, -90, `id=\"anim${numeroExercice}A\" dur =\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numD], centre2, 90, `id=\"anim${numeroExercice}B\" dur=\"2s\" repeatcount=\"1\"`), rotationAnimee(quad[numC], centre3, -90, `id=\"anim${numeroExercice}C\" dur=\"2s\" repeatcount=\"1\"`))\n\n        texte += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_enonce\n        )\n        quad1 = translation(quad[num1], vecteur(0, 0))\n        quad1.couleurDeRemplissage = 'green'\n        quad1.opaciteDeRemplissage = 0.3\n        quad2 = translation(quad[num2], vecteur(0, 0))\n        quad2.couleurDeRemplissage = 'red'\n        quad2.opaciteDeRemplissage = 0.3\n        quad3 = translation(quad[num3], vecteur(0, 0))\n        quad3.couleurDeRemplissage = 'blue'\n        quad3.opaciteDeRemplissage = 0.3\n        arc1 = arc(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1, -90)\n        rayon11 = segment(point(tabfigA[indexA][0], tabfigA[indexA][1]), centre1)\n        rayon12 = rotation(rayon11, centre1, -90)\n        rayon11.pointilles = 2\n        rayon12.pointilles = 2\n        arc1.pointilles = 2\n        arc1.epaisseur = 2\n        arc1.color = 'green'\n        arc2 = arc(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2, 90)\n        rayon21 = segment(point(tabfigD[indexD][0], tabfigD[indexD][1]), centre2)\n        rayon22 = rotation(rayon21, centre2, 90)\n        rayon21.pointilles = 2\n        rayon22.pointilles = 2\n        arc2.pointilles = 2\n        arc2.epaisseur = 2\n        arc2.color = 'red'\n        arc3 = arc(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3, -90)\n        rayon31 = segment(point(tabfigC[indexC][0], tabfigC[indexC][1]), centre3)\n        rayon32 = rotation(rayon31, centre3, -90)\n        rayon31.pointilles = 2\n        rayon32.pointilles = 2\n        arc3.pointilles = 2\n        arc3.epaisseur = 2\n        arc3.color = 'blue'\n        objets_correction.push(quad1, quad2, quad3, arc1, arc2, arc3, rayon11, rayon12, rayon21, rayon22, rayon31, rayon32)\n        texteCorr += mathalea2d({\n          xmin: Xmin,\n          xmax: Xmax,\n          ymin: Ymin,\n          ymax: Ymax,\n          pixelsParCm: 15,\n          scale: 0.3,\n          optionsTikz: ['every node/.style={scale=0.6}'],\n          mainlevee: false\n        }, objets_correction\n        )\n\n        break\n    }\n\n    texteCorr += '<br>'\n    texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}A').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation verte</button>`\n    texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}B').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation rouge</button>`\n    texteCorr += `<button class=\"btn ui labeled icon button\"  style=\"margin:10px\" onclick=\"document.getElementById('anim${numeroExercice}C').beginElement()\"><i class=\"redo circle icon\"></i>Relancer l'animation bleue</button>`\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenuSansNumero(this)\n  }\n  this.besoinFormulaireNumerique = ['Transformations', 4, '1 : Symétries axiales\\n 2 : Symétries centrales\\n 3 : Translations\\n 4 : Rotations\\n 5 : Homothéties\\n']\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}