{"version":3,"file":"js/21537.e1fea8480d099c1c8317.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/6N11-4.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListesSansChangerOrdre, texNombre, miseEnEvidence, texteEnCouleurEtGras } from '../../modules/outils.js'\nexport const titre = 'Ranger une liste de nombres entiers dans l’ordre croissant ou décroissant'\n\n/**\n* * Ranger une liste de nombres dans l'odre croissant ou décroissant\n* * 6N11-4\n* @author Sébastien Lozano\n*/\n\nexport default function RangerOrdreCroissantDecroissant () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.beta = false\n  this.sup = 1\n  if (this.beta) {\n    this.nbQuestions = 2\n  } else {\n    this.nbQuestions = 2\n  };\n\n  // this.consigne = `Classer les nombres suivants dans l'ordre indiqué.`;\n\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  // this.nbQuestionsModifiable = false;\n  context.isHtml ? this.spacing = 3 : this.spacing = 2\n  context.isHtml ? this.spacingCorr = 2.5 : this.spacingCorr = 1.5\n\n  let typesDeQuestionsDisponibles\n\n  this.nouvelleVersion = function () {\n    if (this.beta) {\n      typesDeQuestionsDisponibles = [0, 1]\n    } else {\n      // typesDeQuestionsDisponibles = shuffle([choice([1,3]),choice([2,4]),0]);\n      typesDeQuestionsDisponibles = [0, 1]\n    };\n\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n\n    // let listeTypeDeQuestions  = combinaisonListes(typesDeQuestionsDisponibles,this.nbQuestions) // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    const listeTypeDeQuestions = combinaisonListesSansChangerOrdre(typesDeQuestionsDisponibles, this.nbQuestions) // Tous les types de questions sont posées --> à remettre comme ci dessus\n\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      // les chiffres\n      const c1 = randint(1, 9)\n      const c2 = randint(1, 9, [c1])\n      const c3 = randint(1, 9, [c1, c2])\n      const c4 = randint(1, 9, [c1, c2, c3])\n      const c5 = randint(1, 9, [c1, c2, c3, c4])\n\n      // pour les situations, autant de situations que de cas dans le switch !\n      const situations = [\n        { // case 0 -->\n          ordre: 'croissant',\n          symbole: `$${miseEnEvidence('<')}$`,\n          n1: Number(c1.toString() + c2.toString() + c3.toString() + c4.toString() + c5.toString()),\n          n2: Number(c1.toString() + c3.toString() + c2.toString() + c4.toString() + c5.toString()),\n          n3: Number(c1.toString() + c2.toString() + c5.toString() + c4.toString() + c3.toString()),\n          n4: Number(c1.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),\n          n5: Number('1'.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),\n          n6: Number(c1.toString() + c2.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString())\n        },\n        { // case 1 -->\n          ordre: 'décroissant',\n          symbole: `$${miseEnEvidence('>')}$`,\n          n1: Number(c1.toString() + c2.toString() + c3.toString() + c4.toString() + c5.toString()),\n          n2: Number(c1.toString() + c3.toString() + c2.toString() + c4.toString() + c5.toString()),\n          n3: Number(c1.toString() + c2.toString() + c5.toString() + c4.toString() + c3.toString()),\n          n4: Number(c1.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),\n          n5: Number('1'.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString()),\n          n6: Number(c1.toString() + c2.toString() + randint(0, 9).toString() + randint(0, 9).toString() + randint(0, 9).toString())\n        }\n      ]\n\n      // une fonction pour gérer l'ordre\n      function myOrdre (ordre, tab) {\n        tab.sort((a, b) => a - b)\n        switch (ordre) {\n          case 'croissant':\n            return tab\n          case 'décroissant':\n            return tab.reverse()\n        };\n      };\n\n      const enonces = []\n      let nombres = []\n      let nombresRanges = []\n      for (let k = 0; k < situations.length; k++) {\n        nombres = shuffle([situations[k].n1, situations[k].n2, situations[k].n3, situations[k].n4, situations[k].n5, situations[k].n6])\n        nombresRanges = []\n        nombres.forEach(element => {\n          nombresRanges.push(element)\n        })\n        myOrdre(situations[k].ordre, nombresRanges)\n        enonces.push({\n          enonce: `Classer les nombres suivants dans l'ordre ${situations[k].ordre} :<br>\n        $${texNombre(nombres[0])}$   ;   $${texNombre(nombres[1])}$   ;   $${texNombre(nombres[2])}$   ;   $${texNombre(nombres[3])}$   ;   $${texNombre(nombres[4])}$   ;   $${texNombre(nombres[5])}$          \n        `,\n          question: '',\n          correction: `Les nombres rangés dans l'ordre ${texteEnCouleurEtGras(situations[k].ordre)} :<br>\n        $${texNombre(nombresRanges[0])}$   ${situations[k].symbole}   $${texNombre(nombresRanges[1])}$   ${situations[k].symbole}   $${texNombre(nombresRanges[2])}$   ${situations[k].symbole}   $${texNombre(nombresRanges[3])}$   ${situations[k].symbole}   $${texNombre(nombresRanges[4])}$   ${situations[k].symbole}   $${texNombre(nombresRanges[5])}$\n        `\n        })\n      };\n\n      // autant de case que d'elements dans le tableau des situations\n      switch (listeTypeDeQuestions[i]) {\n        case 0:\n          texte = `${enonces[0].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[0].correction}`\n            texte += '             '\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[0].correction}`\n          };\n          break\n        case 1:\n          texte = `${enonces[1].enonce}`\n          if (this.beta) {\n            texte += '<br>'\n            texte += `<br> =====CORRECTION======<br>${enonces[1].correction}`\n            texteCorr = ''\n          } else {\n            texteCorr = `${enonces[1].correction}`\n          };\n          break\n      };\n\n      if (this.listeQuestions.indexOf(texte) === -1) { // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n  // this.besoinFormulaireNumerique = ['Niveau de difficulté',2,\"1 : Entiers naturels\\n2 : Entiers relatifs\"];\n  // this.besoinFormulaire2CaseACocher = [\"Avec des équations du second degré\"];\n};\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","RangerOrdreCroissantDecroissant","typesDeQuestionsDisponibles","Exercice","this","beta","sup","nbQuestions","nbCols","nbColsCorr","context","spacing","spacingCorr","nouvelleVersion","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListesSansChangerOrdre","texte","texteCorr","i","cpt","c1","randint","c2","c3","c4","c5","situations","ordre","symbole","miseEnEvidence","n1","Number","toString","n2","n3","n4","n5","n6","myOrdre","tab","sort","a","b","reverse","enonces","nombres","nombresRanges","k","length","shuffle","forEach","element","push","enonce","texNombre","question","correction","texteEnCouleurEtGras","indexOf","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined"],"sourceRoot":""}