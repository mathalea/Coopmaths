{"version":3,"file":"js/10496.b80ea4350c671999a44c.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/6e/_Utiliser_le_codage_pour_decrire.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, shuffle, combinaisonListes, creerNomDePolygone } from '../../modules/outils.js'\nimport { point, pointSurSegment, pointIntersectionDD, pointAdistance, labelPoint, droite, mediatrice, segment, polygone, translation2Points, rotation, affiniteOrtho, similitude, codageAngleDroit, codeSegments, codeAngle, longueur, angleOriente, mathalea2d } from '../../modules/2d.js'\n\nexport default function UtiliserLeCodagePourDecrire () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = 'Utiliser le codage pour décrire une figure'\n  this.nbQuestions = 1\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = 1\n  this.nouvelleVersion = function () {\n    let typesDeQuestionsDisponibles\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    let nom; let sommets = []; let paramsEnonce; let paramsCorrection; let objetsEnonce; let objetsCorrection\n    let A, B, C, D, E, F, s1, s2, s3, s4, s5, s6, s7, s8, medAC, medBC, dBD, dBC, dAC, dAF\n    if (this.classe === 6) { typesDeQuestionsDisponibles = [1, 2, 3] } else { typesDeQuestionsDisponibles = [1, 2, 3, 4] }\n    const listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    for (let i = 0, texte, texteCorr, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = []\n      objetsCorrection = []\n      paramsEnonce = {}\n      paramsCorrection = {}\n      nom = creerNomDePolygone(6, 'PQ')\n      for (let i = 0; i < 6; i++) { sommets.push(nom[i]) }\n      sommets = shuffle(sommets)\n\n      A = point(0, 0, sommets[0], 'left')\n      switch (listeTypeDeQuestions[i]) {\n        case 1:\n          C = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[2], 'right')\n          s2 = segment(A, C)\n          B = similitude(C, A, -85, randint(5, 7) / 10, sommets[1], 'below')\n          s1 = segment(A, B)\n          E = pointSurSegment(A, C, longueur(A, C) / 2.2, sommets[4], 'below')\n          medBC = mediatrice(C, B)\n          medAC = mediatrice(A, C)\n          dBC = droite(C, B)\n          dBD = rotation(dBC, B, randint(-40, -20))\n          dAC = droite(A, C)\n          dAF = rotation(dAC, A, randint(30, 40))\n          D = pointIntersectionDD(dBD, medBC, sommets[3], 'below')\n          D.x += randint(-2, 2, 0) / 5\n          F = pointIntersectionDD(dAF, medAC, sommets[5], 'above')\n          F.x += randint(-2, 2, 0) / 5\n          s5 = segment(B, D)\n          s6 = segment(C, D)\n          s3 = segment(A, F)\n          s7 = segment(C, F)\n          s8 = segment(E, F)\n          s4 = segment(B, C)\n          paramsEnonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1.5), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }\n          objetsEnonce.push(s1, s2, s4, s8, s7, s3, s6, s5, codageAngleDroit(B, A, C), codeSegments('//', 'black', A, F, F, C), codeSegments('|||', 'black', A, E, E, C), codeSegments('O', 'black', B, D, D, C), labelPoint(A, B, C, D, E, F), codageAngleDroit(A, E, F))\n          texte = '<br>À l\\'aide du schéma ci-dessous, déterminer :<br>'\n          texte += '- deux segments de même longueur ;<br>'\n          texte += '- le milieu d\\'un segment ;<br>'\n          texte += '- un triangle rectangle ;<br>'\n          texte += '- un triangle isocèle ;<br>'\n          texteCorr = `- Deux segments de même mesure : [$${sommets[0] + sommets[4]}$] et $[${sommets[4] + sommets[2]}]$ ou $[${sommets[0] + sommets[5]}]$ et $[${sommets[5] + sommets[2]}]$`\n          texteCorr += ` ou $[${sommets[1] + sommets[3]}]$ et $[${sommets[3] + sommets[2]}]$.<br>`\n          texteCorr += `- $${sommets[4]}$ est le milieu du segment $[${sommets[0] + sommets[2]}]$.<br>`\n          texteCorr += `- $${sommets[0] + sommets[1] + sommets[2]}$ est un triangle rectangle en $${sommets[0]}$, $${sommets[0] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$ et $${sommets[2] + sommets[4] + sommets[5]}$ est un triangle rectangle en $${sommets[4]}$.<br>`\n          texteCorr += `- $${sommets[0] + sommets[5] + sommets[2]}$ est un triangle isocèle en $${sommets[5]}$ et $${sommets[1] + sommets[3] + sommets[2]}$ est un triangle isocèle en $${sommets[3]}$.<br>`\n          break\n        case 2:\n          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above')\n          C = similitude(A, B, randint(85, 90), 0.95, sommets[2], 'below')\n          D = similitude(B, A, randint(-93, -87), 1, sommets[3], 'below')\n          F = similitude(B, C, -55, 0.8, sommets[5], 'right')\n          E = similitude(C, D, 57, randint(85, 115) / 100, sommets[4], 'right')\n          s1 = segment(D, E)\n          s2 = segment(C, E)\n          s4 = segment(C, F)\n          s5 = segment(B, F)\n          s6 = polygone(A, B, C, D)\n          paramsCorrection = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }\n          objetsCorrection.push(labelPoint(A, B, C, D, E, F), s1, s2, s4, s5, s6)\n          objetsCorrection.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A))\n          objetsCorrection.push(codeSegments('||', 'black', D, E, C, E), codeSegments('O', 'black', A, B, B, C, C, D, D, A), codeSegments('|||', 'black', F, C, B, F))\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un carré et $${sommets[3] + sommets[2] + sommets[4]}$ est un triangle équilatéral ($${sommets[4]}$ est à l'intérieur du carré $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`\n          texte += ` $${sommets[1] + sommets[2] + sommets[5]}$ est un triangle isocèle en $${sommets[5]}$ ($${sommets[5]}$ est à l'extérieur du carré $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$).<br>`\n          texte += 'Représenter cette configuration par un schéma à main levée et ajouter les codages nécessaires.'\n          texteCorr = 'Voilà ci-dessous un schéma qui pourrait convenir à la situation.<br>'\n          break\n        case 3:\n          B = pointAdistance(A, randint(5, 7), randint(-45, 45), sommets[1], 'above')\n          C = similitude(A, B, randint(85, 90), 0.5, sommets[2], 'below')\n          D = similitude(B, A, randint(-93, -87), 0.53, sommets[3], 'below')\n          s1 = segment(D, B)\n          s2 = segment(A, C)\n          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above')\n          F = affiniteOrtho(E, droite(B, C), -1.1, sommets[5], 'right')\n          s3 = polygone(A, B, C, D)\n          s4 = segment(B, F)\n          s5 = segment(C, F)\n          paramsCorrection = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 1 }\n          objetsCorrection.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5)\n          objetsCorrection.push(codageAngleDroit(D, A, B), codageAngleDroit(A, B, C), codageAngleDroit(B, C, D), codageAngleDroit(C, D, A))\n          objetsCorrection.push(codeSegments('||', 'black', D, E, E, B, A, E, E, C, F, C, B, F), codeSegments('O', 'black', A, B, D, C), codeSegments('/', 'black', A, D, B, C))\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`\n          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`\n          texte += 'Représenter cette configuration par un schéma à main levée et ajouter les codages nécssaires.'\n          texteCorr = 'Voilà ci-dessous un schéma qui pourrait convenir à la situation.<br>'\n          break\n        case 4:\n          B = pointAdistance(A, randint(6, 7), randint(-30, 30), sommets[1], 'above right')\n          F = similitude(A, B, randint(-70, -50), randint(80, 90) / 100, sommets[5], 'left')\n          D = similitude(B, A, angleOriente(A, B, F) + randint(3, 5), randint(15, 20) / 10, sommets[3], 'below')\n          C = translation2Points(point(B.x + 1, B.y + 1), A, D, sommets[2], 'below right')\n          E = pointIntersectionDD(droite(A, C), droite(D, B), sommets[4], 'above right')\n          s3 = polygone(A, B, C, D)\n          s4 = segment(B, F)\n          s5 = segment(A, F)\n          s1 = segment(B, D)\n          s2 = segment(A, C)\n          paramsEnonce = { xmin: Math.min(A.x - 1, B.x - 1, C.x - 1, D.x - 1, E.x - 1, F.x - 1), ymin: Math.min(A.y - 1, B.y - 1, C.y - 1, D.y - 1, E.y - 1, F.y - 1), xmax: Math.max(A.x + 1, B.x + 1, C.x + 1, D.x + 1, E.x + 1, F.x + 1), ymax: Math.max(A.y + 1, B.y + 1, C.y + 1, D.y + 1, E.y + 1, F.y + 1), pixelsParCm: 30, scale: 1, mainlevee: true, amplitude: 0.8 }\n          objetsEnonce.push(labelPoint(A, B, C, D, E, F), s1, s2, s3, s4, s5)\n          objetsEnonce.push(codeAngle(D, A, B, 2, '|', 'red', 2), codeAngle(B, C, D, 2, '|', 'red', 2), codeAngle(A, B, F, 2, '|', 'red', 2))\n          objetsEnonce.push(codeAngle(A, B, C, 2, '||', 'blue', 2), codeAngle(A, D, C, 2, '||', 'blue', 2))\n          objetsEnonce.push(codeAngle(B, A, F, 2, '///', 'green', 3), codeAngle(B, F, A, 2, '///', 'green', 3))\n\n          objetsEnonce.push(codeSegments('||', 'black', B, E, E, D), codeSegments('O', 'black', A, E, E, C))\n          texte = `$${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ est un rectangle. Ses diagonales se coupent en $${sommets[4]}$.<br>`\n          texte += `$${sommets[4] + sommets[1] + sommets[5] + sommets[2]}$ est un losange.<br>`\n          texte = '<br>À l\\'aide du schéma ci-dessous, déterminer :<br>'\n          texte += `- la nature du triangle $${sommets[0] + sommets[1] + sommets[5]}$ ;<br>`\n          texte += `- la nature du quadrilatère $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ ;<br>`\n          texte += `- la nature de l'angle $\\\\widehat{${sommets[5] + sommets[1] + sommets[2]}}$ ;<br>`\n          texteCorr = `Le triangle $${sommets[0] + sommets[1] + sommets[5]}$ a deux angles de même mesure, c'est donc un triangle isocèle en $${sommets[1]}$.<br>`\n          texteCorr += `Le quadrilatère  $${sommets[0] + sommets[1] + sommets[2] + sommets[3]}$ a des diagonales qui se coupent en leur milieu, c'est donc un parallélogramme.<br>`\n          texteCorr += 'Dans un parallélogramme, les angles consécutifs sont supplémentaires (leur somme vaut 180°).<br>'\n          texteCorr += ` D'après le codage, l'angle $\\\\widehat{${sommets[2] + sommets[1] + sommets[5]}}$ est la somme de deux angles supplémentaires. C'est donc un angle plat.<br>`\n\n          break\n      }\n      if (objetsEnonce.length > 0) { texte += mathalea2d(paramsEnonce, objetsEnonce) }\n      if (objetsCorrection.length > 0) { texteCorr += mathalea2d(paramsCorrection, objetsCorrection) }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n  }\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré.\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  this.listeArguments = []\n\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   *\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["UtiliserLeCodagePourDecrire","Exercice","this","titre","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","typesDeQuestionsDisponibles","nom","listeQuestions","listeCorrections","paramsEnonce","paramsCorrection","objetsEnonce","objetsCorrection","A","B","C","D","E","F","s1","s2","s3","s4","s5","s6","s7","s8","medAC","medBC","dBD","dBC","dAC","dAF","sommets","classe","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","i","cpt","creerNomDePolygone","push","shuffle","point","pointAdistance","randint","segment","similitude","pointSurSegment","longueur","mediatrice","droite","rotation","pointIntersectionDD","x","xmin","Math","min","ymin","y","xmax","max","ymax","pixelsParCm","scale","mainlevee","amplitude","codageAngleDroit","codeSegments","labelPoint","polygone","affiniteOrtho","angleOriente","translation2Points","codeAngle","length","mathalea2d","indexOf","listeQuestionsToContenu","boutonAide","consigne","consigneCorrection","introduction","contenu","contenuCorrection","autoCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","correctionDetailleeDisponible","correctionDetaillee","video","interactif","interactifObligatoire","besoinFormulaireNumerique","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString"],"sourceRoot":""}