{"version":3,"file":"js/31351.cc6c54133284d0eefc4e.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G40.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, calcul, choisitLettresDifferentes, lettreDepuisChiffre, choice } from '../../modules/outils.js'\nimport { cercleCentrePoint, cercle, codeSegments, pointAdistance, pointIntersectionCC, point, labelPoint, similitude, polygoneAvecNom, tracePoint, texteParPoint, droite, segment, traceCompas, dansLaCibleCarree, cibleCarree, rotation, mathalea2d } from '../../modules/2d.js'\nimport Alea2iep from '../../modules/Alea2iep.js'\n\nexport const titre = 'Construire des parallélogrammes avec dispositif d’auto-correction'\n\n/**\n * Terminer la construction d'un parallélogramme\n * Ref 5G40\n * @author Jean-Claude Lhote (exercice) et Rémi Angot (animations)\n * Publié le 30/11/2020\n */\nexport default function ConstructionsParallelogrammes () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 1\n  this.nbQuestionsModifiable = false\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 5\n  this.correctionDetaillee = false\n  this.correctionDetailleeDisponible = true\n  this.typeExercice = 'IEP'\n  this.nouvelleVersion = function () {\n    this.listeQuestions = [] // Liste de questions\n    this.listeCorrections = [] // Liste de questions corrigées\n    this.autoCorrection = []\n    let texte = ''\n    let texteCorr = ''\n    const celluleAlea = function (rang) {\n      const lettre = lettreDepuisChiffre(randint(1, rang))\n      const chiffre = Number(randint(1, rang)).toString()\n      return lettre + chiffre\n    }\n    // On prépare la figure...\n    const noms = choisitLettresDifferentes(5, 'QO', true) // on choisit 5 lettres, les 4 premières sont les sommets, la 5e est le centre\n    let typeDeQuestion\n    if (this.sup < 5) typeDeQuestion = parseInt(this.sup)\n    else typeDeQuestion = randint(1, 4)\n    const nom = `${noms[0] + noms[1] + noms[2] + noms[3]}`\n    const objetsEnonce = []\n    const objetsCorrection = []\n    // Préparation de la figure aléatoire et des objets 2d utiles\n    const O = point(0, 0, noms[4])\n    const A = rotation(pointAdistance(O, calcul(randint(50, 70) / 10)), O, randint(0, 179) * choice([-1, 1]), noms[0])\n    const C = rotation(A, O, 180, noms[2])\n    const B = similitude(A, O, randint(40, 80) * choice([-1, 1]), randint(4, 7, 5) * choice([-1, 1]) / 5, noms[1])\n    const D = rotation(B, O, 180, noms[3])\n    const p = polygoneAvecNom(A, B, C, D)\n    const d1 = segment(O, A)\n    const d2 = segment(O, B)\n    const d3 = segment(O, C)\n    const d4 = segment(O, D)\n    const c1 = segment(A, B)\n    const c4 = segment(D, A)\n    const dd1 = droite(A, B)\n    const dd2 = droite(A, D)\n    const dd3 = droite(C, D)\n    const dd4 = droite(C, B)\n    const cellule = celluleAlea(5)\n    const cellule2 = celluleAlea(5)\n    const cellule3 = celluleAlea(5)\n\n    const result = dansLaCibleCarree(C.x, C.y, 5, 0.5, cellule)\n    const result2 = dansLaCibleCarree(D.x, D.y, 5, 0.5, cellule2)\n    const result3 = dansLaCibleCarree(B.x, B.y, 5, 0.5, cellule3)\n\n    const cible = cibleCarree({ x: result[0], y: result[1], rang: 5, num: 1, taille: 0.5 })\n    cible.color = 'gray'\n    cible.opacite = 0.7\n    const cible2 = cibleCarree({ x: result2[0], y: result2[1], rang: 5, num: 2, taille: 0.5 })\n    cible2.color = 'gray'\n    cible2.opacite = 0.7\n    const cible3 = cibleCarree({ x: result3[0], y: result3[1], rang: 5, num: 3, taille: 0.5 })\n    cible3.color = 'gray'\n    cible3.opacite = 0.7\n    const xMin = Math.min(A.x, B.x, C.x, D.x) - 3\n    const yMin = Math.min(A.y, B.y, C.y, D.y) - 3\n    const xMax = Math.max(A.x, B.x, C.x, D.x) + 3\n    const yMax = Math.max(A.y, B.y, C.y, D.y) + 3\n\n    let P\n    const animIEP = new Alea2iep()\n    animIEP.recadre(xMin, yMax) // Il faut recadrer en première étape pour bien calculer les coordonnées des points\n\n    switch (typeDeQuestion) {\n      case 1: // deux côtés consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texteCorr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correctionDetaillee) {\n          texteCorr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texteCorr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texteCorr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texteCorr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texteCorr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n\n        c1.styleExtremites = '-|'\n        c4.styleExtremites = '|-'\n        P = polygoneAvecNom(D, A, B)\n        objetsEnonce.push(c1, c4, P[1], cible)\n        objetsCorrection.push(p[0], p[1], cible, traceCompas(D, C, 30), traceCompas(B, C, 30), codeSegments('||', 'red', A, B, D, C), codeSegments('///', 'blue', A, D, B, C))\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        break\n      case 2: // trois sommets consécutifs\n        this.consigne = `Construire le parallélogramme $${nom}$.`\n        texteCorr = 'Plusieurs constructions sont possibles :<br>'\n        if (this.correctionDetaillee) {\n          texteCorr += `- En utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n          texteCorr += `- En traçant la parallèle à $(${noms[0] + noms[1]})$ passant par $${noms[3]}$ et la parallèle à $(${noms[3] + noms[0]})$ passant par $${noms[1]}$.<br>`\n          texteCorr += '- En utilisant la propriété des diagonales qui se coupent en leur milieu.<br>'\n          texteCorr += 'Nous avons choisi la première méthode qui nous semble la plus efficace ici.<br>'\n        } else {\n          texteCorr += `En voici une utilisant l'égalité des longueurs : $${noms[0] + noms[1]}=${noms[3] + noms[2]}$ et $${noms[2] + noms[1]}=${noms[3] + noms[0]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible.<br>`\n        P = polygoneAvecNom(D, A, B)\n        animIEP.pointCreer(D, D.nom, 0)\n        animIEP.pointCreer(A, A.nom, 0)\n        animIEP.pointCreer(B, B.nom, 0)\n        animIEP.regleSegment(D, A)\n        animIEP.regleSegment(A, B)\n        animIEP.regleMasquer(0)\n        animIEP.crayonMasquer(0)\n        animIEP.parallelogramme3sommetsConsecutifs(D, A, B, C.nom)\n        objetsEnonce.push(tracePoint(A, B, D), P[1], cible)\n        objetsCorrection.push(p[0], p[1], cible, traceCompas(D, C, 30), traceCompas(B, C, 30), codeSegments('||', 'red', A, B, D, C), codeSegments('///', 'blue', A, D, B, C))\n\n        break\n      case 3: // deux sommmets consécutifs plus le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre $${noms[4]}$.`\n        texteCorr += `O est le centre de symétrie du parallélogramme $${nom}$.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Le point $${noms[3]}$ est le symétrique du point $${noms[1]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texteCorr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        P = polygoneAvecNom(O, A, B)\n        animIEP.parallelogramme2sommetsConsecutifsCentre(A, B, O)\n        objetsEnonce.push(tracePoint(A, B, O), P[1], cible, cible2)\n        objetsCorrection.push(p[0], p[1], labelPoint(O), cible, cible2, d1, d2, d3, d4, codeSegments('||', 'red', A, O, O, C), codeSegments('|||', 'blue', B, O, O, D))\n\n        break\n      case 4: // Un angle formé par deux demi-droites et le centre\n        this.consigne = `Construire le parallélogramme $${nom}$ de centre ${noms[4]}.`\n        texte += `Le point $${noms[3]}$ est sur la demi-droite $[${noms[0]}x)$ et le point $${noms[1]}$ est sur la demi-droite $[${noms[0]}y)$.<br>`\n        if (this.correctionDetaillee) {\n          texteCorr += `Le point $${noms[2]}$ est le symétrique du point $${noms[0]}$ par rapport à $${noms[4]}$.<br>`\n          texteCorr += `La symétrique de la droite $(${noms[0] + noms[1]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[1]})$.<br>`\n          texteCorr += `La symétrique de la droite $(${noms[0] + noms[3]})$ par rapport à $${noms[4]}$ est la droite passant par $${noms[2]}$ parallèle à $(${noms[0] + noms[3]})$.<br>`\n        }\n        texteCorr += `Le point $${noms[2]}$ se trouve dans la case ${cellule} de la cible 1.<br>`\n        texteCorr += `Le point $${noms[3]}$ se trouve dans la case ${cellule2} de la cible 2.<br>`\n        animIEP.regleZoom(200)\n        animIEP.equerreZoom(200)\n        animIEP.parallelogrammeAngleCentre(D, A, B, O)\n        objetsEnonce.push(dd1, dd2, tracePoint(O), labelPoint(O, A), texteParPoint('x', pointIntersectionCC(cercleCentrePoint(A, D), cercle(D, 0.5), 1)), texteParPoint('y', similitude(B, A, 4, 1.3)), cible, cible2, cible3)\n        objetsCorrection.push(dd1, dd2, dd3, dd4, p[0], p[1], tracePoint(O), labelPoint(O), cible, cible2, cible3, d1, d3, codeSegments('||', 'red', A, O, O, C))\n\n        break\n    }\n    texte += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objetsEnonce)\n    texteCorr += mathalea2d({ xmin: xMin, ymin: yMin, xmax: xMax, ymax: yMax, pixelsParCm: 20, scale: 0.5 }, objetsCorrection)\n    texteCorr += animIEP.htmlBouton(this.umeroExercice)\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Type de questions', 5, '1 : Deux côtés consécutifs\\n2 : Trois sommets consécutifs\\n3 : Deux sommets consécutifs et le centre\\n4 : Un angle et le centre\\n5 : Une des configuration au hasard']\n  // this.besoinFormulaire2CaseACocher = [\"Avec des points de part et d'autre\"];\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","ConstructionsParallelogrammes","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","sup","correctionDetaillee","correctionDetailleeDisponible","typeExercice","nouvelleVersion","listeQuestions","listeCorrections","autoCorrection","texte","texteCorr","celluleAlea","rang","lettreDepuisChiffre","randint","Number","toString","noms","choisitLettresDifferentes","typeDeQuestion","parseInt","nom","objetsEnonce","objetsCorrection","O","point","A","rotation","pointAdistance","calcul","choice","C","B","similitude","D","p","polygoneAvecNom","d1","segment","d2","d3","d4","c1","c4","dd1","droite","dd2","dd3","dd4","cellule","cellule2","cellule3","result","dansLaCibleCarree","x","y","result2","result3","cible","cibleCarree","num","taille","color","opacite","cible2","cible3","xMin","Math","min","yMin","xMax","max","yMax","P","animIEP","Alea2iep","recadre","styleExtremites","push","traceCompas","codeSegments","parallelogramme3sommetsConsecutifs","pointCreer","regleSegment","regleMasquer","crayonMasquer","tracePoint","parallelogramme2sommetsConsecutifsCentre","labelPoint","regleZoom","equerreZoom","parallelogrammeAngleCentre","texteParPoint","pointIntersectionCC","cercleCentrePoint","cercle","mathalea2d","xmin","ymin","xmax","ymax","pixelsParCm","scale","htmlBouton","umeroExercice","listeQuestionsToContenu","besoinFormulaireNumerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","spacingCorr","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","i","args","argsConcatenes","arg","undefined","indexOf"],"sourceRoot":""}