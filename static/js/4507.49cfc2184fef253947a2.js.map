{"version":3,"sources":["webpack://mathalea/./src/js/exercices/beta/beta3G41.js"],"names":["titre","VuesEmpilementCubes","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","objets_enonce","objets_correction","params_enonce","params_correction","type_de_questions_disponibles","parseInt","listeTypeDeQuestions","combinaisonListes","empilementCubes","long","larg","hmax","tabHauteurs","Array","i","randint","j","Math","min","max","lstCoordonneesCubes","k","push","longueur","largeur","hauteur","texte","texteCorr","q","cpt","L","alpha","beta","cosa","cosb","sina","sinb","length","cube","cos","PI","sin","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique"],"mappings":"+LAKO,MAAMA,EAAQ,4BAWN,SAASC,IAEtBC,eAAcC,MACdA,KAAKH,MAAQA,EACbG,KAAKC,YAAc,EACnBD,KAAKE,uBAAsB,EAC3BF,KAAKG,OAAS,EACdH,KAAKI,WAAa,EAClBJ,KAAKK,mBAAkB,EACvBL,KAAKM,qBAAoB,EACzBN,KAAKO,IAAM,EACXP,KAAKQ,KAAO,EAEZR,KAAKS,gBAAkB,WACrBT,KAAKU,eAAiB,GACtBV,KAAKW,iBAAmB,GACxB,IAEIC,EAAcC,EAAkBC,EAAcC,EAF9CC,EAA8B,CAACC,SAASjB,KAAKO,MAC7CW,GAAuBC,SAAkBH,EAA+BhB,KAAKC,aAGjF,SAASmB,EAAgBC,EAAMC,EAAMC,GACnC,IAAIC,EAAc,IAAIC,MAAMH,GAC5B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAMI,IACxBF,EAAYE,GAAK,IAAID,MAAMJ,GAG7B,IAAK,IAAIK,EAAI,EAAIA,EAAIJ,EAAMI,IACzBF,EAAYE,GAAG,IAAKC,SAAQ,EAAE,GAGhC,IAAK,IAAID,EAAI,EAAIA,EAAEJ,EAAOI,IACxB,IAAK,IAAIE,EAAI,EAAIA,EAAEP,EAAOO,IACxBJ,EAAYE,GAAGE,GAAKC,KAAKC,IAAIN,EAAYE,GAAGE,EAAE,IAAKD,SAAQ,EAAE,GAAIJ,GAIrE,IAAK,IAAIG,EAAI,EAAIA,EAAEJ,EAAOI,IACxBF,EAAYE,GAAGL,EAAK,GAAKQ,KAAKE,IAAI,EAAGP,EAAYE,GAAGL,EAAK,IAI3D,IAAIW,EAAsB,GAC1B,IAAK,IAAIN,EAAIJ,EAAK,EAAII,GAAG,EAAGA,GAAI,EAC9B,IAAK,IAAIE,EAAIP,EAAK,EAAIO,GAAG,EAAGA,GAAI,EAC9B,IAAK,IAAIK,EAAE,EAAIA,EAAIT,EAAYE,GAAGE,GAAIK,IACtCD,EAAoBE,KAAK,CAACR,EAAEE,EAAEK,IAGpC,OAAOD,EAGP,IAAIG,EAAW,EAAIlB,SAASjB,KAAKQ,MAC7B4B,EAAUD,EACVE,EAAUF,EAEd,IAAK,IAAWG,EAAOC,EAAdC,EAAI,EAAqBC,EAAM,EAAGD,EAAIxC,KAAKC,aAAewC,EAAM,IAAK,CAO5E,IAAIC,EAAGC,EAAOC,EAAMC,EAAMC,EAAMC,EAAMC,EAOtC,OAbApC,EAAgB,GAChBC,EAAoB,GAEpByB,EAAS,GACTC,EAAa,GASLrB,EAAqBsB,IAC3B,KAAK,EAEHG,EAAQ,GACRC,GAAQ,GACRN,GAAU,2FACVI,EAAItB,EAAgBe,EAAUC,EAASC,GACvCzB,EAAgB,GAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC5Bd,EAAcsB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAK,KAEjEC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BtC,EAAgB,CACdwC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACbtB,IAASuB,SAAW/C,EAAeF,GAAiB,IAEpD2B,GAAa,iDACbI,EAAQ,GACRC,EAAO,EACPC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,OAGhEyB,GAAU,yFACVI,EAAItB,EAAgBe,EAAUC,EAASC,GACvCzB,EAAgB,GAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC5Bd,EAAcsB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAK,KAEjED,EAAQ,GACRC,GAAQ,GACRC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BtC,EAAgB,CACdwC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACbtB,IAASuB,SAAW/C,EAAeF,GAAiB,IAEpD2B,GAAa,+CACbI,EAAQ,EACRC,EAAO,EACPC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,OAGhEyB,GAAU,2FACVI,EAAItB,EAAgBe,EAAUC,GAC9BO,EAAQ,GACRC,GAAQ,GACRhC,EAAgB,GAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC5Bd,EAAcsB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAK,KAEjED,EAAQ,GACRC,GAAQ,GACRC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BtC,EAAgB,CACdwC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACbtB,IAASuB,SAAW/C,EAAeF,GAAiB,IAEpD2B,GAAa,iDACbI,EAAQ,EACRC,GAAQ,GACRC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,OAClE,MAEA,KAAK,EACHyB,GAAU,+IACVI,EAAItB,EAAgBe,EAAUC,GAC9BO,EAAQ,GACRC,GAAQ,GACRhC,EAAgB,GAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC5Bd,EAAcsB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAK,KAEjEC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BtC,EAAgB,CACdwC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACbtB,IAASuB,SAAW/C,EAAeF,GAAiB,IACpD+B,EAAQ,GACRC,GAAQ,GACRhC,EAAgB,GAChB,IAAK,IAAIc,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC5Bd,EAAcsB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAK,KAEjEC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BtC,EAAgB,CACdwC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACbtB,IAASuB,SAAW/C,EAAeF,GAAiB,IAGpD2B,GAAa,sCACbI,EAAQ,EACRC,GAAQ,GACRC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,OAEhE0B,GAAa,sCACbI,EAAQ,EACRC,EAAO,EACPC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,OAEhE0B,GAAa,sCACbI,EAAQ,GACRC,EAAO,EACPC,EAAOhB,KAAKsB,IAAIR,EAAMd,KAAKuB,GAAG,KAC9BL,EAAOlB,KAAKwB,IAAIV,EAAMd,KAAKuB,GAAG,KAC9BN,EAAOjB,KAAKsB,IAAIP,EAAKf,KAAKuB,GAAG,KAC7BJ,EAAOnB,KAAKwB,IAAIT,EAAKf,KAAKuB,GAAG,KAC7BrC,EAAoB,CAClBuC,MAAMP,EAAKX,EAAU,GACrBmB,MAAO,GACPC,KAAMX,EAAKV,EAAW,GACtBsB,MAAOV,EAAKC,EAAKb,EAAWU,EAAKG,EAAKZ,EAAUU,EAAKT,EAAU,GAC/DqB,YAAa,GACbC,MAAO,EACPC,WAAW,GACb/C,EAAoB,GACpB,IAAK,IAAIa,EAAI,EAAGA,EAAIgB,EAAEO,OAAQvB,IAC1Bb,EAAkBqB,MAAKgB,QAAKR,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIgB,EAAEhB,GAAG,GAAIiB,EAAOC,EAAM,KAExEL,IAAasB,SAAW9C,EAAmBF,GAAqB,QAGzB,GAAvCb,KAAKU,eAAeoD,QAAQxB,KAE9BtC,KAAKU,eAAewB,KAAKI,GACzBtC,KAAKW,iBAAiBuB,KAAKK,GAC3BC,KAEAC,KAEFsB,SAAwB/D,OAM5BA,KAAKgE,0BAA4B,CAAC,oBAAqB,EAAI,uEAC3DhE,KAAKiE,2BAA6B,CAAC,yBAAyB,EAAG","file":"js/4507.49cfc2184fef253947a2.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,combinaisonListes, randint} from '../../modules/outils.js'\nimport {mathalea2d} from '../../modules/2d.js'\nimport {cube} from '../../modules/3d.js'\n\nexport const titre = 'Représentation de solides'\n\n/**\n* Vue de dessus, face et côté\n* @auteur Erwan DUPLESSY\n* 3G41\n* mars 2021\n* Source : http://cache.media.education.gouv.fr/file/Geometrie_et_espace/47/1/RA16_C4_MATH_geo_espace_flash_567471.pdf\n* Dessiner vue de face, côté, dessus d'un empilement de cubes\n*/\n\nexport default function VuesEmpilementCubes() {\n  \"use strict\"\n  Exercice.call(this)\n  this.titre = titre;\n  this.nbQuestions = 1; // Ici le nombre de questions\n  this.nbQuestionsModifiable=true // Active le formulaire nombre de questions\n  this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1;// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex=false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL=false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.sup = 1; // A décommenter : valeur par défaut d'un premier paramètre\n  this.sup2 = 1; // A décommenter : valeur par défaut d'un deuxième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {  \n    this.listeQuestions = [] // tableau contenant la liste des questions \n    this.listeCorrections = [];\n    let type_de_questions_disponibles=[parseInt(this.sup)] // tableau à compléter par valeurs possibles des types de questions\n    let listeTypeDeQuestions = combinaisonListes(type_de_questions_disponibles, this.nbQuestions)\n    let objets_enonce,objets_correction,params_enonce,params_correction ;\n    \n    function empilementCubes(long, larg, hmax) {\n      let tabHauteurs = new Array(larg);\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i] = new Array(long);\n      }        \n      //premiere ligne\n      for (let i = 0 ; i < larg; i++) {\n        tabHauteurs[i][0] = randint(0,1);   \n      }\n      // deuxième ligne et suivantes\n      for (let i = 0 ; i<larg ; i++) {\n        for (let j = 1 ; j<long ; j++) {\n          tabHauteurs[i][j] = Math.min(tabHauteurs[i][j-1] + randint(0,2), hmax);\n        } \n      }\n      //Vérification Dernière Ligne : ne pas être vide.\n      for (let i = 0 ; i<larg ; i++) {\n        tabHauteurs[i][long-1] = Math.max(1, tabHauteurs[i][long-1]);\n      }\n      // Ajoute les cubes dans un tableau une dimension\n      // il faut trier les cubes : x décroissant puis y décroissant, puis z croissant\n      let lstCoordonneesCubes = [];\n      for (let i = larg-1 ; i>-1; i=i-1) {\n        for (let j = long-1 ; j>-1; j=j-1) {\n          for (let k=0 ; k < tabHauteurs[i][j]; k++)\n          lstCoordonneesCubes.push([i,j,k])\n        }          \n      }\n    return lstCoordonneesCubes;\n    } \n    \n    let longueur = 2 + parseInt(this.sup2); // longueur de l'empilement\n    let largeur = longueur; // largeur de l'empilement\n    let hauteur = longueur; // hauteur de l'empilement\n\n    for (let q = 0, texte, texteCorr, cpt = 0; q < this.nbQuestions && cpt < 50;) {\n      objets_enonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objets_correction = [] // Idem pour la correction\n\n      texte = ``; // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = ``; // Idem pour le texte de la correction.\n\n      let L, alpha, beta, cosa, cosb, sina, sinb;\n\n      // cube(x,y,z,0,-90) : vue de haut\n      // cube(x,y,z,90,0) : vue de gauche\n      // cube(x,y,z,0,0) : vue de droite\n      // cube(x,y,z,45,-35) : vue isométrique              \n\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          // GAUCHE\n          alpha = 15;\n          beta = -30;\n          texte += `Solide 1 : dessiner la vue de gauche (les faces grises) de cet empilement de cubes. <br>`\n          L = empilementCubes(longueur, largeur, hauteur);\n          objets_enonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_enonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(params_enonce, objets_enonce) + \" \"; \n          // correction :\n          texteCorr += \"Solide 1 : vue de gauche (les faces grises) : \";\n          alpha = 90;\n          beta = 0;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\";   \n\n          // FACE\n          texte += `Solide 2 : dessiner la vue de face (les faces vertes) de cet empilement de cubes. <br>`;\n          L = empilementCubes(longueur, largeur, hauteur);\n          objets_enonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          alpha = 15;\n          beta = -30;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_enonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(params_enonce, objets_enonce) + \" \"; \n          // correction :\n          texteCorr += \"Solide 2 : vue de face (les faces vertes) : \"\n          alpha = 0;\n          beta = 0;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\";   \n\n          //HAUT\n          texte += `Solide 3 : dessiner la vue de haut (les faces blanches) de cet empilement de cubes. <br>`\n          L = empilementCubes(longueur, largeur);\n          alpha = 15;\n          beta = -30;\n          objets_enonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          alpha = 15;\n          beta = -30;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_enonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(params_enonce, objets_enonce) + \" \"; \n          // correction :\n          texteCorr += \"Solide 3 : vue de haut (les faces blanches) : \"\n          alpha = 0;\n          beta = -90;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\";   \n        break;\n\n        case 2:\n          texte += `Dessiner les vues de haut (les faces blanches), de face (les faces vertes), et de gauche (les faces grises) de cet empilement de cubes. <br>`;\n          L = empilementCubes(longueur, largeur);\n          alpha = 15;\n          beta = -30;\n          objets_enonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_enonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(params_enonce, objets_enonce) + \" \"; \n          alpha = 30;\n          beta = -25;\n          objets_enonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n            objets_enonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_enonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(params_enonce, objets_enonce) + \" \";\n\n          // correction :\n          texteCorr += \"Vue de haut (les faces blanches) : \"\n          alpha = 0;\n          beta = -90;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\";   \n\n          texteCorr += \"Vue de droite (les faces vertes) : \"\n          alpha = 0;\n          beta = 0;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\"; \n\n          texteCorr += \"Vue de gauche (les faces grises) : \"\n          alpha = 90;\n          beta = 0;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          params_correction = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objets_correction = [];\n          for (let i = 0; i < L.length; i++) {\n              objets_correction.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(params_correction, objets_correction) + \"<br>\";   \n        break\n      }\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        q++;\n        }\n        cpt++;\n      }\n      listeQuestionsToContenu(this); // On envoie l'exercice à la fonction de mise en page\n    };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  \n  this.besoinFormulaireNumerique = ['Type de questions', 2, `1 : un solide et ses trois vues\\n 2 : on demande une vue par solide`]\n  this.besoinFormulaire2Numerique = [\"Taille de l'empilement\",5,`3 \\n4 \\n5 \\n6 \\n7`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n  \n  } // Fin de l'exercice.\n  "],"sourceRoot":""}