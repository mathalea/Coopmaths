{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N10.js","webpack://mathalea/./src/js/exercices/ClasseExercice.js"],"names":["titre","Ecrire_nombres_entiers","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","nouvelleVersion","type_de_questions_disponibles","consigne","listeQuestions","listeCorrections","listeTypeDeQuestions","combinaisonListes","texte","texteCorr","a","b","c","nombre","tranche","i","cpt","splice","j","randint","push","choice","est_diaporama","texNombre","nombreEnLettres","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","qcm","qcmDisponible","modeQcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/9346.72269f90b6a7182c1654.js","sourcesContent":["import Exercice from '../ClasseExercice.js';\nimport {listeQuestionsToContenu,randint,choice,combinaisonListes,texNombre,nombreEnLettres} from '../../modules/outils.js'\nexport const titre = 'Écrire un nombre en chiffres ou en lettres'\n\n/**\n * Lire un nombre / écrire un nombre : passer d'une écriture à une autre et inversement\n * On peut fixer la classe maximale : unités, miliers, millions, milliards\n * @Auteur Jean-Claude Lhote\n * Référence 6N10\n */\n\nexport default function Ecrire_nombres_entiers() {\n  \"use strict\"\n  Exercice.call(this)\n  this.titre = titre;\n  this.nbQuestions = 5;\n  this.nbCols = 1;\n  this.nbColsCorr = 1;\n  this.sup = 1\n  this.sup2 = 3\n  this.nouvelleVersion = function () {\n    if (this.sup == 2)\n      this.consigne = \"Écrire le nombre en chiffres\"\n    else\n      this.consigne = \"Écrire le nombre en lettres\"\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées \n    let type_de_questions_disponibles;\n    if (this.sup2 == 1) type_de_questions_disponibles = [1, 1, 1, 2, 2]\n    else if (this.sup2 == 2) type_de_questions_disponibles = [1, 2, 2, 2, 3]\n    else if (this.sup2 == 3) type_de_questions_disponibles = [2, 2, 3, 3, 4]\n    else type_de_questions_disponibles = [2, 3, 3, 4, 4]\n\n    let listeTypeDeQuestions = combinaisonListes(\n      type_de_questions_disponibles,\n      this.nbQuestions\n    ); // Tous les types de questions sont posées mais l'ordre diffère à chaque \"cycle\"\n    for (\n      let i = 0, texte, texteCorr, a, b, c, nombre, tranche, cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n\n      nombre = 0\n      tranche = []\n      while (nombre == 0) {\n        tranche.splice(0)\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          a = randint(1, 9)\n          b = randint(1, 9)\n          c = randint(1, 9)\n          tranche.push(choice([0, 100, 20, 80, a, a * 100, a * 100 + b * 10 + c, a * 100 + 80 + b, a * 10, a * 100 + b * 10 + 1]))\n        }\n        for (let j = 0; j < listeTypeDeQuestions[i]; j++) {\n          nombre += tranche[j] * 10 ** (j * 3)\n        }\n        if (tranche[listeTypeDeQuestions[i] - 1] == 0) nombre = 0\n      }\n      if (this.sup == 1) {\n        if (!est_diaporama) texte = `$${texNombre(nombre)}$ : \\\\dotfill`\n        else texte = `$${texNombre(nombre)}$`\n        if (!est_diaporama) texteCorr = `$${texNombre(nombre)}$ : ${nombreEnLettres(nombre)}.`\n        else texteCorr = `${nombreEnLettres(nombre)}.`\n      }\n      else {\n        if (!est_diaporama) texte = `${nombreEnLettres(nombre)} : \\\\dotfill`\n        else texte = `${nombreEnLettres(nombre)}`\n        if (!est_diaporama) texteCorr = `${nombreEnLettres(nombre)} : $${texNombre(nombre)}$.`\n        else texteCorr = `$${texNombre(nombre)}$.`\n      }\n      if (this.listeQuestions.indexOf(texte) == -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = ['Type d\\'exercice', 2, '1 : Écrire en lettres un nombre donné en chiffres\\n2 : Écrire en chiffres un nombre donné en lettres'];\n  this.besoinFormulaire2Numerique = ['Niveau', 4, '1 : Élémentaire\\n2 : Facile\\n3 : Moyen\\n4 : Difficile']\n}\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}