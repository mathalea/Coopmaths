{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6M31.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"names":["titre","Exercice_conversions_volumes","niveau","Exercice","this","sup","sup2","consigne","spacing","nbColsCorr","nouvelleVersion","listeQuestions","listeCorrections","prefixe_multi","prefixe_div","unite","liste_unite","a","k","div","resultat","typesDeQuestions","texte","texteCorr","i","cpt","nbQuestions","randint","choice","arrondi","calcul","toString","texNombre","texTexte","unite1","ecart","unite2","multiplications_par_1000","Math","pow","indexOf","context","replace","push","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","nbCols","spacingCorr","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactif","interactifObligatoire","qcm","qcmDisponible","modeQcm","autoCorrection","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages"],"mappings":"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","file":"js/2969.94a528b8f18ae56fe14a.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,randint,choice,arrondi,calcul,texNombre,texTexte} from '../../modules/outils.js'\nexport const titre = 'Conversions de volume'\n\n/**\n * Conversions de volumes.\n *\n * Dans la correction, on ne voit qu'une multiplication ou qu'un division pour obtenir le résultat\n *\n * * 1 : Conversions en mètres-cubes avec des multiplications\n * * 2 : Conversions en mètres-cubes avec des divisions\n * * 3 : Conversions en mètres-cubes avec des multiplications ou divisions\n * * 4 : Conversions avec des multiplications ou divisions\n * * Paramètre supplémentaire : utiliser des nombres décimaux (par défaut tous les nombres sont entiers)\n * @author Rémi Angot\n * Référence 6M31\n */\nexport default function Exercice_conversions_volumes(niveau = 1) {\n  Exercice.call(this); // Héritage de la classe Exercice()\n  this.sup = niveau; // Niveau de difficulté de l'exercice\n  this.sup2 = false; // Avec des nombres décimaux ou pas\n  this.titre = titre;\n  this.consigne = \"Compléter\";\n  this.spacing = 2;\n  this.nbColsCorr = 1;\n\n  this.nouvelleVersion = function () {\n    this.listeQuestions = []; // Liste de questions\n    this.listeCorrections = []; // Liste de questions corrigées\n    let prefixe_multi = [\n      [\"da\", \"10\\\\times10\\\\times10\", 1000],\n      [\"h\", \"100\\\\times100\\\\times100\", 1000000],\n      [\"k\", \"1~000\\\\times1~000\\\\times1~000\", 1000000000],\n    ];\n    let prefixe_div = [\n      [\"d\", \"10\\\\div10\\\\div10\", 1000],\n      [\"c\", \"100\\\\div100\\\\div100\", 1000000],\n      [\"m\", \"1~000\\\\div1~000\\\\div1~000\", 1000000000],\n    ];\n    let unite = \"m\";\n    let liste_unite = [\"mm\", \"cm\", \"dm\", \"m\", \"dam\", \"hm\", \"km\"];\n    for (\n      let i = 0,\n      a,\n      k,\n      div,\n      resultat,\n      typesDeQuestions,\n      texte,\n      texteCorr,\n      cpt = 0;\n      i < this.nbQuestions && cpt < 50;\n\n    ) {\n      // On limite le nombre d'essais pour chercher des valeurs nouvelles\n      if (this.sup < 5) {\n        typesDeQuestions = this.sup;\n      } else {\n        typesDeQuestions = randint(1, 4);\n      }\n      k = randint(0, 2); // Choix du préfixe\n      if (typesDeQuestions == 1) {\n        // niveau 1\n        div = false; // Il n'y aura pas de division\n      } else if (typesDeQuestions == 2) {\n        // niveau 2\n        div = true; // Avec des divisions\n      } else if (typesDeQuestions == 3) {\n        div = choice([true, false]); // Avec des multiplications ou des divisions\n      } else if (typesDeQuestions == 4) {\n        div = choice([true, false]); // Avec des multiplications ou des divisions sans toujours revenir au m^2\n      }\n\n      if (this.sup2) {\n        // Si la case pour les nombres décimaux est cochée\n        a = choice([\n          arrondi(randint(1, 19) + randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 10, 1),\n          arrondi(randint(1, 9) / 100, 2),\n          arrondi(randint(1, 9) + randint(1, 9) / 10 + randint(1, 9) / 100, 2),\n        ]);\n        // XX,X 0,X 0,0X X,XX\n      } else {\n        a = choice([\n          randint(1, 9),\n          randint(1, 9) * 10,\n          randint(1, 9) * 100,\n          randint(1, 9) * 10 + randint(1, 9),\n        ]);\n        // X, X0, X00, XX\n      }\n\n      if (!div && typesDeQuestions < 4) {\n        // Si il faut multiplier pour convertir\n\n        resultat = calcul(a * prefixe_multi[k][2]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_multi[k][0] + unite) +\n          \"^3\" +\n          \" = \\\\dotfill \" +\n          texTexte(unite) +\n          \"^3\" +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_multi[k][0] + unite) +\n          \"^3\" +\n          \" =  \" +\n          texNombre(a) +\n          \"\\\\times\" +\n          prefixe_multi[k][1] +\n          texTexte(unite) +\n          \"^3\" +\n          \" = \" +\n          texNombre(resultat) +\n          texTexte(unite) +\n          \"^3\" +\n          \"$\";\n      } else if (div && typesDeQuestions < 4) {\n        k = randint(0, 1); // Pas de conversions de mm^3 en m^3 avec des nombres décimaux car résultat inférieur à 10e-8\n        resultat = calcul(a / prefixe_multi[k][2]).toString(); // Attention aux notations scientifiques pour 10e-8\n        texte =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_div[k][0] + unite) +\n          \"^3\" +\n          \" = \\\\dotfill \" +\n          texTexte(unite) +\n          \"^3\" +\n          \"$\";\n        texteCorr =\n          \"$ \" +\n          texNombre(a) +\n          texTexte(prefixe_div[k][0] + unite) +\n          \"^3\" +\n          \" =  \" +\n          texNombre(a) +\n          \"\\\\div\" +\n          prefixe_div[k][1] +\n          texTexte(unite) +\n          \"^3\" +\n          \" = \" +\n          texNombre(resultat) +\n          texTexte(unite) +\n          \"^3\" +\n          \"$\";\n      } else if (typesDeQuestions == 4) {\n        let unite1 = randint(0, 3);\n        let ecart = randint(1, 2); // nombre de multiplication par 10 pour passer de l'un à l'autre\n        if (ecart > 4 - unite1) {\n          ecart = 4 - unite1;\n        }\n        let unite2 = unite1 + ecart;\n        let multiplications_par_1000 = \"\";\n\n        if (randint(0, 1) > 0) {\n          switch (ecart) {\n            case 1:\n              multiplications_par_1000 = \"\\\\times 1~000\";\n              break;\n            case 2:\n              multiplications_par_1000 = \"\\\\times 1~000 \\\\times 1~000\";\n              break;\n            case 3:\n              multiplications_par_1000 =\n                \"\\\\times 1~000 \\\\times 1~000 \\\\times 1~000\";\n              break;\n          }\n          resultat = calcul(a * Math.pow(10, 3 * ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite2]) +\n            \"^3\" +\n            \" = \\\\dotfill \" +\n            texTexte(liste_unite[unite1]) +\n            \"^3\" +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite2]) +\n            \"^3\" +\n            \" =  \" +\n            texNombre(a) +\n            multiplications_par_1000 +\n            texTexte(liste_unite[unite1]) +\n            \"^3\" +\n            \" = \" +\n            texNombre(resultat) +\n            texTexte(liste_unite[unite1]) +\n            \"^3\" +\n            \"$\";\n        } else {\n          switch (ecart) {\n            case 1:\n              multiplications_par_1000 = \"\\\\div 1~000\";\n              break;\n            case 2:\n              multiplications_par_1000 = \"\\\\div 1~000 \\\\div 1~000\";\n              break;\n            case 3:\n              multiplications_par_1000 = \"\\\\div 1~000 \\\\div 1~000 \\\\div 1~000\";\n              break;\n          }\n          resultat = calcul(a / Math.pow(10, 3 * ecart));\n          texte =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite1]) +\n            \"^3\" +\n            \" = \\\\dotfill \" +\n            texTexte(liste_unite[unite2]) +\n            \"^3\" +\n            \"$\";\n          texteCorr =\n            \"$ \" +\n            texNombre(a) +\n            texTexte(liste_unite[unite1]) +\n            \"^3\" +\n            \" =  \" +\n            texNombre(a) +\n            multiplications_par_1000 +\n            texTexte(liste_unite[unite2]) +\n            \"^3\" +\n            \" = \" +\n            texNombre(resultat) +\n            texTexte(liste_unite[unite2]) +\n            \"^3\" +\n            \"$\";\n        }\n      }\n      // else if(typesDeQuestions==5) { // Pour typesDeQuestions==5\n      // \tprefixe_multi = [['L',0.001],['dL',0.0001],['cL',0.00001],['mL',0.000001]];\n      // \tk = randint(0,1)\n      // \tresultat = calcul(a*prefixe_multi[k][1]).toString(); // Utilise Algebrite pour avoir le résultat exact même avec des décimaux\n      // \ttexte = '$ '+ texNombre(a) + texTexte(prefixe_multi[k][0]) + ' = \\\\dotfill ' + texTexte(unite)  + '^3' + '$';\n      // \ttexteCorr = '$ '+ texNombre(a) + texTexte(prefixe_multi[k][0]) + ' =  ' + texNombre(a) + '\\\\times' + texNombre(prefixe_multi[k][1]) + texTexte(unite)  + '^3'\n      // \t\t + ' = ' + texNombre(resultat) + texTexte(unite)+ '^2' + '$';\n      // }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en crée une autre\n        if (context.isDiaporama) {\n          texte = texte.replace(\"= \\\\dotfill\", \"\\\\text{ en }\");\n        }\n        if (context.isHtml) {\n          texte = texte.replace(\n            \"\\\\dotfill\",\n            \"................................................\"\n          );\n        }\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        i++;\n      }\n      cpt++;\n    }\n    listeQuestionsToContenu(this);\n  };\n  this.besoinFormulaireNumerique = [\n    \"Niveau de difficulté\",\n    4,\n    \"1 : Conversions en mètres-cubes avec des multiplications\\n\\\n2 : Conversions en mètres-cubes avec des divisions\\n3 : Conversions en mètres-cubes avec des multiplications ou divisions\\n4 : Conversions avec des multiplications ou divisions\",\n  ];\n  this.besoinFormulaire2CaseACocher = [\"Avec des nombres décimaux\"];\n}\n\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,labelBouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,idYoutube,texte,labelBouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,urlPdf,texte=\"Aide\",labelBouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n"],"sourceRoot":""}