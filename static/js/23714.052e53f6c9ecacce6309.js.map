{"version":3,"file":"js/23714.052e53f6c9ecacce6309.js","mappings":"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","sources":["webpack://mathalea/./src/js/exercices/5e/5G12.js","webpack://mathalea/./src/js/exercices/Exercice.js"],"sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeQuestionsToContenu, egal, randint, choice, shuffle, nombreAvecEspace, texcolors } from '../../modules/outils.js'\nimport { tracePoint, labelPoint, codageMilieu, segment, rotation, rotationAnimee, texteParPosition, mathalea2d, pavage } from '../../modules/2d.js'\n\nexport const titre = 'Trouver l’image d’une figure par symétrie centrale dans un pavage'\n\n/**\n * Publié le 14/12/2020\n * Trouver l'image par symétrie centrale d'une figure dans un pavage\n * Version Latex & Html grâce à Mathalea2d\n * @author Jean-Claude Lhote\n * Ref 5G12\n */\nexport default function PavageEtDemiTour2D () {\n  'use strict'\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n  this.consigne = ''\n  this.nbQuestions = 3\n  this.nbQuestionsModifiable = true\n  this.correctionDetailleeDisponible = true\n  this.correctionDetaillee = true\n  this.nbCols = 1\n  this.nbColsCorr = 1\n  this.sup = 1 // 1 pour des pavages modestes, 2 pour des plus grand.\n  this.sup2 = false // On cache les barycentres par défaut.\n  this.sup3 = 7\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 1.5)\n  this.nouvelleVersion = function () {\n    this.sup = Number(this.sup)\n    this.sup3 = Number(this.sup3)\n    const videcouples = function (tableau) {\n      for (let k = 0; k < tableau.length; k++) {\n        for (let j = k + 1; j < tableau.length; j++) {\n          if (tableau[k][1] === tableau[j][0]) {\n            tableau.splice(j, 1)\n          }\n        }\n      }\n      return tableau\n    }\n    const compare2polys = function (poly1, poly2) {\n      if (comparenbsommets(poly1, poly2)) {\n        if (comparesommets(poly1, poly2)) { return true } else { return false }\n      } else { return false }\n    }\n    const comparenbsommets = function (poly1, poly2) {\n      if (poly1.listePoints.length === poly2.listePoints.length) {\n        return true\n      } else return false\n    }\n\n    const compare2sommets = function (sommet1, sommet2) {\n      if (egal(sommet1.x, sommet2.x, 0.1) && egal(sommet1.y, sommet2.y, 0.1)) {\n        return true\n      } else return false\n    }\n    const comparesommets = function (poly1, poly2) {\n      let trouve = false; let trouves = 0\n      if (comparenbsommets(poly1, poly2)) {\n        for (const P of poly1.listePoints) {\n          for (const M of poly2.listePoints) {\n            if (compare2sommets(M, P)) {\n              trouve = true\n            }\n            if (trouve) break\n          }\n          if (trouve) {\n            trouves++\n            trouve = false\n          } else {\n            trouves -= 100\n          }\n          if (trouves < 0) { break }\n        }\n      }\n      if (trouves === poly1.listePoints.length) { return true } else return false\n    }\n\n    const demitour = function (pavage, A, numero) { // retourne le numero du polygone symétrique ou -1 si il n'existe pas\n      const poly = pavage.polygones[numero - 1]\n      let pol\n      const result = -1\n      const sympoly = rotation(poly, A, 180)\n      for (let k = 0; k < pavage.polygones.length; k++) {\n        pol = pavage.polygones[k]\n        if (compare2polys(sympoly, pol)) {\n          return k + 1\n        }\n      }\n      return result\n    }\n\n    const objets = []; const objetsCorrection = []; let P1; let P2; let P3; let G1; let G2; let t\n    const codes = ['/', '//', '///', 'o', 'w', 'X', 'U', '*']\n    let taillePavage = this.sup\n    if (taillePavage < 1 || taillePavage > 2) {\n      taillePavage = 1\n    }\n    if (this.nbQuestions > 5) {\n      taillePavage = 2\n    }\n    this.listeCorrections = []\n    this.listeQuestions = []\n    this.autoCorrection = []\n    let Nx; let Ny; let index1; let A; let B; let d; let image; let couples = []; let tailles = []; let monpavage; let fenetre\n    let texte = ''; let texteCorr = ''; let typeDePavage = this.sup\n    let nombreTentatives; let nombrePavageTestes = 1\n    if (this.sup3 === 8) {\n      typeDePavage = randint(1, 7)\n    } else {\n      typeDePavage = this.sup3\n    }\n    while (couples.length < this.nbQuestions && nombrePavageTestes < 6) {\n      nombreTentatives = 0\n      monpavage = pavage() // On crée l'objet Pavage qui va s'appeler monpavage\n      tailles = [[[3, 2], [3, 2], [2, 2], [2, 2], [2, 2], [2, 2], [3, 2]], [[4, 3], [4, 3], [3, 3], [3, 3], [3, 3], [3, 2], [5, 3]]]\n      Nx = tailles[taillePavage - 1][typeDePavage - 1][0]\n      Ny = tailles[taillePavage - 1][typeDePavage - 1][1]\n      monpavage.construit(typeDePavage, Nx, Ny, 3) // On initialise toutes les propriétés de l'objet.\n      fenetre = monpavage.fenetre\n      context.fenetreMathalea2d = [fenetre.xmin, fenetre.ymin, fenetre.xmax, fenetre.ymax]\n      while (couples.length < this.nbQuestions + 2 && nombreTentatives < 3) { // On cherche d pour avoir suffisamment de couples\n        couples = [] // On vide la liste des couples pour une nouvelle recherche\n\n        index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 1 point dans un des polygones\n        if (choice([true, false])) {\n          A = monpavage.polygones[index1].listePoints[randint(0, monpavage.polygones[index1].listePoints.length - 1)] // On choisit un sommet\n        } else {\n          A = monpavage.barycentres[index1] // Ou on choisit un barycentre\n        }\n        while (A.x - 5 < fenetre.xmin || A.x + 5 > fenetre.xmax || A.y - 5 < fenetre.ymin || A.y + 5 > fenetre.ymax) {\n          index1 = randint(Math.floor(monpavage.nb_polygones / 3), Math.ceil(monpavage.nb_polygones * 2 / 3)) // On choisit 1 point dans un des polygones\n          if (choice([true, false])) {\n            A = monpavage.polygones[index1].listePoints[randint(0, monpavage.polygones[index1].listePoints.length - 1)] // On choisit un sommet\n          } else {\n            A = monpavage.barycentres[index1] // Ou on choisit un barycentre\n          }\n        }\n        A.nom = 'A'\n        A.positionLabel = 'above left'\n        d = tracePoint(A) // la trace du centre de symétrie sera rouge et grosse\n        B = labelPoint(A)\n        d.epaisseur = 3\n        d.taille = 4\n        d.color = 'red'\n        for (let i = 1; i <= monpavage.nb_polygones; i++) { // on crée une liste des couples (antécédents, images)\n          image = demitour(monpavage, A, i)\n          if (image !== -1) { // si l'image du polygone i existe, on ajoute le couple à la liste\n            couples.push([i, image])\n          }\n        }\n        couples = videcouples(couples) // supprime tous les couples en double (x,y)=(y,x)\n        nombreTentatives++\n      }\n      if (couples.length < this.nbQuestions) {\n        if (this.sup3 === 7) {\n          typeDePavage = (typeDePavage + 1) % 5 + 1\n        }\n        nombrePavageTestes++\n      }\n    }\n    if (couples.length < this.nbQuestions) {\n      console.log('trop de questions, augmentez la taille du pavage')\n      return\n    }\n\n    objets.push(d) // le centre est OK on pousse sa trace\n    objets.push(B) // et son label\n    couples = shuffle(couples) // on mélange les couples\n    for (let i = 0; i < monpavage.nb_polygones; i++) {\n      objets.push(texteParPosition(nombreAvecEspace(i + 1), monpavage.barycentres[i].x + 0.5, monpavage.barycentres[i].y, 'milieu', 'gray', 1, 0, true))\n    }\n    if (this.sup2) { // Doit-on montrer les centres des figures ?\n      for (let i = 0; i < monpavage.nb_polygones; i++) {\n        objets.push(monpavage.tracesCentres[i])\n      }\n    }\n    for (let i = 0; i < monpavage.nb_polygones; i++) { // il faut afficher tous les polygones du pavage\n      objets.push(monpavage.polygones[i])\n    }\n    texte = mathalea2d(fenetre, objets) // monpavage.fenetre est calibrée pour faire entrer le pavage dans une feuille A4\n    texte += '<br>'\n    for (let i = 0; i < this.nbQuestions; i++) {\n      texte += `Quelle est l'image de la figure $${couples[i][0]}$ dans la symétrie de centre $A$ ?<br>`\n      texteCorr += `L'image de la figure $${couples[i][0]}$ dans la symétrie de centre $A$ est la figure ${couples[i][1]}<br>`\n      if (this.correctionDetaillee) {\n        t = this.nbQuestions * 3\n        G1 = monpavage.barycentres[couples[i][0] - 1]\n        G2 = monpavage.barycentres[couples[i][1] - 1]\n        P1 = monpavage.polygones[couples[i][0] - 1]\n        P1.color = texcolors(i)\n        P1.couleurDeRemplissage = texcolors(i)\n        P1.opaciteDeRemplissage = 0.5\n        P1.epaisseur = 2\n        P2 = monpavage.polygones[couples[i][1] - 1]\n        P2.color = texcolors(i)\n        P2.couleurDeRemplissage = texcolors(i)\n        P2.opaciteDeRemplissage = 0.5\n        P2.epaisseur = 2\n        P3 = rotationAnimee(P1, A, 180, `begin=\"${i * 3}s;${i * 3 + t}s;${i * 3 + t * 2}s\" end=\"${i * 3 + 2}s;${i * 3 + t + 2}s;${i * 3 + t * 2 + 2}s\" dur=\"2s\" repeatCount=\"indefinite\" repeatDur=\"${9 * this.nbQuestions}s\" id=\"poly-${i}-anim\"`)\n        P3.color = texcolors(i)\n        P3.epaisseur = 2\n        objetsCorrection.push(tracePoint(G1, G2), segment(G1, G2, texcolors(i)), codageMilieu(G1, G2, texcolors(i), codes[i], false), P1, P2, P3)\n      }\n    }\n    if (this.correctionDetaillee) {\n      texteCorr += mathalea2d(fenetre, objets, objetsCorrection)\n    }\n    this.listeQuestions.push(texte)\n    this.listeCorrections.push(texteCorr)\n    listeQuestionsToContenu(this)\n  }\n  this.besoinFormulaireNumerique = ['Taille du pavage (la grande est automatique au-delà de 5 questions)', 2, ' 1 : Taille modeste\\n 2 : Grande taille']\n  this.besoinFormulaire2CaseACocher = ['Montrer les centres']\n  this.besoinFormulaire3Numerique = ['Choix du pavage', 8, '1 : Triangles équilatéraux\\n2 : Carrés\\n3 : Hexagones réguliers\\n4 : Carrés et triangles équilatéraux\\n5 : Octogones et carrés\\n 6 : Losanges (pavage hexagonal d\\'écolier)\\n7 : Hexagones et triangles équilatéraux\\n8 : Un des sept pavages au hasard']\n}\n","/**\n *\n *  Classe parente de tous les exercices.\n *\n * @author Rémi Angot\n */\nexport default function Exercice () {\n  // ///////////////////////////////////////////////\n  // Autour de l'exercice\n  // ///////////////////////////////////////////////\n  this.titre = '' // Chaîne de caractère sans point à la fin. C'est le titre de l'exercice qui sera affiché avec la référence dans le générateur d'exercices.\n  this.boutonAide = false // Bouton en haut à droite des questions permettant d'afficher un pdf, texte, image, vidéo, contenu d'un autre site en \"pop-up\" via les fonctions modalXXXXXXX de outils.js.\n  // Ci-dessous des exemples d'utilisation du this.boutonAide.\n  // Noter que pour récupérer le numeroExercice dont il est question, au lieu d'écrire \"this.nouvelleVersion = function () {\" comme d'habitude, on écrit \"this.nouvelleVersion = function (numeroExercice) {\".\n  // this.boutonAide = modalImage(numeroExercice, urlImage, titre, labelBouton = 'Illustration', icone = 'image')\n  // this.boutonAide = modalPdf(numeroExercice, urlPdf, titre='Aide', labelBouton = 'Aide - PDF', icone = 'file pdf')\n  // this.boutonAide = modalTexteCourt(numeroExercice, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalTexteLong(numeroExercice, titre, texte, labelBouton = 'Aide', icone = 'info circle')\n  // this.boutonAide = modalUrl(numeroExercice, url, labelBouton = 'Aide', icone) pour afficher le contenu de url dans un iframe\n  // this.boutonAide = modalVideo(numeroExercice, urlVideo, titre, labelBouton, icone)\n  // this.boutonAide = modalYoutube(numeroExercice, idYoutube, titre, labelBouton = 'Aide - Vidéo', icone = 'youtube')\n\n  // ///////////////////////////////////////////////\n  // Construction de l'exercice\n  // ///////////////////////////////////////////////\n  this.consigne = '' // Chaîne de caractère qui apparaît en gras au-dessus des questions de préférence à l'infinitif et sans point à la fin.\n  this.consigneCorrection = '' // Chaîne de caractère en général vide qui apparaît au-dessus des corrections.\n  this.introduction = '' // Texte qui n'est pas forcément en gras et qui apparaît entre la consigne et les questions.\n  this.listeQuestions = [] // Liste de chaînes de caractères avec chacune correspondant à une question. Chaque question est définie par la méthode this.nouvelleVersion puis `listeDeQuestionToContenu(this)` mettra en forme `this.contenu` et `this.contenuCorrection` suivant `context` (sortie HTML ? diaporama ?...)\n  this.listeCorrections = [] // Idem avec la correction.\n  this.contenu = '' // Chaîne de caractères avec tout l'énoncé de l'exercice construit à partir de `this.listeQuestions` suivant le `context`\n  this.contenuCorrection = '' // Idem avec la correction\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC.\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM.\n\n  // ///////////////////////////////////////////////\n  // Mise en forme de l'exercice\n  // ///////////////////////////////////////////////\n  this.spacing = 1 // Interligne des questions\n  this.spacingCorr = 1 // Interligne des réponses\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie LateX\n  // ////////////////////////////////////////////\n  this.pasDeVersionLatex = false // booléen qui indique qu'une sortie LateX est impossible.\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule.\n  this.consigneModifiable = true // booléen pour déterminer si la consigne est modifiable en ligne dans la sortie LaTeX.\n  this.nbQuestionsModifiable = true // booléen pour déterminer si le nombre de questions est modifiable en ligne.\n  this.nbCols = 1 // Nombre de colonnes pour la sortie LaTeX des questions (environnement multicols).\n  this.nbColsCorr = 1 // Nombre de colonnes pour la sortie LaTeX des réponses (environnement multicols).\n  this.nbColsModifiable = true // booléen pour déterminer si le nombre de colonnes est modifiable en ligne dans la sortie LaTeX.\n  this.nbColsCorrModifiable = true // booléen pour déterminer si le nombre de colonnes de la correction est modifiable en ligne dans la sortie LaTeX.\n  this.spacingModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  this.spacingCorrModifiable = true // booléen pour déterminer si l'espacement est modifiable en ligne dans la sortie LaTeX.\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n\n  // ////////////////////////////////////////////\n  // Gestion de la sortie autre que LateX\n  // ////////////////////////////////////////////\n  this.beamer = false // booléen pour savoir si la sortie devra être un diaporama beamer\n  this.tailleDiaporama = 1 // Facteur par lequel multiplier la police pour la vue 'diap'\n\n  // ////////////////////////////////////////////\n  // Paramètres\n  // ////////////////////////////////////////////\n  this.nbQuestions = 10 // Nombre de questions par défaut (récupéré dans l'url avec le paramètre `,n=`)\n  this.pointsParQuestions = 1 // Pour définir la note par défaut d'un exercice dans sa sortie Moodle\n  this.correctionDetailleeDisponible = false // booléen qui indique si une correction détaillée est disponible.\n  this.correctionDetaillee = true // booléen indiquant si la correction détaillée doit être affiché par défaut (récupéré dans l'url avec le paramètre `,cd=`).\n  this.correctionIsCachee = false // pour cacher une correction\n  this.video = '' // Chaine de caractère pour un complément numérique (id Youtube, url, code iframe...).\n  // Interactivité\n  this.interactif = false // Exercice sans saisie utilisateur par défaut.\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactive.\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup ou dans le paramètre d'url ',s='\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte, tooltip]\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup2 ou dans le paramètre d'url ',s2='\n  this.besoinFormulaire2Numerique = false // Sinon this.besoinFormulaire2Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire2Texte = false // Sinon this.besoinFormulaire2Texte = [texte, tooltip]\n  this.besoinFormulaire2CaseACocher = false // Sinon this.besoinFormulaire2CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup3 ou dans le paramètre d'url ',s3='\n  this.besoinFormulaire3Numerique = false // Sinon this.besoinFormulaire3Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire3Texte = false // Sinon this.besoinFormulaire3Texte = [texte, tooltip]\n  this.besoinFormulaire3CaseACocher = false // Sinon this.besoinFormulaire3CaseACocher = [texte]\n  // Ajoute un formulaire de paramétrage par l'utilisateur récupéré via this.sup4 ou dans le paramètre d'url ',s4='\n  this.besoinFormulaire4Numerique = false // Sinon this.besoinFormulaire4Numerique = [texte, max, tooltip facultatif]\n  this.besoinFormulaire4Texte = false // Sinon this.besoinFormulaire4Texte = [texte, tooltip]\n  this.besoinFormulaire4CaseACocher = false // Sinon this.besoinFormulaire4CaseACocher = [texte]\n\n  // ///////////////////////////////////////////////\n  // Exercice avec des dépendances particulières\n  // ///////////////////////////////////////////////\n  // this.typeExercice = 'MG32' // Pour charger MathGraph32.\n  this.mg32Editable = false // Les figures MG32 ne sont pas interactives par défaut.\n  // this.dimensionsDivMg32 = [500, 450] // Dimensions du SVG créé par MathGraph32.\n\n  // this.typeExercice = 'Scratch' // Pour charger Scratchblocks.\n  // this.typeExercice = 'IEP' // Pour charger InstrumEnPoche.\n  // this.typeExercice = 'dnb' // Ce n’est pas un exercice aléatoire il est traité différemment. Les exercices DNB sont des images pour la sortie Html et du code LaTeX statique pour la sortie latex.\n  // this.typeExercice = 'XCas' // Pour charger le JavaScript de XCas qui provient de https://www-fourier.ujf-grenoble.fr/~parisse/giac_fr.html\n  // this.typeExercice = 'simple' // Pour les exercices plus simples destinés aux courses aux nombres\n\n  this.listeArguments = [] // Variable servant à comparer les exercices pour ne pas avoir deux exercices identiques\n\n  /**\n   * Fonction qui est appellée pour chaque exercice\n   * @param {number} numeroExercice numéro de l'exercice utilisé pour avoir des identifiants uniques pour associer un champ avec le bon exercice (pour l'interactivité par exemple)\n   */\n  this.nouvelleVersion = function (numeroExercice) {}\n\n  /**\n   * Compare chaque nouvelle version d'un exercice aux précédentes pour s'assurer de ne pas avoir deux exercices identiques\n   * @param {int} i indice de la question\n   * @param  {...any} args toutes les variables pertinentes qui \"résumeraient\" la question\n   * @returns {boolean} true si la question n'a jamais été posée\n   */\n  this.questionJamaisPosee = function (i, ...args) {\n    if (i === 0) this.listeArguments = []\n    let argsConcatenes = ''\n    for (const arg of args) {\n      if (arg !== undefined) argsConcatenes += arg.toString()\n    }\n    if (this.listeArguments.indexOf(argsConcatenes) > -1) {\n      return false\n    } else {\n      this.listeArguments.push(argsConcatenes)\n      return true\n    }\n  }\n}\n"],"names":["titre","PavageEtDemiTour2D","Exercice","this","consigne","nbQuestions","nbQuestionsModifiable","correctionDetailleeDisponible","correctionDetaillee","nbCols","nbColsCorr","sup","sup2","sup3","context","spacingCorr","nouvelleVersion","Number","videcouples","tableau","k","length","j","splice","comparenbsommets","poly1","poly2","listePoints","comparesommets","trouve","trouves","P","M","sommet1","sommet2","egal","x","y","demitour","pavage","A","numero","poly","polygones","pol","sympoly","rotation","objets","objetsCorrection","P1","P2","P3","G1","G2","t","codes","Nx","Ny","index1","B","d","image","taillePavage","listeCorrections","listeQuestions","autoCorrection","monpavage","fenetre","nombreTentatives","couples","tailles","texte","texteCorr","typeDePavage","nombrePavageTestes","randint","construit","xmin","ymin","xmax","ymax","Math","floor","nb_polygones","ceil","choice","barycentres","nom","positionLabel","tracePoint","labelPoint","epaisseur","taille","color","i","push","console","log","shuffle","texteParPosition","nombreAvecEspace","tracesCentres","mathalea2d","texcolors","couleurDeRemplissage","opaciteDeRemplissage","rotationAnimee","segment","codageMilieu","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","besoinFormulaire3Numerique","boutonAide","consigneCorrection","introduction","contenu","contenuCorrection","tableauSolutionsDuQcm","spacing","pasDeVersionLatex","listePackages","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","beamer","tailleDiaporama","pointsParQuestions","correctionIsCachee","video","interactif","interactifObligatoire","besoinFormulaireTexte","besoinFormulaireCaseACocher","besoinFormulaire2Numerique","besoinFormulaire2Texte","besoinFormulaire3Texte","besoinFormulaire3CaseACocher","besoinFormulaire4Numerique","besoinFormulaire4Texte","besoinFormulaire4CaseACocher","mg32Editable","listeArguments","numeroExercice","questionJamaisPosee","args","argsConcatenes","arg","undefined","toString","indexOf"],"sourceRoot":""}