{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6C30-4.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/dom.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","PlacerLaVirgule","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","consigne","qcmDisponible","modeQcm","sup","nouvelleVersion","interactif","listeQuestions","listeCorrections","rang","tableauSolutionsDuQcm","texte","texteCorr","coef","nombre","nombreentier","resultat","exposant","i","cpt","randint","calcul","choice","texNombre2","texFraction","texNombrec","autoCorrection","enonce","propositions","statut","options","ordered","lastChoice","propositionsQcm","indexOf","push","listeQuestionsToContenu","besoinFormulaireCaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","spacing","spacingCorr","beamer","besoinFormulaireNumerique","besoinFormulaireTexte","consigneModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","interactifObligatoire","qcm","mg32Editable","numeroExercice","listePackages","exerciceInteractif","exercice","document","addEventListener","button","querySelector","event","spanReponseLigne","champTexte","getElementById","value","replaceAll","reponse","valeur","toString","innerHTML","readOnly","style","fontSize","classList","add","questionNumerique","$","checkbox","monRouge","monVert","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","length","forEach","proposition","indice","label","check","backgroundColor","checked","typeFeedback","messageFeedback","id","message","feedback","type","querySelectorAll","uicheck","exerciceQcm","espace","context","undefined","shuffleJusqua","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposantNbChiffres","exposantSigne","approx","param","hasProp","object","prop","Object","prototype","hasOwnProperty","call","setStyles","elt","styles","split","paire","exec","key","error","console","addText","text","appendChild","window","createTextNode","get","strict","TypeError","Error","addElement","parent","tag","attrs","content","txtContent","createElement","attr","className","class","setAttribute","create","types","addFeedback","container","includes","div","cssIcon","remove","divTitre","test","messageUtilisateur","code","width"],"mappings":"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","file":"js/5203.232139c6cd16267c8e07.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { listeQuestionsToContenu, randint, texNombrec, texNombre2, calcul, choice, texFraction } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\n\nexport const amcReady = true\nexport const amcType =1 // QCM \nexport const interactifReady = true\n\nexport const titre = 'Multiplication par 0,1 ; 0,01 ; 0,001 (Placer la virgule)'\n\n/**\n * @Auteur Jean-claude Lhote\n * Publié le 20/02/2021\n * Référence 6C30-4\n */\nexport default function PlacerLaVirgule () {\n  'use strict'\n  Exercice.call(this)\n  this.titre = titre\n  this.amcReady = amcReady\n  this.amcType = amcType\n  this.interactifReady = interactifReady\n  this.nbQuestions = 4 // Ici le nombre de questions\n  this.nbQuestionsModifiable = true // Active le formulaire nombre de questions\n  this.nbCols = 1 // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex = false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL = false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.consigne = 'Les égalités suivantes sont fausses. Placer la virgule correctement dans le résultat pour que l\\'égalité soit juste.'\n  this.qcmDisponible = true\n  this.modeQcm = false\n  this.sup = false\n\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {\n    // la variable numeroExercice peut être récupérée pour permettre de différentier deux copies d'un même exo\n    // Par exemple, pour être certain de ne pas avoir les mêmes noms de points en appelant 2 fois cet exo dans la même page\n\n    if (this.interactif) {\n      this.consigne = 'Déterminer le résultat de ces multiplications.'\n    }\n\n    this.listeQuestions = [] // tableau contenant la liste des questions\n    this.listeCorrections = []\n    const rang = ['millièmes', 'centièmes', 'dixièmes']\n\n    // Indispensable d'exporter les solutions pour rendre le QCM interactif\n    this.tableauSolutionsDuQcm = []\n    for (let i = 0, texte, texteCorr, coef, nombre, nombreentier, resultat, exposant, cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      texte = '' // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = '' // Idem pour le texte de la correction.\n      coef = -randint(1, 3)\n      if (!this.sup) {\n        exposant = -randint(1, 3)\n      } else {\n        exposant = 0\n      }\n      nombreentier = calcul(randint(10, 1000) + randint(10, 999) * choice([0, 1000]))\n      nombre = calcul(nombreentier * 10 ** exposant)\n      resultat = calcul(nombre * 10 ** coef)\n      texte = `$${texNombre2(nombre)} \\\\times ${texNombre2(calcul(10 ** coef))}$`\n      if (!this.interactif) {\n        texte += `$~~ = ~~\\\\phantom{......}${texNombre2(nombreentier)}$<br>`\n      }\n      texteCorr = `Quand on multiplie par $${texNombre2(calcul(10 ** coef))}=${texFraction(1, calcul(10 ** (-coef)))}$ chaque chiffre prend une valeur $${texNombrec(10 ** (-coef))}$ fois plus petite.<br>`\n      texteCorr += `Le chiffre des unités se positionne donc dans les ${rang[3 + coef]} :<br>`\n      texteCorr += `$${texNombre2(nombre)} \\\\times ${texNombre2(calcul(10 ** coef))} = ${texNombre2(resultat)}$`// ${texNombrec(Math.floor(resultat))}${miseEnEvidence(',')}${texNombrec(resultat-Math.floor(resultat)).replace('0,','')}$`\n\n      this.autoCorrection[i] = {}\n      this.autoCorrection[i].enonce = `${texte}\\n`\n      this.autoCorrection[i].propositions = [\n        {\n          texte: `$${texNombre2(resultat)}$`,\n          statut: true\n        },\n        {\n          texte: `$${texNombre2(calcul(resultat / 10))}$`,\n          statut: false\n        },\n        {\n          texte: `$${texNombre2(calcul(resultat * 10))}$`,\n          statut: false\n        },\n        {\n          texte: `$${texNombre2(calcul(resultat / 100))}$`,\n          statut: false\n        }\n      ]\n      this.autoCorrection[i].options = {\n        ordered: false,\n        lastChoice: 4\n      }\n      if (this.interactif) {\n        texte += '<br>' + propositionsQcm(this, i).texte\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte)\n        this.listeCorrections.push(texteCorr)\n        i++\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this) // On envoie l'exercice à la fonction de mise en page\n  }\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n\n  this.besoinFormulaireCaseACocher = ['Nombres entiers', true]\n  // this.besoin_formulaire2_case_a_cocher = [\"Mode QCM\",false];\n  // this.besoin_formulaire3_case_a_cocher =['figure à main levée',true]\n  \n} // Fin de l'exercice.\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4 || exercice.amcType === 5) questionNumerique(exercice)\n  if (exercice.amcType === 1 || exercice.amcType === 2) exerciceQcm(exercice)\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              message: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {exercice}\n * @param {i} i indice de la question\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          const champTexte = document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`)\n          if (champTexte.value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '').replaceAll('.',',')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          champTexte.readOnly = true\n          spanReponseLigne.style.fontSize = 'large'\n        }\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml && exercice.interactif) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposantNbChiffres = 0, exposantSigne = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n\n\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.param = { digits: digits, decimals: decimals, signe: signe, exposantNbChiffres: exposantNbChiffres, exposantSigne: exposantSigne, approx: approx }\n}\n","/**\n * Fonctions de gestion du dom\n * @module\n */\n/**\n * Retourne true si l'objet à la propriété\n * @param {Object} object\n * @param {string} prop\n * @return {boolean}\n */\nconst hasProp = (object, prop) => typeof object === 'object' && Object.prototype.hasOwnProperty.call(object, prop)\n\n/**\n * Affecte des styles à un élément html (on peut pas affecter elt.style directement car read only, faut faire du elt.style.foo = bar)\n * sans planter en cas de pb (on le signale juste en console)\n * @param {HTMLElement} elt\n * @param {string|object} styles\n */\nfunction setStyles (elt, styles) {\n  try {\n    if (elt && elt.style) {\n      if (typeof styles === 'string') {\n        styles = styles.split(';')\n        styles.forEach(function (paire) {\n          paire = /([\\w]+):(.+)/.exec(paire)\n          if (paire) {\n            const [, key, value] = paire\n            elt.style[key] = value\n          }\n        })\n      } else if (typeof styles === 'object') {\n        for (var prop in styles) {\n          if (hasProp(styles, prop)) {\n            elt.style[prop] = styles[prop]\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * Ajoute du texte dans un élément\n * @param {HTMLElement} elt\n * @param {string} text\n */\nexport function addText (elt, text) {\n  elt.appendChild(window.document.createTextNode(text))\n}\n\n/**\n * Retourne l'élément du dom\n * @param {string} id\n * @param {boolean} [strict=true] Passer false pour retourner null plutôt que throw une erreur si id n'existe pas\n * @return {HTMLElement}\n * @throws {TypeError} Si id n'est pas une string\n * @throws {Error} Si l'élément id n'existe pas\n */\nexport function get (id, strict = true) {\n  if (typeof id !== 'string') throw TypeError('argument invalide')\n  const elt = document.getElementById(id)\n  if (!elt && strict) throw Error(`L’élément html ${id} n’existe pas`)\n  return elt\n}\n\n/**\n * Retourne un élément html de type tag (non inséré dans le dom)\n * @param {string} tag\n * @param {Object} [attrs] Les attributs\n * @param {string} [txtContent] Contenu textuel éventuel\n */\nexport function create (tag, attrs, txtContent) {\n  const elt = window.document.createElement(tag)\n  let attr\n  try {\n    if (attrs) {\n      for (attr in attrs) {\n        if (hasProp(attrs, attr)) {\n          if (attr === 'class') elt.className = attrs.class\n          else if (attr === 'className') elt.className = attrs.className\n          else if (attr === 'style') setStyles(elt, attrs.style)\n          else elt.setAttribute(attr, attrs[attr])\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (txtContent) addText(elt, txtContent)\n\n  return elt\n}\n\n/**\n * Ajoute un élément html de type tag à parent\n * @param {HTMLElement} parent\n * @param {string} tag\n * @param {Object=} attrs Les attributs\n * @param {string=} content\n * @returns {HTMLElement} L'élément ajouté\n */\nexport function addElement (parent, tag, attrs, content) {\n  const elt = create(tag, attrs, content)\n  parent.appendChild(elt)\n  return elt\n}\n","import { addElement, addText, get } from './dom'\n// Module regroupant les fonctions de gestions des erreurs.\n\nconst types = ['info', 'warning', 'error', 'positive']\n\n/**\n * Ajoute le feedback dans container\n * @param {HTMLElement} container\n * @param {Object} feedback\n * @param {string} [feedback.message]\n * @param {string} [feedback.type]\n * @param {string} [feedback.titre]\n */\nexport function addFeedback (container, { message = 'Une erreur est survenue', type = 'erreur', titre } = {}) {\n  if (!types.includes(type)) {\n    console.error(Error(`type de message inconnu : ${type}`))\n    type = 'error'\n  }\n  const cssDiv = type === 'info' ? '' : type\n  const div = addElement(container, 'div', { className: `ui message ${cssDiv}` })\n  const cssIcon = type === 'error'\n    ? 'frown outline'\n    : (type === 'warning')\n        ? 'bullhorn'\n        : 'bell outline' // info\n  const iconClose = addElement(div, 'i', { className: 'close icon' })\n  iconClose.addEventListener('click', () => div.remove())\n  if (titre) {\n    const divTitre = addElement(div, 'div', { className: 'header' })\n    addElement(divTitre, 'i', { className: `${cssIcon} icon` })\n    addText(divTitre, titre)\n  }\n  if (/<[a-zA-Z0-9_ \"']+/.test(message)) div.innerHTML += message\n  else addText(div, message)\n  return div\n}\n\n/**\n* Affiche un message à l'utilisateur\n* @author Cédric GROLLEAU\n* @param {Object} datas\n* @param {string} datas.code codeExerciceInconnu|mg32load|scratchLoad\n* @param {string} [datas.exercice] à fournir si code vaut 'codeExerciceInconnu'\n*/\nexport function messageUtilisateur ({ code, exercice }) {\n  const container = get('containerErreur')\n  switch (code) {\n    case 'codeExerciceInconnu':\n      addFeedback(container, {\n        titre: 'le code de l’exercice n’est pas valide',\n        message: `L'identifiant ${exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n        type: 'error'\n      })\n      break\n    case 'mg32load':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module mg32',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    case 'scratchLoad':\n      addFeedback(container, {\n        titre: 'Erreur de chargement du module scratch',\n        message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n      break\n    default:\n      console.error(Error(`code ${code} non géré par messageUtilisateur`))\n      addFeedback(container, {\n        titre: 'Erreur interne',\n        message: `Une erreur est survenue.<br>\n          Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n        type: 'warning'\n      })\n  }\n}\n\n/**\n * Ajoute un feedback (erreur ou encouragement)\n * @param {Object} feedback\n * @param {string} feedback.id id du div conteneur à utiliser\n * @param {string} feedback.message Le message à afficher\n * @param {string} feedback.type error|positive\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, message = '', type = 'error' } = {}) {\n  if (!id || !message) return console.error(TypeError('arguments manquants'))\n  const container = get(id)\n  const div = addFeedback(container, { message, type })\n  div.style.width = '400px'\n}\n"],"sourceRoot":""}