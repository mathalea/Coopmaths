{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6N31-3.js","webpack://mathalea/./src/js/exercices/Exercice.js","webpack://mathalea/./src/js/modules/gestionInteractif.js","webpack://mathalea/./src/js/modules/messages.js"],"names":["amcReady","amcType","interactifReady","titre","ArrondirUneValeur","Exercice","this","nbQuestions","nbCols","nbColsCorr","sup","sup2","interactif","qcmDisponible","modeQcm","context","spacingCorr","nouvelleVersion","parseInt","autoCorrection","consigne","tabrep","tabicone","preTabRep","m","c","d","u","di","ci","mi","me","ce","de","n","den","num","nb","rac","preTabIcone","espace","listeQuestions","listeCorrections","i","texte","texteCorr","cpt","length","randint","calcul","texNombre","choice","texFraction","troncature","listeNombresPremiersStrictJusqua","Math","sqrt","miseEnEvidence","shuffle2tableaux","push","enonce","options","vertical","ordered","propositions","statut","feedback","indexOf","propositionsQcm","listeQuestionsToContenu","amc","id","besoinFormulaireNumerique","besoinFormulaire2CaseACocher","consigneCorrection","introduction","contenu","contenuCorrection","spacing","beamer","besoinFormulaireTexte","besoinFormulaireCaseACocher","consigneModifiable","nbQuestionsModifiable","nbColsModifiable","nbColsCorrModifiable","spacingModifiable","spacingCorrModifiable","correctionDetailleeDisponible","correctionDetaillee","video","boutonAide","tailleDiaporama","pasDeVersionLatex","interactifObligatoire","qcm","tableauSolutionsDuQcm","mg32Editable","numeroExercice","listePackages","exerciceQcm","exercice","document","addEventListener","$","checkbox","button","querySelector","event","indiceFeedback","nbBonnesReponses","nbMauvaisesReponses","nbBonnesReponsesAttendues","k","spanReponseLigne","forEach","proposition","indice","label","check","style","backgroundColor","checked","typeFeedback","innerHTML","fontSize","messageFeedback","type","querySelectorAll","uicheck","classList","add","undefined","shuffleJusqua","lastChoice","doublonsTrouves","j","splice","elimineDoublons","rep","ajouteChampTexte","texteApres","inline","numeric","setReponse","a","digits","decimals","signe","exposant_nb_chiffres","exposant_signe","approx","reponse","valeur","exerciceInteractif","getElementById","value","replaceAll","toString","questionNumerique","divMessage","erreur","niveau","message","messageUtilisateur","divErreur","code","remove","html"],"mappings":"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","file":"js/7503.f1384414c5787d031475.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport { listeNombresPremiersStrictJusqua, shuffle2tableaux, choice, listeQuestionsToContenu, randint, troncature, calcul, texNombre, miseEnEvidence, texFraction } from '../../modules/outils.js'\nimport { propositionsQcm } from '../../modules/gestionInteractif.js'\n\nexport const amcReady = true\nexport const amcType =2 //type de question AMC \nexport const interactifReady = true\nexport const titre = 'Arrondir une valeur'\n\n/**\n * * Encadrer_puis_arrondir_une_valeur\n * * 6N31-3\n * @author Mireille Gain, s'inspirant de 6N31-1 de Sébastien Lozano\n */\n\nexport default function ArrondirUneValeur () {\n  Exercice.call(this) // Héritage de la classe Exercice()\n  this.titre = titre\n\n  this.nbQuestions = 3\n  this.nbCols = 3\n  this.nbColsCorr = 1\n  this.sup = 1\n  this.sup2 = false\n  this.interactifReady = true\n  this.interactif = true\n  this.amcType = amcType\n  this.qcmDisponible = true\n  this.modeQcm = false\n  context.isHtml ? (this.spacingCorr = 2.5) : (this.spacingCorr = 3.5)\n\n  this.nouvelleVersion = function () {\n    this.sup = parseInt(this.sup)\n    this.autoCorrection = []\n    if (!context.isAmc && !this.interactif) {\n      this.consigne = \"Encadrer chaque nombre à l'unité, puis au dixième, puis au centième.<br>Dans chaque cas, mettre ensuite en évidence son arrondi.\"\n    } else {\n      this.consigne = \"Quelles sont les encadrements où la valeur orange est la valeur arrondie du nombre à l'unité, au dixième et au centième\"\n    }\n    const tabrep = []; const tabicone = []; const preTabRep = []; let preTabIcone = []\n    let espace = ''\n    if (context.isHtml) {\n      espace = '<br>'\n    } else {\n      espace = '\\\\\\\\'\n    }\n    this.listeQuestions = []\n    this.listeCorrections = []\n    let m, c, d, u, di, ci, mi, me, ce, de, n, den, num, nb, rac\n\n    for (let i = 0, texte = '', texteCorr = '', cpt = 0; i < this.nbQuestions && cpt < 50;) {\n      this.autoCorrection[i] = {}\n      tabrep.length = 0, tabicone.length = 0, preTabRep.length = 0, preTabIcone.length = 0\n      if (this.sup === 1) {\n        m = randint(0, 9)\n        c = randint(0, 9)\n        d = randint(0, 9)\n        u = randint(0, 9)\n        di = randint(1, 9)\n        ci = randint(1, 9)\n        mi = randint(1, 9, 5)\n        me = randint(0, 1)\n        ce = randint(0, 1)\n        de = randint(0, 1)\n        n = me * m * 1000 + ce * c * 100 + de * d * 10 + u * 1 + calcul(di * 0.1 + ci * 0.01 + mi * 0.001)\n        nb = texNombre(n)\n      } else if (this.sup == 2) {\n        den = choice([7, 9, 11, 13])\n        num = randint(1, 50, [7, 9, 11, 13, 14, 18, 21, 22, 26, 27, 28, 33, 35, 36, 39, 42, 44, 45, 49])\n        n = num / den\n        nb = texFraction(num, den)\n        di = 10 * (troncature(n - troncature(n, 0), 1))\n        ci = 100 * (troncature(n - troncature(n, 1), 2))\n        mi = 1000 * (troncature(n - troncature(n, 2), 3))\n      } else if (this.sup === 3) {\n        rac = randint(2, 300, [listeNombresPremiersStrictJusqua(300)])\n        n = Math.sqrt(rac)\n        nb = `\\\\sqrt{${rac}}`\n        di = 10 * (troncature(n - troncature(n, 0), 1))\n        ci = 100 * (troncature(n - troncature(n, 1), 2))\n        mi = 1000 * (troncature(n - troncature(n, 2), 3))\n      }\n\n      texte = `$${nb}$`\n\n      if (this.sup == 1) texte += ''\n      else if (this.sup == 2) texte += `$\\\\phantom{1234567}Quand~on~écrit~sur~la~calculatrice~ ${num}\\\\div ${den}, ~elle~renvoie : ${texNombre(n)}$`\n      else if (this.sup == 3) texte += `$\\\\phantom{1234567}Quand~on~écrit~sur~la~calculatrice~ ${nb}, ~elle~renvoie : ${texNombre(n)}$`\n\n      texteCorr = \"Encadrement et arrondi à l'unité : \"\n      if (di < 5) {\n        texteCorr += `$\\\\phantom{1234567}${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$\\\\phantom{1234567}${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 0))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 1, 0)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 0)))} < ${nb} < ${texNombre(troncature(n + 1, 0))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n\n      texteCorr += '<br>Encadrement et arrondi au dixième : '\n      if (ci < 5) {\n        texteCorr += `$\\\\phantom{123}${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$\\\\phantom{123}${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 1))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.1, 1)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 1)))} < ${nb} < ${texNombre(troncature(n + 0.1, 1))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n\n      texteCorr += '<br>Encadrement et arrondi au centième : $~$'\n      if (mi < 5) {\n        texteCorr += `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabRep[0] = `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabRep[1] = `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      } else {\n        texteCorr += `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabRep[0] = `$${texNombre(troncature(n, 2))} < ${nb} < ${miseEnEvidence(texNombre(troncature(n + 0.01, 2)))}$`\n        preTabRep[1] = `$${miseEnEvidence(texNombre(troncature(n, 2)))} < ${nb} < ${texNombre(troncature(n + 0.01, 2))}$`\n        preTabIcone = [true, false]\n        if (choice([false, true])) {\n          shuffle2tableaux(preTabRep, preTabIcone)\n        }\n        tabrep.push(preTabRep[0], preTabRep[1])\n        tabicone.push(preTabIcone[0], preTabIcone[1])\n      }\n      this.autoCorrection[i].enonce = `Quels sont les encadrements où la valeur orange est l'arrondi de ${texte} ?\\\\\\\\ \\n Réponses possibles`\n      this.autoCorrection[i].options = { vertical: true, ordered: true }\n      this.autoCorrection[i].propositions = [\n        {\n          texte: tabrep[0],\n          statut: tabicone[0],\n          feedback: ''\n        },\n        {\n          texte: tabrep[1],\n          statut: tabicone[1],\n          feedback: ''\n        },\n        {\n          texte: tabrep[2],\n          statut: tabicone[2],\n          feedback: ''\n        },\n        {\n          texte: tabrep[3],\n          statut: tabicone[3],\n          feedback: ''\n        },\n        {\n          texte: tabrep[4],\n          statut: tabicone[4],\n          feedback: ''\n        },\n        {\n          texte: tabrep[5],\n          statut: tabicone[5],\n          feedback: ''\n        }\n      ]\n      if (this.modeQcm && !context.isAmc) {\n        texte += '<br><br>Réponses possibles : <br>  '\n        texteCorr = ''\n        // shuffle2tableaux(tabrep, tabicone);\n        for (let i = 0; i < 6; i++) {\n          texte += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          if (tabicone[i] == 1) {\n            texteCorr += `$\\\\blacksquare\\\\;$ ${tabrep[i]}` + espace\n          } else {\n            texteCorr += `$\\\\square\\\\;$ ${tabrep[i]}` + espace\n          }\n        }\n      }\n\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on en créé une autre\n        if (this.interactif) {\n          texte += propositionsQcm(this, i).texte\n        }\n        this.listeQuestions.push(texte) // Sinon on enregistre la question dans listeQuestions\n        this.listeCorrections.push(texteCorr) // On fait pareil pour la correction\n        tabrep.length = 0\n        tabicone.length = 0\n        i++ // On passe à la question suivante\n      }\n      cpt++\n    }\n    listeQuestionsToContenu(this)\n    if (context.isAmc) {\n      this.amc = [this.id, this.autoCorrection, titre, amcType]\n    }\n  }\n  this.besoinFormulaireNumerique = ['Type de nombre', 2, '1 : Nombre décimal\\n 2 : Fraction']\n  this.besoinFormulaire2CaseACocher = ['Affichage de la valeur donnée à la calculatrice', false]\n}\n","/**\n *\n *  Classe parente de tous les exercices\n *\n * @Auteur Rémi Angot\n */\nexport default function Exercice () {\n  // Classe parente de tous les exercices qui seront créés\n  this.titre = ''\n  this.consigne = ''\n  this.consigneCorrection = ''\n  this.listeQuestions = []\n  this.listeCorrections = []\n  this.introduction = ''\n  this.contenu = ''\n  this.contenuCorrection = ''\n  this.nbQuestions = 10\n  this.nbCols = 2\n  this.nbColsCorr = 2\n  this.spacing = 1\n  this.spacingCorr = 1\n  this.beamer = false\n\n  this.besoinFormulaireNumerique = false // Sinon this.besoinFormulaireNumerique = [texte,max,tooltip facultatif];\n  this.besoinFormulaireTexte = false // Sinon this.besoinFormulaireTexte = [texte,tooltip];\n  this.besoinFormulaireCaseACocher = false // Sinon this.besoinFormulaireCaseACocher = [texte];\n  this.consigneModifiable = true\n  this.nbQuestionsModifiable = true\n  this.nbColsModifiable = true\n  this.nbColsCorrModifiable = true\n  this.spacingModifiable = true\n  this.spacingCorrModifiable = true\n  this.correctionDetailleeDisponible = false\n  this.correctionDetaillee = true\n  this.video = ''\n  this.boutonAide = false\n  this.tailleDiaporama = 50 // Taille en pixels pour le calcul chronométré\n  // this.boutonAide = modalTexteCourt(numeroExercice,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalTexteLong(numeroExercice,titre,texte,label_bouton=\"Aide\",icone=\"info circle\")\n  // this.boutonAide = modalYoutube(numeroExercice,id_youtube,texte,label_bouton=\"Aide - Vidéo\",icone=\"youtube\")\n  // this.boutonAide = modalPdf(numeroExercice,url_pdf,texte=\"Aide\",label_bouton=\"Aide - PDF\",icone=\"file pdf\")\n  // this.vspace = -1 //Ajoute un \\vspace{-1cm} avant l'énoncé ce qui peut être pratique pour des exercices avec des figures.\n  this.pasDeVersionLatex = false\n  this.interactif = false // Exercice sans saisie utilisateur par défaut\n  this.interactifObligatoire = false // Certains exercices sont uniquement des QCM et n'ont pas de version non interactiveout\n  this.qcm = false // Pour les exercices de type QCM : contient un tableau.\n  this.qcmDisponible = false // Pour ajouter une case à cocher Mode QCM qui permet de changer le statut de this.modeQcm\n  this.modeQcm = false // Pour choisir la version QCM ou la version classique (false = version classique)\n  this.autoCorrection = [] // Liste des objets par question pour correction interactive || export AMC\n  this.tableauSolutionsDuQcm = [] // Pour sauvegarder les solutions des QCM\n  this.mg32Editable = false // pas d'interface par défaut pour les figures MG32\n  this.nouvelleVersion = function (numeroExercice) {}\n  this.listePackages = [] // string ou liste de string avec le nom des packages spécifiques à ajouter dans le préambule\n  // this.typeExercice = \"MG32\";\n  // this.dimensionsDivMg32 = [500, 450];\n  // this.typeExercice = \"Scratch\"\n  // this.qcm=[\"Quels sont les nombres pairs ?\",[7,12,34,25,18],[0,1,1,0,1]] =>[\"La question\",[les réponses],[bonne=1 et mauvaise=0]]\n}\n","/* global $ */\nimport { context } from './context.js'\nimport { shuffleJusqua } from './outils.js'\nimport { messageFeedback } from './messages.js'\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function exerciceQcm (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    // On active les checkbox\n    $('.ui.checkbox').checkbox()\n    // Couleur pour surligner les label avec une opacité de 50%\n    const monRouge = 'rgba(217, 30, 24, 0.5)'\n    const monVert = 'rgba(123, 239, 178, 0.5)'\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        for (let i = 0; i < exercice.nbQuestions; i++) {\n          // i est l'indice de la question\n          let nbBonnesReponses = 0\n          let nbMauvaisesReponses = 0\n          let nbBonnesReponsesAttendues = 0\n          let indiceFeedback\n          // Compte le nombre de réponses justes attendues\n          for (let k = 0; k < exercice.autoCorrection[i].propositions.length; k++) {\n            if (exercice.autoCorrection[i].propositions[k].statut) nbBonnesReponsesAttendues++\n          }\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          exercice.autoCorrection[i].propositions.forEach((proposition, indice) => {\n            const label = document.querySelector(`#labelEx${exercice.numeroExercice}Q${i}R${indice}`)\n            const check = document.querySelector(`#checkEx${exercice.numeroExercice}Q${i}R${indice}`)\n            if (proposition.statut) {\n              label.style.backgroundColor = monVert\n              if (check.checked) {\n                nbBonnesReponses++\n                indiceFeedback = indice\n              }\n            } else if (check.checked === true) {\n              label.style.backgroundColor = monRouge\n              nbMauvaisesReponses++\n              indiceFeedback = indice\n            }\n          })\n          let typeFeedback = 'positive'\n          if (nbMauvaisesReponses === 0 && nbBonnesReponses === nbBonnesReponsesAttendues) {\n            spanReponseLigne.innerHTML = '😎'\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            typeFeedback = 'error'\n          }\n          spanReponseLigne.style.fontSize = 'large'\n          if (indiceFeedback > -1) {\n            messageFeedback({\n              id: `feedbackEx${exercice.numeroExercice}Q${i}`,\n              texte: exercice.autoCorrection[i].propositions[indiceFeedback].feedback,\n              type: typeFeedback\n            })\n          }\n        }\n        const uichecks = document.querySelectorAll(`.ui.checkbox.ex${exercice.numeroExercice}`)\n        uichecks.forEach(function (uicheck) {\n          uicheck.classList.add('read-only')\n        })\n        button.classList.add('disabled')\n      })\n    }\n  })\n}\n\n/**\n * @param {int} numeroExercice Indice de l'exercice\n * @param {int} i Indice de la question\n * @param {*} tabrep Tableau des propositions\n * @param {*} tabicone Tableau ordonné comme tabrep avec 0 si la proposition est fausse et 1 si la proposition est juste\n * @returns {object} {texte, texteCorr} le texte à ajouter pour la question traitée\n */\nexport function propositionsQcm (exercice, i) {\n  exercice.titre = 'cacaboudin'\n  let texte = ''\n  let texteCorr = ''\n  let espace = ''\n  if (context.isHtml) {\n    espace = '&emsp;'\n  } else {\n    espace = '\\\\qquad'\n  }\n  // Mélange les propositions du QCM sauf celles à partir de lastchoice (inclus)\n  if (exercice.autoCorrection[i].options !== undefined) {\n    if (!exercice.autoCorrection[i].options.ordered) {\n      exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions, exercice.autoCorrection[i].options.lastChoice)\n    }\n  } else { // Si les options ne sont pas définies, on mélange\n    exercice.autoCorrection[i].propositions = shuffleJusqua(exercice.autoCorrection[i].propositions)\n  }\n  elimineDoublons(exercice.autoCorrection[i].propositions)\n  if (!context.isAmc) {\n    if (context.isHtml) {\n      texte += `<br>  <form id=\"formEx${exercice.numeroExercice}Q${i}\">`\n    } else {\n      texte += '<br>'\n    }\n    for (let rep = 0; rep < exercice.autoCorrection[i].propositions.length; rep++) {\n      if (context.isHtml) {\n        texte += `<div class=\"ui checkbox ex${exercice.numeroExercice} monQcm\">\n            <input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" id=\"checkEx${exercice.numeroExercice}Q${i}R${rep}\">\n            <label id=\"labelEx${exercice.numeroExercice}Q${i}R${rep}\">${exercice.autoCorrection[i].propositions[rep].texte + espace}</label>\n          </div>`\n      } else {\n        texte += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n      if (exercice.autoCorrection[i].propositions[rep].statut) {\n        texteCorr += `$\\\\blacksquare\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      } else {\n        texteCorr += `$\\\\square\\\\;$ ${exercice.autoCorrection[i].propositions[rep].texte}` + espace\n      }\n    }\n    if (context.isHtml) {\n      texte += `<span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>`\n      texte += `\\n<div id=\"feedbackEx${exercice.numeroExercice}Q${i}\"></span></form>`\n    }\n  }\n  return { texte: texte, texteCorr: texteCorr }\n}\n\n/**\n * prend un tableau de propositions [{texte: 'prop1', statut: true, feedback: 'Correct !'}, {texte: 'prop2', statut: false, ....}\n * élimine en cas de doublon la proposition fausse ou la deuxième proposition si elle sont toutes les deux fausses.\n * @author Jean-Claude Lhote\n */\nexport function elimineDoublons (propositions) { // fonction qui va éliminer les doublons si il y en a\n  let doublonsTrouves = false\n  for (let i = 0; i < propositions.length - 1; i++) {\n    for (let j = i + 1; j < propositions.length;) {\n      if (propositions[i].texte === propositions[j].texte) {\n        // les réponses i et j sont les mêmes\n        doublonsTrouves = true\n        if (propositions[i].statut) { // si la réponse i est bonne, on vire la j\n          propositions.splice(j, 1)\n        } else if (propositions[j].statut) { // si la réponse i est mauvaise et la réponse j bonne,\n          // comme ce sont les mêmes réponses, on vire la j mais on met la i bonne\n          propositions.splice(j, 1)\n          propositions[i].statut = true\n        } else { // Les deux réponses sont mauvaises\n          propositions.splice(j, 1)\n        }\n      } else {\n        j++\n      }\n    }\n  }\n  return doublonsTrouves\n}\n\n/**\n * Lorsque l'évènement 'exercicesAffiches' est lancé par mathalea.js\n * on vérifie la présence du bouton de validation d'id btnQcmEx{i} créé par listeQuestionsToContenu\n * et on y ajoute un listenner pour vérifier les réponses cochées\n * @param {object} exercice\n */\nexport function questionNumerique (exercice) {\n  document.addEventListener('exercicesAffiches', () => {\n    const button = document.querySelector(`#btnQcmEx${exercice.numeroExercice}`)\n    if (button) {\n      button.addEventListener('click', event => {\n        let nbBonnesReponses = 0\n        let nbMauvaisesReponses = 0\n        const nbBonnesReponsesAttendues = exercice.nbQuestions\n        for (const i in exercice.autoCorrection) {\n          const spanReponseLigne = document.querySelector(`#resultatCheckEx${exercice.numeroExercice}Q${i}`)\n          // On compare le texte avec la réponse attendue en supprimant les espaces pour les deux\n          if (document.getElementById(`champTexteEx${exercice.numeroExercice}Q${i}`).value.replaceAll(' ', '') === exercice.autoCorrection[i].reponse.valeur.toString().replaceAll(' ', '')) {\n            spanReponseLigne.innerHTML = '😎'\n            nbBonnesReponses++\n          } else {\n            spanReponseLigne.innerHTML = '☹️'\n            nbMauvaisesReponses++\n          }\n          spanReponseLigne.style.fontSize = 'large'\n        }\n      })\n    }\n  })\n}\n\nexport function ajouteChampTexte (exercice, i, { texte = '', texteApres = '', inline = true, numeric = true } = {}) {\n  if (context.isHtml) {\n    return `<div class=\"ui form ${inline ? 'inline' : ''}\" >\n    <div class=\"inline  field\" >\n    <label>${texte}</label>\n      <input type=\"text\" ${numeric ? 'type=\"number\" min=\"0\" inputmode=\"numeric\" pattern=\"[0-9]*\"' : ''}  id=\"champTexteEx${exercice.numeroExercice}Q${i}\" >\n      <span>${texteApres}</span>\n      <span id=\"resultatCheckEx${exercice.numeroExercice}Q${i}\"></span>\n    </div>\n    </div>`\n  } else {\n    return ''\n  }\n}\n\n/**\n * Précise la réponse attendue\n * @param {'objet exercice'} exercice\n * @param {'numero de la question'} i\n * @param {'réponse'} a\n */\nexport function setReponse (exercice, i, a, {digits = 0, decimals = 0, signe = false, exposant_nb_chiffres = 0, exposant_signe = false, approx = 0} = {}) {\n  if (exercice.autoCorrection[i] === undefined) {\n    exercice.autoCorrection[i] = {}\n  }\n  if (exercice.autoCorrection[i].reponse === undefined) {\n    exercice.autoCorrection[i].reponse = {}\n  }\n  exercice.autoCorrection[i].reponse.valeur = a\n  exercice.autoCorrection[i].reponse.valeur = { digits, decimals, signe, exposant_nb_chiffres, exposant_signe, approx }\n}\n\nexport function exerciceInteractif (exercice) {\n  if (exercice.amcType === 4) questionNumerique(exercice)\n  if (exercice.amcType === 1) exerciceQcm(exercice)\n  if (exercice.amcType === 2) exerciceQcm(exercice) // Avec des paramètres différents ??? @jeanClaude, qu'en penses-tu ?\n}\n","// Module regroupant les fonctions de gestions des erreurs.\n\nfunction divMessage (erreur) {\n// Construit le message d'erreur pour insertion dans la page.\n  if (erreur.niveau === 'erreur') {\n    return `<div id=\"affichageErreur\" class=\"ui error message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"frown outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'warning') {\n    return `<div id=\"affichageErreur\" class=\"ui warning message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bullhorn icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n  if (erreur.niveau === 'info') {\n    return `<div id=\"affichageErreur\" class=\"ui message\"><i id=\"fermerMessageErreur\" class=\"close icon\"></i>\n    <div class=\"header\">\n      <i class=\"bell outline icon\"></i> ${erreur.titre}\n    </div>\n      ${erreur.message}\n  </div>`\n  }\n}\n\n/**\n*\n* @param {code:'code de l'erreur',[exercice : 'identifiant de l'exercice']}\n* @author Cédric GROLLEAU\n*/\nexport function messageUtilisateur (erreur) {\n  let divErreur = ''\n  if (erreur.code === 'codeExerciceInconnu') {\n    divErreur = divMessage({\n      titre: 'le code de l\\'exercice n\\'est pas valide',\n      message: `L'identifiant ${erreur.exercice} ne correspond à aucun exercice MathALEA. <br> Ceci est peut-être dû à un lien incomplet ou obsolète. `,\n      niveau: 'erreur'\n    })\n  } else if (erreur.code === 'mg32load') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module mg32',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  } else if (erreur.code === 'scratchLoad') {\n    divErreur = divMessage({\n      titre: 'Erreur de chargement du module scratch',\n      message: `Une erreur est survenue lors du chargement d'un module pour l'affichage de l'exercice. <br>\n        Essayez de rafraichir la page. <br> Si l'erreur persiste merci de contacter : <a href=\"mailto:contact@coopmaths.fr\">contact@coopmaths.fr</a>`,\n      niveau: 'warning'\n    })\n  }\n  document.getElementById('containerErreur').innerHTML = divErreur\n  document.getElementById('fermerMessageErreur').addEventListener('click', function () {\n    document.getElementById('affichageErreur').remove()\n  })\n}\n\n/**\n *\n * @param {id : 'id du div', texte: 'message', type:'error ou positive'}\n * @author Rémi ANGOT\n */\nexport function messageFeedback ({ id, texte = '', type = 'error' } = {}) {\n  const typeMessage = type || 'error'\n  if (id && texte) {\n    const html = `<div id=\"messageFeedback${id}\" class=\"ui ${typeMessage} message\" style=\"width:400px\"><i id=\"fermerFeedback${id}\" class=\"close icon\"></i>\n        ${texte}\n  </div>`\n    document.getElementById(id).innerHTML = html\n    document.getElementById(`fermerFeedback${id}`).addEventListener('click', function () {\n      document.getElementById(`messageFeedback${id}`).remove()\n    })\n  }\n}\n"],"sourceRoot":""}