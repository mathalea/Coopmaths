{"version":3,"sources":["webpack://mathalea/./src/js/exercices/6e/6G43.js"],"names":["titre","DenombrerCubes","Exercice","this","nbQuestions","nbQuestionsModifiable","nbCols","nbColsCorr","pasDeVersionLatex","pas_de_version_HMTL","sup","sup2","nouvelleVersion","listeQuestions","listeCorrections","typesDeQuestionsDisponibles","parseInt","empilementCubes","long","larg","hmax","tabHauteurs","Array","i","randint","j","Math","min","max","lstCoordonneesCubes","k","push","objetsEnonce","objetsCorrection","paramsEnonce","paramsCorrection","listeTypeDeQuestions","combinaisonListes","longueur","largeur","hauteur","texte","texteCorr","q","cpt","L","alpha","beta","cosa","cosb","sina","sinb","length","cube","cos","PI","sin","xmin","ymin","xmax","ymax","pixelsParCm","scale","mainlevee","mathalea2d","indexOf","listeQuestionsToContenu","besoinFormulaireNumerique","besoinFormulaire2Numerique"],"mappings":"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","file":"js/70917.1ecee69df8a14488743a.js","sourcesContent":["import Exercice from '../Exercice.js'\nimport { context } from '../../modules/context.js'\nimport {listeQuestionsToContenu,combinaisonListes, randint} from '../../modules/outils.js'\nimport {mathalea2d} from '../../modules/2d.js'\nimport {cube} from \"../../modules/3d.js\"\n\nexport const titre = 'Représentation de solides'\n\n/**\n* Compter des cubes\n* @author Erwan DUPLESSY\n* 6G43\n* mars 2021\n* Source : http://cache.media.education.gouv.fr/file/Geometrie_et_espace/47/1/RA16_C4_MATH_geo_espace_flash_567471.pdf\n* Compter des cubes dans un empilement de cubes\n*/\n\nexport default function DenombrerCubes() {\n  \"use strict\"\n  Exercice.call(this)\n  this.titre = titre;\n  this.nbQuestions = 3; // Ici le nombre de questions\n  this.nbQuestionsModifiable=true // Active le formulaire nombre de questions\n  this.nbCols = 1; // Le nombre de colonnes dans l'énoncé LaTeX\n  this.nbColsCorr = 1;// Le nombre de colonne pour la correction LaTeX\n  this.pasDeVersionLatex=false // mettre à true si on ne veut pas de l'exercice dans le générateur LaTeX\n  this.pas_de_version_HMTL=false // mettre à true si on ne veut pas de l'exercice en ligne\n  this.sup = 1; // A décommenter : valeur par défaut d'un premier paramètre\n  this.sup2 = 1; // A décommenter : valeur par défaut d'un deuxième paramètre\n  // c'est ici que commence le code de l'exercice cette fonction crée une copie de l'exercice\n  this.nouvelleVersion = function () {  \n    this.listeQuestions = [] // tableau contenant la liste des questions \n    this.listeCorrections = [];\n    let typesDeQuestionsDisponibles=[] // tableau à compléter par valeurs possibles des types de questions\n    switch (parseInt(this.sup)) {\n      case 1:\n        typesDeQuestionsDisponibles =[1]\n      case 2:\n        typesDeQuestionsDisponibles=[2]\n      case 3:\n        typesDeQuestionsDisponibles=[1,2]\n    }\n\n    function empilementCubes(long, larg, hmax) {\n      let tabHauteurs = new Array(larg);\n      for (let i = 0; i < larg; i++) {\n        tabHauteurs[i] = new Array(long);\n      }        \n      //premiere ligne\n      for (let i = 0 ; i < larg; i++) {\n        tabHauteurs[i][0] = randint(0,1);   \n      }\n      // deuxième ligne et suivantes\n      for (let i = 0 ; i<larg ; i++) {\n        for (let j = 1 ; j<long ; j++) {\n          tabHauteurs[i][j] = Math.min(tabHauteurs[i][j-1] + randint(0,2), hmax);\n        } \n      }\n      //Vérification Dernière Ligne : ne pas être vide.\n      for (let i = 0 ; i<larg ; i++) {\n        tabHauteurs[i][long-1] = Math.max(1, tabHauteurs[i][long-1]);\n      }\n      // Ajoute les cubes dans un tableau une dimension\n      // il faut trier les cubes : x décroissant puis y décroissant, puis z croissant\n      let lstCoordonneesCubes = [];\n      for (let i = larg-1 ; i>-1; i=i-1) {\n        for (let j = long-1 ; j>-1; j=j-1) {\n          for (let k=0 ; k < tabHauteurs[i][j]; k++)\n          lstCoordonneesCubes.push([i,j,k])\n        }          \n      }\n    return lstCoordonneesCubes;\n    } \n    \n    let listeTypeDeQuestions = combinaisonListes(typesDeQuestionsDisponibles, this.nbQuestions)\n    let objetsEnonce,objetsCorrection,paramsEnonce,paramsCorrection ;\n    let longueur = 2 + parseInt(this.sup2); // longueur de l'empilement\n    let largeur = longueur; // largeur de l'empilement\n    let hauteur = longueur; // hauteur de l'empilement\n\n    for (let q = 0, texte, texteCorr, cpt = 0; q < this.nbQuestions && cpt < 50;) {\n      objetsEnonce = [] // on initialise le tableau des objets Mathalea2d de l'enoncé\n      objetsCorrection = [] // Idem pour la correction\n\n      texte = `Un empilement de cubes est représenté ci-dessous. <br>`; // Nous utilisons souvent cette variable pour construire le texte de la question.\n      texteCorr = ``; // Idem pour le texte de la correction.      \n\n      let L, alpha, beta, cosa, cosb, sina, sinb;\n\n      // début de l'exercice\n      switch (listeTypeDeQuestions[q]) {\n        case 1:\n          texte += `Combien de petits cubes contient cet empilement de cubes ? <br>`\n          L = empilementCubes(longueur, largeur, hauteur); // crée un empilement aléatoire\n          //dessin 1\n          alpha = 30; // choix de la projection\n          beta = -25; // choix de la projection\n          objetsEnonce = [];\n          for (let i = 0; i < L.length; i++) {\n             objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta,{}));\n          }\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          paramsEnonce = {\n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(paramsEnonce, objetsEnonce) + \" \"; \n          //dessin 2\n          alpha = 15;\n          beta = -30;\n          objetsEnonce = [] ;          \n          for (let i = 0; i < L.length; i++) {\n             objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2],alpha,beta,{}));\n          }  \n          paramsEnonce = { \n            xmin:-sina*largeur-0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(paramsEnonce, objetsEnonce) + \" <br>\";\n          // correction :\n          texteCorr += \"On peut représenter l'empilement par tranches : <br>\";\n          alpha =30;\n          beta = -25;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          paramsCorrection = { \n            xmin:-3*sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: 3*cosa*longueur + 0.5, \n            ymax: -sina*sinb*3*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objetsCorrection = [];\n          for (let i = 0; i < L.length; i++) {\n              objetsCorrection.push(cube(3*L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection) + \"<br>\";   \n          texteCorr += `Il y a au total ${L.length} cubes.`;     \n        break;\n\n        case 2:\n          texte += `Combien de petits cubes manque-t-il pour reconstruire un grand cube de côté ${longueur} ? <br>`;\n          L = empilementCubes(longueur, largeur,hauteur);\n          //dessin 1\n          alpha =30;\n          beta = -25;\n          objetsEnonce = [];\n          for (let i = 0; i < L.length; i++) {\n             objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }  \n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          paramsEnonce = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(paramsEnonce, objetsEnonce) + \" \";\n          //dessin 2\n          alpha =15;\n          beta = -30;\n          objetsEnonce = [] ;\n          for (let i = 0; i < L.length; i++) {\n             objetsEnonce.push(cube(L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }  \n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          paramsEnonce = { \n            xmin:-sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: cosa*longueur + 0.5, \n            ymax: -sina*sinb*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false} ;       \n          texte += mathalea2d(paramsEnonce, objetsEnonce) + \"<br>\";\n          // correction :\n          texteCorr += \"On peut, par exemple, représenter l'empilement par tranches : <br>\";\n          alpha =30;\n          beta = -25;\n          cosa = Math.cos(alpha*Math.PI/180);\n          sina = Math.sin(alpha*Math.PI/180);\n          cosb = Math.cos(beta*Math.PI/180);\n          sinb = Math.sin(beta*Math.PI/180);\n          paramsCorrection = { \n            xmin:-3*sina*largeur - 0.5, \n            ymin: -0.5, \n            xmax: 3*cosa*longueur + 0.5, \n            ymax: -sina*sinb*3*longueur - cosa*sinb*largeur + cosb*hauteur + 0.5, \n            pixelsParCm: 20, \n            scale: 1, \n            mainlevee: false};\n          objetsCorrection = [];\n          for (let i = 0; i < L.length; i++) {\n              objetsCorrection.push(cube(3*L[i][0], L[i][1], L[i][2], alpha, beta, {}));\n          }\n          texteCorr += mathalea2d(paramsCorrection, objetsCorrection)+ \"<br>\";   \n          texteCorr += `Il y a au total $${L.length}$ cubes. On en veut $${longueur}\\\\times ${largeur} \\\\times ${hauteur} = ${longueur*largeur*hauteur}$. <br>`;\n          texteCorr += `Il manque $${longueur*largeur*hauteur-L.length}$ cubes.`  ;     \n        break\n      }\n      if (this.listeQuestions.indexOf(texte) === -1) {\n        // Si la question n'a jamais été posée, on la stocke dans la liste des questions\n        this.listeQuestions.push(texte);\n        this.listeCorrections.push(texteCorr);\n        q++;\n        }\n        cpt++;\n      }\n      listeQuestionsToContenu(this); // On envoie l'exercice à la fonction de mise en page\n    };\n  // Si les variables suivantes sont définies, elles provoquent l'affichage des formulaires des paramètres correspondants\n  // Il peuvent être de 3 types : _numerique, _case_a_cocher ou _texte.\n  // Il sont associés respectivement aux paramètres sup, sup2 et sup3.\n  \n  this.besoinFormulaireNumerique = ['Type de questions', 3, `1 : compter les cubes\\n2 : compter les cubes manquants\\n3 un mélange des deux`]\n  this.besoinFormulaire2Numerique = [\"Taille de l'empilement\",5,`3 \\n4 \\n5 \\n6 \\n7`];\n  // this.besoinFormulaire3CaseACocher =['figure à main levée',true]\n  \n  } // Fin de l'exercice.\n  "],"sourceRoot":""}